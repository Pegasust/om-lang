python3 testerator.py run --input test_bindings.pickle
FAILED: Symbol('silly', <symbols.PhonyType object at 0x7f4498af0310>) Symbol('silly', <symbols.FuncType object at 0x7f4498ac4640>)
=== input ===
func silly(x:int, y:[]int):int {
	{
		var x : int
		x = 3
		y[0+x-x] = x+x*x
		print x
		print y
	}
	{
		var y : bool
		y = x < x+2
		print y
	}
	return x
}

func fact(x:int):int {
	if x == 0 {return 1}
	else {return x * fact(x-1)}
}

func main(x:int) {
	var a : [1]int
	a[0] = 7
	print silly(x,a)
	print fact(x)
}

=== expected retval ===
Program([FuncDecl(Id(Token('ID', 'silly', Coord(6, 1))), [ParamDecl(Id(Token('ID', 'x', Coord(12, 1))), IntType(Token('int', 'int', Coord(14, 1)))), ParamDecl(Id(Token('ID', 'y', Coord(19, 1))), ArrayType(None, IntType(Token('int', 'int', Coord(23, 1)))))], IntType(Token('int', 'int', Coord(28, 1))), CompoundStmt([], [CompoundStmt([VarDecl(Id(Token('ID', 'x', Coord(7, 3))), IntType(Token('int', 'int', Coord(11, 3))))], [AssignStmt(IdExpr(Id(Token('ID', 'x', Coord(3, 4)))), IntLiteral(Token('INT', '3', Coord(7, 4))), Token('=', '=', Coord(5, 4))), AssignStmt(ArrayCell(IdExpr(Id(Token('ID', 'y', Coord(3, 5)))), BinaryOp(Token('-', '-', Coord(8, 5)), BinaryOp(Token('+', '+', Coord(6, 5)), IntLiteral(Token('INT', '0', Coord(5, 5))), IdExpr(Id(Token('ID', 'x', Coord(7, 5))))), IdExpr(Id(Token('ID', 'x', Coord(9, 5))))), Coord(4, 5)), BinaryOp(Token('+', '+', Coord(15, 5)), IdExpr(Id(Token('ID', 'x', Coord(14, 5)))), BinaryOp(Token('*', '*', Coord(17, 5)), IdExpr(Id(Token('ID', 'x', Coord(16, 5)))), IdExpr(Id(Token('ID', 'x', Coord(18, 5)))))), Token('=', '=', Coord(12, 5))), PrintStmt(IdExpr(Id(Token('ID', 'x', Coord(9, 6))))), PrintStmt(IdExpr(Id(Token('ID', 'y', Coord(9, 7)))))], None), CompoundStmt([VarDecl(Id(Token('ID', 'y', Coord(7, 10))), BoolType(Token('bool', 'bool', Coord(11, 10))))], [AssignStmt(IdExpr(Id(Token('ID', 'y', Coord(3, 11)))), BinaryOp(Token('<', '<', Coord(9, 11)), IdExpr(Id(Token('ID', 'x', Coord(7, 11)))), BinaryOp(Token('+', '+', Coord(12, 11)), IdExpr(Id(Token('ID', 'x', Coord(11, 11)))), IntLiteral(Token('INT', '2', Coord(13, 11))))), Token('=', '=', Coord(5, 11))), PrintStmt(IdExpr(Id(Token('ID', 'y', Coord(9, 12)))))], None)], ReturnStmt(IdExpr(Id(Token('ID', 'x', Coord(9, 14)))), Coord(2, 14)))), FuncDecl(Id(Token('ID', 'fact', Coord(6, 17))), [ParamDecl(Id(Token('ID', 'x', Coord(11, 17))), IntType(Token('int', 'int', Coord(13, 17))))], IntType(Token('int', 'int', Coord(18, 17))), CompoundStmt([], [IfStmt(BinaryOp(Token('==', '==', Coord(7, 18)), IdExpr(Id(Token('ID', 'x', Coord(5, 18)))), IntLiteral(Token('INT', '0', Coord(10, 18)))), CompoundStmt([], [], ReturnStmt(IntLiteral(Token('INT', '1', Coord(20, 18))), Coord(13, 18))), CompoundStmt([], [], ReturnStmt(BinaryOp(Token('*', '*', Coord(17, 19)), IdExpr(Id(Token('ID', 'x', Coord(15, 19)))), CallExpr(IdExpr(Id(Token('ID', 'fact', Coord(19, 19)))), [BinaryOp(Token('-', '-', Coord(25, 19)), IdExpr(Id(Token('ID', 'x', Coord(24, 19)))), IntLiteral(Token('INT', '1', Coord(26, 19))))], Coord(23, 19))), Coord(8, 19))), Coord(2, 18))], None)), FuncDecl(Id(Token('ID', 'main', Coord(6, 22))), [ParamDecl(Id(Token('ID', 'x', Coord(11, 22))), IntType(Token('int', 'int', Coord(13, 22))))], None, CompoundStmt([VarDecl(Id(Token('ID', 'a', Coord(6, 23))), ArrayType(IntLiteral(Token('INT', '1', Coord(11, 23))), IntType(Token('int', 'int', Coord(13, 23)))))], [AssignStmt(ArrayCell(IdExpr(Id(Token('ID', 'a', Coord(2, 24)))), IntLiteral(Token('INT', '0', Coord(4, 24))), Coord(3, 24)), IntLiteral(Token('INT', '7', Coord(9, 24))), Token('=', '=', Coord(7, 24))), PrintStmt(CallExpr(IdExpr(Id(Token('ID', 'silly', Coord(8, 25)))), [IdExpr(Id(Token('ID', 'x', Coord(14, 25)))), IdExpr(Id(Token('ID', 'a', Coord(16, 25))))], Coord(13, 25))), PrintStmt(CallExpr(IdExpr(Id(Token('ID', 'fact', Coord(8, 26)))), [IdExpr(Id(Token('ID', 'x', Coord(13, 26))))], Coord(12, 26)))], None))])
=== actual retval ===
Program([FuncDecl(Id(Token('ID', 'silly', Coord(6, 1))), [ParamDecl(Id(Token('ID', 'x', Coord(12, 1))), IntType(Token('int', 'int', Coord(14, 1)))), ParamDecl(Id(Token('ID', 'y', Coord(19, 1))), ArrayType(None, IntType(Token('int', 'int', Coord(23, 1)))))], IntType(Token('int', 'int', Coord(28, 1))), CompoundStmt([], [CompoundStmt([VarDecl(Id(Token('ID', 'x', Coord(7, 3))), IntType(Token('int', 'int', Coord(11, 3))))], [AssignStmt(IdExpr(Id(Token('ID', 'x', Coord(3, 4)))), IntLiteral(Token('INT', '3', Coord(7, 4))), Token('=', '=', Coord(5, 4))), AssignStmt(ArrayCell(IdExpr(Id(Token('ID', 'y', Coord(3, 5)))), BinaryOp(Token('-', '-', Coord(8, 5)), BinaryOp(Token('+', '+', Coord(6, 5)), IntLiteral(Token('INT', '0', Coord(5, 5))), IdExpr(Id(Token('ID', 'x', Coord(7, 5))))), IdExpr(Id(Token('ID', 'x', Coord(9, 5))))), Coord(4, 5)), BinaryOp(Token('+', '+', Coord(15, 5)), IdExpr(Id(Token('ID', 'x', Coord(14, 5)))), BinaryOp(Token('*', '*', Coord(17, 5)), IdExpr(Id(Token('ID', 'x', Coord(16, 5)))), IdExpr(Id(Token('ID', 'x', Coord(18, 5)))))), Token('=', '=', Coord(12, 5))), PrintStmt(IdExpr(Id(Token('ID', 'x', Coord(9, 6))))), PrintStmt(IdExpr(Id(Token('ID', 'y', Coord(9, 7)))))], None), CompoundStmt([VarDecl(Id(Token('ID', 'y', Coord(7, 10))), BoolType(Token('bool', 'bool', Coord(11, 10))))], [AssignStmt(IdExpr(Id(Token('ID', 'y', Coord(3, 11)))), BinaryOp(Token('<', '<', Coord(9, 11)), IdExpr(Id(Token('ID', 'x', Coord(7, 11)))), BinaryOp(Token('+', '+', Coord(12, 11)), IdExpr(Id(Token('ID', 'x', Coord(11, 11)))), IntLiteral(Token('INT', '2', Coord(13, 11))))), Token('=', '=', Coord(5, 11))), PrintStmt(IdExpr(Id(Token('ID', 'y', Coord(9, 12)))))], None)], ReturnStmt(IdExpr(Id(Token('ID', 'x', Coord(9, 14)))), Coord(2, 14)))), FuncDecl(Id(Token('ID', 'fact', Coord(6, 17))), [ParamDecl(Id(Token('ID', 'x', Coord(11, 17))), IntType(Token('int', 'int', Coord(13, 17))))], IntType(Token('int', 'int', Coord(18, 17))), CompoundStmt([], [IfStmt(BinaryOp(Token('==', '==', Coord(7, 18)), IdExpr(Id(Token('ID', 'x', Coord(5, 18)))), IntLiteral(Token('INT', '0', Coord(10, 18)))), CompoundStmt([], [], ReturnStmt(IntLiteral(Token('INT', '1', Coord(20, 18))), Coord(13, 18))), CompoundStmt([], [], ReturnStmt(BinaryOp(Token('*', '*', Coord(17, 19)), IdExpr(Id(Token('ID', 'x', Coord(15, 19)))), CallExpr(IdExpr(Id(Token('ID', 'fact', Coord(19, 19)))), [BinaryOp(Token('-', '-', Coord(25, 19)), IdExpr(Id(Token('ID', 'x', Coord(24, 19)))), IntLiteral(Token('INT', '1', Coord(26, 19))))], Coord(23, 19))), Coord(8, 19))), Coord(2, 18))], None)), FuncDecl(Id(Token('ID', 'main', Coord(6, 22))), [ParamDecl(Id(Token('ID', 'x', Coord(11, 22))), IntType(Token('int', 'int', Coord(13, 22))))], None, CompoundStmt([VarDecl(Id(Token('ID', 'a', Coord(6, 23))), ArrayType(IntLiteral(Token('INT', '1', Coord(11, 23))), IntType(Token('int', 'int', Coord(13, 23)))))], [AssignStmt(ArrayCell(IdExpr(Id(Token('ID', 'a', Coord(2, 24)))), IntLiteral(Token('INT', '0', Coord(4, 24))), Coord(3, 24)), IntLiteral(Token('INT', '7', Coord(9, 24))), Token('=', '=', Coord(7, 24))), PrintStmt(CallExpr(IdExpr(Id(Token('ID', 'silly', Coord(8, 25)))), [IdExpr(Id(Token('ID', 'x', Coord(14, 25)))), IdExpr(Id(Token('ID', 'a', Coord(16, 25))))], Coord(13, 25))), PrintStmt(CallExpr(IdExpr(Id(Token('ID', 'fact', Coord(8, 26)))), [IdExpr(Id(Token('ID', 'x', Coord(13, 26))))], Coord(12, 26)))], None))])
=== expected stdout ===

=== stdout ===

=== expected stderr ===

=== stderr ===

---
0 / 1 correct
