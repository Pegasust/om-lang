[
  "",
  "func ID ( ID : bool ) : int { var ID : [ 123 and ( ID ) and - false ] int var ID : [ ] int }",
  "func ID ( ) { ID [ - - true / ( 123 / ID [ 123 ] [ ID ] ) ] [ ID ] = - ( - ID ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ( - ID ( ) * 123 / ID ) ] [ ] [ ] [ ] int var ID : [ ] bool }",
  "func ID ( ) : bool { var ID : int { var ID : [ ] int ID = ID ( ) print - ( - ( - true ) ) } }",
  "func ID ( ID : bool ) : bool { var ID : int var ID : bool { var ID : bool var ID : [ - 123 ] bool } }",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : [ ] [ - ( - ( - ( ( - - 123 ) ) ) ) ] bool var ID : bool }",
  "func ID ( ) { var ID : bool { ID ( ) = - ID [ - - ( ID ) ] call ID ( ) } }",
  "func ID ( ) { var ID : int call ID ( false / ID ( ) * true + - ( - ID ) - ( - - ID ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ID * - ID [ - - ( ID ) ] ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : [ true + ID ( ) [ ( 123 ) ] - - ( ID ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { print ID [ - ( ( ( true ) ) ) ] print ID }",
  "func ID ( ) { } func ID ( ) : [ ] [ ] int { call ID ( ) ID ( ) [ - - - ( - ID ) ] = true }",
  "func ID ( ) { var ID : bool return true - false * - - ID ( 123 ) }",
  "func ID ( ) { var ID : bool if ( ( - ID / true * ID ) ) { } { } }",
  "func ID ( ) { if ( ID ( ) [ ( true ) ] [ - 123 ] ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID [ - ID ( ID ) ] ] int ) { }",
  "func ID ( ) { while 123 or - 123 / - ( ( 123 ) ) / - true { } { } } func ID ( ) { }",
  "func ID ( ) { var ID : int } func ID ( ) : int { print false / ( ( true ) ) }",
  "func ID ( ID : bool , ID : int , ID : bool ) { { var ID : int call ID ( ID ) while - - false { } } }",
  "func ID ( ID : [ ] int , ID : [ ] [ ] int ) : bool { var ID : bool }",
  "func ID ( ) : bool { if - ID ( - ID ( ) [ false ] [ - true ] ) { } ID = ( ( - ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ) { call ID ( ) print true return - ( ( - 123 ) ) } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool } func ID ( ID : int , ID : int , ID : [ ] int ) : int { }",
  "func ID ( ID : [ 123 * 123 - - true / - ID ( ) [ ID ] [ ID ] + ( 123 ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ID [ 123 - ( ID ( ) [ ID ] ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool ) { call ID ( ) call ID ( - ( 123 ) ) }",
  "func ID ( ) { var ID : bool return ( ( ID * ID ( ) ) ) } func ID ( ) { }",
  "func ID ( ID : [ - true / ( ( true * ID ( ) * - ( 123 ) ) ) * ID ] [ ] bool ) { }",
  "func ID ( ID : int , ID : [ ID ( ID ( ) [ false ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) { return 123 + ID [ ( - false ) ] [ true ] - ( ( - ID ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ ] bool , ID : int ) { var ID : bool if false + ( - ID ) { } }",
  "func ID ( ID : bool , ID : int , ID : int ) { }",
  "func ID ( ) { var ID : int var ID : bool call ID ( ) return ID ( - - 123 ) }",
  "func ID ( ID : int , ID : int , ID : bool ) : int { }",
  "func ID ( ID : int , ID : bool , ID : [ 123 / - ( - ID ( - ID ) ) ] [ ] int ) { }",
  "func ID ( ID : [ ] bool ) { var ID : [ ( ID [ - - - ( - - - true ) ] ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { { return } return }",
  "func ID ( ) : bool { var ID : int var ID : [ ] [ 123 * - true / - true ] [ ] [ ] bool }",
  "func ID ( ID : [ false / - ( false or - ID * 123 / ( - ID ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID ( - ( ID [ ID ] [ ( - ( ( - ( ( ( ID ) ) ) ) ) ) ] ) ) ] bool ) { }",
  "func ID ( ID : int , ID : bool ) : [ ] bool { var ID : [ false / ID [ - ( - ID ) ] [ ID ] * - - ( ( ( - ( ID ) ) ) ) ] int var ID : [ ] bool }",
  "func ID ( ID : [ true and ID ( ) [ 123 / ( - ID ) / 123 ] [ true ] and false ] bool ) { } func ID ( ) { }",
  "func ID ( ) { while ID [ 123 / true ] + ( false ) { } while ( ID ) { } }",
  "func ID ( ) : [ - 123 < ID ( ) and - ID ( ) [ 123 ] [ ID ] ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID [ ID [ ID [ - - true ] ] [ ( - ( - ( false ) ) ) ] ] [ - ID ] ] int ) { } func ID ( ) { }",
  "func ID ( ) { while - 123 * 123 / ( ( ID [ ID ] ) ) { } }",
  "func ID ( ) : int { call ID ( ) ID ( false / 123 + ( 123 ) ) = ( true ) } func ID ( ) { }",
  "func ID ( ) { { var ID : [ ] int var ID : [ 123 + - ID ( ) + ( ID ) ] bool } }",
  "func ID ( ID : [ - - false / - ( - - false / - ( - ( ( - 123 ) ) ) * false ) ] [ ] bool ) { }",
  "func ID ( ) { var ID : int var ID : int return ID ( ( ( 123 ) ) ) }",
  "func ID ( ) : [ ] int { var ID : int } func ID ( ID : bool ) : bool { var ID : [ 123 ] [ ] int var ID : [ ] [ ] int }",
  "func ID ( ID : int , ID : int , ID : bool ) : [ ID ( ( true ) ) ] int { }",
  "func ID ( ID : bool , ID : bool , ID : [ false and ( - true / true ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) : bool { var ID : int var ID : [ - ( - false ) ] bool }",
  "func ID ( ) : int { var ID : bool var ID : bool print ( ( - ( true ) ) ) }",
  "func ID ( ) { return ID ( ( 123 / - ID [ 123 ] [ ID ] * ID ) ) }",
  "func ID ( ID : int , ID : [ ] int ) { var ID : int if ( false / ID / false ) { } } func ID ( ) { }",
  "func ID ( ) : [ ] int { while - - ( - false / ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) : bool { if 123 + false * true + - ID { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int { var ID : bool var ID : [ ] int print ID } { } }",
  "func ID ( ) { var ID : int call ID ( - ID ( ( ID ) ) ) if false { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool print ( - - true - ID ( ) [ false ] ) ID = ( 123 ) }",
  "func ID ( ) : [ ] [ - ( ID [ ID ( ) [ true ] ] [ - ( - - ( - ID ) ) ] ) ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool return ID / true - true * - - - ID }",
  "func ID ( ) { { var ID : bool print true * false + - ID ( false ) - ID } }",
  "func ID ( ID : bool ) : bool { var ID : int call ID ( ) while ID [ ( ( - ID ) ) ] { } }",
  "func ID ( ID : [ ] [ 123 + ID [ ID / ID ( ) * - - ID ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ true - - - ID ( - - ID [ ( ID ) ] [ - ( - - 123 ) ] ) - false ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : int var ID : int call ID ( ) call ID ( ) return - 123 }",
  "func ID ( ID : int ) : bool { } func ID ( ID : bool ) { var ID : bool return }",
  "func ID ( ID : [ ] bool , ID : [ false * ID [ - ( - - 123 ) ] [ ( - 123 ) ] * 123 ] [ ] int , ID : [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : int ) { var ID : bool print ID [ - ID ] [ false ] print ID }",
  "func ID ( ) : [ - - ID ( ) / ( ( 123 / false * ID ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID : bool ID [ ID [ - ( 123 ) ] ] [ - ID ] = ID } func ID ( ) { }",
  "func ID ( ) { var ID : bool { var ID : [ ] [ ] [ - - ID [ ID ] ] [ ] [ ] bool } while - ID { } }",
  "func ID ( ) { var ID : [ ( ( ID [ ID ] [ false ] ) ) ] int }",
  "func ID ( ID : int , ID : [ ] [ ] int , ID : bool ) : int { var ID : int var ID : [ 123 ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : [ ] bool return } func ID ( ) { print ID if ID { } }",
  "func ID ( ) { var ID : int var ID : [ ] bool print ID ( ) * ( 123 ) / - ID } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID ( ) [ ( - true / true ) ] ] [ ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] int ) : bool { } func ID ( ) : bool { var ID : [ ] int }",
  "func ID ( ) : [ ] bool { var ID : bool var ID : bool while - ( true * 123 ) { } } func ID ( ) { }",
  "func ID ( ID : [ - 123 * false / ID [ true * ( ( ID ) ) * false ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int var ID : [ ] [ ] int }",
  "func ID ( ID : int ) { } func ID ( ) : int { var ID : int var ID : bool print ( ID ) print - ( ID ) }",
  "func ID ( ) { var ID : [ ID ( ) [ ID [ ( ( ID ) ) ] ] ] [ ] int } func ID ( ) { }",
  "func ID ( ) { while false / ( ID / ID ( ) + - ( ID ) - ( - - - ID ) ) * - ( ( false ) ) { } } func ID ( ) { }",
  "func ID ( ) { call ID ( ) } func ID ( ) : int { var ID : [ ] bool var ID : [ ] int }",
  "func ID ( ID : int ) { var ID : int var ID : bool return } func ID ( ) : [ ] bool { var ID : [ ] int var ID : int }",
  "func ID ( ) : [ ( - true / ( - - ( true ) ) ) ] int { }",
  "func ID ( ID : [ true - ( - ID ( ( 123 ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ] int print false * - ID / - true print ID } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : int { var ID : bool call ID ( ( ID ) ) ID = ( ( true ) ) }",
  "func ID ( ID : [ ] int ) : [ ] [ ] [ false * true - ( ID ) - 123 ] int { }",
  "func ID ( ) { var ID : bool var ID : [ - false - ( 123 * - true * ID ) ] bool } func ID ( ) { }",
  "func ID ( ID : [ ( false - ID [ ( false ) ] [ - true ] + ( ( true ) ) ) ] [ ] int ) { }",
  "func ID ( ) : bool { call ID ( ) return } func ID ( ) : [ ] bool { var ID : int var ID : int }",
  "func ID ( ID : bool ) { var ID : int var ID : [ ] bool call ID ( ) print - ( false ) }",
  "func ID ( ID : bool ) { return } func ID ( ) { return ID ( ( 123 ) ) }",
  "func ID ( ) { var ID : int print ( ID * ID ( ) [ - 123 ] [ ID ] / ID ) }",
  "func ID ( ) { var ID : bool { var ID : int return } }",
  "func ID ( ) : int { while 123 / ID [ ( - false ) ] { } } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] [ ] bool { var ID : [ false / ID ( ) / ID ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { while - - - 123 / - false / true - - true - true { } while 123 { } } func ID ( ) { }",
  "func ID ( ) : bool { print - 123 / - ID ( ( - - - ID ) ) / true while ( ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ID [ true + - 123 - 123 ] ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int return ID ( - ( - ID ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int print false - - ID / ID [ ID ] [ ( ID ) ] if false { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID ( false / ID ( ) * ( - false ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { var ID : int var ID : int call ID ( ) while ( ID ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int return } func ID ( ) : [ - ID ( ID ) ] [ ] [ ] [ ] int { }",
  "func ID ( ) : int { var ID : [ ] [ - 123 * ( ID ( ( ID ) ) ) / true ] bool var ID : bool }",
  "func ID ( ) : [ ] [ ] int { var ID : int var ID : [ ] bool ID ( ) [ ID ] = 123 print - true } func ID ( ) { }",
  "func ID ( ) : [ ( ( false / ( ID * ( - true ) / - - false ) * ID ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int print true * false + - ( ( 123 ) ) - ( ID ) while ID { } }",
  "func ID ( ) : int { var ID : [ true - false * ( ID ( ) ) - ( ID ) ] [ ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool while ( ( true / ID * true ) ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int ) : int { } func ID ( ID : int , ID : int , ID : bool ) : bool { var ID : int var ID : int }",
  "func ID ( ID : int ) { var ID : int { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) : [ ID ( ) [ 123 / - 123 ] ] int { }",
  "func ID ( ID : int , ID : int ) { var ID : [ - ID * ID [ true ] ] int var ID : bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : int if ID [ - - ( ID ) ] { } while ( - - ID ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : bool call ID ( false + true ) if - - - 123 { } }",
  "func ID ( ID : [ ( - - ( ( ID ( ) ) ) ) ] [ ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : int return ( true * ( ( - true ) ) * ID ) } func ID ( ) { }",
  "func ID ( ) { if ID ( ( true / 123 * false ) ) { } }",
  "func ID ( ) { return ( - ( false / true / false - - ( false ) - - ID ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ - ID * - true / false or ( ( - false ) ) or - ( ID ) ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : bool print true and ID * ID / ( ID ) and - false print - ( ( 123 ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ID ( ) [ ( - ( ( - ID ) ) ) ] ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : int call ID ( - ID ( ) >= - ID ) }",
  "func ID ( ID : int , ID : [ ] int , ID : bool ) { var ID : bool var ID : bool if - ( true ) { } }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool var ID : bool ID ( ID ( ID ) ) = ( 123 ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) : [ ID [ ID [ ( ID ) ] ] ] bool { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int return ID ( ID - ( false ) + - - - false ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool { return - - - true * - ID * - - false } } func ID ( ) { }",
  "func ID ( ) : int { while - ID [ ID ( ) * ID [ true ] ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ - false * false ] [ ] bool var ID : int call ID ( ) ID = - ID } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] [ ] int var ID : bool ID [ ( ( ID ) ) ] = - - ( - false ) } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : int { var ID : int var ID : [ ( false + false ) ] int }",
  "func ID ( ID : int , ID : [ ] int , ID : int ) { { var ID : int return ID } } func ID ( ) { }",
  "func ID ( ) { { var ID : [ ] int var ID : int } print ( - ( 123 ) ) } func ID ( ) { }",
  "func ID ( ) : [ - true + - - ID ( ID ( 123 ) ) - true ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ true * false + false * - ID ( ) [ ( 123 ) ] [ ID ] - ( false ) ] bool , ID : [ ] [ ] int ) { }",
  "func ID ( ID : [ true / true + ( 123 * true * ID ( ) ) + true ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ ] int , ID : bool , ID : [ ] [ ID [ ID ] [ ( 123 ) ] ] [ ] [ ] int ) { }",
  "func ID ( ) : int { var ID : int var ID : bool return false / - ( - ID ) / ( ( false ) ) } func ID ( ) { }",
  "func ID ( ) : [ ( ( ID ( ) [ - ( ID ) ] [ ( false ) ] ) ) ] [ ] int { }",
  "func ID ( ) : [ ID ( - - false / ( ID ( ) ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : [ true + ( - ( - ID [ ID ] [ 123 ] ) ) - true ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool ) : [ ( - ID * true >= ( 123 ) ) ] [ ] [ ] [ ] [ ] int { }",
  "func ID ( ID : [ ( - - - ( - ID ( ( ( - ID ) ) ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { print - true * ID ( - ID [ false ] [ false ] ) }",
  "func ID ( ID : bool , ID : int , ID : [ - - ID < ( ID ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { return } func ID ( ID : int , ID : int , ID : bool ) : [ ] bool { }",
  "func ID ( ) : int { var ID : [ ] int var ID : bool print true - ID [ ( false ) ] [ ID ] + ID }",
  "func ID ( ID : bool , ID : [ ] bool , ID : bool ) { var ID : [ ( - ID ) ] bool }",
  "func ID ( ID : int , ID : int , ID : bool ) : bool { var ID : [ ( true / ID ) ] int var ID : [ ] [ ] [ ] int }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ID : int var ID : int while ( false ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : int call ID ( ) { var ID : [ ] int var ID : [ ] bool } } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int var ID : bool print true - - ( ( - ID ) ) + - ( false ) } func ID ( ) { }",
  "func ID ( ID : [ ( - ( - 123 / true / - - - ( 123 ) ) ) ] bool ) { }",
  "func ID ( ) { var ID : [ ] int var ID : int call ID ( ) print false / ID ( ) }",
  "func ID ( ) : int { var ID : [ ] bool ID [ ID [ ( ( ID ) ) ] ] [ ( ID ) ] = ( ( - true ) ) ID = true }",
  "func ID ( ID : int , ID : int ) : int { var ID : [ ] int }",
  "func ID ( ) : bool { var ID : int if ( - - false * - - ( ( - - true ) ) / ( ID ) ) { } }",
  "func ID ( ID : int , ID : int ) : [ ] int { var ID : [ false / - ID [ 123 ] [ true ] ] bool var ID : int }",
  "func ID ( ID : [ ] int ) : bool { var ID : [ true + ID ( ) [ ID ] + - true ] bool }",
  "func ID ( ID : bool , ID : [ - false * false < ( 123 + false ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( true / ID / ( true ) ) ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { { return ( ID * - true - - 123 - - true ) } ID = ID }",
  "func ID ( ) { var ID : bool } func ID ( ) : int { var ID : [ ] int var ID : [ ] int call ID ( ) }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ ID and 123 * ID ] int var ID : int }",
  "func ID ( ID : bool , ID : int , ID : int ) : [ ( 123 * ( ( - ID ) ) / ( ( 123 ) ) ) ] [ ] [ ] int { }",
  "func ID ( ) { var ID : bool while - ID - false - ( ID ) { } ID = ( - ID ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : bool { var ID : bool { return ( ID ) } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int while 123 / ( ID ( - ( false ) ) ) / - false { } while ( - ( ID ) ) { } }",
  "func ID ( ) { var ID : [ - true / ( - ID [ - - ( - - ID ) ] ) ] int var ID : bool } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) : int { var ID : [ 123 / false * true ] bool var ID : int }",
  "func ID ( ) : int { var ID : int var ID : bool while true * true + ( ( - ( - ID ) ) ) + ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : int print true / ID ( ) - - ID ( ) [ 123 ] [ 123 ] + ( - ID ) { } } func ID ( ) { }",
  "func ID ( ) : [ ] [ ID [ ID ( - - false ) ] ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : [ ] [ 123 / ( - ( 123 * ( true ) * ID ) ) ] int { }",
  "func ID ( ID : bool , ID : int ) : bool { var ID : int var ID : [ ID ( true ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ - false / ID [ - true * 123 * true ] * 123 ] bool ) { }",
  "func ID ( ID : bool ) : [ ] bool { if ( ID [ ID ] ) { } } func ID ( ) { }",
  "func ID ( ID : [ - 123 - ID [ - - - - ( ( ID ) ) ] [ - true ] ] bool ) { }",
  "func ID ( ) : int { var ID : bool var ID : int } func ID ( ) { { var ID : [ ] [ ] int } print 123 }",
  "func ID ( ID : int , ID : [ ] [ true / ID ( ID ( ( ID ) ) ) * ID ] bool ) { }",
  "func ID ( ) { var ID : [ 123 - 123 * true and ID ( false ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] bool call ID ( - false - ( ID ) - - - true ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) : int { var ID : bool var ID : int { var ID : int ID = - true } } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int var ID : bool ID = 123 / ( ( true ) ) }",
  "func ID ( ) { var ID : bool var ID : [ ] [ ( - ( - true ) ) ] int }",
  "func ID ( ID : bool , ID : [ - 123 / ( ID ( ID ) ) * - ( ID ) ] int , ID : bool ) { }",
  "func ID ( ) { ID ( ) [ ( ID [ ( false ) ] ) ] = ID ID = - 123 } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : int var ID : int ID [ false * - - - - ID * ( - 123 ) ] = ID ID = ID }",
  "func ID ( ) { print 123 / 123 * 123 + ( ID ( ) + ( false ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ( ( false / - ( ( ( - true ) ) ) * ( ( - 123 ) ) ) ) ] [ ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : int } func ID ( ) { return - true * ( - ( ID ) ) / false }",
  "func ID ( ID : bool ) { }",
  "func ID ( ) { var ID : int return ( true and - ID [ - false ] [ ID ] ) } func ID ( ) { }",
  "func ID ( ID : bool ) { while ID [ - ID [ 123 ] [ ID ] ] [ true ] { } print ( 123 ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : [ ID ( - - ( true ) ) ] int } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) : int { var ID : bool var ID : int { } } func ID ( ) : bool { }",
  "func ID ( ) { var ID : int while - false * ( ID ( ID ) ) { } { } } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ - ( ( false / ( 123 ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int { var ID : int print - false * - - false / ( true ) if - ID { } } } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] bool { var ID : [ ] bool if - - ID [ - ( ID ) ] [ ID ] { } } func ID ( ) { }",
  "func ID ( ) { return ID ( ) [ 123 + - - ( - 123 ) - - 123 ] [ true ] }",
  "func ID ( ID : [ ] bool , ID : bool , ID : int ) : bool { var ID : [ ID ( ) [ ID ] ] bool var ID : bool }",
  "func ID ( ID : bool ) { var ID : int { var ID : [ ( ID [ - 123 ] [ ID ] ) ] [ ] [ ] [ ] bool var ID : int } { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] bool }",
  "func ID ( ) : [ - ID [ ID ( ) [ true * ( ( 123 ) ) ] [ ID ] ] ] int { }",
  "func ID ( ID : bool , ID : int ) { ID [ ID ( ) [ ID ] [ - - ( 123 ) ] ] = 123 call ID ( ) } func ID ( ) { }",
  "func ID ( ) : int { print - ID ( 123 * - ( true ) ) call ID ( ) }",
  "func ID ( ) { var ID : int print false and ( ( ID ) ) and ID } func ID ( ) { }",
  "func ID ( ID : bool ) { return }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : int { var ID : bool call ID ( ) while - 123 { } } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : bool var ID : bool } func ID ( ) : [ ] int { var ID : bool var ID : bool }",
  "func ID ( ) { if 123 + ID ( ) [ - ( - ( ( ( true ) ) ) ) ] [ - ID ] - false { } }",
  "func ID ( ID : bool , ID : [ true * false or false * ( - ID ) ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] [ ] bool { ID = ( - ID ) }",
  "func ID ( ) { if 123 / ID ( ID [ ID ] ) { } while ( - ID ) { } }",
  "func ID ( ) : [ - ( ( ID [ - ID ] [ ID ] ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : int { var ID : int var ID : bool } func ID ( ) : int { return }",
  "func ID ( ID : [ ID [ - - - ( ID ( ( ( ID ) ) ) ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ - - - - - false / ( - ( true ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { while ( ID ( ) [ - ID ( ) ] [ ID ] ) { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int while ( ( ID [ true ] [ true ] ) ) { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool } func ID ( ) { var ID : bool }",
  "func ID ( ID : [ ] bool ) : int { print - false and - ( - false ) }",
  "func ID ( ) : int { var ID : [ ID / false - ID ( ) * ( - ID ) / ID ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int ) : bool { { call ID ( - ( - ( 123 ) ) ) call ID ( ) } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : [ ] bool ID ( 123 / - ID / - true ) = ( ( ID ) ) if - ( ( - - - 123 ) ) { } }",
  "func ID ( ID : bool ) : int { print true * false + ID ( ) [ ( - ( ( ID ) ) ) ] + ( ID ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ false - ID ( - ID [ - ID ] [ ( ID ) ] ) - ( 123 ) ] int ) { }",
  "func ID ( ) { var ID : int var ID : [ ] bool call ID ( ( false / ( true ) ) ) }",
  "func ID ( ) : bool { if ID ( - ( ( ( ( ID ) ) ) ) ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { { var ID : bool var ID : int { } return ID ( - true ) } print false }",
  "func ID ( ) : [ 123 and ( false + ( ( true ) ) + true ) and - ( 123 ) ] int { }",
  "func ID ( ) : int { var ID : bool if ID ( ID ( false ) ) { } print 123 }",
  "func ID ( ) { var ID : bool print - - - ID ( false * ( ID ) ) print 123 } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] bool { var ID : int var ID : bool } func ID ( ) : [ ID ] int { }",
  "func ID ( ID : int , ID : [ true * ID [ ID [ 123 ] [ - false ] ] [ ( - 123 ) ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ false / false * ( - - ID ) ] [ ] bool ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : [ ID ( ) * ( ( - ID ) ) / ID ] int ) { }",
  "func ID ( ) : [ - - true / ID ( ID ( ) >= ID ) ] int { }",
  "func ID ( ID : int , ID : bool ) : int { }",
  "func ID ( ) { var ID : bool ID = - false * ID / false - ( true ) + true ID = - ( - ( false ) ) }",
  "func ID ( ) : bool { return false * ( false * - ( ( ID ) ) / ( - ID ) ) }",
  "func ID ( ID : bool , ID : bool , ID : int ) { return } func ID ( ID : [ ] [ ID ] [ ] int ) { }",
  "func ID ( ) { var ID : int } func ID ( ) : [ - true * ( true ) * - - - ( true ) ] bool { }",
  "func ID ( ID : [ ( ID and - - 123 * - true - ID - ID ) ] bool ) { }",
  "func ID ( ) : int { var ID : int var ID : bool if - ( ID * false / ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ 123 / ( true + - ID ( ) [ ID ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { print - ( - 123 * - 123 + - ID ( ) ) }",
  "func ID ( ) : int { var ID : int return false * - ( false * - ( ID ) ) / 123 } func ID ( ) { }",
  "func ID ( ID : [ ( ID [ - true * ID / - true ] ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ( false / ID [ 123 ] * 123 ) ] int ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) { var ID : bool var ID : bool return ( ( ( ( true ) ) ) ) }",
  "func ID ( ID : [ - ID ( ) [ ( - - ID [ false ] [ true ] ) ] [ ( - ID ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ( ( 123 - true - - ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : bool { var ID : bool return }",
  "func ID ( ID : [ ] [ false * ( - ( ( false ) ) ) * ID ] bool ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : bool { if true / false / false - ( false ) { } ID = ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ) : bool { } func ID ( ID : int , ID : int ) { print ID + ( - ID ) + true }",
  "func ID ( ) { var ID : [ false / - ( - ( ID ) ) ] int }",
  "func ID ( ) { while ID ( ) [ - 123 - ( ( - - - - ID ) ) ] { } print ( - false ) } func ID ( ) { }",
  "func ID ( ) : [ ID ( false / ( 123 * ( ID ) * ID ) ) ] bool { }",
  "func ID ( ) { var ID : bool var ID : [ ID ( ) [ false / ( false ) / ID ] ] [ ] [ ] int }",
  "func ID ( ID : [ ] bool , ID : bool ) { var ID : [ ID [ false / ID ] ] [ ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : int if ID [ ( ( ( - - 123 ) ) ) ] { } } func ID ( ) { }",
  "func ID ( ID : [ true * ( 123 / ID [ - ( 123 ) ] [ - 123 ] ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) : int { { print ( - ( - - - ( - ( - ( ID ) ) ) ) ) } } func ID ( ) { }",
  "func ID ( ID : int ) { ID [ ID ( - false * ( ( - ( 123 ) ) ) ) ] [ - - - ID ] = ( 123 ) } func ID ( ) { }",
  "func ID ( ) : bool { if - 123 and ( ID [ ID ] [ false ] ) { } } func ID ( ) { }",
  "func ID ( ID : int ) { }",
  "func ID ( ) : int { var ID : bool var ID : bool return - 123 / ID / - - ID }",
  "func ID ( ) { var ID : int if ( - - true * - ID [ - 123 ] [ - 123 ] ) { } } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : bool var ID : bool }",
  "func ID ( ID : [ ] [ ] int , ID : [ ID ( ) [ false * ( - true ) * - ( - - 123 ) ] ] [ ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] bool ) { var ID : int ID ( ) [ ( ( 123 ) ) ] [ ID ] = 123 } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { return }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { var ID : int var ID : bool while ID / - - ( - ( - ( false ) ) ) / false { } }",
  "func ID ( ) { { var ID : [ false * ID [ ( - - 123 ) ] / - - ( ID ) ] [ ] [ ] bool var ID : int } } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) { var ID : int var ID : int { var ID : [ - - ( true ) ] bool var ID : int } ID = ( ( true ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int ) : int { var ID : [ ] bool call ID ( ) while ID { } }",
  "func ID ( ) { if - ID [ ( ( ID ) ) ] [ true ] { } } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : bool { var ID : [ ID ( ) [ ( - ( ID ) ) ] [ ( ID ) ] ] int var ID : int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] [ - ID ( ) / true / false ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : bool ID ( 123 * - false ) = ( ID ) if ID { } }",
  "func ID ( ) { var ID : int print true * ID + - ( ( - ( - false ) ) ) + - - ID } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool ID [ true / ID [ ID ] [ - ( - - - ( ( ID ) ) ) ] ] [ true ] = ( ( ( 123 ) ) ) }",
  "func ID ( ) { var ID : [ ] [ ] [ ] bool } func ID ( ) : int { var ID : bool var ID : int }",
  "func ID ( ID : int , ID : [ ] bool ) : [ ] int { var ID : [ ] int call ID ( ID ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ ( - ID ( ) [ - ( false ) ] [ - 123 ] ) ] [ ] int ) { }",
  "func ID ( ID : int , ID : int ) { if ( - ID * true and ID ) { } if - 123 { } }",
  "func ID ( ID : int ) { print true / ID [ ( - - false ) ] [ false ] / 123 ID = ID }",
  "func ID ( ) : [ ] [ ] [ true - ( 123 / true + false ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : int while ( true / ( ( true ) ) ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : int return ( false / - - 123 ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ID : int ) { var ID : [ ] bool var ID : bool ID ( ) = - ( ID ) print - - ID } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool return } func ID ( ) : bool { var ID : bool }",
  "func ID ( ) { var ID : int var ID : [ true * 123 + ( ( - ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ) : [ - ( ( 123 or ( ID ) or ( - - ( true ) ) ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : bool ID ( ID - ID ( ) ) = ID { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID ( - - ( ( ( 123 ) ) ) ) ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : [ ID / ID ( ID ) * - ( true ) ] [ ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int { var ID : bool call ID ( false / - ID / true ) call ID ( ) } }",
  "func ID ( ID : int ) { var ID : bool var ID : bool if ID ( ) [ ( ID ) ] [ 123 ] { } }",
  "func ID ( ID : int , ID : bool , ID : [ ] [ ] [ ] bool ) { if - ( ID ) { } ID = ( ID ) } func ID ( ) { }",
  "func ID ( ) { return 123 * - true / ID ( - 123 * false ) }",
  "func ID ( ID : int ) { { var ID : bool if - ( ID ( ) ) { } { } } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] [ ] bool { var ID : bool if ( false ) { } } } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool var ID : [ - - - true * false - ID + ID ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool ) { var ID : [ ] bool }",
  "func ID ( ID : bool ) : [ ] int { return false and - ID ( ) and - - ID } func ID ( ) { }",
  "func ID ( ID : int ) : [ false - ID ( false * ID [ - ID ] [ ( ID ) ] ) ] [ ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : bool ) { call ID ( ( - ID [ ID ] [ - ( - 123 ) ] ) ) if ( true ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( false / ( ID ( ( false ) ) ) ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : bool ID ( ) = - ID [ - ID ( ) ] [ false ] if - false { } }",
  "func ID ( ) : int { var ID : int { var ID : int var ID : [ ] [ - - ID ] bool } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool }",
  "func ID ( ) : [ ( ( false <= 123 * ID ( ) / ID ) ) ] bool { }",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) { var ID : bool if ID [ false ] { } }",
  "func ID ( ID : int , ID : bool , ID : bool ) { call ID ( ( - false ) ) ID = ( ( - - - ID ) ) }",
  "func ID ( ID : [ - ( false + - ( ( 123 ) ) ) ] [ ] [ ] int ) { }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : int { var ID : bool return } print ID } func ID ( ) { }",
  "func ID ( ID : [ ( ( ( ( ID ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : int call ID ( ( ( - ID ) ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { call ID ( ) return ID ( ) [ ( ID ) ] [ ID ] } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int ) { var ID : [ ] bool while ( ( 123 ) ) { } if - ( ID ) { } }",
  "func ID ( ID : [ ( ID ( ) [ - ( ID ) ] [ ( ( 123 ) ) ] ) ] bool ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : bool while ID ( ) [ - - - ID ] [ - ID ] { } call ID ( ) }",
  "func ID ( ID : int , ID : [ ID ( ID and - ( - ( 123 ) ) and ID ) ] bool , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ( - true + ID [ false * 123 / ID ] [ ID ] ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ] int ) { var ID : [ ] [ ] bool var ID : bool while - ID { } }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var ID : [ false / ( ID ) / - ( 123 ) ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ID [ - ID ( - ( false ) ) ] [ true ] ] bool var ID : bool }",
  "func ID ( ) : bool { if ID [ ( - true / - - ID / 123 ) ] [ ID ] { } } func ID ( ) { }",
  "func ID ( ) { return ID ( ) [ ID ( - false / - true / ( ID ) ) ] [ ( ID ) ] }",
  "func ID ( ) : int { var ID : [ ] [ ] int var ID : [ ID [ - ID ] [ ID ] ] [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] bool while ( ID [ 123 ] ) { } print ( true ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ 123 and ID [ 123 * - ( - ID ) / ID ] [ 123 ] and ID ] [ ] [ ] int , ID : bool ) { }",
  "func ID ( ) : bool { while ID ( ) [ ID ( ) [ ID ] ] [ - ID ] { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : int return } func ID ( ID : int , ID : [ ] bool , ID : [ ] int ) { }",
  "func ID ( ID : int ) { var ID : bool var ID : [ ] [ ] [ - ( ID ) ] bool }",
  "func ID ( ) : int { var ID : bool var ID : [ true - - ID ( false ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : bool { return ID ( ) [ true - true or - ID or - - - ( - ( false ) ) ] } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { return ( - ( ID / ( ( ( ( - ( false ) ) ) ) ) * ( ( ID ) ) ) ) }",
  "func ID ( ID : [ ] [ ID [ false / - 123 != ID ] [ true ] ] [ ] [ ] bool ) { }",
  "func ID ( ) : bool { var ID : int ID ( ) [ - ID <= ID [ ID ] ] [ true ] = - false if - ID { } } func ID ( ) { }",
  "func ID ( ) : bool { while ID ( ) - false + - 123 * ID ( ) / 123 { } }",
  "func ID ( ) { var ID : int return } func ID ( ) { return - false / false * ( ID ) }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : bool var ID : [ false ] [ ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : [ - - ( 123 / - ID / ID ) ] bool } func ID ( ) { }",
  "func ID ( ID : int ) : [ false + ID ( - - ID [ true ] [ - true ] ) - true ] [ ] int { }",
  "func ID ( ) : bool { var ID : bool call ID ( ) return ( true == ID ) }",
  "func ID ( ) { call ID ( ID * - ( ( ID ( ) ) ) / ID ) }",
  "func ID ( ID : bool , ID : bool , ID : [ ] bool ) : bool { var ID : int }",
  "func ID ( ID : bool , ID : int ) : int { var ID : bool call ID ( ) return }",
  "func ID ( ID : [ ] int ) { var ID : [ ] int var ID : bool print ID ( ID ) print ( false ) }",
  "func ID ( ID : bool , ID : [ ] [ ] bool ) : [ ID ( ) * ID ( ) * ( ID ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) { { ID ( ) [ ( true + ( - true ) + ( - ID ) ) ] = ID call ID ( ) } print - ID }",
  "func ID ( ID : [ false * 123 / - - 123 >= ID [ ID ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ID : bool ) { var ID : bool while ( ( ( - ID ) ) ) { } print ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : [ ID ( ) / - ID + ( 123 ) ] [ ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : [ - ID ( ) * ( 123 == true * true / 123 ) ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { var ID : bool var ID : bool if false * ID - 123 + - 123 { } { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID * ( ( ( ID ) ) ) / - 123 ] int var ID : bool }",
  "func ID ( ) { var ID : [ ] [ ] [ ID ( true > ( ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool if 123 / 123 * ( ID ) { } }",
  "func ID ( ) : [ ID [ true / ID [ 123 * false ] ] ] int { } func ID ( ) { }",
  "func ID ( ID : bool ) { while - ID [ - 123 / ( true ) / 123 ] { } } func ID ( ) { }",
  "func ID ( ID : [ - - ( ID + true * - ( ID ) * ID + ID ) ] int ) { }",
  "func ID ( ID : int ) : [ - ( ( - - 123 and - - ID ) ) ] bool { }",
  "func ID ( ) { var ID : bool var ID : [ ID / ID [ - ( 123 ) ] [ ID ] ] bool }",
  "func ID ( ) : [ 123 / - - false - true / false / ID ( ID ) + false ] int { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : [ ] bool { var ID : bool }",
  "func ID ( ) : [ 123 / ( true * - ( ID - false + 123 ) / - 123 ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : [ - - true + - ID [ - true ] ] int }",
  "func ID ( ) { var ID : int var ID : bool return true * - ( 123 / - ( ( ID ) ) * ( ID ) ) / true } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : [ ( false >= ( ( false ) ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : int ID [ true and ID [ ( ( ID ) ) ] ] [ ID ] = false print false }",
  "func ID ( ID : bool , ID : bool ) : int { while false / - 123 * 123 { } print 123 }",
  "func ID ( ID : [ ( true + ( false / ID [ - ( true ) ] [ - ( ( ID ) ) ] ) ) ] [ ] [ ] int ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : int ) : [ - true >= - ( ID ) ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int var ID : [ ] [ ] [ ] int ID = false } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ] [ ID ( ) [ ID [ ( 123 ) ] [ 123 ] ] ] [ ] bool , ID : [ ] bool ) { }",
  "func ID ( ID : bool ) : [ ] bool { var ID : bool { var ID : int print ID [ - - ID ] [ ID ] } } func ID ( ) { }",
  "func ID ( ) : [ ] [ ID [ - ( - ID ( 123 ) ) ] ] bool { }",
  "func ID ( ) : [ ] bool { var ID : [ ID [ ( - ID ) ] ] int } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int , ID : [ ] int ) : bool { { return } return ID }",
  "func ID ( ID : [ false / ( ( - ID ( - ID ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { var ID : [ ID [ ID ( ) ] ] [ ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) : int { ID ( ) [ - ( ID ) ] [ - 123 ] = - ID }",
  "func ID ( ) { var ID : bool } func ID ( ) { return }",
  "func ID ( ) : int { var ID : int var ID : bool ID ( ) = true / 123 * true } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ] int ) { while ID [ - ID ] { } call ID ( ) }",
  "func ID ( ) { call ID ( ( false * ( - ( ID ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : [ true * - 123 - ID ( ( - ( false ) ) ) - - true ] [ ] [ ] bool ) { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : int var ID : [ false * 123 * ( ID ) ] [ ] bool }",
  "func ID ( ) { while - - ( ( ID / ( - ( ID ) ) ) ) { } }",
  "func ID ( ID : int , ID : int , ID : bool ) : [ ] [ false + ( ( true ) ) ] [ ] [ ] [ ] [ ] int { }",
  "func ID ( ID : [ ] int , ID : bool ) { var ID : int return ID ( ) [ ( ID ) ] [ ID ] }",
  "func ID ( ID : int , ID : int ) : bool { var ID : bool var ID : bool print - - ID ( ) while false { } }",
  "func ID ( ID : bool , ID : int ) { if - ( ID ( - ID ) ) { } } func ID ( ) { }",
  "func ID ( ) : int { while true / - - ID ( ) [ ID [ ( - ID ) ] ] { } }",
  "func ID ( ID : bool , ID : [ ] bool , ID : [ ] [ ] int ) : bool { var ID : int print ID print 123 }",
  "func ID ( ID : bool ) : int { call ID ( - false * ( - ( ID ) ) ) }",
  "func ID ( ) { var ID : bool var ID : [ - 123 * - - true / - - false ] bool } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] bool { var ID : bool print ID ( ID [ ( ( ( ID ) ) ) ] ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - ID ( ) [ false * ( - false ) / - ID ] ] [ ] bool , ID : int ) { }",
  "func ID ( ID : int ) { var ID : [ ] [ 123 <= true * ID ( ) ] [ ] int } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] int { var ID : int var ID : [ ] bool print ID ( - true ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( true - true * ( false ) - ( 123 ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ - - 123 * ( - - 123 ) / ( ( ID ) ) ] [ ] [ ] int ) { }",
  "func ID ( ) : [ ] [ - ID [ true * - ( 123 ) ] ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : [ 123 * ID / - ( ID ( ID ) ) ] [ ] int } func ID ( ) { }",
  "func ID ( ) : [ ID ( - - ID + true * - ( true ) / ( false ) ) ] bool { }",
  "func ID ( ) { var ID : bool var ID : bool return - - ( false / ( ID ) ) }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ ] int var ID : bool call ID ( ) }",
  "func ID ( ) { var ID : [ ] [ ] [ ( 123 / true * - ID ) ] int var ID : bool }",
  "func ID ( ) : bool { { return } if ID [ ID [ - ID ] ] [ - ID ] { } }",
  "func ID ( ID : bool , ID : int , ID : int ) : [ true / ID ( ) * true + false ] int { } func ID ( ) { }",
  "func ID ( ) : [ ID [ ID [ ID ( ) + 123 ] [ true ] ] ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool ) { var ID : int var ID : bool ID = - ID call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : bool var ID : [ ] [ ( - ( 123 ) ) ] int }",
  "func ID ( ) { var ID : [ ] [ ID [ false + ( ID ) ] ] [ ] bool }",
  "func ID ( ID : [ ] int ) { ID = - true - - - ID ( ) + true } func ID ( ) { }",
  "func ID ( ) { print ID ( ) * ( ID [ ID ] ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool ) { var ID : bool var ID : bool { var ID : int print false while ( false ) { } } print ID } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ ( ( ( - ( true ) ) ) ) ] bool ) { }",
  "func ID ( ID : bool ) { { var ID : [ false / ID [ ( - ( ( false ) ) ) ] [ ID ] * false ] int } } func ID ( ) { }",
  "func ID ( ID : int ) : [ ( false * - ( true / ID ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] int } func ID ( ID : bool ) : [ ] int { }",
  "func ID ( ID : int ) : bool { var ID : [ ] [ ] int var ID : bool }",
  "func ID ( ) : int { var ID : bool } func ID ( ) { var ID : bool if ID ( - ID ) { } }",
  "func ID ( ) : bool { print ( ID ( ) [ ( - ID ) ] ) print 123 }",
  "func ID ( ) { } func ID ( ID : bool , ID : [ false / ( ID ) * 123 ] bool , ID : bool ) { }",
  "func ID ( ID : [ ] bool ) : bool { var ID : [ ] int var ID : bool return }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ] bool ID ( ( - ( ( ( - - ID ) ) ) ) ) = ID }",
  "func ID ( ) : [ ] bool { var ID : int var ID : [ ] int print ( ID ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool if ID / ( - ID [ ( ID ) ] ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool { var ID : bool return true * ( ( false ) ) * - ( false ) } }",
  "func ID ( ) { var ID : [ ] bool var ID : [ ] bool if ( false * ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int ) : int { var ID : bool var ID : [ ID ( ) ] int }",
  "func ID ( ID : [ ] bool , ID : bool ) : int { return false / ID ( ID ) }",
  "func ID ( ) { var ID : [ false / 123 - 123 / true / ( false ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool return } func ID ( ID : int , ID : [ ] int ) : [ - ( ID ) ] [ ] bool { }",
  "func ID ( ) { var ID : [ false * 123 - true * 123 < true ] [ ] [ ] [ ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) : [ - ID ( ) [ ( ( false ) ) ] [ ( ID ) ] ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int return ( 123 / true / ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { var ID : [ ( true - ( true ) - ID ) ] [ ] bool var ID : [ ] int } func ID ( ) { }",
  "func ID ( ) : int { { var ID : int print ID ( ) / false / true - ( ( ID ) ) } call ID ( ) }",
  "func ID ( ) { var ID : int var ID : [ - ( ( true * 123 / ( - false ) ) ) ] [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : int { var ID : int var ID : int } } func ID ( ID : int , ID : int , ID : bool ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : int var ID : bool return ( ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int return } func ID ( ) : bool { var ID : [ ( ( - - - - 123 ) ) ] [ ] int }",
  "func ID ( ) : [ ( 123 + ( - true - - - true - - ( ( ( ID ) ) ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ) : [ 123 * ID [ 123 + true + - true ] * ( - - 123 ) ] int { }",
  "func ID ( ) : int { var ID : [ ( false and 123 - - - ID + ID and ID ) ] [ ] [ ] bool }",
  "func ID ( ID : bool ) { var ID : bool print ( ID + ( ID ) ) print - false }",
  "func ID ( ) : bool { var ID : int ID [ ( true / ID ( ) ) ] [ - ID ] = true } func ID ( ) { }",
  "func ID ( ) { var ID : bool if ( true / ( - ID ) ) { } print ( ( - 123 ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] bool var ID : [ ] bool { var ID : int { var ID : [ ] bool } } while - ( - - - 123 ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : int var ID : bool return true / true - - true - true }",
  "func ID ( ) : int { var ID : int var ID : int call ID ( - true * - true + true ) if 123 { } }",
  "func ID ( ID : int , ID : [ ID [ ( ( - ID ) ) ] [ - ( ( ID ) ) ] ] int , ID : bool ) { }",
  "func ID ( ) { call ID ( - - 123 / true * ID [ false ] ) } func ID ( ) { }",
  "func ID ( ID : [ - ( ID [ ID + true > - false ] ) ] int ) { }",
  "func ID ( ID : bool , ID : int ) { if ID ( ID [ - - ID ] [ ID ] ) { } { } }",
  "func ID ( ) : bool { var ID : int var ID : bool ID ( true / ( 123 ) * - 123 ) = - - 123 } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) * true / ID [ 123 / ( - - ID ) / ( false ) ] [ true ] ] int ) { }",
  "func ID ( ID : int , ID : int ) : int { call ID ( ) }",
  "func ID ( ) { var ID : bool print ( - ID ( ) [ 123 ] [ ( - ( 123 ) ) ] ) }",
  "func ID ( ID : int ) : [ ] [ ] int { var ID : int { } } func ID ( ) { var ID : bool var ID : bool }",
  "func ID ( ID : int , ID : int ) : bool { var ID : [ ID [ ID ( ) ] [ false ] ] [ ] bool }",
  "func ID ( ) : int { ID ( false / - ( ID [ ID ] ) ) = false call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool return } func ID ( ID : bool ) : bool { var ID : [ ] [ ] [ ] bool }",
  "func ID ( ) { var ID : bool var ID : bool while ( ID [ ID ] ) { } if false { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int ) : bool { if - - ( 123 * - 123 ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ] bool , ID : [ ( ID [ - - ( ( true ) ) ] [ ( ID ) ] ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : [ 123 and ID ( ID ) and ( true ) ] int }",
  "func ID ( ) : bool { var ID : int var ID : [ ID ( 123 * - ID / ( ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int return ( - ( false / true / ID ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { return false * 123 < true - ID - ID } func ID ( ) { }",
  "func ID ( ID : bool ) { while ( ID [ true * ID * - - - ID ] ) { } if - ( true ) { } }",
  "func ID ( ID : [ ] bool , ID : [ ] int , ID : [ ( ( ID ) ) ] [ ] [ ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ) : int { var ID : bool var ID : [ ] int call ID ( ) while - ID ( ) { } } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : bool var ID : [ ] bool return }",
  "func ID ( ) { { var ID : int var ID : int return } return - ( true / - ID / ID ) } func ID ( ) { }",
  "func ID ( ) : [ true / - ( 123 / ID ( - ( - ID ) ) ) ] int { }",
  "func ID ( ) { call ID ( ) } func ID ( ID : bool ) : int { { var ID : [ ] bool var ID : int } while ( ( false ) ) { } }",
  "func ID ( ) : [ ] int { print false - ( 123 + ( ID ) ) - ID ID = 123 }",
  "func ID ( ID : bool ) : int { var ID : int return } func ID ( ID : [ ] int , ID : int ) { }",
  "func ID ( ) { if true - ( ID ( - - ID ) ) { } while true { } }",
  "func ID ( ID : int , ID : int ) : bool { while ID ( ID or ( ID ) or ( ( true ) ) ) { } call ID ( ) }",
  "func ID ( ID : bool , ID : bool , ID : [ true * ( ( false / ( - ( 123 ) ) / - 123 ) ) ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool return true / ID ( ) [ ( ID ) ] [ false ] } func ID ( ) { }",
  "func ID ( ) { ID [ ( ID [ - - false * true ] ) ] [ true ] = ( ( ( true ) ) ) }",
  "func ID ( ) : [ - ID ( - true + - - ( true ) + false ) ] bool { }",
  "func ID ( ID : [ ] bool , ID : bool ) { var ID : int var ID : int }",
  "func ID ( ID : bool , ID : [ ( ( ID ( ) [ ID ] ) ) ] bool ) { }",
  "func ID ( ID : [ ID [ ID != true * false * ( ( false ) ) ] ] int ) { }",
  "func ID ( ) { var ID : [ ] bool print - ID ( ID * ID ) if true { } }",
  "func ID ( ) : int { var ID : [ - false / true * ( ( - ( ID ) ) ) ] bool var ID : [ ] bool }",
  "func ID ( ) : int { call ID ( ( - true / ( ( ( 123 ) ) ) * ID ) ) }",
  "func ID ( ID : bool , ID : int , ID : bool ) : [ ] bool { return }",
  "func ID ( ) { call ID ( ) } func ID ( ID : int , ID : bool ) { var ID : bool return true }",
  "func ID ( ID : int , ID : int ) { var ID : bool print ( ( 123 ) ) if 123 { } }",
  "func ID ( ) { print ( ID ( ( - ID ) ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) : [ - - ID ( ) [ ( true / ID ) ] ] int { } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : int while - false * 123 / true - - true + - - - ID { } print - ( - 123 ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : int { var ID : int var ID : int print true - ID while false { } }",
  "func ID ( ID : int , ID : bool ) { var ID : int var ID : bool ID [ ( true ) ] = false call ID ( ) }",
  "func ID ( ID : [ ] bool , ID : int ) { var ID : bool var ID : [ ] [ ID ( ) ] [ ] [ ] bool }",
  "func ID ( ) : int { return ( ID [ ID [ ID ] [ ID ] ] ) }",
  "func ID ( ) : [ ] [ - ( ( ID ( ) [ ( ( ( false ) ) ) ] [ ID ] ) ) ] bool { }",
  "func ID ( ) : int { var ID : int call ID ( ID [ - true / - false ] [ ID ] ) } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : bool var ID : int return ( true + ( ( - false ) ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool }",
  "func ID ( ) : [ true * - - 123 / true and ID ( false ) ] [ ] bool { }",
  "func ID ( ID : bool , ID : [ ] int , ID : int ) { var ID : int var ID : [ ( ID ) ] [ ] [ ] int }",
  "func ID ( ) : [ ID [ false / - false / true + ( ( true ) ) + - ID ] [ ID ] ] [ ] int { }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool var ID : [ ID ( ) [ - - true ] [ ( ( - ID ) ) ] ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ( ( ( true ) ) ) ] [ ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) { { return ID ( ) [ 123 ] [ ( false ) ] } }",
  "func ID ( ) : [ - - - ( ID ( ID <= 123 ) ) ] int { }",
  "func ID ( ) { { ID [ - ( ( 123 + ID + ID ) ) ] [ ( true ) ] = false } while - true { } }",
  "func ID ( ID : bool , ID : int ) { var ID : bool var ID : int return ( ID [ ( ( ID ) ) ] [ ( ( false ) ) ] ) }",
  "func ID ( ID : bool , ID : int ) : bool { var ID : int var ID : bool print ( ID ) print false } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ] bool while - false and - - - ID { } } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : int ID ( - 123 <= true * false / ( ( - - - ID ) ) ) = ( true ) }",
  "func ID ( ID : [ ] int , ID : int , ID : [ 123 * ( ID + ( - ( ( ID ) ) ) ) * true ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) / ( - true * - - 123 - true ) / false ] int ) { }",
  "func ID ( ) : int { while ID and true / - ( - false ) * ID and ID { } { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ - ID / ( ( ID ) ) / ID ] int } func ID ( ) { }",
  "func ID ( ) { var ID : bool print - ID ( ) [ 123 / ID / ID ] { } }",
  "func ID ( ) { var ID : [ ( ID ( ID ( ID ) ) ) ] bool var ID : [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] bool { var ID : [ ] [ ] bool ID ( ) [ ID ] = ( ID ) { } }",
  "func ID ( ID : int ) : int { var ID : [ ( false * ( true ) / - - ID ) ] [ ] bool var ID : [ ] [ ] [ ] int }",
  "func ID ( ) { var ID : bool var ID : int } func ID ( ID : int ) : int { return - ID }",
  "func ID ( ID : [ ID - - ID ( ) / ID [ - - 123 ] [ - ( - - ( true ) ) ] * ID ] bool ) { }",
  "func ID ( ID : bool , ID : [ - ( - true + ( false ) ) ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : bool if - true * ( - ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ID [ - ( ID ( ) ) ] ] int var ID : int }",
  "func ID ( ID : [ true and 123 > ID [ false * - ( - ID ) ] and - - - false ] int ) { }",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) { var ID : int return } func ID ( ) { if ID { } }",
  "func ID ( ) { print ( ( ID / false - true / ID ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) { { var ID : int var ID : [ ID [ 123 - ( - - ID ) - false ] [ - 123 ] ] int } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool while ID ( - 123 * true / ID ) { } print - ID } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] bool call ID ( ) return - 123 * - true * ( ID ) }",
  "func ID ( ) { var ID : bool var ID : int } func ID ( ID : bool , ID : [ false * - ID / - false ] bool , ID : [ ] [ ] bool ) { }",
  "func ID ( ID : int , ID : int ) : [ ] [ - false + true / ( ID ) * true + ID ] [ ] bool { }",
  "func ID ( ) { var ID : [ ( false - ID - ID ( ) ) ] [ ] int var ID : int } func ID ( ) { }",
  "func ID ( ) { print true - ( false * ID [ - - ID ] [ - ID ] ) }",
  "func ID ( ID : int , ID : [ ] [ - ID ( ( - ID ) ) ] [ ] [ ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { return }",
  "func ID ( ID : [ ID == - - 123 / ( false * 123 * ID ) * true ] [ ] bool ) { }",
  "func ID ( ) { var ID : [ ( true / ( false / - - - ( 123 ) ) ) ] [ ] [ ] [ ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( ID ( true - ID ) ) ] [ ] [ ] [ ] bool }",
  "func ID ( ) : int { ID = true * - - true <= false / - ID print ( 123 ) }",
  "func ID ( ) : int { var ID : bool print 123 - ( ID [ false ] ) - ID ID = 123 }",
  "func ID ( ) { var ID : int var ID : bool call ID ( ( ( ( ID ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : [ ( ID ( - - true + true ) ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : [ ] [ ] bool { var ID : [ false / false / ID ] [ ] [ ] [ ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] bool call ID ( ID ( ) [ 123 ] [ true ] ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ID : int ) : bool { return }",
  "func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { var ID : int var ID : bool } func ID ( ) { while - ID { } { } }",
  "func ID ( ID : bool , ID : bool ) : [ ] [ ] int { var ID : int while false * ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ ] [ false * ID [ ID ] [ false ] / ( ID ) ] int ) { }",
  "func ID ( ID : [ ] int , ID : bool ) { var ID : bool var ID : int print ID ( ID ) }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] bool print true / 123 == 123 }",
  "func ID ( ID : bool ) { var ID : bool var ID : int call ID ( ) ID ( ) [ - true ] [ ( 123 ) ] = - ( true ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int return } func ID ( ID : int , ID : int , ID : [ - ( ID ) ] [ ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : bool ) { var ID : bool print 123 * - ID }",
  "func ID ( ID : bool , ID : [ ] bool , ID : int ) : bool { return }",
  "func ID ( ID : [ ID ( ) + - ID [ true / ID * - ID ] [ - true ] - ( - ID ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool return - true * ID ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) { var ID : bool var ID : [ ID ( - ID ) ] bool } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int } func ID ( ) : [ ] [ ( - ID ) ] [ ] int { }",
  "func ID ( ) : int { } func ID ( ) : int { var ID : [ ( - 123 ) ] [ ] int var ID : [ ] [ ] int }",
  "func ID ( ID : int ) : bool { var ID : [ ] bool { ID [ - - ID ] [ ID ] = ( ( ID ) ) } while 123 { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) : bool { var ID : bool call ID ( ) return } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { var ID : [ ] [ ] bool var ID : bool return - 123 }",
  "func ID ( ) { var ID : bool var ID : int print - - false / ID ( ( false ) ) } func ID ( ) { }",
  "func ID ( ) : [ ] [ ID [ - ( ( - ( ( - false ) ) ) ) ] ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : int { var ID : int print ( - ( 123 ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool return ID [ true * - - - - ( ( ( false ) ) ) / ID ] [ ID ] } func ID ( ) { }",
  "func ID ( ID : [ ( ( ( 123 - - ( false ) ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : int var ID : int { if - - ID { } } }",
  "func ID ( ID : int , ID : int ) : bool { return ( ID ( ) / ( ID ) / - ID ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( - - ID ( ) [ ID ] [ ( ID ) ] ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ID : int ) : [ ( 123 / true - ( - ( true ) ) ) ] bool { }",
  "func ID ( ) : bool { var ID : bool } func ID ( ) : [ ] bool { var ID : int var ID : bool }",
  "func ID ( ID : [ ] bool , ID : [ ] [ ID [ ID ( true ) ] [ ID ] ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { print false / - - ID / ID ( ) [ ID ] } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool var ID : [ ] bool while - ( ID ) { } while ID { } } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : bool print - - ( - ID ( ) ) print ( ID ) }",
  "func ID ( ) : bool { return } func ID ( ID : int , ID : int , ID : int ) { while - ID { } while ( ID ) { } }",
  "func ID ( ID : int , ID : [ ] int ) { var ID : int var ID : int print - ID [ false ] if - ( ( ( ( ID ) ) ) ) { } }",
  "func ID ( ) { var ID : [ ID ( ( - ( false ) ) ) ] bool var ID : bool }",
  "func ID ( ) : int { var ID : int if - ID ( - - ( ( ( 123 ) ) ) ) { } if true { } }",
  "func ID ( ID : bool , ID : bool , ID : [ ] int ) : int { call ID ( - true / ID * ( - true ) ) { } }",
  "func ID ( ) { var ID : int var ID : bool { var ID : [ ] bool call ID ( - 123 ) { } } if 123 { } } func ID ( ) { }",
  "func ID ( ) : [ ] int { return true and ID [ ( 123 ) ] [ 123 ] } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool ID [ ( ID [ ID ] [ - - ( - ( - ( ( ( - ID ) ) ) ) ) ] ) ] = - - - - ( ( ID ) ) if - ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ 123 * ( 123 / - ID ( ) * ID ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : [ ] bool { var ID : bool var ID : int while - - true { } }",
  "func ID ( ID : [ ] [ - ( 123 * - true * - false + ( - ID ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : int { return ( - ( ( true ) ) ) }",
  "func ID ( ) { var ID : [ ID [ false * ( ( ID ) ) ] [ ID ] ] bool var ID : int }",
  "func ID ( ID : bool , ID : [ - - - ID [ ( ID ) ] ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ true - 123 and true / ID ( ) * ID and - - - - 123 ] int ) { }",
  "func ID ( ID : [ ] int , ID : int ) : bool { var ID : int var ID : int ID [ - ( - ID ) ] = ( ( ( ID ) ) ) print ( false ) }",
  "func ID ( ID : bool , ID : int ) : [ ] bool { var ID : bool var ID : int ID ( ) [ ID ] = false if ( - - - ID ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int return ID - - - ( false + ( true ) ) } func ID ( ) { }",
  "func ID ( ID : [ - ( ( false / ID ( - - ID ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - ( 123 + ID ( - ID ) ) ] int , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ] int if ( ID ( ) [ - - ( ID ) ] ) { } }",
  "func ID ( ) { var ID : int var ID : int print ( ( - ID [ false ] [ - false ] ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) : int { call ID ( true + - ID ( ) [ ID ] - ID ) } func ID ( ) { }",
  "func ID ( ) : [ false / - 123 - 123 / ID ( ) [ - ( ( ( true ) ) ) ] / ID - - - ( ID ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ] [ ( - - ID / ( ID ( ) ) * ID ) ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ( - - 123 * 123 / ID ( ) [ - true ] ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { { var ID : [ ] int var ID : bool } ID = ( ID ) }",
  "func ID ( ) : int { call ID ( - false * ( ( ( - true ) ) ) ) }",
  "func ID ( ID : [ ID ( ) * ( ( 123 / ( ( false ) ) * ID ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] int { { return } ID ( ) = ( ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int ID ( - ID [ ID ] ) = true }",
  "func ID ( ) : [ ] int { while ( ID and - ID [ ID ] and ( - ID ) ) { } }",
  "func ID ( ID : bool , ID : [ ] [ ( 123 / ID [ ID ] [ ( ( false ) ) ] * 123 ) ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int } func ID ( ) { return }",
  "func ID ( ) { var ID : int var ID : [ false * - false - - false * ID * true ] int } func ID ( ) { }",
  "func ID ( ) : bool { return }",
  "func ID ( ) { var ID : [ ] int var ID : int }",
  "func ID ( ) { var ID : bool var ID : [ ( ID [ - - ID ] ) ] bool }",
  "func ID ( ) : [ ] [ - ID ( - - ( ID ( ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] int , ID : [ ] [ 123 * ( ( ( - ( - ID ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ - ID ( ) / true * ID ( ID ) ] bool , ID : int ) { }",
  "func ID ( ID : int ) : bool { var ID : [ 123 / - - true / ID ( ( true ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int { var ID : [ ] [ 123 * ID ( ) * 123 ] bool var ID : [ ] bool } if ID { } }",
  "func ID ( ID : int ) : [ ID ( ) + false + ( 123 * - ( - ( - 123 ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : [ - - 123 / - - ( false ) ] int }",
  "func ID ( ) { var ID : int var ID : int print - false * ( - - - ID ) while ID { } }",
  "func ID ( ) { } func ID ( ID : [ ] bool , ID : [ ] int ) { call ID ( ( true ) ) }",
  "func ID ( ) { if - ( ( ID [ ID ] ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ( ID [ - ( - ( - ( - ID ) ) ) ] [ - - ID ] ) ] bool var ID : [ ] [ ] int }",
  "func ID ( ) : bool { var ID : [ 123 * ( 123 / false / - ID ) * false ] int var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) : int { while ( ID ( - ( - ( ID ) ) ) ) { } }",
  "func ID ( ) : int { return ( ( true and ( - ( ( ID ) ) ) and ( ( ID ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool }",
  "func ID ( ) : [ - ( - ID / ( true - ID - - ID ) / - ID ) ] bool { }",
  "func ID ( ) { var ID : [ ID ( ) [ false / - - ( 123 ) ] ] int } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ( ID / ID ( ) [ ID ] [ false ] ) ] bool , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ false and ( ( ID ( ) ) ) ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) { } func ID ( ) : [ ] int { var ID : bool var ID : bool while ID { } }",
  "func ID ( ID : int , ID : int ) : int { var ID : bool var ID : bool return } func ID ( ) { var ID : bool }",
  "func ID ( ID : int , ID : bool , ID : int ) { call ID ( - - ( false ) ) } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ID ( ( false / ( false ) * true ) ) ] int var ID : [ ] [ ] [ ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID ( 123 != false * ( - - true ) ) ] int ) { }",
  "func ID ( ID : [ ID ( ) [ ID [ true + ID ] ] [ true ] ] int ) { }",
  "func ID ( ) : [ ] [ ] [ true * - ( 123 / true - ( ID ) ) * - ( true ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : bool return }",
  "func ID ( ID : [ ID [ ( ID [ ID ] ) ] [ true ] ] bool ) { }",
  "func ID ( ) { var ID : bool } func ID ( ID : int , ID : int , ID : [ ( ( ( 123 ) ) ) ] int ) { }",
  "func ID ( ID : int , ID : int ) { ID ( 123 / - - true / ID ) = - ID } func ID ( ) { }",
  "func ID ( ) { if true * ID [ true - false * false * ID ] * ( ID ) { } while ID { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int print - 123 >= true and 123 < ID and ID call ID ( ) } func ID ( ) { }",
  "func ID ( ) { if ( false * ID ( ) [ ID ( ) ] [ ID ] ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int return true * - - - ( ( ID ) ) }",
  "func ID ( ) : [ true - ID [ ID [ false / ID ] [ false ] ] [ true ] + - false ] bool { }",
  "func ID ( ) : bool { ID = ( - ID ( false / ( - - ( true ) ) * - false ) ) }",
  "func ID ( ID : int ) : int { var ID : [ ID / 123 / - - ID ( ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : bool ID [ ID [ 123 * ID ( ) ] ] [ ID ] = - 123 ID = ( ( ( false ) ) ) } func ID ( ) { }",
  "func ID ( ) { if ( 123 / ID + false * ID [ ( ID ) ] + true ) { } call ID ( ) }",
  "func ID ( ID : [ - true - true / ( - ID [ - - true ] [ - ID ] ) ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ] [ false * ( ID ( ) ) / ( ( ID ) ) ] int } func ID ( ) { }",
  "func ID ( ID : [ - false * ( ID ( ID [ false ] [ ( - ( ( 123 ) ) ) ] ) ) / ( ( ( true ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int { while 123 * ID [ ID ] { } } ID = - ID }",
  "func ID ( ID : int , ID : [ ] int , ID : bool ) : int { }",
  "func ID ( ID : int , ID : [ ( - 123 / true + ( ID ) + ID ) ] int ) { }",
  "func ID ( ID : int , ID : [ ID [ 123 + - - ID [ - ( true ) ] [ ID ] - false ] [ ID ] ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ( ID ( ) [ - false / ( - - ID ) ] ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - - ID ( ) * ( ID ( ID ) ) / - - false ] bool ) { }",
  "func ID ( ID : bool , ID : int ) : [ true * true > ID [ ( ID ) ] [ - ( ID ) ] ] int { }",
  "func ID ( ID : bool , ID : [ ( true * ( true * - false ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] int { while ( ( 123 / ( - false ) ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool ID [ - ID ( ) [ ( ( 123 ) ) ] ] [ - - - false ] = - true }",
  "func ID ( ID : int ) { var ID : int var ID : bool return }",
  "func ID ( ID : [ ] int , ID : [ - true > 123 * ( - ID ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { while ID ( 123 * ( ID ( ) ) / - - - ( ( ( ID ) ) ) ) { } call ID ( ) }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ] [ ] int var ID : int if true / true / - ID { } while true { } }",
  "func ID ( ID : bool , ID : int , ID : [ - ( ID ( ID ) ) ] bool ) { }",
  "func ID ( ID : [ ] bool ) : [ false * ( ID / ( ( ( ID ) ) ) ) ] bool { }",
  "func ID ( ID : bool ) : int { print 123 / ( ID [ - ( ( false ) ) ] ) / false } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : int { var ID : int var ID : int while ID [ ID ] { } { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ] bool if 123 - false / ( - - - ( ( true ) ) ) - ID { } print false }",
  "func ID ( ID : [ ( ( - ( ID ( - ( 123 ) ) ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int while false + ( ( ( ID ) ) ) + - - false { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int } func ID ( ID : bool , ID : int ) { var ID : [ ] int var ID : bool }",
  "func ID ( ID : [ ] int ) : bool { var ID : [ ID [ ( ( ID ) ) ] [ - ID ] ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ 123 * ( ID / false / - true ) / ( ( ( true ) ) ) ] bool ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : bool { var ID : int var ID : bool while - ( - ID ) { } call ID ( ) }",
  "func ID ( ) { return 123 + ID != ID ( ) [ - - ( ID ) ] } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool ) { var ID : bool var ID : int if ( ( - - false ) ) { } print ID } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] bool var ID : int return }",
  "func ID ( ID : [ - - - ID ( - ( true + false - - ( ID ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) { print - ID ( ( - 123 * - - ( - 123 ) * ID ) ) { } }",
  "func ID ( ID : bool ) : [ - ID ( ( - ID [ - 123 ] [ ID ] ) ) ] int { }",
  "func ID ( ID : int , ID : int ) { print false and ID + - ID and - false ID = false }",
  "func ID ( ) : [ ] int { var ID : int }",
  "func ID ( ID : [ 123 * ID [ ID - 123 and - - ID ] [ 123 ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { if false * ( ( ( - true ) ) ) { } { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int { var ID : bool print - false * - true / 123 call ID ( ) } ID = true }",
  "func ID ( ID : bool , ID : bool , ID : [ ID ( ) [ true + 123 + ( - ( - ID ) ) ] [ - false ] ] [ ] [ ] int ) { }",
  "func ID ( ) : int { print ( ( ID ( ) [ ID ] ) ) print - ( - - ID ) } func ID ( ) { }",
  "func ID ( ) { call ID ( ( ( 123 + ( ID ) - true ) ) ) call ID ( ) }",
  "func ID ( ) { var ID : [ ( false + ( 123 / - - ID * - ID ) ) ] [ ] int var ID : bool }",
  "func ID ( ID : int , ID : bool , ID : bool ) { return true + false >= ID ( ) }",
  "func ID ( ID : [ ] int ) : int { ID ( ID ( - ID ) ) = ID } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool , ID : int ) : int { var ID : bool call ID ( ( - 123 ) ) } func ID ( ) { }",
  "func ID ( ID : int ) { print ( ( ID [ ID ] ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : bool } func ID ( ) { { var ID : [ ID ] int } ID = ID }",
  "func ID ( ) : [ - ID ( ) [ ID ( ( true ) ) ] [ true ] ] [ ] bool { }",
  "func ID ( ) : bool { var ID : int var ID : bool return } func ID ( ) { var ID : int var ID : [ ] [ ] bool }",
  "func ID ( ID : [ - ID [ ID [ false + - ID ] [ - - - ID ] ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool ) { while true < - ( ( false ) ) { } }",
  "func ID ( ID : bool ) : [ - - - 123 * ID [ ( false ) ] * false ] bool { } func ID ( ) { }",
  "func ID ( ID : [ 123 / false and ID [ - true * false ] [ ID ] ] bool ) { }",
  "func ID ( ID : bool ) { var ID : int var ID : [ true - ID ( 123 ) + - 123 ] [ ] bool }",
  "func ID ( ID : int , ID : [ ] [ ] bool , ID : bool ) { if ( ID ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ false * - - true - ( ( ( ID ) ) ) - - ( ( ( false ) ) ) ] int }",
  "func ID ( ID : bool ) { var ID : bool var ID : bool return true * true * true + true - ( 123 ) }",
  "func ID ( ID : bool ) { while - 123 * ID ( ) [ ID ( ) ] [ false ] * ID { } print true }",
  "func ID ( ID : [ ] [ ID ( ) [ ( - ID [ ID ] ) ] [ true ] ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ID ( ( - false + - ( false ) + ( ID ) ) ) ] bool }",
  "func ID ( ID : bool , ID : bool ) { var ID : int var ID : [ ] int return } func ID ( ID : [ ] int ) { }",
  "func ID ( ID : bool ) { var ID : bool var ID : int if ( ID ( false ) ) { } call ID ( ) }",
  "func ID ( ) { var ID : [ ( ID ( ) [ ( ID ) ] [ ID ] ) ] [ ] bool var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) : [ ID ( ) [ 123 - true > ID [ - ID ] [ ( true ) ] ] ] bool { } func ID ( ) { }",
  "func ID ( ) : int { ID ( ID / - 123 + ( ( ( ( true ) ) ) ) - - true ) = - ID while - - 123 { } }",
  "func ID ( ) { } func ID ( ) { ID [ ID ( 123 * ID ) ] = 123 print ID }",
  "func ID ( ) : [ ] int { var ID : [ - ID [ - ID [ false ] ] [ - - - true ] ] bool } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool var ID : int }",
  "func ID ( ID : [ ] int , ID : int , ID : [ ] bool ) { print ID * ( ID ) / ID }",
  "func ID ( ID : [ ] int ) { print ID * 123 + ( ID ) + ( - ID ) } func ID ( ) { }",
  "func ID ( ID : [ ID [ ID ( ) [ ID ( ) [ ( false ) ] [ 123 ] ] [ ( ( - ID ) ) ] ] ] int ) { } func ID ( ) { }",
  "func ID ( ) { return } func ID ( ) : bool { var ID : int var ID : int call ID ( ID ) { } }",
  "func ID ( ) { var ID : [ ID [ - ( false / ID ) ] [ ID ] ] bool var ID : bool }",
  "func ID ( ID : [ - 123 * ( ID ( ) [ - - ID ] ) * ( ID ) ] int ) { }",
  "func ID ( ) : int { var ID : int var ID : int ID = - ( - - ID ) call ID ( ) }",
  "func ID ( ) : [ ID ( ( false - ID ( ) [ false ] [ - ID ] - ( false ) ) ) ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int } func ID ( ) { var ID : int var ID : bool while ID { } { } }",
  "func ID ( ID : bool ) { var ID : [ ID [ - ID * true ] [ ID ] ] [ ] bool var ID : bool }",
  "func ID ( ID : bool , ID : [ ] int , ID : [ ] int ) : bool { var ID : [ ] [ ( ID ) ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : int if ID [ ( ( ID ) ) ] [ ID ] { } print - ( - - - ( ID ) ) }",
  "func ID ( ID : [ ( ( true - ID ( ID ) ) ) ] int ) { }",
  "func ID ( ) : int { var ID : [ 123 / ID [ ( 123 ) ] [ false ] / false ] [ ] bool }",
  "func ID ( ) : int { var ID : [ ID ( ) [ false / ID ( ) * - true ] ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : [ ID [ ID ( ) [ true / ( ( false ) ) ] ] [ ID ] ] bool ) { }",
  "func ID ( ID : bool ) { var ID : int } func ID ( ID : int , ID : bool ) : [ ID ] [ ] int { }",
  "func ID ( ) { { var ID : [ ID ( ID ( ID ) ) ] bool var ID : bool } while ( - 123 ) { } }",
  "func ID ( ID : bool , ID : [ ] bool ) : bool { var ID : [ ] bool while ID ( ) { } print ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] [ ] int ) : int { while ( - - ID ) { } } func ID ( ) { }",
  "func ID ( ) { if ( true * false / ID ( true ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : int { var ID : bool if ID ( ) [ ID ] { } }",
  "func ID ( ID : [ - true + 123 * ID ( ) [ false * false ] [ - false ] * true ] [ ] bool ) { }",
  "func ID ( ID : [ ID ( ID ( ) [ ( - - false ) ] [ ID ] ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ true / 123 / ID ( ) or ( ( - ( - false ) ) ) or ID ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { } func ID ( ID : int , ID : [ ] [ ] [ 123 * ( 123 ) ] int ) { }",
  "func ID ( ) { while ID [ - - 123 / ID / - ( ( ID ) ) ] [ ID ] { } call ID ( ) }",
  "func ID ( ID : bool ) : [ ] int { var ID : int var ID : [ ] int call ID ( - - true ) { } } func ID ( ) { }",
  "func ID ( ) : bool { while ( ID * ID [ true / ID * ID ] / ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ true / ID [ false * true - true ] * ID ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ 123 * - ( - false * - ( - true ) ) ] bool ) { }",
  "func ID ( ID : bool , ID : int ) : int { ID ( ( 123 - false ) ) = ID while ID { } }",
  "func ID ( ID : [ ] [ ] [ ] [ ( ( false and false ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ( ID [ - - ( ID ) ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ - - ( false * 123 * ( ID ) ) ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int return ( ( false - false ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : int ID [ true * - ID ( ) [ 123 ] [ - ( ( false ) ) ] ] [ - 123 ] = ( ID ) while ID { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool while - ( ( false and ID and - 123 ) ) { } }",
  "func ID ( ID : [ ( - ID [ ID / ID ( ) ] [ ID ] ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { call ID ( ) return }",
  "func ID ( ) { { var ID : [ ] bool var ID : int print ID * - 123 / - - 123 } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int var ID : bool } func ID ( ID : int ) { var ID : int call ID ( ) }",
  "func ID ( ID : bool , ID : int ) { var ID : bool var ID : [ ] [ ] int ID ( ID ) = true if ( ( ID ) ) { } }",
  "func ID ( ID : [ ] int ) : [ 123 / ID or ID [ ( ID ) ] ] int { } func ID ( ) { }",
  "func ID ( ) { } func ID ( ) { call ID ( ID ( ( ( - ID ) ) ) ) }",
  "func ID ( ID : int ) : bool { var ID : [ true == ( true / ID * - ID ) ] [ ] int } func ID ( ) { }",
  "func ID ( ID : bool ) { print false / false + ID / ( true ) * ID + - 123 }",
  "func ID ( ID : int , ID : [ - ( - ( ID * false * false ) ) ] bool ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { return } func ID ( ID : bool , ID : [ ] bool , ID : [ ] int ) { }",
  "func ID ( ID : int , ID : bool ) : bool { if ( ID ( true ) ) { } print - ID } func ID ( ) { }",
  "func ID ( ID : [ false + - - ( ( true * ( true ) ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : int } func ID ( ) : bool { var ID : [ ID ] [ ] int }",
  "func ID ( ) { { var ID : [ ] [ ID ( ID [ ID ] ) ] int var ID : bool } }",
  "func ID ( ) : [ ] int { var ID : [ - false * ( ( - ID ) ) * ID ] bool } func ID ( ) { }",
  "func ID ( ID : [ ( 123 / - ( 123 / ( ID ) ) / - - ID ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ false + true * ID ( 123 / ( - false ) ) + - ( 123 ) ] int } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ - - ID [ ID ( ) ] [ ID ] ] ] int ) { }",
  "func ID ( ID : bool ) : [ 123 and ID ( true / ID ( ) * - - - ID ) ] int { } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : int { var ID : bool if ( ID ( ( ( true ) ) ) ) { } }",
  "func ID ( ) : bool { print - true / 123 + - false * ( true ) - true print ID }",
  "func ID ( ID : int , ID : [ - ID [ ( - ( - 123 ) ) ] [ ( ID ) ] ] int , ID : [ ] [ ] [ ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { print true / ID * ID [ ( - true ) ] while ID { } }",
  "func ID ( ID : int , ID : int ) : int { var ID : int print false / ID / ( ID ) } func ID ( ) { }",
  "func ID ( ) : [ ] bool { }",
  "func ID ( ID : bool ) : int { var ID : int var ID : bool return }",
  "func ID ( ID : int ) { var ID : bool var ID : int call ID ( - ID ( ) [ - ID ] ) while false { } } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int ) { var ID : [ ] int var ID : int if - ( ( true ) ) { } } func ID ( ) { }",
  "func ID ( ) : [ - ID ( ID [ ID [ true ] ] [ - ID ] ) ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ( ( ID ( - false ) ) ) ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { print - true + ID [ true * - - - ID ] + - false while 123 { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : [ 123 / ( true - - 123 ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : bool ) { call ID ( - - 123 / - - - ID ( ) [ false ] / ( ( 123 ) ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] int } func ID ( ) { var ID : [ ] bool var ID : [ ] [ ] bool }",
  "func ID ( ID : [ ( - true / ( - ID [ 123 ] [ true ] ) * ID ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { ID ( - - ( ID ( ) * ID [ 123 ] / ( ( true ) ) ) ) = false call ID ( ) }",
  "func ID ( ) { var ID : bool return ( - ID ( ) [ ( false ) ] [ ( - - ( true ) ) ] ) }",
  "func ID ( ID : bool , ID : int ) : [ ( - - 123 / ( true ) ) ] int { }",
  "func ID ( ID : bool ) : int { call ID ( ( ID ( ( - true ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool call ID ( ID * ID - ID ( ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int if - 123 <= true * - true * ID { } while ID { } } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool var ID : int call ID ( ) return } func ID ( ) { var ID : [ ] bool }",
  "func ID ( ID : int , ID : int , ID : int ) : [ ] [ - true - 123 < - - ( false ) ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( ( ( true / ( true ) ) ) ) ] [ ] [ ] [ ] int }",
  "func ID ( ID : bool , ID : [ ( ID [ true * - ID / false ] ) ] int , ID : [ ] bool ) { }",
  "func ID ( ) { var ID : bool var ID : int if false * false and - - ID { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) { { print - false * true + ID } { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : int var ID : [ ] [ false * 123 - false - ID ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int print false / ( - true * false ) ID = 123 } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ - - - ID ( ID [ ID ] [ - false ] ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : int ID ( 123 / ID ( ( - ID ) ) * - ID ) = ID if - ID { } }",
  "func ID ( ID : int , ID : bool , ID : bool ) : int { var ID : bool call ID ( ) return } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { { var ID : [ ] [ ] [ ] bool } ID = ID }",
  "func ID ( ) : int { var ID : int var ID : int ID = true / true <= false }",
  "func ID ( ID : int ) { var ID : bool var ID : int if 123 - ( ( ( ( - ID ) ) ) ) - ID { } print - ( ( ( - 123 ) ) ) }",
  "func ID ( ) { var ID : [ ] [ ID ( ( ID ( ) ) ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ 123 / - ID ( ) + - - - ( ID ) + - ( false ) ] bool var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) : [ false > false * - - - 123 + ( true ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : [ ( ( - false > - ID ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : [ ] [ - ( 123 * ( ( ID ) ) * false ) ] [ ] [ ] [ ] int { }",
  "func ID ( ) { var ID : [ ] [ ( false * ID ( ) [ ID ] ) ] bool var ID : [ ] [ ] bool }",
  "func ID ( ) { print true / ( - ID [ ( ( ( - ID ) ) ) ] ) }",
  "func ID ( ID : int , ID : int , ID : [ - 123 * ID ( ) [ ( ID ) ] [ ( ID ) ] / ( - - ( ID ) ) ] int ) { }",
  "func ID ( ID : bool , ID : [ ] [ - true * ( false * - ( ( - ID ) ) / ID ) ] int , ID : bool ) { }",
  "func ID ( ) { call ID ( ( false / ( - false / true / - ID ) * 123 ) ) if - - 123 { } }",
  "func ID ( ID : [ ] [ - ID ( - - ID ( ID ) ) ] int ) { }",
  "func ID ( ID : [ ] bool , ID : bool , ID : bool ) { { var ID : [ ] [ false ] bool } if - 123 { } }",
  "func ID ( ID : [ ] int , ID : bool ) : int { var ID : bool var ID : bool while ID [ false ] { } while ID { } }",
  "func ID ( ) { var ID : [ ] int var ID : bool { var ID : [ ] [ 123 * ( - ID ) * - false ] int var ID : bool } call ID ( ) }",
  "func ID ( ID : bool , ID : [ - true / - ID ( ID [ ID ] [ ( ID ) ] ) * ID ] int ) { }",
  "func ID ( ID : [ - - ( true and ID [ - ID ] and ID ) ] bool ) { }",
  "func ID ( ) : bool { var ID : [ ] [ ( false * ID ( ) - - - true + ( ID ) ) ] int var ID : bool } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool return }",
  "func ID ( ) : int { var ID : [ ] [ ] [ ] [ ID ( ID ) ] bool }",
  "func ID ( ) { while - ( ( ( - - - ( - ( - ( ID ) ) ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ( ID ( - ( ( - ( - ID ) ) ) ) ) ] bool var ID : [ ] int }",
  "func ID ( ID : bool ) : [ 123 / 123 * false + ID / ID [ - true ] [ - ( 123 ) ] - true ] int { } func ID ( ) { }",
  "func ID ( ) : int { if - ID ( ) / 123 * false - ID [ ( ID ) ] + true { } }",
  "func ID ( ) : [ ] int { var ID : [ ] int while 123 - true / ( - - - true ) * ID { } }",
  "func ID ( ) : bool { var ID : [ 123 + - true / ID ( ID ) / true - 123 ] bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] int var ID : bool if ID ( ( ID ) ) { } call ID ( ) }",
  "func ID ( ID : int , ID : [ ] int ) : int { var ID : bool }",
  "func ID ( ) : bool { var ID : bool ID ( - ( - ID / - - ( ID ) / - false ) ) = 123 } func ID ( ) { }",
  "func ID ( ID : [ true * 123 / ( 123 - ID [ ID ] [ ID ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] int { print true / 123 * ( - true / ID * ( false ) ) while - ID { } }",
  "func ID ( ID : [ ( ID ( false and - ( ID ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { } func ID ( ) : [ ( ( ID ( ) ) ) ] [ ] int { }",
  "func ID ( ID : bool ) : [ ID ( ) [ 123 + ( ( - false ) ) + - ( 123 ) ] ] int { }",
  "func ID ( ID : [ ] bool , ID : [ - false * - ID - ( - ( - - false ) ) + - false ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : [ - 123 * 123 - ID ( ) [ ID ( ) ] [ - - - ( ( - false ) ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { { call ID ( ) return ID ( ) [ ( - false ) ] [ ( ( ID ) ) ] } print ( false ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID * - true / false - ID [ false ] [ - ID ] ] [ ] [ ] [ ] int }",
  "func ID ( ) : int { var ID : bool var ID : [ true * - false / 123 - ID + 123 ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) : int { if true > - false + ID - true { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) { print - ID ( ( ID / false * false ) ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : bool call ID ( ) }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] [ - ID or ( ID ) or ( - ( ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : [ ( ID ( ) * ID * - ID [ ID ] [ false ] ) ] int ) { }",
  "func ID ( ) : [ ] int { var ID : [ ( 123 / 123 - ID ) ] int }",
  "func ID ( ) { var ID : bool var ID : int { var ID : int var ID : bool if - ID { } call ID ( ) } call ID ( ) }",
  "func ID ( ) { var ID : int var ID : [ ] bool if ( - ID ( ( true ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : [ - ID - ID / 123 / ( - true ) ] [ ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ true * 123 / 123 + ID ( ID ) + ( - - ( - true ) ) ] int , ID : [ ] int ) { }",
  "func ID ( ) { var ID : bool var ID : int if ID ( ( ( ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ - - true * ID ( ( - ( false ) ) ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : [ ( ID ( ) [ - ID ( ID ) ] ) ] int ) { }",
  "func ID ( ) : [ ] bool { var ID : [ ] [ ] int return - 123 - false / - - - ID / ID + ID } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int while true <= ID ( ( ID ) ) { } }",
  "func ID ( ID : int ) { var ID : int var ID : bool call ID ( 123 / - - ID ( ) * ( - true ) ) }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : int call ID ( ) { var ID : int var ID : bool } } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ] [ false / ID [ 123 ] [ ID ] / ID ] [ ] int var ID : [ ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : [ ID * ( 123 * ( ( ( - 123 ) ) ) * ID ) / ID ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : bool var ID : int } func ID ( ) { var ID : [ ] [ ] bool }",
  "func ID ( ) { print - - ( ( ( ( ( - - true ) ) ) ) ) ID = ( true ) }",
  "func ID ( ID : bool ) : [ ] int { }",
  "func ID ( ID : [ ( false - - - ( 123 <= - ID ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool call ID ( - - ID - ID ( ) ) ID = ( ID ) }",
  "func ID ( ) { var ID : [ - - ( ( ( ID ) ) ) ] [ ] int }",
  "func ID ( ) { var ID : bool var ID : [ ] int print - - ( 123 / false * ID ) if - 123 { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ - ( ( ID [ ( - - ( 123 ) ) ] [ - ( ( true ) ) ] ) ) ] int ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) : bool { var ID : [ ] bool var ID : int while - ( - - true ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : bool { var ID : bool { var ID : bool var ID : int call ID ( ( - - ( - - ( ID ) ) ) ) } } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool , ID : [ ] bool ) : bool { call ID ( true * ( ID ) * - ID ) { } } func ID ( ) { }",
  "func ID ( ) : int { ID ( ) [ - true * ID ( ID ) ] [ ID ] = ID } func ID ( ) { }",
  "func ID ( ID : [ ] [ true and - ( ID ( false ) ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : bool { var ID : int print ( ID [ ID ] ) }",
  "func ID ( ) : bool { var ID : [ false * - false + true * ( - true ) + true ] [ ] int }",
  "func ID ( ID : [ ] int ) : [ ] bool { var ID : [ ( ID ( ) ) ] bool }",
  "func ID ( ID : bool , ID : [ ] int ) { var ID : int { var ID : int var ID : [ ] bool while ( true ) { } } }",
  "func ID ( ) : [ ( ( ID * ID [ - ( ID ) ] [ - ( ( - - - ( ( ID ) ) ) ) ] * - ( - - - false ) ) ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] [ ] [ 123 * - - ( - 123 ) / 123 ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : int ) : int { if ID ( ) + - true { } ID = ( ID ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : int } func ID ( ID : bool ) : bool { var ID : int }",
  "func ID ( ID : int , ID : int , ID : [ ] int ) { var ID : bool var ID : bool if ( - ( ID ) ) { } }",
  "func ID ( ID : [ ( - true / ( ( 123 ) ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : int ) { var ID : bool var ID : [ ] bool return }",
  "func ID ( ID : [ true * - false - ID ( ) [ ( ID ) ] [ ( ID ) ] - - - ( true ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ 123 / true and ( ID / false ) ] bool { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : int { var ID : int var ID : bool ID ( ) = - 123 while ( - ID ) { } }",
  "func ID ( ID : bool , ID : [ ] int ) { var ID : int var ID : bool }",
  "func ID ( ) { var ID : bool ID ( true * ( ID - ( - false ) ) * - - 123 ) = ( ID ) if ID { } }",
  "func ID ( ID : int , ID : bool ) : [ ] bool { var ID : int print - ID ( ) / ( ( ID ) ) while true { } }",
  "func ID ( ID : [ ] [ ID ( ) [ 123 * - - ( ID ) ] [ ( ( ID ) ) ] ] bool ) { }",
  "func ID ( ID : int , ID : bool ) : [ ] [ ( ID ( ) [ false ] [ - ( ( - - ID ) ) ] ) ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ( ( - 123 ) ) ] bool var ID : bool }",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) : int { var ID : int var ID : [ ID ] int }",
  "func ID ( ID : bool , ID : int , ID : bool ) : bool { var ID : [ ] [ ] bool var ID : [ ] int return }",
  "func ID ( ) { var ID : [ ID ( ID [ ( ID ) ] [ - - - ( 123 ) ] ) ] [ ] [ ] bool var ID : [ ] int } func ID ( ) { }",
  "func ID ( ID : [ ( ID [ - ID < ID ] [ - - ID ] ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { if ID ( ) - ( - false / ( - false ) ) + ( ID ) { } }",
  "func ID ( ) { var ID : [ ] [ ] int var ID : bool return ID ( ) [ true ] [ ( 123 ) ] } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] bool call ID ( ) call ID ( ID * 123 ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool if ID [ ( - ID ) ] { } }",
  "func ID ( ) { var ID : int var ID : bool if true * true * true - - true { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] [ ] bool ) { return }",
  "func ID ( ) { var ID : int } func ID ( ID : [ 123 * 123 == - ( ( ( - - - ( ( ( ( ( ( ( - ( - ID ) ) ) ) ) ) ) ) ) ) ) ] bool ) { }",
  "func ID ( ID : [ ID ( ) [ ID ( ID * - true * true ) ] [ ID ] ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ID [ ID ( ) [ - ( - ( ID ) ) ] ] [ ( ( ( ( - - ( true ) ) ) ) ) ] ] [ ] int } func ID ( ) { }",
  "func ID ( ID : bool ) : [ - - true * 123 - - ( - - ( ( - - ID ) ) ) - ( true ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : [ false / ( ( ID ) ) ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : [ ID [ 123 * - true + ID ] ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : [ ] [ - - ( 123 ) ] bool } func ID ( ) { }",
  "func ID ( ID : [ ( ID ( ( - ( ID ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : bool while - 123 / false and - true { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ - ID * - true / ( - ID ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int call ID ( ID [ ( ID ) ] [ 123 ] ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] int var ID : bool call ID ( ) { var ID : [ ] int var ID : int } }",
  "func ID ( ) { var ID : [ ] int { var ID : int var ID : [ ] bool while - - ( 123 ) { } print ( - ( - 123 ) ) } print ( ID ) }",
  "func ID ( ID : int ) { var ID : int } func ID ( ) { var ID : [ ] int }",
  "func ID ( ) { ID ( ID ( ) [ false * 123 + - true + ( ID ) ] [ 123 ] ) = ID call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { while 123 + ID ( ID [ ID ] ) { } { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : [ ] [ - false / - ID / ID ] bool var ID : [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool return ( ( - false * ID / ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ) { { var ID : [ ] int var ID : int print ( 123 / 123 ) print ID } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : bool } func ID ( ) : [ ] bool { var ID : [ ] [ ] bool }",
  "func ID ( ID : [ - - ( false / 123 * ID [ true ] [ ( ID ) ] ) ] bool ) { }",
  "func ID ( ID : int , ID : [ ] [ - - ID [ 123 / - false ] ] [ ] bool , ID : [ ] int ) { }",
  "func ID ( ID : bool , ID : [ - false / ( ( ID ( ) ) ) ] int , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int }",
  "func ID ( ) { print ID ( ( 123 and ( ID ) and true ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ ID ( 123 * true <= - true / ( ( - ( ID ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ 123 * ( - ID [ true - - ( ID ) ] [ ( ID ) ] ) ] bool { }",
  "func ID ( ID : [ ] bool ) : [ ( ( 123 / ( ( - - 123 ) ) * - - true ) ) ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) { ID = ( true / ID ( ) [ 123 ] * ( - ID ) ) }",
  "func ID ( ) : int { print ID [ true / ID ( ( false ) ) * 123 ] [ - ( ID ) ] }",
  "func ID ( ID : bool , ID : [ ] bool ) { var ID : [ ] int var ID : [ ] bool while - - - ID { } while false { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( ID ( ) [ ( - - ( ID ) ) ] [ ID ] ) ] int }",
  "func ID ( ) { var ID : int ID ( ID [ ID ( - ID ) ] ) = ID } func ID ( ) { }",
  "func ID ( ID : [ true * false - ID [ ( ID ) ] [ ( ID ) ] - ID ] [ ] int ) { }",
  "func ID ( ID : int ) : bool { if ID [ 123 * - - 123 - ID - ID ] { } }",
  "func ID ( ID : [ ] bool , ID : bool ) { while ID [ - ( ( true ) ) ] [ ID ] { } call ID ( ) }",
  "func ID ( ID : int ) : bool { var ID : bool return }",
  "func ID ( ) { var ID : [ ] int var ID : [ true + false * ( ( ( ( ( true ) ) ) ) ) - - ID ] bool }",
  "func ID ( ID : bool ) : int { var ID : bool var ID : bool print 123 and ID [ ID ] [ false ] and - ID } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { if - 123 / ID ( ( false ) ) * ( - ( ( ( 123 ) ) ) ) { } }",
  "func ID ( ID : bool , ID : bool ) : int { var ID : int while false < false or false { } }",
  "func ID ( ID : bool , ID : bool ) { } func ID ( ID : int , ID : [ ( - ID ) ] bool , ID : bool ) { }",
  "func ID ( ID : bool ) { var ID : int call ID ( ) return - ( 123 * 123 / ID ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ( - false / false * ID [ - ( false ) ] [ 123 ] ) ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : int return ID [ - false / ID / - - - ( ( - - false ) ) ] [ 123 ] }",
  "func ID ( ) { var ID : bool var ID : [ ] int } func ID ( ID : bool , ID : bool ) : bool { ID = true }",
  "func ID ( ) : int { var ID : bool var ID : bool ID [ ID [ true ] [ ( ID ) ] ] [ - ID ] = ID ID = ( ID ) }",
  "func ID ( ) : bool { var ID : int } func ID ( ) { var ID : bool var ID : [ ] [ ] bool }",
  "func ID ( ) { var ID : int while ID ( 123 * ( ( 123 ) ) * true ) { } }",
  "func ID ( ) { var ID : int if ( true * ( 123 / ID ) ) { } while - true { } }",
  "func ID ( ) : bool { var ID : bool var ID : int print ( ( ( ( ( ( ( ID ) ) ) ) ) ) ) ID = ID }",
  "func ID ( ) : [ ] bool { var ID : int ID [ - ID [ - - false ] ] = ID }",
  "func ID ( ID : [ ( - - ( ID [ ID ] ) ) ] [ ] int ) { }",
  "func ID ( ) { var ID : bool ID ( - 123 / ID ( ) [ false ] [ ( - false ) ] ) = ( - - ID ) print true } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int print ID ( ) [ ( 123 ) ] }",
  "func ID ( ) : [ ( - ( ID ( ID ( ) ) ) ) ] [ ] int { }",
  "func ID ( ) { var ID : int return ID [ ID ( ) [ ID ] [ 123 ] ] [ ID ] }",
  "func ID ( ) { } func ID ( ) { var ID : int var ID : bool if false * ID ( ) * ( true ) { } }",
  "func ID ( ID : bool ) : bool { var ID : [ ] [ ] bool } func ID ( ID : [ ] bool , ID : int , ID : int ) { }",
  "func ID ( ID : int , ID : int ) { var ID : bool var ID : [ false / false * ( ( - 123 ) ) ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool return } func ID ( ID : [ ID [ 123 ] ] bool ) { }",
  "func ID ( ) { var ID : int return } func ID ( ) { var ID : int }",
  "func ID ( ID : [ ( ( ( - ID [ ( ( 123 ) ) ] [ false ] ) ) ) ] int ) { }",
  "func ID ( ID : [ ] [ true - 123 / false and - ( false ) ] [ ] int ) { }",
  "func ID ( ) { var ID : bool var ID : [ ] int if ID ( ) [ - - ( false ) ] [ 123 ] { } } func ID ( ) { }",
  "func ID ( ID : [ true * false < false - ID ( ( ( true ) ) ) + ID ] bool ) { }",
  "func ID ( ID : [ ] int ) { ID = ( - 123 * ( ID ) / ( ( ( ID ) ) ) ) }",
  "func ID ( ) { while - ID ( - true * ID ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ) : int { call ID ( ( - false / ID ( ID ) / 123 ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : bool while ID [ ( ID ) ] [ 123 ] { } while 123 { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int ID [ ( 123 * ( - true ) ) ] = ( false ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : int var ID : [ ] int { var ID : bool var ID : bool } }",
  "func ID ( ) : bool { var ID : bool var ID : int { var ID : [ 123 / 123 - - ID + - ID ] int } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID ( ( ID ( ( ( false ) ) ) ) ) ] [ ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool ) { { while ID ( false ) { } while ( ID ) { } } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID ( - - ( 123 / ( ID ) ) ) ] [ ] bool ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : bool } func ID ( ) : [ ] bool { var ID : bool var ID : int }",
  "func ID ( ) : bool { var ID : [ ] [ ] bool var ID : int return }",
  "func ID ( ) : bool { } func ID ( ) : bool { var ID : bool if ID / - true / ( - ID ) { } }",
  "func ID ( ID : [ ] int ) : bool { if true / ( ID [ - ID ] [ false ] ) * ( ( true ) ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : [ ID [ ( true * ( - 123 ) ) ] ] bool { }",
  "func ID ( ID : bool , ID : int ) { return - ( - ID [ true ] ) }",
  "func ID ( ID : [ ] int ) : [ ID ( ) [ true * ID [ ( - - ( ID ) ) ] / ( - - ID ) ] ] [ ] int { }",
  "func ID ( ) { var ID : int var ID : [ ] bool while ( ( true ) ) { } }",
  "func ID ( ID : [ ] bool , ID : [ ] [ ] [ ] [ ID [ true ] [ true ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ 123 / 123 - ( ( ID ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ true + false * true * ID ( ) [ - ID ] + - - - - true ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : bool } func ID ( ID : int , ID : int , ID : [ ] int ) : [ ] bool { }",
  "func ID ( ID : int , ID : int , ID : bool ) : int { call ID ( 123 - - ( - ( ID ) ) ) }",
  "func ID ( ID : [ ] [ ( - ID ( ) / ( true ) * ( ( 123 ) ) ) ] bool ) { }",
  "func ID ( ID : [ ] bool , ID : int , ID : bool ) : int { var ID : bool var ID : int return }",
  "func ID ( ID : [ ( ( ID [ ( ( true ) ) ] [ ( false ) ] ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int return - - ID ( - ( ( ( - true ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : bool ID [ - ID [ false ] [ - false ] ] = ( - ID ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : bool var ID : [ ( ID [ 123 ] ) ] [ ] [ ] bool }",
  "func ID ( ) : [ ID [ ID ( false * ( - ( ( 123 ) ) ) ) ] [ ( ID ) ] ] int { }",
  "func ID ( ) { print ( false * ID ( ) [ false / false / ( false ) ] * ID ) } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : bool while 123 * ID [ 123 * false * ID ] { } ID = - ( false ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( false == ( ( ID ) ) ) ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ) : int { var ID : [ ] int call ID ( ) print ID [ ( false ) ] } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : [ ID [ - - 123 and - ID and - ( ID ) ] [ ( ( false ) ) ] ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : [ ID ( - ( ( - 123 ) ) ) ] [ ] bool { }",
  "func ID ( ) { ID ( ( ID [ true == 123 ] [ 123 ] ) ) = - ID while 123 { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool print false + true / ( ID ( ID ) ) / ID - ID }",
  "func ID ( ) { if 123 * ID [ - ( true / - true * ID ) ] [ ( ( ID ) ) ] / true { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int call ID ( ID [ ( - ( - 123 ) ) ] [ ( ID ) ] ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool if ( - - ( ID ) ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : [ ] [ ] [ ] int if ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ true or - 123 and - - ( ID ) and ( - - ID ) or 123 ] bool ) { }",
  "func ID ( ID : bool , ID : int ) : [ ] [ true / ( - ( false ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : [ - ID [ - true - - - ID [ ID ] ] [ - ID ] ] int ) { }",
  "func ID ( ID : int , ID : int ) : int { }",
  "func ID ( ) : bool { var ID : [ ( true + - ( - true ) + ( - 123 ) ) ] bool } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : bool } func ID ( ) { var ID : [ 123 > ( ID ) ] bool }",
  "func ID ( ) : int { while ID ( ) [ 123 and ID / - ( - ID ) * ID and true ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ID ( ) [ - - - ( false ) ] [ ( false ) ] ] int }",
  "func ID ( ID : bool , ID : [ - ID / - - - ( ID ( ) ) ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) { } func ID ( ID : int ) : bool { var ID : bool var ID : int }",
  "func ID ( ) : bool { ID = ( - false <= 123 and ( ID ) and false ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : [ ] int while true / - ID * 123 { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int { ID ( ) [ ID ( false ) ] [ ID ] = ID { } } { } }",
  "func ID ( ) { var ID : [ 123 * ID ( true * 123 * ( 123 ) ) ] bool }",
  "func ID ( ) : bool { var ID : bool return }",
  "func ID ( ) { while - true / false + - false / true * - ID ( ) { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool return ( true + ( ID ) + 123 ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ true and ID ( ) [ ( ID ) ] ] [ ] [ ] int ) { }",
  "func ID ( ) : int { var ID : [ ] [ ] bool return }",
  "func ID ( ID : [ ( ( - ( ( true ) ) ) ) ] [ ] bool ) { }",
  "func ID ( ID : bool ) { var ID : bool print - ID [ ID ( ) [ ( false ) ] ] while ( false ) { } }",
  "func ID ( ID : bool ) : [ 123 ] bool { var ID : int var ID : [ true ] int }",
  "func ID ( ) : bool { var ID : int return 123 / ID / ID ( ) [ ( - - ID ) ] [ ID ] }",
  "func ID ( ID : [ ( ( false * ( 123 * ID / ID ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { { var ID : bool } call ID ( ID ( ) ) } func ID ( ) { }",
  "func ID ( ID : int ) { } func ID ( ) { while ( - ID [ ( ID ) ] [ true ] ) { } }",
  "func ID ( ) : int { var ID : [ ] int var ID : bool call ID ( ) }",
  "func ID ( ) : int { var ID : int var ID : [ ( ID ( true ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( 123 / ID [ ID [ - ID ] [ ( ( - ID ) ) ] ] [ ( ( 123 ) ) ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ID ( ID [ 123 - ID ( ) - ( ( ID ) ) ] ) ] bool ) { }",
  "func ID ( ID : [ ] [ ] [ ] [ - - - false + ( - 123 ) + ( ( 123 ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ( true * ( true * - ( false ) / 123 ) ) ] [ ] int }",
  "func ID ( ) : bool { var ID : [ ( - ( ( ( false ) ) ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int var ID : int return ID ( ( ID ) ) }",
  "func ID ( ) : [ ] [ ] int { return }",
  "func ID ( ID : [ ID ( ( 123 / ( ( ID ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) : int { var ID : int return false / - ( false ) / ID } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ - ( - 123 / ( - ( ID ) ) ) ] ] [ ] [ ] [ ] [ ] int ) { }",
  "func ID ( ) { var ID : [ - ID [ - ID ( 123 ) ] [ - true ] ] bool } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool while ID [ ID / false * ID ] [ ID ] { } { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : bool var ID : bool while ID / ( ( ID ) ) * ( ( false ) ) { } call ID ( ) }",
  "func ID ( ) { print ID - ID ( ) [ ( ID ) ] [ - false ] }",
  "func ID ( ) { var ID : int var ID : bool call ID ( 123 * true and ( ( - 123 ) ) and - ID ) while ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool ID ( ) [ ID * 123 * ID ] = ( ( - ID ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) : int { var ID : int var ID : int } func ID ( ID : [ ] int ) { }",
  "func ID ( ) { print ID [ ID * false * - 123 + true ] } func ID ( ) { }",
  "func ID ( ) { while ID ( ) [ false / true + 123 / ID / - ( - ( ( - ID ) ) ) ] { } }",
  "func ID ( ) { while - ID [ 123 or ( ( - ID ) ) or - ID ] { } } func ID ( ) { }",
  "func ID ( ) { print false / - true + true - ( false * ( true ) * ( - ( ID ) ) ) ID = false } func ID ( ) { }",
  "func ID ( ) { if true - ( true + ID [ ( ID ) ] [ ( ID ) ] ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : int print ID [ 123 * - false ] [ true ] { } }",
  "func ID ( ID : int ) : int { var ID : int return } func ID ( ID : [ ( ( false ) ) ] int ) { }",
  "func ID ( ) { ID ( ) [ ID ( ( ID [ ( false ) ] [ ID ] ) ) ] = ( true ) print ID }",
  "func ID ( ID : [ ] bool , ID : int , ID : int ) : [ 123 * - ID - - ID - ( 123 ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : bool print ID [ ID ( ) * - ID ( ) ] { } } func ID ( ) { }",
  "func ID ( ) : [ ( ID ( ) [ ID ( ) [ - true ] ] [ false ] ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) : int { var ID : int var ID : [ true >= - true ] int }",
  "func ID ( ) { var ID : int ID [ ID [ ( ID ) ] ] [ 123 ] = - - - false { } }",
  "func ID ( ) { while - ( true + - ID [ ( ( ID ) ) ] [ ID ] ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ ( ( ID ( false - ( ( ID ) ) + false ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int if - true / false or ( ( false ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ID and - - ID / false * false + 123 + ( - true ) ] bool { }",
  "func ID ( ID : int , ID : bool , ID : [ ] [ ] int ) { var ID : int var ID : int while ( ID ) { } }",
  "func ID ( ) { var ID : int call ID ( ) print ( ( ( false ) ) ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] int var ID : bool print ( ( ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : bool ) { var ID : int ID = ( 123 ) }",
  "func ID ( ) { var ID : int ID [ - - ( 123 * - ( - ID ) ) ] = ( ( 123 ) ) }",
  "func ID ( ID : bool , ID : [ ] int ) : bool { var ID : bool var ID : bool if ID [ ( ( ID ) ) ] [ ID ] { } while ID { } }",
  "func ID ( ) : bool { var ID : bool var ID : [ ( ( - true ) ) ] int }",
  "func ID ( ) : bool { var ID : bool var ID : [ ID ( - ( - ID ) ) ] int }",
  "func ID ( ID : bool , ID : [ ( ( true * false + ID + false ) ) ] [ ] int ) { }",
  "func ID ( ID : [ ID ( ) [ ( ( 123 * 123 / ( ( ID ) ) ) ) ] ] bool ) { }",
  "func ID ( ) : int { if ID and ID [ ( ( false ) ) ] and true { } print - ID }",
  "func ID ( ) { var ID : int var ID : [ true + ( ID [ ID ] [ ( true ) ] ) + ( ( - ID ) ) ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int ) { var ID : bool return ID * - ID ( ) * - ( 123 ) }",
  "func ID ( ID : bool , ID : int , ID : [ false * ID ( ) [ - - - ID ] [ true ] / ID ] [ ] int ) { }",
  "func ID ( ID : int ) : bool { var ID : [ false / ( ( true ) ) ] bool }",
  "func ID ( ) : int { var ID : bool var ID : int while true * - ID ( - true ) { } } func ID ( ) { }",
  "func ID ( ) { } func ID ( ) { ID = ID / ID ( ) [ - 123 ] print 123 }",
  "func ID ( ID : [ ] [ 123 / ID ( ) [ ID ( ( ID ) ) ] [ - ID ] ] bool ) { }",
  "func ID ( ) { var ID : int var ID : int print true * true - ID ( ) [ ( true ) ] [ ID ] - ( ( 123 ) ) }",
  "func ID ( ) : int { var ID : bool return } func ID ( ID : [ ] int ) { while false { } }",
  "func ID ( ) { { } }",
  "func ID ( ) { var ID : int var ID : [ ] [ ] [ ] [ ] bool call ID ( ID ) if 123 { } }",
  "func ID ( ) { return false / ( ID ( ID ( ) ) ) / - false }",
  "func ID ( ID : [ ] bool ) : bool { var ID : [ false / ID ( ) [ false ] [ - - false ] * false ] [ ] bool }",
  "func ID ( ) : bool { var ID : int return } func ID ( ID : bool ) : [ ] [ ] [ ID ] int { }",
  "func ID ( ) { var ID : bool return - ( ( ( ID ) ) ) }",
  "func ID ( ID : [ ] int , ID : [ ( ID [ ID [ ID ] [ ( - ( ( - false ) ) ) ] ] [ - ( true ) ] ) ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( - 123 / ( ID ( ) ) / true ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] [ true or ( ( ID ( ) ) ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID [ true - ID ( ( true ) ) + ID ] [ 123 ] ] bool ) { }",
  "func ID ( ID : int ) { var ID : bool var ID : bool ID [ false * 123 - ( false ) + ID ] = ( ID ) while - ( - ID ) { } }",
  "func ID ( ID : [ ] bool , ID : [ ID [ 123 * ( true ) ] [ ID ] ] int , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { ID [ ID [ - ( ID ) ] [ - ( ID ) ] ] [ - 123 ] = false if ( - ( ID ) ) { } }",
  "func ID ( ) { var ID : bool var ID : int if ID [ ( - ( - 123 ) ) ] { } { } }",
  "func ID ( ) : [ ] int { call ID ( ) ID ( ) [ true * ID [ - - ID ] ] [ false ] = ID }",
  "func ID ( ) { if ( false / false / - ID > ( - ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ - ID ( ) or ( - ( - false ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : [ ] [ ] [ ID [ - false ] ] bool { }",
  "func ID ( ID : bool , ID : int ) { var ID : [ 123 / ( ( ( ( false ) ) ) ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { } func ID ( ) : bool { call ID ( ( ID ) ) call ID ( ) }",
  "func ID ( ) : [ ] int { var ID : int var ID : int call ID ( ) call ID ( - 123 ) }",
  "func ID ( ID : int , ID : [ ] bool ) { var ID : [ ] [ - true / - ( 123 ) * ID ] int var ID : int }",
  "func ID ( ID : int , ID : bool ) : int { var ID : int var ID : bool call ID ( ) } func ID ( ID : bool ) { }",
  "func ID ( ID : bool ) : bool { if ( - ( false / - ( ( ID ) ) ) ) { } while false { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ( false / ID [ ( - - ( ID ) ) ] [ ( ( ID ) ) ] * 123 ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) : bool { while ( ( true * false / - false ) ) { } { } } func ID ( ) { }",
  "func ID ( ) { ID ( ) = - ID ( ) * ( ID ( ) ) * ID ID = ( ( true ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool { var ID : bool call ID ( ) return } return } func ID ( ) { while ID { } call ID ( ) }",
  "func ID ( ID : bool ) : bool { var ID : int var ID : [ ] bool { var ID : int var ID : int { } } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : [ ID / 123 / ID [ - false ] [ ( - false ) ] ] bool }",
  "func ID ( ) : int { { } ID [ - false * - ( ID ) / false ] = ID }",
  "func ID ( ID : bool ) : [ ] int { return }",
  "func ID ( ) : bool { var ID : bool while ( ID [ false and - ID ] [ ( ( 123 ) ) ] ) { } }",
  "func ID ( ) : int { var ID : int var ID : int }",
  "func ID ( ) { var ID : bool var ID : bool if false / ( ID [ ( - ID ) ] [ - 123 ] ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool call ID ( false + ( - true / ( ID ) * ( 123 ) ) + 123 ) if ID { } } func ID ( ) { }",
  "func ID ( ) : [ ( ID [ ID ( ( ID ) ) ] [ ID ] ) ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) : [ ( ID [ ID ] ) ] bool { }",
  "func ID ( ID : [ ( - - - ID ( ) [ true / ( false ) ] ) ] bool ) { }",
  "func ID ( ) { var ID : bool var ID : bool { var ID : int call ID ( ) { var ID : [ ID ] bool var ID : [ ] int } } ID = 123 } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool print - true * ID / ( ( false ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : int var ID : bool { { var ID : int var ID : bool } } ID = ID } func ID ( ) { }",
  "func ID ( ) : int { { var ID : [ true != false * 123 / ( - ( ID ) ) ] int } if ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool if ( ( ( ID ) ) ) { } }",
  "func ID ( ID : int , ID : [ ( false * ID ( ID ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool if ( ( false / - - - - ( - - ( ID ) ) * ( ID ) ) ) { } print ( ( ( ( ( 123 ) ) ) ) ) } func ID ( ) { }",
  "func ID ( ) : [ ( ID [ ID [ - - - - 123 ] ] [ - ID ] ) ] [ ] int { }",
  "func ID ( ID : [ ] [ ] [ ] bool , ID : int , ID : [ ID ( ( - ID ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ( - ( ID [ - ( ID ) ] [ ( ID ) ] ) ) ] int { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : int return } func ID ( ID : bool , ID : [ - ID ] bool , ID : bool ) { }",
  "func ID ( ) : [ ( - ID ( - true / ID [ - - ( ID ) ] ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : [ ID ( ( - - ID ) ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int , ID : bool ) { var ID : int var ID : int print - ( ( true ) ) ID = true }",
  "func ID ( ID : [ ( - ID * false > - true + ( true ) + 123 ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int ID [ - ID / ID [ ( ID ) ] [ ID ] / - 123 ] = ( - 123 ) ID = ID }",
  "func ID ( ) { while ID [ 123 <= ( 123 / ( - ID ) ) ] { } if - false { } }",
  "func ID ( ID : [ ID ( - ( true * ID [ 123 ] ) ) ] bool ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) { var ID : int if ID * - true * ( ( ( ( ID ) ) ) ) { } while 123 { } }",
  "func ID ( ID : int ) : [ ] int { var ID : bool var ID : int { var ID : bool var ID : [ - ( true ) ] [ ] [ ] [ ] int } if ID { } }",
  "func ID ( ) : bool { var ID : int var ID : [ ] int return ID ( ) [ ID ] }",
  "func ID ( ) : bool { var ID : [ ID [ ID [ ( ID ) ] [ true ] ] [ ID ] ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : int { while false / false + ( - ID ) + ID { } print ID } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ ] [ ] int ) { var ID : [ ] bool return } func ID ( ID : [ ] bool ) { }",
  "func ID ( ) : [ ( - 123 * 123 / ( ( false ) ) ) ] int { }",
  "func ID ( ID : [ ] [ ] bool , ID : bool , ID : int ) { var ID : int print ID ( ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ( true * ID [ ( ID ) ] [ - false ] ) ] int } func ID ( ) { }",
  "func ID ( ) : [ false >= ID [ ( - ID [ ( false ) ] ) ] [ true ] ] int { }",
  "func ID ( ID : [ - 123 and false / false - true or ID or true ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) * - ( - ID [ - - ( ID ) ] ) / false ] [ ] int ) { }",
  "func ID ( ) : bool { } func ID ( ID : int , ID : bool ) : int { var ID : [ ID ] [ ] int }",
  "func ID ( ) { var ID : int if - true * - ( true and 123 ) { } }",
  "func ID ( ID : bool , ID : [ ] bool , ID : int ) : [ ( ID [ ( 123 ) ] [ ( 123 ) ] ) ] [ ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ID [ ID + ( true / ( ( - 123 ) ) * ID ) ] ] int ) { }",
  "func ID ( ID : bool ) : int { var ID : bool ID ( ID ( ( - ( ID ) ) ) ) = - ( - false ) }",
  "func ID ( ) { while ID [ - ( 123 * ( - ( ID ) ) / ID ) ] [ - ( - ID ) ] { } while false { } }",
  "func ID ( ID : int , ID : int ) : [ ] [ ] int { while false * false * ID { } print - - - - ID }",
  "func ID ( ID : bool , ID : int ) { { var ID : [ ID + false / 123 / - ID ] [ ] bool } }",
  "func ID ( ID : [ ] bool , ID : bool , ID : int ) { var ID : int return true - true - ( ( - - ( - ID ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { print false / ID [ - false ] [ - ( - ID ) ] / ( - 123 ) } func ID ( ) { }",
  "func ID ( ID : [ - 123 / ID [ ID [ ID ( ) ] ] * false ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) { var ID : [ ] bool return ID ( ) [ ID ] } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : bool var ID : bool { var ID : bool ID ( ) = ( ( ID ) ) print - false } }",
  "func ID ( ) { while ID [ - ( ID * - ID ) ] [ ID ] { } ID = ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ) : int { } func ID ( ID : bool ) : int { { var ID : [ false ] int } call ID ( ) }",
  "func ID ( ID : [ ID [ ( - ID [ false ] [ - false ] ) ] [ false ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) : bool { return 123 == false - - false * - ( 123 ) * ( true ) - - ( ( 123 ) ) }",
  "func ID ( ID : bool , ID : [ false * ( 123 * false or false ) ] bool , ID : bool ) { }",
  "func ID ( ) { var ID : int var ID : [ false * - false / ( ID ) ] [ ] int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : int }",
  "func ID ( ID : bool ) { } func ID ( ID : [ ] int ) : [ ] bool { print 123 }",
  "func ID ( ) { call ID ( ID * ID ( ) + - ID [ ID ] [ ( ( - - ID ) ) ] - - ID ) while ( - - - - ( false ) ) { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : bool ID [ false / ( ( true ) ) * - ID ] [ ( - ID ) ] = - - ( - ( ( true ) ) ) if ID { } }",
  "func ID ( ID : bool , ID : bool ) : bool { var ID : bool return } func ID ( ID : bool ) { var ID : int }",
  "func ID ( ) { var ID : [ ] bool var ID : [ ID ( ) * ID [ ID ] ] int } func ID ( ) { }",
  "func ID ( ID : [ ] [ - ID [ - ID ( ( ID ) ) ] [ ID ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : bool { var ID : int }",
  "func ID ( ) : int { var ID : bool var ID : bool while ID [ ( ( 123 ) ) ] { } } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ 123 * ( 123 + - ( ( - - true ) ) ) ] bool }",
  "func ID ( ) { var ID : [ ID ( ) / ID * ID <= ID ] int }",
  "func ID ( ) : [ - false * 123 + 123 * ID ( ) [ - - ID ] [ ( - ( ID ) ) ] * ID - false ] [ ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : bool ) { call ID ( - - ID + ( - 123 ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool } func ID ( ID : [ ] bool , ID : int , ID : int ) : int { var ID : [ ] bool }",
  "func ID ( ) : [ ID ( ) [ true / ( - ( ( true ) ) ) * false ] [ ( false ) ] ] [ ] bool { }",
  "func ID ( ID : bool , ID : bool ) : bool { call ID ( 123 - ( ( - ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - ID / ( true - ID * - ( - 123 ) * 123 ) / - ( ID ) ] bool ) { }",
  "func ID ( ID : [ ( ID [ ( true * ( - ( ( - 123 ) ) ) * true ) ] [ - - - ( ID ) ] ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : int { return } func ID ( ) : [ ] bool { if true { } while ( ( ID ) ) { } }",
  "func ID ( ID : int , ID : [ ID [ ID [ - - 123 ] [ - - ID ] ] ] int , ID : int ) { }",
  "func ID ( ) : bool { var ID : [ ] int { var ID : [ ] [ ] bool var ID : int { } while ID { } } call ID ( ) }",
  "func ID ( ID : [ ] [ ] int ) : [ ] bool { var ID : bool if - ID ( ) { } print ( ID ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool ) { return ( ( ( ID ) ) ) }",
  "func ID ( ID : int , ID : [ ] [ - - - - ( true - ( ID ) ) ] [ ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : [ ] [ ] [ 123 * ID ( ID ) / - ( ( false ) ) ] int var ID : int }",
  "func ID ( ID : int , ID : bool , ID : bool ) { while ( ( ID ) ) { } while false { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] bool var ID : [ - ( ID < - - 123 ) ] int }",
  "func ID ( ID : bool ) : bool { var ID : int call ID ( ( ( ID ) ) ) ID = ID }",
  "func ID ( ID : bool ) : bool { { } { return - 123 / ID ( 123 ) } }",
  "func ID ( ) : bool { if ( - false - ID [ - - - ( ( - ID ) ) ] [ false ] ) { } }",
  "func ID ( ) { call ID ( - ID [ ID ( ) * ( - ID ) ] [ false ] ) ID = true } func ID ( ) { }",
  "func ID ( ) : int { { var ID : [ ] int var ID : [ true / ( ID ) / ID ] int } print true } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ - ID ( ) [ 123 - ( - - ( false ) ) ] [ ID ] ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : int { if 123 + - ( 123 ) { } } func ID ( ) { }",
  "func ID ( ID : [ - - 123 * true / false - ID ( ( ( ( ( ( ID ) ) ) ) ) ) + false ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { } func ID ( ID : bool , ID : bool , ID : bool ) : [ ] bool { var ID : int var ID : bool }",
  "func ID ( ID : [ ( false + ( ( ID ) ) ) ] bool ) { }",
  "func ID ( ID : int ) { var ID : [ false > false / - ID ( ) [ true ] [ ID ] / ( 123 ) ] int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool return ID ( ) [ true * ID ( ) ] } func ID ( ) { }",
  "func ID ( ) { if ID / ( - ID ( ID ) ) * ( 123 ) { } while ID { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ID : [ ] int ) { call ID ( - - ID ) while 123 { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] [ ] bool ) { var ID : [ ] int return - ( 123 ) }",
  "func ID ( ID : bool ) : bool { var ID : int var ID : [ ] int print - ( ( ID ) ) print - false }",
  "func ID ( ID : [ ] [ ] bool , ID : [ ( ( ( ( ID ) ) ) ) ] [ ] [ ] [ ] int , ID : [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int }",
  "func ID ( ID : bool , ID : int , ID : [ ] [ - 123 * false - ID ( ID ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ false - ( ID / ID [ ( ( - ( ( 123 ) ) ) ) ] [ ( true ) ] ) + ( - ( ID ) ) ] int ) { }",
  "func ID ( ID : int , ID : int ) : bool { var ID : bool var ID : [ ] bool ID [ 123 ] = 123 print true }",
  "func ID ( ID : [ false / true and ( ( 123 / ( - false ) * - - ID ) ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : [ ] int { var ID : bool if ID ( ) [ ( ( - ID ) ) ] { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int } func ID ( ID : [ ] int ) : int { var ID : [ true ] bool }",
  "func ID ( ) : bool { while ID [ - ( ID ( - - false ) ) ] [ ( false ) ] { } ID = ( ( ID ) ) }",
  "func ID ( ) : bool { ID ( false * true * ( ID [ false ] [ ( 123 ) ] ) ) = false }",
  "func ID ( ID : [ ] bool ) { var ID : bool return - ID ( ) [ false ] [ - ( 123 ) ] } func ID ( ) { }",
  "func ID ( ID : bool ) { while - 123 / ( 123 * false / true ) * ID { } print 123 }",
  "func ID ( ID : bool , ID : [ true + - ( ( true / - ( ID ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { print true / - ( false and true >= true ) * ID ID = ID } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : [ ID ( - ID [ - ( ID ) ] ) ] [ ] [ ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID ( ) * ( ID [ ( - - ID ) ] [ ID ] ) ] [ ] [ ] [ ] bool var ID : int }",
  "func ID ( ID : int , ID : [ - ( ( true / ( - ( - 123 ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ - ID ( ( ( ID ) ) ) ] [ ] [ ] [ ] bool , ID : [ ] int ) { }",
  "func ID ( ) { var ID : bool print ID [ ID ( ( ID ) ) ] [ ID ] } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : [ 123 / ( ( - true ) ) * - ( false ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ID ( - ( - - ID ) ) ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : [ ] [ ] int { } call ID ( ID ) }",
  "func ID ( ID : bool , ID : bool , ID : [ ] [ ] int ) { var ID : int if ( ID ) { } }",
  "func ID ( ID : [ 123 * - true / true - ( - ( false ) ) + - 123 ] [ ] int ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) : [ ] bool { var ID : int call ID ( ID ) }",
  "func ID ( ID : [ ( ( ID [ - - 123 ] ) ) ] [ ] bool ) { }",
  "func ID ( ID : bool ) { var ID : [ - ( ID ( ID ) ) ] bool }",
  "func ID ( ) { var ID : int print ID [ - - ( ID ) ] [ - - ID ] }",
  "func ID ( ID : [ ] bool ) : int { var ID : [ true * - ( 123 ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : [ - false * ID [ ID * ID [ ID ] ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ - 123 / - - ID ( ) [ - true / ( ( - ( true ) ) ) ] [ - ID ] ] int ) { }",
  "func ID ( ID : [ ] bool ) : int { var ID : [ - ( ( ID ) ) ] [ ] [ ] int var ID : [ ] [ ] bool }",
  "func ID ( ) : [ - ( 123 / 123 / 123 + 123 / 123 - ( false ) ) ] int { }",
  "func ID ( ID : bool ) { var ID : bool var ID : int call ID ( 123 > - - - true ) call ID ( ) }",
  "func ID ( ID : [ ID ( ) * 123 / false or true * ( ( ( - 123 ) ) ) or ID ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : bool { var ID : int var ID : bool }",
  "func ID ( ID : int , ID : int ) : [ ] bool { var ID : int var ID : int call ID ( ) while - ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int ID = ( 123 - false - false ) print - ID }",
  "func ID ( ) : int { var ID : [ ] bool while ID [ - ID ( ) ] { } }",
  "func ID ( ID : bool , ID : int ) { var ID : int { } print - true * - - - true / - ( ( - ID ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( - 123 * - ( ID ) ) ] [ ] int var ID : [ ] int }",
  "func ID ( ) : [ ] bool { while ID [ ID ( ) [ 123 ] [ - - 123 ] ] { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool ) { var ID : bool ID ( ) = true / false / true print - ( ID ) }",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) { var ID : int var ID : [ ] int }",
  "func ID ( ) : int { var ID : [ - ( true * ( - - false ) ) ] bool var ID : [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ ( ( ID [ - - ID ] [ ( ID ) ] ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ - ( true / - ID ( ) != - ID ) ] int }",
  "func ID ( ) { var ID : [ 123 + false + - ( ( 123 ) ) ] int } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool , ID : [ ] [ ] int ) { call ID ( true ) print ( - - - 123 ) } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : bool while ID ( ) [ ( ID ) ] { } if ( - true ) { } } func ID ( ) { }",
  "func ID ( ) : [ ] [ - false or ( ( ( false ) ) ) or ID ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ID / - 123 * true < - 123 ] [ ] [ ] [ ] int var ID : bool }",
  "func ID ( ) : bool { var ID : bool var ID : int call ID ( ) return }",
  "func ID ( ) { var ID : int var ID : [ true + ( ID ( ) [ ( - ( ID ) ) ] [ - - ( ID ) ] ) ] int }",
  "func ID ( ) { var ID : bool var ID : [ ] bool { var ID : [ - - true / ID ] [ ] bool var ID : int } }",
  "func ID ( ) : int { var ID : bool { print ID [ ( ID ) ] [ false ] } ID = 123 } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { return ID [ ID / ( - false ) ] }",
  "func ID ( ID : bool ) { call ID ( - - ID [ 123 / ID ] ) ID = ( - 123 ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ] [ ] [ 123 - ( 123 ) + 123 ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( 123 / 123 / ID [ ( 123 ) ] [ ( ( 123 ) ) ] ) ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] int var ID : int while ( ( ( 123 ) ) ) { } if - ( ID ) { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : bool return ID [ ( ( - ID ) ) ] [ ID ] }",
  "func ID ( ID : bool ) : [ ( ( ( - - true ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : int while - - ID ( true * ( false ) * 123 ) { } if ID { } }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : int print - true + 123 / - ID / true - ( 123 ) }",
  "func ID ( ID : [ ID ( ) [ ID [ ID ( ) ] [ ( ID ) ] ] [ - 123 ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) { if ( - - ID ( ID ( - true ) ) ) { } print 123 } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) : [ ] bool { var ID : bool var ID : [ ] int print false }",
  "func ID ( ID : bool ) : int { var ID : [ ] [ ( ID ( ) / 123 ) ] bool }",
  "func ID ( ID : int , ID : [ ] [ ] [ ] int , ID : int ) : bool { } func ID ( ) { }",
  "func ID ( ) : [ true * ( ( - ( true - true ) ) ) / ID ] [ ] [ ] int { }",
  "func ID ( ) : int { var ID : int var ID : bool while 123 < 123 / 123 / true { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( ( ID [ ID ] ) ) ] int }",
  "func ID ( ID : int , ID : int , ID : bool ) : int { if ID [ ID ] { } ID = - ID }",
  "func ID ( ) : bool { var ID : bool var ID : bool while true - true + ( - - ID ) { } print ( - - - true ) } func ID ( ) { }",
  "func ID ( ID : int ) { ID ( ID ( - - - ID ) ) = ID ID = - ( ( ID ) ) }",
  "func ID ( ) : int { var ID : [ false - ( ID ( ) [ - true ] ) + ( ID ) ] int } func ID ( ) { }",
  "func ID ( ) : [ ] int { ID [ ID ( ) [ ID [ true ] [ - ( ( - true ) ) ] ] ] [ - ID ] = ( ( ID ) ) }",
  "func ID ( ) { var ID : [ ] int } func ID ( ) : [ ] bool { ID ( ) [ ( ID ) ] = ID }",
  "func ID ( ID : bool ) { var ID : int var ID : bool return } func ID ( ID : [ ID ( ) ] bool ) { }",
  "func ID ( ) : bool { var ID : int var ID : bool print 123 - false / true and false and ID if ID { } }",
  "func ID ( ) { var ID : [ ] bool var ID : bool }",
  "func ID ( ) : [ false * ( true / true - - ID ( ) [ 123 ] [ ID ] ) / - - - - ( ID ) ] int { }",
  "func ID ( ID : [ ] [ ( ID ( ) [ ( true ) ] [ ID ] ) ] bool ) { }",
  "func ID ( ) { var ID : [ ] int print 123 / - - - ( ( - ID ) ) * false { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( ID [ - ( - - ID ) ] [ ID ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ] [ ] bool , ID : int ) : [ true / ( false ) ] [ ] int { }",
  "func ID ( ) : [ ] int { var ID : bool var ID : bool ID ( - true / ID * ( - ID ) ) = ID print ( true ) }",
  "func ID ( ID : bool ) { print - true / ID ( ( - ID ) ) ID = false } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int ) : int { var ID : int var ID : [ ] int print ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] [ ] bool ) : int { var ID : bool { var ID : int } ID = ( ID ) }",
  "func ID ( ID : [ ] int , ID : int ) { var ID : bool var ID : bool print ( 123 ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : [ ] [ ] [ ] [ - false * ID [ false ] [ false ] ] [ ] [ ] int { }",
  "func ID ( ID : bool ) : bool { var ID : int print false * - ( ( ( - - ( ( ID ) ) ) ) ) print ID } func ID ( ) { }",
  "func ID ( ) : bool { print - ID / false * true - ID [ true ] } func ID ( ) { }",
  "func ID ( ) { var ID : int if - false - ID ( ( ( ( ( false ) ) ) ) ) { } }",
  "func ID ( ID : [ 123 / ID [ ( false * 123 / ( 123 ) ) ] * - ID ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int print - 123 * ( false * 123 * ( true ) ) if - ID { } } func ID ( ) { }",
  "func ID ( ) { return ID ( ) * 123 * true + 123 + ID ( ) }",
  "func ID ( ID : int ) { var ID : int ID [ 123 / ID [ - ( false ) ] / false ] = - ( 123 ) print ID } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] [ ( ID [ ( ID ) ] [ true ] ) ] bool var ID : [ ] bool }",
  "func ID ( ID : [ ] [ ] bool , ID : [ ] [ false / 123 and - - ID ] [ ] [ ] [ ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int } func ID ( ID : [ ] int , ID : int , ID : [ ] [ 123 ] bool ) { }",
  "func ID ( ) : bool { call ID ( false * false <= - - ID ( ( false ) ) ) call ID ( ) }",
  "func ID ( ) : int { var ID : [ ( ( - ID [ 123 ] ) ) ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : int var ID : [ ] [ ID ( ID ) ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : int { var ID : bool var ID : bool }",
  "func ID ( ) { var ID : int var ID : int print ID [ - - - ( ID ) ] } func ID ( ) { }",
  "func ID ( ) : [ - - ID ( true - - false and true and ID ) ] int { }",
  "func ID ( ID : bool , ID : [ ] [ false * ( false / - true / ID ) / ID ] bool , ID : int ) { }",
  "func ID ( ID : [ ( false / - - ( ID [ ID ] ) / ( 123 ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ 123 * ID ( ( ID [ ( ( true ) ) ] ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool call ID ( ) }",
  "func ID ( ) { var ID : int ID = ID [ true and ( ( - ID ) ) and ID ] [ - - - - ID ] } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : [ ] int return }",
  "func ID ( ) : int { var ID : int if - true / ID ( ID ( ) ) { } ID = ( ( false ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : [ ] bool return }",
  "func ID ( ) : bool { var ID : int } func ID ( ID : [ ] [ ( ID ) ] int ) { }",
  "func ID ( ID : [ ] [ false / true * true - true * - ( ( ( ID ) ) ) * ID ] int ) { }",
  "func ID ( ) : int { var ID : [ ID ( ) < - ( ( ID ) ) ] [ ] bool var ID : int }",
  "func ID ( ) : [ ] int { } func ID ( ID : bool , ID : int ) { var ID : [ ] [ - ID ] int }",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : bool var ID : int } func ID ( ID : int ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : bool { print 123 * ID ( ID ) } ID = ( - ID ) }",
  "func ID ( ) { var ID : bool var ID : int call ID ( ( ID [ ID ] ) ) while - ( - ( - - ID ) ) { } }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : bool if ID ( ) - ID { } if - ID { } }",
  "func ID ( ID : [ - 123 + - - ID * ID ( ) [ - true ] * ( ID ) + ID ] [ ] int ) { }",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) : bool { var ID : bool var ID : [ ] [ ID ] [ ] int }",
  "func ID ( ID : [ ] bool , ID : int ) { var ID : bool { var ID : int return ( ( - ID ) ) } { } }",
  "func ID ( ID : bool ) : int { var ID : [ - ID [ ID + false ] ] [ ] bool }",
  "func ID ( ID : [ ] [ ] int , ID : [ true * false * ( false ) ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ - 123 * ID [ ( ID ) ] ] int } func ID ( ) { }",
  "func ID ( ) : bool { print 123 / ( - 123 / ( 123 ) / ID ) } func ID ( ) { }",
  "func ID ( ) : bool { if true / ID [ ID ( true ) ] [ ( true ) ] * true { } } func ID ( ) { }",
  "func ID ( ) : [ - - ID ( ( ID [ 123 ] ) ) ] bool { }",
  "func ID ( ) { var ID : bool while - true / ID ( 123 + 123 + false ) { } call ID ( ) }",
  "func ID ( ) : int { ID [ ( ( ( - ID ) ) ) ] = true } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ] int ) : [ ] [ ] bool { print ID }",
  "func ID ( ID : [ ] [ ] int ) : bool { var ID : [ ] [ false / false / ( ( - ID ) ) ] [ ] int }",
  "func ID ( ID : int , ID : [ ] int , ID : [ ] bool ) { var ID : int var ID : int while - - false { } print ID } func ID ( ) { }",
  "func ID ( ) { } func ID ( ID : [ - ID ( ) [ ( - - true ) ] ] int ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ID ( - - - 123 * - false ) ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] bool { var ID : bool var ID : int print ID [ ID ] ID = ( ID ) } func ID ( ) { }",
  "func ID ( ID : [ ( ID [ - 123 / 123 - - 123 - - ( 123 ) ] [ ID ] ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ 123 * - ID [ 123 / false * true ] * ( - ( ID ) ) ] bool var ID : [ ] int }",
  "func ID ( ) { var ID : bool var ID : int while false + - ( ID * ID ) + ( - ID ) { } }",
  "func ID ( ) { var ID : bool var ID : [ ] int ID [ - - - ID ( - - ID ) ] = - true } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool while - - - false / ID * 123 - true { } }",
  "func ID ( ID : [ ] int ) : bool { { var ID : [ ] [ ] int var ID : int return ( true ) } } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : bool { var ID : bool call ID ( ID ( ) [ - ( ID ) ] ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool call ID ( ) call ID ( - 123 / ID [ 123 ] [ false ] ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int while - ID [ ( - ( true ) ) ] [ ( ID ) ] { } }",
  "func ID ( ID : [ ] [ ] [ ] [ - 123 + ( true * ( - ( ( false ) ) ) / ( ( - false ) ) ) + ID ] [ ] [ ] bool ) { }",
  "func ID ( ) : bool { var ID : int var ID : int } func ID ( ) : int { var ID : [ ] int if - true { } }",
  "func ID ( ID : bool , ID : bool ) : int { var ID : int }",
  "func ID ( ID : [ - ID * - 123 + ID / ( - true ) + - ID ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : [ ] int { var ID : [ false - ID ( ) ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) : [ - ID * false / ID ( ( ID ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) : int { print ID [ ID ( ( ID ) ) ] while - true { } } func ID ( ) { }",
  "func ID ( ID : [ - ( - ID ( ) [ 123 * - 123 ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] int return ( ( ( 123 ) ) ) }",
  "func ID ( ) { var ID : int { var ID : bool ID ( ) [ true / - ID * ID ] [ true ] = ( ( false ) ) while ( ID ) { } } }",
  "func ID ( ) : bool { var ID : [ ] [ - - ID [ - false / ID * - - ( ID ) ] [ ( 123 ) ] ] [ ] [ ] bool var ID : [ ] [ ] [ ] int }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] [ ] [ ] bool while 123 > ( - - true ) { } print true } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) : bool { var ID : bool if true != ( 123 ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) : [ ] [ - - true - ID ( ) - 123 ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID ( ID ( ) [ ( true ) ] [ 123 ] ) ] [ ] int , ID : int ) { }",
  "func ID ( ) { var ID : bool var ID : int return ( ( 123 * - ( 123 ) * ( - - - - ( - ( - false ) ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { { var ID : int var ID : bool } return } func ID ( ) : int { }",
  "func ID ( ID : bool ) { var ID : int var ID : int } func ID ( ID : int , ID : bool , ID : [ ] int ) { }",
  "func ID ( ID : int ) : [ ] [ ] bool { var ID : int { var ID : [ ID ] bool } print - ( ID ) } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ ( ID ( ) [ - - ID ] [ ( - ID ) ] ) ] [ ID ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ false * ID ( ID * - ( false ) * - ( - - true ) ) ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ) { print ID ( ) / - - - ID ( - - ID ) print ( - - true ) }",
  "func ID ( ) { var ID : [ true * ( ( - - ID ) ) ] int var ID : int }",
  "func ID ( ID : bool ) : [ ] [ ] bool { var ID : [ 123 and - - ID and ID ] bool var ID : [ ] int }",
  "func ID ( ) { var ID : bool var ID : int call ID ( ID [ ID [ 123 ] [ ID ] ] ) print ( ( true ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool return } func ID ( ID : int , ID : [ ( ( ( - 123 ) ) ) ] [ ] [ ] [ ] [ ] [ ] bool , ID : [ ] bool ) { }",
  "func ID ( ID : [ ( ( ID [ ID - - 123 + ( true ) ] [ - true ] ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] bool { var ID : [ ( - - - - ( ( ID ) ) ) ] int } while ( false ) { } } func ID ( ) { }",
  "func ID ( ID : [ false / ID [ - false and - ID [ - ID ] ] / false ] bool ) { }",
  "func ID ( ) { var ID : [ ] [ ] int print false / true - ID ( ) [ ID ] + false { } }",
  "func ID ( ) : bool { var ID : bool var ID : int return } func ID ( ) : [ ] int { ID ( ) = ( - false ) }",
  "func ID ( ID : bool ) : [ ID ( ) [ ( ( ID ) ) ] ] int { } func ID ( ) { }",
  "func ID ( ) : [ ] int { } func ID ( ID : int ) { var ID : bool call ID ( ) return }",
  "func ID ( ) { var ID : int print - false / ( 123 / ID ( ) ) call ID ( ) }",
  "func ID ( ) : bool { var ID : [ - true / - - false * ID ( false ) ] [ ] int var ID : [ ] int }",
  "func ID ( ) { var ID : bool var ID : bool { while true * - ( ( - true ) ) { } ID = - ( - ( false ) ) } } func ID ( ) { }",
  "func ID ( ID : [ ( ID ( ) and false / false * false ) ] int ) { }",
  "func ID ( ) : int { var ID : int var ID : [ ID ( ID [ - ( false ) ] ) ] bool } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : bool while ( ( ID ) ) { } call ID ( ) }",
  "func ID ( ID : int , ID : int ) : int { call ID ( 123 * ( ( - 123 ) ) ) } func ID ( ) { }",
  "func ID ( ) : [ ( ID ( ) - - true ) * - ID ] [ ] int { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : bool var ID : bool return false * ( 123 ) * ( ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool while false - ID ( ) [ ( false ) ] - - - - true { } if 123 { } } func ID ( ) { }",
  "func ID ( ) : int { if ( - ( true * - 123 + - 123 ) ) { } }",
  "func ID ( ID : bool ) : int { return } func ID ( ID : bool , ID : [ ] bool , ID : [ ID ] bool ) { }",
  "func ID ( ) : bool { var ID : int return ID * ( - ID / 123 ) / ( true ) }",
  "func ID ( ) : [ ] [ ] [ ( ( ( ID ) ) ) ] int { }",
  "func ID ( ID : bool , ID : bool ) : int { var ID : [ ] bool { ID = true } { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) { while ID ( ( - - ID ) ) { } { } } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { var ID : [ ] bool ID ( ( false ) ) = ID }",
  "func ID ( ID : [ - true / - true * ID ( ) - - true / ID ] int ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var ID : [ false + - - ( ID ) + ( ( ID ) ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : int ) { } func ID ( ) { var ID : int var ID : [ ] int }",
  "func ID ( ID : [ ID ( ) [ true * - - ( false ) ] ] [ ] int ) { }",
  "func ID ( ) { var ID : int ID ( ) [ true * ( - true * ID ) / - - false ] = - 123 } func ID ( ) { }",
  "func ID ( ) { ID ( ) = - ID ( ) [ ID [ - - ID ] [ - true ] ] ID = - - ID } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] int print ID [ true / false ] }",
  "func ID ( ID : [ 123 * false * - ID ( ) - - - ID + ID ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool , ID : int ) : int { return ID [ ( ( - ID ) ) ] [ ( true ) ] }",
  "func ID ( ) : [ ] [ ] int { while - - ( ( - 123 ) ) { } }",
  "func ID ( ) : int { var ID : int var ID : bool print ID - ID ( ) [ ( - - true ) ] call ID ( ) } func ID ( ) { }",
  "func ID ( ) : [ ] int { while ID ( ) / ID ( ) [ - 123 ] [ ID ] / ID { } }",
  "func ID ( ID : int , ID : [ ID ( ID ( ) / false / ID ) ] bool , ID : int ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] [ ( - - ID ( ) [ true ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ true * ( ID ( - ( false ) ) ) * ( false ) ] bool { }",
  "func ID ( ) : bool { var ID : int var ID : bool ID ( false / ( ( ID ) ) ) = ( ( - 123 ) ) while - ( ( ( ( false ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) : [ false - false / ( ID ) / 123 ] [ ] [ ] int { }",
  "func ID ( ID : int , ID : [ ] int ) : [ ] bool { var ID : [ ] bool var ID : int }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : bool var ID : bool ID [ ( - ( - - ( ID ) ) ) ] [ false ] = ID ID = - ( ( false ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool while ID [ ID [ - 123 ] ] [ true ] { } }",
  "func ID ( ID : int , ID : int , ID : [ false ] bool ) : int { var ID : [ ] int }",
  "func ID ( ) : bool { var ID : int while false / - - ID ( true ) * ( ( ID ) ) { } print - ID }",
  "func ID ( ) : int { var ID : [ ] [ ] [ ( - ( 123 ) ) ] [ ] int var ID : bool }",
  "func ID ( ) : [ ] int { while 123 / - ( ( ID ) ) { } }",
  "func ID ( ID : [ ] bool , ID : bool ) { var ID : [ ] bool var ID : int { ID ( ) = ( - 123 ) if ( ID ) { } } ID = ( true ) }",
  "func ID ( ) : int { var ID : bool if ID ( ) [ 123 * - 123 * true ] { } }",
  "func ID ( ) { ID = - ( ( false / ( - ID ) * true ) ) }",
  "func ID ( ) : bool { var ID : [ ] [ ] int while ID ( ( - - - - false ) ) { } while ID { } }",
  "func ID ( ) { var ID : bool call ID ( ( true * ( - - ( ( true ) ) ) ) ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool } func ID ( ) : bool { var ID : [ - ID ] int var ID : bool }",
  "func ID ( ) { while - true * - ( false / ID - ( ID ) + ID ) * - ( - - - false ) { } }",
  "func ID ( ) : [ ] bool { var ID : bool var ID : [ ID * ID [ ID ] / - - ( ID ) ] [ ] [ ] bool }",
  "func ID ( ID : bool , ID : [ ] bool ) { var ID : int return } func ID ( ) : [ false ] int { }",
  "func ID ( ID : bool ) { var ID : [ ID [ ( - ( - - true ) ) ] ] bool var ID : [ ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : bool ID ( ) = ( true / - 123 ) { } }",
  "func ID ( ) { var ID : bool var ID : int return } func ID ( ID : [ ] bool , ID : int , ID : int ) { }",
  "func ID ( ID : [ 123 / - ( ( ID ( ) [ 123 ] ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : int { var ID : [ ] int var ID : bool }",
  "func ID ( ID : int , ID : [ ID [ 123 * ID ( ( false ) ) ] ] [ ] [ ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ) : bool { ID ( ) [ 123 * false - ID ( ID ) ] [ ID ] = true { } } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : bool while false / - ( ( ID ) ) * ( ( false ) ) { } }",
  "func ID ( ID : bool , ID : bool ) { { var ID : [ ID ( ) [ ID ] ] int var ID : int } }",
  "func ID ( ) { var ID : int var ID : int call ID ( ) { var ID : [ ] int } }",
  "func ID ( ) : bool { var ID : int var ID : [ ID [ ID / - ID ] [ - - ( 123 ) ] ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] int var ID : bool return true * true * ( ( false ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { return ( ( ( true ) ) ) }",
  "func ID ( ID : [ true * ID [ ID ( ) [ ID ] ] [ ( - - ID ) ] ] [ ] bool ) { }",
  "func ID ( ) : int { var ID : bool var ID : bool return } func ID ( ID : bool , ID : bool ) : [ false ] bool { }",
  "func ID ( ID : int , ID : bool , ID : [ ] int ) : int { var ID : bool }",
  "func ID ( ) : bool { var ID : [ ( 123 / 123 + ( 123 ) ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : int var ID : [ ( ID ) ] bool } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : bool var ID : [ 123 / - - ( ID ) ] bool } func ID ( ) { }",
  "func ID ( ) : bool { print false / - - ( ID + ( ( ( ( ( - ID ) ) ) ) ) - ( ( ( ID ) ) ) ) print 123 }",
  "func ID ( ) { var ID : int call ID ( ) { call ID ( ID ( ) [ ( ID ) ] [ ID ] ) while ID { } } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool , ID : int ) : [ ID ( ( ID ) ) ] int { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : [ ] [ - true / ID [ ( 123 ) ] / ID ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) { while ( - ( ID * false ) ) { } while ID { } }",
  "func ID ( ) { var ID : bool var ID : bool while ID ( ) [ ( ( 123 ) ) ] [ ID ] { } } func ID ( ) { }",
  "func ID ( ID : int ) { print ( ID ( ) [ ID ] [ ( - ( 123 ) ) ] ) } func ID ( ) { }",
  "func ID ( ) : bool { if ID ( ID ( ( - false ) ) ) { } }",
  "func ID ( ) { var ID : bool { var ID : [ ID [ - true ] [ ( - - ( ( - - - ( false ) ) ) ) ] ] int var ID : [ ] [ ] [ ] [ ] int } ID = ( - false ) } func ID ( ) { }",
  "func ID ( ) { ID ( false - - ID [ false * ID * ( 123 ) ] [ - - ( - ID ) ] - true ) = ( - - 123 ) call ID ( ) }",
  "func ID ( ) : int { var ID : int if ID ( ID [ true ] [ ID ] ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int return } func ID ( ) : int { if - ID ( 123 ) { } }",
  "func ID ( ID : [ ( ID [ ( - false * ID ) ] [ ( false ) ] ) ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : [ ] bool { var ID : int if ( 123 ) { } }",
  "func ID ( ID : [ ] [ ] int , ID : [ ID ( ) [ - true - - ( ID ) ] [ - ( 123 ) ] ] [ ] [ ] [ ] [ ] int ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { ID ( true / ID [ true ] * ( 123 ) ) = 123 }",
  "func ID ( ID : [ ] int , ID : int ) : [ ID ( ( ID ) ) ] [ ] bool { }",
  "func ID ( ID : int ) : bool { var ID : int ID ( 123 * ( ID ) ) = - ID if - ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ ID / ID ( true / ID - - ( ( - - ( - ID ) ) ) ) * ID ] [ ] [ ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ( ID ( ( true ) ) ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : bool ) { } func ID ( ID : [ ( ID / 123 * ID ) ] int ) { }",
  "func ID ( ) : int { var ID : [ ] [ false * ( - ( ( ( true ) ) ) ) * - ( false ) ] [ ] int var ID : [ ] bool }",
  "func ID ( ID : int , ID : bool ) : int { while true + false / - - true * - ID { } } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { var ID : int var ID : [ - true / - ID ( ) ] int }",
  "func ID ( ID : bool , ID : bool , ID : [ ( - false / true and - ( 123 ) and ( - - ( - false ) ) ) ] int ) { }",
  "func ID ( ID : [ ( ID ( ) [ - - ( - ( - ( false ) ) ) ] ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ - 123 / ( 123 / true * ( false ) ) ] bool ) { }",
  "func ID ( ) { var ID : [ - ID [ true * 123 * true - - ( - - true ) ] ] [ ] bool }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ] int while true * ID != false { } print ID }",
  "func ID ( ID : int ) : bool { var ID : [ ID [ true ] [ ( ID ) ] ] int }",
  "func ID ( ) : int { var ID : bool return } func ID ( ID : [ ] bool , ID : bool , ID : int ) { if - true { } print true }",
  "func ID ( ID : [ ID ( true / true / - - ID + - 123 ) ] [ ] [ ] [ ] [ ] [ ] int ) { }",
  "func ID ( ID : int , ID : [ ] int ) : [ ] bool { var ID : int var ID : [ ID ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : int call ID ( ID [ 123 / - - ( ID ) * ID ] [ - - - false ] ) } func ID ( ) { }",
  "func ID ( ) { ID ( ) [ true / false == ID * ( - ID ) ] = ( - - ( false ) ) call ID ( ) }",
  "func ID ( ) : int { ID [ - ID / ID - - ID [ 123 ] - ( - ID ) ] [ ( ID ) ] = ID if - ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int } func ID ( ) { var ID : [ ( - ID ) ] int var ID : [ ] [ ] [ ] [ ] bool }",
  "func ID ( ID : int , ID : bool ) { var ID : int var ID : [ ] [ - - ID / false * ID ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ - - - ( - ( - ID ) ) ] int ) { }",
  "func ID ( ID : int , ID : int , ID : int ) : [ true / ( - - ( - 123 ) ) ] int { }",
  "func ID ( ) { var ID : bool var ID : [ ] bool print - false / - ( ID ) } func ID ( ) { }",
  "func ID ( ) { print ( ID ( ) [ - - true * true * ( true ) ] [ ( ID ) ] ) }",
  "func ID ( ) : int { var ID : bool return } func ID ( ) : int { var ID : bool ID ( ) [ ( ID ) ] [ ( - ID ) ] = - false }",
  "func ID ( ID : bool ) : int { { { var ID : [ ID ( ID ) ] bool } } print ( false ) } func ID ( ) { }",
  "func ID ( ) : [ ] [ ( - true or ID * - ( ID ) / ( - ( ID ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int print ID ( - 123 + - - - ID ) { } }",
  "func ID ( ) : int { var ID : [ 123 / ID ( ) [ ID ( ) ] ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) : int { var ID : [ true / - true / 123 or ( false ) or false ] [ ] bool var ID : bool }",
  "func ID ( ) : int { var ID : [ ( ( ( false ) ) ) ] [ ] [ ] bool var ID : bool }",
  "func ID ( ) : [ ] int { var ID : [ ( ( - ID ) ) ] [ ] int var ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : bool print ( ( ID + 123 - - - true ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ - - ID ( 123 * - - - true / 123 ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { return true / 123 * ( - ID * 123 - - - ID - - ID ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : int { var ID : int }",
  "func ID ( ) : [ ] [ ] [ ] [ - ( ( - 123 ) ) ] int { }",
  "func ID ( ) { return - ( 123 * - ID [ - true ] [ ID ] / ( - ID ) ) }",
  "func ID ( ID : int ) : bool { var ID : int while - ( ( - ( ( - false ) ) ) ) { } call ID ( ) }",
  "func ID ( ID : bool ) : int { var ID : [ ID / ( false - 123 - - false ) * - 123 ] bool }",
  "func ID ( ) { var ID : int while - ( 123 / ID ( ) [ 123 ] ) { } ID = ( - - - - ID ) }",
  "func ID ( ) { var ID : bool while ( ID ( ) [ ( 123 ) ] ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ - ID [ ID + - ID ] [ ( - ( - 123 ) ) ] ] bool } func ID ( ) { }",
  "func ID ( ) : [ ( - - - 123 / 123 / ( - - - ( 123 ) ) ) ] int { }",
  "func ID ( ID : int , ID : bool ) { while 123 * false + false * ID ( ) { } print ID }",
  "func ID ( ) : int { } func ID ( ) : [ - ( - ID [ ID ] ) ] [ ] [ ] bool { }",
  "func ID ( ) { var ID : bool if ID ( ) [ ( - ID ) ] { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) { while ID ( ) / ID ( true + - - ( ( ID ) ) - - ( true ) ) { } }",
  "func ID ( ) : int { var ID : [ - false - false * ( ID ( ) ) / ( - ( ( ID ) ) ) + ID ] int } func ID ( ) { }",
  "func ID ( ) { call ID ( - - true / - false + 123 / ( - - ( ( true ) ) ) * ( - ID ) + ( - ID ) ) while ( 123 ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int print ( ( ( 123 ) ) ) } func ID ( ) { }",
  "func ID ( ) : [ ID ( ( - 123 / - true + - - ID ) ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ true or ID [ ID ] [ ID ] or ( true ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] int { } func ID ( ) : int { var ID : int }",
  "func ID ( ) : [ false and 123 == ( ID ( - ID ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int { return ID ( ) [ ID ] } }",
  "func ID ( ) : int { } func ID ( ) : int { var ID : [ ID ( - 123 ) ] bool }",
  "func ID ( ID : bool ) { var ID : [ - ID [ ( 123 ) ] ] [ ] int }",
  "func ID ( ID : int , ID : [ ] int ) { var ID : bool ID ( true / ID * true ) = false }",
  "func ID ( ID : [ ] [ ] bool , ID : [ ] bool , ID : [ ] [ ID ( - - true ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) { } func ID ( ) { var ID : int while ID [ ( ( false ) ) ] { } }",
  "func ID ( ) : [ ] [ ] bool { var ID : [ ] int var ID : int print true / ID }",
  "func ID ( ) : int { while ID [ true / false * - ( ID ) ] { } } func ID ( ) { }",
  "func ID ( ) { { } while true * true / ID ( ) [ true ] { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( ( ( ID ( ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ true * ( - true / ( true ) / - - ID ) / ID ] bool , ID : bool ) { }",
  "func ID ( ) : int { var ID : [ ID / ( ID [ ( - false ) ] [ ( - - ID ) ] ) ] bool }",
  "func ID ( ) { print - - ID [ ID * - ID ( - - ID ) / ID ] print ID } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] [ ] int { var ID : [ ] int print ID + ID } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ID ( ) + - true < ( - - - 123 ) ] int }",
  "func ID ( ID : [ true / ID ( ) < ( - 123 == ID ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var ID : int var ID : [ ( ID ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ ( true / ID != - - ID * ID ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ false / 123 * 123 - - - ( false ) ] bool var ID : int }",
  "func ID ( ID : int ) : bool { var ID : [ ID ( ) or false * ID ] [ ] bool var ID : [ ] [ ] [ ] int }",
  "func ID ( ) : int { var ID : bool var ID : int ID [ ( ID * - false ) ] [ ( - 123 ) ] = ( - ID ) }",
  "func ID ( ID : bool , ID : bool ) : [ ID [ ID ( ( ID ) ) ] [ - ( - - - ID ) ] ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : bool { return - - ID ( ) * ( ( - - ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : [ true / ( ( - - 123 ) ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : int return } func ID ( ) { while 123 / - 123 * ( ( - - - ( true ) ) ) { } { } }",
  "func ID ( ) { var ID : [ ] bool if - - true - false / 123 and ID and ( - 123 ) { } ID = ID }",
  "func ID ( ) : int { var ID : int if ID [ - ID ( ( ID ) ) ] { } } func ID ( ) { }",
  "func ID ( ) : int { print false / ( true + - false * - ID ) * 123 } func ID ( ) { }",
  "func ID ( ) { var ID : [ 123 + - ID ( 123 * ( 123 ) ) - - ID ] int }",
  "func ID ( ID : int ) : bool { while 123 / ID / true + ( - false ) { } }",
  "func ID ( ) : bool { call ID ( ) return - ( - ( - ID ) ) }",
  "func ID ( ) : [ ( 123 / false - 123 * true - ID ( ) ) ] int { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] bool ) : bool { var ID : [ - ( ( ID ) ) ] [ ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) : int { var ID : bool var ID : [ ID ( - ID ) ] int } func ID ( ) { }",
  "func ID ( ID : [ false * ( - ( - false / true + - ID - ID ) ) / - - - ID ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] [ ] [ ] bool var ID : [ ] [ - - ID ] [ ] [ ] [ ] [ ] bool }",
  "func ID ( ) { var ID : int { print true - - ID ( ) [ true ] [ true ] + ID } print - - - ( ID ) }",
  "func ID ( ) { var ID : int while true / - - false / false + ( false ) - ID { } }",
  "func ID ( ) : int { var ID : [ ( ( - ( false ) ) ) ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool { var ID : int var ID : bool return true / ID ( ) } if ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] int }",
  "func ID ( ID : bool , ID : bool ) { print ( - ID ( ( false ) ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ 123 * true - true / - 123 != - ( - - - - ( ( false ) ) ) ] [ ] [ ] [ ] int , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ - false / ID [ false / true * ( ( 123 ) ) ] [ - true ] * ( ID ) ] [ ] int ) { }",
  "func ID ( ID : [ ] int , ID : [ ID [ false ] [ ( ID ) ] ] int , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ] bool if ID / ( ID ) * false { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : int } func ID ( ID : bool , ID : [ ] int , ID : int ) { }",
  "func ID ( ID : [ - ( false * false * ID - ( ( ( ( ID ) ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : [ - ( false * ID ( true ) ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : int var ID : bool } func ID ( ID : bool , ID : int , ID : [ ] bool ) { }",
  "func ID ( ID : [ ID ( ( - ID + ( true ) + - - ( ID ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { while - ( - - - ID ( ( - ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int ) { var ID : [ ] [ - ID ( ) [ 123 ] ] int var ID : bool }",
  "func ID ( ) { var ID : int var ID : [ true / false / ( ( ( ID ) ) ) ] [ ] bool }",
  "func ID ( ID : bool , ID : bool ) : int { var ID : bool if - - ( ( ( ID ) ) ) { } if ID { } }",
  "func ID ( ) { print ID ( ( ID [ - ( 123 ) ] ) ) } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ID ( ID ( ( 123 ) ) ) ] bool { }",
  "func ID ( ID : int , ID : [ ] bool , ID : bool ) { var ID : bool var ID : int ID = - ( ID ) while ID { } } func ID ( ) { }",
  "func ID ( ) : [ ( - ( ( true / - ( ( - - true ) ) * 123 ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID ( ID ( ) * ID [ true ] [ 123 ] ) ] bool var ID : [ ] bool }",
  "func ID ( ID : [ - - 123 * ID [ ( 123 * ID / ID ) ] [ 123 ] ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] bool { var ID : bool var ID : [ ( ID ( ) ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ] bool while ID [ 123 * false ] [ ( true ) ] { } print ( ( ( true ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool call ID ( 123 / - ID or 123 or - ID ) print ID }",
  "func ID ( ) { var ID : int if 123 >= - ID [ ID ( ) ] { } print ( - true ) } func ID ( ) { }",
  "func ID ( ID : [ ( ( ( 123 - ID ) ) ) ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : int , ID : [ - ID ( ) [ ID [ ( 123 ) ] [ - - ID ] ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ true - ( - ID / true - ( - false ) - - ( - - - ID ) ) ] bool ) { }",
  "func ID ( ) : int { var ID : [ ID [ 123 + false * false / 123 ] [ - - 123 ] ] bool var ID : bool }",
  "func ID ( ) : bool { var ID : bool ID [ ( ID ( ( ID ) ) ) ] = - ( ( ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] int { var ID : int while ( true / - ID * false ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] bool return } func ID ( ) : int { var ID : int ID = - ( - - ID ) { } }",
  "func ID ( ID : int ) { var ID : [ ( true + ID ( ( ID ) ) ) ] int }",
  "func ID ( ) { var ID : int var ID : bool return } func ID ( ID : int , ID : [ false / ID * - true ] [ ] bool , ID : bool ) { }",
  "func ID ( ID : [ ] bool ) : bool { { return } return ID ( ) [ ID ] }",
  "func ID ( ) : int { var ID : [ - 123 + ID ( - - - 123 ) + false ] bool }",
  "func ID ( ) : [ ID * false * - - - true != 123 - ID - ID ] bool { }",
  "func ID ( ) { var ID : [ - true ] bool var ID : int return - ( ( - - ( true ) ) ) }",
  "func ID ( ID : int , ID : [ - ( ( - ( ( - ( - - - ( ( false ) ) ) ) ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - ID [ ID ( ) [ ID ] ] ] bool , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ID : bool var ID : bool return }",
  "func ID ( ) { var ID : [ - ( ( - ( - - 123 ) ) ) ] int var ID : [ ] int }",
  "func ID ( ID : [ ] [ ( ID * 123 + ID ( ( ID ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ID [ false * true + ( true * 123 * ID ) - - ( - ID ) ] [ false ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] int ) { } func ID ( ID : int , ID : int , ID : [ ] int ) { }",
  "func ID ( ID : int ) : [ ] [ true - ( ( ID ) ) - ID ] bool { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ID [ false * true * ID ( ) [ ID ] [ false ] ] ] [ ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : bool { var ID : [ ] [ ] int while ( ID ) { } call ID ( ) } if 123 { } }",
  "func ID ( ID : [ - - 123 / ( true / ID ( ) [ ID ] [ true ] * - true ) ] int ) { }",
  "func ID ( ID : [ ] [ - false * - ( true * - ( ( ID ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int return ID ( ) / true * ID ( false ) }",
  "func ID ( ) : [ true * ( - ID / ( - - ( ID ) ) * - true ) / ID ] int { } func ID ( ) { }",
  "func ID ( ) : [ - - true / ( 123 >= ID [ ID ] ) / - 123 ] int { } func ID ( ) { }",
  "func ID ( ) : [ 123 - - ID [ true - ID [ ( true ) ] [ ID ] - - - true ] + ( - ( ID ) ) ] [ ] [ ] [ ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : [ ] [ true + ID ( ID ( ) * true ) ] [ ] bool { }",
  "func ID ( ) { var ID : int var ID : int { var ID : [ ( ID ) ] int } }",
  "func ID ( ID : int ) { var ID : bool ID [ ( - - ID ( ) ) ] = ID }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ ID ( ID ( ( true ) ) ) ] int }",
  "func ID ( ID : [ ] [ ] int ) { var ID : [ ] [ ] [ - - false ] int } func ID ( ) { }",
  "func ID ( ) { var ID : int ID [ - false + ( 123 * - 123 * true ) ] = 123 }",
  "func ID ( ) : [ ] bool { var ID : int print - ID [ true * ( 123 ) ] [ ( - ID ) ] } func ID ( ) { }",
  "func ID ( ) { var ID : int return ( ( - - ( ( 123 ) ) ) ) }",
  "func ID ( ) : [ - false / false * - ID [ false / ( - 123 ) ] ] [ ] int { }",
  "func ID ( ID : bool ) { var ID : bool var ID : int } func ID ( ID : [ - ID ( ) ] [ ] [ ] int ) { }",
  "func ID ( ) { var ID : [ ] [ ] bool while - - ( - - ( 123 ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : int var ID : [ ] [ ] [ true >= - false ] [ ] int } func ID ( ) { }",
  "func ID ( ) { } func ID ( ) : int { var ID : bool if - 123 * ( ID ) / 123 { } }",
  "func ID ( ID : [ ID ( ) [ ID ( ) [ ( ( - ( true ) ) ) ] ] [ ID ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int if ID [ - - - ID ] [ ( 123 ) ] { } while ID { } }",
  "func ID ( ID : int ) { } func ID ( ID : int , ID : [ ID ( ID ) ] int ) { }",
  "func ID ( ) { print ID ( ) [ ( false + ( ( - 123 ) ) ) ] [ - ID ] } func ID ( ) { }",
  "func ID ( ID : [ - - - ID [ ( ID ( - - ID ) ) ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ true * 123 + ID ( ) / ( ID ) * false - ( ( ( ( false ) ) ) ) ] int , ID : bool ) { }",
  "func ID ( ) : [ ] bool { return }",
  "func ID ( ) { var ID : [ ID [ ID [ ( - - - - 123 ) ] ] ] int }",
  "func ID ( ID : bool , ID : int , ID : int ) { ID = - false * - 123 >= ( ( true ) ) }",
  "func ID ( ) : [ ] [ ID ( true / 123 > ( ID ) ) ] bool { }",
  "func ID ( ) { var ID : int var ID : [ ] bool while false * ID [ 123 ] [ 123 ] / ( ( ID ) ) { } { } } func ID ( ) { }",
  "func ID ( ) : [ false / true ] bool { var ID : int var ID : [ ID ] int }",
  "func ID ( ID : int , ID : [ ] int ) : [ 123 * ( true * ID * ID ) ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : [ ID ( ) * - ID * - - ID ] bool }",
  "func ID ( ID : [ ( - false / ( - true / ID ( ) ) ) ] [ ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ID : int , ID : int ) { var ID : bool var ID : [ false / ( ( ID ) ) ] bool }",
  "func ID ( ID : [ false * ID ( ) <= ( ( ID ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int ID [ ID ( ID ( ) ) ] = ID } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - true - ( ID [ true ] ) ] [ ] int , ID : [ ] bool ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ] bool ) { ID [ ( ID ) ] = ID if true { } }",
  "func ID ( ID : [ 123 / ID / - - - - - ID ( ) [ ID ] ] bool ) { }",
  "func ID ( ID : int ) : [ ( - ( ID [ ID ] [ - ID ] ) ) ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int var ID : int ID [ ( false and ( - ID ) ) ] = ID ID = ( ID ) }",
  "func ID ( ) : int { var ID : [ ] [ ID ( ( ( false ) ) ) ] bool }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : [ ] int { var ID : bool var ID : int return 123 } func ID ( ) { }",
  "func ID ( ) : [ true - ID [ ( true / false ) ] [ ID ] + ( ( - ( ( true ) ) ) ) ] [ ] [ ] [ ] [ ] int { }",
  "func ID ( ID : [ ] int , ID : [ - - ID [ false * ( - - ( - ID ) ) ] ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ID [ 123 / - ID [ - ID ] ] ] int ) { }",
  "func ID ( ) : int { var ID : bool print ID ( ( ( 123 ) ) ) } func ID ( ) { }",
  "func ID ( ) : [ ( - ( ID [ true * false / - - ( ( 123 ) ) ] ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID : bool print - ( false * - ID / - - ID ) }",
  "func ID ( ) : [ ( true / ID ( ) [ - ID ( ) ] [ ID ] ) ] bool { } func ID ( ) { }",
  "func ID ( ) { return - - 123 / ID ( ) / ( ID ( ) ) }",
  "func ID ( ID : [ - true - false - - ID [ 123 == ( ID ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int if ( ( ( ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ - ( 123 - ID ( ID ) ) ] int ) { }",
  "func ID ( ID : [ - true / ID ( true * ID ( - - ID ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { return ID ( ) [ ID [ true / ( true ) / ( - ( ( ( - ID ) ) ) ) ] ] }",
  "func ID ( ) : int { return - ID ( ) [ true * ID ( ) [ ID ] [ ID ] * ( false ) ] [ true ] }",
  "func ID ( ID : bool , ID : [ ] bool , ID : int ) : int { var ID : [ ] int } func ID ( ) : int { }",
  "func ID ( ID : [ ID ( false / ( true * false + true - false ) * ( ID ) ) ] [ ] int ) { }",
  "func ID ( ID : [ true * - false and ( 123 / - ID / ID ) ] bool ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : bool ) { var ID : int print - false * - - - false }",
  "func ID ( ) { var ID : [ ] bool return } func ID ( ID : [ ] int , ID : int ) : [ ] int { }",
  "func ID ( ) : int { var ID : bool return } func ID ( ) : int { ID = true * - ID * true }",
  "func ID ( ID : bool ) : int { var ID : [ ID [ ( ID ) ] ] [ ] int }",
  "func ID ( ID : bool , ID : int , ID : int ) { if - ( 123 + ID ) { } } func ID ( ) { }",
  "func ID ( ) : [ - ID ( ) [ - ( ID * ID * ID ) ] [ - 123 ] ] bool { }",
  "func ID ( ID : bool ) : [ ] bool { var ID : int if true / false - ( ID ) { } { } }",
  "func ID ( ID : [ ( false * ( false * ( true ) * false ) * - 123 ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ true * ( - ID / 123 * ID ) * ( ( ( 123 ) ) ) ] bool var ID : bool }",
  "func ID ( ) : bool { print - - false + - true * - ID ( - - - ID ) * ID + ID }",
  "func ID ( ID : [ ID ( ) / 123 * ID ( ) < ID [ ID ] [ - false ] ] [ ] bool ) { }",
  "func ID ( ) { return - ID [ - true + ID [ ( false ) ] [ ID ] ] [ ID ] }",
  "func ID ( ) { var ID : [ ID + true * - - true - ID [ ID ] [ - - - ID ] ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - ID [ ID ( ) or ID or ID ] [ ( ( ( 123 ) ) ) ] ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : int var ID : [ ( - true ) ] bool }",
  "func ID ( ID : bool ) : [ ] [ ] bool { }",
  "func ID ( ID : [ ] int ) { call ID ( ) call ID ( ) } func ID ( ) : [ ] bool { }",
  "func ID ( ) { var ID : int { var ID : int { var ID : int print 123 / false * ( ( ID ) ) } } }",
  "func ID ( ID : bool ) : [ true + ID [ 123 - false / - ( false ) / - 123 ] [ true ] ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ( - - 123 * ( ( - - ID ) ) * 123 ) ] bool , ID : int ) { }",
  "func ID ( ) { return } func ID ( ) : [ ID [ - 123 * ID * false ] ] bool { }",
  "func ID ( ) : [ - ( false / - ID ( ) [ - - ( false ) ] [ ( ( ID ) ) ] ) ] int { }",
  "func ID ( ) : bool { var ID : int var ID : [ ] bool return ( ID ( ) [ - ID ] ) } func ID ( ) { }",
  "func ID ( ) { if ( - - true + - ID [ 123 ] [ ( ( 123 ) ) ] ) { } print - ID } func ID ( ) { }",
  "func ID ( ID : [ ID [ ( - ( true / ID / - ID ) ) ] [ - true ] ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : bool ) { } func ID ( ID : int , ID : bool ) { var ID : bool var ID : int }",
  "func ID ( ) : bool { var ID : int var ID : bool call ID ( ) if ( ( ( ( ID ) ) ) ) { } }",
  "func ID ( ID : bool ) { var ID : bool if ( ( - - - ( 123 ) ) ) { } }",
  "func ID ( ID : [ ] [ - false == ID ( ) [ ID [ ID ] ] [ true ] ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { return } func ID ( ) : int { { print ( 123 ) { } } call ID ( ) }",
  "func ID ( ID : int , ID : [ ] bool , ID : [ ] int ) : int { var ID : bool var ID : bool if ID { } }",
  "func ID ( ID : [ ] bool , ID : bool ) { print false * ID ( - true ) * ID { } }",
  "func ID ( ) : [ ID ( ) + - true / - false - ( ( ( ID ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : int print - ID * ID / - ( 123 ) print ( - ID ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : [ ( ( ( ( ( true ) ) ) ) ) ] int } func ID ( ) { }",
  "func ID ( ID : [ ID ( 123 < ID / - ID ( ) ) ] int ) { }",
  "func ID ( ) : [ - ID ( ) * ( ID ( 123 ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : int ) { while - ( ( true and ID and false ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( ID [ - ID / ID * ID ] ) ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : [ false + 123 * true >= 123 and - ( - - ID ) ] [ ] int ) { }",
  "func ID ( ID : [ true ] bool ) { var ID : int var ID : [ ] int return ID }",
  "func ID ( ) : bool { while - ID [ - ID ( - ID ) ] [ ID ] { } print - - ( - - false ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : int ID ( - ( ( ( ID ) ) ) ) = ID ID = 123 } func ID ( ) { }",
  "func ID ( ID : int ) : int { while - ID [ ID ( ) [ ID ] ] [ 123 ] { } while false { } } func ID ( ) { }",
  "func ID ( ) : [ ID ( ) - - ( - ID [ ID ] ) ] bool { } func ID ( ) { }",
  "func ID ( ) : bool { if - ID [ ID [ - - 123 ] [ ( ID ) ] ] [ ID ] { } }",
  "func ID ( ) { { var ID : int print true and true * ( 123 ) / - - false ID = - true } while ( true ) { } }",
  "func ID ( ID : [ ] [ ID ( - ( false * false ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ( ( - 123 + - ( ( true ) ) - ( true ) ) ) ] [ ] [ ] [ ] bool var ID : [ ] [ ] [ ] int }",
  "func ID ( ) { var ID : bool var ID : [ ID / - ( false or false ) * ( ID ) ] [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] int if false / ( - true ) * - 123 { } call ID ( ) }",
  "func ID ( ) { ID ( ) [ - true * 123 + - ID ( ( false ) ) ] [ ID ] = true print ( - ID ) }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : int return }",
  "func ID ( ID : int , ID : bool , ID : int ) : [ ] int { var ID : bool var ID : bool { var ID : bool } while - ( true ) { } } func ID ( ) { }",
  "func ID ( ID : [ ID / ID [ ( - - false ) ] [ ( ID ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) { print false / ID [ false / false > - ID ] } func ID ( ) { }",
  "func ID ( ) { print - - true / - - ID ( ) [ true / ID / ( - ( true ) ) ] [ 123 ] } func ID ( ) { }",
  "func ID ( ) : int { } func ID ( ) { var ID : [ ID ( - ID ) ] int var ID : bool }",
  "func ID ( ID : int ) : int { var ID : int }",
  "func ID ( ) { var ID : [ ID ( ) / false / ID ( ( false ) ) ] [ ] [ ] [ ] [ ] bool }",
  "func ID ( ) : [ ] bool { while true - ID ( - - ID ) { } if true { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ - ID [ 123 - ( false ) + - ( false ) ] [ 123 ] ] [ ] bool ) { }",
  "func ID ( ) : int { { var ID : [ ] [ ] int { var ID : int var ID : bool while 123 { } } } } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] bool { var ID : bool var ID : int ID ( ) = ( - ID ) if - ID { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool ID ( ) [ ( ( ID ) ) ] = - ID print ID }",
  "func ID ( ID : bool ) : bool { var ID : [ false / ( false * 123 ) ] [ ] bool var ID : int }",
  "func ID ( ) : bool { var ID : int var ID : bool if - - 123 / ID [ ID ] [ - 123 ] { } }",
  "func ID ( ) { if ID [ 123 * ID ( ) [ ID ] [ ID ] ] [ true ] { } }",
  "func ID ( ID : bool ) { var ID : bool var ID : int call ID ( ) return }",
  "func ID ( ID : int ) { var ID : bool while 123 - - 123 * ID ( ) [ 123 ] [ true ] + 123 { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] bool var ID : [ - - ID [ ( false ) ] ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] [ ] bool ) : bool { var ID : bool var ID : bool while ID { } }",
  "func ID ( ) { call ID ( true and false / ID * ID - - ID - 123 ) while ID { } }",
  "func ID ( ID : bool ) : [ ] bool { ID ( ID [ - ( 123 ) ] [ 123 ] ) = true { } }",
  "func ID ( ) { var ID : bool while ( - true - - - ID [ 123 ] ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int print ( true > - ( false ) ) }",
  "func ID ( ) { { var ID : int ID ( ) [ ( ID ( ) ) ] = ID } }",
  "func ID ( ) : int { var ID : int ID [ ( 123 / - ID [ ( ( ID ) ) ] ) ] [ ( - ID ) ] = ( false ) { } }",
  "func ID ( ID : int , ID : [ ] [ ( ID ( ( ID ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ] int { { var ID : int var ID : bool return } print ID ( ) }",
  "func ID ( ID : bool , ID : [ ] [ ] [ ] [ ] bool , ID : bool ) { var ID : [ ID ] int var ID : bool }",
  "func ID ( ID : bool , ID : [ - ( ID ( ) [ true * ID * ID ] [ ( ID ) ] ) ] int ) { }",
  "func ID ( ID : bool , ID : bool ) : bool { while - 123 != false * ID { } } func ID ( ) { }",
  "func ID ( ) { return - true * ( 123 - true <= - 123 ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ ( ID ( ) [ false ] [ ID ] ) ] int ) { }",
  "func ID ( ) : [ ] bool { return } func ID ( ID : bool ) : int { if ID { } call ID ( ) }",
  "func ID ( ) { var ID : bool var ID : int ID ( 123 * false and - - ID and ( ID ) ) = true } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : [ - - - - ID ( ) [ ( - ID ) ] [ - ID ] ] int , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { var ID : int var ID : [ - - ID ] int }",
  "func ID ( ID : bool , ID : int ) { var ID : int call ID ( ID ( ID ) ) print ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ ] int ) { if true - ( ID ) { } if - ( - - - ID ) { } }",
  "func ID ( ) : bool { var ID : int ID = false / true - 123 * - 123 * ( - ( false ) ) - ID ID = true }",
  "func ID ( ) : [ ] int { var ID : [ ( false - ( - ID ) - true ) ] int var ID : [ ] int }",
  "func ID ( ID : bool ) : bool { print false or - ID * ( - ( - ( - true ) ) ) or ( ID ) } func ID ( ) { }",
  "func ID ( ) { while ( - - true + ID ( ) [ ID ] [ ID ] ) { } }",
  "func ID ( ) { var ID : bool var ID : bool { call ID ( 123 / true * - - ( - ID ) ) if ( ( ID ) ) { } } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : int print true - - ( 123 ) - - 123 } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ ] [ ] int }",
  "func ID ( ID : bool , ID : [ ID ( ID ( ID ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : int return } func ID ( ID : int , ID : [ - ID ] bool , ID : [ ] bool ) { }",
  "func ID ( ) { return ID ( ) * ( ID ( ) - ID + ID ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) : bool { while ( - 123 * - ID * ( ( ID ) ) ) { } }",
  "func ID ( ) { var ID : int call ID ( ID ( ) [ - ID [ 123 ] [ - ID ] ] [ ( ID ) ] ) }",
  "func ID ( ) { var ID : int var ID : [ ( ( ID ( - ID ) ) ) ] int }",
  "func ID ( ) : int { var ID : int call ID ( ) return } func ID ( ) { while true { } print 123 }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : bool } func ID ( ID : [ - ID ] int ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) { return } func ID ( ) { var ID : int ID = ( 123 ) if ID { } }",
  "func ID ( ID : int ) : int { call ID ( - 123 / true / ID [ - 123 ] [ false ] ) } func ID ( ) { }",
  "func ID ( ) { var ID : int return } func ID ( ) : int { var ID : int call ID ( ID ) }",
  "func ID ( ) : int { } func ID ( ) { var ID : int var ID : [ ] [ ID ( ) ] [ ] bool }",
  "func ID ( ID : [ false * false * - ( 123 - ID ( ) [ ( false ) ] [ - ID ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { ID ( ) = - - - ( ID [ ID ] [ ID ] ) }",
  "func ID ( ID : [ ] [ ID ( ) * - ID [ ID ( ( ( - 123 ) ) ) ] [ ID ] * - - 123 ] [ ] bool ) { }",
  "func ID ( ) { if ( ID ( false * true * ( ID ) ) ) { } ID = - ( ( true ) ) }",
  "func ID ( ) { var ID : [ - 123 / ID ( ( ( true ) ) ) / ID ] int } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ( false - ID * ( ( - 123 ) ) - ID ) ] bool } func ID ( ) { }",
  "func ID ( ) { while - false / ( - ID ( ) / - - - ID ) / ( ( 123 ) ) { } { } }",
  "func ID ( ) { print ID [ - ID [ ( ID ) ] [ - ( ID ) ] ] [ false ] while ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : int } func ID ( ID : int , ID : [ - ( true ) ] bool ) { }",
  "func ID ( ) : [ ( 123 - ( 123 or ID or ID ) + - ID ) ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID ( - ID ( ( false ) ) ) ] bool var ID : [ ] [ ] bool }",
  "func ID ( ) : [ true * ( ( - 123 / ( ID ) ) ) * ( ( ( true ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) { ID ( 123 + - ID ( ) [ ( - - ID ) ] [ ( - 123 ) ] ) = ID { } } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ( - ( ( ID ) ) ) ] [ ] bool ) { }",
  "func ID ( ID : [ ] int ) : [ ] bool { var ID : bool print ( ID ( ) ) print - ( - ID ) } func ID ( ) { }",
  "func ID ( ID : [ ( false / true and ( 123 * - - ID / false ) and - ID ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ] bool { return } func ID ( ) { while ID ( ) / ( - - true ) * ID { } }",
  "func ID ( ID : bool ) : [ ] int { var ID : int return 123 + ( ID ) + ( false ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool while true * ( ID [ ( true ) ] [ ID ] ) / ID { } }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : [ ( ( - ID ) ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool ID [ false + ( - true ) + ID ] [ false ] = ( ( ( false ) ) ) }",
  "func ID ( ) { print ( - false * true - true * ( true ) + false ) }",
  "func ID ( ID : [ - true * ID ( ID ( - ID ) ) * - ( ID ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] int ID ( ) [ ( - - ID ) ] [ ( ( ( - ID ) ) ) ] = false } func ID ( ) { }",
  "func ID ( ID : bool ) { return false * ID [ ( 123 / - ID ) ] / ID } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool print ( true * ID + 123 - false ) ID = ( true ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool ID ( ID ( - false / ( - ID ) ) ) = ( 123 ) }",
  "func ID ( ) : int { if - ID ( - true - ID [ - ( - ( ID ) ) ] ) { } { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID : int } func ID ( ) : bool { ID ( ) [ false ] = false { } }",
  "func ID ( ) { var ID : bool var ID : [ ( ( - ID [ ( true ) ] [ true ] ) ) ] [ ] bool }",
  "func ID ( ) : bool { { var ID : [ ID / - ( - false ) / ( true ) ] [ ] int var ID : bool } { } }",
  "func ID ( ID : int , ID : [ ( - ID [ ( 123 ) ] [ true ] ) ] [ ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { var ID : int var ID : bool return - false + ID [ ( ID ) ] + false }",
  "func ID ( ) : [ ] int { if 123 / true / true + ( - ( ( ID ) ) ) - true { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ 123 + - - false / ( ID / ( ID ) ) - false ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) : int { var ID : [ - - ( ( ( ID ) ) ) ] [ ] bool var ID : [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : int return } func ID ( ID : bool ) { var ID : bool print ( - ( true ) ) }",
  "func ID ( ) { var ID : [ 123 + false * - true * - ( ID ) ] int }",
  "func ID ( ) { var ID : bool { var ID : int while ( ( ( ( ID ) ) ) ) { } if - ( ID ) { } } ID = 123 }",
  "func ID ( ID : [ ] [ ] bool , ID : bool ) { var ID : [ ID [ ID ] ] bool var ID : [ ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : int } func ID ( ) : int { var ID : bool print ( false ) ID = - - 123 }",
  "func ID ( ) : int { var ID : int var ID : bool return ID / false * ( ( ( 123 ) ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ] int , ID : [ ] bool ) { var ID : int }",
  "func ID ( ID : int ) { if 123 / - ID * ( ID * false / - - ( - ID ) ) { } if ( ( false ) ) { } }",
  "func ID ( ) : int { { var ID : int } call ID ( - - ( - ID ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ( true / ID [ ( - ID ) ] / - ( ( - ( - - - - - 123 ) ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { return - ID ( ) + ID ( ( true ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : [ ] bool var ID : [ ] [ - ID ] [ ] int } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) : [ ] bool { print - ID ( ) * ID ( ) }",
  "func ID ( ID : [ ID ( ) [ false < false + - ID ] ] [ ] bool ) { }",
  "func ID ( ) { var ID : [ - - - - ( ID [ false ] ) ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) { var ID : bool var ID : int while ( - - true ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : int var ID : [ ID [ true ] [ ID ] ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int ) { } func ID ( ID : int ) : bool { var ID : [ ] bool print true }",
  "func ID ( ID : int , ID : int , ID : int ) { }",
  "func ID ( ID : int , ID : [ - ID ( - ( ID * ID * false ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ] [ - ID - ID ( 123 ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( ID [ ID ( - - - 123 ) ] [ ( ID ) ] ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ - - ( - true - ID ) ] int } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : int print 123 * false * true + ( ID ) print false }",
  "func ID ( ) : [ ( - - ( - ID [ ( false ) ] [ - ( true ) ] ) ) ] [ ] bool { }",
  "func ID ( ID : int ) : bool { var ID : int ID ( ) [ - ( ID ) ] = ( true ) } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : bool var ID : int print ( ( ID ) ) while ( - ( false ) ) { } }",
  "func ID ( ) : int { var ID : bool ID ( ( ID ( true ) ) ) = - ID } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( ID - ID ( ) [ ID ] ) ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ true / ( ( ( true ) ) ) ] [ ] [ ] [ ] bool }",
  "func ID ( ID : int , ID : bool , ID : bool ) { print ID ( ) [ false ] [ ID ] if false { } }",
  "func ID ( ) { print ID ( ID ( ID ( ) [ ( 123 ) ] [ ( - - - ( ID ) ) ] ) ) if true { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] [ ID [ true * ( false ) * ( - - - ID ) ] [ ID ] ] bool var ID : bool }",
  "func ID ( ID : [ - ( 123 * - ID ( ) [ - - ID ] ) ] int ) { }",
  "func ID ( ID : bool , ID : [ 123 / - ( - ( ID ) ) / - 123 ] int ) { }",
  "func ID ( ID : [ ] [ ] [ ( true * true + ( - ( - ID ) ) ) ] [ ] [ ] bool ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ] [ - - ID ( false - - false + ID ) ] bool ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) : [ 123 * - ( ( - false ) ) * true ] int { }",
  "func ID ( ID : bool ) : bool { var ID : bool var ID : int call ID ( ) }",
  "func ID ( ID : int , ID : int , ID : bool ) : int { var ID : int ID ( ) [ ID ] = ID while ID { } }",
  "func ID ( ID : bool , ID : bool ) : int { return } func ID ( ID : [ ] [ ] int ) { ID = - - ID { } }",
  "func ID ( ) : int { var ID : bool call ID ( ( ( ( 123 ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : [ ( ( ID ( ) ) ) ] int } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) : [ ] bool { var ID : [ ] [ false / - ( ( ( ID ) ) ) / ( 123 ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) : bool { var ID : int if ID [ ID ] { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { return ID [ ( ID ) ] }",
  "func ID ( ) { var ID : int print ID ( ID ( ) [ ( - ID ) ] [ false ] ) while true { } }",
  "func ID ( ) { print ID ( ) * ID [ - - ( false ) ] [ - - ID ] while true { } }",
  "func ID ( ID : int , ID : bool , ID : [ - ID ( ) [ ( - ID ) ] ] [ ] [ ] int ) { }",
  "func ID ( ) : [ ( true * ID ( ) [ false / ( true ) ] / ID ) ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : [ ] [ 123 / true / ( - 123 ) ] [ ] [ ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ) { { var ID : bool var ID : int { var ID : int { var ID : int var ID : bool } } print ID } } func ID ( ) { }",
  "func ID ( ID : [ ID ( ( false / ID ( ( ID ) ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ - false * ID [ - ( false ) ] [ ( false ) ] ] [ ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ false != 123 / ID ( ) [ false ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int }",
  "func ID ( ) : [ ] bool { var ID : [ ] int var ID : int return - 123 * false - 123 - ( - false ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : bool print ID ( 123 * - 123 / - false ) if - - true { } }",
  "func ID ( ID : bool , ID : [ ] [ ] bool , ID : [ ( ( ID ) ) ] [ ] bool ) { }",
  "func ID ( ID : int , ID : int , ID : int ) : [ ] int { var ID : [ ( 123 ) ] int var ID : [ ] bool }",
  "func ID ( ) : int { ID [ 123 + ( - ( ( - ( - - - - true ) ) ) ) + ID ] = ID }",
  "func ID ( ID : [ ID [ ID ( true - - ID ) ] [ - ID ] ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] [ - true * false - 123 / ( - ( ID ) ) * ID ] bool var ID : int }",
  "func ID ( ) : [ ] [ ] bool { var ID : int { } return ( - ( ( ( ID ) ) ) ) } func ID ( ) { }",
  "func ID ( ) : [ ] [ ID ( ) * ID [ - ID ( ) ] [ ID ] * ID ] int { } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ] [ ] bool }",
  "func ID ( ID : int , ID : [ ] int ) { var ID : [ ] [ ID ( ( ID ) ) ] int }",
  "func ID ( ) : bool { var ID : int if true >= - - ID { var ID : bool var ID : int } ID = ID }",
  "func ID ( ) : [ - ID ( - ID [ ID ] [ false ] ) ] int { }",
  "func ID ( ID : [ - 123 <= ID ( ) / true * ID [ ID ] ] bool ) { }",
  "func ID ( ID : [ ] bool ) { var ID : bool return ID ( ) [ true / ( ID ) / ( false ) ] }",
  "func ID ( ID : int , ID : [ ( - ID [ false and - ID and ID ] [ - - false ] ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : [ ] bool { return 123 + false + ( - - ( 123 ) ) } func ID ( ) { }",
  "func ID ( ID : int ) { call ID ( ID ( - ID * - ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : bool { var ID : [ ] int var ID : bool call ID ( ) return } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : bool call ID ( ID ( ) [ 123 ] [ - ( true ) ] ) print ID }",
  "func ID ( ID : [ 123 / ID ( ) [ - - ID [ - - ( ( false ) ) ] [ ( ID ) ] ] / ID ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : int var ID : int print 123 * ID [ true ] [ false ] / - - - ( ID ) print - - ( ID ) }",
  "func ID ( ID : [ false / - - - - true + ID / ( ( - ( ID ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] int var ID : [ ( false / 123 ) ] bool }",
  "func ID ( ) { print ID - ID * true or ( ( ( ID ) ) ) if - ( - false ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int var ID : bool call ID ( ) call ID ( ) return } func ID ( ID : int ) { }",
  "func ID ( ) : int { print ( ( ID ( 123 ) ) ) }",
  "func ID ( ID : [ ] [ ] int ) : int { var ID : int while ( ID ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : int return - true / - ID ( ) [ ( - ID ) ] } func ID ( ) { }",
  "func ID ( ) : bool { while ID [ ( ( ID ) ) ] [ ( ID ) ] { } print true }",
  "func ID ( ) { { var ID : [ 123 + ( ID / ( false ) / true ) ] int } } func ID ( ) { }",
  "func ID ( ID : bool ) { print false + ( ( false / - ID * ID ) ) }",
  "func ID ( ) : bool { var ID : int var ID : bool if ( ID / true / - false ) { } if ID { } }",
  "func ID ( ID : int , ID : int ) { var ID : [ ] [ ] [ ] [ ] int if ID { } call ID ( ) }",
  "func ID ( ID : bool , ID : bool , ID : [ ( 123 / ( ( - true ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { return true / ID ( ( ID ( ) ) ) * ( ( ( 123 ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { print ( ID ( ID ) ) call ID ( ) }",
  "func ID ( ) : [ ( ( 123 / - ( ( - ID ) ) ) ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ID [ - - - ID - - ( ( ( false ) ) ) - true ] [ ID ] ] int }",
  "func ID ( ID : bool ) : [ ID [ - ID ( ) [ ID ] [ true ] ] [ ID ] ] int { }",
  "func ID ( ) { var ID : bool var ID : bool ID ( - - ( false >= ID ) ) = true if ID { } }",
  "func ID ( ID : int ) { ID ( ) = true / ( true / ( ID ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool call ID ( ) call ID ( ) return } func ID ( ) { { } call ID ( ) }",
  "func ID ( ) { var ID : int } func ID ( ID : [ ] int ) : int { var ID : bool var ID : int call ID ( ) print ID }",
  "func ID ( ) { var ID : bool var ID : bool print ID ( - - - ID ( ) ) if ( - 123 ) { } }",
  "func ID ( ID : [ ] [ ] bool ) { var ID : int print ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( 123 * ID ( true + true + false ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var ID : bool call ID ( ID ( - ( - 123 ) ) ) ID = ID } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int ) : [ - false / ID [ ID ] * - - ( ID ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool , ID : bool ) { var ID : [ ] [ true - ( 123 ) - - ( ID ) ] bool var ID : [ ] bool }",
  "func ID ( ) { var ID : int var ID : bool { var ID : [ ] bool while ( 123 ) { } } }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { } func ID ( ID : int , ID : int , ID : int ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ID + - ( ID ( ) ) - - ( ( ( ( 123 ) ) ) ) ] int ) { }",
  "func ID ( ) { var ID : bool var ID : [ ( - ( 123 * ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ ] [ ] bool ) : [ ] bool { var ID : bool return 123 }",
  "func ID ( ID : bool ) : bool { var ID : [ ID ( false + ID + ID ) ] bool }",
  "func ID ( ID : bool , ID : [ ] [ ( - - false * ID + 123 + 123 ) ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ) : int { var ID : int var ID : bool return true / ID [ false ] * ( ( ( ID ) ) ) }",
  "func ID ( ) { var ID : [ ] int while false * false + true * ( ( ID ) ) - - - true { } while - - - 123 { } } func ID ( ) { }",
  "func ID ( ID : int ) { print - ID [ - - 123 <= ID ] ID = false }",
  "func ID ( ) : int { var ID : [ - ID ( ) [ ID [ ID ] ] ] [ ] int }",
  "func ID ( ) : [ ] [ ] bool { { var ID : int return ( - false ) } }",
  "func ID ( ID : int ) { while 123 - - - ( - ( ( ID ) ) ) { } }",
  "func ID ( ) { call ID ( ID - - ID ( ) [ false / ( false ) ] ) ID = ID } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool while ( - ( 123 + ID + ( 123 ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ ID [ - - - 123 / ( false / - ID ) ] ] bool ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : bool , ID : [ ] [ ] bool ) : int { var ID : bool var ID : bool }",
  "func ID ( ID : int , ID : int ) : bool { }",
  "func ID ( ) : bool { var ID : int } func ID ( ) { if ID ( ) [ - 123 ] { } }",
  "func ID ( ID : int , ID : int ) { var ID : int print ID ( ) / - ID [ - ( false ) ] / 123 } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ ID [ true / ( ID ) * - - 123 ] [ ID ] ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ID : int while ( ID ( ) ) { } }",
  "func ID ( ID : int , ID : [ ] bool , ID : [ ] int ) : int { var ID : bool var ID : int if ID { } }",
  "func ID ( ID : [ ( ID [ - - ( true ) ] [ true ] ) ] [ ] bool ) { }",
  "func ID ( ID : [ ( false * false / 123 + ID ( true ) + true ) ] bool ) { }",
  "func ID ( ) { ID [ ( - ID ( ) / - ( true ) * - ID ) ] [ ID ] = true print true } func ID ( ) { }",
  "func ID ( ) : [ ( true * false + ID ( ( - ( false ) ) ) + - - - ( ID ) ) ] int { }",
  "func ID ( ID : int , ID : int ) : [ ] [ - - ( ( ID ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] [ ] bool { while 123 + - - ID [ ( ID ) ] { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : int { }",
  "func ID ( ) { { print - 123 / ( 123 * - ID [ 123 ] ) * ( - ID ) } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : bool { var ID : bool ID ( ( ( ( ID ) ) ) ) = 123 } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool call ID ( - 123 - - true / ( false ) / ID ) print ( true ) }",
  "func ID ( ID : bool ) : int { var ID : bool call ID ( ID ( ID ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] int { var ID : [ ( - false ) ] bool var ID : [ ] [ ] bool } while false { } }",
  "func ID ( ) : [ ] int { var ID : [ ] int return false - ( - - false ) } func ID ( ) { }",
  "func ID ( ) { var ID : int while - ( ID [ - ID ] [ ID ] ) { } print ID } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int call ID ( ) } func ID ( ) : bool { var ID : [ ] [ ] int }",
  "func ID ( ID : bool , ID : bool ) : [ - - ( ( ( 123 ) ) ) ] [ ] int { }",
  "func ID ( ID : [ ] [ ] int , ID : [ ID + ID [ 123 ] + ( ID ) ] bool , ID : bool ) { }",
  "func ID ( ID : int , ID : [ ] bool ) : [ ] int { var ID : [ false + ID - true ] int var ID : bool }",
  "func ID ( ID : int , ID : bool ) { var ID : int call ID ( ) print - - - - false } func ID ( ) { }",
  "func ID ( ID : [ ID ( 123 - false == true + ID ) ] [ ] [ ] bool ) { }",
  "func ID ( ) { var ID : bool var ID : bool while true * ID ( - ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ ( true * ID ( ) [ - ID ( ) ] [ ( ( ID ) ) ] ) ] int ) { }",
  "func ID ( ) { var ID : int if ( ( ( 123 ) ) ) { } while - 123 { } }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : [ ] int if - true * ( - false ) / - ID { } { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int , ID : [ ] [ ID ( ID ) ] [ ] [ ] bool , ID : [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { if 123 * - - ( ID ( 123 ) ) * false { } print - ( ID ) }",
  "func ID ( ID : int , ID : bool , ID : [ ( ( ID [ 123 ] [ 123 ] ) ) ] bool ) { }",
  "func ID ( ) : int { ID ( 123 * ( - ( - ID ) ) ) = ID print true } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID : [ ( ( false ) ) ] int }",
  "func ID ( ID : [ false <= true and - ( false * ID * ( ( - - ID ) ) ) and ( - - - ( - - true ) ) ] [ ] int ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) : int { var ID : int var ID : bool return ID ( ) }",
  "func ID ( ) { var ID : bool print ( - ID ( ) [ - false ] [ 123 ] ) ID = true } func ID ( ) { }",
  "func ID ( ID : [ - ID / 123 / ID [ - - true / ID / ( false ) ] [ false ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool , ID : bool ) { var ID : [ ( true ) ] int var ID : [ ] bool }",
  "func ID ( ID : bool , ID : int , ID : bool ) { { var ID : [ ( ID ) ] bool var ID : int } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ( ( - ID / ( ID ) ) ) ] bool var ID : [ ] bool }",
  "func ID ( ) { var ID : bool var ID : [ ] bool ID [ - false / ( ID ) ] [ ID ] = - 123 } func ID ( ) { }",
  "func ID ( ID : bool ) { call ID ( ( ( ID [ - ID ] [ ID ] ) ) ) }",
  "func ID ( ) { } func ID ( ID : bool ) { call ID ( - ( - true ) ) }",
  "func ID ( ) : int { var ID : int if ( ID ( false * ID ) ) { } }",
  "func ID ( ) : int { var ID : [ ( - ID [ - ( ID ) ] [ ID ] ) ] bool var ID : bool }",
  "func ID ( ID : int , ID : int ) : [ ] bool { var ID : [ ] bool } func ID ( ) : [ false ] int { }",
  "func ID ( ) { while ID * 123 > false * ( ( ID ) ) / false { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : int call ID ( ) print true * ( true ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : int { var ID : int var ID : bool print false * ( true ) print - - ID } print - ( true ) }",
  "func ID ( ) : [ ] [ ] int { var ID : bool } func ID ( ) { var ID : [ ] int call ID ( ) }",
  "func ID ( ) { var ID : [ - true / - ( - ( ( ID ) ) ) ] int }",
  "func ID ( ) { var ID : [ ] bool } func ID ( ) : [ ] bool { if ( ID ) { } }",
  "func ID ( ) { var ID : int while 123 * ( ID ( 123 ) ) { } ID = - ID } func ID ( ) { }",
  "func ID ( ID : [ ID / false / - true + ( ID ( 123 ) ) + ID ] [ ] bool ) { }",
  "func ID ( ) { while 123 / ID ( ) [ ( ID [ - 123 ] [ ID ] ) ] [ false ] { } print ID } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int print - ID [ 123 + - - - - ID ] [ - ( - ID ) ] { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) : bool { var ID : int var ID : bool return true * ( ID ) } func ID ( ) { }",
  "func ID ( ) : [ - ( - true * ( true / - - ( ( false ) ) ) ) ] bool { }",
  "func ID ( ) { var ID : [ - - false / 123 * - ID ( ) - ID ] [ ] bool }",
  "func ID ( ) { var ID : [ ID ( ( - ID ( ) ) ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int ) { } func ID ( ) { var ID : int var ID : int { var ID : bool var ID : [ ] bool } while false { } }",
  "func ID ( ID : [ ] bool , ID : bool ) { var ID : [ ] [ - 123 / - ID ] int var ID : int }",
  "func ID ( ID : [ ] int ) { var ID : bool var ID : int print true - ( ( - ( ID ) ) ) + - 123 print ( - ID ) }",
  "func ID ( ID : [ false / ID [ false / ID and ID ] [ ( ID ) ] / ID ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int var ID : [ - - ( ID ( ( ID ) ) ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : bool ) { return } func ID ( ID : [ ] bool ) : bool { }",
  "func ID ( ) : int { var ID : bool return true }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { ID [ ID [ 123 ] [ - ID ] ] = ( ID ) if ID { } }",
  "func ID ( ID : bool , ID : bool , ID : [ ID [ ID ( ) / ID / - - ID ] [ ( true ) ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ( - - 123 != ID ( - - - ( ID ) ) ) ] int { }",
  "func ID ( ID : bool , ID : int , ID : bool ) : [ ] bool { print ID [ ( - - true ) ] [ true ] { } } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] bool { while ( false * - ID [ - ID ] ) { } }",
  "func ID ( ID : [ ] int ) : bool { if 123 * ID / - - ID { } }",
  "func ID ( ID : bool , ID : int ) : int { var ID : int { var ID : [ - - ID ] int var ID : [ ] int } } func ID ( ) { }",
  "func ID ( ) { var ID : bool } func ID ( ID : [ ID [ false * ( ID ) * ID ] [ ( - ( ( ( 123 ) ) ) ) ] ] int ) { }",
  "func ID ( ) : bool { var ID : int var ID : int } func ID ( ID : int , ID : bool ) : bool { var ID : int var ID : int }",
  "func ID ( ) : int { while ID ( ) [ false / ( - ID ) ] { } } func ID ( ) { }",
  "func ID ( ID : int ) { } func ID ( ID : [ ] [ ( - ( ID ) ) ] bool ) { }",
  "func ID ( ID : [ ] int , ID : int ) { return } func ID ( ) { while ID ( ) { } ID = - ID }",
  "func ID ( ID : int , ID : int , ID : int ) : bool { var ID : int return }",
  "func ID ( ) { var ID : int { var ID : [ true * ( ( - ( ID ) ) ) / ID ] int } { } }",
  "func ID ( ) : [ - - true and false * - - ( ( ID ) ) * ( - - false ) and - - ID ] bool { }",
  "func ID ( ) { ID ( true + - ( ( - ( ( false ) ) ) ) + - 123 ) = ( true ) } func ID ( ) { }",
  "func ID ( ) : [ ID ( 123 * ID / ( - true ) ) ] bool { }",
  "func ID ( ) { var ID : bool if 123 - ID * ( ID ( ) ) * ( ( ( ID ) ) ) { } }",
  "func ID ( ID : [ ] bool ) { ID [ - ID [ ( ID ) ] [ 123 ] ] = ID } func ID ( ) { }",
  "func ID ( ID : [ ( true / - - true - ( ( 123 ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int return - - ( false / false / - true ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool while ID * - ID <= true * ( ( 123 ) ) * ( ID ) { } if - ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ID : [ ( ( - ( ( - true ) ) ) ) ] int }",
  "func ID ( ) : [ ] [ ( ID ( ) [ - 123 * ( ( - 123 ) ) * ( ( - - 123 ) ) ] ) ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : [ ] bool { var ID : bool print ( - ( - ID ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : int ID [ ID / - ( false * - ID * ( ( ID ) ) ) ] = - true } func ID ( ) { }",
  "func ID ( ) { print false / ID [ ID ( false + ID ) ] / - ID call ID ( ) }",
  "func ID ( ) : int { var ID : [ ] int var ID : [ ID ( ID ( ) ) ] [ ] int }",
  "func ID ( ID : int ) { ID [ ID ( ) [ false * ID / 123 ] ] [ ID ] = true }",
  "func ID ( ID : [ ( true * ( ( ID ( ) ) ) * - ID ) ] bool ) { }",
  "func ID ( ) : [ - 123 / - ID ( false - - ( ID ) ) / ( ID ) ] int { } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ] bool var ID : bool } func ID ( ID : int , ID : [ - ( ( ( ID ) ) ) ] int , ID : [ ] bool ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : [ ] int , ID : bool ) { var ID : int var ID : bool print ( 123 ) }",
  "func ID ( ID : [ ] int , ID : int , ID : int ) : [ ID ( ) - ( true ) ] int { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int print 123 + ID [ ID [ ID ] ] [ false ] - - - false ID = ID }",
  "func ID ( ) { call ID ( ) print ( ID ( 123 != false ) ) }",
  "func ID ( ) : [ - - ( true / ( ID ( ) [ - ID ] ) ) ] int { }",
  "func ID ( ) : [ - - ( ID + ( - false / ID ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool var ID : [ ] [ ] [ 123 / 123 ] [ ] bool }",
  "func ID ( ID : bool , ID : int ) : int { var ID : bool var ID : [ false * ID ( ) * - ( true ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] bool var ID : int } func ID ( ) { var ID : int var ID : [ ] int }",
  "func ID ( ID : int ) : int { var ID : bool while false and ID ( - - true ) and - ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ false / ( ID ( false ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] [ ( - ID [ false * - ID / true ] [ - ID ] ) ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) : int { var ID : bool var ID : int }",
  "func ID ( ) { ID ( ) [ true > - 123 * - ID [ ID ] [ 123 ] ] = ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : [ true / true + - ( - ( ID ) ) + - - ID ] int ) { }",
  "func ID ( ID : [ - ID [ - false + ID ( ) [ - false ] + - ID ] ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool if - ( ID [ ( ID ) ] ) { } print false }",
  "func ID ( ) { var ID : int if ID >= ( - ID ( ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ - true * - ID != ( ID ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ - false / ( 123 * false / ID > - true ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : [ ( ID ( ) / ( ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ) { } func ID ( ID : bool ) { { while true * 123 / - ID { } if true { } } }",
  "func ID ( ) { var ID : bool var ID : bool while ID [ - true / ( ID ) * ID ] { } while ( - ( ( ( ( ID ) ) ) ) ) { } }",
  "func ID ( ) : [ ] bool { } func ID ( ) { var ID : [ ( - ( ( ( ( true ) ) ) ) ) ] bool var ID : bool }",
  "func ID ( ) : int { var ID : bool var ID : bool return } func ID ( ) { var ID : [ ID ] int }",
  "func ID ( ID : [ ] bool , ID : [ ] [ ] bool , ID : [ ( - ( ID ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int print ( - true / ( - ID ) ) ID = - ID }",
  "func ID ( ID : int , ID : [ 123 * - ID / false + true / ID - - - ID ] [ ] int ) { }",
  "func ID ( ID : bool ) : bool { var ID : int var ID : bool return - ID ( ) / ID }",
  "func ID ( ID : [ ( ( ( false / ( - true ) / false ) ) ) ] int ) { }",
  "func ID ( ) { var ID : [ ] [ ] bool var ID : bool call ID ( - ID ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : [ ] bool ) : int { var ID : bool print ID ID = ( ID ) }",
  "func ID ( ID : bool , ID : [ ( 123 / ( false * ( 123 ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ( false * ID ( ) [ false ] [ - ( - ID ) ] * 123 ) ] bool ) { }",
  "func ID ( ) : int { var ID : int }",
  "func ID ( ID : bool , ID : [ ] [ false * - ID [ ( 123 ) ] / true ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ] bool { call ID ( ) }",
  "func ID ( ID : bool , ID : int , ID : [ false and - - ( ID ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( ID [ ID ( ) [ - ( ID ) ] [ true ] ] [ true ] ) } func ID ( ) { }",
  "func ID ( ) : int { return } func ID ( ) : int { var ID : int var ID : [ ] [ ] [ ID ] [ ] int }",
  "func ID ( ) { var ID : [ ] [ ] bool var ID : int }",
  "func ID ( ID : bool ) { var ID : bool var ID : [ 123 / ID - false * true + ( ( ID ) ) ] int }",
  "func ID ( ) { var ID : [ ] int var ID : bool print false and false * - ID and true }",
  "func ID ( ID : bool , ID : [ false + ID * - ID [ ID ] + ID ] int ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : [ ] [ ] [ ] int { var ID : [ ] [ ] int } }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : int var ID : [ 123 - false ] int }",
  "func ID ( ID : bool , ID : bool ) { var ID : int var ID : [ ] [ ] [ ] [ ] [ ID ] bool }",
  "func ID ( ) { var ID : [ ] [ - - ID [ ID - ( - true ) + false ] [ ID ] ] bool }",
  "func ID ( ) : int { call ID ( - 123 - ID * - ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : [ - false * - false + 123 * - - 123 * - ID ] int ) { } func ID ( ) { }",
  "func ID ( ) { call ID ( - - ( ID ( ) * true > ID ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : int ID [ 123 / ( ( ID ) ) ] = - ID call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : [ ] int { var ID : int var ID : int }",
  "func ID ( ID : int , ID : [ false / true / ( false and false and ( ( - ID ) ) ) ] bool , ID : [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) { var ID : bool var ID : [ ] bool ID ( ) [ 123 ] = - ( ID ) }",
  "func ID ( ) : [ ( 123 / ID - ( ID + - ( ( false ) ) - ( ( - ID ) ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int } func ID ( ID : int ) { }",
  "func ID ( ) : int { var ID : int var ID : int ID [ ( ID ( ( ID ) ) ) ] [ - - ID ] = ( 123 ) }",
  "func ID ( ID : bool , ID : [ ( - ( ID [ ID ] ) ) ] [ ] [ ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ( 123 + ID [ ID ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : bool { } func ID ( ) : [ ] [ ] [ ] int { var ID : bool }",
  "func ID ( ID : [ - - ID ( ) / false / ID != ID [ - ( - 123 ) ] [ ID ] ] [ ] int ) { }",
  "func ID ( ) { var ID : int { } return - ID ( ) * ID [ ID ] [ ( - ID ) ] } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool if - true / - - ID / - true { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool } func ID ( ) { var ID : int return - - - - ( ( ID ) ) }",
  "func ID ( ID : int , ID : int , ID : bool ) : [ ] [ ] bool { var ID : int while - - ( ID ) { } while false { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int return true < ( 123 / false ) } func ID ( ) { }",
  "func ID ( ) : [ ] [ ( - false / - - false / false - ID + true ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : [ - ( 123 / ( - - - - 123 ) ) ] [ ] bool ) { }",
  "func ID ( ) : int { var ID : bool var ID : bool return ( ID [ ID ] [ ( ID ) ] ) }",
  "func ID ( ) : int { var ID : bool while - ID ( ID ( - ( ID ) ) ) { } { } }",
  "func ID ( ) : bool { var ID : bool } func ID ( ID : int ) : [ ( - ( true ) ) ] bool { }",
  "func ID ( ) : int { var ID : int while - - 123 * ( 123 * - - true * - - ( ( 123 ) ) ) * false { } if true { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : bool while - false / ID ( ) [ ID ] { } }",
  "func ID ( ) { if 123 * 123 - true - false / ( - ( ( - ID ) ) ) { } print ( ( ( ( ID ) ) ) ) }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool ID ( - ID - false ) = - - ID while - ID { } }",
  "func ID ( ID : int , ID : [ ] [ ( true - ( true ) + 123 ) ] int , ID : bool ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : [ ( - true * 123 <= ( ( ( true ) ) ) ) ] int { }",
  "func ID ( ID : [ ] int ) { var ID : bool var ID : [ ] [ ( - ( false ) ) ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : [ ( 123 / - true or ( ( ( - ( ID ) ) ) ) ) ] [ ] bool ) { }",
  "func ID ( ) : int { var ID : [ ( false / ( - ID ) ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { { var ID : int print ( ID ( ) ) { } } { } }",
  "func ID ( ID : [ ( - ID ( ( ID ( ) ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ true + - - 123 * ID [ ID ] [ ID ] - ID ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] bool var ID : bool } func ID ( ID : [ ID ] int ) { }",
  "func ID ( ID : [ ] bool ) : [ - ( true + ( ( ID ) ) + ( ID ) ) ] int { }",
  "func ID ( ID : [ true + - - ID >= - ( true / ( true ) ) ] int ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : bool var ID : int while ( ID [ ID ] ) { } }",
  "func ID ( ID : [ false / ID ( ) [ ID ( ) [ ID ] ] [ ( true ) ] / ID ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ 123 / ID / - ( - - ID ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ( - 123 * ID ( ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] bool call ID ( ) }",
  "func ID ( ID : [ - ID [ - 123 / false / ( ( ( ( ID ) ) ) ) ] ] [ ] bool ) { }",
  "func ID ( ) { print ID / ID [ ID ( - - ( ( false ) ) ) ] call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID ( ( - ( - ID ) ) ) ] int ) { }",
  "func ID ( ID : bool , ID : [ ] int ) { var ID : int var ID : bool call ID ( ( - - ID ) ) ID = ID } func ID ( ) { }",
  "func ID ( ) : int { while ( ( ID [ ( true ) ] ) ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : [ ID [ true ] / - ( ID ) / - ID ] int } func ID ( ) { }",
  "func ID ( ) { ID [ - false / ID ( ID ( ( - ID ) ) ) ] = ( ID ) if ( ( - ID ) ) { } }",
  "func ID ( ID : int ) : bool { if true + ID ( ( - - - false ) ) - ID { } { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ( - false / false and - ID ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ - ID ( ) [ ID <= ID ] [ ID ] ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { return } func ID ( ID : int , ID : bool ) { }",
  "func ID ( ID : [ ] bool ) { var ID : int call ID ( true + - 123 <= - - ( ID ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] bool var ID : int while ID ( ) [ ID ] { } ID = 123 }",
  "func ID ( ID : bool , ID : bool ) { var ID : int print ( - ID [ - ID ] ) } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] bool { var ID : [ - ID ( - - - ID ) ] int var ID : int }",
  "func ID ( ) { var ID : [ ] int var ID : bool ID [ - 123 * false / ID ] [ false ] = ID while ( true ) { } }",
  "func ID ( ) : bool { var ID : bool var ID : int return } func ID ( ) { var ID : int var ID : [ ID ] [ ] int }",
  "func ID ( ID : [ 123 / - ID [ - - ID ( ) [ 123 ] ] ] [ ] [ ] [ ] [ ] [ ] int ) { }",
  "func ID ( ) : int { var ID : int var ID : bool while false * ( ID [ true ] ) { } { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID ( ) [ ( ID ( ) ) ] [ - true ] ] [ ] int var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) : int { } func ID ( ) : [ ] int { return ( - ID ) }",
  "func ID ( ID : bool ) : [ 123 * ID [ ID ( ) * - 123 ] [ - ( ( ( ( ID ) ) ) ) ] * 123 ] [ ] [ ] [ ] [ ] bool { }",
  "func ID ( ID : [ ] [ ] int , ID : [ ] int , ID : int ) : int { var ID : bool call ID ( ) { } } func ID ( ) { }",
  "func ID ( ID : [ ( false + ID [ - ( - ( - ( ID ) ) ) ] [ ( true ) ] + ID ) ] [ ] bool ) { }",
  "func ID ( ) : int { var ID : bool return ( - ( ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : int return false / ID ( ) != ( ID ) }",
  "func ID ( ID : int , ID : bool ) { ID = ( ID ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { ID ( ) [ true / ID ( ) [ ID ] [ - - - ( ( false ) ) ] / 123 ] [ ID ] = true { } } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { var ID : bool print - ID ( - false ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int var ID : bool return }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : bool var ID : int ID ( ( ( - ( ID ) ) ) ) = - true ID = ( ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( - true * ( - ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ) : [ ] int { print ID ( ID [ - false ] ) if true { } }",
  "func ID ( ID : bool ) { var ID : bool var ID : [ ] bool while - ( - true ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : bool ) : bool { ID [ ( 123 ) ] [ ID ] = ( ( ID ) ) }",
  "func ID ( ID : bool ) : int { var ID : int print false + true <= ( true ) { } } func ID ( ) { }",
  "func ID ( ) : [ - ID / ID ( ) * ( - false * false / false ) ] [ ] bool { }",
  "func ID ( ID : bool , ID : int , ID : int ) : int { var ID : bool }",
  "func ID ( ID : bool ) { var ID : int if ( 123 > ID ( ) ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : [ true * - false * - ID + false ] bool } func ID ( ) { }",
  "func ID ( ID : bool ) { return - ( - ID [ ID [ ID ] ] [ ( ID ) ] ) }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : int } func ID ( ID : bool , ID : int ) { var ID : int }",
  "func ID ( ) { var ID : int var ID : [ ( ( ( - - - false ) ) ) ] bool }",
  "func ID ( ID : [ ] int , ID : bool ) { var ID : bool var ID : [ ] int { var ID : bool if ( false ) { } } print true } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int ID ( ( ( false * ID * ID ) ) ) = - - - ID }",
  "func ID ( ) { var ID : bool ID [ ID [ false - 123 / ( - ID ) * ID ] ] [ ID ] = - true }",
  "func ID ( ID : int , ID : [ true * ( ID ( ) / false - - ( true ) - ( ( true ) ) ) ] int , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { call ID ( ) call ID ( ) }",
  "func ID ( ) { var ID : bool if ( ( ID ( ) [ true ] ) ) { } print - ID }",
  "func ID ( ) : int { var ID : bool var ID : int ID ( ) [ ( true ) ] [ ( true ) ] = ( ( false ) ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int return } func ID ( ID : int , ID : int ) : int { var ID : bool ID = ID print - ID }",
  "func ID ( ID : [ ] bool , ID : bool , ID : [ ID ( - 123 - ( 123 ) ) ] [ ] [ ] int ) { }",
  "func ID ( ID : [ - - ID ( ID ( ) * ( true ) / - ( ( true ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool if - ID [ ( ID ) ] { } } func ID ( ) { }",
  "func ID ( ) { } func ID ( ID : bool , ID : bool ) { var ID : [ ID ( - - true ) ] int }",
  "func ID ( ) : int { var ID : int var ID : bool { var ID : int call ID ( ( ID ) ) print ( ( ID ) ) } call ID ( ) }",
  "func ID ( ID : bool , ID : [ - - true / - ( - - ( true ) ) ] [ ] [ ] int , ID : int ) { }",
  "func ID ( ID : int , ID : [ ] [ ] bool ) { var ID : int var ID : [ true - - ( ( - ID ) ) - ID ] int }",
  "func ID ( ID : bool , ID : [ 123 < ID ( ( - false ) ) ] [ ] int , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int return - - - ID ( - ( true ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( true - - - true > ID ) ] [ ] int ) { }",
  "func ID ( ) : [ ID ( ) [ - - 123 or false * - ID * ID or ( ( false ) ) ] [ ( - ( ( ID ) ) ) ] ] bool { } func ID ( ) { }",
  "func ID ( ID : [ - ( ( false * ID / ( ( true ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ID [ ( ID / - - - ( ID ) ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool ID ( ID ( ) [ ( ( - ID ) ) ] [ 123 ] ) = ID } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool } func ID ( ) : int { var ID : bool var ID : [ ( ID ) ] [ ] [ ] [ ] bool }",
  "func ID ( ID : [ ID ( ) [ ID [ ID ( ) [ true ] [ - false ] ] ] [ ID ] ] [ ] bool ) { }",
  "func ID ( ID : int ) : int { var ID : [ 123 * - false / - ID [ ID ] ] bool var ID : bool }",
  "func ID ( ) : [ ] int { ID ( ) [ - true - ID [ ID ] [ - - ID ] ] [ ( - ID ) ] = - ( false ) call ID ( ) }",
  "func ID ( ID : bool , ID : [ ID [ - ( - ( ( - 123 ) ) ) ] ] int ) { }",
  "func ID ( ID : [ ] [ ] bool ) : int { var ID : [ ] bool } func ID ( ) : [ - ID ] bool { }",
  "func ID ( ID : int , ID : int , ID : [ ] [ ( ID ( - - ( 123 ) ) ) ] [ ] [ ] [ ] [ ] [ ] int ) { }",
  "func ID ( ID : bool , ID : [ - - ID ( ) [ - ( 123 ) ] [ ( ID ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { ID = ( ( ID [ ID ] [ - - 123 ] ) ) { } }",
  "func ID ( ) : int { return }",
  "func ID ( ) { var ID : [ ] int var ID : [ true / - ID [ - ID ] [ - ID ] ] [ ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : [ ] [ - true - - ID ( ) + - 123 ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ID [ - ID [ ( ID ) ] [ false ] ] [ false ] ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { ID = ID ( - - true / - ( 123 ) / 123 ) ID = ID } func ID ( ) { }",
  "func ID ( ) { { if true / ID ( ) / ID ( true ) { } } { } }",
  "func ID ( ) { var ID : [ true and - - - - ( ( ID ) ) ] [ ] [ ] bool }",
  "func ID ( ID : [ ] [ ] [ - - false * true * true - false * ID ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { return false / ( ( - ID ( ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : int var ID : [ - false / ( true ) / ID ] [ ] int } func ID ( ) { }",
  "func ID ( ) : int { while ( ( - true / ( false ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - ( true * - - ID [ - ( true ) ] ) ] bool , ID : int ) { }",
  "func ID ( ) { var ID : int var ID : bool { call ID ( ) print ( - true ) } print ID } func ID ( ) { }",
  "func ID ( ) { { var ID : int return - ID / 123 * ID ( ( - ( - 123 ) ) ) } { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { call ID ( ID / ID ( ( - 123 ) ) / - ID ) while - - ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool while - ( ID ( ) [ - ID ] [ 123 ] ) { } }",
  "func ID ( ID : int ) : [ ] int { var ID : bool var ID : int call ID ( ID / 123 ) }",
  "func ID ( ) { var ID : int var ID : [ ID ( - 123 * ( - true ) * ( 123 ) ) ] [ ] int }",
  "func ID ( ) { var ID : int var ID : [ ] int print - - ID / ( ( true ) ) * ( - ID ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int , ID : [ ] int ) : int { var ID : [ 123 / ( false ) ] [ ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID ( ) * - ID ( ( false ) ) ] [ ] [ ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) { if 123 / - ( ID [ ID ( ) ] ) / true { } { } }",
  "func ID ( ) { var ID : bool var ID : bool ID = - ( ( false ) ) call ID ( ) }",
  "func ID ( ID : bool ) : int { var ID : int var ID : [ - ID [ - ID ] [ ID ] ] [ ] int }",
  "func ID ( ) : int { var ID : bool print ( ID [ ID ( ) ] [ - ( ID ) ] ) call ID ( ) }",
  "func ID ( ID : [ ] bool ) { print - - false * - ID ( ) / ID print ( - ID ) }",
  "func ID ( ID : bool ) { var ID : [ ID ( true / ID [ false ] ) ] [ ] [ ] [ ] [ ] int var ID : [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { call ID ( ) ID [ 123 * ( ID [ - - ( false ) ] ) / ( ( ID ) ) ] = ID } func ID ( ) { }",
  "func ID ( ) { } func ID ( ) { var ID : int if true * true / 123 - ID { } print true }",
  "func ID ( ID : int , ID : [ false < false - ID ( - ID ) ] int , ID : [ ] int ) { }",
  "func ID ( ) : int { var ID : [ ( false / ID ( - ID ) * ID ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ( 123 + - 123 / ID / 123 ) ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( ID ( ) [ - - ID ] [ ID ] ) ] int ) { }",
  "func ID ( ID : int , ID : bool ) : int { return ID ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ID [ false * ( ID ) ] [ - ( - - - false ) ] ] [ ] bool , ID : [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( ( ID [ false ] ) ) ] bool ) { }",
  "func ID ( ID : int , ID : [ ] bool , ID : int ) : int { var ID : int var ID : bool ID ( 123 ) = ( ID ) call ID ( ) }",
  "func ID ( ID : int ) : bool { call ID ( ) } func ID ( ID : bool , ID : bool ) { call ID ( ) ID = - false }",
  "func ID ( ID : [ ] [ true * - - 123 - ID [ - ( ID ) ] ] int ) { }",
  "func ID ( ) : bool { var ID : int var ID : int { print ( - ID ) call ID ( ) } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool ID [ - - ID [ ( ID ) ] ] = ( - ( - ID ) ) }",
  "func ID ( ) { var ID : int var ID : int } func ID ( ID : bool , ID : bool , ID : int ) : bool { var ID : int var ID : [ ] int }",
  "func ID ( ID : [ - ID * 123 and ID [ ( - ( ( false ) ) ) ] and ID ] bool ) { }",
  "func ID ( ID : [ true / ID <= ID / false / - ID ( ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( ) ID = ( ID / ( ID ) ) }",
  "func ID ( ) : [ ID * - - true or - 123 * ID ( ) or 123 ] int { } func ID ( ) { }",
  "func ID ( ) : [ - false * - - - 123 / ID ( ID [ - true ] [ ( ( ID ) ) ] ) ] bool { } func ID ( ) { }",
  "func ID ( ) : [ - ( - ( ID / ID ( ) [ ID ] ) ) ] int { }",
  "func ID ( ) : bool { var ID : [ ID [ ( - ( ( ( 123 ) ) ) ) ] [ ( ( ID ) ) ] ] int var ID : bool }",
  "func ID ( ) : int { var ID : int var ID : int print - ( false * - ( - false ) * ( ( ( ID ) ) ) ) print ID }",
  "func ID ( ID : [ ( false * - - ( ( - ( ( - ( - ( ID ) ) ) ) ) ) ) ] bool ) { }",
  "func ID ( ID : int , ID : [ 123 * ( ID [ ( 123 ) ] ) ] int ) { }",
  "func ID ( ID : bool , ID : [ - - ( ID ( ID ( ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) { ID ( ) [ ( - false / ID ( ) / ( - ID ) ) ] = - - ID if ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int call ID ( ( ID [ false ] ) ) }",
  "func ID ( ID : int , ID : bool ) : bool { call ID ( ) while - false * ID - 123 - - true { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : bool var ID : int return true * - - ( 123 ) * - ( 123 ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) : int { { var ID : int call ID ( ID [ - - - ID ] [ ID ] ) } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] [ ( - - - ID ( - - 123 ) ) ] [ ] int { }",
  "func ID ( ID : bool , ID : [ ] [ ] int , ID : [ ] [ ] [ ] [ ] [ ID ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : bool { var ID : int { var ID : [ ] bool return true } }",
  "func ID ( ) : [ ] bool { return } func ID ( ) : bool { var ID : [ ( ID ) ] int }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : int var ID : [ ] bool ID ( ( ID ) ) = - ID while ( ID ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool call ID ( ID [ - ID ( ) ] [ - ID ] ) while ( ID ) { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] [ ] [ ( ID ( ) [ ID ] [ ID ] ) ] bool }",
  "func ID ( ) { var ID : int return ID ( true / ID [ ID ] * - - ID ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : int { ID ( ) = ID ( ID ) while - ( - - false ) { } } } func ID ( ) { }",
  "func ID ( ) { while ( - - ID [ ( ( ( ID ) ) ) ] ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : [ ID [ true / ID [ ( - ID ) ] [ - ( ID ) ] ] ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool return ( ID ( 123 / ( ( - ID ) ) / ID ) ) }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : [ ID ( ID ( - ( - - ( - - ID ) ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int call ID ( true / ( - - 123 ) * ( - 123 ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : bool { var ID : bool var ID : int } func ID ( ) : int { var ID : [ ] [ ] bool }",
  "func ID ( ) : [ ID [ ( - - ID ( ) [ 123 ] [ ID ] ) ] [ ID ] ] [ ] [ ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID * false / ( - ID != false ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ 123 / true * ID [ ( ID ( ) ) ] ] bool { }",
  "func ID ( ID : bool , ID : [ ] [ ] [ ] bool , ID : [ ] int ) { var ID : int var ID : int }",
  "func ID ( ID : bool , ID : int , ID : int ) { while ( 123 * true / - false ) { } }",
  "func ID ( ) { { var ID : int var ID : [ - - ( ID ( ) ) ] int } while - true { } } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : bool var ID : int while - ( ( ( ID ) ) ) { } { } }",
  "func ID ( ID : int , ID : int ) { var ID : int var ID : [ ] int return }",
  "func ID ( ID : int ) : [ ( ID [ ID ( ) * true * false ] ) ] int { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { ID = true == false and ( - - ( true ) ) and ID while ID { } } func ID ( ) { }",
  "func ID ( ID : int ) { call ID ( - - ID [ ID ( true ) ] ) ID = ID }",
  "func ID ( ) : [ ( 123 * ID ( ) [ - - - ID ] ) ] int { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : bool { var ID : [ ( ( - ID ) ) ] bool }",
  "func ID ( ID : int ) { var ID : bool print ( - 123 / ID * ID ) }",
  "func ID ( ID : [ ] bool , ID : int , ID : [ ID [ - - true * ID / false ] ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool return ( ID ( - ID [ - - - ID ] ) ) }",
  "func ID ( ID : int ) : [ ] [ ( - false - ID ( ( - ID ) ) + ID ) ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : [ true * - 123 / 123 - ID [ true ] - - ID ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : [ 123 / false / 123 and 123 ] int var ID : [ ] [ ] [ ] bool }",
  "func ID ( ID : [ ( ( ( ID ( ID ) ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { while ( ID ( ) [ ( - ( ( ( - - - - ID ) ) ) ) ] ) { } ID = - true }",
  "func ID ( ) { call ID ( false / ( ( 123 * ( false ) / ( - - ID ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] [ ] int { var ID : [ ID [ 123 ] [ - - true ] ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] int { var ID : int var ID : bool if 123 or ID or 123 { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ 123 * 123 / ( false * - ( 123 ) ) ] int }",
  "func ID ( ) : int { var ID : int var ID : bool return ID ( ( false ) ) }",
  "func ID ( ) { var ID : [ ( ( false / - ( ( false ) ) ) ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : int if 123 / ID ( ) [ ID ] [ ID ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID ( ) [ - - - - ( - - true ) ] [ ID ] ] bool }",
  "func ID ( ID : bool , ID : [ ] bool , ID : [ ] [ ID [ - ID ] [ ( ID ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : int while ID ( ( ID ) ) { } if - true { } }",
  "func ID ( ) : bool { { { if - ( ID * - ID / - ( - - ( ID ) ) ) { } { } } while ID { } } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] bool } func ID ( ID : bool ) : int { var ID : bool var ID : bool }",
  "func ID ( ID : int , ID : [ ] int ) : [ ID ( ID [ ( ( ID ) ) ] ) ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : [ ( - - - - ( - 123 ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] bool , ID : bool ) : int { var ID : int var ID : bool return - ID }",
  "func ID ( ) : int { var ID : bool var ID : int { var ID : [ ] [ ] [ ] [ ] [ ] int } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int var ID : [ ID ( - ( ( ID ) ) ) ] [ ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : [ 123 == true / - ( ID ) / - - ( ID ) ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { return - ID ( - - ID ) }",
  "func ID ( ) { var ID : int var ID : [ ] int ID = - - - 123 * ( - - ( ( ID ) ) ) print ( ( ( false ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { while ID / ( ( ID ) ) / 123 { } print false } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ - ID and true / ( ID ) * ( - - - - - ( false ) ) ] int } func ID ( ) { }",
  "func ID ( ) : bool { { var ID : bool if ( - true * ( false ) / - - true ) { } if 123 { } } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int { var ID : bool var ID : [ ] bool } return ID } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : [ ID ( ) [ true * - ID * - ( - ID ) ] ] [ ] int }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ ] bool } func ID ( ) : bool { var ID : int call ID ( ) if ( ( 123 ) ) { } }",
  "func ID ( ID : int , ID : [ ID ( - true - ( false ) ) ] [ ] int ) { }",
  "func ID ( ) : int { { var ID : bool var ID : [ ( 123 + ( - - false ) ) ] [ ] bool } while - true { } }",
  "func ID ( ) : int { var ID : int var ID : [ ( true * ID ( true ) ) ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : [ - ID [ - ( 123 * - ID * - ID ) ] ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int { var ID : bool var ID : int while ID ( ) { } call ID ( ) } }",
  "func ID ( ) { var ID : bool var ID : bool print ID ( ) [ ( ID ) ] }",
  "func ID ( ID : int , ID : bool , ID : int ) : int { var ID : bool }",
  "func ID ( ID : bool , ID : [ ] int ) : [ ID * false - 123 / false ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ false + - - - true / ID [ 123 ] [ ( - ID ) ] / ID ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int ID ( ( ( ID ( ) ) ) ) = ID } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool return }",
  "func ID ( ) { var ID : bool var ID : int ID ( - - ( - 123 ) ) = ( - true ) }",
  "func ID ( ID : bool , ID : [ ] bool , ID : bool ) : bool { var ID : int var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int ) : [ ] [ ( ID / ID ) ] [ ] [ ] [ ] bool { }",
  "func ID ( ID : int , ID : [ ] bool ) : bool { call ID ( ) ID [ ID [ ( true ) ] [ - ( ID ) ] ] [ ( ID ) ] = ID } func ID ( ) { }",
  "func ID ( ) { var ID : [ - true * ID ( ( ID ) ) / ( 123 ) ] int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool print ID ( ) * true * ( - ID ) } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ID ( ) [ 123 + 123 + ( true ) ] [ - - - - ( 123 ) ] ] [ ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { while - 123 - - - false - ID { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) { print 123 >= ( - ID [ ID ] [ ID ] ) }",
  "func ID ( ) { while - true * - ID ( - false / - true * - - ( 123 ) ) * - 123 { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : [ ] int , ID : bool ) : bool { ID [ - true ] = false ID = - ( ( ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { var ID : bool ID [ ( ( false ) ) ] = 123 } func ID ( ) { }",
  "func ID ( ID : [ false - true * false * ID ( ) and ( ( ID ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool { var ID : [ ] int var ID : [ ( ID ) ] int } ID = - ( ID ) }",
  "func ID ( ID : int , ID : int ) { var ID : int var ID : bool print ( - ID ) if - ( - ( false ) ) { } }",
  "func ID ( ) { return 123 / ( ( true / ( ( - ( ID ) ) ) ) ) / ID } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] bool return } func ID ( ID : [ ID ( ) * 123 ] bool ) { }",
  "func ID ( ID : int , ID : int ) { var ID : bool var ID : int ID ( false / ( true ) ) = ( true ) } func ID ( ) { }",
  "func ID ( ) { } func ID ( ID : [ false / ID [ false / false ] ] bool ) { }",
  "func ID ( ) : bool { var ID : [ ] bool { var ID : [ ] int call ID ( ID ) } if ( ID ) { } }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : bool print ( ( ( - ( ( ID ) ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ ID ( false + false ) ] [ true ] ] [ ] int ) { }",
  "func ID ( ID : [ ] int ) { var ID : int var ID : bool } func ID ( ID : [ ] bool , ID : int , ID : [ ] int ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : [ ] int var ID : bool { var ID : bool var ID : [ ] bool } }",
  "func ID ( ID : bool , ID : [ 123 / ID / ID [ ( false ) ] [ ID ] ] bool , ID : [ ] int ) { }",
  "func ID ( ) : [ false < ID ( - 123 + 123 * ( false ) ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ID [ 123 / - false < ( ( 123 ) ) ] ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : int print - ID ( ( 123 ) ) }",
  "func ID ( ) { return - false - - - ID * ID + true and ID }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : [ ] bool var ID : [ ] [ - ID ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : [ ] bool return }",
  "func ID ( ID : [ ID [ - false * - - ( ID ) / ( - 123 ) ] ] bool ) { }",
  "func ID ( ) : int { var ID : int return } func ID ( ) : bool { while - - ( ( ( 123 ) ) ) { } }",
  "func ID ( ) { var ID : bool call ID ( ID [ ID [ ID ] [ - ( ID ) ] ] [ false ] ) call ID ( ) }",
  "func ID ( ) : int { print 123 + 123 > ID ( ( ID ) ) print - - - ( true ) }",
  "func ID ( ) : int { var ID : bool return - - ( ID ( ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] int , ID : [ ] bool ) { call ID ( ) }",
  "func ID ( ID : [ - - ( - - ID ( ) / true * false ) ] int ) { }",
  "func ID ( ID : [ ] bool ) { var ID : [ ] int ID = - ( ID ) }",
  "func ID ( ) : int { var ID : bool var ID : bool while - ( 123 or ID ) { } }",
  "func ID ( ID : int , ID : [ ] bool , ID : int ) : int { return ID ( 123 ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : int var ID : bool while true * - - - ID / - ID { } } func ID ( ) { }",
  "func ID ( ) { } func ID ( ID : [ ] [ ] bool , ID : bool , ID : bool ) { var ID : bool var ID : bool }",
  "func ID ( ID : int ) : bool { if ID [ - - 123 / ID * ID ] { } print ID } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ] [ ID [ ID [ ( - 123 ) ] [ false ] ] [ ( - ( - ( true ) ) ) ] ] int ) { }",
  "func ID ( ) { var ID : [ ID ( ID [ - true ] ) ] bool }",
  "func ID ( ) { call ID ( ID ( ) [ ( ( - 123 ) ) ] ) }",
  "func ID ( ) { var ID : int if ID [ ID * - true - - - - ( ID ) + - ( ( - ID ) ) ] [ true ] { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) : [ 123 / ID [ ( true ) ] [ ( true ) ] ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool , ID : [ 123 * ( ( true ) ) ] bool ) { }",
  "func ID ( ID : [ ] int , ID : bool ) { call ID ( ID / ( ( ( - 123 ) ) ) ) { } }",
  "func ID ( ) { } func ID ( ID : [ ] bool , ID : [ ] [ ( ID ) ] bool ) { }",
  "func ID ( ) { var ID : int var ID : int { } call ID ( ) return }",
  "func ID ( ) { var ID : bool var ID : bool if ( ID ( ) [ ID ] ) { } } func ID ( ) { }",
  "func ID ( ID : [ ( true - 123 / ID [ 123 ] + true ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : int { var ID : [ ID [ false and ( ( ( - - ID ) ) ) ] [ ( 123 ) ] ] bool }",
  "func ID ( ID : [ ID + false * ID [ false - ID + true ] * ID + ( ( ID ) ) ] int ) { }",
  "func ID ( ID : int ) : int { return 123 / ( - true >= 123 ) }",
  "func ID ( ID : [ false - - ( - - - ( - false ) ) ] [ ] bool ) { }",
  "func ID ( ) { var ID : [ ] [ ] bool return }",
  "func ID ( ) : [ - false - ID ( ) / false - - 123 <= - ID ] int { }",
  "func ID ( ) : [ true / ( ID [ false / ( - true ) ] [ ( ( ID ) ) ] ) ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool ID [ ID ( ) [ - - - - ID ] [ ( ( ( ID ) ) ) ] ] [ 123 ] = - 123 { } } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : bool var ID : int { return - ID ( ) [ - ID ] } print false } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ - ID ( ) [ true * ID ] [ ( ID ) ] ] bool }",
  "func ID ( ) { if false - false / ( true - - 123 ) * ( ( false ) ) + - false { } if false { } }",
  "func ID ( ID : bool , ID : int ) : int { var ID : int var ID : bool if 123 * ( ID ) / ID { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool ID ( - - ( - ID [ false ] ) ) = ( ID ) print ( ( - ( ( ID ) ) ) ) }",
  "func ID ( ) : [ ] bool { var ID : int var ID : bool call ID ( ) print ( - - 123 ) }",
  "func ID ( ID : int , ID : [ ID / - true - - ID * ID [ ID ] [ false ] ] bool ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ - - - - 123 * true * ( ( true ) ) ] bool }",
  "func ID ( ) : int { var ID : int var ID : int call ID ( true / ( ID ) ) call ID ( ) }",
  "func ID ( ) { var ID : bool if - - 123 + - ID != ID ( ) { } print ( ( 123 ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : int return - ( ID ( ) [ ( ( ( - 123 ) ) ) ] [ ID ] ) }",
  "func ID ( ) : bool { call ID ( ) while ID ( ) [ - - true + ID - - ID ] { } } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : bool var ID : bool return }",
  "func ID ( ID : int , ID : bool , ID : [ 123 / ( ID [ ID ] ) ] [ ] bool ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ( ID ( ) [ true ] ) ] bool ) { }",
  "func ID ( ) : bool { var ID : int while - - - 123 and ID [ - 123 ] { } }",
  "func ID ( ID : [ ( 123 - ( ID / ( - - - ID ) ) - ( 123 ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { return } func ID ( ID : int ) : bool { }",
  "func ID ( ID : int ) { var ID : bool var ID : bool print 123 / ( true - ID ) call ID ( ) }",
  "func ID ( ) : int { var ID : [ 123 - ID ( ( - - false ) ) + true ] bool } func ID ( ) { }",
  "func ID ( ID : bool ) { ID ( ) [ 123 * ID ( ID ) ] [ ID ] = ID }",
  "func ID ( ID : bool , ID : [ ID ( ) [ 123 / ID [ ID ] ] ] bool , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ - true / ID [ ( - ID ( ) ) ] * ( - - ( - ( ID ) ) ) ] int ) { }",
  "func ID ( ) { var ID : int print true < ID ( ) [ ID ( ) ] [ false ] } func ID ( ) { }",
  "func ID ( ) { if true / - ID * ( ID ( true ) ) { } ID = - ID }",
  "func ID ( ) { var ID : bool var ID : bool call ID ( ) call ID ( true / false - - - ( - ( 123 ) ) - true ) }",
  "func ID ( ) { ID = false and - - ( false / ( false ) * true ) if ID { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool } func ID ( ID : [ false * false != 123 ] [ ] int ) { }",
  "func ID ( ID : bool ) { var ID : bool while 123 / - 123 - - true * ( 123 ) / - - true { } }",
  "func ID ( ) { var ID : int ID = ( ( ( - ( - ( ID ) ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int }",
  "func ID ( ) { print true * ID / - ( 123 + false * - ID ) while - ( ID ) { } }",
  "func ID ( ) : int { var ID : int var ID : bool call ID ( 123 <= ( ( false ) ) ) { } } func ID ( ) { }",
  "func ID ( ) : [ ] [ ID ( ( false * ( - ID ) / - ( ( ( ( true ) ) ) ) ) ) ] int { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : [ ] [ false <= false ] [ ] [ ] [ ] bool }",
  "func ID ( ID : int , ID : int , ID : bool ) : [ - ( ( ID ) ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : [ - - ( false * ID [ false - ID ] [ false ] / - 123 ) ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : bool var ID : int } func ID ( ID : [ ] bool , ID : [ ( - - - ( - - - true ) ) ] bool , ID : int ) { }",
  "func ID ( ) { var ID : bool ID = 123 / ID [ 123 / 123 * ( false ) ] [ ( ID ) ] ID = ( ( - ID ) ) }",
  "func ID ( ID : [ ID [ ID ( ) [ - ( ID ) ] [ 123 ] ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) { return - ID ( 123 / ID ( ( 123 ) ) / ( false ) ) } func ID ( ) { }",
  "func ID ( ) : [ ] [ - ( ID [ - true / false / ID ] [ ( ( ID ) ) ] ) ] int { }",
  "func ID ( ) : [ ] bool { var ID : int ID [ 123 + ( - 123 ) ] [ - ( 123 ) ] = - - ( ID ) ID = ( - ID ) }",
  "func ID ( ) { if true > ID ( ) * ( ID [ - ( ( false ) ) ] ) { } }",
  "func ID ( ) { var ID : int return } func ID ( ) : [ ( ( ( true ) ) ) ] bool { }",
  "func ID ( ID : [ ] bool , ID : bool ) { var ID : int print ( ID ( ) ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int } func ID ( ID : bool ) : int { var ID : int var ID : int while ID { } if - ID { } }",
  "func ID ( ) { var ID : [ - ID ( - ( ( ID ) ) ) ] int }",
  "func ID ( ) { ID ( - ID ( - ( - ID ) ) ) = ( false ) call ID ( ) }",
  "func ID ( ) : bool { var ID : bool var ID : bool } func ID ( ) { var ID : [ ] int return }",
  "func ID ( ) { var ID : bool var ID : int if - - 123 / - ( - - 123 ) / 123 { } print ( - - ID ) } func ID ( ) { }",
  "func ID ( ) : [ ] int { call ID ( ) return ID ( ID ( ) ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : int print ID * - false * - 123 - - true } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool ID = ID ( ID [ 123 ] [ 123 ] ) if ID { } }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : int ID ( ) [ - ( ID ) ] [ ID ] = - ID ID = 123 }",
  "func ID ( ) : [ ] int { var ID : int print ID [ ID ( ( ( - false ) ) ) ] } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : bool var ID : int while ( ( 123 ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ - ID / - true + - - ( - ( 123 ) ) - - ( true ) ] int ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : [ ID * ( - ( ID ) ) ] bool }",
  "func ID ( ) { var ID : [ ID [ - false / - ( 123 ) / ( 123 ) ] [ - - ID ] ] [ ] int }",
  "func ID ( ) { var ID : bool var ID : int while ( true / ( ID ) ) { } }",
  "func ID ( ) { var ID : bool var ID : int ID ( ID ( false / false ) ) = true print ID } func ID ( ) { }",
  "func ID ( ) { return ID * ( false / - - true / false >= ( 123 ) ) / ( ID ) }",
  "func ID ( ID : bool , ID : int ) { while - 123 / false * 123 - ID [ ID ] [ - - ID ] { } ID = - - ID } func ID ( ) { }",
  "func ID ( ) { call ID ( - ID [ ID ( ) / ( ( ( - ID ) ) ) * ID ] [ false ] ) } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : int var ID : [ ] bool print ID [ ( ID ) ] { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - - - - ID ( ) [ ( - 123 ) ] [ 123 ] ] int ) { }",
  "func ID ( ID : int ) { return - true - ( ID ( ) * - ID / ID ) - ( - - ID ) }",
  "func ID ( ) : bool { var ID : int print ( ( 123 * ( true ) / false ) ) { } }",
  "func ID ( ID : int ) { var ID : [ ] bool { var ID : int var ID : [ ] int if ID { } } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : [ ] bool { var ID : int var ID : bool } func ID ( ) : bool { }",
  "func ID ( ID : int ) { var ID : int var ID : int } func ID ( ID : [ ] bool , ID : int , ID : [ ] bool ) { }",
  "func ID ( ) { var ID : [ - ( - true / ( true ) ) ] bool } func ID ( ) { }",
  "func ID ( ) : [ ] int { return } func ID ( ) { var ID : bool var ID : bool ID ( ( - ( ( ID ) ) ) ) = ID while false { } }",
  "func ID ( ID : int , ID : [ - - - ( ID [ - ( 123 ) ] [ - ( 123 ) ] ) ] [ ] bool ) { }",
  "func ID ( ) : [ - false * ID ( ( ID ( ) ) ) ] int { }",
  "func ID ( ID : [ ] [ ] int , ID : bool , ID : bool ) { var ID : [ ] [ ID ] [ ] bool }",
  "func ID ( ) { var ID : [ ] int var ID : int { var ID : bool ID ( ) [ - 123 ] = ID } while ( - ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { } func ID ( ID : [ - ( - ID ) ] int ) { }",
  "func ID ( ID : [ ID [ - ID ( ID ( ) [ - - ( false ) ] ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) { while - - ID ( 123 ) { } } func ID ( ) { }",
  "func ID ( ) : int { ID [ ( ( ( - ID ) ) ) ] = - ID } func ID ( ) { }",
  "func ID ( ) { } func ID ( ID : bool , ID : bool , ID : int ) { while ( ( ID ) ) { } }",
  "func ID ( ) { { } return ( ( ID ( ) + true ) ) }",
  "func ID ( ) { var ID : bool var ID : bool return } func ID ( ) { var ID : bool call ID ( ( ID ) ) }",
  "func ID ( ID : bool , ID : int ) { var ID : int var ID : int ID = - ID ( ID ) }",
  "func ID ( ID : int , ID : int , ID : [ - - - ID [ - ( ( - false ) ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { { var ID : bool ID ( ) [ ( - - 123 ) ] [ ID ] = - ( ID ) if - ( - ID ) { } } } func ID ( ) { }",
  "func ID ( ) { if ID ( ) [ - ID [ 123 / ( ID ) / - ( ID ) ] ] [ ( ( false ) ) ] { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID : [ - - true * ID [ ( - false ) ] / - - - false ] int } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] bool { return false + false * true / ( ID ) - ( ( - - ( - 123 ) ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : int } func ID ( ) { var ID : int var ID : int if ( ID ) { } while - - false { } }",
  "func ID ( ) { print ( ID [ ( ( ID ) ) ] ) ID = ( ( - - false ) ) }",
  "func ID ( ID : int , ID : [ ] [ ( ( ID ( ) + ID + 123 ) ) ] [ ] [ ] int , ID : int ) { }",
  "func ID ( ) : bool { ID ( ) = - ( ID ( ) / false * true ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int while - ( true + ( ( - - ( ( ID ) ) ) ) + ID ) { } }",
  "func ID ( ) { ID [ - ID ( ( - ID ) ) ] [ ( ( ( ID ) ) ) ] = - 123 } func ID ( ) { }",
  "func ID ( ) { return } func ID ( ID : [ ] int ) { print ID ( ( ID ) ) while ID { } }",
  "func ID ( ) { { var ID : int var ID : int } }",
  "func ID ( ) : int { var ID : int if ( - ID ( ) [ ( ID ) ] [ - true ] ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - ( ID * - false + ID ( ) - ID ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : [ ] bool if ( - ( - ( ( ID ) ) ) ) { } print ( 123 ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int , ID : int ) { var ID : bool while ( ID ) { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] [ ( ( ID [ false ] ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) + true - ID * ID [ ID ] [ ID ] / ID ] int ) { }",
  "func ID ( ) { return } func ID ( ) : int { var ID : int { var ID : int var ID : int call ID ( ) while ID { } } }",
  "func ID ( ID : [ ] [ ID ( - ( 123 * false ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] [ ] bool { return } return true and ID }",
  "func ID ( ) : [ ID ( - - 123 * 123 - ( - 123 ) + ( - ( ( 123 ) ) ) ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int ) { print ( - 123 - ID ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) : [ ] [ ] [ ] bool { var ID : [ ] bool while 123 { } print ( true ) }",
  "func ID ( ID : [ ID [ - 123 * true and 123 * 123 * ( ID ) and 123 ] ] int ) { }",
  "func ID ( ) : [ ] [ ] bool { var ID : [ ID ( false / true ) ] bool } func ID ( ) { }",
  "func ID ( ) : [ ( ( - ID [ ( ( 123 ) ) ] ) ) ] int { }",
  "func ID ( ) { var ID : [ ( false and - - true / - true ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : int { var ID : bool ID ( ) [ ID ] = - true } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool return ( ID ( ID ) ) }",
  "func ID ( ID : [ ID * ID [ true + ID + true ] / ID ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : int { var ID : bool while ID [ - - ID ] { } { } }",
  "func ID ( ) { while - ID ( ID ( - 123 * ID / ID ) ) { } while ( true ) { } }",
  "func ID ( ID : bool , ID : bool ) { ID = 123 + ( 123 / ( ID ) ) - ID }",
  "func ID ( ID : [ 123 / ( - - ( ID ( ) * 123 / ID ) ) * ( ( ID ) ) ] bool ) { }",
  "func ID ( ID : [ ] int , ID : bool ) { call ID ( ID ( ID ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool { return } }",
  "func ID ( ) { var ID : [ 123 * ( ( ( ( 123 ) ) ) ) ] [ ] [ ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int while ( true + true * - 123 ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int ID ( ID ( ID [ ( ID ) ] ) ) = - false } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : [ ] int print true call ID ( ) return true }",
  "func ID ( ) : bool { var ID : bool print ID [ ID / ( true ) * ID ] [ 123 ] } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int while ( true / false / - ID [ ID ] [ ( - ID ) ] ) { } }",
  "func ID ( ID : int , ID : bool , ID : int ) : bool { var ID : int } func ID ( ID : bool , ID : int ) : bool { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var ID : [ ID ( 123 ) ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool while - ID ( ( ID ) ) { } while ( - - false ) { } }",
  "func ID ( ) : bool { var ID : int return ID ( - false < - ( ( - - ( ( - true ) ) ) ) ) }",
  "func ID ( ) { var ID : int call ID ( 123 / ( - ( - ( ( - ( ID ) ) ) ) ) / false ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID [ ID ( ID ( ) ) ] ] bool , ID : [ ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ID : int , ID : [ ] bool ) { var ID : bool if 123 / ID [ - - ( ID ) ] [ - ( ( - - ( ( ( ( 123 ) ) ) ) ) ) ] { } if false { } } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : int var ID : int { var ID : bool ID ( ) = 123 while true { } } }",
  "func ID ( ID : int , ID : int ) { var ID : bool var ID : bool ID ( ) [ ID ( ) ] = ID print - ID }",
  "func ID ( ID : int ) : bool { var ID : bool ID = false * ( ( ID ) ) * ID } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : [ false * ID ( ) [ true ] [ - false ] / - ID ] bool var ID : bool }",
  "func ID ( ) : int { call ID ( ID ( ( ID [ 123 ] [ ID ] ) ) ) }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : int var ID : [ ] bool while 123 / - ( false ) * - ID { } ID = true } func ID ( ) { }",
  "func ID ( ) { if ID [ ID [ - ( false ) ] [ false ] ] [ ( ID ) ] { } }",
  "func ID ( ID : [ true + ( - ID ( ) * true and ID and ID ) - false ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ] [ ] bool var ID : int return ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : int } func ID ( ID : int , ID : bool ) { }",
  "func ID ( ) : bool { var ID : [ ] [ ] int { var ID : [ ( ( ID ) ) ] [ ] bool var ID : [ ] [ ] int } } func ID ( ) { }",
  "func ID ( ) { ID ( ) = - ID + ( ID ( ) ) }",
  "func ID ( ) { while true / - - 123 * ID ( ) [ false * - ID ] [ false ] { } ID = 123 }",
  "func ID ( ) { var ID : bool return true * ( - true + ID [ ID ] [ - true ] ) }",
  "func ID ( ID : [ ] bool , ID : [ 123 * ( - - 123 - ( 123 ) + ( true ) ) ] [ ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int ) : int { print 123 + ( - ( ID ) ) if - true { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ] [ ] bool while ID ( ) - ID - - true { } }",
  "func ID ( ID : bool ) : int { if ID [ 123 + 123 * 123 ] { } { } }",
  "func ID ( ) { var ID : bool var ID : [ ID ( ID [ ID ] ) ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ( ( ( ID ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : bool var ID : [ 123 + - ID ( ) ] bool } func ID ( ) { }",
  "func ID ( ID : [ ID ( true * false * true + true / ( ID ) ) ] bool ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool return 123 / ID [ false ] [ false ] }",
  "func ID ( ID : bool , ID : [ - 123 - ( ( false - - ( ( true ) ) - 123 ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : bool { var ID : bool return } func ID ( ID : bool ) : int { }",
  "func ID ( ID : bool ) { print 123 + - ID [ - ID [ - ID ] [ ( ( ID ) ) ] ] [ ( ID ) ] }",
  "func ID ( ) : bool { var ID : bool var ID : bool if ( - false * ( true ) / ID ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( false - ( - ID ( ) ) ) ] int , ID : [ ] [ ] [ ] int ) { }",
  "func ID ( ) : int { var ID : [ - ID [ - - ( - - - - ( ID ) ) ] [ ID ] ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : bool var ID : int while ( - 123 ) { } { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : int call ID ( ) return ( - ( ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : bool ID ( ( ID [ ( ID ) ] ) ) = ID ID = - ID } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : int if false / ID [ ( false ) ] { } print 123 }",
  "func ID ( ) : bool { var ID : [ ] [ ] bool var ID : bool while true + ( true ) { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : [ ] bool if - ID ( ) [ true ] { } if ( true ) { } } func ID ( ) { }",
  "func ID ( ) : int { ID ( ) [ false / true + ID ( ID ) ] = ( - false ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : [ ] int , ID : bool ) { } func ID ( ID : int ) : int { }",
  "func ID ( ID : bool ) { var ID : [ 123 / - ID [ ID / ID / ID ] [ true ] ] [ ] [ ] bool var ID : [ ] bool }",
  "func ID ( ) { var ID : int var ID : bool print ID ( ) [ - ID ( ) ] } func ID ( ) { }",
  "func ID ( ) { var ID : bool if ID ( ) [ ( false * ID ) ] { } print ( ID ) } func ID ( ) { }",
  "func ID ( ) { ID [ ( ( - true / - true ) ) ] [ ( - - 123 ) ] = false if - ( ID ) { } }",
  "func ID ( ) { var ID : int var ID : bool call ID ( ) } func ID ( ) : bool { var ID : [ ( false ) ] int }",
  "func ID ( ID : [ ] [ ] [ ID ( ) [ ( - ( - ID ) ) ] [ ID ] ] int ) { }",
  "func ID ( ID : [ false * - - true / ID [ ( ( 123 ) ) ] [ 123 ] ] int ) { }",
  "func ID ( ) { print - ID ( ID [ ( true ) ] [ ( ID ) ] ) if - - - 123 { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] [ ] int while ID [ - - - - ( ( false ) ) ] { } } func ID ( ) { }",
  "func ID ( ID : [ ( ( - true * false * ( ID ) ) ) ] bool ) { }",
  "func ID ( ) : int { if ID ( ( ( ID ) ) ) { } while ( ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] [ 123 * ( false * ID ) ] bool ) { }",
  "func ID ( ID : [ ( ID ( ) [ ( - ( ( ( - ( - - ID ) ) ) ) ) ] [ ( - ( ( true ) ) ) ] ) ] int ) { }",
  "func ID ( ID : bool ) : int { var ID : bool { var ID : int var ID : int call ID ( ID ) while 123 { } } ID = - ID }",
  "func ID ( ) { var ID : [ ] [ ID ( ) [ ( ( 123 ) ) ] ] bool }",
  "func ID ( ) : [ ] bool { var ID : [ ( ID ( ) * ( - 123 ) / 123 ) ] [ ] [ ] [ ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - ID [ - - true == 123 ] ] int ) { }",
  "func ID ( ) { return ID ( ) [ ( ( ID ) ) ] }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : [ false * ID and ID ( ) ] bool { }",
  "func ID ( ID : int , ID : bool , ID : int ) : [ ID - ID [ - ID ] [ ID ] ] bool { }",
  "func ID ( ) { var ID : [ ] int var ID : bool return } func ID ( ID : bool , ID : [ ID ] bool ) { }",
  "func ID ( ) : int { while ( - - ID ( ID [ ID ] [ true ] ) ) { } }",
  "func ID ( ) : bool { var ID : [ ID [ true * 123 / ID [ - 123 ] ] [ true ] ] [ ] [ ] [ ] [ ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int ID = - ID [ true * - ( ( 123 ) ) ] [ ID ] }",
  "func ID ( ID : [ ( - ( ID [ ( true ) ] ) ) ] int ) { }",
  "func ID ( ) : [ false - ( ID ( ID [ ( 123 ) ] [ false ] ) ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { var ID : bool if 123 * - - ID ( ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ( ( ID ( ID ) ) ) ] int var ID : bool }",
  "func ID ( ) : bool { var ID : [ - - - ( ID and ( ID ) ) ] int }",
  "func ID ( ID : bool , ID : [ ] int , ID : bool ) : bool { var ID : bool print - true * ID { } }",
  "func ID ( ) : int { var ID : [ - ID ( true / ID [ - ( false ) ] [ - - ID ] ) ] int }",
  "func ID ( ID : int ) { var ID : [ ] int return 123 * - false / ( true ) }",
  "func ID ( ) { var ID : [ ID ( - ( true * true / false ) ) ] int var ID : int }",
  "func ID ( ID : bool , ID : [ ] int , ID : bool ) { var ID : int var ID : bool return }",
  "func ID ( ) { var ID : bool var ID : [ 123 and ( ( true ) ) ] bool }",
  "func ID ( ID : bool , ID : bool ) : [ ] bool { } func ID ( ) : bool { var ID : [ ] [ ] bool }",
  "func ID ( ) { var ID : int var ID : [ ] int if ID ( 123 + ( ID ) ) { } call ID ( ) }",
  "func ID ( ) { ID = ( - ( - - 123 / false / false ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int return }",
  "func ID ( ) { var ID : int var ID : [ ] [ ] int if - false * ( true ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int while ( ( false - - ( ID ) ) ) { } { } }",
  "func ID ( ID : bool , ID : bool ) : int { ID [ 123 / - ( ( - ID ) ) * ( ( ID ) ) ] = - ( false ) }",
  "func ID ( ) { var ID : [ ] int var ID : bool }",
  "func ID ( ID : [ ] [ ] bool , ID : bool , ID : bool ) : bool { print ID ( - 123 ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID ( - - ID ( ) and 123 and - ID ) ] int ) { }",
  "func ID ( ) : int { var ID : bool var ID : [ ] [ ID [ true and ( false ) and - ID ] ] [ ] bool }",
  "func ID ( ) : [ ] [ ] bool { var ID : [ ] int { var ID : bool { if ID { } } if false { } } { } } func ID ( ) { }",
  "func ID ( ID : [ ( ( - ID [ false / ID * false ] [ ( - - ID ) ] ) ) ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] bool ) { return true / ID [ ID ] [ false ] }",
  "func ID ( ID : [ - ( ID [ ID [ ID ] [ false ] ] ) ] int ) { }",
  "func ID ( ) : int { var ID : int var ID : bool if - ( ID ( ID ) ) { } }",
  "func ID ( ) { var ID : bool { var ID : int return } ID [ ID ( ) [ - ( ID ) ] ] = false }",
  "func ID ( ) { var ID : int var ID : [ ( - ID ( ) [ ( ( - 123 ) ) ] ) ] [ ] bool }",
  "func ID ( ID : [ false * ID ( ) [ true ] [ true ] / - ID ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : int var ID : [ ] int call ID ( ) if ( 123 ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { var ID : bool var ID : int if ID ( 123 ) { } { } }",
  "func ID ( ID : [ ID ( ) [ - ID ( - ( ( true ) ) ) ] ] [ ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : [ false and ID [ ID ] ] int { }",
  "func ID ( ) : bool { print - ID + false / 123 * - ID ( ) - ( ID ) { } }",
  "func ID ( ID : bool ) : [ ] bool { var ID : bool var ID : [ ] [ ] [ ] bool call ID ( ) }",
  "func ID ( ID : [ ( ID ( ) [ 123 * 123 / - ID ] [ ( ( ID ) ) ] ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : bool var ID : int ID [ false ] = ( - - ID ) }",
  "func ID ( ID : [ ] [ ID ( ) / ( - true - ID + - false ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { ID ( ) [ ID [ ID - ID ] ] = ID }",
  "func ID ( ID : [ 123 * ( false + true + ( ( - ( ( ( true ) ) ) ) ) ) / - true ] [ ] int ) { }",
  "func ID ( ) { var ID : bool var ID : [ ] [ - ( ( ( 123 ) ) ) ] int }",
  "func ID ( ) { var ID : [ ] int return }",
  "func ID ( ID : bool , ID : int ) { { call ID ( ) if ID [ false ] { } } print true }",
  "func ID ( ) { var ID : int var ID : int return 123 / - ID * 123 - ( false ) - ID } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool }",
  "func ID ( ID : [ ] int , ID : bool ) { ID ( true - 123 * ID + - - ( ( ID ) ) ) = ID call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] [ ] int ) { var ID : [ ] [ ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool return ID [ ID [ 123 ] ] [ ID ] }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var ID : [ true * ID == false ] [ ] bool var ID : [ ] [ ] bool }",
  "func ID ( ID : [ ] bool , ID : int ) { var ID : int ID ( ) [ false / 123 / true ] = true if - - - true { } }",
  "func ID ( ) : bool { } func ID ( ID : [ ID ( ( false ) ) ] [ ] bool ) { }",
  "func ID ( ID : int ) : [ ( true * false * ID [ ( ( - ID ) ) ] ) ] bool { }",
  "func ID ( ) { var ID : [ ] [ ] [ ( false - true / true + ( ( - - ID ) ) ) ] int }",
  "func ID ( ID : bool ) : [ ( 123 / - ID [ 123 * 123 / - ID ] [ ID ] ) ] bool { } func ID ( ) { }",
  "func ID ( ) { while ID ( ID [ ID / ( ( - ( ( - ID ) ) ) ) * ID ] [ 123 ] ) { } if true { } }",
  "func ID ( ID : [ ] int ) : int { var ID : bool while true / ( ( 123 ) ) { } }",
  "func ID ( ) : bool { call ID ( ( - ID ( - - 123 ) ) ) }",
  "func ID ( ) { print ( - 123 and - true / ID and false ) }",
  "func ID ( ) { return ( false * - ID ) - ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : bool { call ID ( ID * - true + - ( true ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ - 123 - - true + ( ( ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool } func ID ( ID : int ) : [ ( ID / true ) ] bool { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : bool { var ID : bool print true * ID ( ) * - ( - true ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool return false / ID - ( - ID ) - ID }",
  "func ID ( ID : int , ID : [ ] [ ] [ - ID [ 123 and ID ] ] [ ] bool ) { }",
  "func ID ( ID : [ ] bool , ID : [ true and ID ( ) [ - - ID ] [ ( 123 ) ] and ( 123 ) ] [ ] int , ID : bool ) { }",
  "func ID ( ) : bool { var ID : [ ] [ ] int var ID : [ ] bool }",
  "func ID ( ) : int { var ID : [ ] [ ( ID ( 123 ) ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ) : [ - ID ( ) [ ID * ID / true and ID ] ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : [ ] int if 123 and ( true ) { } while ID { } }",
  "func ID ( ) { { if ( - ID ( - ID ) ) { } while true { } } { } }",
  "func ID ( ) : bool { return - true * ID [ 123 + ID ( ) ] [ false ] * 123 } func ID ( ) { }",
  "func ID ( ID : int , ID : [ true - - - ( - - ( - ID ) ) + - ID ] int ) { }",
  "func ID ( ID : [ ID / false * 123 + ( ( ( ID ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool var ID : [ 123 and false - ID - ID and 123 ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool if ID [ 123 != ID ] { } { } } func ID ( ) { }",
  "func ID ( ) : [ ( ( 123 > ( ID ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : int var ID : bool if - ( - ( ( - ( ID ) ) ) ) { } }",
  "func ID ( ) { return ( ID [ ID + true * true - ( - ID ) ] [ - ( ID ) ] ) } func ID ( ) { }",
  "func ID ( ) : bool { } func ID ( ID : int ) { if ID [ 123 ] [ ( false ) ] { } }",
  "func ID ( ID : [ ] [ ] [ ] [ - - ID ( ) [ - ID ] [ - true ] ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] int { var ID : bool return ID [ ( ID ) ] [ ID ] }",
  "func ID ( ) : bool { { return ( ( ( ( ( true ) ) ) ) ) } if - false { } } func ID ( ) { }",
  "func ID ( ) { if - - ( ( false * ID ( ( - ( ( ( ID ) ) ) ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) { if false / - - ( ( false ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ID [ - ID ( ) [ ID ] ] ] int }",
  "func ID ( ) { var ID : [ ] [ ] int var ID : [ ] [ ( - ID ) ] bool } func ID ( ) { }",
  "func ID ( ) : [ 123 * - 123 + 123 * ( ( true ) ) * 123 ] int { }",
  "func ID ( ID : bool , ID : int , ID : int ) : [ false * false / false - ( - ( true ) ) + ( ID ) ] bool { } func ID ( ) { }",
  "func ID ( ID : [ true * ( false / ID / ID [ false ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ID ( ID [ ( false * ( - ID ) / ( false ) ) ] [ 123 ] ) ] int { }",
  "func ID ( ID : int , ID : [ ID ( - ID ( ) [ ID ] ) ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) : [ true / ( ID ( - ( ID ) ) ) * ID ] int { }",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) { var ID : int var ID : bool } func ID ( ) : int { }",
  "func ID ( ID : int ) : bool { if ID ( ) [ ID [ false ] ] { } print - - ( - ID ) }",
  "func ID ( ID : int , ID : bool , ID : [ - - true / ( true * true * ( false ) ) / 123 ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : [ - - ID ( ) [ false - - ID + false ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) : bool { return ID / ID and ID / ID and - - true } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ 123 * ID [ ID ( ) [ ( false ) ] [ ( ( ( - ID ) ) ) ] ] ] bool , ID : [ ] int ) { }",
  "func ID ( ID : int , ID : [ ID / false * - 123 + ID [ ( false ) ] ] [ ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : int ) : bool { while true - ID [ true ] - ID { } { } }",
  "func ID ( ID : [ ( false / - - 123 or ( - - ID ) or ( ( false ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { call ID ( ) return ( - 123 ) }",
  "func ID ( ) : [ 123 / ID [ ( false * 123 * ( ID ) ) ] [ - ( ( - 123 ) ) ] / - false ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ( - ( ID [ - false ] [ ( true ) ] ) ) ] bool , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) : int { ID = ( - false - ( - ID ) + ID ) while - ( true ) { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int return } func ID ( ID : [ ] int ) { while ( - ( - - ID ) ) { } while ( true ) { } }",
  "func ID ( ID : [ ( ( 123 * - ID [ - true ] ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : [ - - - ( ( true * ( - - ID ) / ( - ( true ) ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { } func ID ( ID : [ 123 + ID ( ) ] int ) { }",
  "func ID ( ID : bool , ID : [ ] int ) : [ - ( ID / 123 + 123 + true ) ] int { }",
  "func ID ( ID : int ) { var ID : [ ID [ ( ID ) ] ] [ ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ 123 != ( ID ( 123 ) ) ] bool , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ 123 * ( ( ( ID [ 123 ] [ 123 ] ) ) ) / ID ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { if - true * ID [ - - 123 * - false / - true ] [ false ] { } }",
  "func ID ( ID : bool ) : [ ID ( ) [ 123 * ID ( ) [ 123 ] / - - ( ( - false ) ) ] ] bool { }",
  "func ID ( ID : int , ID : int ) { var ID : int return ( - ID ( ) * false ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : int { var ID : bool var ID : [ ] bool while true / ( - - ID ) { } }",
  "func ID ( ) : bool { return } func ID ( ID : bool , ID : int , ID : bool ) { var ID : bool var ID : [ ] bool }",
  "func ID ( ID : bool , ID : int , ID : int ) : [ ] bool { var ID : int } func ID ( ID : [ ID ] int ) { }",
  "func ID ( ) { print ( ( - - ( - - 123 ) ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] [ ] [ true / false * ID and ID and ID ] [ ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : int } func ID ( ) : [ ] int { ID = ( false ) { } }",
  "func ID ( ID : bool , ID : int ) { { var ID : [ ] [ ] bool print ( true ) { } } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int call ID ( ) } func ID ( ID : int ) { if - ID { } call ID ( ) }",
  "func ID ( ) : bool { print ID [ - ( ( - ( true ) ) ) ] }",
  "func ID ( ID : [ ( ( false * - ID ( true ) * ( ID ) ) ) ] bool ) { }",
  "func ID ( ) : int { var ID : [ ] bool call ID ( ) if - ( ( ID ) ) { } }",
  "func ID ( ) : bool { while true / - - ( ID [ ID ] [ true ] ) / ID { } { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) : [ ] [ false < ( ( ID ) ) ] int { }",
  "func ID ( ) { return ( false * ID [ ( 123 ) ] [ ( ( ( ID ) ) ) ] / ( ID ) ) }",
  "func ID ( ) : bool { while ( - - ( false + ID ) ) { } print - ( ( ID ) ) }",
  "func ID ( ) { var ID : bool ID = ID ( ) * - - - false - ID }",
  "func ID ( ) { call ID ( ID * 123 - false != ID + - - - ( 123 ) + ID ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ false - - ID [ - ( ( false ) ) ] - ( ( true ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) { while - true / false / ID ( ) [ true ] [ ID ] { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ ID ( ( - ( true ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int var ID : [ ] [ ] int { var ID : bool var ID : [ ] [ ] [ ] [ ] [ ] [ ] [ ] bool } print ( ( false ) ) }",
  "func ID ( ) : [ ] bool { var ID : [ ] bool var ID : int return false * false / - false } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : bool , ID : int ) : int { var ID : [ ] bool var ID : int if ID { } } func ID ( ) { }",
  "func ID ( ID : [ ID - ID ( ) * ID ( ) [ - ( 123 ) ] [ 123 ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool } func ID ( ) { }",
  "func ID ( ) : bool { call ID ( ) return } func ID ( ) : int { var ID : [ ] bool var ID : [ ] int }",
  "func ID ( ID : [ ID ( ID [ - ID [ 123 ] ] [ ID ] ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : int call ID ( ) ID [ true / ID ] [ 123 ] = - ID }",
  "func ID ( ) { var ID : int var ID : bool while ( ( ID ( ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ false - ( - - false != ID ( false ) ) ] int ) { }",
  "func ID ( ) { var ID : int var ID : bool print ( - true ) / ID } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool if ( ID / ID [ true ] ) { } }",
  "func ID ( ) : int { var ID : bool var ID : [ ] int call ID ( ID ( ) [ ( ( - ( false ) ) ) ] [ true ] ) call ID ( ) }",
  "func ID ( ) { var ID : [ ] [ ] int var ID : bool { call ID ( 123 * ID ) } } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : [ ] bool var ID : [ - false * - ( ID ) ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : bool { var ID : [ - ID [ false ] [ true ] ] bool var ID : [ ] int }",
  "func ID ( ) : [ ] bool { var ID : int call ID ( - - - ID ( ID ) ) { } }",
  "func ID ( ID : int , ID : bool , ID : int ) : int { ID ( - ID [ ( ID ) ] [ ( ( true ) ) ] ) = ID call ID ( ) }",
  "func ID ( ) { var ID : int call ID ( ) } func ID ( ) : [ ID ( - ( 123 ) ) ] int { }",
  "func ID ( ) { var ID : bool if ( ( - - ID + ( ID ) ) ) { } ID = false } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : [ ] int if false - ID [ ( ( 123 ) ) ] [ ID ] { } { } } func ID ( ) { }",
  "func ID ( ID : bool ) { if ID [ ( ID [ - ( ID ) ] ) ] { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ 123 * ( - false + ID ) ] bool var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : int ID [ - ID ( ( ID ) ) ] [ - ( - - - 123 ) ] = ( true ) }",
  "func ID ( ID : int , ID : int , ID : bool ) { if - ( ID ( false ) ) { } }",
  "func ID ( ) : bool { if ( ( ID [ ID ] [ - ID ] ) ) { } } func ID ( ) { }",
  "func ID ( ) { print ( ID [ true / ID [ true ] ] ) } func ID ( ) { }",
  "func ID ( ID : [ - true * - true + ( ID [ 123 ] ) - 123 ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int call ID ( ) while ID ( ) [ ( ( ID ) ) ] [ ID ] { } }",
  "func ID ( ID : bool ) : int { var ID : int print 123 <= - false and ID while ID { } } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ - ID / ID [ false ] ] [ ( ID ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( true * ( ( - - ID ) ) ) ] int ) { }",
  "func ID ( ID : bool , ID : int ) : int { if ( - ( - ID ) ) { } { } }",
  "func ID ( ID : [ true - ( ( - ( true ) ) ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { while true < ( ( false and ( ID ) and ID ) ) { } }",
  "func ID ( ) : bool { var ID : bool ID ( ) [ - true * 123 / ( 123 ) ] = true } func ID ( ) { }",
  "func ID ( ID : [ ( ID ( ID * ( ID ) / ID ) ) ] [ ] bool ) { }",
  "func ID ( ID : bool ) { var ID : [ ] bool if - false * ( ( true ) ) / ( ID ) { } } func ID ( ) { }",
  "func ID ( ) : [ 123 / - true and - - ID ( ) [ - ID ] [ ID ] and ( - ID ) ] bool { }",
  "func ID ( ID : bool , ID : [ ] int , ID : [ ( ID ( ) [ - ( 123 ) ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ID ( ( true * ( ID ) * ( ( ( - ( ID ) ) ) ) ) ) ] [ ] int var ID : [ ] [ ] int }",
  "func ID ( ID : [ ] int ) { } func ID ( ) : int { var ID : [ ] [ - 123 ] bool var ID : [ ] bool }",
  "func ID ( ID : [ ] bool , ID : int , ID : [ ] [ ] int ) { var ID : int } func ID ( ID : [ ] [ ] int ) { }",
  "func ID ( ID : bool ) : bool { var ID : int print 123 * ( ID [ ( false ) ] ) }",
  "func ID ( ) : [ ( true * ID ( ( - false ) ) ) ] int { }",
  "func ID ( ID : [ ] bool ) { var ID : bool var ID : int ID = ID ( ) [ ( true ) ] call ID ( ) }",
  "func ID ( ID : int , ID : [ ID [ ( - - true / 123 ) ] ] int ) { }",
  "func ID ( ID : int ) { var ID : bool var ID : int call ID ( ) ID [ ( - ( 123 ) ) ] = false } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool ) : [ ] bool { var ID : int var ID : [ ] bool call ID ( ) if false { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] [ ] bool while ( false / false * true ) { } while ( true ) { } } func ID ( ) { }",
  "func ID ( ID : [ false / - ID ( ) + ID ( true + ( true ) ) ] [ ] bool ) { }",
  "func ID ( ) : [ ] int { var ID : [ ] bool while true / - - false - false + ID { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : [ ] bool } func ID ( ) { var ID : [ ] int }",
  "func ID ( ) { var ID : bool var ID : int call ID ( ( - 123 * - - false ) ) }",
  "func ID ( ID : int , ID : bool , ID : bool ) : int { print 123 * - true + ID }",
  "func ID ( ID : [ ( ( - ID [ true - - ( true ) + ID ] [ - ID ] ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool while ID ( ( false / - - ID ) ) { } }",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) { var ID : [ ] [ - - - - false ] bool var ID : bool }",
  "func ID ( ID : [ - ( - ID / - 123 * ID [ true ] ) ] bool ) { }",
  "func ID ( ) { { call ID ( ) } ID ( false * ID ( ) [ ID ] [ ( false ) ] / ID ) = ( ID ) } func ID ( ) { }",
  "func ID ( ) : int { ID = ID ( ID ( ) + false - ID ) if true { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : bool { var ID : [ ] [ ] bool var ID : [ ] int if false { } } func ID ( ) { }",
  "func ID ( ID : [ - ID ( true * ID [ ( ID ) ] [ ID ] * - ( false ) ) ] [ ] int ) { }",
  "func ID ( ) : [ ] [ 123 - ( ( ID [ ID ] [ ID ] ) ) + - ID ] int { }",
  "func ID ( ) : [ ] [ ] bool { var ID : int var ID : [ ] int return 123 / ID / false } func ID ( ) { }",
  "func ID ( ) { ID ( ( false + true >= - ID ) ) = ID { } }",
  "func ID ( ID : int , ID : [ ] [ ] bool , ID : int ) { var ID : bool print ID ( ) }",
  "func ID ( ID : int , ID : bool , ID : [ ID [ true - ( - 123 ) + ( 123 ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) { } func ID ( ID : [ ID ( ) [ ID ( ( - true ) ) ] [ ( ID ) ] ] [ ] int ) { }",
  "func ID ( ID : [ 123 * - - 123 + ( ( true ) ) + 123 ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ID [ 123 * - false - ( 123 ) ] ] [ ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : [ - ID ( ) [ 123 / ID ( ) [ ( 123 ) ] / - ( ( - ID ) ) ] ] [ ] bool ) { }",
  "func ID ( ) { while ID [ true * - - ( - ID ) ] [ ID ] { } }",
  "func ID ( ) { { var ID : [ ( ( true * ID ) ) ] int var ID : [ ] [ ] bool } print - 123 } func ID ( ) { }",
  "func ID ( ID : [ - ( 123 or 123 + - false - ( - - - ( ( ( ID ) ) ) ) or false ) ] int ) { }",
  "func ID ( ID : int ) : [ ID [ - ( - ID [ - ( false ) ] ) ] [ - ( true ) ] ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( ( true * ID or - ID or ID ) ) ] [ ] bool , ID : int ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ID ( - - ( ( ( - false ) ) ) ) ] [ ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ) : [ ID ( ) [ ID ( ) [ ID * - - - true / ( - ID ) ] [ true ] ] ] bool { }",
  "func ID ( ID : int ) : int { var ID : bool { var ID : [ ] bool while false - - ( ( ID ) ) { } } if 123 { } }",
  "func ID ( ID : int , ID : bool , ID : [ ( ID ( false + - ID ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { while ID [ true / ID * - ( 123 ) ] { } print ( false ) }",
  "func ID ( ) { var ID : bool call ID ( - ( ID == ID ) ) } func ID ( ) { }",
  "func ID ( ) { call ID ( ) return ID ( ) [ true and ID ] } func ID ( ) { }",
  "func ID ( ) : [ ] bool { call ID ( ) call ID ( true , true , - - false ) }",
  "func ID ( ) { var ID : int var ID : int if ( ( - ( - ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ] int ) { var ID : bool var ID : [ ] bool ID ( ) = ID { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ - ( - ( ( ( true ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ( - ( ID [ ID ] ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : int { var ID : int var ID : int } func ID ( ) : [ ] int { }",
  "func ID ( ) { return } func ID ( ID : int , ID : int ) : [ ] int { while 123 { } call ID ( ) }",
  "func ID ( ID : int , ID : int , ID : [ ( true * - - true * - - ( false ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ ] int , ID : int ) : int { var ID : bool return ID }",
  "func ID ( ID : [ ] int , ID : bool , ID : [ - 123 * ( 123 / ID ) ] int ) { }",
  "func ID ( ) : int { var ID : [ ] bool { return } if 123 * - ( - ID ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int } func ID ( ID : bool ) { var ID : [ - false ] bool }",
  "func ID ( ) { var ID : bool { { var ID : [ - 123 / ( - - ( ( - false ) ) ) ] [ ] int } } }",
  "func ID ( ID : int , ID : bool ) { ID ( ) [ - - - 123 and ID ] = false }",
  "func ID ( ) { ID ( - true - ID [ true * false ] [ - ID ] + - 123 ) = 123 while ( false ) { } }",
  "func ID ( ) : int { var ID : [ - ( ( false > ID ) ) ] [ ] [ ] int var ID : [ ] bool }",
  "func ID ( ) : [ ] int { var ID : [ ] int { } call ID ( ( false ) ) } func ID ( ) { }",
  "func ID ( ) { call ID ( true / - - 123 / - ( ID [ ID ] [ ID ] ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool while ID ( ) [ false * ( false ) / ( ( ID ) ) ] [ false ] { } if - ( ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : bool var ID : [ 123 / ( - - - ( 123 ) ) * ( true ) ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : [ ] bool }",
  "func ID ( ID : int , ID : [ ] [ - - - - 123 / false and false and - ( ( 123 ) ) ] [ ] int , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( ) if true - false <= true or - - ( ( ( false ) ) ) { } }",
  "func ID ( ID : int , ID : int , ID : int ) { call ID ( ) } func ID ( ) { var ID : int var ID : bool }",
  "func ID ( ID : bool , ID : [ ID ( ID ( ) / - ID ( ) * - ( ID ) ) ] int , ID : [ ] int ) { }",
  "func ID ( ID : int , ID : [ ] [ ] bool , ID : [ false - - ID ( - ID ) + true ] [ ] int ) { }",
  "func ID ( ) : int { while ID [ - 123 * ID [ - 123 ] / ID ] { } }",
  "func ID ( ) : [ ] bool { return ID ( ) [ - ( ID ) ] [ ( ( ID ) ) ] } func ID ( ) { }",
  "func ID ( ID : [ ( - - ID ( ID ( ) [ ( ( false ) ) ] ) ) ] int ) { }",
  "func ID ( ID : bool ) : int { var ID : bool return ( 123 / false / ( true ) ) }",
  "func ID ( ) { var ID : [ ] int var ID : [ ] bool if ID [ ( - ( ( - ID ) ) ) ] { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) : [ false > - true / false and ( ID ) and ID ] [ ] int { }",
  "func ID ( ID : int , ID : [ ] bool , ID : int ) : [ ] int { while true * ID { } ID = ID }",
  "func ID ( ID : [ ] int , ID : int ) { var ID : int var ID : [ ( false ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : bool ) : int { while 123 - ID ( - - ( ( ( false ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ) { if ( ( ID ( ) [ 123 ] ) ) { } ID = false }",
  "func ID ( ) : [ ] int { var ID : int var ID : bool }",
  "func ID ( ) : bool { var ID : [ ( ( 123 / - ID * ID ) ) ] [ ] [ ] [ ] bool var ID : [ ] [ ] [ ] int }",
  "func ID ( ) { var ID : [ ( 123 * 123 - ( ( - ( - ID ) ) ) ) ] [ ] [ ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) { ID [ - ID * ID [ false / ( false ) ] [ - true ] ] = 123 }",
  "func ID ( ) : [ ] [ ID [ ID ( ( - false ) ) ] ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - - false and 123 * ID * - true and true ] int ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : int }",
  "func ID ( ID : bool , ID : int ) { var ID : int var ID : bool } func ID ( ) : int { }",
  "func ID ( ID : int ) : int { var ID : bool { var ID : bool return ID ( ( false ) ) } } func ID ( ) { }",
  "func ID ( ) { } func ID ( ) { var ID : bool return - true / 123 / - - - ID }",
  "func ID ( ID : int , ID : bool ) : int { var ID : int { var ID : int } } func ID ( ) { }",
  "func ID ( ) : bool { { var ID : bool var ID : int return - - 123 / - ID } } func ID ( ) { }",
  "func ID ( ) { call ID ( ID * - ( - - - - - - ID ) * ID ) { } }",
  "func ID ( ID : int , ID : bool ) { var ID : bool { var ID : bool while false / - false { } ID = ( ID ) } { } } func ID ( ) { }",
  "func ID ( ID : int ) { ID ( ( 123 == 123 * - ID / - ID ) ) = ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : bool , ID : bool ) : [ - ( ( - true ) ) ] [ ] bool { }",
  "func ID ( ) { var ID : bool { return ID [ ID [ ID ] [ true ] ] [ ID ] } }",
  "func ID ( ) : bool { var ID : int { var ID : [ ] int return } return ( ( - ID ) ) }",
  "func ID ( ID : bool ) : int { var ID : bool var ID : int { var ID : [ ] int call ID ( ) call ID ( ) } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int print - true / - ID ( ) [ ( ( - - ID ) ) ] * 123 }",
  "func ID ( ) : [ ] [ 123 + true / false / - false - - ( - ( ID ) ) ] bool { }",
  "func ID ( ) : bool { var ID : [ ] [ ] bool return - - false - - - false } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int call ID ( false != ( - ID ) ) print true }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : [ - ( false + ID + ( ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ID : bool { ID [ - ID ] = ID ID = - ( false ) } } func ID ( ) { }",
  "func ID ( ID : [ ID - ID ( ) [ ( - false ) ] [ false ] ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ID ( ) [ ( ( 123 / true * true ) ) ] ] int { } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : int return ID [ - ID [ ID ] [ ( ( - - ( - ID ) ) ) ] ] [ ( - - ( false ) ) ] } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] int ) : int { var ID : [ ( true ) ] bool var ID : [ ] int }",
  "func ID ( ID : [ ID ( 123 / - ID [ - ( ( true ) ) ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { if ID / - ( 123 / ID [ 123 ] ) { } { } }",
  "func ID ( ID : [ - 123 * ID ] [ ] bool , ID : int ) { return true } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int return } func ID ( ) { var ID : [ - ( 123 ) ] [ ] bool var ID : [ ] bool }",
  "func ID ( ) { return false * - ID [ 123 - ID ( ) ] }",
  "func ID ( ID : int , ID : int ) : bool { { if ( ID ( ) ) { } } }",
  "func ID ( ) : [ ] [ ( - true / - true / ( ID ) ) ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ID ( ) * ID ( ( ID ) ) / ID ] int } func ID ( ) { }",
  "func ID ( ) { var ID : bool return ( true / - false / - 123 <= ( ( ( true ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : [ - 123 / - ( 123 * ( ID ) / true ) ] bool ) { }",
  "func ID ( ) : int { var ID : int var ID : bool print ( ID ( - ( - - ( - - true ) ) ) ) print - - ID }",
  "func ID ( ID : [ ] bool , ID : [ ( 123 * ID ( ( true ) ) / false ) ] bool , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID ( ID ( ) or true or - 123 ) ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : bool { call ID ( 123 + ID ( ( true ) ) ) while false { } } func ID ( ) { }",
  "func ID ( ) : [ - ID ( true / ( - ID ( ) ) / 123 ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : bool return true / ID ( - - ( false ) ) / - - ( ( ID ) ) }",
  "func ID ( ) { var ID : int ID = - false + false > false or - - - ( ( ( - ID ) ) ) or true call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool var ID : int print - - true / ( ID ) while ( ( ( ( ( - - ID ) ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ) : [ - true / ID [ ( true + - true ) ] [ ID ] ] int { }",
  "func ID ( ) { var ID : int var ID : [ ] [ ] [ false * - - ( 123 ) ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ true / 123 / ( ID ( ) ) ] int , ID : int ) { }",
  "func ID ( ID : [ ( true * ID - 123 + ID [ true ] ) ] [ ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ true * ID [ 123 * ( ( - - false ) ) ] ] int ) { }",
  "func ID ( ) { } func ID ( ID : bool , ID : int , ID : [ ] int ) { var ID : [ true ] [ ] int var ID : bool }",
  "func ID ( ) : [ ] [ ] [ - ID ( - - 123 * false ) ] [ ] int { }",
  "func ID ( ID : [ ] [ - false / ( ID ( ) [ ( ID ) ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ] int var ID : [ ] bool while ID ( ) - - ( ID ) { } }",
  "func ID ( ID : int , ID : [ false + ID [ ( - false ) ] - - ( - ( ( ID ) ) ) ] [ ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : int ) { while - - ( false * ID ( ) ) { } }",
  "func ID ( ) { var ID : [ ID ( ) [ - - - - false / ID ] [ - - - ( true ) ] ] [ ] [ ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : int ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ] int ) { } func ID ( ) : bool { ID = - - ID if ( ID ) { } }",
  "func ID ( ) { while true * ID ( ID ( - - true ) ) { } print ( false ) }",
  "func ID ( ID : [ ] [ ] [ ] [ 123 - 123 + ( ( - - 123 ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ID ( ID ( ID ) ) ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int { var ID : int while ID ( ID ) { } while true { } } } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : bool var ID : [ true + ( ( - true ) ) ] bool }",
  "func ID ( ) : [ ] [ - - ID ( ID [ - true ] ) ] int { }",
  "func ID ( ID : [ ] int , ID : int , ID : bool ) { var ID : int ID [ ID ] = ( - ( ( ( ( false ) ) ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool call ID ( ) } func ID ( ) : [ 123 / ( - ID ) ] int { }",
  "func ID ( ID : bool , ID : int , ID : [ ] bool ) { var ID : int return ( ID ) }",
  "func ID ( ) { if ID ( 123 / - 123 * - ID [ 123 ] [ true ] ) { } }",
  "func ID ( ) { print false <= ID ( ) [ - true * - ID ] }",
  "func ID ( ) { var ID : int var ID : int if - - 123 + ID ( ) [ ( ( ( ( - 123 ) ) ) ) ] + ID { } ID = 123 }",
  "func ID ( ) { var ID : bool call ID ( ) ID [ - ( ( ID ) ) ] [ false ] = - - ID }",
  "func ID ( ID : int , ID : [ - ( false + ID ( true ) - - - 123 ) ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : int while 123 * - ( - false ) / ( - ( false ) ) { } call ID ( ) }",
  "func ID ( ) { if false * ID ( - - ID ( ( ID ) ) ) * - ID { } } func ID ( ) { }",
  "func ID ( ID : int ) { while - ( ( true * false and - - ( 123 ) and - - - 123 ) ) { } } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : bool var ID : int ID [ false + - ID + ID ] = ID ID = ID }",
  "func ID ( ) { var ID : [ ] int if ID ( ) [ - 123 + 123 ] [ - ( ID ) ] { } ID = - - - 123 }",
  "func ID ( ID : int ) { var ID : bool } func ID ( ) : int { while true / - - ( false ) * ( ID ) { } if ( ( - ( false ) ) ) { } }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : [ ( ID ( - true ) ) ] [ ] bool }",
  "func ID ( ID : [ ] [ 123 - - ID / ( false * ID ) / true + true ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool while 123 * - true / false + ( - - - - ID ) - false { } while - 123 { } } func ID ( ) { }",
  "func ID ( ) { var ID : int { var ID : int { call ID ( true / false ) while - ID { } } } while 123 { } }",
  "func ID ( ID : bool ) { var ID : [ - true / ID ( ( ( true ) ) ) * - ( - ID ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : bool ) { var ID : int var ID : int if ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int var ID : [ ID [ ( ID ) ] [ - ( ( ID ) ) ] ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID < ID ( true and ID ) ] int , ID : [ ] int ) { }",
  "func ID ( ) { var ID : bool } func ID ( ID : int ) : int { var ID : [ ID ( ) ] bool }",
  "func ID ( ) : [ - ID [ ( false / - ( ( true ) ) ) ] [ - - ( ID ) ] ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : bool { var ID : bool var ID : int print ( - false ) if 123 { } } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool ) { { print true / - false * - ID } while ( false ) { } } func ID ( ) { }",
  "func ID ( ID : [ false * false < - true / ( - 123 * ID ) ] bool ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : [ ] int { var ID : bool var ID : bool { var ID : bool var ID : bool } { } }",
  "func ID ( ) : [ ] int { var ID : bool return } func ID ( ID : int ) : int { var ID : [ ( - true ) ] [ ] bool }",
  "func ID ( ) : int { var ID : int } func ID ( ) { var ID : [ ] [ false / - true * false ] int }",
  "func ID ( ) : [ ] int { var ID : int print - 123 / true - ( ( ID ) ) + true print - true } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool call ID ( ) { var ID : bool { var ID : [ ] int if ( 123 ) { } if ( ( ID ) ) { } } } }",
  "func ID ( ) : int { var ID : int var ID : bool return - - - - - - - ID [ ID ] } func ID ( ) { }",
  "func ID ( ) : [ ID ( ) [ - - ID ( ) [ - - ( - ID ) ] ] ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ] int { while - - ( false / - ( false ) * ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ ID [ ( ID ( ) ) ] [ - 123 ] ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { } func ID ( ID : int , ID : bool , ID : bool ) : bool { var ID : int var ID : [ ] [ ] int }",
  "func ID ( ID : int , ID : [ ( ID ( ) and 123 / 123 ) ] bool , ID : bool ) { }",
  "func ID ( ) { if - ID [ ( - ID ( ) [ ID ] [ ID ] ) ] [ ID ] { } call ID ( ) }",
  "func ID ( ) : bool { var ID : [ true * - ( ( false ) ) * ( - 123 ) ] [ ] [ ] [ ] [ ] [ ] bool var ID : bool }",
  "func ID ( ) : [ ( 123 * true and ( true / - ( ID ) ) ) ] [ ] bool { }",
  "func ID ( ID : bool , ID : int , ID : [ ] int ) : bool { ID ( ) [ 123 ] = 123 if ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : int while ( ( - false * ( ID ) * true ) ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { { var ID : [ ] bool call ID ( ) call ID ( ID ) } }",
  "func ID ( ID : int , ID : bool ) { ID [ - ( 123 - 123 - - 123 ) ] [ true ] = ID } func ID ( ) { }",
  "func ID ( ID : [ - - - ID * ( - ID [ ( ( - - 123 ) ) ] [ ID ] ) ] int ) { }",
  "func ID ( ID : int , ID : int ) : [ ID [ 123 * true + false - ( true ) ] ] int { }",
  "func ID ( ) { var ID : int ID ( 123 * true + - - true and ( false ) ) = ID if false { } }",
  "func ID ( ) { } func ID ( ) { var ID : bool while ID [ ID ] { } }",
  "func ID ( ) : int { { var ID : [ ID [ 123 / ID ] ] int } { } }",
  "func ID ( ID : int , ID : [ ] int ) : int { var ID : [ ID [ ( ( ( false ) ) ) ] [ - false ] ] int var ID : int }",
  "func ID ( ID : bool ) : int { var ID : bool var ID : [ ] [ ] bool { var ID : [ ] [ ] int var ID : [ ] bool } { } } func ID ( ) { }",
  "func ID ( ) : [ ] [ - true / ( ( - true / - ID ) ) * ID ] [ ] [ ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] [ ( - - 123 * false / - - - ( ID ) ) ] int { }",
  "func ID ( ID : bool ) { var ID : bool return } func ID ( ID : int ) { var ID : bool var ID : [ ] bool }",
  "func ID ( ID : bool , ID : int ) : int { var ID : int call ID ( ) if 123 / ( - - ID ) * - - - false { } } func ID ( ) { }",
  "func ID ( ID : int ) : [ ( ID ( - 123 == - ( ( ID ) ) ) ) ] bool { }",
  "func ID ( ) : [ - - true * ID [ 123 / ( true ) / ID ] * - true ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ID * - ( - ( ID ( ( - ( ID ) ) ) ) ) * ( - false ) ] bool ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ - ID ( - ( false ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ( true / true * ID [ 123 + ID ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { } func ID ( ID : int ) { var ID : [ - ID [ - false ] ] int var ID : [ ] [ ] int }",
  "func ID ( ) : bool { } func ID ( ID : bool , ID : bool , ID : int ) : int { { var ID : int var ID : bool } if false { } }",
  "func ID ( ID : bool , ID : [ ] [ ( ID [ ID ( ) ] [ - - ( ( - - ( ( - - ( ID ) ) ) ) ) ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool var ID : bool print 123 / ( true * 123 * ( - - - true ) ) if ( ID ) { } }",
  "func ID ( ) { while true - ID ( ID ( - - true ) ) - ( - ID ) { } while - - - ID { } } func ID ( ) { }",
  "func ID ( ) : bool { print 123 + false - ( true * ID ) if true { } }",
  "func ID ( ID : [ ] bool ) : bool { var ID : bool var ID : int while 123 + false / ID * ID { } if - ( false ) { } } func ID ( ) { }",
  "func ID ( ) { return ID ( ( - - - 123 / ( ( ID ) ) ) ) }",
  "func ID ( ID : [ ] bool ) { var ID : bool call ID ( ) if 123 / 123 + ( ( 123 ) ) { } }",
  "func ID ( ID : int , ID : bool ) : [ ] int { var ID : [ ] int var ID : bool call ID ( true ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int { var ID : bool while - ID ( ) [ true ] [ ID ] { } } { } }",
  "func ID ( ID : bool ) : [ - false * true / ( - ( ( - - ( ( - ( - ID ) ) ) ) ) ) ] bool { }",
  "func ID ( ID : int , ID : [ ] [ ID / - 123 and - - - ( false ) and true ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ true * false / - ID ( ( false ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ID ( ) / - 123 / - 123 - - ( ID ) + ( ( ID ) ) ] bool , ID : [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] bool ID ( ) [ ( ( ( ID ) ) ) ] [ ID ] = true }",
  "func ID ( ) : int { while true * - ( - ID * 123 * - - ( false ) ) * ( 123 ) { } if ID { } }",
  "func ID ( ID : int ) : int { var ID : int var ID : [ ID [ false * ID ] ] bool } func ID ( ) { }",
  "func ID ( ID : [ ID / ( ( true - false / ID / ID ) ) * - false ] int ) { }",
  "func ID ( ID : [ ] [ ( 123 and - true * ID == 123 ) ] bool ) { }",
  "func ID ( ID : [ - ID ( ID - ID ( ) [ ID ] [ ( ID ) ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { return ID [ ID [ ( true ) ] ] }",
  "func ID ( ID : int , ID : [ ] int , ID : [ ( - ID ( ) [ 123 ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : bool } func ID ( ) : int { var ID : int var ID : [ ] bool }",
  "func ID ( ID : int , ID : bool ) { var ID : int var ID : bool while - - ( ( ID ) ) { } { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool print ( ID ( ) [ ( ( - ID ) ) ] ) call ID ( ) }",
  "func ID ( ) { if ( false + - ID / true / ( ( ( ID ) ) ) ) { } if - false { } } func ID ( ) { }",
  "func ID ( ) { return - - false * - ( - ( ID ) ) } func ID ( ) { }",
  "func ID ( ) { print - true / ( ID ( ) [ ( ( ( 123 ) ) ) ] ) } func ID ( ) { }",
  "func ID ( ID : [ ( false * - ( 123 * ( - ID ) * ID ) / false ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { while ( 123 / - ( ( - false ) ) / - 123 ) { } }",
  "func ID ( ID : [ ] [ ( ( ID [ - ID ] ) ) ] [ ] bool ) { }",
  "func ID ( ) : int { var ID : [ - - true * false * true < 123 * false ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : int { var ID : int }",
  "func ID ( ) { var ID : bool var ID : bool } func ID ( ) : int { var ID : int return }",
  "func ID ( ID : [ true / ( - false / ID [ ID ] ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ( false + true ) * ( - ID ) / true ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ( ( - ( ( true ) ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : bool if - false * ( ID ) { } }",
  "func ID ( ) { var ID : bool call ID ( ( ( - ( ( - ID ) ) ) ) ) ID = ( ID ) }",
  "func ID ( ) { if ID [ ID ( - ( 123 ) ) ] [ true ] { } call ID ( ) }",
  "func ID ( ID : [ ] [ ] int , ID : bool , ID : [ ID ( ID ) ] [ ] int ) { }",
  "func ID ( ID : [ ] bool ) : int { var ID : bool var ID : [ - ID ( ) [ 123 ] [ ( ID ) ] ] [ ] bool }",
  "func ID ( ) { return } func ID ( ) : bool { var ID : int ID ( ) = ID }",
  "func ID ( ) : bool { } func ID ( ) : [ ] [ - - 123 + - false + ID ] bool { }",
  "func ID ( ID : bool ) : bool { var ID : [ ID / 123 and true * - ( - - ( ( - ( - ( - - ( - ID ) ) ) ) ) ) * ( true ) ] bool }",
  "func ID ( ) { var ID : bool var ID : int call ID ( - - false / ( ID ) * - ( ( ( true ) ) ) ) if ID { } }",
  "func ID ( ID : bool , ID : int ) { { print - 123 / - false < 123 } if ( ( ID ) ) { } }",
  "func ID ( ) { var ID : bool call ID ( - ID ( - 123 / - ID * 123 ) ) } func ID ( ) { }",
  "func ID ( ID : [ true / ID [ ( true * - - - true ) ] ] [ ] bool ) { }",
  "func ID ( ID : [ ] bool ) { var ID : bool call ID ( ( - ID [ 123 ] [ - ( 123 ) ] ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] bool var ID : [ ] int return }",
  "func ID ( ) : [ ( - 123 and ( - true * ID * ID ) ) ] int { }",
  "func ID ( ) { var ID : bool { var ID : int var ID : [ ] int } return } func ID ( ID : int ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : int ) { var ID : [ ID ( - 123 ) ] int }",
  "func ID ( ID : int , ID : [ ( ID ( 123 + ID - ID ) ) ] bool ) { }",
  "func ID ( ID : bool ) : bool { var ID : [ - ID [ ( - ID ) ] ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : int , ID : bool ) { var ID : bool var ID : bool while ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ( false * ( ( ID ) ) ) ] int }",
  "func ID ( ID : int ) : [ ] int { var ID : bool var ID : bool call ID ( true / - ( ( - ( - - true ) ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool { var ID : [ ] bool var ID : bool call ID ( ) if - - 123 { } } ID = - ( - ID ) } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : bool ) : bool { print - - ( ( true ) ) if true { } } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool , ID : [ ID ( - 123 / true / ( ( - ID ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : int ID [ ( ID ( ) ) ] = false } func ID ( ) { }",
  "func ID ( ) : [ - true * ( true * ID [ - true ] / ID ) * ( ( 123 ) ) ] int { }",
  "func ID ( ID : [ ] bool , ID : [ ] int ) : int { var ID : bool if true * true * ( - ID ) { } }",
  "func ID ( ID : bool , ID : [ ] [ ] [ ] int ) { var ID : int } func ID ( ID : [ ] int ) { }",
  "func ID ( ) : int { var ID : [ - false * 123 * - ( ID ) ] [ ] int var ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int var ID : [ ] int return 123 - ID ( ID ) } func ID ( ) { }",
  "func ID ( ID : [ - false * ID / - 123 + 123 and - ID and ( ID ) ] int ) { }",
  "func ID ( ID : bool ) : [ ID [ - ID - ID * ID / - - ( ID ) - true ] [ - - - 123 ] ] [ ] [ ] [ ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ false * ID [ ( true ) ] [ ( - false ) ] ] [ ] bool }",
  "func ID ( ID : bool , ID : [ ] [ ] int ) { var ID : int var ID : [ ID [ ( 123 ) ] [ ID ] ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : bool { while ( - ( true ) ) { } if - ID { } } func ID ( ) { }",
  "func ID ( ID : [ true and 123 * - 123 - - ID [ true ] [ ID ] - ID ] [ ] bool ) { }",
  "func ID ( ID : [ ] bool ) : bool { var ID : int var ID : int { var ID : bool } call ID ( ) }",
  "func ID ( ID : [ ID [ ID ( ) [ ( false ) ] ] [ ( - 123 ) ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { return ( ( - true / true - ( false ) - ID ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) : int { }",
  "func ID ( ID : int , ID : [ ] [ - ID - false * ( ( ID ) ) * false ] bool , ID : bool ) { }",
  "func ID ( ) : [ ] bool { var ID : bool var ID : int { var ID : int { var ID : bool } if - ID { } } { } } func ID ( ) { }",
  "func ID ( ID : [ ( ID ( ID [ ID ] [ ( true ) ] ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ - - - ID [ ( ID ( ( - ID ) ) ) ] ] int ) { }",
  "func ID ( ) : [ ( ID * - ID [ true / - - - ( false ) ] [ ( - ID ) ] ) ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : int { ID ( ) [ 123 * - ( false ) ] [ true ] = ID print ID }",
  "func ID ( ) { ID ( ) [ true * ( true - ( true ) ) / ID ] [ true ] = - - - ( ( ID ) ) }",
  "func ID ( ) { var ID : bool while ID / ( ID ( ) [ ID ] [ - 123 ] ) { } ID = ID } func ID ( ) { }",
  "func ID ( ID : [ false - - true / ID ( ) * - false <= - 123 ] bool ) { }",
  "func ID ( ID : bool , ID : [ ID ( 123 * ID ( ) [ - ( ( - ( - - 123 ) ) ) ] / ID ) ] [ ] [ ] int , ID : [ ] bool ) { }",
  "func ID ( ) { var ID : bool ID ( - ID ( false * ( false ) / - ID ) ) = ID call ID ( ) }",
  "func ID ( ID : bool , ID : [ - false + ID + ( true - ID ) ] int ) { }",
  "func ID ( ) : int { var ID : bool if true * true / ID + - ID ( ) { } if ID { } }",
  "func ID ( ID : int , ID : int , ID : int ) { print ( true / ( ID ) ) }",
  "func ID ( ) : [ ID ( ID [ ID [ ID ] ] ) ] int { }",
  "func ID ( ) : int { var ID : int var ID : [ ID ( ) [ - ID ] [ - ( ID ) ] ] int }",
  "func ID ( ID : bool , ID : bool , ID : int ) : int { print - true * ID [ - ( false ) ] print ( ( false ) ) }",
  "func ID ( ) { var ID : [ ( false - ID [ ID ] [ true ] ) ] bool var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] int { var ID : int var ID : bool { var ID : [ - - false ] [ ] [ ] [ ] [ ] [ ] bool var ID : int } { } }",
  "func ID ( ) : [ ( - ( false * ID ( ) / - ID ) ) ] [ ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : [ ( true / true / false != ( ID ) ) ] [ ] bool ) { }",
  "func ID ( ID : int , ID : [ false - ID * 123 * - ( ( 123 ) ) - ID ] [ ] int , ID : bool ) { }",
  "func ID ( ID : [ ] [ - false / ( true / - ID ( ) [ true ] [ false ] / ( 123 ) ) ] [ ] [ ] int ) { }",
  "func ID ( ID : [ ID [ ( ( - ID ( ) ) ) ] ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { while - ID ( - ( ( ( ID ) ) ) ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) : bool { var ID : int while true / - 123 { } } func ID ( ) { }",
  "func ID ( ID : [ false / true / ( - - true * true * true ) ] bool ) { }",
  "func ID ( ID : int , ID : int ) : [ ID ( ID [ ( ID ) ] [ false ] ) ] bool { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool while - true and ID / - false / - - - - - ID { } print ( - 123 ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ID : [ ID [ 123 * ( - ( true ) ) * true ] [ true ] ] [ ] [ ] int ) { }",
  "func ID ( ID : [ ] int , ID : [ ( - false and ID ( ) ) ] [ ] [ ] int ) { }",
  "func ID ( ) { call ID ( ) return ID ( ID + ( false ) + ID ) }",
  "func ID ( ) : bool { var ID : int var ID : [ ID * ( ( - ( - - ( ( - ID ) ) ) ) ) * 123 ] bool }",
  "func ID ( ) { var ID : int while ( - - false / ( ID ) ) { } while 123 { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool , ID : [ ] [ ] [ ID ( ) [ ID ] ] bool ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : int if true / - - 123 * ID { } ID = 123 } func ID ( ) { }",
  "func ID ( ) { var ID : bool return ( - ID ( ID * - ( ID ) / ( - true ) ) ) }",
  "func ID ( ID : [ ] [ ] [ ] int , ID : int , ID : [ ] int ) { var ID : [ ( ( - - 123 ) ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool call ID ( ) } func ID ( ) { var ID : [ ] bool ID = false ID = ID }",
  "func ID ( ID : [ ] bool , ID : [ ( ( ID ( ) [ 123 ] [ ( ( - ( ( ( - - ID ) ) ) ) ) ] ) ) ] int ) { }",
  "func ID ( ) { var ID : bool { var ID : int var ID : bool print true print ( 123 ) } }",
  "func ID ( ) { var ID : [ 123 / 123 ] [ ] bool var ID : [ ID ] bool }",
  "func ID ( ID : int , ID : int ) : bool { ID = - - - ( true ) }",
  "func ID ( ID : int , ID : int ) { var ID : int var ID : bool }",
  "func ID ( ) { while ( ( false * ID [ ( ( ID ) ) ] [ ID ] * - 123 ) ) { } ID = ID } func ID ( ) { }",
  "func ID ( ID : int , ID : [ 123 + false - false ] [ ID ] bool ) { }",
  "func ID ( ) : bool { var ID : int var ID : int { var ID : bool var ID : [ ] int call ID ( ID ) call ID ( ) } { } }",
  "func ID ( ) : [ ] bool { var ID : [ ] bool while true / ID ( ) * true { } print ID }",
  "func ID ( ) : [ ] bool { var ID : [ ] [ 123 * - - ( ID ) / ID ] int } func ID ( ) { }",
  "func ID ( ID : [ ID ( ID [ ID + false + ( - 123 ) ] [ ( ID ) ] ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { var ID : [ ] int var ID : [ ( ID ) ] [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int call ID ( ID [ ID [ false ] [ ID ] ] [ ( ( - - ( true ) ) ) ] ) }",
  "func ID ( ID : [ ] bool , ID : int , ID : int ) { var ID : int var ID : [ ] [ ( ( false ) ) ] int } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : int return false / ( - ID * true / true ) }",
  "func ID ( ) { var ID : int var ID : int call ID ( ) } func ID ( ID : int , ID : int , ID : bool ) : bool { }",
  "func ID ( ID : [ ] int , ID : int ) : [ ] bool { var ID : [ ID / ID * ( ( - false ) ) ] [ ] [ ] [ ] bool }",
  "func ID ( ) : bool { var ID : int ID ( - - - ( ID ( ) ) ) = ( false ) }",
  "func ID ( ) { var ID : int ID [ - false * ( ( false ) ) * ( 123 ) ] = ( - ( - true ) ) } func ID ( ) { }",
  "func ID ( ) : [ ] int { { var ID : [ ] [ ( ID ( ) ) ] [ ] int } { } }",
  "func ID ( ) : int { var ID : [ ] int if ( true / - ( ID ) * ID ) { } ID = true }",
  "func ID ( ID : int ) { call ID ( ID ( ID / - - ( ID ) * ID ) ) call ID ( ) }",
  "func ID ( ID : int , ID : [ ] [ ID [ - ( ( ID ) ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) : bool { }",
  "func ID ( ) : [ ] [ ] int { } func ID ( ) : int { var ID : bool var ID : int call ID ( ) ID = ID }",
  "func ID ( ID : [ ] int ) { { var ID : int { var ID : int var ID : int ID = - 123 } } while - ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool while false / - - ID ( ID ) * ( ( - true ) ) { } if ID { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool while ID * 123 / false or ID or ID { } ID = - ( ID ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int var ID : int if - ID [ - true ] { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool ID ( - true * - true > - ID ) = ( - ID ) call ID ( ) }",
  "func ID ( ) : int { call ID ( ) return } func ID ( ) { var ID : bool if - - ID { } }",
  "func ID ( ) : [ ] [ ID [ ID * - - - ( ID ) * ( ( ID ) ) ] ] int { }",
  "func ID ( ) : [ ID ( ) [ 123 / - ( ID ( ) ) ] ] int { }",
  "func ID ( ID : [ - true * ID [ ID * false - 123 ] ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ID [ false / ID + - false * - ID / false ] [ ( ID ) ] ] int { }",
  "func ID ( ID : int , ID : bool , ID : int ) : bool { var ID : bool while - ( ( false ) ) { } }",
  "func ID ( ID : bool , ID : int ) { var ID : bool print ( - ID [ ID ] [ 123 ] ) while - ( - false ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool print - 123 * false and ( ( ID ) ) while true { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int print ID ( ( ( false ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool ) { ID ( 123 * - false or 123 / - ID ) = ( ( ( ID ) ) ) print false }",
  "func ID ( ID : int , ID : int ) { call ID ( ID ( 123 / ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int call ID ( - ID ( ( ( ( ( ( ( true ) ) ) ) ) ) ) ) }",
  "func ID ( ID : [ ] [ - ( true * ID ( ) [ true ] ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { var ID : int var ID : int call ID ( ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : int return } func ID ( ID : bool , ID : bool ) { var ID : int { } { } }",
  "func ID ( ) : int { var ID : [ ] int } func ID ( ) { var ID : bool var ID : [ ( - ID ) ] int }",
  "func ID ( ) { var ID : bool if ( false / ID [ ( 123 ) ] * ID ) { } if ID { } } func ID ( ) { }",
  "func ID ( ) : int { } func ID ( ) { var ID : int var ID : bool while - ID ( ) { } print false }",
  "func ID ( ID : [ 123 + false / ( ID ( true ) ) / - - ( - 123 ) + ID ] bool ) { } func ID ( ) { }",
  "func ID ( ) { ID ( ) [ ( false / ( ID ) ) ] [ true ] = - ID while ID { } }",
  "func ID ( ) { var ID : [ ] int if - - true / - ID ( false ) * false { } }",
  "func ID ( ID : int ) { var ID : [ ID [ ( - ( true ) ) ] ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) : bool { print ( ( 123 / ( true ) ) ) }",
  "func ID ( ) : int { var ID : bool if true * ( ID [ - - false ] ) / - false { } call ID ( ) }",
  "func ID ( ) { var ID : [ false / - false / false and - ( 123 ) and ( - ID ) ] int var ID : int }",
  "func ID ( ) : [ ( true * - true + false or - ( 123 ) or ( ( ( ID ) ) ) ) ] int { }",
  "func ID ( ) : [ ] [ ] [ ] [ ] bool { while ID [ ( true ) ] { } } func ID ( ) { }",
  "func ID ( ) : [ 123 == true * - true - - true * ( ID ) / ( - ID ) ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int , ID : int ) : [ - ID [ - ID ] [ ( false ) ] ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { if true and false - false * 123 / ID and false { } }",
  "func ID ( ID : int , ID : [ ] [ ( - ( ( - - ID ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool ID ( ) [ - ID [ ( - ( - ID ) ) ] ] = - - ( true ) if - - ID { } } func ID ( ) { }",
  "func ID ( ID : [ false - true > ID ( ) [ false <= false ] [ - ID ] ] bool ) { }",
  "func ID ( ID : int , ID : [ ] [ ] int ) { var ID : int var ID : bool print ID ( ) }",
  "func ID ( ) : [ ( - ID [ ID ( ID ) ] [ - - false ] ) ] int { }",
  "func ID ( ID : [ ] bool , ID : bool ) : bool { } func ID ( ID : int ) { var ID : int var ID : int }",
  "func ID ( ID : int , ID : int ) { var ID : int if - ID [ - - ID ] [ false ] { } }",
  "func ID ( ) : int { return ( true + 123 - ID ( 123 ) ) }",
  "func ID ( ID : [ ] [ ] [ ] int , ID : int , ID : int ) : bool { var ID : int } func ID ( ) { }",
  "func ID ( ID : [ - 123 > ID ( ID ( ) + 123 ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : [ ] int var ID : [ ID [ ID ] [ false ] ] bool }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : int var ID : int while ID ( ) { } print ID } func ID ( ) { }",
  "func ID ( ) : int { while ID ( - ID [ ( ( ID ) ) ] [ ( ID ) ] ) { } { } }",
  "func ID ( ) { var ID : bool call ID ( - false / - - true / ( ( ID ) ) ) print 123 }",
  "func ID ( ID : [ ID > ID ( ) [ ID ( 123 ) ] ] bool ) { }",
  "func ID ( ) { return ( ( - - - false + ID - - ID ) ) }",
  "func ID ( ID : bool ) : [ ] int { var ID : int { var ID : int var ID : [ ] [ ( ID ) ] int } print ID } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID [ ( ID [ - ID ] ) ] [ ( ID ) ] ] [ ] int var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : [ - ( - false / ( ( - - ( ID ) ) ) ) ] [ ] [ ] [ ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : [ ( ID [ - true ] [ ID ] ) ] int }",
  "func ID ( ) { var ID : bool var ID : int call ID ( - ID - - false / - - ( true ) - false ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool call ID ( ) } func ID ( ID : [ ] [ ( 123 ) ] int ) { }",
  "func ID ( ) : bool { ID ( ) [ ID ( - - ( ( false ) ) ) ] [ ( ( - true ) ) ] = false } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ ID [ ID ( ) * ID * - ( ( ID ) ) ] ] ] bool ) { }",
  "func ID ( ID : [ ] int , ID : [ ] [ ] bool , ID : bool ) { var ID : bool var ID : [ ] [ ] [ ] [ ] int }",
  "func ID ( ) : int { var ID : bool var ID : [ ] [ ] int if - ( 123 ) { } ID = ID } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID [ ID ( - - ID ) ] [ ID ] ] bool }",
  "func ID ( ID : [ ] int , ID : [ ID [ ( ID ( ) ) ] ] bool , ID : [ ] bool ) { }",
  "func ID ( ) : int { ID = ( 123 / - - - - ID [ 123 ] / false ) }",
  "func ID ( ) : int { ID ( - 123 * ID ( ( false ) ) * ID ) = ID while - true { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : int return 123 * ID + ( ID ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int ) : bool { ID ( true / ID < ID ) = ID }",
  "func ID ( ) { var ID : int return } func ID ( ) { ID = ( ( ID ) ) while 123 { } }",
  "func ID ( ID : int ) : [ true - ( ID [ - ( ( - ID ) ) ] [ true ] ) ] bool { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { } func ID ( ) : bool { call ID ( ) { var ID : [ ] bool var ID : bool } }",
  "func ID ( ) : bool { var ID : bool while ID ( - - - true * 123 / ( ID ) ) { } }",
  "func ID ( ID : [ ] int , ID : int ) : bool { var ID : int var ID : bool }",
  "func ID ( ID : [ 123 * 123 - ( ID ( - false ) ) ] bool ) { }",
  "func ID ( ID : int , ID : bool ) : bool { print ID ( ) [ - true ] }",
  "func ID ( ID : int , ID : int ) { var ID : int if - false / - ( - 123 ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { return - ( false + true / ID / ( ( 123 ) ) ) }",
  "func ID ( ID : bool , ID : [ false * ID ( ID ( ID ) ) * 123 ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : [ ] int { var ID : [ - true * - ( - ID ) ] [ ] [ ] bool var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) : int { while false + true { var ID : int var ID : [ ] int } } func ID ( ) { }",
  "func ID ( ) { ID [ ID [ - ( ( ID ) ) ] ] = ID { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : [ ( 123 / - ( - ( ( - - ID ) ) ) * ( ( ID ) ) ) ] [ ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : [ ] int { print ( ID ( ) ) while ID { } } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int ) { var ID : int }",
  "func ID ( ) : bool { var ID : int var ID : bool }",
  "func ID ( ID : bool , ID : [ - ( false / ( 123 / ( - ( true ) ) ) ) ] int , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : [ ( - ( ID ) ) ] int { }",
  "func ID ( ) { print false and ( ( ID ( ( ( ID ) ) ) ) ) and ID } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool print ( - ID * 123 / ( ID ) ) }",
  "func ID ( ) : bool { var ID : [ ] [ ( - - ( ID ) ) ] bool }",
  "func ID ( ) : [ false - 123 * false / - ID ( - - ( ( - false ) ) ) ] int { }",
  "func ID ( ) { } func ID ( ID : [ ] [ ( - ( - 123 ) ) ] [ ] bool ) { }",
  "func ID ( ) { var ID : int var ID : bool ID = ( ( ( 123 ) ) ) } func ID ( ) { }",
  "func ID ( ) : [ - ( ( - ID ( ID ) ) ) ] int { }",
  "func ID ( ) : bool { var ID : int if ID ( ( - ( - true ) ) ) { } ID = - true } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ID ( ) [ - 123 * ( ID ) ] [ - 123 ] ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int ID ( ( true / - - ID ( ) ) ) = - ID if false { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] bool { { var ID : bool return ( - - - ID ) } print ID } } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) : int { var ID : int var ID : [ ] [ ( ID ) ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool while - ( ( ( ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : [ ID [ ( - - - ( 123 ) ) ] ] bool }",
  "func ID ( ID : int , ID : [ false * - ( - ID [ ( false ) ] ) ] [ ] [ ] bool , ID : [ ] [ ] bool ) { }",
  "func ID ( ) : bool { var ID : int var ID : [ ] bool print - - ( 123 ) if - - ID { } }",
  "func ID ( ) : int { var ID : int print - ID ( ID ( ( - - ( ID ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int ) { return true / ( ID ( ) ) / - - ID }",
  "func ID ( ) : int { if ID * true * ID ( ID [ - ( ( false ) ) ] ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] [ - 123 * - true and 123 ] [ ] [ ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ - - ID ( ) * - false + - ( - true ) - true ] int var ID : [ ] [ ] [ ] int }",
  "func ID ( ) { var ID : bool if - ( true * ( ID ) ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] int { var ID : bool var ID : bool if ID [ ID ] { } }",
  "func ID ( ) : bool { var ID : bool print true - ( 123 / true * 123 ) }",
  "func ID ( ID : int ) : bool { var ID : int var ID : [ ] int { var ID : int var ID : [ 123 ] bool } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool return } func ID ( ID : [ ID ( ) + true ] bool ) { }",
  "func ID ( ID : int , ID : int ) : bool { var ID : [ 123 / - ID [ - - 123 ] * ID ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) : [ ( - ID [ - ( ID ) ] [ ( ID ) ] ) ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) { return true / ID [ 123 * - - true / true ] } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool while - - ID + ( ( - - ID ) ) { } while ID { } }",
  "func ID ( ) : [ - ( false - true / true - - - - false ) ] int { }",
  "func ID ( ID : [ ID ( ( ( false / 123 ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ - - ID [ ID ( - ID ) ] ] [ ] int , ID : [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : int print true * - ( ( ( ( ( ( - true ) ) ) ) ) ) * - ( - ID ) } func ID ( ) { }",
  "func ID ( ID : int ) { call ID ( ID ( - ( ID ) ) ) if ID { } }",
  "func ID ( ) : [ ] [ ] [ - ID ( - ( false ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : [ ( ID [ - false == true / false / ID ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) : [ ] bool { }",
  "func ID ( ID : [ ] int , ID : int ) { var ID : int var ID : bool while ( - ( ID ) ) { } }",
  "func ID ( ) { return ID / - true * - ID [ 123 * - - - false ] [ ID ] }",
  "func ID ( ID : [ ID [ 123 + ( - false * ID / ( ( ID ) ) ) - false ] [ ID ] ] int ) { }",
  "func ID ( ID : [ ] bool , ID : [ ID ( 123 / - - ID ) ] bool ) { }",
  "func ID ( ID : [ ] int ) { var ID : [ - - ID ( ) [ - ID ] ] bool var ID : bool }",
  "func ID ( ) { var ID : [ ] [ ( - - ID [ ID ] [ false ] ) ] [ ] int }",
  "func ID ( ID : int , ID : int ) : bool { ID ( ) [ ( ID ) ] [ false ] = - ID } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] [ ] bool var ID : [ ] bool } func ID ( ID : int , ID : [ ] bool ) { }",
  "func ID ( ID : bool , ID : bool ) { { var ID : bool var ID : int call ID ( ) call ID ( ( - 123 ) ) } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : int { print ( ( 123 + false * false * true ) ) } func ID ( ) { }",
  "func ID ( ) : [ ] [ - ( ID * 123 / true - ( ( ( ( true ) ) ) ) - - true ) ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int return ( ID * - - - ID * ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : int }",
  "func ID ( ID : [ ] int , ID : [ ] bool ) : bool { var ID : int if ( ( true ) ) { } if ID { } }",
  "func ID ( ) : int { var ID : [ ] int var ID : bool return true / true - ( ID ) + - ( true ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool print ( false <= - ( true ) ) print - false } func ID ( ) { }",
  "func ID ( ) { while ID / 123 - ( - - 123 / ID * - - ( true ) ) + true { } if - ( ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int { var ID : [ ] bool print - - - ( ( ID ) ) } }",
  "func ID ( ID : int ) : int { var ID : [ ( ( ID [ false ] ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : bool ) : [ - 123 / - 123 - - - ID * - 123 * false + ID ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { var ID : int { var ID : int call ID ( - false ) } print - 123 } func ID ( ) { }",
  "func ID ( ID : int ) { { var ID : bool print - ( ( ( ID ) ) ) ID = 123 } while - 123 { } }",
  "func ID ( ID : int , ID : int ) : [ ] [ ID [ true * - - false / 123 ] ] [ ] int { }",
  "func ID ( ) { var ID : int call ID ( ) print ( ( ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] bool var ID : [ true / false - 123 <= ID ] [ ] [ ] [ ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ( false * 123 * 123 < - - ID ) ] [ ] bool { }",
  "func ID ( ) : [ - ID [ ID [ ID ( ) [ ( ID ) ] ] [ ID ] ] [ ID ] ] int { }",
  "func ID ( ID : [ ] int , ID : [ ( ( ( ( 123 ) ) ) ) ] bool , ID : [ ] bool ) { }",
  "func ID ( ) : [ - ( false / 123 * ID ( ) [ ( ( ID ) ) ] ) ] bool { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] [ true / true != - ID ( ) [ - false ] ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : bool call ID ( ( ID [ false / true ] ) ) } func ID ( ) { }",
  "func ID ( ) : [ ( - ( ID [ ( ( ( - ( ID ) ) ) ) ] ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : [ 123 == ID ( - true + ( - ( - - ID ) ) - 123 ) ] bool var ID : [ ] int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool call ID ( ) return ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : bool ) { ID [ ( ( ID [ ( ( ( ID ) ) ) ] [ - ID ] ) ) ] [ false ] = - - false } func ID ( ) { }",
  "func ID ( ID : [ - ID ( false * - false + true / - ( ( true ) ) / true + true ) ] [ ] bool ) { }",
  "func ID ( ID : [ false or ( ( - ( ( ID ) ) ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : bool var ID : [ ] int if ID ( ) / ( - false ) { } if ( - false ) { } } func ID ( ) { }",
  "func ID ( ) { print - true - ID * 123 * ID [ ( - true ) ] + ( ID ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { if true + ( ID ) - - - ID { } ID = 123 } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ID / true / false + 123 * ( ( ID ) ) - - true ] bool var ID : int }",
  "func ID ( ) : bool { var ID : bool print ID ( ( ID ( ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] int print ( - false - ID - - ( ( 123 ) ) ) print ( ID ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ - ( ( - - - ( - ID ) ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ID : [ ] int ) { var ID : int var ID : bool return }",
  "func ID ( ID : bool ) : int { var ID : [ ( ID ( ID ) ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) : [ ID + ID ( - ID ) + false ] int { }",
  "func ID ( ) : [ true + - true * - ID ( ) [ ( ID ) ] ] int { }",
  "func ID ( ) : [ ] int { var ID : [ false * ID ( ) [ ID ] ] int var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ID : int ) : bool { { var ID : bool var ID : bool call ID ( ( true ) ) ID = ID } while ID { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : int { var ID : int var ID : bool if false / - true { } if ID { } }",
  "func ID ( ID : bool ) : [ ( true + ID ( ) * - - ( false ) * ( - ID ) + ID ) ] [ ] bool { }",
  "func ID ( ) : [ ( ( ( true * false + true ) ) ) ] int { }",
  "func ID ( ID : int , ID : [ - - ( ID ( ) [ false ] [ true ] ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID / ( ( - ( false ) ) ) / 123 ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : bool print ID ( ) [ true * - ( 123 ) ] ID = ID }",
  "func ID ( ) { while ( ID [ ID ( ) - - ID - ID ] ) { } while - - - ID { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID ( ( ID ( ( ID ) ) ) ) ] bool , ID : int ) { }",
  "func ID ( ID : [ ID * ID >= ID [ ( ( ID ) ) ] [ ( ID ) ] ] int ) { }",
  "func ID ( ID : int ) { call ID ( ) return - - ( false / - 123 ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ID ( ) [ ID ( true ) ] [ ID ] ] [ ] bool }",
  "func ID ( ID : [ ( - ( 123 - - ID [ - - 123 ] [ ID ] + ID ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { print true / ( ( - ID ( - ( 123 ) ) ) ) / - - ( true ) }",
  "func ID ( ) : bool { } func ID ( ID : [ - - ( ID [ ID ] [ - - ( ( 123 ) ) ] ) ] int ) { }",
  "func ID ( ) : [ ID ( ) [ ( - ID [ ID ] ) ] ] [ ] int { }",
  "func ID ( ) : int { return 123 == - ID [ ID [ ID ] [ - ( ( ID ) ) ] ] [ - ID ] }",
  "func ID ( ID : bool , ID : int ) : int { var ID : bool if ( ID [ ( - 123 ) ] [ - false ] ) { } ID = - ( ( ID ) ) }",
  "func ID ( ) { ID [ - - ID [ - true / - - - - true ] [ ( ( - ID ) ) ] ] [ - 123 ] = ( ( - ( ( ID ) ) ) ) print 123 } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : bool print ID ( ID ) } func ID ( ) { }",
  "func ID ( ID : [ ( - ( - ( ( 123 ) ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int while true * - - - ID [ - 123 ] { } if true { } }",
  "func ID ( ID : [ ( true / ID [ ID / - ( ( true ) ) / ID ] ) ] [ ] bool ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : bool call ID ( ) if - ID ( ( ( ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { if ID ( ) [ - ( ID ) ] { } { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID ( ) * ( ( false ) ) / false ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : bool { while ID ( ID ( ) [ ID ] ) { } }",
  "func ID ( ) { ID [ ( true ) / true + ( ( ( true ) ) ) + ID ] [ - ( 123 ) ] = ( 123 ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) { call ID ( ) return ( - - ID ( false ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ true * - - 123 and - 123 + ( - - - ID ) + - ( - - - ID ) ] [ ] int ) { }",
  "func ID ( ID : [ ] bool ) { var ID : int print ( - ( true ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool ID [ - - ID [ ID ] ] [ ( ( ID ) ) ] = ( ID ) if false { } } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] bool { while ( ( ( - ( ( ID ) ) ) ) ) { } while - ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] [ ] bool { var ID : bool var ID : [ ( - ( ( - ID ) ) ) ] [ ] int } print 123 } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int var ID : bool call ID ( ) return ID [ ID ] } func ID ( ) { }",
  "func ID ( ) : [ ] [ ( ID ( ) [ ID [ ( ( ( ID ) ) ) ] ] ) ] [ ] int { }",
  "func ID ( ) { var ID : bool } func ID ( ID : int , ID : [ ] bool , ID : int ) { { var ID : [ ] int var ID : [ ] bool } }",
  "func ID ( ID : [ ] int , ID : bool ) { call ID ( ( ( ( ( ID ) ) ) ) ) }",
  "func ID ( ) { var ID : [ - false + ( ID ( ) [ - ID ] ) - ID ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ 123 * false * ID [ ID ( ) ] ] int var ID : [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ - ( - ID [ - 123 * ID ] ) ] bool ) { }",
  "func ID ( ID : int ) : bool { var ID : bool { var ID : bool var ID : bool if false / ( 123 ) { } } } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : [ ] [ - - ( ID ( ) [ - - true ] ) ] int { } func ID ( ) { }",
  "func ID ( ) : [ ( - ID ( 123 * false * ( ( ( ( ( - ( ( - ID ) ) ) ) ) ) ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ID ( ) - 123 * - ID ( true / - 123 ) * 123 - - ID ] bool { }",
  "func ID ( ID : int , ID : int ) : [ ( - ( ID * ID / ID ) ) ] [ ] int { }",
  "func ID ( ) { print ID [ - - ID / - ( ( ( 123 ) ) ) ] print false }",
  "func ID ( ) { ID = - - ( ID ( false / ID * - true ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool return } func ID ( ID : int , ID : [ false / - - ID ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : bool ) : [ ] bool { var ID : bool if true * ID ( ) { } ID = true } func ID ( ) { }",
  "func ID ( ID : [ 123 * ID ( - ( - false / ( - ( ( ID ) ) ) ) ) / 123 ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool ID ( ) [ ( 123 * ( 123 ) ) ] = - - false }",
  "func ID ( ) : [ ( ID ( ) [ 123 - false * ID - - ID ] ) ] [ ] [ ] [ ] int { }",
  "func ID ( ) : [ ] int { var ID : bool var ID : bool if ( false - true + ID ) { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : bool }",
  "func ID ( ID : int , ID : bool , ID : int ) : int { var ID : int var ID : int print - ( - false ) } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : int return 123 - 123 + ( ( false ) ) } func ID ( ) { }",
  "func ID ( ) : [ true / 123 + ID [ ( ID ( ) ) ] - - false ] int { }",
  "func ID ( ID : [ ID ( - - - - ( ( ID ) ) ) ] int ) { }",
  "func ID ( ID : [ ] bool , ID : [ ] [ ] [ ID [ true - ID ] ] bool ) { }",
  "func ID ( ID : int , ID : bool ) : [ true * ID [ ID ( ID ) ] [ ID ] * ( ( true ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { return } func ID ( ID : [ - - ( ID ) ] bool ) { }",
  "func ID ( ID : bool ) : bool { } func ID ( ) : [ ] int { var ID : int return - ( ID ) }",
  "func ID ( ID : int ) { while ID [ ( false / ID ) ] [ ( false ) ] { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int { var ID : [ ] int while ( - - ID ) { } { } } }",
  "func ID ( ID : int , ID : [ ] int , ID : bool ) { } func ID ( ) : int { var ID : [ ] int var ID : int }",
  "func ID ( ) { return } func ID ( ) : [ ] bool { var ID : bool var ID : [ false ] bool }",
  "func ID ( ) { { ID = true / ID [ ID / - ( ID ) * - - ( ID ) ] [ ( - true ) ] * ID } while ( true ) { } }",
  "func ID ( ID : [ ] bool ) : [ ] bool { var ID : [ false / - ( ( ( ID ) ) ) ] bool var ID : int }",
  "func ID ( ) { var ID : int ID = - ( ( ( ( ( ID ) ) ) ) ) }",
  "func ID ( ) : bool { var ID : int { var ID : bool { var ID : bool ID [ ( true ) ] [ ( 123 ) ] = ( - - 123 ) } ID = ID } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] int if false + ( - ID ) - - ID { } }",
  "func ID ( ) { var ID : int var ID : int { var ID : int var ID : [ ] [ - ID ] bool } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ ID ( ) [ - ID ] ] ] [ ] int ) { }",
  "func ID ( ) : int { var ID : [ ] bool var ID : int return } func ID ( ) : [ ( ID ) ] [ ] [ ] bool { }",
  "func ID ( ) : int { var ID : [ ] int var ID : bool print 123 * - ( 123 ) }",
  "func ID ( ) : [ ] int { var ID : int ID ( ) [ ( ID ) ] [ ID ] = true while ( true ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool ID ( ID ( - ID ( ) [ ID ] ) ) = ID ID = - true } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ true and false ] int var ID : [ ] int }",
  "func ID ( ID : [ ] int , ID : [ ] int , ID : bool ) : [ ] [ ] int { call ID ( - 123 ) } func ID ( ) { }",
  "func ID ( ID : int ) { return ID ( ( ID [ 123 ] [ 123 ] ) ) } func ID ( ) { }",
  "func ID ( ) : [ - ID [ ID [ true * - false * ID ] [ - - 123 ] ] [ false ] ] bool { }",
  "func ID ( ) : [ ] [ - true / 123 and ( - 123 / - ID ) ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ID [ - ID / ( 123 + - - ( ( ( - false ) ) ) + - - ID ) * true ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : int var ID : bool }",
  "func ID ( ) : int { ID = ( ID ( ID ( ) ) ) }",
  "func ID ( ID : bool , ID : bool ) : [ ID / false + - ( - ID ) ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int var ID : [ ] [ ID ( ) [ - true ] [ - true ] ] bool }",
  "func ID ( ) : bool { { var ID : int var ID : int if ( ID ( ) ) { } print - ( ID ) } print - - - ( true ) }",
  "func ID ( ) { var ID : [ ( - ID ( ID ( 123 ) ) ) ] bool var ID : int }",
  "func ID ( ID : bool , ID : int ) : [ ] [ ] [ ] bool { var ID : [ false * - ( ID ) ] int } func ID ( ) { }",
  "func ID ( ID : bool ) : int { print - ID ( - - ( ID ) ) }",
  "func ID ( ) : int { { var ID : [ ID and ( ( ID ) ) ] int } }",
  "func ID ( ID : bool ) : bool { var ID : int }",
  "func ID ( ) : [ ] [ ] [ ] bool { var ID : bool var ID : bool } func ID ( ) { if - ( - ( ( false ) ) ) { } }",
  "func ID ( ID : bool , ID : [ ] int , ID : int ) : [ ID / true and - ( ID ) ] bool { }",
  "func ID ( ) { call ID ( ) call ID ( ) }",
  "func ID ( ) { call ID ( - false * - ( ID + false ) / 123 ) while - ID { } }",
  "func ID ( ID : bool ) { var ID : [ ] [ ] [ ] [ ID [ ( 123 ) ] [ true ] ] [ ] [ ] [ ] bool }",
  "func ID ( ID : [ ( - true / ID / ID ( ID ) ) ] bool ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) : bool { var ID : [ ( ( - ID ) ) ] int } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { } func ID ( ) { }",
  "func ID ( ) { var ID : int print ID ( ) [ ID ( - - - - - ( ID ) ) ] print true }",
  "func ID ( ) : [ ] bool { var ID : int var ID : int call ID ( ) call ID ( ) } func ID ( ID : [ ] [ ] bool ) { }",
  "func ID ( ) { print true + ID ( ) [ ID ( ) [ 123 ] [ ( ( ID ) ) ] ] - ID } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int print ( - ID ( false ) ) } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : [ false * ( ( ( - ( false ) ) ) ) ] int } func ID ( ) { }",
  "func ID ( ) { ID = ID ( ( ID [ ID ] [ ( 123 ) ] ) ) { } }",
  "func ID ( ) { while ID ( ) [ ID [ true * 123 ] [ 123 ] ] [ ( ( - ( true ) ) ) ] { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID : [ ID [ ( false ) ] [ ( ID ) ] ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ true / ID ( - ID ( ) / - ( ( - false ) ) ) ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ) { } func ID ( ID : bool ) { var ID : int var ID : bool print - ID if true { } }",
  "func ID ( ) : bool { var ID : [ ] int var ID : [ ] [ - ID ( ID ) ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( ( 123 <= ( false ) ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] [ - ID [ - ( 123 ) ] ] bool }",
  "func ID ( ) : [ ] [ ] bool { print ID + ID ( true ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID ( ( ( - ( ID ) ) ) ) ] [ ] [ ] [ ] [ ] [ ] bool var ID : int }",
  "func ID ( ID : bool ) { var ID : int return }",
  "func ID ( ) { var ID : [ ID ( ) or - - ( - - - - - true ) or ( - ( ID ) ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : int while - ( true * - ID * ID ) { } { } }",
  "func ID ( ) { var ID : int call ID ( ID * - ID [ ( false ) ] [ ( ID ) ] * ID ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool var ID : [ ] int return }",
  "func ID ( ID : bool ) { var ID : [ - false - false / ID ( ) [ ID ] [ ( ID ) ] - ID ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : [ ] bool { var ID : int var ID : bool return 123 * ( ( - - ( ID ) ) ) / false }",
  "func ID ( ID : int ) { var ID : bool var ID : [ ( ID ( ) [ - ( - ( ID ) ) ] ) ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID [ ( - ( ID ) ) ] [ ( ( ID ) ) ] ] [ ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ true / - ( 123 * - - false * - ( - - ID ) ) / false ] int , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : bool { }",
  "func ID ( ID : int ) { var ID : int var ID : int while - - ( - ID ) { } }",
  "func ID ( ID : [ ] [ - - - - ( - ( ( - - ( - false ) ) ) ) ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : bool ) { while ( - - true / - - ID * ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] [ ID [ ( ( ( 123 ) ) ) ] [ ID ] ] [ ] int var ID : int }",
  "func ID ( ID : int , ID : bool ) : int { var ID : [ - - ( - true ) ] [ ] [ ] int var ID : [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ] bool ) : [ ] bool { return true - ID + 123 } func ID ( ) { }",
  "func ID ( ) { ID ( 123 / - ID / ( ID [ true ] ) ) = 123 call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool ) { call ID ( ) return true * - - ( ID ( ) ) / - - - true }",
  "func ID ( ID : [ ] bool ) { if ID [ ID / ( 123 ) ] { } call ID ( ) }",
  "func ID ( ID : int , ID : [ ID [ ( - - ( ( ( false ) ) ) ) ] ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : int { var ID : [ ] int var ID : bool } func ID ( ID : int ) { }",
  "func ID ( ) : int { var ID : bool ID ( ) [ false * false / ( - true ) ] = true } func ID ( ) { }",
  "func ID ( ) : [ ] int { if - ( ( ( - - ID ) ) ) { } print true } func ID ( ) { }",
  "func ID ( ) : int { print false - ID [ ( 123 / ( ID ) / - ID ) ] [ false ] + ID { } } func ID ( ) { }",
  "func ID ( ) { while 123 / - true != - true and ID [ ID ] { } } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int var ID : [ ID [ ( - ID ) ] [ ID ] ] bool }",
  "func ID ( ) { var ID : [ ] int } func ID ( ID : [ ID [ ( ID ) ] [ ID ] ] bool ) { }",
  "func ID ( ID : [ ] int , ID : bool ) : int { var ID : int return ( ( - false ) ) } func ID ( ) { }",
  "func ID ( ) { return - true * ( ( - ( - 123 ) ) ) * false } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool return - ID [ 123 * ( ID ) ] } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ - ( ( - ID ( ) ) ) ] int var ID : [ ] bool }",
  "func ID ( ID : int , ID : bool ) : [ - ( ( ( false ) ) ) ] [ ] [ ] [ ] bool { }",
  "func ID ( ) { var ID : int }",
  "func ID ( ) : [ ] [ ] bool { while false / - ( false * - ( ID ) / - ( - - false ) ) { } { } }",
  "func ID ( ID : [ ( false * ID / - ID ( ) [ ID ] ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool while ID [ ID ( ) [ 123 ] ] { } print - ( ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool while ID ( ) [ 123 / - ( ( ( 123 ) ) ) / false ] { } }",
  "func ID ( ID : [ ] [ true and - ( - false / ( ( - - 123 ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] [ ] int { ID ( false - - - true - ( false ) ) = - false } func ID ( ) { }",
  "func ID ( ID : [ - ID ( ID ( ) [ ID ( ) ] [ ID ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : int }",
  "func ID ( ID : int , ID : int ) : [ ID ( ) / ID ( - false ) ] int { }",
  "func ID ( ) { call ID ( ( ( ID [ false ] ) ) ) }",
  "func ID ( ID : bool , ID : [ ] int ) : int { var ID : int var ID : bool return }",
  "func ID ( ID : int , ID : [ ( - - ( ID [ ID ] [ false ] ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ] [ ] [ ] bool ) { var ID : int }",
  "func ID ( ) { ID ( ) [ ( ID [ ( - ID ) ] [ ( ( ( ID ) ) ) ] ) ] = ( - false ) } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] bool { var ID : [ - ID ( ) [ ID ] [ true ] ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : int { var ID : bool call ID ( ) return - ( 123 ) }",
  "func ID ( ) : [ true / ( ID [ ID ( - ( ( - - ID ) ) ) ] [ ID ] ) / ( ID ) ] int { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ false / ID [ - true / ( - ID ) * - false ] [ ( ( ID ) ) ] ] [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ ID [ ID ( ( ID ) ) ] [ - ( ( ( 123 ) ) ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ ] int ) { var ID : int if - - - - - 123 { } } func ID ( ) { }",
  "func ID ( ) : [ true / true / ( - - ( true - - ( - ID ) + - ( ( ID ) ) ) ) ] int { }",
  "func ID ( ) { print ( - - ( ID ( ) [ ID ] ) ) print ID } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : [ - ( ( ID ) ) ] [ ] int var ID : int }",
  "func ID ( ) : bool { var ID : bool ID [ 123 - true - true * - ID * - 123 ] = - true }",
  "func ID ( ID : bool , ID : int ) : int { var ID : int { var ID : bool var ID : [ ( ( ( ID ) ) ) ] int } }",
  "func ID ( ) : bool { var ID : [ ] int var ID : bool ID ( 123 + ( ( ID ) ) + ID ) = - ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) : [ ( ( true * 123 * true ) ) ] bool { }",
  "func ID ( ) : [ ] [ ( ( false * - ( - - ( ( ( ( - - - - - ( ID ) ) ) ) ) ) * ( - - ID ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : [ ] int var ID : bool print ID ( ( - - ID ) ) if - - - ID { } } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool , ID : int ) { var ID : [ ] bool } func ID ( ID : bool , ID : [ ] bool ) { }",
  "func ID ( ID : bool ) { var ID : int print ( ID * false * - - ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : bool { var ID : int var ID : int return ID ( 123 ) } func ID ( ) { }",
  "func ID ( ) : [ ID ( 123 - - true / - true * ( 123 ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ ID ( - ( ( false ) ) ) ] [ 123 ] ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ false - ID [ true ] [ - ID ] ] int var ID : bool } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ID : bool ) { call ID ( ID ( ID ) ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : int call ID ( ID - - 123 / - ID ) while ID { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ( - ID * ID ( ) / ID ) ] int var ID : [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ true / 123 * false - - - ID [ ID ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) { while true and - ID [ ID [ true ] [ - - ID ] ] and false { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : int { print true / - - 123 and ID } func ID ( ) { }",
  "func ID ( ID : [ ] [ 123 * ( true * 123 + ( 123 ) ) * ID ] int ) { }",
  "func ID ( ID : int , ID : [ - - ( false * true / ( ID ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int return ( false + 123 != ( - true ) ) } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ] [ ] [ ] bool if ID [ false ] { } } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool , ID : bool ) : bool { var ID : [ ] [ 123 ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : [ ] int { var ID : [ ID [ false ] [ 123 ] ] bool }",
  "func ID ( ID : int , ID : int , ID : [ 123 - ( ( ( - ID ) ) ) + - ID ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : int ) : bool { var ID : [ - ( ( ID ) ) ] [ ] bool }",
  "func ID ( ) { return ( true * 123 ) + ID [ - - ID ] [ ( ( ID ) ) ] + false }",
  "func ID ( ID : bool , ID : [ ] bool , ID : bool ) : bool { var ID : int var ID : int if - 123 { } ID = true }",
  "func ID ( ) { var ID : bool var ID : bool print ( - ( - ID ) ) print true } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : int call ID ( ) ID ( ) [ ID ] [ ( - false ) ] = - ( ID ) }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : int call ID ( true / false ) { } }",
  "func ID ( ID : [ ] int ) { var ID : [ - - true and ID - - ( ID ) + ID ] bool }",
  "func ID ( ID : bool , ID : [ ( ( ID ( ) + - - ID ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ID ( ) * true * - - - ID ] int }",
  "func ID ( ID : int , ID : int ) : int { ID [ - 123 == ID ( ) ] = - 123 { } }",
  "func ID ( ID : int , ID : int ) { var ID : bool var ID : [ ( ID * ( true ) ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ID ( 123 * ( - - ( - - 123 ) ) ) ] [ ] [ ] bool }",
  "func ID ( ) : bool { var ID : [ - ID [ 123 * - ( ID ) ] [ - - ( - ( 123 ) ) ] ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] bool , ID : int ) { var ID : [ ] bool if ID { } }",
  "func ID ( ) { while 123 + true * false - 123 * - - - - ( ID ) * - - ( - ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { var ID : [ ] [ ] [ ] int var ID : bool }",
  "func ID ( ) { { } } func ID ( ) { var ID : int var ID : int while ID { } }",
  "func ID ( ) : [ ] bool { if ID ( ) [ ( ( - ( ID ) ) ) ] { } }",
  "func ID ( ID : int , ID : int , ID : [ ] int ) { } func ID ( ID : int , ID : [ ] bool , ID : bool ) { }",
  "func ID ( ) { var ID : bool var ID : int call ID ( ID ( ) * ID [ ( 123 ) ] [ 123 ] * ID ) while ( ID ) { } }",
  "func ID ( ID : [ ] bool , ID : bool ) : bool { var ID : bool return - false / ID }",
  "func ID ( ) { return true / false + true >= ID * - ( true ) * ID }",
  "func ID ( ID : [ ] int , ID : bool , ID : bool ) : int { var ID : [ ] [ ] int return } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] bool { var ID : bool var ID : int return } func ID ( ID : int , ID : [ ] bool ) { }",
  "func ID ( ) : [ 123 - ID ( ) - false * - ID and true ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : bool var ID : int ID [ ID ] = ( ( - false ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : int while ID ( ) { var ID : bool var ID : bool } ID = ( false ) } func ID ( ) { }",
  "func ID ( ) : bool { } func ID ( ) : int { var ID : bool var ID : int }",
  "func ID ( ) { var ID : bool var ID : int { var ID : [ ] int var ID : [ ( ( false ) ) ] [ ] [ ] bool } }",
  "func ID ( ID : bool , ID : [ ] bool , ID : [ ( ( true * - ( - ( ID ) ) ) ) ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : bool ) : int { call ID ( ) print ( ( true ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : [ ] int { print ID [ ( true ) ] [ ID ] }",
  "func ID ( ID : int , ID : int ) { var ID : [ ] [ false / ( 123 ) ] int var ID : bool }",
  "func ID ( ID : bool ) { var ID : [ ] int var ID : [ ID ( ( true ) ) ] int }",
  "func ID ( ID : bool , ID : bool ) : [ ] int { var ID : int var ID : bool ID ( - ID ) = false }",
  "func ID ( ) : [ ] bool { var ID : bool var ID : bool if ( ID * ( ID ) / ID ) { } { } } func ID ( ) { }",
  "func ID ( ID : bool ) { return } func ID ( ) { var ID : [ ID ( ) [ ( true ) ] [ ID ] ] [ ] int var ID : bool }",
  "func ID ( ID : [ ] [ true + 123 * - ( - ( - ( ID ) ) ) / ( false ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : bool var ID : bool while false * ID [ true ] { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : int if - - - false / ( - ( ID ) ) { } while false { } }",
  "func ID ( ) : [ true + 123 and ID ( ) [ 123 + ( - ID ) ] [ - 123 ] ] int { }",
  "func ID ( ) { var ID : [ ( ( ID ( ( - ( ID ) ) ) ) ) ] [ ] bool }",
  "func ID ( ) { var ID : int ID = - - ( ID ( ) + ID ) { } }",
  "func ID ( ) { var ID : [ ID ( ) [ ( ( ID ) ) ] [ - ( false ) ] ] [ ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] [ ] [ 123 - ID [ ( - false ) ] [ ID ] - false ] [ ] int { }",
  "func ID ( ID : [ false * ( - 123 <= ( true ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { return ( - - ( - ID [ ID ] [ ( true ) ] ) ) }",
  "func ID ( ) { var ID : [ ] bool } func ID ( ) : int { while ID ( ) [ ID ] [ ID ] { } }",
  "func ID ( ) { var ID : int ID [ - - ( 123 / ID [ - ID ] [ ( true ) ] * - ID ) ] = true } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool ) : bool { var ID : [ - ( - ID ) ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : [ - true * - false * ID ( ) ] int } func ID ( ) { }",
  "func ID ( ID : [ - 123 / ( 123 * - - ( true ) / - ID ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int { var ID : [ 123 and ( - - ID ) and ( ( - true ) ) ] bool var ID : [ ] int } print ID }",
  "func ID ( ID : int ) { var ID : int return true / ( ( false ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool { print ID ( ) [ false / 123 * false ] } { } }",
  "func ID ( ID : [ true + true / ( 123 - true * - ( false ) / ( ( ID ) ) ) * ID ] bool ) { }",
  "func ID ( ID : bool ) { var ID : bool call ID ( ID [ ( - ID ) ] [ ( ID ) ] ) }",
  "func ID ( ID : [ - - ID [ - - - ( - ( ( ( ID ) ) ) ) ] [ ( true ) ] ] int ) { }",
  "func ID ( ) { var ID : int var ID : [ ] int if - ( - true - - - - - ID + ID ) { } print false } func ID ( ) { }",
  "func ID ( ) { ID [ false * - ID ( - ID ( ) ) ] [ ID ] = ( - - true ) if ( true ) { } }",
  "func ID ( ) : int { while 123 / - - ID [ ID ( 123 ) ] [ - true ] { } if 123 { } }",
  "func ID ( ID : int , ID : int ) { } func ID ( ) : [ ID ( - ( ID ) ) ] [ ] [ ] bool { }",
  "func ID ( ) : [ - ( true * false / - 123 and ( ( ID ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : [ 123 * ID [ ID * true / true ] [ - - ID ] / ( - - true ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ 123 != ID ( ) + true ] [ false ] ] [ ] [ ] bool ) { }",
  "func ID ( ) { var ID : [ ] int var ID : [ ] [ - - true * ID ( ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { while true * 123 * ID [ ( ID ) ] [ - ( ID ) ] { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) + ( ( 123 / - 123 / - ( - ID ) ) ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ - false / 123 * ID ( - ( 123 ) ) ] bool ) { }",
  "func ID ( ID : int ) { var ID : int if ( false / ID [ 123 ] [ - false ] / ( ( - ( ID ) ) ) ) { } }",
  "func ID ( ID : [ ] [ ] [ ] bool , ID : bool , ID : [ ] int ) : int { var ID : int var ID : int }",
  "func ID ( ) : int { var ID : int var ID : bool return }",
  "func ID ( ) : [ - - - ID ( - false / ( false ) / true ) ] int { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool , ID : bool ) : bool { var ID : bool while 123 / ( 123 ) * true { } { } } func ID ( ) { }",
  "func ID ( ID : bool ) { return ID * 123 and 123 }",
  "func ID ( ID : bool , ID : int ) : [ ( ( ID ( true ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ - - ( ID ( false ) ) ] int , ID : bool ) { }",
  "func ID ( ID : bool , ID : [ ( ( ( ( - - ID ) ) ) ) ] [ ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool } func ID ( ) : int { var ID : bool var ID : [ ] int }",
  "func ID ( ID : int ) { call ID ( ) }",
  "func ID ( ID : bool ) { var ID : bool var ID : [ ID ( ) * - ( - false ) / false ] int }",
  "func ID ( ID : [ ( - ( 123 and ( ID ) ) ) ] int ) { }",
  "func ID ( ID : int , ID : [ ] int , ID : bool ) { while false * - ( ID ) { } { } }",
  "func ID ( ID : [ ] bool , ID : bool , ID : bool ) : bool { var ID : [ true / false ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : int var ID : [ ] [ ] [ ] [ ( ID ) ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ID * false * true + - - true ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) : [ ID ( true * ( 123 / false * ( ( ( 123 ) ) ) ) ) ] int { }",
  "func ID ( ID : [ ] bool , ID : int , ID : bool ) { var ID : bool } func ID ( ) { var ID : int }",
  "func ID ( ID : bool ) : bool { { ID ( ) = false * ID ( ) [ true ] [ ID ] * ID } { } }",
  "func ID ( ) : [ false / ( false / - false * ID ( ) [ ( 123 ) ] [ ( ( ID ) ) ] ) / ID ] [ ] bool { }",
  "func ID ( ) : [ ] int { var ID : bool var ID : int print - false * - ( ( ( ( ID ) ) ) ) }",
  "func ID ( ID : bool , ID : [ false / ( ( ( ( true ) ) ) ) / false ] bool , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ID ( ) [ - ( true - ( ( - ( - - ( true ) ) ) ) - - - ( ID ) ) ] ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : bool { print - ( ( - - ID ) ) print ( - true ) } print - ID }",
  "func ID ( ID : [ ] [ ] bool , ID : bool ) { var ID : int var ID : int ID ( ) [ ( ( ( - ID ) ) ) ] = - ( ID ) } func ID ( ) { }",
  "func ID ( ) : bool { return } func ID ( ) { var ID : bool print ( false ) }",
  "func ID ( ID : int ) { var ID : bool var ID : [ - - - 123 * ID - ( false ) ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ID * - - 123 and ( ID ) ] bool }",
  "func ID ( ID : int ) : bool { { print ID [ - ID * ( ID ) * false ] } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : int ) { var ID : [ true * ( 123 ) / ( ID ) ] bool }",
  "func ID ( ID : [ ( ID ( false / true * - - - ID ) ) ] bool ) { }",
  "func ID ( ID : bool ) : bool { var ID : bool var ID : [ ] bool call ID ( ID ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ false / ID / ID [ ID ] [ ( false ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) { print ID / ID ( ) [ ( ID ) ] [ ID ] }",
  "func ID ( ) : int { var ID : [ ID [ true and - - - ID ] ] [ ] [ ] int }",
  "func ID ( ) { } func ID ( ) : [ ID [ - 123 * ID ] [ false ] ] int { }",
  "func ID ( ) { var ID : bool var ID : [ ] [ ] bool while false / 123 + ( false ) { } ID = ( ID ) }",
  "func ID ( ID : bool , ID : int , ID : bool ) : int { var ID : bool var ID : [ false * false ] [ ] int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int } func ID ( ) { var ID : bool var ID : int print ID ID = ( ( true ) ) }",
  "func ID ( ) { var ID : bool { print 123 * false * - true != false ID = - ( - false ) } } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] int { var ID : bool ID = ( ( ( ID ) ) ) if 123 { } }",
  "func ID ( ) : int { var ID : bool if ID ( ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int ) : [ ] bool { var ID : int ID ( ( ( 123 ) ) ) = ( ( ( true ) ) ) }",
  "func ID ( ) { var ID : int call ID ( 123 + ( - true * ( - ( false ) ) ) - false ) }",
  "func ID ( ID : bool , ID : int , ID : [ ] [ ID [ ID ( ) ] [ - false ] ] bool ) { }",
  "func ID ( ID : bool ) { var ID : bool var ID : [ ( ID ( 123 ) ) ] [ ] bool }",
  "func ID ( ID : bool ) { call ID ( ) print - ( ID [ 123 ] [ - ID ] ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ true * 123 / - ( - - - ( ( ID ) ) ) ] bool ) { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : [ - ( ( ( ( true ) ) ) ) ] bool var ID : int }",
  "func ID ( ) : [ ] int { var ID : bool return }",
  "func ID ( ID : [ - - true * 123 + ( ( false ) ) + ( 123 ) ] int ) { }",
  "func ID ( ) : bool { var ID : bool call ID ( - - ( - ( 123 ) ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ID * false * true + ( ( - ( ( ( - ( - ID ) ) ) ) ) ) ] bool ) { }",
  "func ID ( ) : bool { var ID : int { var ID : [ ] bool print ( ( ID ) ) call ID ( ) } } func ID ( ) { }",
  "func ID ( ) { var ID : bool ID [ 123 * ( - - true * true ) / ( - - true ) ] [ ID ] = true }",
  "func ID ( ) { var ID : bool var ID : int if ( true * ID [ - true ] [ ( ( true ) ) ] * ID ) { } while false { } } func ID ( ) { }",
  "func ID ( ) : [ - - ID [ - 123 * ( ( true ) ) * - 123 ] [ ( ID ) ] ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : [ ( - ( ( 123 ) ) ) ] [ ] int var ID : [ ] bool }",
  "func ID ( ) : bool { ID ( ID * - ID ( - 123 ) ) = ID ID = 123 }",
  "func ID ( ID : bool ) : bool { var ID : [ ] bool if ID [ 123 ] { } }",
  "func ID ( ) : int { while ID [ - ID * ( ID ) * ID ] [ - - false ] { } }",
  "func ID ( ID : [ - - ID [ ID ( ) [ false + false + - - - - ID ] ] [ true ] ] int ) { }",
  "func ID ( ID : [ 123 / ( ID [ false + ID ] [ ( ID ) ] ) ] [ ] [ ] int ) { }",
  "func ID ( ) { return ( false * ( 123 * ( ID ) ) / ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool if - - - false * false + ( false ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool { var ID : bool var ID : int } call ID ( ) }",
  "func ID ( ID : [ - ( ( - ID ( - true ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int while ID [ - 123 / ID / ID ] [ false ] { } if ID { } }",
  "func ID ( ) { var ID : int var ID : [ ] [ ] int call ID ( true * ( ID ) / ( 123 ) ) }",
  "func ID ( ID : bool , ID : int ) { var ID : bool var ID : bool while ( - ID ) { } } func ID ( ) { }",
  "func ID ( ) { ID ( ) [ true * true + true * ID [ ID ] * true + ID ] [ ID ] = true print ( - false ) } func ID ( ) { }",
  "func ID ( ) : int { print ( ID >= - - ID [ false ] [ 123 ] ) }",
  "func ID ( ID : int , ID : int , ID : [ ] int ) : [ ] bool { var ID : [ - false ] [ ] bool }",
  "func ID ( ) : int { while true <= - true / ID [ 123 ] { } print ( false ) }",
  "func ID ( ) { if ( true / - ( ID ( ( ( ( - - ( - ID ) ) ) ) ) ) / true ) { } } func ID ( ) { }",
  "func ID ( ) { print ( false * - ( false + ID ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ - false / ID [ - ID ( ) [ ( ( true ) ) ] ] ] [ ] bool ) { }",
  "func ID ( ) : [ - ID [ true * true * ( ( - - ID ) ) ] [ ID ] ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int { var ID : int var ID : int return - 123 * ID } while ( ( ( false ) ) ) { } } func ID ( ) { }",
  "func ID ( ) : int { { var ID : [ ] int } }",
  "func ID ( ) : [ ] bool { var ID : bool var ID : int print true / 123 * ID [ ID ] [ 123 ] }",
  "func ID ( ID : int , ID : bool ) : bool { return ID ( ) * - - - ID ( ) }",
  "func ID ( ) : [ ] int { return ( ID ( ) * 123 - ID + - ID ) }",
  "func ID ( ) : bool { var ID : [ false / - false + 123 > ( - - - ID ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ - - true - - ID ( false * ( ( 123 ) ) / ID ) ] int }",
  "func ID ( ID : int , ID : [ ] bool , ID : int ) : int { var ID : int var ID : int while ID { } }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] bool { var ID : [ ] int var ID : bool if true { } if - ID { } } ID = - ( ID ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) : bool { var ID : [ ID ( ( ID ) ) ] bool var ID : [ ] [ ] bool }",
  "func ID ( ID : bool ) : int { return 123 / - true - 123 * ID ( ) - ( - ( - - ( ( ( ID ) ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { if 123 / true + - ID [ ID ] { } while ID { } }",
  "func ID ( ID : [ ] [ ] int , ID : bool , ID : [ ] int ) { while 123 * ( ( ( true ) ) ) * - true { } { } }",
  "func ID ( ID : int , ID : bool ) : bool { call ID ( ID and ID ( ) and ( 123 ) ) }",
  "func ID ( ) : [ ] [ ] [ ] [ ] bool { }",
  "func ID ( ) { var ID : bool var ID : [ ( ( ( ( ( false ) ) ) ) ) ] int } func ID ( ) { }",
  "func ID ( ) : [ - false / ( false / ( true * true ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) : bool { call ID ( ID ( ID ( ) [ true ] [ - true ] ) ) ID = ( - ID ) }",
  "func ID ( ID : bool ) : bool { } func ID ( ) { var ID : int print ID [ 123 ] ID = - false }",
  "func ID ( ) : [ false and ID [ - - - ( ID ) ] and - false ] bool { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : [ ID ( 123 * false * - - ( true ) ) ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : [ ( - false * false * ID ) ] bool }",
  "func ID ( ID : int , ID : [ ] bool , ID : int ) { if ( - ( ( false ) ) ) { } call ID ( ) }",
  "func ID ( ) : bool { return ( ( - ID [ - false ] ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( 123 <= - ID ( - ( ID ) ) ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { print ID [ - ( true * - false / ( ( ID ) ) ) ] [ - true ] ID = false } func ID ( ) { }",
  "func ID ( ) : [ - false * - false * 123 + - ID [ - ( false ) ] [ false ] - true ] bool { }",
  "func ID ( ID : [ ] [ ] [ ] int , ID : [ ] bool ) : [ ID ( ) / - ID / ID ] [ ] int { }",
  "func ID ( ID : [ ] [ ] [ ( ( ID ( - false ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool call ID ( ( ( ( ID ) ) ) ) if ( ( - - ID ) ) { } }",
  "func ID ( ) { { var ID : int call ID ( ) return ( ID [ - ID ] [ ID ] ) } } func ID ( ) { }",
  "func ID ( ID : [ ID ( ID ( false < - false ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( true / ( ID ( ) [ - ( - ( - - - ID ) ) ] ) / - ( false ) ) ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ( false * ( ( 123 ) ) / ( ID ) ) ] bool ) { }",
  "func ID ( ID : [ ] bool , ID : int ) { var ID : int } func ID ( ID : int , ID : int ) : int { }",
  "func ID ( ID : int , ID : [ ] int , ID : [ ] [ ] [ ] int ) { ID [ ( ( ID ) ) ] = true }",
  "func ID ( ) : int { var ID : [ ] bool ID = ID [ - false / ( ID ) / ( - ( ID ) ) ] [ ( false ) ] } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ID ( 123 + ( ID ) - ID ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : [ ] [ ] [ ID ( true ) ] [ ] [ ] [ ] bool }",
  "func ID ( ) { var ID : int var ID : int return } func ID ( ID : [ ] int ) : bool { ID = - ID }",
  "func ID ( ) { ID = - ID * ID ( false / ID / false ) / - - - true { } }",
  "func ID ( ID : int , ID : int , ID : int ) : bool { var ID : int print ID [ ( ( true ) ) ] }",
  "func ID ( ) { var ID : int var ID : int while - - false / ID [ ( ID ) ] { } { } }",
  "func ID ( ID : int , ID : [ 123 / ( ( ( ( 123 ) ) ) ) ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] bool { while ID ( ID * true / ( ( - ID ) ) ) { } if true { } } func ID ( ) { }",
  "func ID ( ) : bool { while ID / - ID + 123 / ( - false ) * ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ - ( false * true * ( ( - ID ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : [ - - true >= ID ( ID ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : int return ( false / - - true / ID ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : int { var ID : int var ID : bool return } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] int }",
  "func ID ( ) : [ ] [ ] int { call ID ( ) }",
  "func ID ( ) { while - ( - ( - 123 / ( - true ) / false ) ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ ] [ ] [ ( - ID ( - ID ) ) ] bool ) { }",
  "func ID ( ID : int , ID : [ ] bool ) { var ID : [ ( ID + - true ) ] int var ID : bool }",
  "func ID ( ID : int , ID : int ) : bool { while - ( - - ID ( ) ) { } }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] int return false * - ( true ) / - ( true ) }",
  "func ID ( ) { var ID : int call ID ( ) } func ID ( ID : [ ] int , ID : bool , ID : bool ) { }",
  "func ID ( ID : [ ] bool , ID : int , ID : bool ) : bool { call ID ( ) call ID ( ) return } func ID ( ) { }",
  "func ID ( ) { { var ID : [ - ID [ - ID [ ID ] [ ( - ID ) ] ] [ ID ] ] bool } if - - ( ( - true ) ) { } }",
  "func ID ( ) : int { var ID : [ ] [ ] bool if true * ( ( ( - - ID ) ) ) / ( ( ( ( 123 ) ) ) ) { } ID = ( - ( - ID ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : int return } func ID ( ) : [ ] bool { var ID : int { var ID : [ ] int var ID : bool } }",
  "func ID ( ID : bool , ID : int ) : bool { var ID : int var ID : [ false + 123 * - ID * 123 ] bool }",
  "func ID ( ) : bool { var ID : [ ] [ false != - ID ( ) [ - ID ] [ ( - false ) ] ] [ ] [ ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ) : [ ( - ( ID ( ) [ ( ( ( false ) ) ) ] ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : bool ) { call ID ( ) call ID ( ) }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : [ ] [ ID ( ( true ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : int var ID : int if - - ( ( 123 ) ) { } { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : [ ] int { var ID : int } return }",
  "func ID ( ) { var ID : bool call ID ( - true * true / ( ID ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ 123 / - - ( ID ( ) [ false ] [ true ] ) ] bool , ID : int ) { }",
  "func ID ( ) : [ ] [ ] int { var ID : bool var ID : bool return - 123 * ( ( - ( ID ) ) ) }",
  "func ID ( ID : int , ID : [ ] [ true / ID [ ID [ - false ] ] [ ID ] / 123 ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) : bool { } func ID ( ID : bool , ID : [ ] bool , ID : int ) : [ ID ] bool { }",
  "func ID ( ID : int , ID : bool ) { return } func ID ( ID : int ) { while - ( ID ) { } while true { } }",
  "func ID ( ) : bool { var ID : bool var ID : [ - true / 123 - true / - 123 / ID + ID ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( - ID ( - ID ( ) ) ) ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ] int { ID [ 123 - - - - false and true ] = ( ( - - - ( ID ) ) ) }",
  "func ID ( ) : [ - ( ID [ true / - - ( ID ) / - true ] [ ( false ) ] ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ] [ ] [ ] int call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] int var ID : [ ] [ ] [ ( false ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ true + - ID [ ( ( - - ( 123 ) ) ) ] + false ] int }",
  "func ID ( ID : bool , ID : [ ] int ) : int { var ID : int var ID : int return } func ID ( ID : bool , ID : int , ID : bool ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) : int { print - ID ( ID ) while 123 { } }",
  "func ID ( ) { var ID : [ ] bool print ID [ ( false * ID ) ] if ( - ( true ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ - false / - 123 / - true + ( ID ) - ( ( ID ) ) ] int ) { }",
  "func ID ( ) { var ID : int return ( ID / ID ( ID ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : int while false <= ( true / ( true ) * false ) { } } func ID ( ) { }",
  "func ID ( ID : int ) { call ID ( ) } func ID ( ID : int ) { var ID : [ ] int var ID : [ ] bool }",
  "func ID ( ID : [ ] bool , ID : int , ID : bool ) { var ID : [ ( ID ) ] [ ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { { var ID : int var ID : [ ( - ( true ) ) ] int } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] bool var ID : [ 123 <= true + ( ( ( ID ) ) ) ] int } func ID ( ) { }",
  "func ID ( ID : [ ( ID ( ) [ ( ID ( ) ) ] ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ID ( ) / ID ( ) * true - ( 123 ) ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ID : [ ] int , ID : int ) : bool { var ID : int var ID : [ ] bool } func ID ( ID : bool ) { }",
  "func ID ( ) : int { var ID : [ ] int var ID : [ ] [ ] [ ] bool ID ( ID ) = - ID }",
  "func ID ( ID : bool ) : bool { var ID : int while ( ID ( ) [ false ] ) { } { } }",
  "func ID ( ) : bool { var ID : [ - ( ID ( ID ( ) ) ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) { var ID : [ - - - ID ( ) [ false ] ] bool var ID : [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : bool ) : int { return ( ID [ ID [ - ( ( - - ID ) ) ] ] [ false ] ) }",
  "func ID ( ) { var ID : int var ID : [ ] [ ( - - ( ( - ID ) ) ) ] int } func ID ( ) { }",
  "func ID ( ID : [ ] [ 123 * ID ( ) [ true * - ID / ( ID ) ] [ - ( 123 ) ] / true ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( ( - - - ID [ ID ] ) ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool } func ID ( ) { var ID : bool ID [ ( ( - true ) ) ] [ ID ] = ID print 123 }",
  "func ID ( ) : int { while ( ( ( false / ( ( ( ( 123 ) ) ) ) ) ) ) { } }",
  "func ID ( ) : bool { print - - ID [ true + ID ( ) [ - - 123 ] ] [ - true ] } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int var ID : bool print ( ( ( - ( - ID ) ) ) ) { } }",
  "func ID ( ) { ID [ ( 123 / true + - ID ( ) ) ] = ID { } }",
  "func ID ( ) { while false * true + false * - ID ( true ) - true { } ID = ID }",
  "func ID ( ID : [ - - - false == ( ID + - ( ( false ) ) ) ] int ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) : [ true / ( 123 / - ( ( true ) ) * - ( - ID ) ) ] int { }",
  "func ID ( ID : bool ) { var ID : [ ( ( ID [ - ID ] [ ID ] ) ) ] int var ID : [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) : int { while - ( ID ( ) [ false / ( - ( false ) ) / ID ] [ - - - ( false ) ] ) { } if - ID { } } func ID ( ) { }",
  "func ID ( ID : [ ( ID + - ( false * true * ID ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int ID = ID [ ID ( ( ID ) ) ] [ ID ] } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : int while ID ( ) [ 123 ] [ - 123 ] { } while ( ( true ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : [ false / ID [ ( ( ID ) ) ] ] bool { }",
  "func ID ( ID : bool ) : [ - ( - true * ID ( ) [ ( true ) ] * false ) ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool { var ID : bool var ID : int call ID ( ( ( ID ) ) ) } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] int } func ID ( ID : int ) { var ID : int var ID : [ ] bool }",
  "func ID ( ) { var ID : [ true * ID [ 123 * - ID ( ) * ( 123 ) ] [ true ] * false ] int }",
  "func ID ( ID : [ ] [ ( ID [ ID ( ) [ ID ] [ ( - ( - ID ) ) ] ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : [ ] [ ] int while false * ( - 123 ) / ( - true ) { } }",
  "func ID ( ID : int , ID : [ false / ( ( ( ID ) ) ) / - - - ( 123 ) ] [ ] [ ] bool , ID : [ ] bool ) { }",
  "func ID ( ) : [ ( ID [ ( - ID ( ) ) ] [ ( false ) ] ) ] int { }",
  "func ID ( ID : bool ) : [ ] [ ] bool { var ID : bool } func ID ( ) : int { { var ID : int var ID : bool } ID = ( - true ) }",
  "func ID ( ) : bool { var ID : [ false / false ] [ ID ( ) ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ] int ) { var ID : [ ] [ ( ID ) ] int }",
  "func ID ( ) { ID ( ID ( ) [ false * false * ID ] [ ID ] ) = ( ID ) while - ID { } }",
  "func ID ( ID : int , ID : [ ] [ - ID [ ( true ) ] [ ID ] ] bool , ID : [ ] int ) { }",
  "func ID ( ID : bool , ID : bool ) { if ( false / ID [ ( ID ) ] [ - ID ] ) { } ID = true }",
  "func ID ( ) { var ID : bool var ID : [ ] bool return 123 - - - ( - - ID ) - ( false ) }",
  "func ID ( ) { var ID : [ ( 123 * - ID ( true ) / - ( ( ( - ( ID ) ) ) ) ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : bool if - ( 123 + ID + true ) { } print 123 } func ID ( ) { }",
  "func ID ( ) : [ ] [ ID ( ID ( ) / 123 + false ) ] bool { }",
  "func ID ( ID : [ ( false / ID ( ) / - - - ID ( ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int while - ID [ true and false ] { } }",
  "func ID ( ID : bool ) : [ ( ID [ - ( true ) ] ) ] [ ] bool { }",
  "func ID ( ID : bool ) { if ( ID [ - false / false / - true ] ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool if ( ID ( ) [ true ] [ - false ] ) { } if - - ID { } }",
  "func ID ( ) { var ID : bool if ID * ID [ ID [ ( ( ID ) ) ] ] { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ false - ( 123 - ( false ) ) ] bool ) { }",
  "func ID ( ID : [ - 123 + ID ( ) * ( - 123 + ( false ) ) / ID + ( ID ) ] [ ] bool ) { }",
  "func ID ( ) { print ID ( ( - ( ( ID ) ) ) ) call ID ( ) }",
  "func ID ( ID : int , ID : [ ( ID [ ( ID ) ] ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : int } func ID ( ID : [ true - - - true ] int ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) { var ID : [ ] int var ID : bool return }",
  "func ID ( ID : bool ) : bool { var ID : [ - 123 or ID ( ) [ - ID ] [ true ] or - false ] bool var ID : [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : int { ID [ ( ID ( - ( - - false ) ) ) ] = - - true } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) * - false * - ( - ID - ( ID ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ID ( - false * true + - ( ID ) + false ) ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { { call ID ( ) } return } func ID ( ) : bool { var ID : [ ] [ ] int }",
  "func ID ( ) : bool { var ID : bool if - ( true * ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ( 123 / false * 123 - - true - true ) ] bool ) { }",
  "func ID ( ID : bool ) { var ID : int ID ( - false / ID ( 123 ) * 123 ) = ( ID ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool while ( ( ID [ - ID ] [ ID ] ) ) { } { } }",
  "func ID ( ID : [ - - ID ( ID and ( true ) and ( ( - ( - ( ID ) ) ) ) ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : int { if 123 * true - ID [ - ID ] [ ( ( true ) ) ] + ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ false * ( ID [ ID ( ) ] [ 123 ] ) / true ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int print ( - ( - ( ( ( 123 ) ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : int var ID : bool { return } if ID { } }",
  "func ID ( ID : bool ) : [ ] bool { var ID : int var ID : int { var ID : int if - ID { } ID = false } }",
  "func ID ( ) : bool { while true * ID [ ID [ 123 ] ] [ ( ID ) ] { } print ID }",
  "func ID ( ID : int ) { var ID : bool { var ID : bool var ID : [ ( ( ( ID ) ) ) ] [ ] int } if ( - ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ) : int { { call ID ( - false - ( ID ) ) } }",
  "func ID ( ) : [ ID ( ( ID + ID ( ) - ID ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( ID [ ( - 123 ) ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ 123 - ( - - ( ID ) ) - - 123 ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : int { if true - false / ID ( - ID ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ ( ( ID ( - false * ( ( - false ) ) ) ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ true / 123 / - - ( ID ( ) ) ] int , ID : int ) { }",
  "func ID ( ) : int { var ID : bool var ID : bool return }",
  "func ID ( ) { var ID : int if ( - ( false / ( ( - ID ) ) ) ) { } print ID }",
  "func ID ( ID : [ ] bool ) : bool { while ( ( - - ( - ID ) ) ) { } { } }",
  "func ID ( ) { var ID : bool return ID [ ( - ( - false ) ) ] [ ID ] } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : int { var ID : int call ID ( ) if false { } } }",
  "func ID ( ) : int { var ID : [ ] int var ID : [ 123 * ( false ) ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : [ false * ID ( ) + 123 / true * ( ID ) - - ( ( ID ) ) ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : bool ID ( ID [ ID ] ) = - - ( ID ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : int if ( false - - - ( ( ( ID ) ) ) ) { } }",
  "func ID ( ID : bool ) { var ID : [ ID [ ( ( ( - ID ) ) ) ] ] int var ID : [ ] int }",
  "func ID ( ) : [ ] [ 123 / ID ( ) [ - - - - 123 ] / 123 ] int { } func ID ( ) { }",
  "func ID ( ) { print ID ( true / 123 >= - - - ID ) ID = ( ID ) }",
  "func ID ( ID : int , ID : [ ] int , ID : bool ) { var ID : bool var ID : bool { var ID : int var ID : bool } } func ID ( ) { }",
  "func ID ( ) : int { if ID ( ( ID - ( - ID ) ) ) { } ID = - ID }",
  "func ID ( ID : int ) { print false + false * ID [ ID ( ) ] - true }",
  "func ID ( ) { ID ( ) = ( true + false * 123 / ID ) }",
  "func ID ( ) : int { var ID : int if true { var ID : [ - ( ( false ) ) ] int } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] int , ID : [ 123 / 123 * ( - ID ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ - true + ID ( ( - ( ID ) ) ) + - ID ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int ) { print 123 / ( false - ID ( false ) + 123 ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int ) : bool { print ( ( ( ( ( ID ) ) ) ) ) }",
  "func ID ( ID : int ) : [ ] int { return - - - ID and - false } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : int if true * ID ( ) [ true ] [ true ] { } while ID { } }",
  "func ID ( ) : [ ] [ ] int { var ID : int while false >= - ID ( ) { } { } } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] bool { var ID : int var ID : int print ( ( - false ) ) }",
  "func ID ( ) { var ID : [ true - - ( - ( ID ) ) + ID ] [ ] int }",
  "func ID ( ) : [ - ID ( - true < true + - ID ) ] bool { }",
  "func ID ( ID : [ false * true * 123 <= ( ID ( true ) ) ] [ ] int ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) : int { var ID : int if 123 - - false + ( - 123 ) { } while ( ( - ( - false ) ) ) { } }",
  "func ID ( ) : bool { var ID : [ ] [ true * ( ID ( ) [ - ID ] ) / true ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool { print ID [ ( ( ID ) ) ] while ID { } } }",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : bool return }",
  "func ID ( ) { var ID : int var ID : bool return - ID [ ID ( ) * - ( ID ) ] }",
  "func ID ( ) : int { { if - ( ( false * ( true ) ) ) { } } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : [ true * ( ( ( ( - false ) ) ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool var ID : int return }",
  "func ID ( ID : [ ] int ) : int { var ID : bool var ID : bool ID ( ) = ID } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool ID ( ) = ( ID [ ( false ) ] [ ( - - false ) ] ) }",
  "func ID ( ID : [ ] bool ) : [ ] int { var ID : int call ID ( ( false ) ) while ( - true ) { } } func ID ( ) { }",
  "func ID ( ) : [ ( - - ID ( ) [ ID [ ID ] [ ( - ( - true ) ) ] ] ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] [ ] [ ] int if ID ( ) / ( true ) / ID { } while ( true ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] bool , ID : [ ID * 123 / ID ( ) ] [ ] bool ) { }",
  "func ID ( ID : int ) { return true / ( - true * false > 123 ) * ID } func ID ( ) { }",
  "func ID ( ID : [ ID ( true / ( true / ( - - ( ID ) ) / - ( ( ID ) ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ false - ID [ - - ( ( ID ) ) ] ] [ ] bool , ID : int ) { }",
  "func ID ( ) : int { var ID : int var ID : [ ] int while ( ID ( false ) ) { } ID = ID }",
  "func ID ( ) : [ 123 or - - 123 * ID [ - ID ] [ ID ] ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : int ID ( ) [ - ( 123 ) ] = true } func ID ( ) { }",
  "func ID ( ID : [ false / ( true * - ( - ID ( ) ) ) / false ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ - false / ID [ ( 123 ) ] [ - true ] ] [ ] [ ] [ ] int , ID : [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { { while - 123 >= - ID [ true ] { } } print true }",
  "func ID ( ID : int , ID : int ) : [ ] [ ] int { return } func ID ( ) : int { call ID ( ) print - ( ( ID ) ) }",
  "func ID ( ) : bool { var ID : int var ID : [ true * true / ID [ ID ] [ ID ] ] bool }",
  "func ID ( ) { var ID : int var ID : int while ID [ true ] + - ID { } }",
  "func ID ( ID : bool , ID : [ ] bool ) { var ID : int var ID : bool if ID ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ - ( ID [ ( ( true ) ) ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) { call ID ( ) call ID ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { var ID : int { var ID : int var ID : int call ID ( - - true ) { } } if - false { } }",
  "func ID ( ) : bool { var ID : int var ID : [ ] bool ID ( - 123 * false ) = ( false ) if ID { } }",
  "func ID ( ID : [ ] int ) : bool { var ID : bool var ID : int call ID ( ) print - ID }",
  "func ID ( ID : int , ID : bool , ID : bool ) : bool { var ID : int var ID : [ false * ID ] [ ] bool }",
  "func ID ( ID : bool , ID : [ ] bool ) : bool { return ID [ false * ID ] }",
  "func ID ( ID : bool , ID : int ) : int { var ID : [ true * ID [ - - - ( ( ( - ( ID ) ) ) ) ] [ - ID ] ] int var ID : int }",
  "func ID ( ID : bool ) { var ID : [ true / - 123 / 123 - ( ( ( ID ) ) ) ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : [ ] [ false * ID ( ) [ false ] / ID ] bool { }",
  "func ID ( ) { print ( - ID [ - ( ( true ) ) ] ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ true - 123 / false + ( true ) ] [ ] bool , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { { { var ID : [ ID [ ID ] [ ID ] ] bool } print - - false } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool } func ID ( ) : bool { var ID : bool var ID : int ID = true while ( ID ) { } }",
  "func ID ( ) { var ID : int var ID : bool while ( true - - - ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ ( ID [ ( ( ( false ) ) ) ] ) ] int ) { }",
  "func ID ( ID : [ ( - ( - ID [ - true ] [ - - ( - ID ) ] ) ) ] [ ] bool ) { }",
  "func ID ( ) { } func ID ( ID : int ) : [ ] [ - ( ( - ( ( 123 ) ) ) ) ] int { }",
  "func ID ( ID : bool , ID : int , ID : [ - ( - - ( true ) ) ] int ) { }",
  "func ID ( ID : bool ) { var ID : int ID ( ) = - ( ( ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : int var ID : int while 123 * - 123 / ( ( ( false ) ) ) { } if ID { } }",
  "func ID ( ) : [ ] int { var ID : [ - ( ( 123 * ID * - false ) ) ] [ ] bool }",
  "func ID ( ID : [ ] bool , ID : bool ) : [ ] [ - - ID ( ) [ ( - ID ) ] [ - ID ] ] [ ] bool { }",
  "func ID ( ) : bool { var ID : int var ID : [ ID ( ) [ - 123 ] [ false ] ] int }",
  "func ID ( ) : int { var ID : bool var ID : [ ( - ID ( - ID ) ) ] bool }",
  "func ID ( ) : bool { } func ID ( ID : [ ] bool , ID : [ ] int , ID : bool ) : bool { var ID : int }",
  "func ID ( ) : [ true + ID / - ( false + ( ID ) + - true ) * - - - ID ] int { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool ID [ false * ( true ) ] [ - ID ] = ID call ID ( ) }",
  "func ID ( ) { var ID : bool while ( ID * - false * ID ( ) ) { } if - 123 { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : int while true - 123 + ( - ID ) { } } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] bool { var ID : [ ID ( ) [ - - ID ] [ - 123 ] ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int ) : int { var ID : [ ] bool }",
  "func ID ( ) { var ID : int var ID : bool ID = ID ( ) [ ( - false ) ] }",
  "func ID ( ) { var ID : bool var ID : int call ID ( - ID ( ) [ ( ( true ) ) ] ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : int } func ID ( ) : int { print ID - 123 }",
  "func ID ( ID : bool , ID : [ ] [ - ( true * ID ( ) [ ( ID ) ] ) ] [ ] [ ] [ ] [ ] [ ] int , ID : int ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : [ ID [ 123 / ID / ( true ) ] ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ false * ( ID [ ( ID ) ] [ ID ] ) / true ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID ( ID ( ID ( ) ) ) ] bool , ID : [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool if - ( ( - false - true ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool } func ID ( ) : int { var ID : [ ] int print - - ID { } }",
  "func ID ( ID : int , ID : bool ) : [ ] bool { call ID ( ) if true * ID { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ] bool var ID : int if ( - ( true ) ) { } while - ID { } }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : bool if 123 * ( false ) { } if ID { } }",
  "func ID ( ) : int { var ID : int var ID : bool { var ID : [ ] [ 123 * - - - - ( ID ) * ID ] bool var ID : bool } }",
  "func ID ( ) { var ID : [ true - ID ( ) [ - ID ( ) ] [ ( false ) ] + ( - - ( ID ) ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ID ( - ( ID ) ) ] bool var ID : int }",
  "func ID ( ) { var ID : int } func ID ( ) { var ID : [ ] [ ] [ ] bool }",
  "func ID ( ID : bool , ID : int ) { var ID : [ ] [ ID [ - false ] ] bool var ID : [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID ( - - ID ( ) * ID ) ] int , ID : int ) { }",
  "func ID ( ) : int { var ID : int var ID : int ID ( ) = ID * true + - 123 - - false } func ID ( ) { }",
  "func ID ( ) { var ID : bool while ( - ID ( ID ( ) ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool ID ( - ID ( ) [ ID ] [ - false ] ) = ID while ( - ( ( ( ( - true ) ) ) ) ) { } }",
  "func ID ( ) : int { ID ( ) [ 123 * ( - false / true ) ] = 123 }",
  "func ID ( ) : bool { var ID : int { ID ( ID / ( ID ) ) = ID if ( ( false ) ) { } } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool ) { return ID [ - ( ID ) ] [ - 123 ] } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : [ ] [ ] [ ID ( true ) ] int }",
  "func ID ( ID : [ ID [ ( - ( ( 123 ) ) ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ID [ - ( ID / false <= ( ID ) ) ] ] [ ] [ ] bool ) { }",
  "func ID ( ID : int , ID : int ) { var ID : bool var ID : int }",
  "func ID ( ) : [ ( - - - ID * ( 123 * true ) ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ) { while - - - - ID [ - ( false ) ] { } }",
  "func ID ( ) : [ ] int { var ID : [ ( ID + true / - ID ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) : int { while ( - ( ( false * true * false ) ) ) { } }",
  "func ID ( ID : [ ] [ ( 123 * ( ID ( ) [ ( ( - true ) ) ] [ 123 ] ) * - true ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ] int , ID : bool ) { var ID : [ ] bool return }",
  "func ID ( ) { var ID : int var ID : int call ID ( 123 * ( ID ( ) ) * ID ) }",
  "func ID ( ) : int { var ID : bool call ID ( ID / ( - ID ) ) print ID } func ID ( ) { }",
  "func ID ( ID : bool ) { print ID [ ( - ( - ID ) ) ] } func ID ( ) { }",
  "func ID ( ) { print - - 123 / 123 + 123 * - ( ( ( ( false ) ) ) ) - - - false } func ID ( ) { }",
  "func ID ( ) { var ID : [ 123 - ID [ - false * ID / - true ] [ - ( - - - ID ) ] + - - - - ID ] [ ] int }",
  "func ID ( ) : bool { var ID : [ ] [ ] int return }",
  "func ID ( ) : bool { return 123 / ID [ ID [ 123 ] ] * ( - false ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ID : [ ( ( ID [ ID ] [ - true ] ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ] [ ] int return } func ID ( ID : bool , ID : [ ] bool ) { }",
  "func ID ( ) : int { return } func ID ( ID : [ ( ID ( ) [ - ID ] ) ] [ ] int ) { }",
  "func ID ( ID : [ ] int ) { print - ID ( ID ( 123 ) ) }",
  "func ID ( ) : [ ] int { print ( ID [ ( ( ( ( - true ) ) ) ) ] ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] bool return } func ID ( ID : int ) { ID ( ) = ID ID = ( - false ) }",
  "func ID ( ID : [ - ( ID [ ID [ - ID ] ] ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ - 123 / 123 - ID [ false * ID ( ) ] ] [ ] [ ] int ) { }",
  "func ID ( ) { var ID : int var ID : [ ( false + - ( ( ID ) ) + - true ) ] bool }",
  "func ID ( ) : int { var ID : int if ( - - ID [ ID ] [ 123 ] ) { } }",
  "func ID ( ) { if ( ID * true * ID [ ( - ( true ) ) ] [ ( ID ) ] ) { } if ID { } } func ID ( ) { }",
  "func ID ( ) : int { { var ID : [ ] [ false / - - ( true ) / ( ( true ) ) ] [ ] bool } if ( ( 123 ) ) { } }",
  "func ID ( ) : bool { var ID : bool var ID : [ ( true - - ( ID ) + ( - ( - ( - ID ) ) ) ) ] bool }",
  "func ID ( ID : [ - - ( - ( ID ( ) [ ( ID ) ] ) ) ] [ ] [ ] [ ] [ ] [ ] int ) { }",
  "func ID ( ) { while ID ( ) [ ID ( - ID ) ] { } }",
  "func ID ( ID : [ ( ( ( - false > true ) ) ) ] [ ] [ ] bool ) { }",
  "func ID ( ) { { var ID : bool } }",
  "func ID ( ) : int { var ID : bool var ID : [ ( ( 123 == false ) ) ] [ ] int } func ID ( ) { }",
  "func ID ( ) { ID [ 123 / ID [ ID ( - ( ID ) ) ] * false ] = ID } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] bool { var ID : [ ID [ true / 123 / false ] ] bool var ID : [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) { ID [ ( 123 * - true == - 123 ) ] [ - - ( - - ID ) ] = - true }",
  "func ID ( ID : [ ID [ - ( 123 + ID [ - true ] [ - true ] ) ] [ ID ] ] bool ) { }",
  "func ID ( ID : [ ] int , ID : [ ID * 123 - ID ( 123 ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { while ID [ ID ( ID [ ( true ) ] ) ] { } ID = ( false ) }",
  "func ID ( ID : int , ID : bool ) : bool { return true / false + 123 * ( - - 123 ) - 123 } func ID ( ) { }",
  "func ID ( ) { var ID : bool ID ( ) = ( true and ( ( false ) ) and ID ) }",
  "func ID ( ID : bool ) { var ID : int return ( ( ID [ ( - ID ) ] [ - 123 ] ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : int { while - false * ( false - - ID + ID ) { } print - ID }",
  "func ID ( ID : bool ) : int { var ID : bool var ID : bool while 123 * - ID ( ) * 123 { } ID = - ( - ( ( ( 123 ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : bool { var ID : [ ] int var ID : int while ( ( - true ) ) { } ID = ( ( 123 ) ) } if ( - - true ) { } }",
  "func ID ( ID : [ ] int , ID : bool ) { var ID : bool var ID : int call ID ( ) }",
  "func ID ( ID : int ) : [ ( - - ID [ ( ID ) ] ) ] int { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] [ 123 / - - ( - 123 ) / ( ( 123 ) ) ] [ ] int var ID : [ ] [ ] [ ] bool }",
  "func ID ( ) : bool { { var ID : int ID [ ( true - ID ) ] = ( ID ) print ( 123 ) } }",
  "func ID ( ID : int , ID : int , ID : [ ] [ - - ( 123 * - ( true ) ) ] [ ] int ) { }",
  "func ID ( ) { var ID : int var ID : int call ID ( ) }",
  "func ID ( ) : int { var ID : int return ( - ID ( - - false ) ) }",
  "func ID ( ID : [ ] [ false + true * true * - - ( ID ) - ( ID ) ] int ) { }",
  "func ID ( ID : [ - - ID [ - true / - true and - ID and ID ] ] [ ] int ) { }",
  "func ID ( ) { var ID : [ ] int if ( false * ( true ) * - 123 ) { } } func ID ( ) { }",
  "func ID ( ID : [ 123 + ID [ ( - - 123 / true ) ] [ ( 123 ) ] ] [ ] int ) { }",
  "func ID ( ) : [ ] [ - ( ( - - 123 * true * 123 ) ) ] [ ] int { }",
  "func ID ( ) : int { var ID : [ ] [ ] int if true / - ID [ - ID ] [ ID ] { } { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool if 123 - ( - ( - - ( ID ) ) ) { } { } } func ID ( ) { }",
  "func ID ( ID : [ true / - - ID [ ID [ ( ID ) ] [ - ID ] ] [ 123 ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] int ) { var ID : [ ] [ ] bool var ID : [ ( ID ) ] int } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ 123 / 123 / - 123 or ID ] ] [ ] [ ] [ ] [ ] int ) { }",
  "func ID ( ) : [ ID / ID ( false / true and ID ) ] [ ] int { }",
  "func ID ( ) { var ID : int var ID : bool return ( ( false / ID ) ) }",
  "func ID ( ) : [ ID ( - - ( true >= ID ) ) ] bool { }",
  "func ID ( ID : bool ) : int { } func ID ( ID : bool , ID : [ ] int , ID : int ) : int { var ID : bool }",
  "func ID ( ) : [ ] int { { var ID : [ ] bool var ID : [ ID ( ) ] int } }",
  "func ID ( ID : int , ID : int , ID : [ ( - ID [ false ] ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { var ID : int return false * ( ID [ ( ( ( - - ID ) ) ) ] ) } func ID ( ) { }",
  "func ID ( ) { return } func ID ( ) { ID [ - 123 <= 123 ] = - 123 ID = 123 }",
  "func ID ( ID : [ ] [ ] bool , ID : int , ID : bool ) { var ID : int return - true } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int ) : int { var ID : int if ID [ ID ] [ ( ( - ( ( ( true ) ) ) ) ) ] { } if true { } }",
  "func ID ( ID : [ false / ( ID ( - ID [ ( true ) ] [ ( - ID ) ] ) ) / 123 ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ ID - ( ID * - true ) - 123 ] int ) { }",
  "func ID ( ID : bool , ID : [ true == - ID ( - ID [ - ( true ) ] [ - - - false ] ) ] int ) { }",
  "func ID ( ID : [ ID ( ) [ ID / ID - ID * - 123 * ID ] ] [ ] int ) { }",
  "func ID ( ID : int ) : int { var ID : int call ID ( ( ID ( - 123 ) ) ) } func ID ( ) { }",
  "func ID ( ID : int ) : bool { while ( - - ID ( ) [ - ID ] ) { } while - ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool print ( ID * ID / - - 123 ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ true / ( ( ( true ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ - ( true - - - ( ID ) + - - ( ( true ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ID ( ) [ ID [ ( - ID ) ] [ 123 ] ] ] int { }",
  "func ID ( ) { var ID : [ - false - ID [ false / ID * - true ] + false ] bool var ID : [ ] int } func ID ( ) { }",
  "func ID ( ) : bool { return ( false / false - - ID ( ) ) } func ID ( ) { }",
  "func ID ( ) : [ ] [ ( ID / ( - ID ( ) ) / - 123 ) ] bool { }",
  "func ID ( ID : [ ] bool , ID : bool ) : bool { var ID : int var ID : [ false * - true ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : bool { return ID ( ) [ - ID ] }",
  "func ID ( ID : int ) : bool { var ID : bool var ID : bool call ID ( - false * ( true ) ) } func ID ( ) { }",
  "func ID ( ) { call ID ( ID ( - ID ( ID ) ) ) if - ( - true ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ID - ID ( - 123 ) - - - - ID ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { return 123 + ( ( ID ( ) [ ID ] [ true ] ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : int { var ID : bool } } func ID ( ) : [ ( ID ) ] bool { }",
  "func ID ( ID : bool ) : [ ] [ true - ID ( ID ( ID ) ) + - true ] [ ] [ ] int { }",
  "func ID ( ID : int ) { var ID : [ true - ID / ( - - - ID ) / ( ( ID ) ) - false ] bool var ID : bool }",
  "func ID ( ID : bool , ID : int ) { var ID : int var ID : int ID = ID [ - ( - false ) ] } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : [ ] [ true / - - ID ( false ) * - ID ] int { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool var ID : [ ] bool return false / ID ( - true ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : int while ID [ ID ( ID ) ] { } } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : [ ] [ ( - true != ( ( ID ) ) ) ] int } func ID ( ) { }",
  "func ID ( ID : int ) : [ 123 * false + false - ID [ ( ( ID ) ) ] ] int { }",
  "func ID ( ID : int ) { var ID : int var ID : int print 123 / false * - - ( ID ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] int ) : bool { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : [ ( ID * - ( ID ) * ( ( 123 ) ) ) ] int { }",
  "func ID ( ID : int , ID : [ ] bool ) : bool { var ID : bool var ID : bool while ID ( ) { } }",
  "func ID ( ) : int { var ID : bool if ( - - true + ( true ) ) { } if ID { } } func ID ( ) { }",
  "func ID ( ) { ID [ - true / ( ID ( ( - - true ) ) ) ] [ ID ] = ( ( - ( - false ) ) ) call ID ( ) }",
  "func ID ( ID : bool , ID : bool ) : [ ] bool { var ID : [ 123 / - true * - - ( true ) ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) : int { return - - true / - ( true / - ( - ( ( - ID ) ) ) / - - ID ) }",
  "func ID ( ) { print ID ( - ( - - 123 * ( - ( - - - ( - ID ) ) ) ) ) }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : bool if - false == ( ID ) { } ID = - false }",
  "func ID ( ID : int , ID : [ ] int ) : int { ID ( ) [ - - ( - ( - true ) ) ] [ - - - - ( ID ) ] = ID ID = ( false ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool call ID ( - ( ( true ) ) ) }",
  "func ID ( ) { var ID : bool return }",
  "func ID ( ) : bool { { if ID ( ( true / ID ) ) { } } while false { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( ID [ - ( ID ) ] [ false ] ) ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int ) { if ID * ID [ ( ( ( ( ( 123 ) ) ) ) ) ] [ ID ] / - - ID { } }",
  "func ID ( ) { print ( ID ( ( ID [ - ( - ( ( false ) ) ) ] ) ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] bool while true / ID [ ( false ) ] [ ( ( true ) ) ] { } }",
  "func ID ( ID : [ ] [ ID + ID ( ( ID ) ) - ID ] bool ) { }",
  "func ID ( ID : bool ) { var ID : bool var ID : [ - - true and false * 123 / 123 ] int } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] bool { var ID : [ ( ID [ ID ] [ ID ] ) ] bool } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : int print ( - ( ID ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : int call ID ( 123 / - ( false ) ) if - ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( - 123 / ID [ ID ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : int while ( true * ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ID [ 123 / ( - - ID ) ] [ ( ( ID ) ) ] ] int var ID : [ ] int }",
  "func ID ( ) : bool { var ID : [ ] [ ] [ ID [ ID [ false ] ] ] int }",
  "func ID ( ) { } func ID ( ) : [ ] bool { while ID ( ( true ) ) { } }",
  "func ID ( ) { var ID : [ ID [ ( ID [ ID ] ) ] ] [ ] [ ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : bool ) : int { } func ID ( ID : int ) { return ID ( ( ( ( ID ) ) ) ) }",
  "func ID ( ID : [ ] [ ] [ - - - ( ID ( ) * - ID * - ( ( - - ID ) ) ) ] int ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { var ID : int } func ID ( ) : [ ] int { var ID : [ ] [ ] bool var ID : int }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : bool var ID : bool if false / - ( - ( ( ID ) ) ) { } if ID { } }",
  "func ID ( ) { var ID : [ ] int var ID : [ - ID ( ) [ true ] [ 123 ] ] [ ] bool }",
  "func ID ( ) { var ID : [ ID / ID * ( - - - ( - - ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : int print ID ( ) [ - 123 / ( ID ) / true ] [ false ] } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int , ID : int , ID : int ) { var ID : int while - - false { } call ID ( ) }",
  "func ID ( ID : [ ID [ - ( ID ( - ( ( 123 ) ) ) ) ] ] int ) { }",
  "func ID ( ) : [ ] bool { ID [ ID ( ) [ - - ( ID ) ] ] = - true ID = - ID } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ - ID ( 123 * ( ( false ) ) ) ] bool var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int while - ID ( - false * ID * ID ) { } }",
  "func ID ( ID : [ ] bool , ID : int , ID : int ) : int { var ID : bool return }",
  "func ID ( ID : [ ] [ true / ( 123 / true < ID ) * false ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ] [ ] bool ) { var ID : bool var ID : int while - ( ID ) { } { } }",
  "func ID ( ) { } func ID ( ID : bool , ID : bool , ID : int ) { var ID : bool if ID { } }",
  "func ID ( ID : [ 123 / - - ( ID ( ) + ID > ID ) / ( ID ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) { var ID : [ - ( ( ID ) ) ] int }",
  "func ID ( ID : [ ] int ) { var ID : [ ] int var ID : [ ] bool { var ID : bool var ID : [ ] bool } }",
  "func ID ( ID : bool ) : bool { var ID : [ - ( false / - false - true ) ] [ ] int } func ID ( ) { }",
  "func ID ( ) { { var ID : bool var ID : int ID ( - true * 123 - ID ) = false while ID { } } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] [ ] [ ] bool var ID : int return true / ID } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int var ID : bool ID [ ( ID [ ID ] [ false ] ) ] = - true }",
  "func ID ( ) { var ID : bool var ID : [ ] bool call ID ( ) }",
  "func ID ( ID : [ ] bool , ID : bool , ID : int ) : bool { var ID : bool var ID : [ ] [ ] int call ID ( ) { } }",
  "func ID ( ID : int , ID : int , ID : [ ID ( ) * 123 / ID ( - ( ( ( false ) ) ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { while - 123 - 123 / ID and - ID ( ) { } { } }",
  "func ID ( ID : [ ] bool , ID : [ - false - - false * ( false ) / false + ID ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : [ ID [ true / ID [ - ( - ID ) ] [ 123 ] / ( ( true ) ) ] [ false ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ( - ID [ ( ( ID ) ) ] ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : [ - ID - 123 / ID ( ID ( ) ) / ID + - ID ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) : int { { var ID : bool if ( ID ) { } print ( ( true ) ) } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) : [ ] int { var ID : [ ID ( - - ( - false ) ) ] int var ID : int }",
  "func ID ( ID : [ - ( - ID ( ID / ID / false ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool if - ( - - ( - - ( ( ID ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int , ID : [ ] int ) : int { }",
  "func ID ( ID : int , ID : int , ID : bool ) : bool { var ID : bool }",
  "func ID ( ) : [ ] [ ] int { var ID : int var ID : bool return } func ID ( ) : [ ( - - true ) ] bool { }",
  "func ID ( ) : int { var ID : [ ID ( ) [ - ( ID ) ] [ ID ] ] int var ID : [ ] int }",
  "func ID ( ) { var ID : bool var ID : int print ID ( ) > - ID ( ) }",
  "func ID ( ID : [ ( - ( ( ID [ ID ] ) ) ) ] [ ] bool ) { }",
  "func ID ( ) { var ID : bool var ID : int if ( ( ( - - - - ( ( 123 ) ) ) ) ) { } }",
  "func ID ( ) : [ ] int { var ID : [ - true / - - 123 * ID ( ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( ID ( ) [ ID / ( false ) / ( ( 123 ) ) ] ) ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool print ID [ - ( - ID ) ] [ false ] call ID ( ) }",
  "func ID ( ) : int { var ID : int var ID : int { var ID : bool var ID : int call ID ( - ID ) } call ID ( ) }",
  "func ID ( ) : int { var ID : [ ] [ ] int call ID ( ) if - ID ( ID ) { } }",
  "func ID ( ) : bool { var ID : [ ] int var ID : int return false / ( ( false ) ) }",
  "func ID ( ID : int ) { while ( ( false + ID [ false ] [ 123 ] - ( - ID ) ) ) { } while ( ( - ID ) ) { } }",
  "func ID ( ) { var ID : int var ID : int while 123 + - false * - ID ( ) / ID { } if true { } }",
  "func ID ( ID : int , ID : [ ] int , ID : bool ) : [ ( ( true ) ) ] [ ] int { }",
  "func ID ( ) { var ID : int var ID : int ID [ ( ID [ - ( 123 ) ] [ ID ] ) ] [ ID ] = ( ( - ID ) ) print ID }",
  "func ID ( ) { var ID : int var ID : int return - ID [ ( ( - false ) ) ] [ ( - ID ) ] }",
  "func ID ( ) { if - true / - - ( true > 123 - - ( - ID ) + ID ) / 123 { } ID = - false } func ID ( ) { }",
  "func ID ( ) { { var ID : int var ID : int if ID [ - - true ] [ 123 ] { } call ID ( ) } print ID } func ID ( ) { }",
  "func ID ( ) { if - - 123 / ID ( ID [ ID ] ) / ( ( ( ( ( true ) ) ) ) ) { } ID = ( false ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : int { return ID [ - ( - ID ) ] [ 123 ] } func ID ( ) { }",
  "func ID ( ) { print 123 + - ( ( 123 + ( - ( - false ) ) ) ) } func ID ( ) { }",
  "func ID ( ) : int { return ( ( - ( - - true ) ) ) }",
  "func ID ( ) : bool { var ID : [ true / ( ( ID / false * ( ID ) ) ) ] int var ID : int }",
  "func ID ( ) : int { var ID : [ ID / - ( ( ( - ( false ) ) ) ) * ID ] bool }",
  "func ID ( ID : bool , ID : int , ID : [ ] [ true + - - 123 and - true and ID ] [ ] int ) { }",
  "func ID ( ) { call ID ( - ( ( - - ID ( ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) { var ID : bool var ID : [ ( ( ( ID ) ) ) ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] int var ID : bool while ID ( ) [ ( false ) ] [ ( - ( - ( ( ( ID ) ) ) ) ) ] { } } func ID ( ) { }",
  "func ID ( ID : [ ID / ID ( ) [ - ID ( ) [ - ID ] [ 123 ] ] [ - true ] ] [ ] [ ] bool ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) : bool { var ID : int var ID : int call ID ( ) { var ID : bool var ID : [ ] bool } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int ) : int { var ID : [ ] [ - false / ( ( ID ) ) / true ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) : int { var ID : [ - ( ( ( ID ) ) ) ] bool }",
  "func ID ( ) { ID [ ( ID [ 123 + ID - ( 123 ) ] ) ] [ true ] = ID }",
  "func ID ( ID : int , ID : bool , ID : int ) : int { { var ID : int } }",
  "func ID ( ID : int , ID : bool , ID : bool ) : [ ( ( ID ( ) ) ) ] bool { }",
  "func ID ( ) { var ID : int var ID : [ ] [ ID ( ) [ - ID ] [ ( true ) ] ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var ID : int var ID : bool while ( - ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID : bool }",
  "func ID ( ) { var ID : bool { var ID : int var ID : bool while 123 + true / ( ( 123 ) ) + - ID { } } if 123 { } }",
  "func ID ( ) { if ID * false * ID - ( ID ( ) ) { } }",
  "func ID ( ) { var ID : bool var ID : bool ID = ( - 123 != - ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : bool var ID : int if ID / - ID ( ) * - false { } }",
  "func ID ( ID : [ ID ( - - ID [ false / false * false ] ) ] int ) { }",
  "func ID ( ID : [ ] bool , ID : int ) : int { var ID : int var ID : int }",
  "func ID ( ) { var ID : bool var ID : int if 123 - ( - - 123 ) + ID { } }",
  "func ID ( ID : bool , ID : [ ID ( ) [ - true - ID [ ID ] + ID ] [ ID ] ] [ ] int , ID : [ ] [ ] bool ) { }",
  "func ID ( ID : [ ] int , ID : bool , ID : bool ) { var ID : int var ID : bool if ID { } } func ID ( ) { }",
  "func ID ( ) : [ ] bool { print false * ( ID ( ( - ( - - 123 ) ) ) ) * ( - true ) call ID ( ) }",
  "func ID ( ) { call ID ( ) print - ( - ID - false / - false / - - ID + - - true ) }",
  "func ID ( ID : int , ID : [ ] int ) { while ( - ( false ) ) { } { } } func ID ( ) { }",
  "func ID ( ) { ID ( ) [ true / - 123 / ( - ( ( ( - - 123 ) ) ) ) ] [ ID ] = 123 }",
  "func ID ( ) { var ID : int var ID : bool if - ( true / ( ( true ) ) / false ) { } { } } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] int { var ID : [ false * ( ID [ - ID ] ) ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : bool ID ( ) [ true + ID [ - false ] - - - - ID ] [ - - - true ] = ( ( - - - false ) ) call ID ( ) }",
  "func ID ( ) : bool { ID [ ( ID [ true + - ID + true ] [ ( 123 ) ] ) ] [ - - - 123 ] = 123 while ( ID ) { } }",
  "func ID ( ) : [ true * - ID ( ) [ ID ( 123 ) ] ] [ ] bool { }",
  "func ID ( ID : bool ) : int { var ID : int print ID * - - ID ( ID ) / - ( - ID ) } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ ] [ false / 123 * - false + ( ( true ) ) + ( 123 ) ] [ ] bool ) { }",
  "func ID ( ID : int , ID : [ false / ID [ - false * - ID ] [ false ] * - - ( - true ) ] [ ] [ ] int ) { }",
  "func ID ( ) : int { var ID : bool var ID : [ ] int if ( ( - ID ) ) { } { } }",
  "func ID ( ID : int , ID : bool , ID : bool ) : [ ] bool { var ID : int var ID : bool }",
  "func ID ( ) : int { var ID : bool var ID : [ ] [ ] [ ( ID ( ) ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - - - ID ( ID [ true ] [ ID ] ) ] [ ] bool , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) : [ 123 - 123 / ID - ID [ ( ID ) ] ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - true - ID [ 123 / - - false ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) { while - - - ( - true / ID < ID ) { } { } }",
  "func ID ( ) { var ID : int } func ID ( ) { var ID : bool var ID : bool ID ( false ) = ( false ) call ID ( ) }",
  "func ID ( ) { var ID : [ ] bool var ID : int return 123 * - - ID [ ID ] [ false ] / - ID }",
  "func ID ( ) { var ID : [ ] int print - - ( true / - - ( 123 ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) : bool { print true * ( ( ID ) ) * false } func ID ( ) { }",
  "func ID ( ID : [ - ID ( ) * 123 or ID [ ID ] [ ID ] or - ( false ) ] bool ) { }",
  "func ID ( ) : [ ID and ID ( ) * false / 123 == ( ( ID ) ) and false ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) { print false / 123 * ( ( - ( false ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : int ) : int { if ID ( ( ID ( ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ ( ID and - - - ( false ) and false ) ] [ ] bool ) { }",
  "func ID ( ID : int ) { var ID : bool return 123 / ID [ - ( false ) ] * ID } func ID ( ) { }",
  "func ID ( ) { return - true + 123 / 123 } func ID ( ) : bool { var ID : int var ID : int }",
  "func ID ( ) { var ID : [ - true * ID [ 123 / - ID ] [ 123 ] * ( - ( 123 ) ) ] [ ] int var ID : bool }",
  "func ID ( ID : [ ID ( - - ( ( 123 ) ) ) ] int ) { }",
  "func ID ( ) : bool { } func ID ( ID : [ ] bool , ID : int , ID : int ) : [ ] bool { var ID : int var ID : [ ] bool }",
  "func ID ( ID : int , ID : [ ID ( true / ID ( ) - - false ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool print ID ( ) * - ( 123 ) }",
  "func ID ( ) { ID = ( false / true + true and - false ) }",
  "func ID ( ID : bool ) { var ID : int var ID : int }",
  "func ID ( ID : int , ID : int ) { call ID ( 123 / - 123 / ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ] int ) { var ID : bool call ID ( ) print - false }",
  "func ID ( ) { var ID : bool var ID : bool return } func ID ( ID : int , ID : [ ] [ - ( false ) ] bool ) { }",
  "func ID ( ) { var ID : [ ( ID ( ) and ID ( ) and 123 ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ID ( ) [ ( - ( ( - - ( - ( ID ) ) ) ) ) ] [ ID ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ true / ID ( 123 * ( ( - 123 ) ) ) / ID ] bool , ID : bool ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { return 123 + true + false * - 123 } func ID ( ) { }",
  "func ID ( ) : bool { { var ID : [ true / - - ( ID ) ] bool } if ( ID ) { } }",
  "func ID ( ) : [ ] int { var ID : bool var ID : bool print 123 * ( - ID ) * ID } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { } func ID ( ) : bool { var ID : [ ] int while true { } }",
  "func ID ( ID : [ ID - ( ( ( ID ) ) ) ] [ ] [ ] [ ] int ) { }",
  "func ID ( ) : bool { var ID : [ ] int var ID : int call ID ( ID / ( 123 ) * false ) }",
  "func ID ( ID : [ ( ID ( ) * ID [ - 123 ] [ ID ] ) ] bool ) { }",
  "func ID ( ID : [ ] int , ID : [ - ( ID [ ( ( ID ) ) ] [ ( ID ) ] ) ] [ ] int ) { }",
  "func ID ( ID : int ) : int { print ( true / ID [ ( 123 ) ] / ID ) }",
  "func ID ( ID : int , ID : int ) : int { var ID : int call ID ( ) while ID [ ( true ) ] [ - ( 123 ) ] { } }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : bool return ( ID * ID / ( 123 ) ) } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : [ true or ( ( ID ) ) ] int var ID : [ ] int }",
  "func ID ( ) { print ID ( ) [ - - 123 - ID [ ID ] [ - 123 ] ] [ ( ID ) ] while ( 123 ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : [ ] int var ID : int print ID - ID if - ID { } }",
  "func ID ( ID : bool ) : [ true / - ID [ ( 123 * true / true ) ] [ ID ] ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : bool return false / - ( - - ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int ) { return }",
  "func ID ( ) { var ID : int call ID ( ) while ID ( ( ID ) ) { } }",
  "func ID ( ) : [ ] bool { if - - ( - ID ( 123 ) ) { } } func ID ( ) { }",
  "func ID ( ) : int { ID ( ) = - - true * 123 / ( - - ( ( - ID ) ) ) }",
  "func ID ( ) : [ 123 * - 123 / ID [ 123 * ID * false ] ] bool { }",
  "func ID ( ID : [ ( ( true ) / 123 * ( false ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int while ID * ID ( ) [ ( - false ) ] [ ID ] / ( - - ( - ID ) ) { } if 123 { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool { var ID : [ ( - ( ID ) ) ] int var ID : bool } } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ ID [ ( - true ) ] [ ID ] ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) : bool { var ID : [ ID [ true ] [ ID ] ] [ ] bool var ID : [ ] bool }",
  "func ID ( ID : int ) : [ ] int { var ID : bool }",
  "func ID ( ID : int , ID : [ ] int , ID : [ ] [ ] [ ] [ ] bool ) : [ ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : [ - true * ( - ID ( ) [ ID ] ) * - false ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] [ false * ID [ - ( ID ) ] ] bool ) { }",
  "func ID ( ) { var ID : [ - - ID [ ( - ( ( - - - - 123 ) ) ) ] ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int print ( false / - true / ( ( - ( ( ID ) ) ) ) ) print ( ( ( - true ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : int print ID ( ) / - ( false / - - true ) * true { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : [ ] int var ID : int call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int ) : [ ] bool { var ID : int return - false - false }",
  "func ID ( ID : bool ) : [ ] bool { var ID : bool var ID : bool { var ID : int { var ID : [ ] int var ID : bool } if - ( ( - - true ) ) { } } while 123 { } }",
  "func ID ( ) : int { var ID : int call ID ( ( ( - false ) ) ) }",
  "func ID ( ) { var ID : bool var ID : [ ID / ID ] int print ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - ( - true / true == ID ( ) ) ] int , ID : [ ] [ ] [ ] [ ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { return ID / ( - - 123 / - ( false ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - ( ( true / ( ( false ) ) * ID ) ) ] int ) { }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : [ ] int if true / false + false { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ] [ ] [ ] bool var ID : int { var ID : int } } func ID ( ) { }",
  "func ID ( ID : [ - - - ID ( ) / ID [ 123 / ID ] [ - - - true ] ] [ ] int ) { }",
  "func ID ( ID : [ ] int ) : int { var ID : int var ID : bool print ( ( - ( ( - 123 ) ) ) ) if true { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : bool { { if - 123 + 123 / ID / ( - - 123 ) - ID { } { } } }",
  "func ID ( ) { var ID : int var ID : [ ] int print ID [ ID / ID * ID ] } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : [ ( ID / ( ( 123 ) ) ) ] [ ] bool }",
  "func ID ( ID : int , ID : int ) : [ ] [ ] int { while 123 * ID / ID { } while ( true ) { } }",
  "func ID ( ) : bool { return false * ID and ( - - - 123 ) }",
  "func ID ( ) : bool { var ID : int var ID : bool { var ID : [ ] int while ( ( false ) ) { } } { } }",
  "func ID ( ID : int , ID : [ ID ( ( ( - ID ) ) ) ] bool ) { }",
  "func ID ( ) { var ID : bool var ID : bool print ( false / - ID ( ( - ID ) ) / ID ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : int print ID ( ) < ID + true * - - ID * ( ( false ) ) call ID ( ) }",
  "func ID ( ) : [ ] [ ID [ 123 / ( ( ( - ID ) ) ) ] [ ( true ) ] ] [ ] [ ] bool { }",
  "func ID ( ID : int , ID : bool ) : int { var ID : int return - - - false * - ID }",
  "func ID ( ID : [ ] bool ) { while ID / false * ( ID ( ) ) { } while true { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ( ID [ - - ( - 123 ) ] [ - false ] ) ] [ ] [ ] bool }",
  "func ID ( ID : [ ] [ ID ( ) < ID [ ( - ID ) ] ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool call ID ( ) } func ID ( ) : int { var ID : int if true { } print true }",
  "func ID ( ) { print false / ID ( ) / 123 + - ID ( false ) }",
  "func ID ( ) { if ( 123 or ID [ - - - ( ID ) ] ) { } call ID ( ) }",
  "func ID ( ID : bool , ID : [ ( true / - ID [ ID ] [ ID ] * ID ) ] [ ] bool , ID : int ) { }",
  "func ID ( ID : [ ] int , ID : bool , ID : bool ) { var ID : bool if ID [ - ( - ( - ( - ( - false ) ) ) ) ] { } print false }",
  "func ID ( ID : [ - 123 + ID ( ( true - ID + ( ID ) ) ) - ID ] [ ] [ ] bool ) { }",
  "func ID ( ID : bool ) { while ID [ ID ( ID ( ) ) ] [ - 123 ] { } { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : bool ) { ID ( true - ID ) = ( ( - ID ) ) if ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : [ - - ID ( - true ) ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ( - ID * - true + ID ) ] int var ID : bool }",
  "func ID ( ID : [ ] [ ] bool ) { print ( ( - - - - ( ( ID ) ) ) ) { } }",
  "func ID ( ) { var ID : int var ID : bool print false * ( - ID ( - ID ) ) { } }",
  "func ID ( ID : int ) { var ID : int var ID : [ ID and - false * ( ID ) * ( ( - ( - - - - false ) ) ) ] [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : bool while ID ( - false + ID ( ) ) { } call ID ( ) }",
  "func ID ( ID : int ) : [ - - ( 123 / - 123 - ( true ) ) ] bool { }",
  "func ID ( ) { var ID : bool return ID [ ID [ - - ( ( - ( - true ) ) ) ] ] [ - ( ID ) ] } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] int var ID : bool print true * ID ( ) [ - 123 ] [ ( - ( ( ( ( ( ID ) ) ) ) ) ) ] }",
  "func ID ( ) : int { var ID : int call ID ( ) if ID ( ID [ - - ( false ) ] [ true ] ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - ( - ID ( ) / - - - ( ( 123 ) ) ) ] int , ID : bool ) { }",
  "func ID ( ) { return ID [ true / 123 - ID >= 123 ] }",
  "func ID ( ID : int ) : bool { var ID : [ - - - - true <= - - - - ID ] bool var ID : bool }",
  "func ID ( ID : bool , ID : int ) : [ true / - 123 / true - - ( ID ) ] bool { }",
  "func ID ( ID : int , ID : [ ] [ ] [ ] [ - ( ID ( ) ) ] [ ] bool , ID : bool ) { }",
  "func ID ( ID : bool ) { var ID : bool var ID : [ ID [ - true / true ] [ true ] ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : bool return ID ( ) * - - ( ID ) }",
  "func ID ( ) : int { var ID : [ ID [ - - ( 123 ) ] [ false ] ] bool var ID : [ ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : int while ( - ( - true ) ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool if 123 / ( ID ( ) ) { } print ID } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ - - - ( true / ( - true ) * true ) ] int }",
  "func ID ( ID : [ ] int ) { var ID : bool var ID : bool return ID + ID ( ) }",
  "func ID ( ID : int ) { var ID : int } func ID ( ) : bool { return }",
  "func ID ( ) : int { while false - ( ID * true - - ID + true ) - true { } { } }",
  "func ID ( ) : [ ID [ ID ( ( - ( ID ) ) ) ] [ ID ] ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) { while ID ( ) - - - false * ID ( ) [ - - ( - ( ID ) ) ] [ - - ( ( false ) ) ] { } }",
  "func ID ( ) { var ID : bool call ID ( ) while ( - - ( ( ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] [ - ID ( false + false ) ] bool }",
  "func ID ( ID : [ - ( 123 and 123 / - ID ( false ) * ( ( true ) ) and ( ID ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool call ID ( ( - ID ( ) [ 123 ] [ 123 ] ) ) }",
  "func ID ( ID : bool , ID : [ 123 != - ID ( ID ( ID ) ) ] int , ID : int ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ] [ ] int ) : bool { var ID : [ - ID ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : bool } func ID ( ) : [ ( ( ( ID ) ) ) ] bool { }",
  "func ID ( ID : [ ] [ - - true * ID ( ) [ ( ID ) ] * - - false ] int ) { }",
  "func ID ( ) { var ID : bool ID = true * - false + 123 * - ID * - false }",
  "func ID ( ) { return - - true >= ID [ - false != ID ] [ ID ] } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { while true * - true / ID ( ) [ ( 123 ) ] [ - ( 123 ) ] { } }",
  "func ID ( ID : int ) { var ID : [ ] int var ID : bool call ID ( ) }",
  "func ID ( ) { var ID : bool }",
  "func ID ( ID : [ ] int , ID : int , ID : [ ] int ) : [ ( ID ( ) ) ] int { }",
  "func ID ( ID : bool , ID : [ 123 / ID ( - ( ( - - false ) ) ) / ( - ( 123 ) ) ] int ) { }",
  "func ID ( ) { var ID : bool } func ID ( ID : bool ) : bool { var ID : int }",
  "func ID ( ID : [ - ID [ - ( ID / ID ( ) ) ] ] bool ) { }",
  "func ID ( ) : bool { { var ID : int var ID : bool call ID ( ) return } }",
  "func ID ( ID : bool , ID : bool ) { var ID : int var ID : int while ( true * true ) { } if ( ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool { var ID : bool while - false / - false * ( ( ( ( ID ) ) ) ) { } while ID { } } print true }",
  "func ID ( ID : [ ] [ ] int ) : int { var ID : bool call ID ( ) if - ( ID ) { } }",
  "func ID ( ) { var ID : [ ] int var ID : int { var ID : bool var ID : int { var ID : int var ID : int } while ID { } } }",
  "func ID ( ) { } func ID ( ID : bool , ID : [ ] int ) { return }",
  "func ID ( ID : bool , ID : int , ID : bool ) : bool { return - ID [ ID ] [ ( ( ID ) ) ] }",
  "func ID ( ) { var ID : int } func ID ( ) : [ 123 / ID ( ) * 123 ] int { }",
  "func ID ( ) { var ID : int call ID ( ) while ID ( ID ( ) [ - - - ID ] ) { } }",
  "func ID ( ) { call ID ( true and - ID [ - ID ] and - ( false ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { var ID : [ ] bool if - true / ID [ false ] [ - 123 ] { } }",
  "func ID ( ID : int , ID : [ ] [ false * 123 * ID ( ) [ ( ( - ( ( ( - ID ) ) ) ) ) ] [ ID ] ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ) : bool { while false * ID ( ) [ - 123 / - - false ] { } } func ID ( ) { }",
  "func ID ( ) : int { ID = ID / - - ( - 123 * ID ) }",
  "func ID ( ) : [ - ( ID ( ID ( 123 ) ) ) ] bool { }",
  "func ID ( ) : int { var ID : bool if ID [ ID [ ( - 123 ) ] ] { } while ( ID ) { } }",
  "func ID ( ) { var ID : bool call ID ( - ( true - ID ( ) ) ) while ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : int { var ID : int var ID : [ false * ( ( - ( - ( - - ( 123 ) ) ) ) ) ] [ ] int } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ false / ID ( true + ( ( - true ) ) ) ] bool }",
  "func ID ( ) : int { var ID : int { var ID : [ 123 * ID ( ) [ ( ID ) ] / - 123 ] [ ] int } } func ID ( ) { }",
  "func ID ( ID : [ ( ( false * false / ( ( ID ) ) ) ) ] [ ] bool ) { }",
  "func ID ( ID : bool ) { var ID : int var ID : [ ] int ID = ID ( ) [ ID ] [ ID ] }",
  "func ID ( ID : bool ) { { var ID : [ ID ( ) [ true * - ID * ( ID ) ] ] [ ] [ ] bool } } func ID ( ) { }",
  "func ID ( ) { return } func ID ( ID : [ ID [ ( - ID ) ] [ ( ID ) ] ] [ ] int ) { }",
  "func ID ( ) : int { if ID [ - ID [ ( 123 ) ] [ false ] ] [ ( - - ID ) ] { } }",
  "func ID ( ID : bool ) { var ID : int call ID ( 123 * ID ( ) [ 123 ] / true ) }",
  "func ID ( ID : [ - true and 123 / ( - ( true ) ) * 123 ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : [ ] int { var ID : [ ID / ( - - - ( ID ) ) * - false ] bool var ID : [ ] [ ] int }",
  "func ID ( ID : bool , ID : bool ) { if 123 * ID ( ) and - ID and 123 { } }",
  "func ID ( ID : [ ] int ) { }",
  "func ID ( ) { var ID : [ ( 123 * ( 123 * false ) ) ] bool var ID : bool }",
  "func ID ( ) { while ( ( - - - 123 * ( - - - - true ) * ID ) ) { } }",
  "func ID ( ID : [ ID and ID ( false / true - ( 123 ) ) and false ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : bool ) : [ ( - ( ( ID ) ) ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : bool ) { var ID : [ 123 / - - - ( ID ) / ( ( ( ID ) ) ) ] int var ID : [ ] [ ] bool }",
  "func ID ( ID : [ ] int , ID : [ ( ( 123 * ( ID ) * ( ( 123 ) ) ) ) ] int ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ID : [ false > - true - ( 123 ) ] int }",
  "func ID ( ) : [ - ( true - - ID [ ID ( ) ] [ ID ] + ( - false ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ] [ ( ID ( ( true ) ) ) ] [ ] int { }",
  "func ID ( ) : int { var ID : int var ID : bool return ( ( ( ( - ID ) ) ) ) }",
  "func ID ( ID : int ) : bool { var ID : bool var ID : [ ] [ - ( ID ) ] [ ] int }",
  "func ID ( ) { var ID : [ true * ID ( - true + ID + 123 ) ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ID ( ) * ( 123 / ID * ( ID ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) : int { var ID : bool var ID : bool print true ID = - - ID }",
  "func ID ( ) : bool { var ID : int var ID : bool return } func ID ( ) : int { ID = ( true ) print - - ( ID ) }",
  "func ID ( ) { var ID : int var ID : [ ] int } func ID ( ID : int , ID : bool ) : bool { }",
  "func ID ( ) : bool { var ID : int if ( true < ( 123 ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int var ID : [ ( ( ( ID ) ) ) ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : [ ] int var ID : bool }",
  "func ID ( ID : int , ID : [ ] int ) { var ID : int }",
  "func ID ( ID : bool ) : bool { var ID : [ ( - false / - ID ( ) / ( ( ID ) ) ) ] int }",
  "func ID ( ID : bool , ID : [ ID ( ( - 123 * ( ID ) * ID ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) : int { call ID ( ) return ( ID ( ( false ) ) ) }",
  "func ID ( ID : bool ) { var ID : bool var ID : int call ID ( ) while true and ID and ID { } }",
  "func ID ( ) { var ID : [ ( ( - ( 123 ) ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : bool if - - ID ( ID ) { } } func ID ( ) { }",
  "func ID ( ) : [ ] int { while - false * ID ( ) - - ID [ - 123 ] [ ( - ID ) ] { } }",
  "func ID ( ID : int , ID : int , ID : bool ) : [ - ( true + ID ) ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) : int { var ID : int ID [ - ID ] [ - 123 ] = 123 } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int { var ID : bool return - - - 123 * ID * ID } } func ID ( ) { }",
  "func ID ( ID : [ 123 * ID ( ( - true - ( ( - ID ) ) ) ) * ( ( true ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { print ID [ ID ( ) [ ( - ( 123 ) ) ] ] if 123 { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ID : int print 123 * ID ( ID ) } func ID ( ) { }",
  "func ID ( ) : [ - - - ( ID ( ) [ - ( ID ) ] [ - - ID ] ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ false * - true / - ID ( false ) ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int ) { var ID : [ - true / ( - true ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : [ ] [ ( ( true ) ) ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { print 123 + ( ID [ ID ] [ ID ] ) while - ID { } }",
  "func ID ( ) : int { { var ID : bool } return true == ( ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool if true * - 123 * ID ( ID ) { } while false { } }",
  "func ID ( ) { var ID : bool if ( ID * ( ID ) ) { } }",
  "func ID ( ) { var ID : [ ( ID ( - - true * ( ( ID ) ) / ( - ID ) ) ) ] int }",
  "func ID ( ID : [ ] int ) : bool { var ID : [ ( ID ( true ) ) ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ( false / - ID ( ) [ ID ] [ - false ] * ID ) ] bool ) { }",
  "func ID ( ) : bool { print true - - true * ID [ - ( ID ) ] if ( ( ( - ID ) ) ) { } }",
  "func ID ( ) : int { print ID [ ID ( false / true ) ] }",
  "func ID ( ID : int , ID : [ ] [ - ( - - ( ( 123 ) ) ) ] [ ] int ) { }",
  "func ID ( ) : int { var ID : int print ( - 123 + 123 / ID / true ) if 123 { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool return } func ID ( ) : bool { var ID : [ ID [ - ID ] ] int var ID : [ ] [ ] [ ] [ ] bool }",
  "func ID ( ID : [ ] [ ID ( ID * - ( - ( ( true ) ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : [ ] bool } func ID ( ID : [ ] [ ] [ ] int ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : bool ) : int { var ID : bool var ID : int print - ID while false { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ - ( true / ( ID ) / 123 ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : bool while 123 / - - ( - false ) { } call ID ( ) }",
  "func ID ( ID : [ ] bool , ID : [ ] int ) : [ ID [ - - ID ] [ ID ] ] int { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool , ID : [ - false / true / ID - 123 + ( true ) ] int ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) : int { var ID : bool } func ID ( ID : [ true ] int ) { }",
  "func ID ( ID : [ ID ( ID [ ( ( ID ) ) ] [ - ( ID ) ] ) ] bool ) { }",
  "func ID ( ID : int ) : int { } func ID ( ) { print 123 - ( true ) + - ID if ( ( ID ) ) { } }",
  "func ID ( ID : int , ID : int ) { ID [ - ID [ ( ID ) ] [ false ] ] [ ( true ) ] = true } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) { while ( ( ID ) ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : bool var ID : bool if - ID ( ( - - ( ( ( - ( - ( - ID ) ) ) ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ - 123 * 123 * false >= true ] [ ID ] ] bool ) { }",
  "func ID ( ID : [ ] int ) : int { var ID : bool print false / ID ( ) [ false ] }",
  "func ID ( ID : bool , ID : bool , ID : [ ] bool ) : int { }",
  "func ID ( ) { var ID : bool var ID : bool if 123 * ID ( ) * true - ( false ) - - 123 { } }",
  "func ID ( ID : int ) { var ID : int } func ID ( ) : bool { while 123 * ( ID ) / ID { } }",
  "func ID ( ) { var ID : bool { var ID : int var ID : bool } while ( - - - ( ( - ( ( 123 ) ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ( - 123 / ( true * ( ( false ) ) / 123 ) * ( ID ) ) ] [ ] int , ID : bool ) { }",
  "func ID ( ID : int ) { var ID : [ ] bool var ID : bool }",
  "func ID ( ) { var ID : bool print - ( ID [ ( false ) ] ) } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ ID [ - - true * ( ID ) / 123 ] ] ] bool ) { }",
  "func ID ( ) : int { return ( - ( - ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ID : [ - ID [ ( true - ID ( ) - ( ( - ID ) ) ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID : bool return ( - 123 / ID * ( false ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ( 123 / ( ID ( ) [ ( ( false ) ) ] ) / - ( ID ) ) ] [ ] int , ID : bool ) { }",
  "func ID ( ID : int , ID : [ ID ( ( 123 and true and ID ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ( - ID [ ID + ID ] [ - ID ] ) ] bool ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : int }",
  "func ID ( ID : bool , ID : [ ( ( 123 * ( ID ) / - ( ( ID ) ) ) ) ] bool ) { }",
  "func ID ( ) : int { var ID : bool return ( - false * true and ID ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID ( ) [ ID [ - ID ] [ ( ID ) ] ] ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int while ID ( ) [ ID [ - 123 ] [ ID ] ] [ - - - false ] { } }",
  "func ID ( ID : bool , ID : int ) { var ID : bool var ID : [ true * ID ( ( - ( 123 ) ) ) ] [ ] [ ] [ ] [ ] bool }",
  "func ID ( ID : [ - false / ID ( ) [ 123 and 123 / ID ] [ ID ] / - ID ] [ ] bool ) { }",
  "func ID ( ID : bool ) { { var ID : [ ] int var ID : int return ( - - - ID ) } }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : [ ] int }",
  "func ID ( ID : [ - ID * ( - ( false and - - ( false ) and - ID ) ) ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ID : bool ) : [ ] bool { var ID : int print false / - true * false } func ID ( ) { }",
  "func ID ( ID : [ ( ID ( false / ( true ) ) ) ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : bool while - ( - ID ) { } ID = ( ID ) }",
  "func ID ( ) { var ID : int var ID : int return }",
  "func ID ( ID : int , ID : int , ID : bool ) : int { var ID : bool var ID : [ ] int }",
  "func ID ( ID : [ ] int , ID : int ) { call ID ( ( ( true ) ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool if ( 123 != ( ID ) ) { } { } } func ID ( ) { }",
  "func ID ( ) { ID [ 123 + - - ID ( ID ) ] [ ( ID ) ] = - ID while ( ID ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ 123 / true + ID [ ID ] - 123 ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { if ( - - ID ( ) [ false ] ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { { while true + ( ( ID ) ) + false { } } { } }",
  "func ID ( ) { var ID : bool call ID ( false / false / ( - - ( ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int var ID : int return - - true * 123 or ID }",
  "func ID ( ) { call ID ( ) print ( false - false * ID ( ) * ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( ) return false / true - ID [ - - false ] [ false ] - ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] int , ID : int ) { var ID : [ ] int } func ID ( ID : int ) { }",
  "func ID ( ID : [ - ID ( ) [ true / true or ID or - ( ( - ( ( false ) ) ) ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ( true + ( false * ID [ - ID ] [ ID ] / false ) + ( ID ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : int var ID : [ - ID ( ) / - ID * true ] int }",
  "func ID ( ID : [ - ( - - false * - ( 123 / - ID ) ) ] bool ) { }",
  "func ID ( ID : bool ) { var ID : [ ] int { print true / false * - ( ( - - false ) ) } }",
  "func ID ( ) : int { var ID : [ ] [ ID [ ( - ( ID ) ) ] [ true ] ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { var ID : int return ( ID ( 123 ) ) }",
  "func ID ( ) : int { var ID : [ ] [ 123 / ( false * ID / - - ( false ) ) * ( ID ) ] bool var ID : int }",
  "func ID ( ) { var ID : int { return ( - false / - ( ( ( ( ID ) ) ) ) / ( 123 ) ) } while - ID { } }",
  "func ID ( ) { var ID : [ ] int var ID : [ ] int return 123 + ID [ ( - ( false ) ) ] [ ID ] + 123 }",
  "func ID ( ) { var ID : int { var ID : bool print ( - false * true ) if 123 { } } }",
  "func ID ( ID : bool ) { var ID : [ ] bool return }",
  "func ID ( ID : bool ) { ID = ( 123 * ( 123 * ( false ) / - ID ) ) }",
  "func ID ( ) { call ID ( ( - true / ( false * 123 * - - ID ) * ID ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID [ ( - 123 / ( true ) / 123 ) ] ] int , ID : int ) { }",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) { while 123 + ( ID ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) { while - ( false + - false * ID or - ID ) { } { } } func ID ( ) { }",
  "func ID ( ) { while ID [ ID [ ( ID ) ] ] [ ( - 123 ) ] { } }",
  "func ID ( ID : bool , ID : [ ] bool ) { var ID : bool var ID : [ ] int } func ID ( ) { print false }",
  "func ID ( ID : bool ) : bool { var ID : int var ID : bool if ID ( ) [ true ] [ ( ( ( ID ) ) ) ] { } ID = false } func ID ( ) { }",
  "func ID ( ID : [ true * - true - ( ( ID ( ) ) ) + true ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool , ID : [ ] int ) { return }",
  "func ID ( ) { { } return } func ID ( ) : int { var ID : bool var ID : bool return }",
  "func ID ( ID : bool , ID : bool ) : int { var ID : [ ] int { var ID : bool if ID { } if ID { } } ID = false } func ID ( ) { }",
  "func ID ( ID : bool ) : [ 123 / ID ( - ID ( ID ) ) / ID ] [ ] [ ] bool { }",
  "func ID ( ) : int { var ID : [ ] int if - ID ( ) * - false / 123 { } print - ( - ( ( 123 ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ] int while ( false * ( true ) / - ( true ) ) { } }",
  "func ID ( ) : int { var ID : [ ( ( ( ( ( 123 ) ) ) ) ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) { call ID ( ( true / ID * - - - - - ( false ) ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int var ID : [ 123 / - - - true + true ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID [ ( 123 <= true ) ] ] int , ID : int ) { }",
  "func ID ( ID : bool , ID : [ ID ( ID ( false + - ID + - ( - - false ) ) ) ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) : bool { var ID : int var ID : [ true * ID / true ] int }",
  "func ID ( ID : int , ID : [ ID ( - 123 / ID ( ( 123 ) ) / ID ) ] bool , ID : [ ] int ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : bool ) { print ID ( ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID [ ( ID [ false ] ) ] ] int }",
  "func ID ( ID : [ ] int , ID : [ ] [ - - ID ( ) * - - - ( ID ) * ID ] [ ] int , ID : [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : int if - ( ID [ true ] ) { } { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : int var ID : bool return - ID ( ) * ( ID ) } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : bool while ID [ false + ( - true ) + - ( ID ) ] [ - false ] { } { } } func ID ( ) { }",
  "func ID ( ) : [ ( ID * - false / ( false * ( - 123 ) ) ) ] [ ] [ ] int { }",
  "func ID ( ID : bool ) { print ID [ ID ( ) [ - ( ID ) ] [ ID ] ] call ID ( ) }",
  "func ID ( ID : [ ] bool , ID : [ ] int , ID : [ 123 * false * false - - ID ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int call ID ( - ( ID [ false ] [ false ] ) ) ID = - true } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ] [ ( 123 / ID [ - ( ( ID ) ) ] [ - - ( ID ) ] * - - false ) ] bool ) { }",
  "func ID ( ID : int ) { return } func ID ( ID : bool ) : bool { var ID : bool { var ID : [ ] bool var ID : bool } if - - - ID { } }",
  "func ID ( ) : [ ] [ false and ID ( - ID ( ID ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ] int ) { return } func ID ( ) : bool { var ID : bool var ID : bool }",
  "func ID ( ID : int , ID : int ) : [ true * - 123 * ( - - ( 123 ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int var ID : int return }",
  "func ID ( ID : [ ] bool , ID : int ) { var ID : int } func ID ( ID : int , ID : [ true ] bool ) { }",
  "func ID ( ) { while 123 + - ( ID ( ID ) ) - - - false { } { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool if - ID ( ) [ ID ( ) ] [ ID ] { } while false { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] int ) : int { ID [ - ( ID ) ] = ID if ID { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool if ID [ ID ( ) [ 123 ] [ false ] ] [ - ( - ( 123 ) ) ] { } print - false }",
  "func ID ( ID : [ ( ID - ( true + true + - ( true ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( - true * false != ( - false ) ) ] int ) { }",
  "func ID ( ID : [ ] int ) { var ID : [ ] [ - true + ID [ ID ] [ ID ] ] [ ] bool var ID : int }",
  "func ID ( ) : [ ( ID ( ) / ID ( ) != - - ( ( false ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool { var ID : int var ID : int return ID - - ( ID ) } print ( ( ( ID ) ) ) }",
  "func ID ( ) : int { var ID : bool while true * - - - ID ( ID ) / true { } } func ID ( ) { }",
  "func ID ( ) : bool { { var ID : int var ID : bool while - - false * - true * - ID { } } } func ID ( ) { }",
  "func ID ( ) : [ ( - - 123 / ID [ - ID ( ) ] [ false ] ) ] int { }",
  "func ID ( ID : [ ] bool ) { call ID ( - ID [ - false + ( - ID ) + - ( false ) ] [ ID ] ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) { var ID : bool var ID : bool { var ID : bool var ID : [ ] bool } }",
  "func ID ( ) : bool { var ID : [ ID ( ( ID ( ) ) ) ] [ ] bool var ID : [ ] [ ] int }",
  "func ID ( ) { } func ID ( ID : bool , ID : int , ID : [ - 123 / ( - ID ) ] bool ) { }",
  "func ID ( ID : bool , ID : int ) : [ ( - - - - ( - ( 123 ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] int var ID : bool return } func ID ( ID : bool ) { }",
  "func ID ( ) { return ( 123 / ( ID / ID [ ID ] [ - false ] ) / ID ) }",
  "func ID ( ID : bool , ID : bool , ID : int ) : bool { var ID : bool while ID + false { } }",
  "func ID ( ID : int ) { var ID : int var ID : int call ID ( true / ( ( - - - - 123 ) ) ) ID = ( 123 ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( ( ( ID [ ID ] ) ) ) ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int print ID / - ( ID [ ID ] [ ( - true ) ] ) * ID } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ( ( - ID + ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : bool var ID : int } func ID ( ID : bool ) { }",
  "func ID ( ID : [ ] [ ID ( ) [ ID [ ( ( ( 123 ) ) ) ] ] ] bool ) { }",
  "func ID ( ) { if ( - 123 / ( ( true ) ) ) { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : int }",
  "func ID ( ID : [ ] bool ) { var ID : [ ( ID [ ID ] [ ID ] ) ] int } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : [ ] bool ID = false / ID [ ( - ( ( ( - - 123 ) ) ) ) ] [ ( ( ID ) ) ] / - 123 } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ID ( ID ( ( ( 123 ) ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID - ( ID ( ) [ - ID ] ) + ID ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : bool }",
  "func ID ( ID : int ) { var ID : bool var ID : bool { var ID : bool var ID : bool } if false { } }",
  "func ID ( ID : [ false / ( ID ( ) [ ( - ( ID ) ) ] ) * true ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int } func ID ( ) : int { var ID : int call ID ( ) ID ( ) = - - ID }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : [ ] [ ID ( true ) ] bool } func ID ( ) { }",
  "func ID ( ) : int { print 123 * ID ( ) [ - - ID / - ID * true ] ID = ID }",
  "func ID ( ) { var ID : int var ID : [ ( - true * - - ID ( ) / ( - ID ) ) ] int } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ] int while false - ( - - - - ID ) { } if true { } } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] [ ] bool { var ID : bool }",
  "func ID ( ) : int { var ID : bool var ID : bool ID = - true * false + 123 } func ID ( ) { }",
  "func ID ( ) : [ ID [ false >= ID [ ID ] ] ] [ ] [ ] [ ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : int return } func ID ( ID : [ ID [ true * ( ID ) * 123 ] [ ID ] ] [ ] [ ] int ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { { while true / ID ( ) [ ID ] * ( ( 123 ) ) { } { } } } func ID ( ) { }",
  "func ID ( ID : [ ( - - ID / ID + ID ( ) [ 123 ] [ ID ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) : int { var ID : bool var ID : bool } func ID ( ) { while ( ( ( ( ID ) ) ) ) { } }",
  "func ID ( ID : bool ) { var ID : [ - 123 * ID [ 123 != ( ( ( true ) ) ) ] [ ( ID ) ] ] [ ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int { { } call ID ( ) return - true } }",
  "func ID ( ) { return false + ( ID ( ) [ ID ] [ - ID ] ) - - ( ID ) }",
  "func ID ( ID : [ ] [ ] bool , ID : [ ( ( - 123 ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ - true + - true and - ( - true ) ] int } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ ] bool , ID : [ ] int ) { var ID : bool } func ID ( ID : bool ) { }",
  "func ID ( ) { print ( 123 - false / - - - ( false ) * - ID - - ( false ) ) }",
  "func ID ( ) : int { var ID : [ - ID ( ID ( ) [ - - ID ] ) ] bool var ID : [ ] bool }",
  "func ID ( ID : int ) : bool { var ID : [ 123 * ( ( 123 ) ) / ID ] [ ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - ID [ ID [ true * ID ] ] [ - ( false ) ] ] int , ID : bool ) { }",
  "func ID ( ) { var ID : int var ID : [ false and ID * - false * false and ( ( ID ) ) ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool ) { call ID ( ) ID ( - - ( ID ) ) = - ID } func ID ( ) { }",
  "func ID ( ID : [ ] [ - - ( 123 * - ( true ) ) ] int ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool print ( - ID [ - ID ] [ ( false ) ] ) { } }",
  "func ID ( ID : int , ID : bool , ID : [ ] bool ) { if 123 / - ID [ ( ID ) ] { } } func ID ( ) { }",
  "func ID ( ) { call ID ( ( false / ( ID * ( ( - ( 123 ) ) ) ) ) ) }",
  "func ID ( ) { { } ID = ( ( false * - - ( ( ( - ID ) ) ) / ID ) ) } func ID ( ) { }",
  "func ID ( ID : [ ( true * ID * ( 123 + false - ID ) ) ] [ ] bool ) { }",
  "func ID ( ID : int ) : int { return }",
  "func ID ( ) : int { var ID : bool var ID : bool } func ID ( ) { var ID : int var ID : int { var ID : bool var ID : int } { } }",
  "func ID ( ID : [ 123 and - - ID / ID / - ( - ID ) ] bool ) { }",
  "func ID ( ) : [ ] [ ] bool { var ID : [ ] int if - ( ID ) { } { } }",
  "func ID ( ID : [ ] bool , ID : int ) : int { var ID : [ ID ( - 123 ) ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { call ID ( ) }",
  "func ID ( ID : [ 123 / 123 > false and - ID [ ( true ) ] and false ] int ) { }",
  "func ID ( ID : [ false / - ( ID ( ) * false * 123 - 123 ) * 123 ] bool ) { }",
  "func ID ( ) { ID ( ) [ - ( 123 * ( ( ( true ) ) ) ) ] = 123 }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool var ID : [ ( - ID ( ) ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : int { while ID ( ( ( ( true ) ) ) ) { } } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool var ID : [ ] bool call ID ( - - false ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : bool return ID [ 123 or false or - - ( 123 ) ] } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : [ ID [ true * false / 123 ] ] int }",
  "func ID ( ) { var ID : int { return } { var ID : bool var ID : [ ] bool while ( ( ( ID ) ) ) { } ID = ID } }",
  "func ID ( ID : int ) : int { var ID : int var ID : int print 123 * true * ( true ) print ( ID ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int , ID : bool ) : int { var ID : int { var ID : [ ] bool var ID : int } }",
  "func ID ( ) : bool { var ID : bool var ID : bool return ( ( ( 123 ) ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ] int , ID : int ) : int { var ID : [ ] bool if ID { } print ID } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : int ID [ true / 123 / - ID ] = - ID } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : [ ] [ ID [ false / ID / ID ] ] int }",
  "func ID ( ) : [ true / ( true / - ID * - false - - ID - - 123 ) / ID ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : [ - - ID [ ( ID * - - - true ) ] ] bool ) { }",
  "func ID ( ID : [ true * true + ID ( ) [ true * ID ] [ true ] ] int ) { }",
  "func ID ( ) { ID ( ) [ ( ID / ( ID ) ) ] = - true }",
  "func ID ( ID : bool , ID : int ) : [ ] [ ] [ ] bool { var ID : bool }",
  "func ID ( ID : int ) : int { var ID : int var ID : bool { var ID : bool return - ( - ( false ) ) } }",
  "func ID ( ID : bool , ID : [ false / - ( ( - ( ID ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ - false * ( 123 != ( 123 ) ) ] int ) { }",
  "func ID ( ) : int { ID ( ID [ ID ( - - - ID ) ] [ - ( - ( 123 ) ) ] ) = - - true print 123 } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : bool var ID : bool print ID [ - ID ] [ false ] } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int , ID : bool , ID : [ ] bool ) : bool { var ID : bool var ID : [ ] bool }",
  "func ID ( ID : [ 123 * ID ( ) [ 123 * ( - 123 ) * - false ] [ ( false ) ] * ( ( ID ) ) ] [ ] bool ) { }",
  "func ID ( ) : [ ID ( ) [ - ( - ID ( ) [ ID ] [ - ( ID ) ] ) ] [ 123 ] ] bool { }",
  "func ID ( ) : int { var ID : int print - - ( 123 + ID [ false ] ) { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ - ( ID [ - true ] [ - ( ID ) ] ) ] int }",
  "func ID ( ID : bool , ID : [ 123 * ID [ ( ID ) ] [ ( true ) ] ] [ ] [ ] bool ) { }",
  "func ID ( ) : int { print - true * ( ( false * ID ) ) * - false }",
  "func ID ( ID : int , ID : int ) : [ ID [ ID [ ID ] ] [ ID ] ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int print ID ( - ID * - ( ID ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) : int { call ID ( - ( false * true + false / - true / 123 - ( ( ( - ID ) ) ) ) ) }",
  "func ID ( ID : [ ] bool , ID : int , ID : bool ) { var ID : [ ] bool print ( - ( ID ) ) } func ID ( ) { }",
  "func ID ( ) { return ( ID ( ) [ ( ID ) ] ) }",
  "func ID ( ID : bool , ID : bool ) : int { var ID : [ ] int ID [ true / ( - - ( - ID ) ) ] = 123 } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] bool { var ID : int ID [ 123 <= ID ] = - - ID }",
  "func ID ( ID : [ true / ID [ ID [ ( ID ) ] ] / ( ( 123 ) ) ] [ ] int ) { }",
  "func ID ( ID : int , ID : [ ] [ ] [ ( - - ( false ) ) ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) : bool { var ID : int print ID [ - 123 ] [ - ID ] }",
  "func ID ( ID : int , ID : [ ID ( ) [ - - ( ( - ID ) ) ] ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : int { var ID : [ ] int { var ID : bool { var ID : bool } if ( ( true ) ) { } } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] int ) { }",
  "func ID ( ) : [ ( - ID [ ( true * - ID * ( ID ) ) ] ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) : [ ( - 123 / ID ( ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool ) { var ID : [ ( ( - ( - - ID ) ) ) ] bool var ID : [ ] bool }",
  "func ID ( ) { while false * false / false and - ID ( ) [ ID ] [ true ] { } }",
  "func ID ( ) : [ ] bool { var ID : bool var ID : bool return - ( 123 * - ( ( ( ID ) ) ) / - - false ) }",
  "func ID ( ) { while - false - 123 * - ( ( ID ) ) * ID + ( - ( - ID ) ) { } print 123 }",
  "func ID ( ID : bool ) : bool { var ID : [ ] [ true / true >= ( ( false ) ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : [ ] [ - ID [ ( - false + ( ( ( ID ) ) ) ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int while 123 + 123 * ID ( - false ) / 123 { } }",
  "func ID ( ID : int ) { var ID : int } func ID ( ) { ID = ( 123 ) }",
  "func ID ( ID : int , ID : [ ] [ 123 + ( true != - - 123 ) ] [ ] [ ] [ ] int , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ true + - ( ( - ID ) ) ] int ) { }",
  "func ID ( ) { var ID : int var ID : int while - - false <= ( ( - ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int var ID : bool print ID ( ( ID ) ) }",
  "func ID ( ID : bool , ID : int , ID : int ) { call ID ( ) }",
  "func ID ( ) : [ - 123 - ( ( ( - ID ) ) ) - ID ] bool { }",
  "func ID ( ID : int ) : int { var ID : bool return false + ( ID ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) { var ID : bool var ID : int }",
  "func ID ( ID : [ false / ID ( ) * - - 123 - true * 123 / ( ID ) ] bool ) { }",
  "func ID ( ID : bool , ID : [ ( ( ID ( true ) ) ) ] int , ID : int ) { }",
  "func ID ( ) { var ID : int return - ( 123 / - 123 and ID and ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ - ID ( ( false ) ) ] int ) { }",
  "func ID ( ID : [ ID ( - false - - - - ( ( false ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { print ( ( ID ( ) [ ( ( - ID ) ) ] [ ( ID ) ] ) ) print 123 }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : bool var ID : int } func ID ( ) : int { return }",
  "func ID ( ID : int ) : int { var ID : [ ] int var ID : int return }",
  "func ID ( ) : bool { var ID : bool { var ID : [ ] bool } print false * ( ( ( 123 ) ) ) }",
  "func ID ( ) { var ID : bool var ID : [ ] int if ( ID ( - 123 ) ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : [ false and - - ( ( - ( ID ) ) ) and ID ] int { }",
  "func ID ( ) : bool { var ID : bool var ID : bool } func ID ( ) : [ - ( ( 123 ) ) ] bool { }",
  "func ID ( ) : bool { var ID : int var ID : [ 123 / ( ID - ID - ( - - ID ) ) * ( ( - ( - ( ( ( ( ( ID ) ) ) ) ) ) ) ) ] int } func ID ( ) { }",
  "func ID ( ) { print ( - ( - ID ( - ID ) ) ) if - - ( - ID ) { } } func ID ( ) { }",
  "func ID ( ) : [ ID [ - ID [ - ( - - ID ) ] ] ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : [ ID / - ID ( ) [ ( ID ) ] [ - ID ] ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ - ID / ID == ID [ ID ] [ ( ( ( ( - - ID ) ) ) ) ] ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ 123 >= ( - ( ID ) ) ] bool var ID : [ ] [ ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) : [ ] [ ( ( - ( - ID ) ) ) ] [ ] bool { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : [ ] [ - ID [ ( 123 ) ] [ ID ] ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] [ - 123 * false * - ID ( - ID ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ - ID ( - ID ( ( true ) ) ) ] int ) { }",
  "func ID ( ) { var ID : int if ( ID [ ( 123 ) ] ) { } }",
  "func ID ( ID : bool , ID : bool ) : bool { var ID : bool var ID : bool while ID ( ID ) { } } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : int { var ID : bool { { var ID : [ ] int } if ( false ) { } } { } } print false } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : int if - - false / - 123 - ( - ID ) { } print ( - ID ) } func ID ( ) { }",
  "func ID ( ID : bool ) { print ID ( ( 123 * ( true ) * - true ) ) }",
  "func ID ( ID : int , ID : bool ) : [ ] int { var ID : int } func ID ( ) : bool { var ID : bool }",
  "func ID ( ID : int ) { { var ID : int while ID ( - true ) { } } }",
  "func ID ( ID : [ ] bool ) : bool { var ID : int { var ID : [ ] bool var ID : int ID = - ID print 123 } }",
  "func ID ( ) { var ID : bool var ID : bool print ID * 123 / - - - - ID { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) : int { return ID ( ) [ ID ] } func ID ( ) { }",
  "func ID ( ID : [ ID [ false and - ( true * ( ( ID ) ) * ( false ) ) and ( ( true ) ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : int { }",
  "func ID ( ) { print ( ID [ - ID ( 123 ) ] ) }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : bool print false * false * ( true ) }",
  "func ID ( ) { print ( true + ID ( ) [ true * - - ID ] ) } func ID ( ) { }",
  "func ID ( ) : [ - false and ID ( ) [ ( ( ID ) ) ] and ID ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : bool ID ( false / ( ID ( - ID ) ) ) = - - ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ID : [ ] int var ID : [ ] [ ] [ ( ( - ID ) ) ] bool }",
  "func ID ( ID : [ ] bool ) : [ ] [ ] [ - 123 * - - 123 / ID ] bool { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int print - - ID ( ) [ - ID ( ) ] { } }",
  "func ID ( ID : [ ] bool , ID : int , ID : int ) : bool { var ID : bool var ID : [ - ( ID ) ] bool }",
  "func ID ( ) : bool { var ID : bool return } func ID ( ID : int , ID : bool ) : int { if - 123 { } }",
  "func ID ( ) { var ID : int call ID ( ) print ( ( ID ( ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : int print ( - 123 / ( ID ) ) }",
  "func ID ( ID : [ 123 - - ID ( ID [ ID ] ) - ID ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int while ( ( ( ( ID ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ] int ) { }",
  "func ID ( ID : int ) : [ ] [ ID / ID + ID [ - ( - 123 ) ] [ ID ] + ( - - true ) ] bool { } func ID ( ) { }",
  "func ID ( ID : int ) : [ 123 - true != ( ID ( ) [ ID ] ) ] [ ] bool { }",
  "func ID ( ) : [ - false < ( - - false * - ID [ true ] ) ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ] int ) { var ID : int var ID : int call ID ( ID ) }",
  "func ID ( ) : [ false * ( false / - - ( 123 / true ) ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : [ - ( ID ( ) [ true * true - ( - - true ) ] ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int , ID : int ) { }",
  "func ID ( ) { var ID : int } func ID ( ) : bool { var ID : int var ID : [ ] [ true ] int }",
  "func ID ( ID : [ ] bool ) : [ 123 - 123 * ID ( ) [ - ID ] [ ( 123 ) ] * ( 123 ) ] [ ] [ ] bool { }",
  "func ID ( ) : bool { ID ( ) [ - ID ( ) * ( ( - - ( true ) ) ) ] [ - false ] = ( ID ) print - ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int return ID [ - - 123 / ID ] [ false ] } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool , ID : [ ] int ) { ID ( ) [ ( ( true ) ) ] [ ID ] = ( - 123 ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : int { ID ( true / 123 - ID / - - true / ( ID ) ) = ID call ID ( ) } }",
  "func ID ( ID : int , ID : int ) { var ID : bool var ID : bool { var ID : bool } return ID }",
  "func ID ( ) { call ID ( ( 123 * ID [ ( ( - ID ) ) ] [ false ] ) ) print - - ID } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID [ - 123 / 123 / ID [ ( true ) ] ] ] bool var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : [ ] [ false / ( ( 123 ) ) / true ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] int print ( ( ID ) ) }",
  "func ID ( ) : [ ] [ ID ( ) [ ( ID * ( - ( - true ) ) ) ] ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : [ ( ID ( ( 123 / ID ) ) ) ] [ ] bool ) { }",
  "func ID ( ) { ID ( ) [ false / ( true == ( ( - ( false ) ) ) ) * ( - - ID ) ] [ ID ] = ( true ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : bool call ID ( ) { var ID : bool var ID : bool call ID ( ) call ID ( ) } }",
  "func ID ( ) { print ID ( ID [ ( ( false ) ) ] ) if ( - 123 ) { } }",
  "func ID ( ID : bool ) { var ID : int var ID : bool ID ( - ( ID ) ) = ID if - 123 { } }",
  "func ID ( ) : bool { var ID : [ ( - ( true - - ID ) ) ] [ ] int var ID : int }",
  "func ID ( ID : int , ID : int ) { var ID : [ ( - ID ( - 123 ) ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { ID ( ) [ ( ( - ( true ) ) ) ] = - ( ( - ( - ( ( false ) ) ) ) ) print ( ID ) }",
  "func ID ( ID : int ) { var ID : int var ID : [ ID ( false + true + true ) ] bool } func ID ( ) { }",
  "func ID ( ) : [ false - - false - - - true * ( ID ) / ( ID ) ] [ ] bool { }",
  "func ID ( ID : int , ID : [ - false / true and ID - ID ( ) - - - false and 123 ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int { ID ( - ( ( ID ) ) ) = - false } while - true { } }",
  "func ID ( ID : [ ( false ) + ID ( - - ( ( 123 ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int } func ID ( ID : int ) { var ID : int var ID : bool call ID ( ) ID = ID }",
  "func ID ( ID : int , ID : [ ] bool ) : bool { var ID : [ ] bool } func ID ( ID : [ ] bool ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : bool { if ID ( ) [ 123 ] { } }",
  "func ID ( ) { var ID : bool var ID : [ ] [ ] int print ( ID [ true ] ) print ID } func ID ( ) { }",
  "func ID ( ) { print ID [ ( 123 * - ID ( ) * ID ) ] [ ( 123 ) ] call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] int { var ID : [ ] int var ID : [ ] int if ( ( 123 ) ) { } { } }",
  "func ID ( ) : int { var ID : int var ID : int return true * ID - ( - - ( 123 ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] [ ] [ ] bool ) : bool { return ( ( false ) ) }",
  "func ID ( ID : [ ] bool ) { ID ( ) = ( false == true ) } func ID ( ) { }",
  "func ID ( ) : [ ID ( ) [ ( ID ( - ( false ) ) ) ] ] [ ] int { }",
  "func ID ( ID : int , ID : [ ] [ ] [ ( ( ( - ID ) ) ) ] [ ] int , ID : bool ) { }",
  "func ID ( ID : [ ID ( ) [ - 123 * ID [ - - ( ( ( ( false ) ) ) ) ] [ - ID ] * 123 ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ( ID [ true / - ID [ - ( ID ) ] [ ( false ) ] ] [ ID ] ) ] bool { }",
  "func ID ( ID : [ ID ( true * true - ( - ( - - ( ID ) ) ) + - - ID ) ] bool ) { }",
  "func ID ( ID : [ ] int ) { var ID : bool call ID ( ( 123 + ( ID ) ) ) while false { } } func ID ( ) { }",
  "func ID ( ID : [ 123 * - ( - ( true + ( 123 ) + true ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { call ID ( ) return }",
  "func ID ( ID : [ ] int , ID : [ - ID ( ) ] bool ) : int { var ID : int var ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : bool if ( ID [ ID ( true ) ] [ 123 ] ) { } if - ( 123 ) { } } func ID ( ) { }",
  "func ID ( ) { while ( ID [ - ( - ( ( true ) ) ) ] ) { } } func ID ( ) { }",
  "func ID ( ) : [ false * ( true / false and true + - - false and 123 ) * false ] int { }",
  "func ID ( ) : int { var ID : int var ID : [ ] bool return true / false / ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool call ID ( - 123 * ( ID ) ) while true { } } func ID ( ) { }",
  "func ID ( ID : [ ID / true / - ( - ( ID ) ) ] bool ) { }",
  "func ID ( ID : int , ID : [ ] int ) : [ ] bool { var ID : bool var ID : bool { var ID : [ ] int var ID : int } }",
  "func ID ( ID : bool ) { var ID : bool var ID : bool } func ID ( ID : bool , ID : int , ID : bool ) : [ ] bool { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : [ ] [ - ( ( ( true ) ) ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ ] bool , ID : [ - - false / false * ( - - ( false ) ) ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : bool { var ID : int { return false / ID ( ) * ID } ID = 123 } func ID ( ) { }",
  "func ID ( ID : [ ID / ( ID / - 123 and ID ) * true ] bool ) { }",
  "func ID ( ) { var ID : int var ID : [ ] [ ID [ false / ( - ( ID ) ) / ( true ) ] [ ( ( 123 ) ) ] ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) : int { print ID [ - ( false ) ] call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool ) : int { while - ( ID ( ) [ ( true ) ] [ ID ] ) { } while ID { } }",
  "func ID ( ID : int , ID : bool ) { var ID : int var ID : bool ID [ 123 / ( ID ) ] = false ID = ID }",
  "func ID ( ) { var ID : int call ID ( ) print - true / - ( ( ( false ) ) ) / ( true ) }",
  "func ID ( ID : bool ) { var ID : int var ID : int while false * ( ( - - ID ) ) / ( false ) { } }",
  "func ID ( ID : bool , ID : [ ID * 123 / ( ID > ( - ( ( ID ) ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { return ID [ ( - ID [ true ] ) ] } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : int var ID : int { while ID { } } { } }",
  "func ID ( ID : bool , ID : [ - ID ( ID ( ) [ ID ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ID [ ( - ID ( - true ) ) ] ] [ ] bool { }",
  "func ID ( ID : bool , ID : int ) { var ID : int { ID [ ID ( 123 ) ] [ - ID ] = ( - ( ID ) ) } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int print - ID [ ID - ID + ( - - ( ID ) ) ] call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ - - - ( ID ( 123 * ID * 123 ) ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ ( true * - ( true ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int while - - true * ( - true - ID + ID ) * - ID { } while 123 { } } func ID ( ) { }",
  "func ID ( ID : [ ID [ ( - - ( true ) ) ] ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : int var ID : int print ( - - ( ID ) ) }",
  "func ID ( ) : [ ID [ - ( ID ( ID ) ) ] ] bool { }",
  "func ID ( ) : bool { var ID : bool } func ID ( ) { ID ( ) [ - - ID ] = 123 }",
  "func ID ( ID : [ ] int ) : int { var ID : bool }",
  "func ID ( ) { var ID : int while true > ( false * - ID ) { } ID = ID } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ - - ( ( 123 / ( ( - false ) ) / true ) ) ] [ ] [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID ( ) [ ID ( ) [ ID ] [ - ID ] ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ 123 >= ID [ ( ( ID ) ) ] ] [ ] bool var ID : int }",
  "func ID ( ) { var ID : int } func ID ( ID : [ ] int ) : int { var ID : int }",
  "func ID ( ID : [ ID [ ( ( ( false ) ) ) ] ] bool ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : bool } func ID ( ) { var ID : int var ID : int return - true }",
  "func ID ( ) : bool { var ID : int return ID ( ) * true / 123 - ID + true } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ - ( - ( ( ID ) ) ) ] [ ] bool }",
  "func ID ( ID : bool ) : [ ] int { var ID : [ ( false / - - ( ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ true * ID and true - ID ( ) + ID ] bool ) { }",
  "func ID ( ) : int { var ID : int var ID : [ ] bool if - - 123 * true + true { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] bool { var ID : bool var ID : int while ( - ID ) { } while ( - ID ) { } } call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int ID [ true - ID [ ( ( - - 123 ) ) ] [ - - true ] - - ( ( ( true ) ) ) ] [ ( - ( 123 ) ) ] = ( ID ) }",
  "func ID ( ) : bool { var ID : [ ID ( ( 123 < ID ) ) ] [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID [ true * ( ( - ( false ) ) ) ] ] int var ID : int }",
  "func ID ( ID : int , ID : [ true * false / true + ( ( ID ) ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool ID ( ) [ ID [ ID ] [ false ] ] [ true ] = ID }",
  "func ID ( ID : int ) { var ID : [ false and ( ID ( ) ) and ( ID ) ] [ ] [ ] bool var ID : int }",
  "func ID ( ID : int , ID : int , ID : bool ) : [ ] [ - - ID ( ID ) ] int { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : bool print true * - ID [ ( true ) ] [ ID ] / - - ID ID = ( ID ) } func ID ( ) { }",
  "func ID ( ) { call ID ( ) { return ( true / true / ( ID ) ) } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int var ID : int ID ( ) = - - - ( 123 ) } func ID ( ) { }",
  "func ID ( ID : bool ) { return false and ID or ID ( ) [ ( ID ) ] or ID }",
  "func ID ( ) { var ID : [ ID ( ) [ ( ( true ) ) ] ] [ ] [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ - ( ID ( ( ID ( ) ) ) ) ] [ ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { var ID : bool var ID : bool ID [ - ID ( ) ] [ - ( ( - - - 123 ) ) ] = ID }",
  "func ID ( ID : [ ] bool , ID : [ ] bool ) { var ID : [ ] [ ] int ID ( ) = - - 123 } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool , ID : int ) : int { var ID : [ false * ID ] int } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ] bool var ID : bool call ID ( ) return - - ID } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID [ false * - true - false - - ID ] [ ID ] ] bool ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ] [ ] [ ] int var ID : [ ] int }",
  "func ID ( ) : [ - - - - false + ( - - - false / - - ( - - false ) * - ( ( ID ) ) ) ] [ ] bool { }",
  "func ID ( ID : [ - ( ( ( ID [ - ID ] [ ID ] ) ) ) ] [ ] [ ] [ ] int ) { }",
  "func ID ( ) : int { var ID : int ID ( ) = ID ( true * 123 / ID ) call ID ( ) }",
  "func ID ( ) { var ID : [ false * ( ID / - - - - - ID / false ) / false ] int }",
  "func ID ( ID : [ - 123 * - 123 + true / ID ( ID ) * - ( true ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool ) { var ID : bool }",
  "func ID ( ) { var ID : int var ID : int return ID [ false >= - ( - ( ( ID ) ) ) ] [ false ] }",
  "func ID ( ) : [ ID ( - ID [ ( - true ) ] [ ID ] ) ] int { } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ true * ( ID [ true ] [ true ] ) * - false ] int var ID : int }",
  "func ID ( ) : bool { var ID : bool var ID : int { var ID : [ ] int { var ID : [ ID ] bool var ID : bool } if ( - 123 ) { } } } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ( ( ( - - ( - ID ) ) ) ) ] [ ] [ ] [ ] [ ] [ ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) : int { var ID : bool var ID : bool print 123 > ( ID ) print - ( ( ( true ) ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : int { }",
  "func ID ( ) : bool { var ID : [ ] int var ID : bool print ( true + ID ) }",
  "func ID ( ID : bool ) { var ID : bool var ID : [ ] bool return ( ID ( ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int ) : bool { var ID : [ ] int { ID ( ID ) = ID if 123 { } } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : bool { var ID : bool var ID : [ ] int if ID { } }",
  "func ID ( ) { var ID : [ ID [ ID [ - ( ( ID ) ) ] ] ] [ ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) : [ ] [ true / - 123 + ID ( ID ( ) ) - ( true ) ] int { }",
  "func ID ( ID : int , ID : bool ) : int { print false / 123 == ID [ - - - ( - - ID ) ] [ ID ] } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool { ID ( true / false ) = false } print - - ID }",
  "func ID ( ) : bool { var ID : int var ID : int ID ( 123 / ID ( ( ID ) ) ) = - ID print ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { var ID : bool var ID : int return ( false ) }",
  "func ID ( ) { print ID ( ) / - 123 > ID ( ) * ( ( - true ) ) if true { } }",
  "func ID ( ID : int , ID : bool ) : [ ID [ - - ID ( false ) ] ] int { }",
  "func ID ( ID : [ ( ( ID ( - false / 123 / ID ) ) ) ] bool ) { }",
  "func ID ( ID : [ ID ( ) [ ( true / ( - ID ) ) ] ] [ ] bool ) { }",
  "func ID ( ) { { var ID : [ ] [ ( ID [ 123 ] ) ] int var ID : bool } ID = ( 123 ) } func ID ( ) { }",
  "func ID ( ) : [ ] [ ( ID ( ) / - - ( true ) ) ] [ ] int { }",
  "func ID ( ) { var ID : bool var ID : bool } func ID ( ID : bool , ID : int ) : bool { var ID : [ ] bool }",
  "func ID ( ID : bool , ID : bool , ID : int ) : int { ID ( ) = - 123 / - ( false ) }",
  "func ID ( ) : bool { var ID : int { return } return - ID [ ( 123 ) ] [ - ( ID ) ] } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : [ ] bool while 123 + true * ( ID ) / - - ( - ( ( ( ( - ( ( ID ) ) ) ) ) ) ) + ( - ( ( 123 ) ) ) { } print - - ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ - true and - ID ( ID ) and false ] bool var ID : [ ] int } func ID ( ) { }",
  "func ID ( ) { } func ID ( ) { var ID : [ ] int return }",
  "func ID ( ) : int { return - ID [ ID ( - ID ) ] [ - - - ( ID ) ] }",
  "func ID ( ID : bool ) { call ID ( - - - - 123 * ( - - true ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ 123 / ID - ( false ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ 123 + true - - ID > - ( - ( ( - ID ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ] [ - - 123 / - true * ( ( false ) ) ] bool } func ID ( ) { }",
  "func ID ( ) { { var ID : [ ] [ ] [ ] bool ID [ - ID ] = 123 } print true } func ID ( ) { }",
  "func ID ( ) { call ID ( ) if ( ( false * ID ( ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ false + - ID ( ( - - false ) ) + ( - ( - ID ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { { var ID : [ - ID [ ID ] [ false ] ] int var ID : bool } }",
  "func ID ( ID : int ) { var ID : int var ID : bool print - ( ID ( ) [ ID ] ) }",
  "func ID ( ID : bool , ID : bool , ID : [ ] bool ) : bool { var ID : bool return } func ID ( ) : bool { }",
  "func ID ( ) { var ID : [ ] bool print ( - ID ( ( ( ID ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : [ ( ID ( ID ( ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] int { var ID : bool var ID : bool return 123 and true and ( - ( ID ) ) }",
  "func ID ( ID : bool ) : bool { return }",
  "func ID ( ) : [ ] [ ID [ - true * - - 123 >= - 123 ] ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( true and - 123 * true ) + ( ID ) + ( - false ) ] int ) { }",
  "func ID ( ID : bool , ID : [ ] int , ID : int ) { var ID : bool } func ID ( ) : bool { var ID : [ ] int var ID : bool }",
  "func ID ( ) { var ID : [ - - - - ID [ ( ID ) ] ] bool } func ID ( ) { }",
  "func ID ( ) : int { return } func ID ( ID : int ) { var ID : [ ( 123 ) ] bool }",
  "func ID ( ) { var ID : int var ID : int ID = - - ( ( ( 123 ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool call ID ( ( ID [ true ] ) ) { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int while ID ( - false * ID * ( true ) ) { } while - ( false ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int { } while ( - ( - 123 ) ) { } } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : int var ID : [ false * - 123 / ( false ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : bool print false - 123 * true <= ID * ID if ID { } }",
  "func ID ( ID : int ) : [ ] bool { var ID : [ ] int return ID ( ( ( ( - - true ) ) ) ) }",
  "func ID ( ) { var ID : bool var ID : int if - ( ID ( ( - 123 ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) : [ false * ID * - ( - ID ( - true ) ) ] [ ] int { }",
  "func ID ( ) { var ID : int print false * ( ( ID ( ( - ID ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID : [ ] int call ID ( ) print ( ( true ) ) } func ID ( ) { }",
  "func ID ( ) { if - ID ( ID ( ( - - 123 ) ) ) { } }",
  "func ID ( ) { { call ID ( 123 * ( ID / - - ( ( true ) ) ) ) } } func ID ( ) { }",
  "func ID ( ) { var ID : bool print ( - - - ( ID ( ) ) ) print - ( ( ( ID ) ) ) }",
  "func ID ( ID : [ false + ( - ID [ ( false ) ] ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ false * ID [ ( ID [ true ] [ true ] ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool } func ID ( ID : bool , ID : [ ] [ ( - 123 ) ] int , ID : [ ] bool ) { }",
  "func ID ( ID : bool ) { var ID : bool var ID : bool return - ( - ( - true ) ) }",
  "func ID ( ID : bool , ID : [ - ID / ID ( ) [ true / - ( - ID ) ] * ID ] int ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : [ false * - 123 + ( ID ) ] int { }",
  "func ID ( ) : [ ( ( ( false / ( false ) * - false ) ) ) ] bool { }",
  "func ID ( ID : [ 123 or 123 / ID [ ID / - true * ( false ) ] or true ] [ ] bool ) { }",
  "func ID ( ID : [ - ID ( ) [ ( - ( ID ) ) ] [ - - ( - - 123 ) ] ] bool ) { }",
  "func ID ( ) : [ ] int { return ID ( ) / ID [ - - ID ] [ 123 ] * ( ID ) } func ID ( ) { }",
  "func ID ( ) : [ ID ( ) / 123 * false - - ( ID ) - true ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : bool { while ID * - - true / false and ( false ) { } { } }",
  "func ID ( ID : [ ID ( ID ( ) [ true / - false * ID ] ) ] int ) { }",
  "func ID ( ID : bool , ID : [ ( true / ( 123 / - - 123 / 123 ) / - 123 ) ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : [ ( true / ( - 123 ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { var ID : int } func ID ( ) : [ - true * ID ] bool { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : bool return } func ID ( ) : int { var ID : [ ] int var ID : int }",
  "func ID ( ID : int , ID : bool ) { var ID : bool if ID ( ) [ - ID ] { } { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : [ ] bool var ID : bool { var ID : [ ] [ ID ] int } if - false { } } func ID ( ) { }",
  "func ID ( ) : bool { return - ID / ID ( ) [ ID ( ID ) ] [ - ID ] }",
  "func ID ( ID : [ ] bool , ID : int , ID : bool ) { call ID ( ) ID ( ID ) = ( - ( ID ) ) } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] bool { var ID : [ ID ( ) [ true ] ] int }",
  "func ID ( ) { { var ID : bool var ID : [ ] [ false / ( true ) ] int } } func ID ( ) { }",
  "func ID ( ) { var ID : bool while - ( ID < ( ( - 123 ) ) ) { } ID = false }",
  "func ID ( ID : int ) { print - ( 123 * ID [ ID ] [ ( ( - - - - ( ( ID ) ) ) ) ] ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) { while - ID ( - false * true * ( ( ID ) ) ) { } print ( ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] bool if false * - ( true ) / ( false ) { } if ( 123 ) { } }",
  "func ID ( ID : int ) { ID [ true or 123 + - - ( - - - ( - - ID ) ) ] = ID } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ ID ( ) [ ( ( - true ) ) ] [ ( ID ) ] ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int print - ( 123 - ID / false ) while ID { } }",
  "func ID ( ) { { var ID : [ false * ID [ 123 * ID / - ( - ID ) ] / ID ] [ ] int var ID : bool } }",
  "func ID ( ID : int ) { var ID : [ ( ID [ ( false ) ] [ - ID ] ) ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID : [ ] bool ID ( ) [ ID ( ) ] = 123 }",
  "func ID ( ID : bool ) { print - - ID ( ID ( - - - - - - ID ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ( 123 / ( ID ( - ID ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ - ( true / ( true / ( ID ) ) / ID ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] [ ID ( ( ID ( - 123 ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : [ true * ( ID [ - ID <= ID ] ) ] bool ) { }",
  "func ID ( ) : int { var ID : [ ] bool ID [ ID [ - - ( ( ( ( ( - ID ) ) ) ) ) ] ] = - ( - ID ) }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : bool { var ID : bool while - true + - ID { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : int print - ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : [ ] bool if ID [ ID ] { } while ID { } }",
  "func ID ( ID : [ ] [ ] bool , ID : [ ] int ) { var ID : [ ] [ ] [ - 123 ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] bool print ID ( ID ( ) / - ID ) }",
  "func ID ( ID : [ ID / - ID ( ID ( ) [ false ] [ ID ] ) ] bool ) { }",
  "func ID ( ) { var ID : bool var ID : bool ID ( - ID [ ( ( ( ID ) ) ) ] ) = - - true if - true { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] bool var ID : bool ID ( ) [ ( true ) ] = - true }",
  "func ID ( ) : bool { } func ID ( ID : [ ] int ) { var ID : [ - - false ] bool }",
  "func ID ( ID : [ - true and true / - ID * true - ID + - ( ID ) and - ID ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int ) { var ID : bool if ID ( ) [ - ( true ) ] { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ 123 * ID ( - ID [ ( ( ( 123 ) ) ) ] ) * ( ID ) ] bool , ID : bool ) { }",
  "func ID ( ) : [ ID [ false / 123 * ID ( ( true ) ) ] ] bool { }",
  "func ID ( ) : bool { return ID ( ) [ ID ( ) / ( ( 123 ) ) ] } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ID : bool var ID : [ ID ( false ) ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : [ ] int { var ID : [ true * ID ( 123 ) ] int var ID : bool }",
  "func ID ( ID : int , ID : [ ] [ - false / ID ( ) / - ( ID ) ] bool , ID : int ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) { if ID ( ) [ - false ] { } while 123 { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool if - ( - 123 * ID ( ) ) { } print ( true ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ( - 123 / - 123 * ID ) ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) : int { if ( - ( 123 ) ) { } { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : bool { var ID : int print - ( ID ) print true } } func ID ( ) { }",
  "func ID ( ) { var ID : int } func ID ( ID : int , ID : [ - - true - - ( false ) ] bool , ID : bool ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ - false * true + ID [ ( ( false ) ) ] [ false ] + ( true ) ] int ) { }",
  "func ID ( ) { var ID : bool var ID : bool print ( ( ( 123 ) ) ) print false }",
  "func ID ( ID : int , ID : bool ) : int { } func ID ( ) { var ID : int var ID : int { return } print - ( ID ) }",
  "func ID ( ID : bool ) : int { var ID : [ - false / - true - - - false + ID ] int }",
  "func ID ( ID : bool , ID : int , ID : [ ] [ ] int ) : [ ] int { var ID : [ ( false ) ] [ ] int }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool var ID : int return ID ( ) * ID }",
  "func ID ( ID : [ false - 123 / true + - 123 == ( - ( ( - - false ) ) ) ] int ) { }",
  "func ID ( ) { var ID : int { var ID : bool var ID : int call ID ( - ID [ - - ( ( false ) ) ] [ false ] ) } } func ID ( ) { }",
  "func ID ( ) { var ID : int return ( ( false * false == ID ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] [ ] int var ID : int print true * 123 * - - ID call ID ( ) }",
  "func ID ( ID : bool ) : bool { { var ID : [ - - - - - - - - ( 123 ) ] [ ] bool var ID : [ ] bool } }",
  "func ID ( ID : int ) { var ID : int var ID : int print ID ( ) * ( - true ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ID ( ) / ( ID [ true ] [ - true ] ) * ( ID ) ] int ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : int ) { var ID : int { var ID : int var ID : bool return } }",
  "func ID ( ID : int , ID : [ ] bool ) : bool { var ID : bool ID [ true and ( - ( - ID ) ) ] = ( 123 ) print ( false ) }",
  "func ID ( ID : bool , ID : [ ] int , ID : int ) { var ID : [ ID ( ( ( ID ) ) ) ] [ ] [ ] bool }",
  "func ID ( ) : [ ID ( ) [ 123 / ( ID [ - ID ] ) * - ID ] ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : int while true / ID [ ID [ ( 123 ) ] [ false ] ] [ ( - 123 ) ] * ID { } }",
  "func ID ( ) : bool { var ID : [ ] [ ( ID ( ) [ ID ] [ ( true ) ] ) ] bool }",
  "func ID ( ID : [ ] int ) : bool { var ID : int var ID : bool return } func ID ( ID : [ false ] [ ] bool ) { }",
  "func ID ( ID : [ true * ( ID ( - true * ( true ) ) ) ] bool ) { }",
  "func ID ( ID : bool ) { var ID : bool var ID : int ID [ - 123 / 123 / ID ] = ( - 123 ) while ( - ( - false ) ) { } }",
  "func ID ( ID : int , ID : int ) : [ ] bool { call ID ( ) { var ID : [ ] [ - ID ] bool } }",
  "func ID ( ID : [ ID ( ( - ( ( ID ) ) ) ) ] int ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : int ) : bool { var ID : bool return } func ID ( ID : [ ] [ ] bool ) { }",
  "func ID ( ) : [ ( ( ( - ID ( ) [ ( 123 ) ] ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ID ( ( ( ( - true ) ) ) ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID [ ID [ - 123 ] [ - ID ] ] ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ false / - ( - 123 / ID ) ] [ ] int }",
  "func ID ( ) { var ID : bool return true * ID ( - - - ( true ) ) / ID } func ID ( ) { }",
  "func ID ( ID : [ - ( ID ( ) [ 123 * ( ID ) ] ) ] [ ] int ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) { call ID ( ) if - ID ( ) [ - false ] { } }",
  "func ID ( ) : bool { var ID : int if - ID [ ( ID ) ] { } call ID ( ) }",
  "func ID ( ID : int , ID : [ - true >= - ID ( ) and ( true ) and - ID ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { print ( ( 123 * ID [ - ( ID ) ] [ false ] * ( - false ) ) ) }",
  "func ID ( ) { var ID : bool var ID : int ID [ ( ( ( ( true ) ) ) ) ] [ true ] = ( - false ) }",
  "func ID ( ID : bool , ID : int ) : int { var ID : bool }",
  "func ID ( ID : bool ) { while ( - - ( true / - ID * - ID ) ) { } while - - ( ( ( ( 123 ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ - true - - true / - ID < ID ] [ ] int var ID : int }",
  "func ID ( ID : [ true * 123 - - - ID ( - false < ( - true ) ) ] [ ] bool ) { }",
  "func ID ( ) : int { var ID : int while ( - true * ( ID ) / - ( ID ) ) { } while true { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] [ ID [ ( 123 ) ] ] [ ] int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : int call ID ( ID ( ) [ ID ] [ - ID ] ) }",
  "func ID ( ID : [ ID ( ( ( ID ( ) ) ) ) ] bool ) { }",
  "func ID ( ID : [ - ( 123 * ( 123 * ID ( ) ) / ID ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ( ID [ false - ID [ ID ] ] [ ID ] ) ] [ ] bool ) { }",
  "func ID ( ) { var ID : bool var ID : [ ] [ ID ( ) * ( false ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ true / 123 * - ( ID ) ] [ ] bool }",
  "func ID ( ) { return } func ID ( ) { var ID : [ ID [ - ( ( - ( - - ID ) ) ) ] ] bool }",
  "func ID ( ) : int { if false * false - ID ( ) and true / ID / ID and 123 { } { } } func ID ( ) { }",
  "func ID ( ) { call ID ( ) { return ID [ - - ID [ ( true ) ] ] } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool print - true * 123 - ( - false ) - 123 if ( - ( false ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ true * ID ( ) + ID ( ) + true ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] [ true * ID + 123 * ID * ID ] int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool if ID ( ) / - - - - ( ID ) { } ID = ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] int { var ID : int if - false / ID ( ) * 123 { } }",
  "func ID ( ID : [ ] int , ID : int , ID : [ - ID [ ( - - - ID ) ] [ ( - ID ) ] ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ 123 / ID [ - false * ID * - - - ID ] ] int ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ] int ) : [ ] [ ] [ ( ID ) ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int ) { { var ID : int var ID : int print 123 / true while ID { } } } func ID ( ) { }",
  "func ID ( ) { if ( - - - false * true / 123 - false ) { } }",
  "func ID ( ID : [ ] bool ) : bool { while ( - - - true / - ID * 123 ) { } if false { } }",
  "func ID ( ) { if - ( - 123 * 123 and true - ID - ( ID ) and ID ) { } }",
  "func ID ( ) { var ID : [ ] [ ( - - ( 123 / 123 ) ) ] bool var ID : [ ] int }",
  "func ID ( ) { { var ID : [ - ID + ( - - ID ) ] int } if ID { } } func ID ( ) { }",
  "func ID ( ID : [ - false / ID [ true < ID [ ( ( true ) ) ] [ true ] ] / ( - - true ) ] int ) { }",
  "func ID ( ID : bool ) : bool { print ID ( true * - ID [ 123 ] ) ID = - ID }",
  "func ID ( ID : int , ID : [ 123 / - ( 123 and true + - ( false ) - ( - 123 ) ) / ( ( ( ( ( ID ) ) ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ] int }",
  "func ID ( ID : int ) { var ID : bool var ID : [ - ( false * true - false + ( ID ) ) ] int }",
  "func ID ( ) { var ID : int return } func ID ( ID : bool , ID : bool ) : bool { var ID : int return }",
  "func ID ( ID : bool ) : bool { var ID : int while 123 / - false - - - ( - - false ) { } print true }",
  "func ID ( ID : int , ID : int ) { var ID : bool var ID : bool if - 123 + ID { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ - - ID [ ( - ( ID ) ) ] ] int } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int , ID : int ) : bool { var ID : int if ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] bool { print 123 + ( - ( false ) ) }",
  "func ID ( ) { var ID : [ ID [ - false * ID [ ID ] ] [ ID ] ] bool var ID : int }",
  "func ID ( ) { var ID : int var ID : bool print ( ( ( - true ) ) ) }",
  "func ID ( ID : [ ] int , ID : int ) : int { print false / ID - ( - - false ) + ID } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { var ID : int return - false / ( ( ID ) ) * ID }",
  "func ID ( ID : bool , ID : bool , ID : [ ] bool ) { ID ( ( - ( ID ) ) ) = ID } func ID ( ) { }",
  "func ID ( ID : bool ) : [ true * ( false / - false * ID [ false ] [ ID ] ) ] bool { } func ID ( ) { }",
  "func ID ( ) : [ true / ID ( ) - ( - ID and ( true ) ) - false ] int { } func ID ( ) { }",
  "func ID ( ) { ID [ - 123 * ( - - ( ( ID ) ) ) ] [ true ] = ID print true } func ID ( ) { }",
  "func ID ( ID : [ ID [ 123 + ID ( ) [ false ] ] ] bool ) { }",
  "func ID ( ID : int ) { if ID ( false / - ID [ - ID ] [ ID ] * ( - ID ) ) { } if false { } } func ID ( ) { }",
  "func ID ( ) : int { call ID ( ID ( ) [ - - ID [ - ID ] ] ) if ID { } } func ID ( ) { }",
  "func ID ( ) { { } } func ID ( ID : [ ] bool ) : int { }",
  "func ID ( ) { { var ID : [ ] bool return true * ( ID ( ) ) } { } }",
  "func ID ( ID : int , ID : [ ] bool ) : int { var ID : [ ] [ ID ( ) [ 123 ] [ ID ] ] bool var ID : [ ] bool }",
  "func ID ( ) { var ID : [ true != 123 * ID ( ( ID ) ) ] [ ] bool }",
  "func ID ( ) { var ID : [ ( false * true / ID [ 123 ] [ - ID ] ) ] int }",
  "func ID ( ) { var ID : bool var ID : bool return ( - ( 123 * true / 123 ) ) } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : bool if ( true / ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( ID ( ID ( ID ) ) ) ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int ) { var ID : bool var ID : [ ] bool if ( true ) { } ID = - - ( - - ( ( ( ( ( ID ) ) ) ) ) ) }",
  "func ID ( ) : bool { var ID : int call ID ( ID [ ( true ) ] [ false ] ) call ID ( ) }",
  "func ID ( ) { var ID : [ ( ( ID ( - ( ID ) ) ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool if - true * 123 / true and ( - ID ) and ID { } } func ID ( ) { }",
  "func ID ( ID : [ - false / ID ( ) * ID - ID [ - ( ID ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { var ID : bool if ID ( ) [ - false ] { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int , ID : int ) : bool { var ID : bool var ID : int if ( false ) { } while ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ] bool } func ID ( ) { var ID : int var ID : [ ] int }",
  "func ID ( ID : bool , ID : int , ID : bool ) : bool { var ID : bool var ID : bool return }",
  "func ID ( ) { call ID ( ID ( ( ( - false ) ) ) ) ID = - - - - false }",
  "func ID ( ) : bool { var ID : int var ID : [ false / false * 123 + ( 123 ) ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { var ID : bool var ID : int return - false / ( ID ) / 123 }",
  "func ID ( ) { var ID : [ ] int var ID : int if ID [ false * ( ( ( ( 123 ) ) ) ) / false ] [ ( - - ( true ) ) ] { } print - true } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ( ( ( ID ( - ( ( ID ) ) ) ) ) ) ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : [ true - - - ID * false / ( ( - - - ( false ) ) ) ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ID : int ) : [ true * ID ( ) * ID [ - 123 ] ] int { }",
  "func ID ( ) : [ ( ID ( ID [ ID ] ) ) ] bool { }",
  "func ID ( ) { var ID : int var ID : int } func ID ( ) { var ID : int var ID : [ ] bool return ( ( ID ) ) }",
  "func ID ( ) : int { var ID : [ ] [ ] bool call ID ( ID ( true ) ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool var ID : int call ID ( ) if ID [ 123 ] [ ID ] { } } func ID ( ) { }",
  "func ID ( ) : bool { } func ID ( ) { ID ( ) [ ID [ ID ] ] [ ID ] = - - - ( false ) call ID ( ) }",
  "func ID ( ID : int , ID : [ 123 * - ID ( ID ( ID ) ) / - ID ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { while ( ID ( ) [ ( - - ID ) ] ) { } if - false { } }",
  "func ID ( ) { call ID ( 123 + ID ( true * - - ( ( - - ( ID ) ) ) ) ) }",
  "func ID ( ID : bool ) : bool { var ID : bool print ID [ - 123 * - ID ] }",
  "func ID ( ) : bool { var ID : int return ( - ( - ( ID ) ) ) }",
  "func ID ( ) { } func ID ( ID : int , ID : [ ] bool , ID : bool ) : [ ] int { var ID : [ ] int var ID : [ ] int }",
  "func ID ( ID : [ ] int ) { var ID : int var ID : int } func ID ( ) : bool { while - ID { } { } }",
  "func ID ( ) { var ID : [ ] [ ] [ ( ( ID [ ( ( ( - - ( false ) ) ) ) ] ) ) ] bool var ID : int }",
  "func ID ( ID : bool , ID : [ ( ( - - ID ( ( true ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { }",
  "func ID ( ) : [ - ID ( ( ( ID ( ) ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) : [ ] [ true != ID [ ( true ) ] [ ID ] ] [ ] int { }",
  "func ID ( ) { var ID : int var ID : int return } func ID ( ID : bool ) { var ID : int call ID ( ) }",
  "func ID ( ID : int ) : bool { var ID : int var ID : int if - ( ID ) { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ID ( ) [ 123 + ID [ true ] [ ID ] ] ] bool }",
  "func ID ( ) : int { ID ( ) [ ( ID ( ID ) ) ] = false } func ID ( ) { }",
  "func ID ( ) { return 123 / - - - false * - ID ( false ) } func ID ( ) { }",
  "func ID ( ) : [ ] [ - - false / - 123 - ( ID * ( - 123 ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID / ( 123 - false * true ) * ( ID ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - ( true * ( ( ID ) ) * ID ) ] int ) { }",
  "func ID ( ID : int , ID : int , ID : [ 123 * ( ( false ) ) * 123 ] int ) { }",
  "func ID ( ) { } func ID ( ID : [ ] bool , ID : int , ID : int ) { var ID : [ 123 ] bool }",
  "func ID ( ) { ID = ID ( 123 - - 123 + ID ) print ( ( ( ( ( - true ) ) ) ) ) } func ID ( ) { }",
  "func ID ( ) : [ ] [ false * ( ( - ( ID ) ) ) ] bool { }",
  "func ID ( ID : [ ] [ ( false * ( ID ( ) [ ID ] [ ID ] ) * ID ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ false / ID [ - ID / - ID ( - - ID ) ] ] bool ) { }",
  "func ID ( ) : int { ID [ - ( ID ( ID ) ) ] [ ID ] = 123 }",
  "func ID ( ID : bool ) : bool { var ID : bool ID = ( - ID ( ) ) print ( ID ) } func ID ( ) { }",
  "func ID ( ) : [ false * - ID ( ( ( - - ( ( ID ) ) ) ) ) * - ( ID ) ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ false / true + ID ( ) [ ( ID ) ] ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ ] [ ( - true * - ( ( ID ) ) * 123 ) ] [ ] bool ) { }",
  "func ID ( ) { var ID : bool var ID : [ - ( 123 * false >= - ID ) ] bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] int ID ( ) [ ID ( ) ] = - ( - ( ( ( 123 ) ) ) ) }",
  "func ID ( ) : int { var ID : [ - false / ID ( ) [ true / false ] * ID ] [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool if false * ( - ( 123 ) ) { } }",
  "func ID ( ) { var ID : int var ID : int } func ID ( ID : int , ID : bool ) { var ID : bool var ID : bool }",
  "func ID ( ID : int ) : bool { var ID : bool var ID : [ - ID [ false ] ] int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : bool if false * - false * - true { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : int { { var ID : [ - ID ( false ) ] bool } }",
  "func ID ( ) : int { var ID : [ ] [ ] [ ] int print - ID ( false ) while ( ( ( ID ) ) ) { } }",
  "func ID ( ) { var ID : [ ] bool if 123 - 123 / - - false * ID { } print 123 }",
  "func ID ( ) { ID = - false + - false / false / - ( ( ( ID ) ) ) + - ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : int { if - ( ( false ) ) { } } func ID ( ) { }",
  "func ID ( ) : bool { if - true + - - ID ( ) [ false ] - - - false { } }",
  "func ID ( ) { if ( ID + true - - true * - - ( - false ) ) { } } func ID ( ) { }",
  "func ID ( ) : [ ] int { return }",
  "func ID ( ID : [ ] int , ID : bool , ID : bool ) : bool { { call ID ( ) } }",
  "func ID ( ID : bool , ID : bool , ID : [ ] bool ) { ID = ID ( ( ( 123 ) ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { { var ID : bool return } while ( true ) { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool while true * - ID ( - - - ( false ) ) / 123 { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : int , ID : bool ) : bool { var ID : bool var ID : bool return ID }",
  "func ID ( ) : bool { ID ( ID * 123 and ( ID ) and ID ) = 123 }",
  "func ID ( ID : [ - - ID ( false * ( - true ) * ID ) ] bool ) { }",
  "func ID ( ID : bool ) : bool { while true * - - - - - 123 * - - ( - ( 123 ) ) { } ID = ID }",
  "func ID ( ) { if ( true / ( ID [ - ( ID ) ] ) / false ) { } ID = ( true ) } func ID ( ) { }",
  "func ID ( ID : bool ) { call ID ( ) } func ID ( ) { call ID ( ) call ID ( - ID ) }",
  "func ID ( ID : int ) : int { while ( - ( - - ID ) ) { } }",
  "func ID ( ) : [ true / ( ( ( ID ( ) ) ) ) / true ] int { } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool print 123 * ID ( - ( - false ) ) if 123 { } }",
  "func ID ( ) : int { } func ID ( ID : int , ID : bool , ID : [ ] [ - false * true ] bool ) { }",
  "func ID ( ) : bool { var ID : int print 123 * - ( true + ID - - 123 ) }",
  "func ID ( ) { var ID : bool var ID : bool return - true * ( - ( ID ) ) / - ID } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ID : int ) : int { if ID ( ( ( false ) ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : [ ( ( - ( - ID ) ) ) ] int }",
  "func ID ( ID : [ ID [ ID ( ID ( ) [ ID ] ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool { var ID : bool var ID : int ID [ ID [ - ID ] ] = 123 print ID } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int , ID : int ) : bool { return }",
  "func ID ( ID : [ ] [ ] bool , ID : bool ) : int { var ID : int var ID : bool { } { } }",
  "func ID ( ID : int , ID : [ ] [ ] [ ( 123 / - ID ( ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) { if ( true / - ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] bool ) { } func ID ( ID : [ - ID ] int ) { }",
  "func ID ( ID : [ - false * ( - - ( ID ( - false ) ) ) ] int ) { }",
  "func ID ( ) : [ ] bool { var ID : bool var ID : bool { while ID / ID * 123 { } while - ID { } } if ( - 123 ) { } }",
  "func ID ( ) { var ID : [ ID ( false + ID ( ID ) ) ] [ ] int }",
  "func ID ( ID : bool , ID : int ) { var ID : [ ] bool }",
  "func ID ( ID : int , ID : bool , ID : int ) : int { ID ( ) [ ID ( ) [ ID ] ] [ - ID ] = ID { } }",
  "func ID ( ID : [ ] bool , ID : [ ] int , ID : int ) : bool { call ID ( - ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ - ( ID [ false + ID >= ( ( - false ) ) ] ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int return } func ID ( ) : bool { while ID ( ) { } }",
  "func ID ( ID : int , ID : int ) : [ ID [ ID [ true ] ] [ ( 123 ) ] ] int { } func ID ( ) { }",
  "func ID ( ) { } func ID ( ) { var ID : [ ] int while true / true { } }",
  "func ID ( ID : bool ) : int { var ID : int var ID : int ID ( ( ( false ) ) ) = 123 } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ( - - ID * 123 / - false ) ] [ ] int }",
  "func ID ( ) : bool { var ID : bool if ( ID * false and - - false ) { } }",
  "func ID ( ) { var ID : int var ID : [ 123 * - ID ( ( - true ) ) ] [ ] bool }",
  "func ID ( ID : [ ] bool ) : int { ID ( ) = - ( true / - ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool { var ID : int call ID ( ) while ( ID ) { } } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool var ID : [ ] bool return - true + true * ID / false } func ID ( ) { }",
  "func ID ( ID : int , ID : [ true / false - ID [ ( - false ) ] - false ] int , ID : bool ) { }",
  "func ID ( ID : bool , ID : bool ) : int { var ID : bool var ID : int print - true / ( ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ - - - false - ( ( ( ID ) ) ) + ID ] bool var ID : bool }",
  "func ID ( ID : bool ) { var ID : bool var ID : [ - ( - ID ( ) ) ] [ ] bool }",
  "func ID ( ) : bool { var ID : bool while ( - ( false / ( ID ) ) ) { } { } }",
  "func ID ( ) { print ID ( - true - - ( - 123 ) ) ID = ID } func ID ( ) { }",
  "func ID ( ID : [ false * - ( ( ( ( - true ) ) ) ) / ID ] [ ] bool ) { }",
  "func ID ( ID : bool ) { var ID : int return } func ID ( ID : bool ) : bool { var ID : int while - ID { } { } }",
  "func ID ( ID : [ 123 / ( ( 123 + ID ( - ( false ) ) ) ) ] int ) { }",
  "func ID ( ID : [ ] bool , ID : [ ] [ ( ID [ ( - ID ) ] [ ID ] ) ] bool , ID : int ) { }",
  "func ID ( ID : [ ] [ ] [ - 123 / - ( - true ) - ID + ( ID ) ] bool ) { }",
  "func ID ( ) : int { var ID : [ ] bool return }",
  "func ID ( ) { var ID : bool var ID : bool return ( 123 * - - ( ( - ( - ( ID ) ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID [ ID ( true <= ( ID ) ) ] ] int , ID : [ ] int ) { }",
  "func ID ( ID : [ ] [ ( ( true == - ID ) ) ] bool ) { }",
  "func ID ( ) { var ID : [ ID ( ID ( true / - - 123 ) ) ] bool }",
  "func ID ( ) : [ - - false * ID ( ) * ( ID ( ) [ true ] ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ 123 * - ID == ( ID ) ] [ ] bool ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) : bool { var ID : bool var ID : bool { var ID : int var ID : int } { } }",
  "func ID ( ID : int ) : int { var ID : int var ID : bool call ID ( ( - ID ) ) } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : bool { var ID : int var ID : [ - - 123 ] bool } call ID ( ) }",
  "func ID ( ID : [ false * - false / true + - ID [ ID ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ 123 / false + - false == ( ( ID ) ) ] int ) { }",
  "func ID ( ID : [ false / ( ( - 123 / ID ( ) / ID ) ) / ID ] int ) { }",
  "func ID ( ) { call ID ( 123 + ID ( - ( ( ID ) ) ) ) } func ID ( ) { }",
  "func ID ( ) : int { print ID [ - ID ( true - ( - ID ) ) ] } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID ( ) / true / ( ID - false ) ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ) : [ ID [ - true / true + - ID or ( - false ) or true ] ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : int while - ID [ ID [ 123 ] [ ( - - ID ) ] ] [ - ID ] { } }",
  "func ID ( ) { var ID : [ ] int { var ID : bool } }",
  "func ID ( ID : bool , ID : [ ] int , ID : int ) : int { var ID : int print ( 123 ) } func ID ( ) { }",
  "func ID ( ) : bool { ID = ID [ - - ( ID ) ] [ false ] }",
  "func ID ( ) : [ ] int { var ID : [ ] bool ID ( ) [ - - ( ID ) ] [ ( ( ID ) ) ] = ( ( 123 ) ) ID = ( false ) } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) * ID ( - ID ( ( ID ) ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool print - - ID ( ) / ( 123 ) ID = 123 }",
  "func ID ( ) : int { var ID : [ ] bool return - false - ID [ ( false ) ] } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool { var ID : int return false * ( ID ) * ID } } func ID ( ) { }",
  "func ID ( ) : int { if false / - true > 123 / false * ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ID ( - ( - - 123 ) ) ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : bool { if ( ID ( ) ) { } { } } } func ID ( ) { }",
  "func ID ( ID : [ ID [ true / ID [ ID [ ID ] [ - ( - - - 123 ) ] ] [ true ] / true ] ] [ ] int ) { }",
  "func ID ( ID : [ ] int ) : [ ( ( - - ID [ ID ] [ - ( ID ) ] ) ) ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ( ID ( - - ID ) ) ] int }",
  "func ID ( ID : int ) { var ID : int var ID : [ ] [ ] bool { var ID : [ ] [ false ] [ ] int var ID : [ ] bool } }",
  "func ID ( ID : int , ID : bool ) { var ID : int ID [ ID ( ) + ID ] = ( ID ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ ( 123 * ID / ID ( ) ) ] bool , ID : [ ] int ) { }",
  "func ID ( ID : bool , ID : [ ID ( 123 - - - false - ID ) ] bool , ID : [ ] [ ] int ) { }",
  "func ID ( ) { } func ID ( ID : bool , ID : int , ID : int ) : [ ] [ ( - 123 ) ] [ ] bool { }",
  "func ID ( ) : bool { var ID : [ - false * ID ( ) [ ( ( ( ( ( - ID ) ) ) ) ) ] [ ID ] / - ( - 123 ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : [ ] bool if ( ( - - false ) ) { } while ID { } } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ] [ ] bool return }",
  "func ID ( ID : int ) { var ID : bool var ID : int print ( ( - ID ) ) }",
  "func ID ( ID : [ ( ( - false - false * ID [ ( true ) ] [ - ( - 123 ) ] ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ( - - ID [ - false / ( true ) ] ) ] int { }",
  "func ID ( ) : [ ] bool { if - - ( 123 * ( true ) * - ID ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ - false * ID [ ID ( ) ] ] bool } func ID ( ) { }",
  "func ID ( ID : int ) { } func ID ( ) : int { call ID ( ) print ( - true ) }",
  "func ID ( ) : [ ] int { var ID : bool var ID : int print ( - 123 - ( - - - - true ) ) }",
  "func ID ( ID : bool , ID : [ - ( true * ( - true + ID ) ) ] [ ] bool , ID : bool ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool while false / true + - ID ( ) { } call ID ( ) }",
  "func ID ( ) { } func ID ( ) : [ ] bool { var ID : bool var ID : [ ID ] bool }",
  "func ID ( ID : bool ) : [ ] int { var ID : bool print ID ( false / true ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool if false - - ( false * false / 123 ) { } }",
  "func ID ( ) { var ID : [ - - - ID [ ID ( ( true ) ) ] ] bool var ID : bool }",
  "func ID ( ) : bool { print ( - ( true * - ID [ true ] [ ( false ) ] ) ) }",
  "func ID ( ) : int { var ID : [ ID [ - ID ( ) * ( true ) ] ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int , ID : int ) { print 123 / ID ( ) >= - true if 123 { } }",
  "func ID ( ID : bool , ID : bool , ID : int ) : int { var ID : [ ] [ ] int var ID : int return ( ID ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : int while - - 123 + ID { } print ( true ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { if false * ID [ 123 and - - ( 123 ) and ID ] [ ID ] / false { } call ID ( ) }",
  "func ID ( ID : [ 123 / - false / ( true * ID >= true ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int if true / false and ( true ) { } if true { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int var ID : int call ID ( ID [ ID ] ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int print ( ( false + ( true ) - - ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ] int ) : bool { }",
  "func ID ( ID : [ ( ID ( ) <= ( ID ( ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ( ( - true and 123 * ( ID ) * 123 ) ) ] [ ] [ ] [ ] [ ] int ) { }",
  "func ID ( ) { var ID : int call ID ( ) call ID ( - false <= ID ( ) ) }",
  "func ID ( ID : [ ( ( ( ( false ) ) ) ) ] int ) { }",
  "func ID ( ID : int ) : int { var ID : int var ID : bool { var ID : [ ID ( ) ] int var ID : int } if - - - - - ID { } }",
  "func ID ( ) : int { } func ID ( ID : bool ) { var ID : int var ID : bool return ID }",
  "func ID ( ) { return }",
  "func ID ( ) : [ ] int { var ID : int var ID : [ ] [ ID ( - ID ) ] bool }",
  "func ID ( ) : int { var ID : [ ] [ ID ( ID [ - ( ( - - - 123 ) ) ] ) ] [ ] bool var ID : [ ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] int return }",
  "func ID ( ) { while 123 / true + ID ( ) [ 123 + - ID ] [ - ID ] { } } func ID ( ) { }",
  "func ID ( ) : [ ] [ ID [ ( false - ( ( ID ) ) + false ) ] [ ID ] ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int return } func ID ( ID : [ ID ( ) [ 123 ] ] [ ] [ ] [ ] int ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ] int ) : bool { var ID : [ - - ( true ) ] bool var ID : int }",
  "func ID ( ) : [ ID ( ( - false or - true or ( ( false ) ) ) ) ] [ ] int { }",
  "func ID ( ID : bool , ID : [ ( - true / ID [ - - - ( ID ) ] ) ] int , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : [ - - ( ID [ ID ] [ 123 ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int , ID : int ) : int { var ID : bool }",
  "func ID ( ) : bool { var ID : [ true == ID * false / - ( ID ) ] bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : [ ( ( 123 / false ) ) ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : bool { if ID [ ID ( ID ) ] { } if ( ( 123 ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] [ - false / true > - - - ID ] int }",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : int var ID : int print ID [ 123 ] [ - ID ] while - ( false ) { } } func ID ( ) { }",
  "func ID ( ) { if - ( false / true and ID [ ID ] ) { } }",
  "func ID ( ) { var ID : [ ] [ ( ( ID [ true ] [ ( ( ID ) ) ] ) ) ] [ ] [ ] bool }",
  "func ID ( ) : int { var ID : bool if ( false / ID >= - - - ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ ] [ ID ( ( ID ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool return ( 123 * - - - ( false ) ) }",
  "func ID ( ID : [ ] [ ] bool , ID : bool ) { var ID : [ ] bool return } func ID ( ID : [ ] bool ) { }",
  "func ID ( ) : bool { var ID : [ - ID ( ) [ - ( ( true ) ) ] [ - - ID ] ] int var ID : bool }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ] int ID [ 123 / ( ( false ) ) ] = ( 123 ) if ( 123 ) { } } func ID ( ) { }",
  "func ID ( ) : [ 123 * ID [ true + - false / ID ] * ID ] [ ] [ ] int { }",
  "func ID ( ID : bool , ID : bool ) : bool { var ID : bool return } func ID ( ) : int { return }",
  "func ID ( ) { var ID : int var ID : int if ID [ - ID [ true ] ] [ - ( true ) ] { } print - ( ID ) } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int ID ( false / 123 - 123 * ID / ( 123 ) ) = false }",
  "func ID ( ID : int , ID : [ ID ( - ID + - ( - true ) + 123 ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : [ - true - ID ( ID ) ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ( true * ( ID [ true ] ) ) ] [ ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : int { var ID : bool var ID : int call ID ( - - ID ) print 123 } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : [ - ( ( ( true ) ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int } func ID ( ) : int { var ID : bool call ID ( 123 ) call ID ( ) }",
  "func ID ( ) { var ID : int call ID ( ID ( ) [ ID * ID / ( ( 123 ) ) ] ) ID = ID } func ID ( ) { }",
  "func ID ( ) : bool { return 123 * ID < ( - ( 123 ) ) }",
  "func ID ( ID : int , ID : bool ) : int { var ID : [ ( - false * 123 / ID ) ] [ ] bool }",
  "func ID ( ID : int ) : int { var ID : int print ID [ ( - false ) ] } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int call ID ( ) ID = - false / ( 123 ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : [ - ID ( ) [ - - ID ] [ ( 123 ) ] ] bool { }",
  "func ID ( ID : bool , ID : [ ID ( - ID ( ) [ ( 123 ) ] ) ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] int { return false * true / - ID and ID and ID }",
  "func ID ( ) { var ID : int if - false / 123 * ID [ ( - ( - - ID ) ) ] [ ID ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool if ID ( ) / ( ID [ - - ID ] ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ false * ID [ ( ID ) ] [ true ] / - false ] int ) { }",
  "func ID ( ) : bool { var ID : int var ID : int if - - ( ( ( ( true ) ) ) ) { } }",
  "func ID ( ) { var ID : [ ] int if ( ID ( ) [ - false ] ) { } }",
  "func ID ( ID : [ ] int ) : [ ] int { var ID : [ ID [ ( ( 123 ) ) ] ] bool var ID : bool }",
  "func ID ( ) : int { var ID : [ 123 - ( ID ( ) - ID - false ) ] [ ] [ ] [ ] bool }",
  "func ID ( ID : int , ID : int ) : bool { print 123 / ID ( 123 ) }",
  "func ID ( ID : [ ] int , ID : int , ID : bool ) { var ID : bool call ID ( ) return } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int while - ( ID [ false ] [ ID ] ) { } }",
  "func ID ( ID : bool , ID : [ ] [ 123 * true / - 123 - - - false ] [ ] [ ] int ) { }",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) : bool { return } func ID ( ID : bool , ID : [ ] [ ] bool , ID : bool ) { }",
  "func ID ( ID : bool , ID : int ) : bool { var ID : [ ] int return true + - - ID } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int var ID : int if ID ( ) [ ( - 123 ) ] { } if ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : int var ID : bool { var ID : int var ID : int ID = ID if - 123 { } } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool ID ( ) [ - - ID [ ID ] [ true ] ] [ - ID ] = true }",
  "func ID ( ) : int { while ( 123 and ( ID ( ) ) ) { } }",
  "func ID ( ) : int { while ID * - ( - ( ID ) ) * ( ID ) { } } func ID ( ) { }",
  "func ID ( ) : [ 123 * ( ( ID ( ) [ 123 ] ) ) / true ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : bool print true - false * ( ID ) } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool var ID : int { var ID : [ - ( false ) ] [ ] bool var ID : int } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : [ ID ( ) [ false - - ID + ID ] ] int }",
  "func ID ( ID : [ ] [ ] bool , ID : [ ( - true / 123 / ( - ( ID ) ) ) ] int ) { }",
  "func ID ( ID : int ) { var ID : [ ] [ 123 - 123 * ID - ( ( ( true ) ) ) ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : bool { var ID : int { var ID : bool print false / - false / - ( true ) } }",
  "func ID ( ID : int ) : [ false + ( - false or false or true ) + ID ] [ ] [ ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] bool ) { var ID : [ - ID ( - true ) ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( - ( false * false and ( ( - ID ) ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { print ID ( ID / - true + ( - ID ) ) { } }",
  "func ID ( ) : [ ] int { while ( ID [ - ID ] [ true ] ) { } if true { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ false + true > 123 * false / 123 and 123 and - - ID ] [ ] int , ID : [ ] [ ] [ ] int ) { }",
  "func ID ( ) { call ID ( ) } func ID ( ) { var ID : int var ID : [ - ( ID ) ] bool }",
  "func ID ( ID : [ false * ( - false / ID - ID ( ) - - ID ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : bool ID [ ID [ ( 123 ) ] ] [ - ID ] = ID } func ID ( ) { }",
  "func ID ( ID : int , ID : [ false - ( - ID ( ) [ ( ( ( ID ) ) ) ] ) + false ] [ ] [ ] bool ) { }",
  "func ID ( ) { print ID ( - 123 + - - 123 * ID - - ( ( ( - 123 ) ) ) ) } func ID ( ) { }",
  "func ID ( ) : bool { } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int var ID : int } func ID ( ) { var ID : bool if 123 { } ID = ID }",
  "func ID ( ID : [ ] [ ID [ ( false / 123 + 123 + - ID ) ] [ ( ID ) ] ] int ) { }",
  "func ID ( ) : bool { print ID [ - ID ( ID ( ) ) ] [ ID ] ID = ( false ) }",
  "func ID ( ) : bool { var ID : [ - - - ID ( 123 / 123 ) ] int }",
  "func ID ( ) : int { var ID : bool return ( false * ( true * ( - true ) / ID ) / - ID ) }",
  "func ID ( ) { while true <= ( true ) - false * ( ( - ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ - - ID [ - - true + ID [ false ] [ ID ] ] ] [ ] bool ) { }",
  "func ID ( ) : bool { print ( - ( ( ID ) ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) : int { while ID ( false * ( ID [ ID ] ) * false ) { } }",
  "func ID ( ID : [ ] [ ] [ ] bool , ID : [ ] int ) { ID [ ( ID ) ] [ ( ( false ) ) ] = ID } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : [ ID ( ) [ ID [ - ID ] ] [ ( ID ) ] ] [ ] [ ] bool }",
  "func ID ( ID : [ false + - true - ( ( - true ) ) ] [ ] int ) { }",
  "func ID ( ID : bool , ID : [ ID * ID [ 123 * ID [ ( 123 ) ] [ - - true ] / - ( ID ) ] [ ID ] * ( 123 ) ] bool ) { }",
  "func ID ( ID : bool ) : int { var ID : bool var ID : bool return ID ( ) [ ID ] } func ID ( ) { }",
  "func ID ( ) { var ID : bool { } if ( ( ID [ true ] ) ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool }",
  "func ID ( ) { ID = ( 123 / ID [ - 123 ] [ 123 ] * ID ) if ( - 123 ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ ] [ - ID [ ID [ - - - - ( - ( ID ) ) ] ] ] bool ) { }",
  "func ID ( ) : bool { var ID : int var ID : int { var ID : [ ] [ ] bool { var ID : bool var ID : bool } } }",
  "func ID ( ID : [ false / ( ( 123 + ID ( ) ) ) * - ID ] bool ) { }",
  "func ID ( ) { var ID : bool var ID : int { { var ID : int var ID : [ ] bool } } call ID ( ) }",
  "func ID ( ) : [ - false / false + ( ID + 123 * - false ) + - ID ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID / ( false / - - - 123 / true ) ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : int { while - - false / true * ( ID ) { } if ( - false ) { } }",
  "func ID ( ID : int , ID : int , ID : int ) : [ ] bool { } func ID ( ) { var ID : int if ID { } }",
  "func ID ( ID : int , ID : bool ) { var ID : bool return - true * ( 123 ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] int } func ID ( ) { var ID : [ ( 123 ) ] int var ID : int }",
  "func ID ( ) : [ ] [ ] [ ] bool { var ID : int call ID ( ) while - ( - - - ID ) { } }",
  "func ID ( ID : bool ) { var ID : [ ] int var ID : int ID ( ) = - false * - false } func ID ( ) { }",
  "func ID ( ID : [ - ( 123 + ( true * - ( - ( false ) ) / false ) + ID ) ] [ ] int ) { }",
  "func ID ( ) { var ID : int var ID : bool while false * - ( - ID [ - false ] ) / 123 { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : [ ( true - true * ID ( ) and 123 and ID ) ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : bool var ID : bool return ID [ ID ] } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ( ID ( false * 123 / - ID ) ) ] [ ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - ID / ( ID ( ( ( ID ) ) ) ) * ( false ) ] [ ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ) : [ - ( - true * - true / false and ( ID ) and ID ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ID [ 123 / ( ( ( 123 ) ) ) * ( ID ) ] ] int }",
  "func ID ( ) { var ID : int return ( ( true / ( ( - ID ) ) * - - false ) ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool return - 123 + ID ( ) * false * ID }",
  "func ID ( ) { var ID : bool var ID : bool print - ( true * ID ( ID ) / false ) }",
  "func ID ( ID : [ false * ID [ ID * ID ( 123 ) ] / ( - true ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ false and ( true / ID ( - ID ) * 123 ) and - ID ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int while - - ( false * ID [ - ( ( - ( ID ) ) ) ] [ ID ] ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool call ID ( ) { while - true - ID { } } } func ID ( ) { }",
  "func ID ( ) : bool { return ID [ ( - true * ID ) ] } func ID ( ) { }",
  "func ID ( ) { print ID [ ( 123 * ID ( ( true ) ) ) ] if 123 { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : int { var ID : bool var ID : int { { var ID : int if - - ( ID ) { } if false { } } } ID = ( ID ) }",
  "func ID ( ) { } func ID ( ) : [ ( 123 * ( - ID ) ) ] int { }",
  "func ID ( ID : [ ID ( false * true * - ID ( false ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : int { var ID : [ ] int return false + ID }",
  "func ID ( ID : bool , ID : bool , ID : [ ] [ ID ( ) [ ( ID ) ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { while true / - ID ( - false - - true ) { } if - ID { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : bool { var ID : int print ID + - true != ID if false { } }",
  "func ID ( ID : [ ( ID ( 123 * ID [ ID ] [ true ] ) ) ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : int } func ID ( ) { var ID : bool var ID : int return ( - ID ) }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { ID [ ID ( - - ID ) ] [ 123 ] = ( ID ) print ( ID ) } func ID ( ) { }",
  "func ID ( ) { ID ( true * ID ( ) [ ( ID ) ] [ ( ( ( ( - ( ID ) ) ) ) ) ] * ID ) = - true ID = 123 } func ID ( ) { }",
  "func ID ( ) { ID [ - ID * ( - - true / - ID ) ] = - ( ID ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] int while 123 * - ( - ( - true ) ) { } }",
  "func ID ( ID : [ ] [ true / - ( 123 * false * ( ID ) ) ] [ ] int ) { }",
  "func ID ( ID : bool ) : int { var ID : bool var ID : bool } func ID ( ) : bool { }",
  "func ID ( ID : int , ID : int ) : int { var ID : int var ID : bool call ID ( ) ID [ - false ] [ true ] = true } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : bool }",
  "func ID ( ) : bool { { var ID : bool var ID : bool { var ID : int var ID : [ - ID ] bool } { } } ID = ( ID ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ( - - - ( - - - ID ) ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : [ - - ( ID ( ( ( ID ) ) ) ) ] [ ] bool }",
  "func ID ( ID : int ) : int { var ID : [ ] [ ] bool var ID : [ ( - - false ) ] int }",
  "func ID ( ID : int , ID : [ ] bool ) { var ID : [ ID + - true * 123 ] int } func ID ( ) { }",
  "func ID ( ID : [ 123 / - ( true != ID ( ) [ - - true ] [ - - - ( ( ID ) ) ] ) ] [ ] [ ] [ ] int ) { }",
  "func ID ( ID : [ ( - ID [ - - - - false * ( ( 123 ) ) ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] [ ID + - ( true - ( - ( true ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] [ true * false and - ID and ID ] [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( - - ( - true or false ) ) ] int var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( ) ID ( false - - ID ( ) ) = true }",
  "func ID ( ) : [ false / ( - - - ID [ 123 ] [ ID ] ) ] bool { }",
  "func ID ( ID : bool , ID : [ ] int , ID : bool ) : [ ] bool { return } func ID ( ID : [ ID ] bool ) { }",
  "func ID ( ) { var ID : bool } func ID ( ID : int , ID : int ) : [ - ID ( ) ] bool { }",
  "func ID ( ID : bool , ID : bool ) : [ ID ( false * false / ( ( - - false ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - ID [ ID [ false * false * - ID ] [ ( - ( ID ) ) ] ] ] [ ] [ ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : bool while ( ( - false ) ) { } { } }",
  "func ID ( ) : int { print 123 and ID [ false + ID + - 123 ] [ ID ] and false ID = - ID }",
  "func ID ( ID : [ ] bool , ID : [ ID [ - true * - ( true ) ] [ 123 ] ] int ) { }",
  "func ID ( ID : bool ) : [ ] [ ] int { var ID : [ ( ( ( - - false ) ) ) ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] [ - 123 / ( ID ( ( ID ) ) ) ] [ ] bool var ID : bool }",
  "func ID ( ) { var ID : bool var ID : bool print true * 123 / false and - true and ( false ) if ( - - ( ( true ) ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( ) ID ( ID [ ( - false ) ] [ ( 123 ) ] ) = ID }",
  "func ID ( ID : int ) { var ID : [ ] [ false * 123 / true > - ( true ) ] bool }",
  "func ID ( ID : bool , ID : [ ] int , ID : [ - ID ( ) [ - ( - ( ( 123 ) ) ) ] [ ID ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ false * ( - - - ( - ID ( ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : bool { while ID ( true / true / ID ) { } print ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] int , ID : int ) { print - false / true / ( true ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) : [ ( ID ( false ) ) ] int { } func ID ( ) { }",
  "func ID ( ) : bool { return ( ( 123 / false and ID and 123 ) ) }",
  "func ID ( ID : [ - 123 * ID ( ID [ ( ID ) ] ) * ( ( ID ) ) ] bool ) { }",
  "func ID ( ) { return ID [ ( - - ID ( ) [ ID ] [ - ID ] ) ] [ ID ] } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool if ( 123 - ( 123 ) ) { } print 123 } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] [ false / ( - ( 123 ) ) * - - ID ] bool var ID : [ ] int } func ID ( ) { }",
  "func ID ( ID : [ - - ( ID [ ( ( - 123 ) ) ] [ ID ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : [ ( ID [ ( ( ID ) ) ] ) ] bool { }",
  "func ID ( ID : [ ] bool , ID : [ ID [ - ( ( - false ) ) ] ] int ) { }",
  "func ID ( ) : int { { { var ID : [ ] [ ] int var ID : int } if ( - - ID ) { } } print ( ( ID ) ) }",
  "func ID ( ) : int { var ID : bool { var ID : bool var ID : int } return false + true - ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : bool { return }",
  "func ID ( ) : int { var ID : int if ID ( ) / 123 * - ( ( ID ) ) { } ID = ( - - ( ID ) ) }",
  "func ID ( ID : [ - - - ID [ ( false and ID and true ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ - ID [ ( 123 / ID ) ] [ ( ID ) ] ] [ ] int , ID : bool ) { }",
  "func ID ( ID : [ - - 123 - ( - ( ID + ID ) ) + ( ID ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { return - ( ( - ( ID ) ) ) }",
  "func ID ( ID : bool , ID : bool ) : bool { var ID : [ - - - - false and false ] int var ID : int }",
  "func ID ( ID : int ) { var ID : bool var ID : int ID [ ID [ false ] ] [ - - ( - - - ID ) ] = - ID call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : [ ] [ ] bool { var ID : int }",
  "func ID ( ) { print - ID * 123 and - - ( ( 123 ) ) call ID ( ) }",
  "func ID ( ID : bool ) { var ID : [ - ( true / ( - - ( 123 ) ) ) ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] int var ID : int if ID ( ( ID ) ) { } ID = ID } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : bool { var ID : int if - - ( ( ( - - - ID ) ) ) { } } }",
  "func ID ( ID : [ ID [ ( true - 123 < - ID ) ] [ ( ID ) ] ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) { call ID ( - ID * ( ID [ ( true ) ] ) * ( ( - ( ( ID ) ) ) ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] bool return ID / ID ( 123 ) / - - ID }",
  "func ID ( ) : int { return } func ID ( ID : [ ] int , ID : bool ) : bool { var ID : int var ID : [ ] bool }",
  "func ID ( ) : [ ( - ID ( ID - ( 123 ) ) ) ] bool { }",
  "func ID ( ) { var ID : [ ( true * ID [ ID ( ) ] [ ID ] / - ID ) ] int var ID : int }",
  "func ID ( ID : bool ) { var ID : bool var ID : int ID = true or - ( ID ) or true } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) { var ID : int var ID : int print 123 / - - ID / - ( - 123 ) }",
  "func ID ( ID : int , ID : int , ID : [ ] int ) : [ ] int { var ID : bool var ID : int { var ID : int } if - - - true { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ID / ( ( ( true ) ) ) / ID ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : int var ID : int call ID ( - - - - - 123 ) }",
  "func ID ( ID : int , ID : int , ID : int ) { if 123 * false - ID ( ) { } call ID ( ) }",
  "func ID ( ) : bool { var ID : int return } func ID ( ) { var ID : int var ID : [ ] bool ID = ID }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { var ID : int print true / - - true } func ID ( ) { }",
  "func ID ( ) { var ID : int while false / ( - false / - ( true ) ) / ID { } } func ID ( ) { }",
  "func ID ( ID : bool ) { call ID ( ) return }",
  "func ID ( ) { var ID : int return }",
  "func ID ( ID : [ ] int , ID : int ) : [ ] int { var ID : [ - - true * ( true ) / ID ] bool var ID : [ ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) : [ ( ID - ID [ 123 * 123 ] - ID ) ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : int call ID ( ) if 123 * ( ( false ) ) { } }",
  "func ID ( ) { var ID : bool while ( - false / - ID ( true ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : [ ] [ ] [ ID - ID ( ) - ( - - ( ID ) ) ] bool , ID : bool ) { }",
  "func ID ( ) { var ID : [ ID ( ) [ false * ID ( ( ID ) ) * - false ] ] bool var ID : [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ - 123 + - ( true + ( - ID ) - ( - ID ) ) ] int var ID : [ ] [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : bool var ID : int ID ( ID ( ) * - ( - ID ) ) = - ( - - ID ) }",
  "func ID ( ID : [ ID ( - ID [ - - ID ( ) ] ) ] bool ) { }",
  "func ID ( ID : bool ) : int { var ID : int print ID + ID ( ID ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ] [ ID [ - 123 + ( - ID ) - ( - 123 ) ] [ true ] ] bool }",
  "func ID ( ) : bool { var ID : int while ID ( ) [ - - ID ( ) ] { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int ) : [ ID [ ( - 123 - false + ID ) ] [ ( ( ID ) ) ] ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ false / ( ID ( ) [ ( ID ) ] ) ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ) { print ID ( ) [ ID ( ID ( ) ) ] }",
  "func ID ( ID : int , ID : bool ) : int { var ID : int var ID : [ ] int return ( ID ) }",
  "func ID ( ID : bool ) { var ID : [ ] bool { var ID : [ ID ( - ( ID ) ) ] [ ] int } }",
  "func ID ( ) { } func ID ( ) { var ID : bool call ID ( ( ID ) ) }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : int return } func ID ( ID : bool , ID : int ) { var ID : [ ] int }",
  "func ID ( ) { var ID : bool } func ID ( ) { var ID : int if - ( ( false ) ) { } while - ( ( ( ID ) ) ) { } }",
  "func ID ( ID : [ ] int ) { var ID : [ ] bool var ID : [ ] [ ] [ - - ( - - ID ) ] bool } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool ID ( false / - ID - true + ( ( ( ID ) ) ) ) = ( ID ) while ( - ID ) { } }",
  "func ID ( ) { var ID : bool var ID : int { while 123 - ID / true / - - - true { } ID = ( false ) } }",
  "func ID ( ) { var ID : [ ] int var ID : [ ID ( ) + ID [ - ( true ) ] [ ( ( - ID ) ) ] ] [ ] [ ] [ ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] bool if ID * ID [ ( 123 ) ] { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : [ ] int { var ID : bool { var ID : bool var ID : bool } return } func ID ( ) { }",
  "func ID ( ) : [ ID * ID ( ( - - ID ( ) ) ) * - - true ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID / false * - false - false / - - ( ID ) ] bool ) { }",
  "func ID ( ID : bool , ID : int ) : [ ID [ - - ( ( - ( ID ) ) ) ] [ - - ID ] ] int { } func ID ( ) { }",
  "func ID ( ID : int ) : [ ( ( ID [ ID ] ) ) ] [ ] [ ] bool { }",
  "func ID ( ) : [ ID [ ( ID * 123 - ( ID ) - true ) ] ] bool { }",
  "func ID ( ID : [ - 123 / ID [ ID ( ) [ ID ] [ ID ] ] [ - ID ] * ( 123 ) ] int ) { }",
  "func ID ( ID : [ ] [ ID ( ID ( ) [ 123 ] [ - ID ] ) ] bool ) { }",
  "func ID ( ID : int ) : int { print - ( ID ( ) / ( true ) / ( true ) ) }",
  "func ID ( ID : [ ] int ) { var ID : [ ] int var ID : int return } func ID ( ) : [ true ] [ ] bool { }",
  "func ID ( ) { var ID : int return false - true / ( false * true ) - 123 }",
  "func ID ( ) { return } func ID ( ) { var ID : int }",
  "func ID ( ) : bool { return 123 * ID ( ) [ true / - true ] [ - - ID ] / - ( - - 123 ) }",
  "func ID ( ) { var ID : bool var ID : int } func ID ( ) { var ID : int while ID [ ( - ( ( ( ( ID ) ) ) ) ) ] { } { } }",
  "func ID ( ) { var ID : bool var ID : int print - 123 * ID + - ID [ 123 ] + ( ( false ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool call ID ( ) if ( - ( - - 123 ) ) { } }",
  "func ID ( ID : [ ] [ - false - - ID [ - - 123 * ( false ) ] [ ( - ID ) ] + true ] int ) { }",
  "func ID ( ID : [ ] [ - - ( ( ( false ) ) ) ] int ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) : bool { if ID ( ) [ true ] [ - ID ] { } while 123 { } } func ID ( ) { }",
  "func ID ( ) : [ ] int { return ( ( false * ID ( ) / ( - ID ) ) ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : bool { var ID : [ ID * ID * - ( - 123 ) ] bool var ID : [ ] int } }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : bool var ID : [ ID ( ) - ( ( - false ) ) - 123 ] int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : [ ( true * true or - - - true ) ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : bool return } func ID ( ID : bool , ID : bool ) { var ID : int }",
  "func ID ( ) { var ID : int } func ID ( ) { var ID : int var ID : bool print ID print true }",
  "func ID ( ) : [ - - - - - false * ID [ ID * ID ] ] bool { }",
  "func ID ( ID : bool , ID : bool , ID : [ - false * ID ( - false ) / ID ] int ) { }",
  "func ID ( ID : bool , ID : int , ID : [ 123 and - ( ( true ) ) and - - ( ID ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool call ID ( ) }",
  "func ID ( ) : [ ] [ ID [ - 123 < ( ID ) ] [ - false ] ] bool { }",
  "func ID ( ) : [ ] [ ] bool { while ( - true and 123 and ( ID ) ) { } }",
  "func ID ( ) : [ ID [ - - false / ID ( ) + ( ( - 123 ) ) - true ] ] [ ] [ ] [ ] [ ] bool { }",
  "func ID ( ) { var ID : [ ] [ ] bool ID = ( - ( ( ID ) ) ) ID = ( - ( ID ) ) }",
  "func ID ( ID : int , ID : bool , ID : bool ) : int { var ID : bool var ID : [ ID ( ) ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : int call ID ( ) ID [ - - ID ( true ) ] [ ( - - false ) ] = - - ( false ) } func ID ( ) { }",
  "func ID ( ) { var ID : int while ( true - 123 * true - ( false ) ) { } }",
  "func ID ( ID : int , ID : int , ID : int ) : int { var ID : [ ] int var ID : int ID [ 123 ] [ - true ] = true }",
  "func ID ( ID : [ ] [ ( ( - false / ( ( ID ) ) ) ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var ID : [ false < true / 123 ] bool var ID : bool }",
  "func ID ( ) : int { print ID ( - ID [ true / - ( true ) ] [ - ( ( false ) ) ] ) }",
  "func ID ( ) : int { var ID : int var ID : [ ] int { var ID : bool } return - ID } func ID ( ) { }",
  "func ID ( ) : int { { var ID : [ ] [ ( - false / ( ( ID ) ) ) ] int } } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool print true * ( ID ( true ) ) / false ID = false }",
  "func ID ( ID : int ) : bool { call ID ( ) ID [ true / ID and - - ID ] [ false ] = ( - ( ID ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : int ID ( ) = - ID ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool print - ( 123 * - - - - ( ( false ) ) ) if ID { } }",
  "func ID ( ID : [ - ( ( ( ID ( ) * true * true ) ) ) ] int ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : int { var ID : [ - ID [ ( ( 123 ) ) ] [ 123 ] ] int var ID : int }",
  "func ID ( ) : [ false / ID [ ( ID ( ) [ ( true ) ] ) ] * ( ( ID ) ) ] [ ] int { }",
  "func ID ( ) : bool { print true + ID ( ) - - false / ( ( - - ( 123 ) ) ) / ID }",
  "func ID ( ID : [ ] [ ] bool , ID : [ - ID ( ) [ ( - false ) ] ] int , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : int } func ID ( ID : bool , ID : bool , ID : int ) : int { }",
  "func ID ( ) : [ - 123 / true / - ( - ( - false ) ) ] bool { }",
  "func ID ( ) : bool { var ID : int var ID : int call ID ( ) return ( - - ID ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : bool var ID : [ ID [ true ] ] bool }",
  "func ID ( ) { var ID : int var ID : int while 123 + 123 - - - - 123 { } while ( ID ) { } }",
  "func ID ( ) : [ ID * false != ( false and ID and ( - ( ( ID ) ) ) ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : int var ID : bool print ( ID ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] [ ] bool var ID : int print ( ( 123 ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : bool var ID : int ID ( ) [ 123 * - ID ] [ ( - ID ) ] = ID }",
  "func ID ( ) : [ 123 * 123 + 123 * false + - ( ( ( false ) ) ) ] [ ] bool { }",
  "func ID ( ) : int { var ID : bool { var ID : int var ID : int if true / - ID * ( 123 ) { } } ID = true }",
  "func ID ( ) : [ - ID ( - - - 123 and ( ID ) ) ] [ ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : bool return ID * 123 - - 123 } func ID ( ) { }",
  "func ID ( ) { var ID : int if ( ID - false and - ( - - - ID ) ) { } if ( false ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : int var ID : bool return } func ID ( ID : bool ) : [ ] [ ] bool { }",
  "func ID ( ) : [ false / ID ( ) [ false * true + ID - ID ] [ - - 123 ] * ID ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : [ 123 / ID ( ( true * ID * 123 ) ) / true ] [ ] int var ID : int }",
  "func ID ( ID : int , ID : bool ) : int { var ID : [ - ( ( false ) ) ] int var ID : [ ] int }",
  "func ID ( ) : [ ( ( ID ( ) [ ID ( ) ] ) ) ] int { } func ID ( ) { }",
  "func ID ( ) { } func ID ( ID : bool , ID : int , ID : int ) { var ID : bool var ID : [ ID ] bool }",
  "func ID ( ) { } func ID ( ) : [ ] int { return true * - - ( ( false ) ) }",
  "func ID ( ID : bool , ID : [ ] [ ] bool ) { var ID : bool var ID : [ - ( ( ( ID ) ) ) ] bool }",
  "func ID ( ) { var ID : bool while - - ( - - 123 - - ( true ) - ( ( ( ID ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] int { call ID ( ) ID = ID [ ( ID ) ] }",
  "func ID ( ID : [ ( false * - false / ( ( true ) ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ - ID ( ) [ 123 / false / false - - ID ] ] int { }",
  "func ID ( ) : int { var ID : [ - 123 * ID ( - - false ) ] [ ] bool }",
  "func ID ( ID : bool , ID : [ true / true and ( false / - true / - - 123 ) and 123 ] [ ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : [ ] [ ID ( ) * ( ( ( - true ) ) ) / true ] bool var ID : [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ ( true * ID / - true ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( ( - ID ( ) [ ID ] [ - ID ] ) ) ] [ ] bool , ID : bool ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : [ ] bool return }",
  "func ID ( ) : bool { var ID : [ - - ( true / - true * true ) ] bool var ID : bool }",
  "func ID ( ) : bool { var ID : [ ( - ( - ID * ID ) ) ] [ ] [ ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( true and ID [ - ID ] [ true ] and ( ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : [ false / - ( ID [ ID [ ID ] [ 123 ] ] ) / ( ID ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] bool { var ID : bool call ID ( ) return }",
  "func ID ( ID : [ ] [ - ID ( ) [ ID ( ) * ( ID ) ] ] bool ) { }",
  "func ID ( ID : int , ID : int ) : [ ] [ ] int { var ID : bool if true / - 123 / - - true { } print ID }",
  "func ID ( ID : int ) : bool { var ID : bool call ID ( ID ( ( false ) ) ) }",
  "func ID ( ID : [ - 123 * ID * false + ID / ( ID ) * - ( ID ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ] [ ] [ ] int ) { var ID : bool }",
  "func ID ( ID : bool , ID : [ ID * true + ID ( ) * ( ( - - false ) ) / ( ID ) ] [ ] [ ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ( ( 123 or - false ) ) ] int { }",
  "func ID ( ID : [ ] int ) : int { var ID : int var ID : [ false - - ( ( - ( ( ID ) ) ) ) + ( ID ) ] bool }",
  "func ID ( ) { var ID : int { var ID : [ ] [ ] bool } return } func ID ( ) : int { }",
  "func ID ( ID : [ ] [ ( false - ID ( ) [ false ] - ID ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ] bool , ID : bool ) : int { var ID : int while 123 { } } func ID ( ) { }",
  "func ID ( ID : [ 123 / ID ( ID ( ) [ 123 ] [ ID ] ) / - ( 123 ) ] int ) { }",
  "func ID ( ) : [ ( ( ( - - ID * - ID / - ID ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) { { var ID : bool var ID : int } return }",
  "func ID ( ) { } func ID ( ) : [ ID ( ) [ ( ID ) ] ] [ ] int { }",
  "func ID ( ID : int ) { var ID : bool var ID : [ ] int call ID ( false == ID ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : [ ] [ ] bool { print - false * ID / ID } func ID ( ) { }",
  "func ID ( ID : [ ( ( ( - - false * ( true ) ) ) ) ] bool ) { }",
  "func ID ( ) : bool { var ID : [ - - - 123 / true - false * false * 123 - ID ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : [ ( true / ID [ ID ( ( 123 ) ) ] [ - ( false ) ] / ID ) ] [ ] bool ) { }",
  "func ID ( ) : bool { ID ( ID [ - 123 / ID ( ) * ID ] ) = 123 }",
  "func ID ( ) { var ID : bool var ID : int print ( ID [ false ] [ - ( ( ( ( ( - ( - 123 ) ) ) ) ) ) ] ) if false { } } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : int } func ID ( ID : int , ID : [ ] int ) { var ID : [ ] [ ] int }",
  "func ID ( ) : [ ] int { var ID : [ true / 123 + ID ( ) [ ( true ) ] [ - ( - ID ) ] ] int var ID : int }",
  "func ID ( ID : int , ID : bool , ID : int ) { ID = - false * ( ( ( ID ) ) ) while 123 { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : [ - ( true / - true * ID ) ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ( - - false * ID [ ID [ - ID ] [ ID ] ] ) ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ ] [ - ( - false * ( ( false ) ) ) ] int ) { }",
  "func ID ( ID : int , ID : [ - - - ( ID + ( ID ) ) ] [ ] bool ) { }",
  "func ID ( ) { call ID ( ) } func ID ( ) { var ID : bool var ID : bool { var ID : [ ] int } }",
  "func ID ( ID : bool , ID : bool , ID : [ ( false / ( 123 * ID / - ( false ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ] bool var ID : [ ] bool print false * true * ( false ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : bool call ID ( ) } func ID ( ) : int { var ID : int }",
  "func ID ( ) : [ 123 + true - - ID * - ( ID ) ] [ ] bool { }",
  "func ID ( ID : int ) : [ 123 - false * 123 / ( - - ( ID ) ) ] bool { }",
  "func ID ( ID : bool , ID : int ) : bool { var ID : int while ID [ ID ] [ 123 ] { } if ID { } }",
  "func ID ( ID : bool , ID : [ ] int ) { ID [ true / ( false ) ] = ( ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : int return } func ID ( ID : int , ID : [ ] int , ID : bool ) { var ID : [ ] int var ID : bool }",
  "func ID ( ) { var ID : [ ] [ ( ID [ ID ( ) ] ) ] bool var ID : bool }",
  "func ID ( ) : bool { call ID ( ) { var ID : int { return } ID = ID } }",
  "func ID ( ) : [ ( ( 123 * false - ( - 123 ) ) ) ] int { }",
  "func ID ( ID : int ) : int { var ID : [ ] [ ( - ( ( true ) ) ) ] bool var ID : int }",
  "func ID ( ID : [ ID ( ) [ false or ID [ false ] [ - ( ( 123 ) ) ] or - - true ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) : [ true + ( ( ( ( false ) ) ) ) ] int { }",
  "func ID ( ) : bool { var ID : bool var ID : bool print - - ( ( - true ) ) print false }",
  "func ID ( ID : [ ] bool , ID : bool , ID : int ) { var ID : [ ( - ( ID ) ) ] [ ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool return }",
  "func ID ( ID : [ 123 / ID - ( ID ( ) [ ID ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( ID ( - ( ( - ( - false ) ) ) ) ) ] bool var ID : int }",
  "func ID ( ID : int , ID : bool ) { var ID : bool if ( true and true ) { } if ( - ( - - ID ) ) { } }",
  "func ID ( ID : [ ] bool ) { return true * ( ( true ) ) * ID }",
  "func ID ( ID : [ false + ID ( ( 123 / - ( ID ) / ID ) ) - - ( - - - ID ) ] [ ] [ ] [ ] [ ] int ) { }",
  "func ID ( ) : [ ] [ false * ( - - false / ID ( - false ) ) * ID ] int { }",
  "func ID ( ) : [ ] int { call ID ( - 123 * - ID [ ( ( ( - false ) ) ) ] [ ID ] ) while ( ( ID ) ) { } }",
  "func ID ( ) { var ID : int } func ID ( ) { var ID : [ ] [ - ( true ) ] bool var ID : int }",
  "func ID ( ID : bool , ID : int , ID : int ) { { return } } func ID ( ) { if ( ( ( ( - ( false ) ) ) ) ) { } ID = ( 123 ) }",
  "func ID ( ID : bool , ID : [ ] [ - ( - ID / - - ID ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) : [ ( ID ( ) [ 123 == - - ID ] ) ] [ ] [ ] bool { }",
  "func ID ( ) : bool { var ID : int var ID : bool { var ID : bool var ID : int } if ( true ) { } } func ID ( ) { }",
  "func ID ( ) { print true * ( ( ID / false * ( ID ) ) ) * - - ( - ID ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { var ID : bool var ID : [ ID ( - ( ID ) ) ] bool }",
  "func ID ( ) { var ID : [ ] [ ] bool var ID : bool return - - ( ( ( ( - ID ) ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : int print ID ( true * - - ( ( ( - ID ) ) ) ) }",
  "func ID ( ID : int ) : [ ( ID ( ) - - ID [ ( ID ) ] [ ( ( ( ID ) ) ) ] - ( 123 ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) : bool { print ( - false * ( false and ( ( ( - false ) ) ) and 123 ) * ( ( ( true ) ) ) ) { } }",
  "func ID ( ) : int { var ID : [ ( - true * - true / ( - ( ID ) ) ) ] int } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : bool var ID : bool while - ID ( false ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool if - ID ( ID ( ) / ( ID ) / ID ) { } } func ID ( ) { }",
  "func ID ( ) { if ( 123 + ID [ false * ID / ID ] - ID ) { } }",
  "func ID ( ID : bool ) : int { if ID ( ) [ - ID [ 123 ] [ - ( ( false ) ) ] ] [ true ] { } }",
  "func ID ( ID : bool , ID : [ ] bool ) : [ ] [ - true / - - - ID * - - - false ] int { } func ID ( ) { }",
  "func ID ( ID : bool ) { ID [ ( ID [ true / ID ] [ - ( ID ) ] ) ] [ - ID ] = ( - ID ) }",
  "func ID ( ) : int { ID = ( - ( ( - 123 ) ) ) }",
  "func ID ( ) { if - - ID * - true / ( true > ID ) { } ID = ID } func ID ( ) { }",
  "func ID ( ID : [ ID ( ( - true - ID ( ) ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ] bool , ID : int ) : bool { var ID : bool }",
  "func ID ( ) : [ ] bool { var ID : [ ( - ID - - ( - ( true ) ) ) ] [ ] bool var ID : [ ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : int return } func ID ( ID : [ ] bool , ID : [ ] bool , ID : bool ) { }",
  "func ID ( ) { var ID : [ ] int var ID : int ID [ ( ID * ( ID ) ) ] = ID } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int if 123 / true / ( false * ( ( ( true ) ) ) ) { } while ( ( ID ) ) { } }",
  "func ID ( ) : bool { var ID : bool { var ID : bool var ID : int while ( ( ( - - - ID ) ) ) { } } }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] int return } func ID ( ) : int { var ID : bool print ID if ID { } }",
  "func ID ( ) { var ID : bool var ID : [ ] [ ID [ - ( ID ) ] [ - true ] ] [ ] bool }",
  "func ID ( ID : int , ID : [ ] bool ) { var ID : [ ( - ID [ - ( - false ) ] [ true ] ) ] int var ID : [ ] bool }",
  "func ID ( ID : [ - - - - ID [ ( ( ID ) ) ] [ - - false ] ] [ ] bool ) { }",
  "func ID ( ID : [ ] int , ID : [ ] bool ) { var ID : int while true - - ID + - true { } ID = ID } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) and - ( 123 * 123 / - - - true ) ] int ) { }",
  "func ID ( ) : int { var ID : bool { if - ID [ true / ID / - - ID ] [ false ] { } } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int ) { } func ID ( ) { var ID : [ ID ] bool }",
  "func ID ( ) : int { } func ID ( ) { var ID : bool var ID : bool { var ID : [ ID ] int var ID : bool } ID = - ( ID ) }",
  "func ID ( ID : int , ID : int ) : [ ] bool { var ID : bool return - - 123 * ID / ID }",
  "func ID ( ) : bool { var ID : [ false + - ID ( ( ( ( - ( ( ID ) ) ) ) ) ) + ID ] int var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int ) : bool { var ID : [ true * true * - 123 ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool var ID : [ - ( ( ID ) ) ] int } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int var ID : int return ( - ID * ( ( - - 123 ) ) ) }",
  "func ID ( ) : bool { var ID : int var ID : [ ID ( true / ( true ) ) ] [ ] bool }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : int var ID : [ true / ID ( ) ] int }",
  "func ID ( ID : int , ID : bool ) : int { var ID : bool var ID : int if 123 * ( 123 ) / ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool ID = ( false * - false <= ( ID ) ) while false { } }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : int var ID : int if false / - ( - ( - ID ) ) / 123 { } } func ID ( ) { }",
  "func ID ( ) : [ false + ( 123 * ( ( - - ( true ) ) ) * ID ) ] bool { }",
  "func ID ( ) { var ID : int var ID : bool print - true / ID ( ) [ - ID ] [ - ( ID ) ] * ( ( ID ) ) ID = false } func ID ( ) { }",
  "func ID ( ) : [ ] int { ID ( 123 / ( ( - - ID ) ) ) = ID while - true { } }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ ID ( ) / ( ID ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) { print false and ( - ID [ - - - - ID ] [ true ] ) and ID { } }",
  "func ID ( ID : [ ] bool , ID : bool ) : int { { call ID ( ) print ID ( ) } } func ID ( ) { }",
  "func ID ( ) : int { while ID ( ) [ ID * - 123 >= - false ] [ ( - ( ID ) ) ] { } { } } func ID ( ) { }",
  "func ID ( ) : [ - ID [ true / ID ( ) + ( - true ) + - true ] ] [ ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( 123 / - - false / ( ( ( ID ) ) ) ) ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - 123 * - ( ID ( ) [ ID ] ) / true ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ - ( 123 / true * false != ( ID ) ) ] int ) { }",
  "func ID ( ) : int { return } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool { var ID : [ ] [ 123 * ( ID ) * true ] [ ] [ ] int } }",
  "func ID ( ) : bool { return ID [ ID [ ( ID ) ] [ true ] ] [ ID ] } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool while 123 / ID - ( true ) + true { } while ID { } } func ID ( ) { }",
  "func ID ( ) { } func ID ( ID : bool ) : bool { var ID : [ ] [ - true ] [ ] int var ID : [ ] [ ] bool }",
  "func ID ( ) { var ID : int print ID [ false + ( ( ( - ID ) ) ) + - true ] } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ] [ ] [ - ( ID / ( ID ) ) ] int var ID : bool }",
  "func ID ( ) : bool { print ( false * 123 / true or - ID or - ( 123 ) ) } func ID ( ) { }",
  "func ID ( ) : [ ] int { return - false * - ID ( ID ( ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : int if 123 / ID ( ( ( - false ) ) ) { } print - false }",
  "func ID ( ID : [ ] int , ID : int ) { ID [ ID [ ID ] ] = false }",
  "func ID ( ) { ID [ false / ID ( - - ID [ ( ( ID ) ) ] ) / ID ] [ ID ] = ( - 123 ) ID = ( - ID ) }",
  "func ID ( ID : [ ] int , ID : [ ] int , ID : int ) : bool { var ID : int var ID : bool { } }",
  "func ID ( ) { var ID : int { var ID : bool var ID : int ID = ID ( 123 ) { } } }",
  "func ID ( ID : int ) { var ID : int while ( true * - ID * ID ) { } while ID { } } func ID ( ) { }",
  "func ID ( ) : bool { return ID ( true / - - false * - - - - - true ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : int print - - false * ID ( ) [ - true ] * false print ID }",
  "func ID ( ) { ID [ ( ( 123 + ( - ID ) ) ) ] [ true ] = ( - ( ( ( false ) ) ) ) if - false { } }",
  "func ID ( ID : bool , ID : [ true / - - false or - false * ( ID ) or false ] int , ID : bool ) { }",
  "func ID ( ) : bool { } func ID ( ID : int , ID : bool ) { var ID : int var ID : bool { var ID : [ ] int var ID : int } print - false }",
  "func ID ( ID : [ - ( - ( - ( - true ) ) ) ] [ ] int ) { }",
  "func ID ( ) { if ID ( ) [ - - true * true - - - ID + ID ] [ false ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool { var ID : [ ID ( ID ) ] [ ] int var ID : int } while - ( false ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : int { var ID : int var ID : [ ID ( - - ( ( ID ) ) ) ] [ ] bool }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ID : int { var ID : bool var ID : bool if ID { } } ID = ( ( ID ) ) }",
  "func ID ( ) { call ID ( true * ( ( ID [ - - - ( - ( false ) ) ] ) ) / - ID ) while ID { } }",
  "func ID ( ID : [ ] [ ID ( ) [ ID ( ) and ID and false ] [ ( true ) ] ] bool ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) { var ID : int var ID : bool { ID ( ) [ ID ] = false } }",
  "func ID ( ) { var ID : [ false * false - ( - - ( ID ) ) ] int } func ID ( ) { }",
  "func ID ( ID : [ false / ID ( 123 * - true and ID and ID ) ] bool ) { }",
  "func ID ( ) { var ID : bool var ID : int call ID ( ( false + 123 / ( - false ) * - - ID + ID ) ) ID = ( ID ) } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] [ ] int { var ID : int if - true + ( 123 ) + ( ( true ) ) { } ID = ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int , ID : int ) { return } func ID ( ID : [ ID ] [ ] bool ) { }",
  "func ID ( ) { var ID : bool var ID : int while ID ( ) [ - ( ID ) ] [ true ] { } { } }",
  "func ID ( ID : [ ] [ - ID ( ) [ ( - ( ID ) ) ] [ ( ( ( - ID ) ) ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) { print ( ID ( ) [ ( ID ) ] [ ID ] ) while 123 { } } func ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( false / - ( true - 123 ) ) print ( ID ) } func ID ( ) { }",
  "func ID ( ID : [ 123 / - ID [ 123 / ( - false ) / - ID ] [ - - ( ID ) ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int call ID ( ) }",
  "func ID ( ) : int { var ID : bool var ID : [ 123 + - ID [ false ] [ ID ] ] bool }",
  "func ID ( ) { call ID ( ) while - ID ( ) - true * ID * ( - - ( 123 ) ) - ID { } }",
  "func ID ( ) { var ID : int { var ID : [ ] int } { var ID : [ ( 123 ) ] int } } func ID ( ) { }",
  "func ID ( ) : [ 123 / ( - - ( false / - ( ( - false ) ) ) ) ] [ ] int { }",
  "func ID ( ID : [ ] bool , ID : int ) { var ID : [ 123 / ID [ ( true ) ] ] int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : bool if - ID [ ID ( ) ] { } print ID }",
  "func ID ( ) { if true / ( ( ID [ - ( ID ) ] [ 123 ] ) ) { } ID = - ID } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : [ ] int print ( ID / - ( ID ) ) }",
  "func ID ( ID : bool ) : bool { { print - false / false <= - ( ID ) ID = ( ID ) } }",
  "func ID ( ) { var ID : [ - - - 123 and - ID ( true ) ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : int if 123 * false - false / - ( - - ID ) * ( ID ) { } { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] [ ID [ ( true ) ] ] int } func ID ( ) { }",
  "func ID ( ) { return ID / ( - ( 123 * - ( false ) / - - ID ) ) }",
  "func ID ( ID : [ ] [ ] bool , ID : int , ID : bool ) { var ID : bool { ID [ 123 ] = - ( - ( 123 ) ) } } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ 123 + - ( 123 ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] int { var ID : int var ID : bool }",
  "func ID ( ID : bool , ID : [ ] bool ) : bool { var ID : [ - - ( false ) ] int var ID : [ ] bool }",
  "func ID ( ) : bool { var ID : int return } func ID ( ID : bool , ID : int ) { print - false print ( ( - ( true ) ) ) }",
  "func ID ( ) : bool { { } if 123 + - - - - ( ( true ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int { var ID : [ ( ID [ ( ID ) ] ) ] int var ID : [ ] int } print ( ID ) }",
  "func ID ( ID : bool ) : bool { var ID : [ ] [ ] bool } func ID ( ) { var ID : [ ] [ ] [ ] [ ] int }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ true / true / - - 123 != ID ] int } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int , ID : int ) : bool { var ID : [ ] int var ID : bool while true { } }",
  "func ID ( ) : bool { var ID : [ ID ( ( ID * - ( ( - - true ) ) * ID ) ) ] bool var ID : bool }",
  "func ID ( ) { while ( ( ( - ( true ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool if ID ( ) / ID [ 123 > false ] [ 123 ] { } print ID } func ID ( ) { }",
  "func ID ( ID : [ - false * ( ( ( ID ) ) ) * ( - - - true ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ false and ID ( - ID [ ( ID ) ] [ - ( false ) ] ) and - true ] int , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : int ID [ - ID [ ID ] ] [ ID ] = - 123 if true { } }",
  "func ID ( ) { var ID : bool { if - 123 != ID [ ID ] { } { } } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : [ ] [ ] bool return ( ID ) } func ID ( ) { }",
  "func ID ( ) : bool { while ID [ - true / - ( ID ) ] { } ID = ID } func ID ( ) { }",
  "func ID ( ) : bool { ID [ false * - false or - ( ID ) ] = 123 } func ID ( ) { }",
  "func ID ( ) : [ ] [ ID / - ID ( ( ( ( ID ) ) ) ) / false ] int { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : [ - false + false - ID ] int }",
  "func ID ( ) : int { while ID ( 123 / ( true * - ID / ID ) ) { } }",
  "func ID ( ID : bool ) { var ID : [ - ( ID ( ) [ ( ( ( - - true ) ) ) ] [ - ID ] ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool if - - - false * - - ( ID ) { } if ( ID ) { } } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : [ - - ( - ID ( ) [ ( ( ( - 123 ) ) ) ] ) ] bool }",
  "func ID ( ID : bool , ID : bool , ID : int ) : [ ] [ ] bool { var ID : [ - ( - ID ) ] bool var ID : [ ] bool }",
  "func ID ( ID : int , ID : bool , ID : [ 123 * ID ( ) and - - ( ( - true ) ) and false ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { print false / ( ID [ true * - ID / ID ] ) / 123 } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool , ID : int ) : int { var ID : [ ( ( - false ) ) ] [ ] [ ] [ ] int var ID : [ ] [ ] [ ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] [ - ID ( ) / ( - false ) ] bool } func ID ( ) { }",
  "func ID ( ) : bool { call ID ( ID ( - - - ID [ ( false ) ] ) ) if - ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ( ID [ - - ( true ) ] ) ] bool ) { }",
  "func ID ( ) : [ ( ID ( ( ( ( true ) ) ) ) ) ] bool { }",
  "func ID ( ID : bool , ID : [ ID ( ) * - false + 123 - - - 123 ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool ) : int { var ID : int while - ( false ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool , ID : int ) { ID [ ID ( ) [ ( - ID ) ] [ ( ( - ID ) ) ] ] = ( true ) { } }",
  "func ID ( ID : bool , ID : int ) { { var ID : [ - true + ( ID ) - false ] [ ] int } }",
  "func ID ( ) : [ ] int { var ID : [ ID ( 123 * ID [ ( ( ID ) ) ] [ false ] ) ] int var ID : bool }",
  "func ID ( ) { call ID ( ( ID [ 123 - ( ID ) - 123 ] ) ) ID = false } func ID ( ) { }",
  "func ID ( ) { return false / ( ID ( 123 >= - ID ) ) }",
  "func ID ( ID : int , ID : [ ] bool ) : [ true * - ID / ( - ID ) ] int { }",
  "func ID ( ID : int , ID : int ) : int { var ID : [ ( false * false / true ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ID : [ - ( ID ( ) ) ] int var ID : [ ] int }",
  "func ID ( ) { while - ID ( ) / ID ( - ( - - - 123 ) ) * true { } print - false } func ID ( ) { }",
  "func ID ( ID : [ ( - true > ( true / true ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { call ID ( - ID ( ) * ( ID [ ( ( false ) ) ] ) * ( ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool while ID ( ) [ ( ( ID ) ) ] [ 123 ] { } print ( 123 ) }",
  "func ID ( ID : int , ID : bool , ID : bool ) { print 123 * 123 - - false / - 123 - false }",
  "func ID ( ) : bool { var ID : [ ] bool print ID ( ) - 123 * - true * true call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ ID ( - false / ( - ID ) / ( ( ID ) ) ) ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ID [ - ID * ( - false ) ] [ - - true ] ] bool ) { }",
  "func ID ( ID : bool , ID : int , ID : [ - true / ( ID ( ) [ ( ID ) ] [ false ] ) ] int ) { }",
  "func ID ( ) { var ID : int var ID : int if true / true + true / false + 123 { } }",
  "func ID ( ) { var ID : bool var ID : int return 123 / true * ( false * ( ( 123 ) ) * true ) } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool ) : int { { { var ID : int return } { var ID : bool var ID : bool } } }",
  "func ID ( ) : bool { var ID : [ ID [ ( false / ID * - true ) ] [ false ] ] bool } func ID ( ) { }",
  "func ID ( ) : bool { ID ( ) [ ID [ ( true ) ] ] = ID }",
  "func ID ( ID : int , ID : [ ( ( ( - - - ID ) ) ) ] int ) { }",
  "func ID ( ID : int , ID : [ ] int ) : [ ] int { var ID : [ ] bool var ID : int if - false { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ false * true * 123 - - - false * - true * - - ( - true ) ] [ ] bool var ID : [ ] [ ] bool }",
  "func ID ( ID : [ ] int , ID : bool ) : bool { var ID : bool { if ( ( ID ) ) { } } while ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ true + - - ( ( - ID ( ) ) ) ] [ ] [ ] bool ) { }",
  "func ID ( ID : [ ] bool ) : [ ] bool { var ID : int var ID : [ ] bool return ( false ) }",
  "func ID ( ID : [ ] int , ID : [ ID [ 123 / true < ( ( ID ) ) ] [ ID ] ] [ ] [ ] [ ] [ ] int ) { }",
  "func ID ( ) : bool { var ID : [ ] int var ID : int }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : int var ID : bool ID ( ) [ - 123 ] = ( true ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : [ ] bool var ID : [ ID [ ID ] [ ( ID ) ] ] int }",
  "func ID ( ID : [ ] int , ID : [ ] int ) : int { var ID : int } func ID ( ) { var ID : bool var ID : [ ] [ ] int }",
  "func ID ( ID : int , ID : int ) { } func ID ( ) : int { var ID : [ ] [ false ] bool var ID : [ ] [ ] [ ] bool }",
  "func ID ( ID : int , ID : [ ] int , ID : int ) : bool { while ID ( ) [ ( ( - - ID ) ) ] { } { } }",
  "func ID ( ) { var ID : [ - - - false - ID ( - ID ) ] int var ID : [ ] bool }",
  "func ID ( ) : int { while ID [ 123 + ( false ) ] { } { } } func ID ( ) { }",
  "func ID ( ID : [ false * ID ( ) [ ( true * ID ) ] [ 123 ] ] bool ) { }",
  "func ID ( ID : int ) { var ID : [ 123 + ( ( ID ) ) - - ( ( - 123 ) ) ] bool var ID : bool }",
  "func ID ( ID : bool , ID : [ true * ID [ ID ( 123 ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { } func ID ( ID : int , ID : [ ] [ ] bool ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : [ ID [ true * - false ] [ ( ID ) ] ] bool { } func ID ( ) { }",
  "func ID ( ID : [ - ID ( ) [ true - ( ( - ( false ) ) ) - ID ] [ 123 ] ] [ ] int ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : bool { var ID : int var ID : [ ] [ ID ] int }",
  "func ID ( ) { var ID : int { var ID : bool print false - ID [ - ( - ( ( 123 ) ) ) ] ID = ( - ( false ) ) } print ID } func ID ( ) { }",
  "func ID ( ) : bool { return true / true - true - - ( true ) }",
  "func ID ( ID : int ) : bool { var ID : [ - ( true - ID ( ) + ( - ID ) ) ] bool var ID : [ ] int }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ ] bool print ( ( 123 ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ true * ( false == ( ID ) ) / true ] bool var ID : bool }",
  "func ID ( ID : [ - false * ( ( true - ( - - ( - 123 ) ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] [ - - 123 / ( ( ( ( ID ) ) ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ( ID ( ID ) ) ] bool }",
  "func ID ( ID : [ ] bool , ID : int ) { var ID : [ - ID / ID ( ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ] int return } func ID ( ) : int { var ID : int return }",
  "func ID ( ID : bool , ID : [ ] bool , ID : [ ] bool ) : [ ] bool { var ID : bool var ID : int while false { } }",
  "func ID ( ) { var ID : [ - ID [ false / false / 123 - ID + - - ( ID ) ] [ ID ] ] int }",
  "func ID ( ) { var ID : [ ] [ ] int var ID : int while - false * - 123 * - ID { } }",
  "func ID ( ) { return } func ID ( ID : bool , ID : int ) { print ( - ID ) }",
  "func ID ( ) { var ID : int var ID : int while ( - ID ( ( true ) ) ) { } }",
  "func ID ( ) { while ID * ID ( ( ( ( ID ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID [ ( 123 + false - ID ) ] [ ( ( ID ) ) ] ] bool ) { }",
  "func ID ( ID : int , ID : [ ] bool ) : [ - 123 and ( - ID ) ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ true / ( - ( true and ( ( ( - false ) ) ) and true ) ) / - 123 ] int ) { } func ID ( ) { }",
  "func ID ( ) { call ID ( ID [ ID [ ( ( 123 ) ) ] [ ID ] ] ) }",
  "func ID ( ) : [ ID [ - - - 123 / false <= ID ( ) ] [ ( - ( - false ) ) ] ] bool { }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ] bool var ID : [ ] bool print ID ( ) if ( - ID ) { } }",
  "func ID ( ID : [ ( - ID / ( true and false ) / ID ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) { call ID ( - ID - 123 / - ID / ( - ( false ) ) - - ID ) if - ( - ID ) { } }",
  "func ID ( ) { var ID : bool ID ( 123 * ID / ID ( - - ( 123 ) ) ) = true } func ID ( ) { }",
  "func ID ( ID : int ) : [ ID + ( ID ( ID ) ) ] bool { }",
  "func ID ( ID : bool , ID : [ ] bool ) : bool { return ID ( ) [ ( ID ) ] } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : int { } func ID ( ) { while - ( - ID ) { } ID = 123 }",
  "func ID ( ID : bool , ID : [ ] [ ID ( ID [ 123 ] ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( ID ( ) [ ( - ( - ( ( false ) ) ) ) ] [ ID ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { call ID ( ) } func ID ( ) { var ID : [ true ] int }",
  "func ID ( ID : bool ) : [ true / - 123 - 123 * true / ID [ false ] [ ( false ) ] ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool return ID / - ID ( 123 / false / false ) * ID } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) : bool { var ID : bool var ID : [ 123 / true * 123 ] int } func ID ( ) { }",
  "func ID ( ) { { if false * ID - - 123 / ( - ID ) - ID { } } print ID } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ false / ID ( 123 >= false ) * - - 123 ] int }",
  "func ID ( ) : int { var ID : int var ID : int print true - ( - ID ) - - 123 if 123 { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool if ( ( 123 * ID [ ( ( false ) ) ] [ ID ] ) ) { } call ID ( ) }",
  "func ID ( ) : [ ] int { var ID : [ 123 * true * ( ( - ID ) ) ] bool var ID : [ ] int } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool ) { var ID : int } func ID ( ID : int , ID : [ - ( - - - ID ) ] int ) { }",
  "func ID ( ) { var ID : bool var ID : bool ID ( ) [ - ( false ) ] [ ( false ) ] = ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( - - ID ( ) [ 123 ] [ true ] ) ] [ ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { var ID : [ ] bool var ID : [ ] int return ID } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int , ID : int , ID : int ) : int { var ID : int var ID : bool { var ID : int var ID : int } } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool , ID : int ) : int { var ID : [ ID ( 123 ) ] int }",
  "func ID ( ID : bool ) { var ID : int if ID ( ) * ID [ ( - ( false ) ) ] [ ID ] { } }",
  "func ID ( ID : [ ] [ ID [ - true - - - - ID ] [ ( - - - ID ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : int print ID [ ID [ - ( ID ) ] [ ID ] ] [ ID ] }",
  "func ID ( ID : int , ID : int ) { var ID : [ ID ( ) [ - ID ] ] int }",
  "func ID ( ) { var ID : int } func ID ( ID : int , ID : [ ] [ ( false ) ] int ) { }",
  "func ID ( ) { var ID : bool print ID [ ID ( - ID ) ] ID = ID }",
  "func ID ( ) : bool { var ID : [ ID ( ( true - ID + ( ( ID ) ) ) ) ] bool var ID : [ ] [ ] bool }",
  "func ID ( ID : int , ID : [ ( ID / - ( ( ID ) ) * ID ) ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( ( ID [ ( - 123 ) ] ) ) ] bool , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ false * ( false < 123 or ( true ) or ( ID ) ) ] int ) { }",
  "func ID ( ) : int { var ID : int var ID : [ ] [ - - ( - ID ) ] bool }",
  "func ID ( ID : [ ] int , ID : int ) : int { { var ID : [ - ID ( ) ] [ ] int } call ID ( ) }",
  "func ID ( ID : int , ID : bool ) { while ID ( false + ID ( ) - ( ( - ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ) : [ false + ID ( ( false * 123 ) ) ] bool { }",
  "func ID ( ) { ID [ true / - - false and - - 123 - - 123 + false and - 123 ] [ ( ( 123 ) ) ] = ( - - - ID ) while ID { } } func ID ( ) { }",
  "func ID ( ID : int ) : bool { ID ( 123 * - ( false * 123 * true ) ) = ID while ( - 123 ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : int { var ID : [ ] [ ] bool var ID : int { var ID : bool var ID : [ ] int } } func ID ( ) { }",
  "func ID ( ) { var ID : [ false + ID ( ) + ( ( - ID ) ) ] int } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : int var ID : [ - ID [ ID ] ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) : bool { var ID : bool { } ID [ true ] [ - ( - ( - - - ( ID ) ) ) ] = 123 }",
  "func ID ( ID : [ ] bool , ID : bool , ID : bool ) { var ID : [ ID [ 123 ] ] int var ID : [ ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] int , ID : [ ] int ) { ID ( ) [ ID ] = true while 123 { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( ID [ ( - false ) ] ) ] int ) { }",
  "func ID ( ID : [ ] int ) { while true * - ID ( ) + ID [ ID ] + - ( ( ID ) ) { } }",
  "func ID ( ) : [ ] bool { { var ID : int var ID : int } } func ID ( ID : [ ] int , ID : [ ] bool ) { }",
  "func ID ( ID : [ ] int ) : [ ] bool { var ID : [ ( true * ( - ( true ) ) / ( ID ) ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { } func ID ( ) { var ID : bool var ID : bool print true - - ID while ( - ( ID ) ) { } }",
  "func ID ( ID : [ ( - ID / false * ID ( ) - ID ) ] bool ) { }",
  "func ID ( ID : bool , ID : bool ) : [ ID ( ID ( ID ) ) ] [ ] bool { }",
  "func ID ( ID : int ) : int { var ID : bool call ID ( ) } func ID ( ) { var ID : bool }",
  "func ID ( ) : [ ] bool { var ID : bool return ( - ( 123 ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : int while ID ( ) [ - - ID ] { } }",
  "func ID ( ID : bool , ID : [ ] [ ( - ( ID ( ( true ) ) ) ) ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( ( ID [ - ( ID ) ] [ - ( ID ) ] ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : int { { var ID : int var ID : bool call ID ( ) call ID ( ) } ID = 123 }",
  "func ID ( ) : bool { var ID : int return ID ( ) + - - ID ( ) [ true ] [ false ] - ( ID ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID ( ) [ 123 * false + - - - - true - false ] ] bool , ID : bool ) { }",
  "func ID ( ) : int { var ID : int var ID : [ ID / ID ( ) [ ( ID ) ] [ false ] ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { ID [ ID * ID [ ID ] [ ( ( ID ) ) ] / false ] = ID }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : bool if ID [ - - - - 123 ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : int print ( - - ( - ID / 123 ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : int ID ( ( ( - - ( ( - false ) ) ) ) ) = false } func ID ( ) { }",
  "func ID ( ) : int { call ID ( ) { if ( true * false + true + ( ID ) ) { } ID = false } }",
  "func ID ( ID : [ ] [ ] [ - 123 / ID ( ) [ - false ] [ - 123 ] * - false ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ true * ( true and ( ID ) ) ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : int if - 123 or ( - ID ) or ID { } print ( - ( ID ) ) }",
  "func ID ( ID : bool , ID : int ) : [ ] bool { var ID : bool ID ( ) [ ID ] [ 123 ] = ( - false ) print ( - ID ) }",
  "func ID ( ID : bool , ID : [ ] [ ] bool , ID : bool ) { var ID : [ true * 123 / 123 ] [ ] bool }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var ID : [ false - - ( ( ID ) ) ] [ ] int var ID : bool }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ID : int }",
  "func ID ( ) { return ( ID ( ( ID [ ID ] [ false ] ) ) ) } func ID ( ) { }",
  "func ID ( ) : int { { call ID ( ID ( ) [ ID * ( ID ) ] [ - - ( - - ID ) ] ) } } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) { var ID : bool var ID : int return false / ( - - - false ) * false } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : bool var ID : [ ] [ ( ID ( ) ) ] bool }",
  "func ID ( ID : [ - ( false * ( 123 * ID [ ( false ) ] / 123 ) ) ] [ ] bool ) { }",
  "func ID ( ) : int { var ID : int var ID : bool call ID ( ) return } func ID ( ) : [ ] int { }",
  "func ID ( ) : int { var ID : [ 123 <= true / - true - ( ( ID ) ) ] [ ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : bool { var ID : bool print true * ID ( ) / ( ( true ) ) }",
  "func ID ( ID : bool , ID : int , ID : int ) : [ ID ( ( - ( - ID ) ) ) ] [ ] bool { }",
  "func ID ( ID : [ ] int , ID : [ ] int , ID : int ) : bool { var ID : int } func ID ( ID : bool ) { }",
  "func ID ( ) : bool { print - ID * - ( ID ( - ID ) ) * - - ID }",
  "func ID ( ID : bool , ID : [ ] int , ID : int ) { var ID : bool var ID : [ ID ( ) ] [ ] int }",
  "func ID ( ID : bool , ID : [ false * - - - ( - false * ( - ID ) ) / ID ] int ) { }",
  "func ID ( ID : [ ( - ( ( false * ID ) ) ) ] int ) { }",
  "func ID ( ID : [ ( ( ID [ true * false * - 123 ] [ false ] ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : int var ID : bool call ID ( ( ( ( ID ) ) ) ) while ID { } }",
  "func ID ( ) : int { var ID : int } func ID ( ID : [ ( ( ID ) ) ] bool ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) : int { var ID : [ ( ( ID ) ) ] [ ] int var ID : [ ] int }",
  "func ID ( ID : int , ID : [ ] [ ] [ ] int ) { var ID : [ ( ID ) ] [ ] bool var ID : bool }",
  "func ID ( ID : bool ) : bool { var ID : [ ( ( ( ( ID ) ) ) ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : [ ] int { while ( 123 / ID * ID ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : [ ] bool return } func ID ( ) { var ID : int }",
  "func ID ( ) : bool { var ID : int { var ID : bool ID ( ) = - ( - ( true ) ) } }",
  "func ID ( ) : [ ] [ ] int { var ID : [ ] int var ID : [ true - ID ] [ ] int }",
  "func ID ( ) : [ ( false / ID / ( - ID [ ( ID ) ] [ ID ] ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) : bool { while ( - - - 123 - ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ true and ( ( - - - ID ) ) ] [ ] [ ] bool , ID : int ) { }",
  "func ID ( ID : bool ) : int { var ID : bool var ID : [ ] [ ( ID ) ] bool }",
  "func ID ( ) : [ - ( ( 123 * true * ID ( ) ) ) ] int { }",
  "func ID ( ID : [ ( - - ( - - ( ( - false ) ) ) ) ] bool ) { }",
  "func ID ( ) : [ ] int { var ID : [ ] [ ( 123 - ( ID ) ) ] bool }",
  "func ID ( ID : int ) : [ ID ( ) [ ID [ ( ( ID ) ) ] [ false ] ] ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : [ - ( - ID ( ) != ( false ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID [ - true * - 123 >= ID ] [ - ( true ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ( 123 * - ID ( - ID [ ID ] [ ( ID ) ] ) ) ] int { }",
  "func ID ( ID : int , ID : bool ) { var ID : bool var ID : bool return }",
  "func ID ( ID : bool , ID : int ) : [ ] bool { while - ( 123 * ( - - ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool ) { var ID : bool { ID [ - 123 ] = ID if true { } } call ID ( ) }",
  "func ID ( ID : [ ] int , ID : [ ] int ) { var ID : bool var ID : [ ] bool return - ID }",
  "func ID ( ) { var ID : int var ID : bool if 123 + true / ( ID ) { } print ( - - false ) }",
  "func ID ( ) : bool { var ID : bool if false / 123 + ( - ID ) + ID { } call ID ( ) }",
  "func ID ( ) { var ID : bool var ID : bool call ID ( ) print ID ( 123 / ( ID ) ) }",
  "func ID ( ID : int , ID : [ ] bool , ID : bool ) { var ID : int var ID : [ ] [ ] bool while - ID { } ID = - 123 } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) / true > ID ( ( - ( ID ) ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] [ ] int { var ID : [ ] int var ID : bool }",
  "func ID ( ) : [ ID * 123 * ( ID ( ) [ ( ( ( ( ID ) ) ) ) ] ) ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] int ) { var ID : bool { var ID : int var ID : [ ] [ ] [ ] bool } } func ID ( ) { }",
  "func ID ( ) : [ ( - false >= false - ( - ID ) + true ) ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] bool { var ID : int var ID : bool } return true }",
  "func ID ( ) { print ID ( ) [ ID [ false <= - ( - - ID ) ] [ - ( true ) ] ] print - false } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : [ ] [ ] int var ID : bool return } func ID ( ) { var ID : bool var ID : bool }",
  "func ID ( ) : int { var ID : [ ( ( - ID * ( ( false ) ) / true ) ) ] [ ] [ ] bool }",
  "func ID ( ) { var ID : int ID ( ID ( - false * ( - ( ( ID ) ) ) ) ) = ( - true ) while ( ID ) { } }",
  "func ID ( ) : [ false - 123 / ID ( ) [ ( false ) ] - - - - ( ( ( false ) ) ) ] [ ] bool { }",
  "func ID ( ID : bool , ID : [ ] bool ) { { var ID : bool var ID : [ ( ID ) ] int } if - ID { } }",
  "func ID ( ID : int ) { if - ID ( ) or ( ID ) or ID { } ID = - - false }",
  "func ID ( ID : int , ID : int ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ] int ) { var ID : bool ID ( ( false ) ) = - ( 123 ) while - ID { } } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : bool var ID : bool { ID [ - 123 ] = - - true ID = ( 123 ) } call ID ( ) }",
  "func ID ( ID : int , ID : [ ( true * ID ( ID ) ) ] int ) { }",
  "func ID ( ) : int { var ID : int var ID : bool } func ID ( ID : bool ) : [ 123 / ID ] bool { }",
  "func ID ( ID : bool ) { var ID : [ ] [ false * ( - ID ( ) ) * ( ( - - - - ID ) ) ] [ ] bool var ID : bool }",
  "func ID ( ) { var ID : [ ] [ ] int var ID : [ ( 123 * ( - true ) * 123 ) ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ( ( ( ( ID ) ) ) ) ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] int var ID : [ ] [ ] bool return }",
  "func ID ( ) : int { var ID : [ ] [ ] bool var ID : [ ID [ ( ID ) ] ] [ ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ID ( ( - ( ( ID ) ) ) ) ] int var ID : bool } func ID ( ) { }",
  "func ID ( ID : [ - ID ( ) [ ID ( ( false ) ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool call ID ( - - ( ( ( ( - 123 ) ) ) ) ) }",
  "func ID ( ) : bool { var ID : [ ] [ 123 / ( ( - - 123 ) ) / false ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) { } func ID ( ID : [ - ID ( ID ( ) [ 123 ] ) ] [ ] int ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : int { { var ID : int } while ID { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int ID [ ( - 123 / ID ( ) ) ] = 123 print ( - ( - ( false ) ) ) }",
  "func ID ( ) { var ID : [ ( ID [ true * false - - true + ( false ) ] ) ] [ ] bool }",
  "func ID ( ) { while 123 * ( - ID ( ID ( ) ) ) * ( ( ID ) ) { } ID = ( - false ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool print ( ID ( ( 123 ) ) ) }",
  "func ID ( ID : [ ( - ( - ( ID ( ID ) ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ( - 123 / ( false - ID - - ( ( false ) ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int return } func ID ( ) { var ID : [ - ID ] int var ID : int }",
  "func ID ( ) { var ID : [ ( - - ( - true / - true ) ) ] [ ] [ ] int }",
  "func ID ( ) : int { } func ID ( ID : int , ID : bool , ID : int ) : bool { var ID : [ - - - ( - false ) ] [ ] bool var ID : bool }",
  "func ID ( ID : [ ] [ ( ( true / - false * ( ( false ) ) ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ false + 123 / ID ( ) / ( ( ID ) ) - true ] int } func ID ( ) { }",
  "func ID ( ) { var ID : bool { var ID : int var ID : bool } call ID ( ID [ false ] ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( false - true + ID [ - - ID ] [ 123 ] ) ] [ ] bool var ID : [ ] [ ] [ ] int }",
  "func ID ( ) { var ID : int var ID : int while ( false + ID ( ) - ( 123 ) ) { } print - ID } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] int var ID : bool { var ID : int ID [ ( - false ) ] [ - ID ] = - ID } } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : [ ] int { var ID : bool return true - ID } } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ID ( ) [ ID ( ) [ - ( - ( false ) ) ] ] [ - true ] ] int , ID : int ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : int { var ID : bool call ID ( ) }",
  "func ID ( ID : int , ID : bool ) { if - false * ID ( ) [ - ID ] [ 123 ] / ( - - ( ( - - false ) ) ) { } } func ID ( ) { }",
  "func ID ( ) : int { call ID ( ) while - false - ( false * true ) { } }",
  "func ID ( ) { var ID : int { var ID : bool var ID : int return } ID ( ) = ID } func ID ( ) { }",
  "func ID ( ) : bool { call ID ( ) print 123 / - ( ( - ID ) ) / ( true ) }",
  "func ID ( ) { var ID : int ID = 123 - ID ( ) / false * - ID - 123 call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { } func ID ( ID : bool , ID : bool , ID : [ ] bool ) { call ID ( ) { } }",
  "func ID ( ID : [ ] bool ) { var ID : int return ( - ( - - ID ) ) }",
  "func ID ( ID : [ true + ( true * ( ( 123 ) ) ) ] bool ) { }",
  "func ID ( ) { var ID : int return } func ID ( ID : bool , ID : bool , ID : int ) : bool { var ID : [ ] [ ] int }",
  "func ID ( ) : [ ] int { var ID : int var ID : [ ] int return ID [ - ( true ) ] }",
  "func ID ( ID : [ 123 <= 123 - ID ( false * ID ) ] bool ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : int ID ( ) [ - ( - ( - ID ) ) ] [ false ] = true call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int var ID : bool print ID ( ) / ( ID ) / ID while ( - ID ) { } }",
  "func ID ( ID : int , ID : [ ] bool , ID : [ false / ( ID [ ID ] [ ( false ) ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] [ 123 * ( ( true ) ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : [ ] [ ] int }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var ID : int print - ( - - - - - ID ) if true { } }",
  "func ID ( ) : bool { var ID : int var ID : [ ] int return } func ID ( ID : bool , ID : int , ID : [ ] [ ] [ ] [ ] int ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ] [ ID ( ) + - - 123 - ID ] [ ] [ ] int ) { }",
  "func ID ( ID : [ ] [ ] int , ID : int ) : [ ( ( ID ) ) ] int { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : int { { return ( false ) } } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : int call ID ( ) call ID ( - ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int if false / ( false - ( - ID ) ) * - - ( ID ) { } }",
  "func ID ( ID : [ - - ( ID ( ) [ - ( ID ) ] ) ] int ) { }",
  "func ID ( ID : int , ID : [ true / - - ( 123 * ( - ID ) ) * ( ID ) ] bool ) { }",
  "func ID ( ID : int ) : int { var ID : [ ] [ 123 / ID ( ( 123 ) ) * - - - - - false ] [ ] bool var ID : [ ] int }",
  "func ID ( ID : bool , ID : [ ID * ( true > - ID ) ] [ ] [ ] [ ] int , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int ID ( - ID [ true / false ] [ false ] ) = false ID = - ( ID ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ 123 * - ID [ - - ( false ) ] [ false ] ] [ ] bool , ID : bool ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : int var ID : [ ( - - 123 ) ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : int { var ID : bool var ID : bool ID ( ) = ( ( ( ( ( false ) ) ) ) ) }",
  "func ID ( ) { var ID : bool call ID ( ( ID ( ID ) ) ) }",
  "func ID ( ID : [ ( ( ( ID ( ) - false + false ) ) ) ] int ) { }",
  "func ID ( ) : int { while ID [ true - ID ( - - ID ) + ( ( - 123 ) ) ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool ID [ - ( ID [ ( ( ID ) ) ] [ - ID ] ) ] [ ID ] = ID if false { } }",
  "func ID ( ID : bool ) : int { call ID ( ) }",
  "func ID ( ID : bool , ID : int ) { if ( ( false / ( ID ) ) ) { } }",
  "func ID ( ) { var ID : bool var ID : [ ] int return ID ( ) + - - - false }",
  "func ID ( ID : int ) : [ ] bool { return }",
  "func ID ( ) : int { var ID : bool var ID : bool print true / true - false != false } func ID ( ) { }",
  "func ID ( ID : [ false / true - false / ( true / ( ID ) / - 123 ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int , ID : bool ) : [ ID ( ) [ true ] ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] int ) { ID ( ) = - - true * ( ( - true ) ) } func ID ( ) { }",
  "func ID ( ) : [ - false + ( ID ( false , ( 123 ) ) ) + - ID ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ID [ - - ID ( ) [ ID ] [ - ( - ID ) ] ] ] int var ID : [ ] int }",
  "func ID ( ) : [ ID ( ) [ ID / true * 123 + ID + - ID ] [ ID ] ] int { }",
  "func ID ( ID : bool , ID : [ 123 < - ID ( ( ( ID ) ) ) ] int , ID : bool ) { }",
  "func ID ( ID : bool ) { return } func ID ( ID : bool ) : int { var ID : bool return }",
  "func ID ( ) : [ - - ( ( - ID [ 123 ] ) ) ] int { } func ID ( ) { }",
  "func ID ( ) { { var ID : [ 123 / ID [ ( true ) ] ] int } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ] int var ID : int return ID ( ( false ) ) }",
  "func ID ( ID : [ ] int , ID : bool , ID : [ ] [ ] [ false / ( false ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) { ID ( ) [ - - - ID ( ) ] = ID while ID { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : [ - ( ID / ID / - ( ( ID ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( ID ( ) [ false * - ID ] [ ( ID ) ] ) ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool return ID [ ( - ( ID ) ) ] [ ID ] } func ID ( ) { }",
  "func ID ( ) { var ID : [ - - ID ( - - ( 123 ) ) ] bool var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ - - ID ( ) [ - ID ] ] [ ] bool }",
  "func ID ( ) : bool { ID = 123 / 123 and ( ( - - ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : int call ID ( - - - ID [ true ] ) { } } func ID ( ) { }",
  "func ID ( ) : int { call ID ( ( ( ( ( true ) ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool , ID : int ) { var ID : int call ID ( - ID ) call ID ( ) }",
  "func ID ( ID : [ ID [ - true * false + ( ID ) - ( 123 ) ] [ - false ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int , ID : bool ) { print ID ( ) [ ( - ( ID ) ) ] }",
  "func ID ( ) { var ID : [ ID [ false < - 123 / - ID ] ] [ ] bool var ID : bool }",
  "func ID ( ID : [ true * ( - ID ( ) [ ( - ( - ID ) ) ] ) ] bool ) { }",
  "func ID ( ) { var ID : bool var ID : int print true / ( - - false / false ) / ( ID ) print - ( - ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool ID [ - - - true == ( ( - 123 ) ) ] = ID print ID }",
  "func ID ( ID : [ 123 * ID ( ) - 123 * true + ID ( ) ] bool ) { }",
  "func ID ( ) { print - false * ( - ( - ID * - ( ( - true ) ) / ( true ) ) ) / - 123 }",
  "func ID ( ) : int { var ID : [ false >= true - - false / - ID * false - - ( false ) ] int var ID : bool }",
  "func ID ( ) : int { ID ( true / ( true + ID [ - ( - 123 ) ] [ - ID ] ) ) = - true }",
  "func ID ( ID : int , ID : bool , ID : int ) : bool { var ID : [ ] int print ( true ) }",
  "func ID ( ID : bool , ID : int ) : [ ID [ ID * true + true - false ] ] [ ] int { }",
  "func ID ( ID : bool , ID : int ) { call ID ( ) call ID ( ) } func ID ( ID : [ - false ] bool ) { }",
  "func ID ( ) { } func ID ( ID : int , ID : [ ID [ false >= 123 ] [ true ] ] [ ] [ ] int , ID : [ ] [ ] bool ) { }",
  "func ID ( ) { if - true - false / ID ( ( ( - ( ID ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ true / - ( ( - true + false ) ) * - - - false ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ - true * - ( - ( ( ( ( ( - - ( ( - false ) ) ) ) ) ) ) ) ] bool }",
  "func ID ( ID : [ - - true * - - ID ( - true * true * ID ) ] [ ] int ) { }",
  "func ID ( ) : int { var ID : [ ID [ ID [ ID ] ] [ ( ID ) ] ] [ ] int } func ID ( ) { }",
  "func ID ( ) : [ ] [ false / ( ( ID [ ID ] [ false ] ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ( - false * true - true / ( ID ) + - - ( ID ) ) ] int ) { }",
  "func ID ( ID : [ ] int , ID : [ - ID [ ( - ( ID ) ) ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : int if ( ID [ - ( - - 123 ) ] [ 123 ] ) { } }",
  "func ID ( ID : bool , ID : bool ) : [ ] int { var ID : [ ] bool return }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : [ ] int var ID : [ 123 - - - ( - - ID ) ] bool }",
  "func ID ( ID : [ ] bool ) { while false >= ID / - ( - ID ) * ID { } if - ID { } } func ID ( ) { }",
  "func ID ( ID : [ false + ( - - ID [ - ID ] ) + false ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ID ( - - - - ID ) ] int ) { }",
  "func ID ( ) { var ID : bool return ID ( ) [ ( ( ( ID ) ) ) ] } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ - ( true + ID [ - ID ] [ true ] + 123 ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool ID ( false / true * ID [ false ] ) = ( - 123 ) }",
  "func ID ( ) : bool { var ID : int while ( false - - - true ) { } while - - ( ( ( ID ) ) ) { } }",
  "func ID ( ) : [ - ( ( ( ( 123 ) ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] bool return } func ID ( ) { var ID : bool var ID : bool if ID { } }",
  "func ID ( ID : bool , ID : int , ID : [ ] int ) { if - ( - ( ( ID ) ) ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ 123 / ID [ ID [ - true ] ] [ - - ID ] * ID ] int var ID : bool }",
  "func ID ( ) { var ID : bool print ID + true >= - - ID [ ID ] [ - - 123 ] ID = false }",
  "func ID ( ID : [ - ( ( - 123 * - ID ( ( ID ) ) * ID ) ) ] bool ) { }",
  "func ID ( ) : [ ( ID ( ID [ ( ( ID ) ) ] ) ) ] int { }",
  "func ID ( ID : [ - true / - ID ( ) [ ( ID ) ] [ ID ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) : int { var ID : bool if ( - 123 ) { } print ( 123 ) }",
  "func ID ( ID : [ ( true * true * - ID ( ( - ID ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool ) { ID ( ) = false / 123 / - 123 }",
  "func ID ( ID : int , ID : [ ] bool , ID : int ) { call ID ( ) ID ( ) [ ID ] [ true ] = ID } func ID ( ) { }",
  "func ID ( ) { var ID : bool while ( 123 - true - - true ) { } while ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { var ID : [ ID ( ) [ ( ID ) ] [ ID ] ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) { call ID ( ( ( ID * ( 123 ) ) ) ) }",
  "func ID ( ) { var ID : int return } func ID ( ) : bool { var ID : int var ID : bool return }",
  "func ID ( ) : bool { var ID : [ ( false ) * ( ( - false ) ) / - ID ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : bool call ID ( ) return - false * ID - ID ( ) - false } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ( false / true * true - - ( ( ( - ( 123 ) ) ) ) ) ] [ ] [ ] bool }",
  "func ID ( ) { var ID : [ ] [ ] int var ID : bool if ( - ( ( ( 123 ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool ID ( ID ( ( ( ID ) ) ) ) = ( - true ) }",
  "func ID ( ID : bool ) : int { while ID ( - - - 123 / - ( ( ( ( ID ) ) ) ) / ( 123 ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : [ ] int { var ID : bool } func ID ( ) { var ID : bool var ID : bool }",
  "func ID ( ) : bool { var ID : bool while - - ID [ ( false ) ] [ ID ] { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool while 123 * ( false + false / ID * - - ID + ( - ID ) ) { } { } }",
  "func ID ( ) : bool { var ID : int ID [ true / - - - ( ID ) ] [ ( ( 123 ) ) ] = ID { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] int if - ( ( 123 ) ) { } ID = ID }",
  "func ID ( ID : int ) { var ID : [ ] int var ID : [ ] int while false * ( ( 123 ) ) * true { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : int } func ID ( ) { print true / ( - ( ( ID ) ) ) }",
  "func ID ( ID : [ false - - ID * - ( false / ID / ( - 123 ) ) * ID ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] int , ID : bool ) { { var ID : bool return } }",
  "func ID ( ) : [ - - ( ( ( true * - true ) ) ) ] bool { }",
  "func ID ( ) : int { var ID : bool { var ID : int var ID : int if ( - ID ) { } } } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : bool var ID : [ ] [ - - ( ID ) ] int }",
  "func ID ( ID : [ - false / ( true * - - - ( ID ) * ID ) ] [ ] bool ) { }",
  "func ID ( ) : [ ] [ ] [ ( true * ( ( - - ( - - ID ) ) ) / true ) ] [ ] [ ] bool { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : [ ] bool { var ID : [ ( ( ID ) ) ] int var ID : [ ] [ ] int }",
  "func ID ( ) { while ID [ ID [ ID ( ) * - 123 ] [ ( ( 123 ) ) ] ] { } if ID { } }",
  "func ID ( ) { if ID ( - 123 / ID ( ) [ ( ID ) ] ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool ) : [ 123 and ID [ ID [ - 123 ] ] ] bool { }",
  "func ID ( ID : int , ID : bool ) : int { return - ( ID [ ( ID ) ] ) }",
  "func ID ( ID : int , ID : [ 123 * ID < ( false and - ID ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] int } func ID ( ) : [ ID [ ( ( ( ( 123 ) ) ) ) ] [ ( - ( true ) ) ] ] bool { }",
  "func ID ( ) : [ - ID [ ID [ false < - ( ID ) ] ] [ ( ( 123 ) ) ] ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID / ID ( ID ( false ) ) ] bool ) { }",
  "func ID ( ID : int , ID : int ) : int { var ID : bool var ID : bool { var ID : [ ] [ ID ] bool } }",
  "func ID ( ) : int { var ID : [ ID ( ( ( false ) ) ) ] int }",
  "func ID ( ) : [ ID ( ID [ ( 123 * 123 ) ] ) ] int { }",
  "func ID ( ) { var ID : int call ID ( - - ID ( ) [ - ( ID ) ] ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : [ ] [ ] bool { var ID : int var ID : [ ] int return - ( ( - false ) ) }",
  "func ID ( ID : bool , ID : bool , ID : int ) { if - ID ( ) * - ( 123 ) * false { } while ( - ID ) { } } func ID ( ) { }",
  "func ID ( ) { } func ID ( ) { call ID ( ) print ( ( 123 ) ) }",
  "func ID ( ) : [ - ID / - - ID ( ID / true * ID ) / ID ] int { } func ID ( ) { }",
  "func ID ( ID : [ ( - - ( 123 * true / ( ( - - ( - ID ) ) ) ) ) ] [ ] [ ] int ) { }",
  "func ID ( ID : [ ] [ ] [ ] [ false + true / 123 ] int , ID : bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) : [ - ID [ - ID / ID / ID ] [ ( ID ) ] ] [ ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : bool { ID ( ) [ ID [ ID * ID ] ] [ ( true ) ] = - false if ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ - ID ( ( ( ID [ ( - ID ) ] [ ID ] ) ) ) ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { call ID ( ) if true - false * ID ( ID ) * ( - - true ) - ID { } }",
  "func ID ( ID : [ ] int ) { return }",
  "func ID ( ) : bool { var ID : bool return - ( 123 * - ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ( - false / ID [ 123 ] [ 123 ] ) ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { { var ID : bool var ID : [ ] bool { var ID : int } } }",
  "func ID ( ID : int , ID : [ ( ID * ID [ ID ] [ - - 123 ] ) ] bool , ID : [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool } func ID ( ID : bool ) : bool { var ID : [ ( - ( ( ID ) ) ) ] [ ] [ ] int var ID : bool }",
  "func ID ( ) : bool { var ID : [ ] int print - false and ( - ID ) and ( ( ( true ) ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ true - ID ( ID ( - ID ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { var ID : int var ID : bool call ID ( - - - - ( ( ( - true ) ) ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] bool ) : bool { var ID : int var ID : bool if 123 { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ] int ) : bool { var ID : int } func ID ( ) { var ID : [ ] int }",
  "func ID ( ID : bool ) { print ( ( - - - ID [ false ] [ - 123 ] ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int , ID : [ true * - - 123 * ( ( ( ID ) ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ - true + ( - - ( ID ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ - 123 ] bool ID [ true / ( false ) * - false ] = true } func ID ( ) { }",
  "func ID ( ) { call ID ( ) return ( ( ( 123 ) ) ) } func ID ( ) { }",
  "func ID ( ID : [ ID [ ( ( ( - ( ID ) ) ) ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) { while false / ( ( ID [ ID ] ) ) { } ID = - ( ( 123 ) ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : bool if false / - ID [ true ] [ ID ] / ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int ) { call ID ( ) while ( ID ( ) ) { } }",
  "func ID ( ) : int { var ID : [ ] bool var ID : [ true / ( ( ( ID ) ) ) / ( ID ) ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ ] bool ) : int { var ID : bool var ID : int return } func ID ( ID : int ) { }",
  "func ID ( ) : [ ( - ( ID ( ID ( ) ) ) ) ] int { }",
  "func ID ( ) { } func ID ( ID : int ) { var ID : [ 123 * ( ( ID ) ) * 123 ] bool }",
  "func ID ( ID : int ) : [ ] bool { var ID : bool { var ID : int var ID : [ 123 ] int } } func ID ( ) { }",
  "func ID ( ID : [ ID / false != - ( ( - ( - ( ( ( false ) ) ) ) ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ - - - - ID [ ( true * ( ( - true ) ) ) ] [ ID ] ] [ ] bool ) { }",
  "func ID ( ) : bool { print ID * - true - ID ( ID ) }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : int var ID : bool }",
  "func ID ( ID : [ ] int ) : bool { var ID : int print - true / ( - ID ) * - - 123 if false { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : [ ] int ID ( ( true ) ) = ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ false / ( ( ( ID ) ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int , ID : bool ) : [ ] [ ID [ ID ] [ false ] ] bool { }",
  "func ID ( ) : [ ( true / - false - ( ID ( ) ) ) ] bool { }",
  "func ID ( ) : int { var ID : int var ID : int return } func ID ( ID : int , ID : int , ID : bool ) : [ ] int { }",
  "func ID ( ) { var ID : [ ( ( ( ( ( false ) ) ) ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ ( - ( - ID ) ) ] [ ] bool }",
  "func ID ( ) { var ID : [ ] int return ID ( ) [ ( ID ) ] } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID ( ) [ true + - ( ( - - ID ) ) ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { if ( ID [ - - ( ( false ) ) ] ) { } if true { } }",
  "func ID ( ID : [ true - - - ID ( ) ] [ ] [ false ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) : [ ] bool { var ID : [ ] int var ID : int { var ID : int var ID : bool } } func ID ( ) { }",
  "func ID ( ) : bool { call ID ( ) return ( ( ID ( ID ) ) ) }",
  "func ID ( ID : int ) : bool { ID [ ID [ ( false ) ] ] = ( - true ) }",
  "func ID ( ID : bool ) { var ID : int if ID ( ( - ID ) ) { } if ( - - true ) { } } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : [ ] bool var ID : bool print ID - ( 123 ) + ID }",
  "func ID ( ) : int { print false / ID ( ) - true * ( - ID ) * ID }",
  "func ID ( ) { var ID : [ ( false / ( true + ID ) * ID ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : [ 123 * ID [ ( ( - false ) ) ] ] int var ID : int }",
  "func ID ( ID : [ ID - ( ( ( ( false ) ) ) ) - ID ] [ ] [ ] bool ) { }",
  "func ID ( ID : int ) { var ID : bool var ID : [ - ( ID ( true ) ) ] int }",
  "func ID ( ) { var ID : [ ] [ ] [ false / - true - - ID [ true ] [ ID ] ] bool } func ID ( ) { }",
  "func ID ( ID : [ - 123 * false > true / ( false and - - true ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { ID [ - - ( - ID ( ) [ - ( ( ID ) ) ] ) ] [ - ID ] = ( ID ) while false { } }",
  "func ID ( ID : [ ] [ ( - ID ( ) [ 123 ] [ ID ] ) ] [ ] int ) { }",
  "func ID ( ) : [ ] int { call ID ( true / true / 123 and ID ) ID = ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : bool { var ID : [ ID ( ) * - - ( true ) * - 123 ] int }",
  "func ID ( ) { var ID : int var ID : [ ID ( ) * ( - ( ID ) ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int , ID : bool , ID : [ - ID ( ) [ - false ] ] [ ] int ) { }",
  "func ID ( ) : int { var ID : int { var ID : [ ( false / - true ) ] int var ID : bool } }",
  "func ID ( ID : bool ) : int { var ID : [ ( ID ( ) [ 123 ] [ 123 ] ) ] [ ] int var ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : bool print ( - - ( - ID [ ID ] [ ( - - ID ) ] ) ) { } }",
  "func ID ( ) : [ ] int { }",
  "func ID ( ) : bool { var ID : bool var ID : [ - ID / true * ID ( 123 ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int print ( ID [ true ] ) ID = ( - 123 ) }",
  "func ID ( ID : bool , ID : [ ( - - - ( 123 * 123 * ID ) ) ] int ) { }",
  "func ID ( ) : [ ] int { var ID : [ - - ID * ID ( ) [ - - ( 123 ) ] [ ID ] / ID ] bool }",
  "func ID ( ) { { var ID : int var ID : int print - true * - true + - ID + ( true ) print - - false } call ID ( ) }",
  "func ID ( ID : bool , ID : [ ] bool ) : int { var ID : bool } func ID ( ID : [ ] int , ID : bool ) { }",
  "func ID ( ID : [ ] int , ID : [ ] bool , ID : [ ] int ) : int { return 123 / ID }",
  "func ID ( ID : [ 123 / ID [ ( ( ID ) ) ] ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : bool ) : bool { var ID : bool var ID : int while - - ( ( - ID ) ) { } }",
  "func ID ( ID : int , ID : int ) { print ID / ID [ true * true ] [ - true ] { } }",
  "func ID ( ID : bool ) : bool { var ID : int { var ID : int call ID ( ) ID [ - 123 ] = 123 } { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ false + - ID [ ( ID ) ] + - false ] bool }",
  "func ID ( ID : [ ( ID ( ) [ - 123 / ( true ) ] ) ] [ ] bool ) { }",
  "func ID ( ) : bool { ID ( ) [ - 123 <= ( - 123 ) ] = ID print - 123 }",
  "func ID ( ID : bool , ID : [ ] [ 123 > ID ( ) [ - ID ] ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ) : [ ID / - - - - 123 * ( ( ID ) ) ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : [ - false / - false / ( false / ID / ID ) ] int var ID : int }",
  "func ID ( ID : bool , ID : [ true / ID - ( ( false ) ) ] [ ] int ) { }",
  "func ID ( ID : [ ( ( true / ( ID ( ) ) * 123 ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ 123 * ID [ ID [ ( ID ) ] ] [ - - true ] * 123 ] [ ] bool }",
  "func ID ( ID : bool ) { { var ID : [ ] int var ID : bool { var ID : bool var ID : [ ] bool } } }",
  "func ID ( ) { var ID : bool var ID : [ ] int return - true and ( - ID ) and ID } func ID ( ) { }",
  "func ID ( ) { call ID ( ) } func ID ( ) { var ID : [ ] int ID ( ) [ ID ] [ - ( ID ) ] = - ( ID ) }",
  "func ID ( ID : [ ] [ true * ID < - ( ( true ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { if ID ( ID / ID ( ID ) ) { } }",
  "func ID ( ) { } func ID ( ID : int , ID : int , ID : int ) { var ID : bool var ID : bool }",
  "func ID ( ID : [ ] [ ( 123 * true and true < ( ID ) ) ] bool ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : bool ) { var ID : int call ID ( ) if - ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { ID [ ID ( ) [ - 123 ] [ ID ] ] = ID } func ID ( ) { }",
  "func ID ( ) : [ - false * ID [ ( - true / - ID * ( - - ( ID ) ) ) ] [ false ] ] int { }",
  "func ID ( ) : bool { var ID : bool return - ( false + 123 / ID * ( 123 ) - ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID / true + - - - ID ( ( ( true ) ) ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool ) { var ID : bool var ID : int { } { var ID : [ ] bool } }",
  "func ID ( ) { var ID : int print - ( - ID ( 123 ) ) call ID ( ) }",
  "func ID ( ID : int , ID : int ) : int { var ID : [ ] int var ID : bool ID = ID } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : bool ) { var ID : [ ID ( ID ) ] [ ] bool var ID : int }",
  "func ID ( ) : bool { var ID : [ ID [ - 123 or - true or - - 123 ] [ ID ] ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ( 123 / - ( ( false ) ) * ID ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ false < - ( - 123 / ( ( ( ( true ) ) ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : [ ID ( ( ( - ( ID ) ) ) ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { { call ID ( false * ID [ ID - true + ( ( ( ID ) ) ) ] [ ID ] ) { } } ID = - ID }",
  "func ID ( ) { var ID : bool var ID : [ ] int call ID ( true / - true / ID ) } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] bool { var ID : int var ID : [ - - ID [ - ID ] ] [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : int if ( - ID [ ( ( - - ID ) ) ] ) { } { } }",
  "func ID ( ID : [ ( ID ( true * ID [ false ] ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) : [ true / - - - true / - - 123 - ID ] bool { }",
  "func ID ( ID : int ) : [ ( - 123 * - - - 123 * ( 123 ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : [ - - false / ID [ 123 * false - ( ( ( 123 ) ) ) + ( - ( ( ( ID ) ) ) ) ] [ ID ] ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) { }",
  "func ID ( ) : bool { var ID : int var ID : bool ID ( 123 / ID - ( ( - false ) ) - - ID ) = ( ( - false ) ) if ( false ) { } } func ID ( ) { }",
  "func ID ( ID : [ true * ( false * - ( - ( ( ID ) ) ) ) / 123 ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ID [ false / false and 123 / ( ID ) / - false and ( ID ) ] ] int ) { }",
  "func ID ( ID : [ ID [ ID * ID ( ID ( ) ) * ID ] [ ID ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ - - - ID ( ) [ ( ( ( ID ) ) ) ] [ ID ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID ( ) [ true / - false / - false ] ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ] [ 123 / ID [ - ( false * - ID * - 123 ) ] [ ( 123 ) ] ] int { }",
  "func ID ( ID : [ ] bool ) : [ ( - ( ( ID ) ) ) ] [ ] int { }",
  "func ID ( ) : bool { print 123 - ID [ true * - 123 / ( false ) ] } func ID ( ) { }",
  "func ID ( ) : bool { if false / - ID [ - 123 * ( - false ) / ID ] [ ID ] { } }",
  "func ID ( ID : bool , ID : [ ] [ ] int , ID : int ) { ID ( ) [ - - false ] = ID } func ID ( ) { }",
  "func ID ( ID : [ ID [ - ( ( 123 * ( - 123 ) ) ) ] ] bool ) { }",
  "func ID ( ID : bool , ID : int ) : bool { print ( ID ( - - ( ( 123 ) ) ) ) print ( ID ) }",
  "func ID ( ) : [ ] bool { var ID : bool ID ( - - ( true ) ) = true ID = ID } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ ] int , ID : int ) { var ID : bool call ID ( - - - ID ) call ID ( ) }",
  "func ID ( ID : [ false / ID [ ID ( ) * ID / ID ] [ - - ( ID ) ] ] int ) { }",
  "func ID ( ) : bool { var ID : int var ID : bool while - ID ( ID ( ) ) { } } func ID ( ) { }",
  "func ID ( ) { if ( ( ( ( - ( ID ) ) ) ) ) { } }",
  "func ID ( ) { var ID : [ ( ID [ - ID + ( ID ) ] [ ID ] ) ] bool var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : int call ID ( ) return } func ID ( ) { var ID : [ ( - true ) ] bool }",
  "func ID ( ) { var ID : [ ] bool var ID : [ - ( ( ID ) ) ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ( - ( - ID ( ) ) ) ] int ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : bool var ID : bool }",
  "func ID ( ID : bool , ID : int ) : int { var ID : [ ] [ ( ID ) ] [ ] [ ] [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool while - - ID / ( false * ( ( false ) ) ) { } }",
  "func ID ( ID : int , ID : int , ID : [ ID / false - 123 / - - ( - ID ) * ID ] [ ] int ) { }",
  "func ID ( ) : [ ] int { var ID : int if true * true * ( ID ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ( ( ( - false ) ) ) ] [ ] int } func ID ( ) { }",
  "func ID ( ) : [ - ID [ ID / ( - ( true ) ) / ID ] [ false ] ] [ ] [ ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] int { { var ID : bool if ID [ - 123 ] { } call ID ( ) } } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ - ID [ true / - true + - ( false ) ] [ ID ] ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool ID ( ( ( ID ) ) ) = 123 }",
  "func ID ( ) { var ID : int print true - - ( ( ID ) ) - - false }",
  "func ID ( ID : [ ] int ) : bool { var ID : int var ID : [ true + - true + ( - - ( false ) ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID ( ( - true >= ID ) ) ] bool var ID : int }",
  "func ID ( ID : [ - ( ID ( ) [ false * true / ( true ) ] ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool print ( false and ID - ( 123 ) and false ) }",
  "func ID ( ) : int { if - false + - ( true * ( ID ) ) + - ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ - false - ( - - ( ( ( ( ID ) ) ) ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : int ) : [ - true * false / - - - ( - - ID ) ] bool { } func ID ( ) { }",
  "func ID ( ) { if ID [ ( ( ( 123 ) ) ) ] { } ID = - - ID }",
  "func ID ( ) { var ID : int var ID : bool ID = - ( false - ID - ( - ID ) ) { } }",
  "func ID ( ) : bool { var ID : int var ID : int print - - false / - ID [ ( ID ) ] }",
  "func ID ( ID : [ ] int ) { } func ID ( ) { var ID : int var ID : bool }",
  "func ID ( ID : bool , ID : int , ID : int ) { ID ( ( false and 123 and false ) ) = false print false } func ID ( ) { }",
  "func ID ( ) { var ID : bool return } func ID ( ) { var ID : bool var ID : int }",
  "func ID ( ) { var ID : bool var ID : bool call ID ( ) call ID ( ID [ ( false ) ] ) }",
  "func ID ( ID : int , ID : int ) : int { var ID : [ ] [ - ( ID ) ] int } func ID ( ) { }",
  "func ID ( ) : [ ] bool { { var ID : [ ID / ID ( ) [ - ( ID ) ] ] int var ID : int } call ID ( ) }",
  "func ID ( ID : int ) { print 123 / ( ( ( - ID ) ) ) / ( - 123 ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { print ( ( - - ( ( ID ) ) ) ) }",
  "func ID ( ) { var ID : int return - - ( ( ( ( true ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : [ false and - - - 123 * ID / false and - ID ] int } func ID ( ) { }",
  "func ID ( ) : [ ] bool { call ID ( ) } func ID ( ID : int , ID : bool , ID : bool ) : [ ] bool { }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] [ ] bool ID ( ) [ 123 ] = ID }",
  "func ID ( ) { print ( ID [ ( ( - false ) ) ] [ ( ( - ID ) ) ] ) print true }",
  "func ID ( ) : [ ] bool { var ID : [ true + ( false / ID * ( - - ( true ) ) ) - ID ] [ ] bool var ID : bool }",
  "func ID ( ID : bool ) { var ID : bool call ID ( ID ( ) [ ID ] [ ( 123 ) ] ) print 123 } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool ) : [ ] int { var ID : [ ( false ) ] bool var ID : [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) : bool { var ID : int print 123 * - ID } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool } func ID ( ) { return }",
  "func ID ( ) { var ID : [ ] int if 123 * ID - true * true / ID + - ( - ID ) { } while - ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool call ID ( - ( ( ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ) : bool { print ID [ 123 / true / - - ( ID ) ] } func ID ( ) { }",
  "func ID ( ID : int ) { call ID ( ) } func ID ( ) : [ ] int { { print true while ID { } } call ID ( ) }",
  "func ID ( ID : [ 123 * ID ( ) [ ( ID > - 123 ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ ] [ ] [ - ( ID ( ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ - - - ( ( ( - 123 ) ) ) ] [ ] int }",
  "func ID ( ID : bool , ID : int ) : [ ] int { return ( - - ID ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : bool print ID [ 123 * - true * false ] [ ID ] }",
  "func ID ( ) : bool { var ID : bool var ID : int return }",
  "func ID ( ID : bool ) : int { var ID : [ ] [ 123 - - ID + ID ] int var ID : [ ] int }",
  "func ID ( ID : int , ID : bool , ID : bool ) { call ID ( ID / true * - ( ( false ) ) ) }",
  "func ID ( ) { var ID : bool var ID : int ID ( - ( ID / ID / ID ) ) = ID { } }",
  "func ID ( ) : int { var ID : bool print ID / true / true - ID ( ) - ID }",
  "func ID ( ID : bool , ID : int ) { while ID ( ( ( ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ false * - ( 123 * ( - ID ) ) / ID ] [ ] [ ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) { call ID ( ) } func ID ( ID : bool ) { var ID : int if - ( ( ( ID ) ) ) { } }",
  "func ID ( ) : int { var ID : [ ( 123 / ( true ) * - 123 ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool print ( ( ID ( ) [ true ] [ ID ] ) ) } func ID ( ) { }",
  "func ID ( ) : [ - 123 or ( ( ( true ) ) ) ] int { }",
  "func ID ( ) { var ID : int var ID : bool call ID ( ( 123 - true / true ) ) print - - - - ( - - - ID ) } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : [ ( ( 123 * ( true ) ) ) ] [ ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] int , ID : bool ) { var ID : [ ] int var ID : int if true { } } func ID ( ) { }",
  "func ID ( ) : int { { while false * - ID ( ( ID ) ) { } } }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : int while ID ( ( ( ( true ) ) ) ) { } if ID { } }",
  "func ID ( ) { var ID : int var ID : bool print false * ID / false + true / false + 123 { } }",
  "func ID ( ID : int , ID : [ ( 123 * ( false ) * true ) ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : [ ( true / ID * - ID ( ID ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : int ) { var ID : [ ] [ ] int { var ID : [ ] bool var ID : int } } func ID ( ) { }",
  "func ID ( ) { var ID : int { { var ID : [ ] [ ] bool var ID : bool while ID { } if false { } } } } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { if ( ( 123 + ID ) ) { } }",
  "func ID ( ) : int { var ID : bool return - ( ID ( - 123 ) ) } func ID ( ) { }",
  "func ID ( ) : [ ID ( ( - false / ID [ ( ( ( - ID ) ) ) ] ) ) ] [ ] [ ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int while 123 and - ID [ ( - - 123 ) ] { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - true * - true - ID [ - ID ] - true ] bool , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID [ - - ID [ - - ( - ID ) ] ] ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ID / ( ID or ( - - ID ) ) ] bool }",
  "func ID ( ) : [ ] int { } func ID ( ) : bool { var ID : int return - ID ( ) }",
  "func ID ( ) : [ ( false - ( false * ID * 123 ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ID ( ) / ( true > ID ) / ID ] [ ] bool ) { }",
  "func ID ( ID : int , ID : int , ID : [ ID ( ) [ 123 - - - 123 ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ( ID [ ID ( ) ] [ ID ] ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { print ( - false * ID ( ) * ( - ID ) ) { } }",
  "func ID ( ID : int , ID : bool , ID : int ) : bool { ID [ ID [ ( ID ) ] [ - ID ] ] [ ( true ) ] = ID } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ( ID ( - ( ( ( - ( ID ) ) ) ) ) ) ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) { return - - ( 123 > - ID [ - ( ID ) ] ) }",
  "func ID ( ID : bool , ID : int , ID : int ) { return 123 * - ( false * ( - - true ) ) * ID } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int call ID ( ) { var ID : bool { var ID : int } ID = ID } }",
  "func ID ( ID : bool , ID : [ ( ( - ( true / true ) ) ) ] [ ] bool , ID : bool ) { }",
  "func ID ( ID : [ ] int ) : [ ( ( - false - 123 + 123 ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ( true - ID [ - ( ID ) ] [ ( - ( - ( - ( - 123 ) ) ) ) ] + ( - ID ) ) ] int ) { }",
  "func ID ( ) { var ID : bool var ID : [ false * false + true * ID ( ) * ID ] bool }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : int var ID : bool return ID ( true ) }",
  "func ID ( ID : [ ] [ ( - - false + ( true ) ) ] bool ) { }",
  "func ID ( ) { { } return } func ID ( ) { var ID : [ ID ( ) [ false ] [ true ] ] bool var ID : bool }",
  "func ID ( ) { var ID : bool var ID : [ ( - ( ID ( ) ) ) ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] int { var ID : int while ID ( - false ) { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : int { if ID ( - ( - 123 ) ) { } } while 123 { } }",
  "func ID ( ID : [ ID ( ID ( false * 123 + false ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { call ID ( ) return ID ( ) [ 123 + ( ( ( - ( true ) ) ) ) + ( 123 ) ] [ 123 ] }",
  "func ID ( ID : int , ID : int ) { var ID : int var ID : [ ID [ ( 123 ) ] [ ( - - 123 ) ] ] bool }",
  "func ID ( ID : bool ) { var ID : [ ] [ ( - ( - ID ) ) ] [ ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool ID [ ID [ ( ID ) ] [ ( false ) ] ] = - - ( - - ( ( ID ) ) ) if - - ( true ) { } }",
  "func ID ( ) : [ - 123 + - ( ( ( true ) ) ) ] [ ] [ ] int { }",
  "func ID ( ID : int , ID : bool ) { } func ID ( ) { var ID : [ ] [ ] [ ( ( ( - ID ) ) ) ] bool }",
  "func ID ( ID : bool , ID : int , ID : [ false * ( ID ( ) [ - ( false ) ] ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ] int , ID : bool ) : int { var ID : int call ID ( ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int call ID ( ( - ID [ false ] [ ID ] ) ) while ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] [ ] int , ID : bool ) : [ ( - ( ( ( ID ) ) ) ) ] [ ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : bool while ID [ - - - - ID ] [ ( ID ) ] { } { } } func ID ( ) { }",
  "func ID ( ID : [ - - ( ID ( ( false ) ) ) ] int ) { }",
  "func ID ( ID : bool , ID : [ ] int ) { ID ( ) [ true <= - ID ] = ID { } } func ID ( ) { }",
  "func ID ( ID : [ - true < ( - ( false + - true ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool print ID ( ) [ true / - ( ID ) ] [ ID ] print ( ID ) }",
  "func ID ( ID : int , ID : [ ( ID ( ) [ true * - - 123 * - true ] ) ] int ) { }",
  "func ID ( ) : [ ID * ( ( - ( - - false ) ) ) / 123 ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID - - true == ( false ) ] [ ] [ ] int , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) : bool { call ID ( ( 123 + ID - 123 ) ) call ID ( ) }",
  "func ID ( ) : [ ID ( ) [ - - - - ID [ false ] [ ID ] ] [ - - ID ] ] [ ] [ ] bool { }",
  "func ID ( ) : bool { var ID : [ ] [ ID ( - true * ( ID ) / ( - ( - ID ) ) ) ] int }",
  "func ID ( ) { while false / ( ID ( ID * ( ( ( ( 123 ) ) ) ) / 123 ) ) * - 123 { } } func ID ( ) { }",
  "func ID ( ) : [ 123 + ( ID [ - - true * - ( - ID ) * ID ] [ ID ] ) ] [ ] bool { }",
  "func ID ( ID : bool , ID : [ ID ( ) [ - - ( true ) ] [ ( ( - ( ID ) ) ) ] ] int ) { }",
  "func ID ( ID : bool , ID : int , ID : [ 123 / - 123 and 123 * ( ID ) ] int ) { }",
  "func ID ( ) : bool { var ID : [ - ID [ - false * false / ( - ( ID ) ) ] [ - ( 123 ) ] ] [ ] int }",
  "func ID ( ) { ID [ ( true + ID [ - 123 ] [ 123 ] ) ] = ( - ID ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : bool { var ID : [ ] int var ID : int while ID * ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : [ - true / ( ID / - false ) * true ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int return false and - - ( true * true * true ) }",
  "func ID ( ID : int , ID : int ) : [ - ID [ - ( 123 ) ] ] bool { }",
  "func ID ( ID : int , ID : [ ID [ ( - ( ( false ) ) ) ] [ ( true ) ] ] [ ] bool , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) : [ ID ( - - ID [ ( ( ( ID ) ) ) ] [ 123 ] ) ] [ ] bool { }",
  "func ID ( ID : [ ( true * ( 123 * - - ( ( ( ID ) ) ) ) ) ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ) : int { var ID : bool var ID : int while ID * ID [ false ] / ID { } while ID { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : bool var ID : int { var ID : int var ID : bool while ( ( 123 ) ) { } ID = false } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : int ID [ - - 123 - true * ID / ( ( false ) ) ] [ - ( - - ( ID ) ) ] = - - 123 }",
  "func ID ( ID : int , ID : [ ] [ ID ( - ( - ( ID ) ) ) ] [ ] bool , ID : [ ] bool ) { }",
  "func ID ( ) { var ID : [ ( ( - ID ( false ) ) ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ( ID [ false * - ID / - ( ID ) ] ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ - ID ( ID [ ID ( ) ] [ - ID ] ) ] int ) { }",
  "func ID ( ID : int , ID : [ ] bool , ID : bool ) { var ID : int }",
  "func ID ( ) { var ID : int var ID : int while ID [ - false * ID / - ID ] { } if ID { } } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ] int var ID : bool call ID ( ) ID ( - ID ) = - - 123 } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : [ - ID ( ( ID ) ) ] [ ] [ ] int var ID : [ ] [ ] [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ 123 / ID [ - ID ( true ) ] [ ( ( true ) ) ] / 123 ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : bool if ( 123 / - ID ) { } ID = - ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ID : [ - false + ID [ ID ] [ ( - - ID ) ] + 123 ] bool ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool print ID [ false * - 123 * ID ] ID = - 123 }",
  "func ID ( ) : bool { var ID : [ ] [ ] bool { var ID : bool if 123 * true { } } print ( ID ) }",
  "func ID ( ID : int , ID : [ 123 <= ID [ true * ( ( - ID ) ) ] ] bool ) { }",
  "func ID ( ) { var ID : bool var ID : int while ID [ 123 / ( ID ) / ID ] { } }",
  "func ID ( ID : int ) : bool { while ID [ - ( ID ) ] [ ( - ( - - ID ) ) ] { } while 123 { } }",
  "func ID ( ID : int , ID : [ ] int ) : int { { var ID : int var ID : [ ( false ) ] int } } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : [ ] bool print ID [ false * ID ] }",
  "func ID ( ) : bool { { var ID : [ ] bool var ID : [ 123 + 123 * - - ID / ID - false ] int } ID = ID }",
  "func ID ( ) : int { var ID : int var ID : [ ( false / ID ( ) [ false ] [ 123 ] ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : bool { ID ( ) [ ID - ( false <= true ) ] = ( - true ) call ID ( ) }",
  "func ID ( ) { return - ID ( - ID ( true * 123 ) ) }",
  "func ID ( ID : bool , ID : [ ] bool , ID : [ ] bool ) : int { var ID : [ ] int var ID : [ ] int }",
  "func ID ( ) : int { var ID : [ ] bool var ID : [ ] int call ID ( ) ID ( false ) = ( - ( ID ) ) }",
  "func ID ( ID : bool ) : bool { var ID : [ ( false * ( - - ( 123 ) ) ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool print true / 123 - 123 * ( ID ) * 123 - - ( ID ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool , ID : [ ] bool ) { { var ID : int return 123 } { } }",
  "func ID ( ) : bool { ID [ 123 + 123 * ( 123 / ( ID ) ) - ( 123 ) ] [ - ( true ) ] = ID if ID { } }",
  "func ID ( ) { { var ID : [ ( ID [ ID ] ) ] int } ID = false } func ID ( ) { }",
  "func ID ( ) { var ID : [ - false / ( ID [ ( ID ) ] ) ] [ ] int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int return ID [ ( ID ( ) ) ] [ - ( ( ( ( ID ) ) ) ) ] } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : [ ] [ ID [ ( ID ) ] [ - ( false ) ] ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ) : int { while ID / ( - ( ID ( ) ) ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool return ID ( - 123 * - - 123 * ID ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { return }",
  "func ID ( ) { var ID : int var ID : int call ID ( ) return ( ( ID ) ) }",
  "func ID ( ) : [ ] bool { return false / - false + true / - - ID - ( - true ) }",
  "func ID ( ID : [ - - ( ID ( - ( ID ) ) ) ] int ) { }",
  "func ID ( ID : int , ID : int ) : int { while ID ( ) [ ID ( ) ] [ ID ] { } if ( ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] bool { var ID : [ ( ( ID ) ) ] int }",
  "func ID ( ID : int ) : [ ] int { var ID : [ ( ID [ true ] [ - ( - true ) ] ) ] int var ID : bool }",
  "func ID ( ) { var ID : int var ID : [ ] bool } func ID ( ID : bool , ID : bool , ID : [ ] [ ] bool ) { }",
  "func ID ( ID : bool ) : bool { while ID [ ID [ - - true ] ] [ ( - - true ) ] { } while 123 { } }",
  "func ID ( ) : [ ID [ ID ( ) [ false * 123 * true ] ] [ - - - - - ID ] ] bool { }",
  "func ID ( ID : [ 123 / ( ( - ID ( ) / ( ( false ) ) / - 123 ) ) * ID ] int ) { }",
  "func ID ( ID : int , ID : [ ] bool , ID : int ) : int { var ID : int var ID : [ ID ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : bool ID [ ( ID ( ) ) ] = ID }",
  "func ID ( ID : [ - - ID [ - false * true * ID ( ) ] [ false ] ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] int print - ( true / - - ( ( ( false ) ) ) ) }",
  "func ID ( ) : [ ( true - ( false - true * ID ) + 123 ) ] bool { }",
  "func ID ( ID : [ 123 * ID [ ( - ( ( - ( false ) ) ) ) ] ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) : int { { var ID : bool } } func ID ( ID : bool ) { }",
  "func ID ( ) { var ID : int while ID ( ) / - ( ID ( ) ) { } print true } func ID ( ) { }",
  "func ID ( ) : int { call ID ( ) }",
  "func ID ( ) { var ID : bool var ID : [ ] [ ] int print ID ( ) [ true ] }",
  "func ID ( ) { return - - - - true - - ID ( ) [ ( ( ( ( ID ) ) ) ) ] - - ID } func ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( ) while ID [ ID ( ) [ ( ( 123 ) ) ] ] { } } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int , ID : int ) : [ ] bool { return - ( - ID ) }",
  "func ID ( ) { var ID : [ ] bool ID ( ( - ( ID ) ) ) = ID }",
  "func ID ( ID : bool ) : int { var ID : int var ID : bool { var ID : bool ID [ - - true ] = ID } }",
  "func ID ( ID : bool , ID : bool ) : bool { return ( ID ( ) [ ( - ID ) ] ) } func ID ( ) { }",
  "func ID ( ) : [ ID / - true != - ID ( ) [ - ID ] [ ( ID ) ] ] bool { }",
  "func ID ( ) { var ID : [ ] [ ] bool var ID : bool return } func ID ( ID : bool , ID : int ) { }",
  "func ID ( ) { var ID : int var ID : bool { print ( ID [ ( ( ( ID ) ) ) ] [ - - true ] ) } } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool ) : int { }",
  "func ID ( ID : bool , ID : [ ] int , ID : [ ] [ ] int ) : bool { var ID : bool return - ( ID ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : [ ] [ ] int { var ID : int var ID : bool return ID }",
  "func ID ( ID : [ - 123 / 123 + ( ID [ ( 123 ) ] ) - 123 ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ] [ ] [ ( false * ID / true ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - 123 + ID [ ID [ - ID ] [ ID ] ] [ ( ( ID ) ) ] - ID ] bool ) { }",
  "func ID ( ) { var ID : int var ID : [ - false / - ID ( - ( - - - - ID ) ) * ( - ID ) ] [ ] [ ] int }",
  "func ID ( ) { var ID : int var ID : bool ID [ 123 / ( ( false ) ) * ID ] [ - ( 123 ) ] = ( true ) }",
  "func ID ( ) { var ID : bool var ID : int print ID ( ) [ ID ( ) [ ( ( - ( ( 123 ) ) ) ) ] [ ( 123 ) ] ] call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ true / ID [ false * ID [ - - - - false ] [ ( 123 ) ] ] ] [ ] [ ] int ) { }",
  "func ID ( ) { var ID : [ 123 / ID [ ID * true / ( - ID ) ] [ 123 ] * ( ( ( ( true ) ) ) ) ] [ ] int var ID : [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : int return } func ID ( ID : [ ] [ ] int , ID : bool ) { var ID : int }",
  "func ID ( ID : bool ) : int { var ID : [ ] int while ( 123 / ID ) { } }",
  "func ID ( ID : int , ID : bool , ID : bool ) : bool { var ID : [ ] [ ] int while true { } }",
  "func ID ( ) { var ID : [ ID ( ) [ ID ( - - ( - ( ID ) ) ) ] [ false ] ] bool }",
  "func ID ( ) { return } func ID ( ) { var ID : bool ID ( - false * ( ID ) ) = - ID }",
  "func ID ( ) : int { var ID : int return - 123 / ID ( ) [ ( - ( ID ) ) ] / 123 }",
  "func ID ( ID : bool , ID : bool ) : [ ID ( ID ( ) [ - ID ] [ ID ] ) ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : int var ID : int } func ID ( ID : bool ) { }",
  "func ID ( ) : [ ] int { print false / false != false * ID ( true ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ true * - ID ( ) [ ( ( false ) ) ] ] bool , ID : [ ] int ) { }",
  "func ID ( ID : int ) : bool { var ID : bool print false + - - ( - ( ID ) ) }",
  "func ID ( ID : [ ] int , ID : [ false - ID ( ID ( ) ) + ID ] [ ] [ ] int , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int if false / - false - ID [ ( 123 ) ] - - - ID { } }",
  "func ID ( ) : [ - ID ( ) [ ID [ false - ID ] ] ] [ ] bool { }",
  "func ID ( ) { var ID : bool if ID ( - - true / ( false ) * - - - ( ID ) ) { } }",
  "func ID ( ) : bool { var ID : bool { call ID ( true * ID ( ) / ID ) } }",
  "func ID ( ) : int { while 123 + - ( true * false + ( true ) - - ( - ID ) ) - ( - ( false ) ) { } call ID ( ) }",
  "func ID ( ) : bool { } func ID ( ) { var ID : [ ID * ID [ ( 123 ) ] / 123 ] bool var ID : bool }",
  "func ID ( ID : bool , ID : [ ( 123 * ID ( ) [ true ] [ 123 ] ) ] int ) { }",
  "func ID ( ) { var ID : int print ID [ 123 / ( - true ) ] [ ( - ( - ( ( ( ( - ID ) ) ) ) ) ) ] ID = true }",
  "func ID ( ID : int ) { var ID : [ ID ( true - true * 123 / ( ID ) ) ] [ ] int var ID : bool }",
  "func ID ( ) : [ ] int { var ID : int var ID : [ - - false / ( ID ) ] bool }",
  "func ID ( ) { var ID : int if ID [ false / ( ID ) ] { } }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] bool while - ID ( ) [ ( 123 ) ] { } }",
  "func ID ( ) : int { var ID : bool var ID : int { var ID : bool return true * ( - ( ID ) ) } print false } func ID ( ) { }",
  "func ID ( ) : [ 123 * 123 < - - false * ( 123 / ID ) ] int { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID / - ID [ ID [ ( - ID ) ] ] / 123 ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { ID [ 123 * 123 or - false or 123 ] [ - 123 ] = - ( true ) ID = ( - - ( ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ) : [ ( ( ID [ 123 * ( ( ( false ) ) ) * true ] ) ) ] int { }",
  "func ID ( ) : bool { ID ( ( - ( ( ID ) ) ) ) = - - - - ID }",
  "func ID ( ) : int { var ID : int ID = - ( true * - false * - ID ) } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { var ID : int var ID : [ ] int print true / ( ID ) / ( - ID ) call ID ( ) }",
  "func ID ( ) : [ ] bool { if true * - ( 123 == - ID ) / - ( true ) { } }",
  "func ID ( ) { var ID : int if false - true / ( - ID ( ) ) - ( ( - - ( ID ) ) ) { } print false }",
  "func ID ( ID : int , ID : int ) : [ ] int { var ID : int } func ID ( ID : [ - false ] bool ) { }",
  "func ID ( ID : [ 123 * - - ID [ ID ( ) [ - 123 ] ] [ ID ] * - false ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ID ( - ( ID [ ( ( false ) ) ] ) ) ] [ ] bool { }",
  "func ID ( ID : int , ID : int , ID : bool ) { call ID ( ) }",
  "func ID ( ) { var ID : bool } func ID ( ID : [ ] bool ) : bool { var ID : bool var ID : int { } { } }",
  "func ID ( ID : bool ) : int { { var ID : bool var ID : bool { var ID : int var ID : [ false ] int } } { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : int } func ID ( ) : [ - - ( 123 ) ] bool { }",
  "func ID ( ) : bool { var ID : int var ID : [ ID ( ) [ true * ( ID ) ] [ ID ] ] bool }",
  "func ID ( ID : int , ID : [ ] int ) : bool { while 123 * ( true ) * true { } if 123 { } }",
  "func ID ( ID : int , ID : bool ) { { return ID [ ( ID ) ] } }",
  "func ID ( ID : int , ID : int , ID : [ - ID [ ( false ) ] [ ID ] ] bool ) { }",
  "func ID ( ID : int , ID : int ) : int { var ID : bool return } func ID ( ) : bool { var ID : bool ID = 123 call ID ( ) }",
  "func ID ( ID : [ ] bool ) : bool { return ( - false and true ) }",
  "func ID ( ) { var ID : bool } func ID ( ID : bool , ID : int ) { return }",
  "func ID ( ID : [ 123 * - - ( false / - ( ( - 123 ) ) ) / 123 ] [ ] int ) { }",
  "func ID ( ID : bool , ID : bool ) : int { var ID : bool return }",
  "func ID ( ID : int , ID : int , ID : int ) : [ - ( ( ( - ID ) ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : int { var ID : int var ID : [ ( ID ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { print ( - ( - false - ( - - ID ) ) ) ID = ( 123 ) } func ID ( ) { }",
  "func ID ( ) { print ID ( ID [ - ( ID ) ] ) } func ID ( ) { }",
  "func ID ( ) { call ID ( false / ( ( ( ID ) ) ) / true ) }",
  "func ID ( ) : bool { var ID : [ ] [ ] int } func ID ( ID : [ true / ID ] [ ] bool ) { }",
  "func ID ( ID : int ) : [ ] int { var ID : int var ID : int } func ID ( ID : bool , ID : [ ( ID ) ] int , ID : [ ] bool ) { }",
  "func ID ( ID : bool , ID : [ ] [ ID ( ( - ( - ( ( ID ) ) ) ) ) ] int , ID : [ ] int ) { }",
  "func ID ( ) : bool { var ID : [ ] [ ( ID - false * ID / - - ID + ( 123 ) ) ] int var ID : int }",
  "func ID ( ) : [ ] [ ( true / - ID / ID - - false - ( - - true ) ) ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool ID = ID / false / ( - ( 123 ) ) ID = ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool { var ID : int var ID : bool } print ( false ) }",
  "func ID ( ) { var ID : [ ] int } func ID ( ) { var ID : bool }",
  "func ID ( ID : bool , ID : [ ] [ ID / - - ID [ ID ] * 123 ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) { call ID ( false * false / - ID ) { } } func ID ( ) { }",
  "func ID ( ) { ID [ - 123 and ( ( - - true ) ) ] [ ID ] = true { } }",
  "func ID ( ID : [ true + ID [ ID [ ID ( ) ] ] [ ID ] ] bool ) { }",
  "func ID ( ID : int ) : [ true * true / ( true * ID [ ID ] [ ID ] / - ( ID ) ) ] [ ] [ ] bool { }",
  "func ID ( ID : bool , ID : [ ID * ID - - 123 + 123 and - false and ( ID ) ] int ) { }",
  "func ID ( ID : [ - - - ID [ ( ( ID ) ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : int ) : [ ( false < ID ) ] [ ] bool { }",
  "func ID ( ) { var ID : [ ] [ ID [ ID ( ) [ 123 ] ] [ ID ] ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { while ID [ false / - 123 + 123 - true ] [ ID ] { } { } }",
  "func ID ( ) : [ 123 and ID [ true / - ID ( - ( - - ( false ) ) ) ] and true ] [ ] bool { }",
  "func ID ( ) { var ID : [ - ( ID [ - 123 * ( - ( - - ( ID ) ) ) * ID ] ) ] int } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID : [ - - - ID [ ID ] [ ( ( 123 ) ) ] ] [ ] bool }",
  "func ID ( ID : bool ) { { var ID : bool ID ( ) [ ( ( 123 ) ) ] [ false ] = ID ID = - ( ID ) } ID = 123 } func ID ( ) { }",
  "func ID ( ) { return } func ID ( ID : bool , ID : [ ] [ ] int , ID : int ) { var ID : [ ] int var ID : bool }",
  "func ID ( ID : [ ] int ) : int { while ID ( 123 / ID ) { } while - - ID { } }",
  "func ID ( ) : int { print - 123 * ID ( ) [ ( ID ) ] / 123 } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] [ - - false / ( ID [ 123 ] ) / ID ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool call ID ( ) return }",
  "func ID ( ) { var ID : [ ID ( ID ( false / - false ) ) ] bool }",
  "func ID ( ID : bool , ID : int ) { var ID : [ ( ( false ) ) ] int var ID : bool } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ - ID [ true - ( ID ) ] ] [ ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : [ ID [ ID ( ID ) ] [ ( ( ID ) ) ] ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int ID ( ( false * ( 123 ) / - ( - ( ( ID ) ) ) ) ) = ID call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int , ID : int ) { var ID : [ ] [ - - ID ] [ ] [ ] int var ID : int } func ID ( ) { }",
  "func ID ( ) : [ ] int { } func ID ( ID : bool ) { ID ( ( - true ) ) = ( - 123 ) ID = false }",
  "func ID ( ID : [ ] bool ) : [ false * - ID [ ID ( - ( ID ) ) ] / - ( true ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : bool } func ID ( ) : [ ] int { call ID ( false + - ID + - ( - - ( 123 ) ) ) { } }",
  "func ID ( ) { var ID : int { var ID : [ ] int ID ( ( - ID ) ) = ID } { } }",
  "func ID ( ID : bool , ID : [ true * ID [ ( ID ( ) ) ] ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] int return - ( 123 * - 123 / true ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ] int , ID : int ) : int { var ID : int return }",
  "func ID ( ) : int { var ID : int var ID : [ ID ( 123 + ID ) ] int }",
  "func ID ( ID : [ ] int ) : int { var ID : bool while ( 123 / ( ( - ID ) ) ) { } }",
  "func ID ( ID : bool ) : bool { var ID : int var ID : int if ID ( ) [ 123 ] { } } func ID ( ) { }",
  "func ID ( ) : [ false / - - true - true / - ( - false ) ] int { }",
  "func ID ( ID : [ ] bool ) { var ID : [ ( - - - 123 / ( - 123 ) / - - ( ID ) ) ] bool }",
  "func ID ( ) { call ID ( ) return } func ID ( ID : bool ) { var ID : int if ( - ID ) { } print 123 }",
  "func ID ( ) : int { print - ( true / 123 - ( false ) - - ( ( 123 ) ) ) print - 123 }",
  "func ID ( ID : int , ID : int , ID : int ) : [ ] int { var ID : int var ID : [ ] [ ] bool { } { } }",
  "func ID ( ) : int { call ID ( ) { var ID : bool } } func ID ( ID : int ) { call ID ( ) }",
  "func ID ( ) { while 123 > ( ( - true - - 123 ) ) { } ID = false } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] bool { var ID : [ ] [ ] bool return ID ( ) }",
  "func ID ( ) : int { var ID : int print ID [ true * ( ID ) ] [ ID ] }",
  "func ID ( ) : [ ( ID [ - false < ( ( ( true ) ) ) ] [ ( ( 123 ) ) ] ) ] int { } func ID ( ) { }",
  "func ID ( ) : int { if false - false * - 123 / ( ID ) + ID { } } func ID ( ) { }",
  "func ID ( ID : [ - ID [ ID ( ( ID ) ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ] bool { while ( - ( ( - ( - ( ( - ID ) ) ) ) ) ) { } }",
  "func ID ( ) { var ID : bool var ID : [ ] bool return }",
  "func ID ( ID : int , ID : bool ) { var ID : bool var ID : bool if ( ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool { var ID : [ 123 - - ( ( ID ) ) ] [ ] [ ] [ ] bool var ID : bool } while true { } }",
  "func ID ( ) : int { var ID : [ true - 123 / ( ( true ) ) / - - true - ID ] bool } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] int { var ID : int var ID : int call ID ( true / ( ID ) ) { } }",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) { var ID : int var ID : [ false and 123 ] [ ] bool }",
  "func ID ( ID : [ 123 - false and true / false - - ID [ - ( false ) ] ] bool ) { }",
  "func ID ( ) { return } func ID ( ID : [ ] bool ) { ID = ID * ( ( ID ) ) }",
  "func ID ( ID : bool ) : [ ] bool { var ID : int ID [ ( false ) ] = ID while 123 { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ] int var ID : [ ID ( ) * true and ( ID ) and - ( ID ) ] int }",
  "func ID ( ID : [ - ( - true / ( ID / false / ID ) / ID ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool return ID ( ) [ ( - ( - false ) ) ] [ ID ] } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : [ true - false * - ID ( ) / false - true ] int var ID : int }",
  "func ID ( ) : int { var ID : bool return ID ( ) [ - - false * - true / false ] [ ( - ( ( false ) ) ) ] } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : bool { var ID : [ ] [ ] [ 123 / ID * - ID ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ - 123 * ID or true / true or - ID ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID ( false / - ID * ID [ ID ] ) ] int ) { }",
  "func ID ( ) : bool { call ID ( ) { var ID : int { { { ID = 123 } if true { } } print ( ID ) } } }",
  "func ID ( ID : [ - true * ID [ ( ID ( - ( ( true ) ) ) ) ] [ 123 ] / ( ID ) ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool print 123 > ( - ( ( ID ) ) ) { } }",
  "func ID ( ) : bool { { } ID = ID ( 123 + - ID - ( - true ) ) } func ID ( ) { }",
  "func ID ( ) : [ ID [ - ( ( - ( - ( ID ) ) ) ) ] ] [ ] int { }",
  "func ID ( ID : int , ID : bool ) : int { var ID : bool var ID : [ - ID [ - - true ] [ false ] ] [ ] int }",
  "func ID ( ) { var ID : int print - true + ( false - ID ( ) + - ID ) - ID if ( 123 ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) { var ID : [ ( false > ID ) ] [ ] bool }",
  "func ID ( ) : int { var ID : bool } func ID ( ID : [ ] int , ID : int ) : [ ( true ) ] int { }",
  "func ID ( ID : int ) { var ID : bool var ID : [ ] int return ( ID [ ID ] ) }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool return ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : bool ) : int { ID ( ) [ - ID * ID ( ( ( ID ) ) ) / false ] = ( ID ) print ID }",
  "func ID ( ID : bool , ID : bool ) : [ ] bool { var ID : int var ID : int { var ID : bool print 123 if ( false ) { } } while true { } }",
  "func ID ( ID : [ ( ID <= ID * false * ( true ) ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : int { var ID : bool var ID : bool return }",
  "func ID ( ID : [ ] [ ] int ) { while - - ID ( ) [ - - ID ] [ true ] { } { } }",
  "func ID ( ID : [ ID [ ( - - false * - ID ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : int return } func ID ( ID : int ) { var ID : int var ID : bool }",
  "func ID ( ID : bool ) { if - ID [ true * - ( ID ) ] [ ID ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : int print ID ( - - ( - ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - ID ( ) [ - - ID ( ) / false ] [ ID ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : bool { if false / 123 and ( ID ) and ID { } while ( false ) { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int } func ID ( ) { print ( - false ) }",
  "func ID ( ID : [ ( 123 / ID [ ID ( ) [ - true ] ] ) ] int ) { }",
  "func ID ( ID : [ ] int , ID : [ ( 123 * - - - ( true ) * ( false ) ) ] int , ID : bool ) { }",
  "func ID ( ) { var ID : [ ] [ false / 123 - false / false * ID + 123 ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ false * - - ( ID ( ) [ - ( ( ID ) ) ] [ ID ] ) * - - - - - 123 ] [ ] bool var ID : [ ] [ ] bool }",
  "func ID ( ID : bool , ID : [ false / - - - true - true / ID ( ) + ( false ) ] [ ] [ ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ) { while - ID [ - true * ( ID ) ] { } while ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int call ID ( ) return false * 123 != ( ID ) }",
  "func ID ( ) { var ID : int var ID : [ ] [ ] bool }",
  "func ID ( ) { while - - ID / false - - ID ( ) * false / ID - ( ID ) { } { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) { var ID : [ ( ( ID ) ) ] int } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool , ID : bool ) : int { var ID : int }",
  "func ID ( ) : bool { call ID ( ID and - false * - ( - 123 ) and ID ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : [ ( ( ID ( ) [ ID ] [ ( - ( - 123 ) ) ] ) ) ] int { }",
  "func ID ( ID : int , ID : [ ] bool , ID : [ ] bool ) : [ ] int { var ID : int { return } }",
  "func ID ( ) { var ID : int var ID : int print ID ( ) [ ( ID ) ] } func ID ( ) { }",
  "func ID ( ) { var ID : int if ( true / ( ( - 123 ) ) * ID ) { } while true { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { { var ID : int var ID : [ ] bool return ID } } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : int var ID : bool while ID ( ) - ID + - true { } } func ID ( ) { }",
  "func ID ( ID : [ - ( true * true + true * ( - - 123 ) / - ID - false ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ - ID * ( ( ID ) ) * - 123 ] int } func ID ( ) { }",
  "func ID ( ID : [ ] [ - 123 / - - ( true * - ( ID ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ID - ( true * ( true / 123 / ID ) / ID ) + - - 123 ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ID : [ ] bool , ID : [ - ( ( ID ( ) ) ) ] [ ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : [ ] int call ID ( ( ID ( ) ) ) }",
  "func ID ( ) { var ID : int print ( ( 123 / ( ( ( - ( ( true ) ) ) ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ( ID ( ) [ - ( false ) ] ) ] int } func ID ( ) { }",
  "func ID ( ) : [ - - ( ( ( ( true ) ) ) ) ] int { }",
  "func ID ( ) : int { return ( - true + - ( ( ( ( - ( ( ( ID ) ) ) ) ) ) ) + ( - - - - ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ) { call ID ( 123 / ( ( false * - 123 ) ) / ID ) }",
  "func ID ( ID : [ ] int , ID : bool ) { var ID : int var ID : int print false + ID { } } func ID ( ) { }",
  "func ID ( ) : bool { if ID [ false == true * ID ( ) / - 123 ] { } }",
  "func ID ( ID : bool , ID : [ ] bool , ID : bool ) { if true / false / true + ( - ( 123 ) ) { } print ( true ) }",
  "func ID ( ) : [ ] int { var ID : bool } func ID ( ID : bool , ID : [ ] [ ( - - ( ( ID ) ) ) ] [ ] [ ] [ ] [ ] bool , ID : [ ] bool ) { }",
  "func ID ( ID : bool , ID : [ ID ( ) [ - ID - ID ( ) + ID ] [ ID ] ] int , ID : bool ) { }",
  "func ID ( ) { return } func ID ( ) { var ID : bool ID = true * - ( true ) * ( ID ) { } }",
  "func ID ( ) : int { var ID : int if ID ( ) [ ( 123 ) ] [ true ] { } ID = false } func ID ( ) { }",
  "func ID ( ID : int ) : [ - ID [ ( ( - ID ) ) ] [ false ] ] int { }",
  "func ID ( ) : int { var ID : int var ID : [ ] int return }",
  "func ID ( ) : [ ] [ ] bool { var ID : [ ID and - - ID and ( ( ( ( - - ID ) ) ) ) ] int var ID : [ ] bool }",
  "func ID ( ) { if - - ID * true + 123 / 123 + 123 * - false { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : [ false + ( true * ( ( ID ) ) / ID ) ] [ ] [ ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ( true / ( true >= true + false ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int if - - 123 / ID [ ( ID ) ] / false { } }",
  "func ID ( ) { var ID : [ - ID [ true * true != ( - 123 ) ] [ - - ID ] ] [ ] [ ] int }",
  "func ID ( ) { var ID : int ID [ false / false - ( ID ) ] = false } func ID ( ) { }",
  "func ID ( ) : int { while 123 / ID / ( ( ID ) ) { } call ID ( ) }",
  "func ID ( ) : int { } func ID ( ID : int , ID : int ) : bool { var ID : bool var ID : [ - - ( ID ) ] int }",
  "func ID ( ID : bool ) { return } func ID ( ID : [ ] [ ID ( ) / ID ] bool ) { }",
  "func ID ( ) { var ID : bool var ID : bool { var ID : [ ] [ true and ( ID ) and ID ] bool } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool ) : int { print - ID ( false / false - false ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool print ID ( ) [ true / ( ( ID ) ) ] [ ( ( ID ) ) ] }",
  "func ID ( ) { var ID : int var ID : [ ID [ - ( ID ) ] ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : bool if ID ( ) [ ( ( - ( ( - ID ) ) ) ) ] [ false ] { } if true { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ID and ( ID [ true ] ) ] bool }",
  "func ID ( ) : [ - ( ( ( ID [ ID ] ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - ( 123 * ( - ID ) / false ) ] [ ] int ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { call ID ( ) { var ID : [ ] int while ID { } } } func ID ( ) { }",
  "func ID ( ) { ID = true * 123 - false + ID ( ) [ ID ] [ true ] if 123 { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int , ID : [ ] [ ] int , ID : bool ) { var ID : bool var ID : bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] int var ID : bool call ID ( ID [ ID ] ) } func ID ( ) { }",
  "func ID ( ) : [ ( ( ( ID + ( - 123 ) - true ) ) ) ] bool { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : [ 123 / ID [ - false ] [ false ] ] bool { }",
  "func ID ( ) { var ID : bool var ID : int while ID ( ) [ ID ( ID ) ] { } }",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) { }",
  "func ID ( ID : int , ID : [ true * ID [ - - ( 123 ) ] / ID ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { while - ID [ - ID [ ( ID ) ] ] [ false ] { } }",
  "func ID ( ) : [ ] int { var ID : [ ID [ false + ID - true ] [ ( ( ( 123 ) ) ) ] ] bool }",
  "func ID ( ID : bool , ID : [ ID ( - true * true * true + ( ( - ( - ( - false ) ) ) ) + ( - true ) ) ] [ ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : [ ] [ ( ID [ - ( ( ( ( - true ) ) ) ) ] [ ID ] ) ] int { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID : [ ] int }",
  "func ID ( ) : int { while ID - ( ( 123 * ID ) ) + ( - - 123 ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID [ - ID ( ID ) ] [ - ( ID ) ] ] [ ] [ ] [ ] [ ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : [ ] int { { } } func ID ( ) : [ ID ] bool { }",
  "func ID ( ID : bool , ID : int , ID : [ ID [ ( - - ID ) ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int if false - true / - - - - ID + true { } { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - ( ID [ true and - ( - false ) ] ) ] int , ID : int ) { }",
  "func ID ( ID : int , ID : [ ] [ ] bool , ID : [ ( ( ( true ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ false * - ID ( false + - ID - ( false ) ) / ( ID ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : int var ID : int return - ( ID ) }",
  "func ID ( ID : bool , ID : [ ] [ ID ( 123 >= ( ID ) ) ] int ) { }",
  "func ID ( ID : [ ID ( 123 * ID ( ( ID ) ) / ID ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : bool if ( true * ID [ - ( - ID ) ] ) { } while false { } }",
  "func ID ( ) : int { var ID : bool var ID : [ - ID ( ) [ ID ( ) ] [ ( - ( ID ) ) ] ] bool }",
  "func ID ( ID : [ ] [ ] bool , ID : [ true * true / ( ID ) ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : [ ] int if true / - ( ID ) / ID { } }",
  "func ID ( ID : [ - 123 * ID ( - - true * ( ( ( ID ) ) ) / - 123 ) / ID ] int ) { }",
  "func ID ( ID : bool , ID : [ - ID ( ) [ ID ( ID ) ] ] [ ] bool , ID : bool ) { }",
  "func ID ( ) : int { { var ID : [ ] [ ] bool ID = false / - ID / ID } } func ID ( ) { }",
  "func ID ( ) { var ID : bool ID ( ID [ true == true ] [ - ( ( 123 ) ) ] ) = ID ID = 123 }",
  "func ID ( ID : [ ] bool , ID : [ - true - ID ( ( true ) ) - - false ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( ( ( ( true ) ) ) ) ID = ( ID ) } func ID ( ) { }",
  "func ID ( ID : [ 123 + false * false / ID ( false * - ID ) + ( ID ) ] [ ] bool ) { }",
  "func ID ( ) { var ID : bool return } func ID ( ID : [ ] bool , ID : int , ID : [ ] int ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : int } func ID ( ) { var ID : bool return }",
  "func ID ( ) { var ID : int var ID : bool { var ID : [ ] [ ] int } while ( ID ) { } } func ID ( ) { }",
  "func ID ( ) { } func ID ( ) { var ID : [ ID ( ( false ) ) ] [ ] int }",
  "func ID ( ) : int { var ID : int var ID : [ ] bool return - ID * ID ( ID ) * - ID } func ID ( ) { }",
  "func ID ( ID : int ) { return - ID ( ID [ - ( - ( ( ID ) ) ) ] ) } func ID ( ) { }",
  "func ID ( ) { { var ID : int print ( ( ( ID ) ) ) if 123 { } } }",
  "func ID ( ID : int ) : int { var ID : int while true / ID ( true ) / ID { } }",
  "func ID ( ID : bool , ID : int , ID : [ ] [ ID ( false * ID ) ] int ) { }",
  "func ID ( ) : [ ( 123 / ( - ( ( ( ID ) ) ) ) ) ] [ ] [ ] int { }",
  "func ID ( ID : [ - false - ID [ false and ( - ID ) and - ( ID ) ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] bool ID = - 123 - ID ( ) - - ( ID ) } func ID ( ) { }",
  "func ID ( ID : [ true * false * ( ID / true > - ( - - - - 123 ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : [ ID + ID ( ) [ - - ID ] + ( - 123 ) ] bool var ID : [ ] int }",
  "func ID ( ) : [ ] bool { var ID : int if false / - ID [ - ID ] [ ID ] { } print false }",
  "func ID ( ) : [ - - ( true <= ID ( 123 ) ) ] int { }",
  "func ID ( ID : int , ID : [ - ID ( true <= 123 * ID * ( true ) ) ] bool ) { }",
  "func ID ( ) : int { } func ID ( ) { return }",
  "func ID ( ) { { return } call ID ( - - ID [ ID ( ) ] ) }",
  "func ID ( ID : int , ID : bool , ID : bool ) { print ID [ true + true ] [ false ] }",
  "func ID ( ID : bool ) : bool { var ID : [ - ( ID ( - ( ( ID ) ) ) ) ] [ ] [ ] bool var ID : bool }",
  "func ID ( ) { print ID ( ) - ID / - ID ( ) and true } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { var ID : bool { print - ( ( 123 ) ) if ID { } } if true { } }",
  "func ID ( ) : bool { var ID : bool { var ID : [ ( ID ( ) [ ID ] [ ( false ) ] ) ] bool } if true { } }",
  "func ID ( ID : [ - ( ID ( false or false or 123 ) ) ] bool ) { }",
  "func ID ( ) : int { var ID : bool } func ID ( ) { var ID : int while ( ID ) { } }",
  "func ID ( ) : int { var ID : bool print ( ID [ ID ( ) ] [ ID ] ) ID = 123 } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : [ ] bool print true * ( - 123 ) * true } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ true * - false ] bool } func ID ( ID : int ) { }",
  "func ID ( ) : [ ID - 123 + ID ( ) ] bool { var ID : bool var ID : int } func ID ( ) { }",
  "func ID ( ID : [ ( true / ( true * ID ( ) [ 123 ] * ID ) * 123 ) ] int ) { }",
  "func ID ( ID : [ ( ( - ( false - 123 + 123 ) ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID [ - true - ( - ID ) + ( true ) ] [ ( ( false ) ) ] ] bool var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ID : int ) : bool { ID ( ) = ( - ID [ false ] [ ( - - ( ID ) ) ] ) ID = ID }",
  "func ID ( ) : bool { var ID : int return ID ( ) * ( ID [ ID ] ) / ( true ) }",
  "func ID ( ID : [ ] bool , ID : bool ) : bool { if - ( ( true ) ) { } { } }",
  "func ID ( ) { if - ID ( ID [ ( ( 123 ) ) ] [ - ( ID ) ] ) { } }",
  "func ID ( ID : [ ] int ) { if ( ID * ( ID ) / ( - ( ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( false * ID [ 123 - ( - ID ) ] * ( ( ( ( - - ( true ) ) ) ) ) ) ] bool , ID : bool ) { }",
  "func ID ( ID : [ false > ( ID [ ID ( ID ) ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int while ID [ ( - 123 * ( - ID ) * ( ( ( 123 ) ) ) ) ] [ ID ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool if false >= 123 and ID ( ) [ false ] { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ false and ID [ ID / ( - false ) * false ] [ ID ] ] bool ) { }",
  "func ID ( ID : [ ] bool , ID : [ ID [ 123 * - ( - - ( - 123 ) ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : int print ( ( ID ( ) ) ) if false { } } func ID ( ) { }",
  "func ID ( ) : int { if 123 and true - ID ( ( ID ) ) + ( ( - true ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ - - ( false + true / ( - - 123 ) - ID ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { ID ( ) = false and ( true ) and - ( ID ) call ID ( ) }",
  "func ID ( ID : [ ] int ) : bool { var ID : int var ID : bool return true + ID ( ) }",
  "func ID ( ) : int { var ID : [ ID [ 123 * - true / ( - ( - false ) ) ] ] int }",
  "func ID ( ID : bool , ID : [ - ( ( ID ( 123 ) ) ) ] bool , ID : [ ] bool ) { }",
  "func ID ( ID : bool , ID : [ ] int , ID : int ) { return ( ( ( ID ) ) ) }",
  "func ID ( ) { ID [ - - ( - - 123 * - ( - 123 ) ) ] [ false ] = false ID = ID }",
  "func ID ( ID : [ ] [ ID [ - - 123 / true / - ID ] [ true ] ] int ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { call ID ( ) call ID ( ID [ ID ] ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ ( - ( ID ) ) ] [ ] [ ] bool }",
  "func ID ( ID : [ ] [ ] bool , ID : [ ( ID ( ) [ ( ID ) ] ) ] int , ID : [ ] bool ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ] [ ] [ true * - ID ( ) [ 123 ] [ - ID ] / ( ID ) ] [ ] int ) { }",
  "func ID ( ) { } func ID ( ) { var ID : bool call ID ( ) { var ID : [ ] bool var ID : [ ] int } }",
  "func ID ( ) : bool { var ID : int ID ( ID / ( ID ( ) ) ) = true } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { }",
  "func ID ( ) : bool { while ( ( ( ( ( ID ) ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : int ) : bool { { var ID : [ ] [ ] bool ID ( ID ) = false if - ( - 123 ) { } } { } } func ID ( ) { }",
  "func ID ( ) : int { if ( ( - ( false * ( ( ID ) ) / false ) ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] [ ID / false * true - ( 123 ) ] [ ] bool var ID : [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ - ID [ ID * ID ( ) * ( - - true ) ] [ ( true ) ] ] [ ] int }",
  "func ID ( ) { var ID : int } func ID ( ID : [ ] int , ID : int , ID : int ) : [ ] int { }",
  "func ID ( ) { var ID : [ - false * - ID [ ( ID ) ] [ false ] ] [ ] int var ID : bool }",
  "func ID ( ID : [ ] bool ) : bool { var ID : int var ID : bool return }",
  "func ID ( ID : int ) { { { var ID : int } return } return } func ID ( ID : int ) { }",
  "func ID ( ) { var ID : int } func ID ( ID : bool , ID : [ ( ID ( ) ) ] bool ) { }",
  "func ID ( ) { var ID : int var ID : bool call ID ( ) { } } func ID ( ) : int { ID = ID }",
  "func ID ( ID : int , ID : int , ID : [ - ID [ - ( ID ) ] [ - ( ( false ) ) ] ] int ) { }",
  "func ID ( ID : [ - - ( ID [ - ( ID ) ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int , ID : int ) { var ID : int }",
  "func ID ( ) : int { while ( ID ( false * ID * - 123 ) ) { } ID = - ( ID ) }",
  "func ID ( ID : [ ( ID + ( - ( - ID ) ) - ID ) ] bool ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : bool var ID : [ 123 / ( ID ) ] int } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID ( false / ( ( - ID ) ) / ID ) ] bool ) { }",
  "func ID ( ID : int ) : [ ( ID ( ) / ID [ - ID ] [ ID ] / true ) ] bool { }",
  "func ID ( ) { call ID ( ) while - ID [ ( ( ( true ) ) ) ] [ ( 123 ) ] { } }",
  "func ID ( ID : bool , ID : int ) { var ID : int call ID ( ) return ID ( ) [ - ( ( - ID ) ) ] [ - ID ] } func ID ( ) { }",
  "func ID ( ) { var ID : [ - - 123 * ID ( ) [ ( 123 ) ] [ - ID ] ] int var ID : bool }",
  "func ID ( ID : [ - true + ID ( ) * ID [ ID ] / - true ] bool ) { }",
  "func ID ( ID : [ ] bool , ID : bool , ID : [ ] bool ) : [ ] [ ] int { var ID : [ ] int var ID : [ ] [ ] [ ] int }",
  "func ID ( ID : bool ) : int { { var ID : [ ] bool print false + true / 123 ID = 123 } while ID { } } func ID ( ) { }",
  "func ID ( ) : [ - - ID [ - - ( ( false ) ) ] [ ID ] ] [ ] bool { }",
  "func ID ( ) { return } func ID ( ID : [ ] int ) : bool { var ID : bool var ID : [ ] [ ] bool }",
  "func ID ( ) : bool { return ID ( ) [ - ( false * ( - ID ) * ID ) ] } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : int var ID : bool return } func ID ( ID : [ ] int ) : int { }",
  "func ID ( ) : int { call ID ( ID ( ID ( ) [ ID ] [ - ( ( - false ) ) ] ) ) if false { } }",
  "func ID ( ) : int { var ID : int call ID ( ) ID [ ( ( ID ) ) ] = - - ( ( - - ID ) ) }",
  "func ID ( ID : int ) { var ID : bool call ID ( 123 * ( false - - ( ID ) ) / ( ID ) ) }",
  "func ID ( ) : bool { var ID : bool var ID : int while ( ID ( ) [ true ] [ - 123 ] ) { } }",
  "func ID ( ID : bool , ID : int , ID : [ - ID [ false * ID [ - ( ( true ) ) ] [ ID ] / true ] [ - false ] ] [ ] bool ) { }",
  "func ID ( ) : [ 123 / ID [ ID ( ) / false <= ID ] [ ( true ) ] * ID ] int { }",
  "func ID ( ) : int { { var ID : int print false / ( true + false + ID ) * - 123 } if false { } }",
  "func ID ( ) : bool { var ID : int return ID [ - ( ( - - ( - ID ) ) ) ] [ ID ] } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int while ( - - ID * false / false ) { } if 123 { } }",
  "func ID ( ID : [ ] [ - true - ( ( - true ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool ID = ( 123 <= 123 ) }",
  "func ID ( ID : [ ] bool , ID : bool ) : [ true * - ID ( false ) ] int { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : bool var ID : [ ] int while 123 / 123 / ID { } call ID ( ) }",
  "func ID ( ) : bool { call ID ( false * - ( 123 or ID ) * ID ) ID = ID } func ID ( ) { }",
  "func ID ( ) { print ( false / false * ID [ false ] [ true ] ) if false { } }",
  "func ID ( ID : [ ] int , ID : int , ID : [ ( false * ID ( ) * ( ( false ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool return true < ( 123 / - ID ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID ( true - false / ID ( ) - - false ) ] [ ] int ) { }",
  "func ID ( ID : int , ID : [ ] [ ] [ false - ( ( - ( false ) ) ) ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ] [ ] bool , ID : int ) { print ( ( - - ( ( - - - ID ) ) ) ) if 123 { } } func ID ( ) { }",
  "func ID ( ) { if - - ( ID ( ID ( ID ) ) ) { } call ID ( ) }",
  "func ID ( ) { var ID : bool if false / ( ( - ID ) ) / - false { } while ID { } }",
  "func ID ( ) : int { var ID : int var ID : bool } func ID ( ID : bool ) : bool { var ID : [ ] bool var ID : int }",
  "func ID ( ID : int , ID : [ ] int , ID : int ) { print - - 123 * ID ( ) * 123 } func ID ( ) { }",
  "func ID ( ID : bool ) { while 123 - - ID * true - - ( ( false ) ) { } while - ( ID ) { } } func ID ( ) { }",
  "func ID ( ) : [ 123 * - ID - 123 / ID ( ) - ( - true ) ] int { }",
  "func ID ( ) : int { var ID : bool print ( - ID ( ) [ false ] ) }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : [ - 123 - - false / ( ID ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ 123 * false - - ( 123 * ( 123 ) ) ] [ ] [ ] [ ] int var ID : [ ] [ ] bool }",
  "func ID ( ) : [ ID + - ( ( false / ID ) ) ] int { }",
  "func ID ( ID : [ ID [ ( false - ( false ) + - ID ) ] [ - - 123 ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) { { while - false / ID ( - ( ( true ) ) ) { } } } func ID ( ) { }",
  "func ID ( ) : [ ] int { if true * - true * ID ( - true ) { } if ( ID ) { } }",
  "func ID ( ) { print ID ( ID ( true / ID * ID ) ) }",
  "func ID ( ) : int { var ID : bool var ID : int } func ID ( ID : bool , ID : bool , ID : int ) { }",
  "func ID ( ) : bool { ID [ 123 <= ( ( - ID ) ) ] = false if 123 { } } func ID ( ) { }",
  "func ID ( ) : [ - ID ( ) + false * ( - - 123 / ID * false ) ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ false / ( ( - ID / ID ) ) * - ( ( ( ID ) ) ) ] bool , ID : int ) { }",
  "func ID ( ) { var ID : int return - ID [ - ( - - ID ) ] }",
  "func ID ( ) : int { var ID : [ ID [ - ( false / 123 ) ] [ false ] ] int }",
  "func ID ( ) : bool { var ID : int var ID : bool ID ( ( ID [ ( ID ) ] [ - - - ID ] ) ) = true while ( ID ) { } }",
  "func ID ( ID : [ ] bool , ID : [ ( ( ID [ true ] ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool ) : bool { var ID : int var ID : int if true * false * - true { } }",
  "func ID ( ) { var ID : bool var ID : [ ] bool call ID ( ) while ( ( true ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) : bool { var ID : bool ID = - false / ID ( ) * false } func ID ( ) { }",
  "func ID ( ) { var ID : bool call ID ( ) call ID ( - ( ( ( false ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) { var ID : int var ID : [ ] bool return } func ID ( ) : [ ] int { }",
  "func ID ( ) : int { var ID : bool var ID : int while ( - - - ( - false ) ) { } call ID ( ) }",
  "func ID ( ) : bool { ID [ ID ( ) != ID [ - false ] ] [ 123 ] = ( ID ) } func ID ( ) { }",
  "func ID ( ) { call ID ( ID ( ) [ 123 + - ID [ - ( - ( ( ( ID ) ) ) ) ] [ ( - - ID ) ] ] ) }",
  "func ID ( ID : int , ID : int ) { var ID : bool ID [ ID ( true ) ] [ - false ] = - - - - - ( - ID ) call ID ( ) }",
  "func ID ( ) : int { while true + ( - ID [ ( ( 123 ) ) ] ) + ID { } ID = - - - ( - ID ) }",
  "func ID ( ID : int , ID : [ false * ( true * ID + ( - ID ) + false ) * ( true ) ] bool , ID : bool ) { }",
  "func ID ( ID : bool , ID : [ true / true * - ID ( ( - ( ID ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { while - - ( ID ( ( - - false ) ) ) { } if - 123 { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ] int { var ID : int var ID : bool while - 123 { } } call ID ( ) }",
  "func ID ( ID : int , ID : bool , ID : [ ( ( ID * ID ) ) ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : [ ( ID ( ID ( ( ( 123 ) ) ) ) ) ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ) { call ID ( ) return } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int while ( ( ( 123 ) ) ) { } }",
  "func ID ( ) : int { var ID : [ - ( false / ID ( ) + ID ) ] [ ] [ ] int var ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : bool print - 123 - 123 * - - - ( ( ( ( false ) ) ) ) * ( false ) }",
  "func ID ( ID : int ) { var ID : int if 123 >= ( - - ID ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int return } func ID ( ) { var ID : int }",
  "func ID ( ) { if ( - true / ( - - false * ( ID ) ) / ID ) { } if - 123 { } }",
  "func ID ( ID : [ ] bool , ID : int ) : bool { while - - - ID [ ID ] { } }",
  "func ID ( ID : [ ] bool ) { var ID : [ 123 + 123 * ID ( - - ID ) * ID ] bool var ID : [ ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : int { print ( ( ( ( ID ) ) ) ) }",
  "func ID ( ID : int ) { var ID : int while ( ID [ - 123 ] [ ( false ) ] ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : bool ID [ ID ( ) [ ( - - ID ) ] [ - ID ] ] = ID ID = ( ( true ) ) }",
  "func ID ( ID : int , ID : int , ID : [ ID / 123 + - - ID ( ) + ID ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : int { var ID : bool }",
  "func ID ( ID : int ) { var ID : bool var ID : [ true - ID ( ( - ( false ) ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : [ ] [ ] int { var ID : int var ID : int return - - ID }",
  "func ID ( ) : bool { } func ID ( ) { return - ID ( ) [ ID ] [ ( 123 ) ] }",
  "func ID ( ID : int , ID : int , ID : int ) { print ID / ID [ ID ] * ID while ID { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - ID [ - ( - false * ID ) ] ] [ ] [ ] int , ID : [ ] [ ] [ ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] int ) { return false / ID [ true ] * ( ( ( - ID ) ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ true * true * ( ID ( ( - - true ) ) ) ] bool ) { }",
  "func ID ( ) { if ( true / ID [ 123 / ID ] * - ( - ID ) ) { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int { while ID + true * false / ( ID ) + ID { } } } func ID ( ) { }",
  "func ID ( ) : [ ID * - ( - ( ( ( false ) ) ) ) / ID ] int { }",
  "func ID ( ) { var ID : [ ID ( ) [ ID ( - ( ( 123 ) ) ) ] ] bool var ID : bool }",
  "func ID ( ID : bool , ID : int , ID : [ ( - false / ID [ true ] [ - ID ] * ( ID ) ) ] bool ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) : bool { var ID : bool var ID : int if - true { } if ID { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : bool ID ( ) [ ID * ID ] [ ID ] = false print ID } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool var ID : [ true / false / - ( false ) ] int }",
  "func ID ( ) { print - ID - true * - ( false / - ID ) } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : [ - - ( ( ID ) ) ] bool var ID : [ ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) { if ( false and - true - 123 * ID / ID + - ID and ( ID ) ) { } print ( 123 ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : [ ] int { call ID ( ) print ID } }",
  "func ID ( ID : int , ID : int , ID : [ ID [ ( ID ( ) ) ] ] [ ] int ) { }",
  "func ID ( ) : [ - true >= - true and - 123 * ID ( ) * - - ( true ) ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( ID ( ) [ ( ( - ID ) ) ] [ ID ] ) ] int }",
  "func ID ( ) { var ID : [ ] bool call ID ( ) return } func ID ( ID : int ) : int { call ID ( ) if ID { } }",
  "func ID ( ID : [ ] bool ) : int { var ID : bool print - ID ( ) [ ID ] [ 123 ] }",
  "func ID ( ) { var ID : int var ID : bool ID ( ( ( ( - true ) ) ) ) = true while ( ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int ID = ( - ( 123 - - - ( ( ( ID ) ) ) + ( ID ) ) ) }",
  "func ID ( ) { while ( ( true / false * ID [ - - - - true ] ) ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] int { var ID : bool var ID : [ ] bool } func ID ( ID : bool , ID : bool , ID : bool ) { }",
  "func ID ( ) { var ID : int ID ( ) [ ID [ - ( ( ID ) ) ] ] = true } func ID ( ) { }",
  "func ID ( ) { while false + ( false * - false + - ID + - ( - false ) ) { } if ( false ) { } }",
  "func ID ( ID : bool ) { var ID : int { var ID : bool return } while ID ( ) [ true ] [ ID ] { } } func ID ( ) { }",
  "func ID ( ID : [ - false / - ID ( ) [ ( - true ) ] [ 123 ] ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { ID ( ) [ ID ( ) * ( - ( true ) ) / - ( ( false ) ) ] = ( false ) while 123 { } }",
  "func ID ( ID : int ) { print ID ( - true * ( - true ) ) }",
  "func ID ( ) { var ID : [ - - ( ( ID [ ( ID ) ] ) ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { } func ID ( ) { var ID : bool return - false / ( ID ) }",
  "func ID ( ID : int ) { return ( false * false * ID ( ) [ ( ( - 123 ) ) ] [ ID ] ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { }",
  "func ID ( ID : bool , ID : [ ] int ) : int { var ID : bool } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] bool { var ID : int print false / ID ( ) [ ( 123 ) ] } func ID ( ) { }",
  "func ID ( ) : bool { } func ID ( ID : [ ( ID [ ( false ) ] ) ] bool ) { }",
  "func ID ( ID : [ true * - false + ID ( true * - ID ) - - ID ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int var ID : [ ID ( ) [ ID ( ) ] [ ( ( - ID ) ) ] ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool print false / 123 / ID ( ) + true + ID ID = ( ID ) } func ID ( ) { }",
  "func ID ( ) : [ - 123 * ( - ( ID / 123 * 123 ) ) ] [ ] bool { }",
  "func ID ( ID : bool , ID : [ ID [ - - ( false * - - - - ( ID ) ) ] ] bool , ID : [ ] [ ] bool ) { }",
  "func ID ( ) { return ( ID ( 123 / - ID [ 123 ] ) ) } func ID ( ) { }",
  "func ID ( ) : [ ( true * ( 123 and - - ( ID ) and 123 ) * ID ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : [ - - - ID * - - ID ( ( ID ) ) * true ] bool { } func ID ( ) { }",
  "func ID ( ID : [ - 123 * ID ( ID + ( ID ) ) ] bool ) { }",
  "func ID ( ) { var ID : int var ID : [ ( ID [ - ( true ) ] [ ID ] ) ] int }",
  "func ID ( ID : bool ) { var ID : int ID ( - ( ID * 123 ) ) = ID print ID } func ID ( ) { }",
  "func ID ( ) { var ID : bool if - false * ( true * - - false ) / ( - ( ( true ) ) ) { } }",
  "func ID ( ID : [ ] bool , ID : [ 123 * true / - - ( - true ) ] int ) { }",
  "func ID ( ) : [ ] bool { var ID : int var ID : [ ] bool ID [ - false + ID ] [ - true ] = - - ( - ( ( ID ) ) ) }",
  "func ID ( ) : int { var ID : int return ( false * ( ID ( ) ) / ID ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] int while 123 * 123 / - - ( true ) { } while false { } }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] int if - - - ( ( 123 ) ) { } print - ( ID ) } func ID ( ) { }",
  "func ID ( ID : [ ID [ ID ( ) [ 123 * ( false ) ] ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool ID ( ( - ID [ ( ( ID ) ) ] ) ) = - false } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ID ( ) [ - true * ( true ) * - - true ] ] bool , ID : int ) { }",
  "func ID ( ) : int { var ID : int var ID : [ false + - 123 == - ID ] [ ] int }",
  "func ID ( ID : [ ] [ ] [ 123 * - ( true + ID ( ) - ( ID ) ) ] int ) { }",
  "func ID ( ID : int ) { if ID / ( - ( 123 ) ) { } print - false }",
  "func ID ( ) : bool { var ID : bool var ID : int while - 123 < ( ID ) { } ID = - ID }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : int return }",
  "func ID ( ID : bool ) : [ 123 / ( - 123 + - 123 > - ID ) ] [ ] int { }",
  "func ID ( ) { var ID : int while ( ( - - ID * - ID ) ) { } }",
  "func ID ( ID : int ) : int { var ID : int var ID : [ ID ( ) [ false ] [ - ( ID ) ] ] int } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : bool , ID : int ) : bool { { var ID : [ ] int } } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { ID = - false - true / ( false ) if ID { } }",
  "func ID ( ID : bool , ID : [ ] [ ] bool ) { var ID : int var ID : int { var ID : int var ID : [ ] bool } }",
  "func ID ( ) { var ID : [ - - ID [ ( ID ( ) ) ] [ ID ] ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ID : bool ) : [ ] int { call ID ( ( ( 123 ) ) ) }",
  "func ID ( ) : bool { }",
  "func ID ( ) { } func ID ( ) : bool { { var ID : bool call ID ( ) call ID ( ) return } }",
  "func ID ( ID : int , ID : int , ID : int ) : [ ] [ ID [ ID ( ) ] ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ( - ID [ false * false and ( ( false ) ) ] [ ID ] ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : [ - - - true - ID - ID ] int var ID : [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) : [ ID ( ( - true ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool var ID : bool } func ID ( ID : int ) : int { var ID : [ ] [ ] bool }",
  "func ID ( ) { var ID : bool var ID : [ ] [ ] bool ID = - - ID [ - ( ID ) ] [ - ( ( - ID ) ) ] }",
  "func ID ( ID : [ ] int , ID : int ) : bool { var ID : bool ID [ true * - - ID ] [ - 123 ] = ( ( ( ( - - ( - - ID ) ) ) ) ) }",
  "func ID ( ID : [ ID ( ) [ ID * - ID * ID ] ] [ ] [ ] int ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : [ ( false * ( ( - ( - ( true ) ) ) ) ) ] [ ] [ ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ false - true * 123 * ID ( ID ) ] bool } func ID ( ) { }",
  "func ID ( ) : [ ] [ - ( ( ID [ - ID ] [ true ] ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int ) : [ ( ( ( - - - ( - 123 ) ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : [ 123 / ( ( ( false * false / ( - ID ) ) ) ) / false ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : int { var ID : int return ( 123 ) } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : [ ID ( - - ID - false + - - - ( - - ( - - - ( ID ) ) ) ) ] int var ID : bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : bool ) : [ ID - ID or ID or ID ] [ ] int { }",
  "func ID ( ) : [ - ID ( ) * 123 + ID / ID * false + - - ( ID ) ] [ ] [ ] int { }",
  "func ID ( ) : int { var ID : int if ID / - - ( ID ( ) ) { } }",
  "func ID ( ) { } func ID ( ID : int , ID : [ ( false - - ( - ( - - ( ( - ( ( ID ) ) ) ) ) ) ) ] int , ID : [ ] bool ) { }",
  "func ID ( ) { print - ( - ID [ true * ( ID ) ] ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ - 123 / ( ( ID ) ) ] int }",
  "func ID ( ) : int { var ID : [ ] [ ID [ ( - ( 123 ) ) ] ] [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { { { var ID : [ ( - ( ID ) ) ] bool var ID : int } call ID ( ) } while - - - true { } }",
  "func ID ( ID : int , ID : [ - ID and ( false / - false * true ) and ( false ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ( ID [ ( ID * ( - false ) * - ( - 123 ) ) ] [ - ( false ) ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int call ID ( - - - false * ID ( ) [ 123 ] ) }",
  "func ID ( ) { var ID : bool { var ID : [ ] int var ID : int } }",
  "func ID ( ID : bool ) { var ID : bool var ID : int ID ( false + ( ( false ) ) ) = ( ID ) print true }",
  "func ID ( ID : int ) { var ID : [ ] bool var ID : [ ] bool { return } }",
  "func ID ( ) { var ID : [ ] [ ] [ ] bool var ID : int if - false / false * ( - - - ( ( 123 ) ) ) { } }",
  "func ID ( ID : bool , ID : bool , ID : [ 123 <= ID ( ) * - ( true ) / ( ID ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : int call ID ( 123 and ID ( ) ) ID = ID }",
  "func ID ( ) { return - true * ( - 123 / ( false ) ) / false } func ID ( ) { }",
  "func ID ( ) { var ID : [ - true + ID * ( ( - - - ID ) ) / - ID + ( ID ) ] int } func ID ( ) { }",
  "func ID ( ) { print ( ID ( ) [ 123 / 123 * ( ( - ( - true ) ) ) ] [ ID ] ) ID = - - - ID }",
  "func ID ( ID : bool , ID : int , ID : [ ] int ) : int { while ID [ - ID ] { } }",
  "func ID ( ) : [ ( ID / 123 and false - - ID + - - ( 123 ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool var ID : bool ID ( ) = ( false ) }",
  "func ID ( ID : [ ID ( ) [ - - false * true * ID [ false ] ] ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int while - - ID ( ) [ ID ( ) ] { } }",
  "func ID ( ) { var ID : [ ] [ ] int call ID ( ) }",
  "func ID ( ID : int , ID : bool , ID : [ ] [ ] [ ID * true and true and ( ( false ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ false and - - - ID ( ( ( false ) ) ) and ID ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool return - false / ID ( ) [ false ] } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : int var ID : [ ] [ ] int } func ID ( ID : [ ] [ ] int ) { }",
  "func ID ( ID : bool ) { var ID : int var ID : bool print ID * ( false ) if ( ( - ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ ( false and - ( - ID * ( 123 ) ) and ( ID ) ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { print ( - 123 - ( false / ( ID ) / ID ) + ( false ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : int { call ID ( - - ID ( ) != - 123 ) }",
  "func ID ( ID : [ ] bool ) { var ID : [ ] [ ] bool }",
  "func ID ( ID : int , ID : [ ] int , ID : int ) { var ID : int var ID : bool while ( ID ) { } ID = - ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] bool ) { while true * ( - ( true ) ) { } while - false { } }",
  "func ID ( ID : int , ID : [ ] bool , ID : bool ) : int { var ID : bool var ID : int call ID ( - - 123 ) while - - ( true ) { } } func ID ( ) { }",
  "func ID ( ID : [ - - ID ( true * ( ( ID ) ) / ( false ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) { while - ( 123 * ( ( - 123 ) ) * false ) { } { } }",
  "func ID ( ID : [ ] [ ] [ ID - 123 * - true <= ( - ( ( ID ) ) ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { var ID : [ ID [ ( - ( ( ( ID ) ) ) ) ] ] [ ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { }",
  "func ID ( ID : bool ) : bool { var ID : int var ID : [ ] bool } func ID ( ) : int { var ID : int }",
  "func ID ( ) : int { var ID : int call ID ( ) return }",
  "func ID ( ID : [ ( ID [ 123 / true * - true ] [ ( 123 ) ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int if ID ( 123 - - - ( false ) ) { } } func ID ( ) { }",
  "func ID ( ) { } func ID ( ID : bool ) : bool { var ID : [ - - false + - ID ] bool }",
  "func ID ( ID : int , ID : bool ) : [ ] bool { var ID : int var ID : bool return ( ( - true ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : int { var ID : bool { var ID : [ ID ( ) [ - ( true ) ] ] int var ID : bool } { } } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] [ ID - ( - ID ) - 123 ] [ ] int var ID : [ ] bool }",
  "func ID ( ID : [ ] int , ID : bool , ID : int ) { var ID : int } func ID ( ID : bool , ID : [ ] [ ] [ ] bool ) { }",
  "func ID ( ID : int ) : [ ID / ( false - - false * ( ( ID ) ) * false ) / false ] [ ] [ ] bool { }",
  "func ID ( ) : int { { var ID : int if 123 - ID [ - ( true ) ] { } print false } }",
  "func ID ( ID : int ) { var ID : [ ] int return }",
  "func ID ( ) : bool { print ( ( ID - - - - - - ( ( ID ) ) - - - true ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] bool print ID ( ) [ ID ( ) ] [ - ( ID ) ] }",
  "func ID ( ) : int { var ID : int var ID : int return }",
  "func ID ( ID : [ ] int , ID : int , ID : bool ) : int { ID ( ( false ) ) = ( ID ) { } }",
  "func ID ( ) : [ ] int { var ID : [ ( ( - true - false - ID ) ) ] bool }",
  "func ID ( ID : int , ID : bool , ID : [ ] bool ) : [ ID ( ID [ ( ( true ) ) ] ) ] [ ] [ ] int { }",
  "func ID ( ID : int ) : int { var ID : int var ID : int ID [ - false * false ] = ID print - - - - 123 } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : int ) { { ID ( ) [ - ( true ) ] [ - ID ] = - ID } call ID ( ) }",
  "func ID ( ID : [ ] int , ID : int , ID : int ) { var ID : [ ( ( - ID ) ) ] int }",
  "func ID ( ID : int , ID : [ ( false / ( ( ID ) ) * ID ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ID [ ( 123 * ( - ID ) ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int while false - ( ( ID ) ) { } }",
  "func ID ( ) : int { var ID : [ - ( - ID * false - ( true ) ) ] [ ] int }",
  "func ID ( ID : [ ] bool , ID : int ) : int { var ID : bool var ID : int while false != ID { } { } }",
  "func ID ( ) { var ID : int var ID : [ ] bool print false / - true * - - 123 ID = ( - ID ) }",
  "func ID ( ID : int , ID : [ ] bool , ID : [ - ( ( ( 123 ) ) ) ] [ ] [ ] int ) { }",
  "func ID ( ID : int , ID : bool ) { return } func ID ( ) : [ ( ( - ID ) ) ] int { }",
  "func ID ( ID : [ ] bool ) { var ID : int var ID : bool call ID ( ) } func ID ( ) : [ ] bool { }",
  "func ID ( ID : int ) { var ID : bool var ID : int if ( ID [ 123 ] [ 123 ] ) { } }",
  "func ID ( ID : [ 123 * - ( - ID ( ) [ true ] ) / false ] bool ) { } func ID ( ) { }",
  "func ID ( ) { } func ID ( ) : bool { }",
  "func ID ( ID : bool , ID : [ true / - ( ID ( ID ) ) ] int , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] [ ( 123 / - ID ( false ) ) ] [ ] int { }",
  "func ID ( ID : int , ID : bool ) : int { var ID : [ ] bool var ID : [ - ( - - true ) ] int }",
  "func ID ( ID : int , ID : bool , ID : [ ] int ) { if - false / ( - ( true ) ) / - true { } if true { } } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool ) { var ID : [ ] bool var ID : int if ID { } while 123 { } }",
  "func ID ( ) : bool { var ID : bool var ID : [ ID - ( ( ID ) ) ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : int { var ID : int var ID : int return }",
  "func ID ( ) : int { if ID ( ) - ( ( true ) ) + ( - ( ( ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { print ( ( - ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] bool { var ID : int var ID : int while ID * ID / ID { } if ( ( 123 ) ) { } }",
  "func ID ( ID : int , ID : [ ( ID [ ID ( ) [ ( false ) ] [ 123 ] ] ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : [ ] int var ID : bool } func ID ( ID : [ ] bool , ID : bool , ID : bool ) { }",
  "func ID ( ID : int ) : int { print ( ID ( ) * true * true ) print - ( - true ) }",
  "func ID ( ID : bool ) { var ID : [ ] int print false + ( false / - ID * false ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int { var ID : [ ( - - - ( ( ( ( - ( true ) ) ) ) ) ) ] int } }",
  "func ID ( ID : bool , ID : [ ] [ - ID ( - ( true ) ) ] int , ID : int ) { }",
  "func ID ( ) { var ID : int var ID : int if ID / ( ID * 123 * ID ) * 123 { } { } }",
  "func ID ( ) : bool { call ID ( false < ID ( ) / ( ID ) ) }",
  "func ID ( ) : bool { return ID ( ) [ ID ( ID ) ] } func ID ( ) { }",
  "func ID ( ) { if ( ID ( ) [ - false / ( 123 ) ] ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int , ID : int , ID : [ ( - ( ID ) ) ] int ) { }",
  "func ID ( ) { var ID : bool call ID ( ( ID [ false * ID * ( ( false ) ) ] [ ID ] ) ) }",
  "func ID ( ) : int { if ( ID ( ( ID ) ) ) { } call ID ( ) }",
  "func ID ( ) : int { var ID : [ ID ( ) * true / false and ID and false ] int var ID : int } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : int ID [ ( false + 123 ) ] = ID while - - 123 { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID : [ false / true / ( - ( - ID ) ) ] [ ] [ ] int }",
  "func ID ( ) : bool { var ID : int var ID : bool return ( ( ID ( ) ) ) } func ID ( ) { }",
  "func ID ( ) : [ true + ( ( - 123 / ID / ( ID ) ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) : bool { ID ( ( 123 + ID ) ) = ( ( ID ) ) { } }",
  "func ID ( ) : int { var ID : bool call ID ( true * true / ID ( - false ) ) } func ID ( ) { }",
  "func ID ( ) : bool { ID ( ( - ID ( ) / 123 ) ) = ID } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : bool call ID ( - 123 * ( 123 ) * ID ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : [ ] int { }",
  "func ID ( ID : int , ID : bool , ID : int ) : int { var ID : [ ] bool while - 123 * - ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : bool ) : bool { return }",
  "func ID ( ) : [ ( ( ID * false + 123 + ( ID ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID ( ) [ 123 * false and - false ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) : [ ( ID ( ID ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : [ true * ID [ 123 or 123 * ( true ) * ID or 123 ] [ - 123 ] * true ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ( - ( ( - - ( ( ( false ) ) ) ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { print - ID [ - false * true ] } func ID ( ) { }",
  "func ID ( ) { var ID : int return true * - ID ( ) [ true * false ] / true } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { var ID : bool while ( ( 123 ) ) { } }",
  "func ID ( ID : [ true / 123 * - false + true and ID [ - ( ( ( - false ) ) ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] int { var ID : [ - - - ( ( ( true ) ) ) ] [ ] int var ID : [ ] bool }",
  "func ID ( ID : [ ] [ ( - ( - ( ( 123 ) ) ) ) ] bool ) { }",
  "func ID ( ID : int , ID : [ ] int ) { var ID : bool var ID : bool } func ID ( ID : bool , ID : int , ID : [ ] [ ] bool ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : [ ] int { if - ID [ - false ] [ ( ID ) ] { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) { } func ID ( ID : [ ] int , ID : int , ID : int ) : int { }",
  "func ID ( ID : bool ) { return true - 123 - - 123 * true * - 123 } func ID ( ) { }",
  "func ID ( ID : int ) : int { ID ( ) [ true / 123 / - ( ID ) ] = false print false }",
  "func ID ( ID : int ) { var ID : int return - ( ID ( ) [ false ] [ ID ] ) }",
  "func ID ( ID : bool ) { var ID : int var ID : int } func ID ( ) : [ ] bool { var ID : bool ID = ( true ) }",
  "func ID ( ) { var ID : int var ID : bool while ( 123 / ID [ true ] / - 123 ) { } print 123 } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - ( ( - true / ID ) ) ] [ ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int var ID : bool { var ID : int var ID : bool call ID ( - ( - ( ID ) ) ) while false { } } if - - 123 { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : [ ID / - false / ( ( true ) ) ] [ ] [ ] [ ] bool { }",
  "func ID ( ) { var ID : bool if 123 / - - true - ( ( false ) ) { } if ID { } }",
  "func ID ( ID : int ) : bool { var ID : [ ] [ ID ( - ( ID ) ) ] bool var ID : [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : [ ] [ ID [ false - 123 - ( ID ) ] [ true ] ] bool }",
  "func ID ( ) : [ - 123 * ( false * ( true + true ) / ( - - - - true ) ) / ID ] bool { }",
  "func ID ( ID : bool ) { var ID : bool { var ID : bool if ( 123 / ( ID ) / - ( ( ( 123 ) ) ) ) { } while true { } } }",
  "func ID ( ) { call ID ( ) { var ID : int return } }",
  "func ID ( ) : bool { var ID : [ ID [ - ( ID ( ) ) ] [ ID ] ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int { var ID : bool print ( - - ( ( ( ID ) ) ) ) } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : bool { print - ID ( ) + ID * ( ID ) * ID if - ( - ( ID ) ) { } }",
  "func ID ( ID : [ ] [ ] int , ID : bool , ID : bool ) : bool { } func ID ( ) { var ID : bool var ID : [ ] int }",
  "func ID ( ID : [ ] bool , ID : [ ] bool ) : int { if ( - - false ) { } { } }",
  "func ID ( ID : [ ] int , ID : [ false + ID [ ( 123 ) ] ] [ ] int , ID : int ) { }",
  "func ID ( ) : int { var ID : bool var ID : int return }",
  "func ID ( ) : int { var ID : [ ] [ ] [ ] [ ] int var ID : bool } func ID ( ID : bool ) { }",
  "func ID ( ) { var ID : [ ] [ false * ID ( ID [ ID ] [ true ] ) ] bool var ID : int }",
  "func ID ( ) : int { call ID ( false and ( ID ( ) [ 123 ] [ - ID ] ) and - ID ) call ID ( ) }",
  "func ID ( ID : int ) { var ID : bool var ID : bool ID ( - - 123 - ( true ) - ID ) = ( ( - ID ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : int ID = ( ID [ - ( 123 ) ] [ ID ] ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( 123 or ID ( ) [ ID ] or - false ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ID [ true - ID * - - - false - true ] [ - - ( ID ) ] ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : int { if ( true / ID [ ( true ) ] ) { } }",
  "func ID ( ) { var ID : [ ( ( ID ( ( - ( - - ( true ) ) ) ) ) ) ] int var ID : int }",
  "func ID ( ID : [ - ( - ID [ 123 and ( - ( ( true ) ) ) and - ID ] [ ( true ) ] ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { while - ( ID / ( ID * - ID ) * - - ID ) { } while ( - - ( ID ) ) { } }",
  "func ID ( ) : int { var ID : [ ] int ID ( ) = ( 123 / ID ) call ID ( ) }",
  "func ID ( ID : int ) { print - ( false * ID [ ID ] * ID ) }",
  "func ID ( ) { print - - 123 * - 123 and ID - false / ( ID ) * - ( false ) call ID ( ) }",
  "func ID ( ID : int , ID : [ ] [ ] int , ID : [ ] [ true * - - ID ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { while - ( 123 / 123 - - ID * 123 * ID - - ( - true ) ) { } }",
  "func ID ( ) { print false / true * - - ( ID ( ) [ ( ID ) ] [ - - false ] ) print - false }",
  "func ID ( ID : [ true * - ( - ID ( ) [ false ] [ - ID ] ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool if - - ID - 123 != ID { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ - false / true or - ( ( ( - ( ID ) ) ) ) or ID ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ID [ ID ( - ID ) ] [ ( false ) ] ] bool var ID : int }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : [ ] int { while 123 <= ( - ID ) { } }",
  "func ID ( ID : [ ID ( ) [ false + ( ( ( ( ID ) ) ) ) - ( ID ) ] ] int ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : [ ( - ( - ID ) ) ] int { } func ID ( ) { }",
  "func ID ( ) { print ( ( false + - - ( ( 123 ) ) - false ) ) if ( ID ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] [ ( ( ( false ) ) ) ] int } func ID ( ) { }",
  "func ID ( ) { } func ID ( ) { var ID : [ ] int }",
  "func ID ( ) { var ID : bool var ID : bool { var ID : int var ID : [ ( - true ) ] bool } }",
  "func ID ( ID : int ) { } func ID ( ) { var ID : bool var ID : bool return }",
  "func ID ( ID : int ) { return ID [ ID ( ) [ ( ( - ( - ( - ID ) ) ) ) ] ] [ ( ( ID ) ) ] } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : int { var ID : int ID [ ( ( ID ) ) ] = - ID } }",
  "func ID ( ) : [ 123 / - - ID ( false * ID ( ( ID ) ) / ( ( ( ID ) ) ) ) * ID ] int { }",
  "func ID ( ID : [ ID ( ) / ID / ( - - - 123 + true ) ] bool ) { }",
  "func ID ( ) : int { call ID ( ID [ - - ID ( ) / - ID ] [ ID ] ) }",
  "func ID ( ID : bool ) : [ ] int { var ID : bool var ID : int { var ID : [ ] bool } return ID } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID ( - ID ( ) [ false ] [ false ] ) ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ] bool ID = 123 / - ( - ID ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] [ true and ( ID [ ID ] [ - ( true ) ] ) and - ( ( ID ) ) ] bool var ID : int }",
  "func ID ( ID : [ ] bool , ID : [ - - 123 * - 123 / ID > ID ] bool ) { }",
  "func ID ( ) { var ID : bool var ID : [ ID [ true / false != - false ] ] bool }",
  "func ID ( ID : [ ] int ) { var ID : int var ID : int { var ID : int var ID : bool return ID } { } }",
  "func ID ( ) : bool { var ID : bool } func ID ( ) { { var ID : int var ID : bool } return }",
  "func ID ( ID : bool ) : int { var ID : int return ID ( ) [ 123 / false / 123 ] } func ID ( ) { }",
  "func ID ( ) : int { ID ( ) [ ID ( false - false ) ] [ ( ( false ) ) ] = ID ID = - true } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID > ( false / ID [ false ] [ true ] / ( - ( ID ) ) ) ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ID ( 123 - - true / ID ) ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID [ - ID [ ( ( - false ) ) ] [ - false ] ] ] int ) { }",
  "func ID ( ) : int { var ID : int var ID : [ ] int }",
  "func ID ( ID : bool , ID : [ ( ( - ( - ID ) ) ) ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : bool var ID : [ ( - ( 123 ) ) ] int }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : bool var ID : [ ] bool if ( ( ID ) ) { } }",
  "func ID ( ID : bool , ID : int ) { var ID : bool { var ID : bool print - true - - true - false { } } print - ID }",
  "func ID ( ) : bool { while ID ( ) * true - true / true / - ( ID ) { } if ID { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID ( ) [ true and ID [ false ] [ ( ID ) ] and ( ( 123 ) ) ] [ false ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : int ) { var ID : bool print - - false + ( ( ( ( ( true ) ) ) ) ) + 123 }",
  "func ID ( ) { var ID : int return ( ( ( ID ) ) ) }",
  "func ID ( ID : int ) : bool { var ID : [ - ID ( - - ( - true ) ) ] [ ] bool var ID : int }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : bool return ID * false / ID }",
  "func ID ( ID : int , ID : [ ] [ ] bool ) { var ID : [ ] bool var ID : int print ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : [ ] bool { var ID : bool if - - true { } ID = - ( - ( ID ) ) }",
  "func ID ( ID : bool , ID : bool ) : bool { }",
  "func ID ( ) { var ID : int call ID ( ) if - ID ( ) [ - ID ] { } }",
  "func ID ( ID : bool ) : bool { var ID : bool var ID : bool return } func ID ( ID : int ) : int { { } ID = false }",
  "func ID ( ) { var ID : bool if ID ( - - ( - - ID ) ) { } print ( - ( ( false ) ) ) }",
  "func ID ( ID : int , ID : [ ] int ) { call ID ( - true / - false == ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool while - ID ( ID ( ) [ ID ] [ ( - ( - ( ID ) ) ) ] ) { } while ID { } }",
  "func ID ( ) { var ID : bool var ID : int { } if ( ID ( ) ) { } }",
  "func ID ( ID : [ - - ( - ( false + ( ( ID ) ) + ID ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ID [ - ( - ( true * 123 * - ID ) ) ] [ ID ] ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) { while true * ( true and - ID ( ) * - 123 / - ( false ) and - ( false ) ) { } { } }",
  "func ID ( ) { var ID : int call ID ( ) } func ID ( ) : bool { var ID : bool { return 123 } }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ] int var ID : [ ID / ID ] int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool if true / - ID ( ( ID ) ) { } }",
  "func ID ( ID : [ ] int , ID : [ ] [ ] bool , ID : bool ) { return ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int ID [ ID ( - ( 123 ) ) ] [ - ( ID ) ] = - ID call ID ( ) }",
  "func ID ( ID : [ ID ( ID [ - false and 123 ] [ ( - false ) ] ) ] int ) { }",
  "func ID ( ID : [ ] [ ] bool ) : bool { var ID : bool var ID : bool print 123 * 123 } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool ) : bool { var ID : [ true + - ( 123 ) + - ID ] bool var ID : [ ] [ ] [ ] int }",
  "func ID ( ) : int { var ID : [ false and - - - ( ( 123 ) ) ] [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : [ ] [ - 123 * - ( true ) ] int }",
  "func ID ( ) { var ID : int var ID : [ 123 / - ( false - - ( ( - true ) ) ) ] [ ] [ ] [ ] bool }",
  "func ID ( ID : [ ] bool , ID : int , ID : int ) : int { if ( - ( 123 ) ) { } print ( - 123 ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ( ID [ - - - - ID ] ) ] [ ] int ) { }",
  "func ID ( ID : [ ] [ ( true / - - ( ID ( ) ) * - - ( ID ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ false * ( - - 123 / ( false ) * ( ID ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : [ ] int var ID : int print - true and ID and ID } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ] bool if ID [ 123 * false / ( - ID ) ] [ ( ( ID ) ) ] { } while ( false ) { } } func ID ( ) { }",
  "func ID ( ) { return } func ID ( ID : [ ] [ ID ( ( ( ID ) ) ) ] int ) { }",
  "func ID ( ) : int { call ID ( ) while - ( ID [ true ] ) { } } func ID ( ) { }",
  "func ID ( ) { } func ID ( ID : bool ) : int { var ID : bool var ID : bool }",
  "func ID ( ) : int { { var ID : [ ID [ ( - - ID ) ] [ ( 123 ) ] ] [ ] bool } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : int return } func ID ( ID : [ ] [ ] int ) { }",
  "func ID ( ) { if ID ( 123 <= ( - ( true ) ) ) { } }",
  "func ID ( ) : int { ID ( ) [ false - ( ID [ ID ] [ ID ] ) + ( ( - ID ) ) ] [ ( ID ) ] = ID call ID ( ) }",
  "func ID ( ID : [ - ID * - - ID ( true * false - true ) * ID ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ( ( ID [ 123 * ( 123 ) ] ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int var ID : [ false / - - false - ID - - ( ( ID ) ) ] bool }",
  "func ID ( ID : [ ( ( ID - ID [ ID ] + - ID ) ) ] int ) { }",
  "func ID ( ID : [ true / ID [ ID ( ( false ) ) ] [ ( ( 123 ) ) ] / ID ] int ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : int var ID : bool return - ( - 123 ) } func ID ( ) { }",
  "func ID ( ID : [ ID * - ID / true + true / ID [ ( ( - - ID ) ) ] [ ( ( true ) ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int while ( 123 - - false + false ) { } } func ID ( ) { }",
  "func ID ( ) : [ ( ( 123 - true / ( ( ( true ) ) ) / ( 123 ) - - true ) ) ] int { } func ID ( ) { }",
  "func ID ( ) : int { if ( false + true * ID [ - ( false ) ] * - ( - ID ) ) { } { } } func ID ( ) { }",
  "func ID ( ) { var ID : int while false / ID ( ID ( true ) ) / - ID { } print ID }",
  "func ID ( ) : int { var ID : int while - 123 / - ID ( ( ( ID ) ) ) * false { } ID = - ( - - ID ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - ID ( ) [ ID ( ) [ ID ] ] [ ( - ( true ) ) ] ] bool ) { }",
  "func ID ( ) : [ ] [ ] int { call ID ( ) { call ID ( ( ID ) ) } }",
  "func ID ( ID : bool , ID : int , ID : bool ) : [ ] int { { var ID : [ 123 ] bool } ID = - ( 123 ) }",
  "func ID ( ) : bool { var ID : int var ID : bool return ID ( ( ( - ( ID ) ) ) ) }",
  "func ID ( ) : [ false / false ] [ ] bool { } func ID ( ) { call ID ( ) }",
  "func ID ( ID : int ) : bool { print ( ( 123 != ID ) ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int var ID : int print - false * ID != ID ID = ( - ( ID ) ) }",
  "func ID ( ID : bool , ID : [ - false * - - ID [ ID ( ) ] ] [ ] [ ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool { var ID : bool { var ID : int var ID : int } while ( true ) { } } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : [ ( - ( ( ID ) ) ) ] int { }",
  "func ID ( ) : int { var ID : bool var ID : int call ID ( ) }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : [ ] bool ID ( false ) = - 123 while ( ( ( 123 ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int ) : [ ] int { var ID : bool } func ID ( ) : int { }",
  "func ID ( ) { return - ( true / 123 - ( - - 123 ) - - ID ) }",
  "func ID ( ) { var ID : [ - ( ID [ ID ( ) ] ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool if ( - ( - ( true ) ) ) { } while true { } }",
  "func ID ( ) : bool { var ID : [ true / ( ( ( 123 ) ) ) * - ( ( false ) ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) : [ - ( true / false + ( ( 123 ) ) - - - ( ID ) ) ] [ ] int { }",
  "func ID ( ) : int { var ID : int var ID : [ ] [ ] int }",
  "func ID ( ) { var ID : [ ] int if true / ( ID * ID ) / - false { } call ID ( ) }",
  "func ID ( ID : [ ] [ - true / ID ( ( - ID ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { if true == - ID - ( - false ) { } }",
  "func ID ( ) { var ID : bool return ( ID * ( ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int , ID : int ) : bool { var ID : [ ] [ - ID ] [ ] bool var ID : int }",
  "func ID ( ID : int ) : [ ] [ true * ( ID ( ) [ ( false ) ] [ ID ] ) ] bool { }",
  "func ID ( ID : bool ) { var ID : [ ] [ true / ID and true and - ID ] bool }",
  "func ID ( ) : [ - ID ( ) / ( ( - - ( ( - ( ID ) ) ) ) ) / ID ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ ] [ true or 123 * false * ( 123 ) or - ( ID ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ( ( ( 123 ) ) ) ] [ ] bool }",
  "func ID ( ) : int { while ID / - false - - - - false / ( ID ) + ID { } call ID ( ) }",
  "func ID ( ID : int ) { call ID ( - - - - ( true / 123 * ( ( 123 ) ) ) ) while ( ID ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] bool print ( ( - true ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool call ID ( - - ( - ( - 123 ) ) ) ID = - 123 } func ID ( ) { }",
  "func ID ( ID : [ true - ( false * - ( 123 / - ( - 123 ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( - ( 123 / - false / ID ) ) ] [ ] bool }",
  "func ID ( ) : bool { { var ID : [ true / ( - ID ( ) ) / ID ] int } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool , ID : bool ) : bool { call ID ( ID / - - ID ) print true } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] [ ( - ( ID ( ) ) ) ] int } func ID ( ) { }",
  "func ID ( ) : [ ID ( ) [ - ( - 123 * ( ( ( - - false ) ) ) ) ] [ - ( true ) ] ] int { }",
  "func ID ( ) : int { var ID : [ ] bool if ( false + ID / ID + true ) { } while true { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int ID ( ) = ID * - ID [ ID ] [ ID ] } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : [ ] bool call ID ( ) }",
  "func ID ( ) { var ID : [ ] bool print ( - ( ID ( ) ) ) }",
  "func ID ( ) : int { var ID : bool return } func ID ( ID : [ ] int ) { var ID : int var ID : int }",
  "func ID ( ) { var ID : int var ID : int while - ID [ ID ( ) [ ID ] [ - true ] ] [ ID ] { } call ID ( ) }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : int var ID : [ - - ( false ) ] bool }",
  "func ID ( ) : [ ] [ ID + ID [ - 123 + - true ] [ ID ] ] [ ] int { }",
  "func ID ( ) { var ID : int call ID ( ID [ 123 * - - false * 123 ] [ 123 ] ) } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : bool var ID : bool print - ID ( ID ) { } }",
  "func ID ( ID : int , ID : int , ID : int ) { { var ID : [ ] [ ] bool var ID : bool print 123 } while - - true { } }",
  "func ID ( ID : [ ] bool ) { var ID : int return ( ID / ( true ) ) }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { var ID : int { call ID ( ) return } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : bool call ID ( ID [ ID ] [ ID ] ) } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool ) : bool { ID ( - ID [ - 123 ] [ - ( false ) ] ) = ( - ( - true ) ) while true { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ] int , ID : int ) : int { var ID : bool var ID : int while 123 { } } func ID ( ) { }",
  "func ID ( ) : int { return ( ID + - 123 / ID ( ) / ID ) }",
  "func ID ( ID : [ ] bool ) { var ID : bool while - ( false / ( true ) * ID ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool call ID ( 123 / ID / - ( ID ) ) print true } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ - ( - ID [ ( - ( false ) ) ] [ false ] ) ] int }",
  "func ID ( ID : [ ID ( ) [ ID ( ID and - false ) ] ] bool ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : int call ID ( ) while false / ( true ) / ( 123 ) { } } func ID ( ) { }",
  "func ID ( ) { print false * - ID ( ) [ ID ( - - false ) ] call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool print false / true and ID ( - ID ) ID = - - ( false ) } func ID ( ) { }",
  "func ID ( ) { return true * 123 * - true + ID ( ) [ false ] [ ( - ( - 123 ) ) ] - ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : int { var ID : [ ] bool while false and - true and - ID { } } func ID ( ) { }",
  "func ID ( ) { ID [ ID * true * ID + ( ID ) ] [ false ] = true } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) : [ ] [ ID / 123 * ( false ) ] int { }",
  "func ID ( ) : [ true - ID [ ( 123 + ( ID ) - ( - ID ) ) ] + - - 123 ] [ ] int { }",
  "func ID ( ) { var ID : bool ID [ true / - 123 - ( ID ) - ID ] [ ( ( - true ) ) ] = ID }",
  "func ID ( ID : bool ) { if - ( ( - - ( ID ) ) ) { } print - ( - ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ 123 / 123 <= 123 / ID [ false ] [ - ( 123 ) ] / false ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ) : [ ID ( true - ( ID + ID ) - true ) ] [ ] int { }",
  "func ID ( ) : int { if true - ID * ( ( ( - - - ( false ) ) ) ) * ( ID ) - 123 { } call ID ( ) }",
  "func ID ( ID : int , ID : int ) { var ID : [ ( ( ID ) ) ] [ ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) : [ ID + ( ID - true - ID ) ] [ ] [ ] bool { }",
  "func ID ( ID : int ) : [ - true + 123 / - ( - ( ID ) ) ] bool { }",
  "func ID ( ID : int , ID : int , ID : [ ID ( ) [ false and ( ID ) and ID ] ] int ) { }",
  "func ID ( ) { var ID : bool var ID : [ ] bool if ID ( - ID ) { } if ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { ID ( - - ID and true ) = ID { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ true / ( ( 123 / - ID ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : int return false - ( ID ) }",
  "func ID ( ID : [ ( 123 / ( - ( - ( ( - ( ( ( ID ) ) ) ) ) ) ) / ID ) ] bool ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool ID = ID [ ID ( ) ] [ true ] ID = - ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) { print ( ID ( ) [ - ID ] ) } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] int { var ID : int var ID : [ ] [ ID [ true ] ] bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] [ ID [ ( ( ( ( ( ID ) ) ) ) ) ] [ ( - ID ) ] ] [ ] bool }",
  "func ID ( ) { var ID : [ - ID ( ( ID [ - true ] [ - 123 ] ) ) ] int } func ID ( ) { }",
  "func ID ( ID : bool ) { return - ( - ID ( ) [ true ] ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ID [ ( ID [ true ] ) ] ] bool ) { }",
  "func ID ( ID : bool ) { var ID : int var ID : bool print - ID ( ) [ false ] ID = - ID } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int } func ID ( ID : [ ] int ) : int { var ID : [ ( - ( ( ID ) ) ) ] bool var ID : int }",
  "func ID ( ID : bool , ID : bool , ID : int ) { ID ( true * - ( ID ) * - ( - ( ID ) ) ) = - ID } func ID ( ) { }",
  "func ID ( ) : [ ID ( ( ID [ - - ID ] [ - ( ID ) ] ) ) ] bool { }",
  "func ID ( ) : [ ] bool { var ID : int ID [ ( ( ID ) ) ] = true } func ID ( ) { }",
  "func ID ( ) : int { var ID : int } func ID ( ID : int ) { var ID : int ID [ ID ] = ( - ID ) { } }",
  "func ID ( ) { var ID : [ ] [ ] bool print ID [ ID - ( - - ( ( ID ) ) ) ] if - - ID { } } func ID ( ) { }",
  "func ID ( ) : [ ( ID * ID [ ID ( - ID ) ] [ ( true ) ] / ID ) ] int { } func ID ( ) { }",
  "func ID ( ID : [ - ( - ID [ 123 + ID + - 123 ] [ 123 ] ) ] bool ) { }",
  "func ID ( ) : bool { var ID : int var ID : int call ID ( ( - ID ( ) ) ) }",
  "func ID ( ID : [ - false * - ( true - ( - - false ) - - ID ) / false ] bool ) { }",
  "func ID ( ID : bool , ID : bool ) { return ID * ( 123 * - false ) * - ( - ID ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ] int ) { var ID : bool var ID : [ ] [ - - - ID ] [ ] bool }",
  "func ID ( ID : bool ) { var ID : bool var ID : bool while ID [ true / - ( - ( 123 ) ) ] [ - - true ] { } call ID ( ) }",
  "func ID ( ) { ID ( ID ( true / ( ( ID ) ) ) ) = true } func ID ( ) { }",
  "func ID ( ) { print true * ID ( false * ID ( ) , ID ) * - - - ID }",
  "func ID ( ) : [ ID [ ID [ ( ( ( false ) ) ) ] [ ( - - true ) ] ] [ ( 123 ) ] ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : bool ID [ ( ID ( ) ) ] = - ( ID ) print ( - ( ( false ) ) ) }",
  "func ID ( ) { var ID : [ true / - - - true - - ( - false ) - ID ] [ ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { if ( ID ( false ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ false * - - - - false * 123 and ( - ( ID ) ) ] [ ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] bool var ID : int print true * - ID - - ID - true } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : [ - - 123 * 123 + false * ( - ( ( - ( - ( ( ( - - ( ( - - - 123 ) ) ) ) ) ) ) ) ) * 123 ] int }",
  "func ID ( ID : bool , ID : bool ) : int { var ID : bool { var ID : int while ( ID ) { } } call ID ( ) }",
  "func ID ( ) : int { var ID : bool { while - - ( ID ( ) ) { } } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : [ ] int ID ( ) [ - ( ( false ) ) ] = 123 print ( ( ( ( ( - ( ( ( - ID ) ) ) ) ) ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID * ID [ ( 123 ) ] * ID ] int } func ID ( ) { }",
  "func ID ( ) { var ID : int return ID ( - ID ( ID ) ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ - - - ID != ID [ - ID ] [ ID ] ] bool } func ID ( ) { }",
  "func ID ( ID : [ ( false - - - - true * ( 123 ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] [ ID [ ID [ ID ] [ - - false ] ] ] int } func ID ( ) { }",
  "func ID ( ID : [ ID ( true / ID ( - ID ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ true / ( 123 + ID [ ( - ID ) ] + 123 ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : bool while ( ID [ ID ] [ - - false ] ) { } ID = ( ID ) }",
  "func ID ( ID : int , ID : [ ] [ false / ( ID ( ) * ( ID ) ) * - ( - ID ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool print false * true - ( 123 / ID ) }",
  "func ID ( ) { var ID : bool if - false * - - ID [ ( true ) ] * 123 { } } func ID ( ) { }",
  "func ID ( ID : [ ID ( ( 123 or - ( ID ) ) ) ] int ) { }",
  "func ID ( ID : bool , ID : int ) { while true / ( ( - ID ) ) / 123 { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( ID [ ( ( 123 ) ) ] [ true ] ) ] bool var ID : [ ] int } func ID ( ) { }",
  "func ID ( ) : [ ] int { while ID ( ( - false ) ) { } } func ID ( ) { }",
  "func ID ( ) { call ID ( - - false - ( ( ( ID ) ) ) + false ) }",
  "func ID ( ID : int ) { var ID : [ ID ( true * true / ( ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] [ - false / ID / - ( ID ) ] [ ] int { }",
  "func ID ( ) { } func ID ( ) : bool { call ID ( ) return }",
  "func ID ( ID : [ false + ID ( ID ( ) [ - - ID ] ) ] int ) { }",
  "func ID ( ID : int , ID : bool ) : [ ID * ( - 123 * ( 123 ) ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : [ - 123 * ( ID ( true * ID ) ) * ( ID ) ] int { }",
  "func ID ( ) : [ true != ( 123 + - ( false ) - ID ) ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] bool while ( - ( ID ) ) { } call ID ( ) }",
  "func ID ( ) { var ID : bool { var ID : int var ID : [ ] [ - 123 * ( - false ) ] int } print ( true ) } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : [ 123 * ID ( ID ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : [ ] [ ] int { var ID : bool var ID : int return } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool , ID : int ) : int { var ID : bool if ( ID ) { } } func ID ( ) { }",
  "func ID ( ) : [ ( true - ( - - - ID ( ) ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : bool { var ID : [ ID / 123 * ( ID ) ] bool } }",
  "func ID ( ) : [ ] [ true * 123 * ID [ ID [ ID ] [ ID ] ] ] int { }",
  "func ID ( ID : [ ] int , ID : bool ) { var ID : int call ID ( ( - - - 123 ) ) ID = 123 }",
  "func ID ( ) { var ID : int var ID : int if false - - ID ( ) - ID { } } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ] int return - true * - true - false - true }",
  "func ID ( ) { { return } return 123 + - - ID [ false ] } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int if - - ( ID ( ID ) ) { } { } }",
  "func ID ( ) : int { var ID : int var ID : int print ( - ( ( ID ) ) ) ID = - ID } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : bool var ID : [ - ID [ - ( ID ) ] ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ( - false / false / - ( ( ID ) ) ) ] [ ] int }",
  "func ID ( ID : [ ] [ ] [ ] [ ] bool ) { var ID : bool var ID : int print - ( true ) if true { } } func ID ( ) { }",
  "func ID ( ID : [ ID ( true / - false >= ( - ID ) ) ] int ) { }",
  "func ID ( ID : int , ID : [ - ID ( true * false + 123 ) ] [ ] bool ) { }",
  "func ID ( ) { call ID ( ) } func ID ( ) : bool { var ID : [ ] int var ID : bool ID = ID }",
  "func ID ( ) : [ ] int { var ID : [ 123 * false * ( ( ID ) ) ] int } func ID ( ) { }",
  "func ID ( ) : [ ( true * true / ( false * - - ID / ID ) ) ] int { }",
  "func ID ( ID : bool ) : bool { var ID : [ ] [ ] int var ID : int print ( 123 ) }",
  "func ID ( ID : int ) : [ ] bool { var ID : bool var ID : int return - true - 123 + ( ID ) } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : int ) : [ ID ( ) [ ( ( - ID ) ) ] [ false ] ] int { }",
  "func ID ( ) : int { var ID : int var ID : int } func ID ( ) { var ID : bool if - ( ( ( - true ) ) ) { } }",
  "func ID ( ID : bool ) { var ID : [ ID ( ) [ ( - ( true ) ) ] [ ID ] ] int var ID : int }",
  "func ID ( ID : int , ID : int ) { print - ID [ false * - ID * ID ] [ 123 ] }",
  "func ID ( ID : bool ) { var ID : [ ] [ - ID ( ) / ( true ) ] int var ID : [ ] [ ] [ ] [ ] int }",
  "func ID ( ID : int , ID : int , ID : bool ) { return ID [ - ( - - ID ) ] [ - false ] } func ID ( ) { }",
  "func ID ( ) { } func ID ( ) : bool { var ID : bool var ID : int }",
  "func ID ( ID : bool ) { var ID : int var ID : [ ] [ ( 123 / true ) ] int }",
  "func ID ( ) { var ID : int if ( ( - ( ID ) ) ) { } }",
  "func ID ( ID : bool , ID : [ - ID ( ( false or ( ID ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : int var ID : [ ] bool }",
  "func ID ( ID : [ ] int ) : bool { var ID : bool print true * - 123 * ( - - - 123 ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool print ID / 123 / ID [ - ID ] [ ID ] call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : [ true * false - ID ( ) [ ( ( - ID ) ) ] ] int }",
  "func ID ( ) { var ID : int var ID : bool call ID ( ) if ID ( ) [ ID ] { } }",
  "func ID ( ) { var ID : bool var ID : bool if - ( true * ( - 123 ) ) { } }",
  "func ID ( ID : [ ID ( ) [ - - - ( 123 * ID / false ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ( ID ( ) [ - - ( true ) ] ) ] bool ) { }",
  "func ID ( ID : bool ) { var ID : [ 123 / - 123 + true * ID ( ) ] [ ] [ ] int }",
  "func ID ( ) { { var ID : [ ] int var ID : bool return - ID ( ( false ) ) } { } }",
  "func ID ( ID : int , ID : [ ID ( - true * ID ( true ) * ID ) ] [ ] [ ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool { } return ( false / ID * false ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool ID [ 123 * - ID - ID [ false ] - ID ] [ false ] = ID while ID { } }",
  "func ID ( ) { var ID : [ ] int var ID : bool return 123 * - ID / true - ( ( - 123 ) ) + ( ( false ) ) } func ID ( ) { }",
  "func ID ( ) : bool { print ID ( ) [ - true / true and - ID and ( true ) ] print - 123 } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ - ( ( ID [ true ] ) ) ] bool var ID : [ ] bool }",
  "func ID ( ID : int , ID : [ ( - - ID ( ) [ ( ID ) ] ) ] int ) { }",
  "func ID ( ID : bool ) : [ ( ID ( ( true ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] bool print - ( ( - ID ) ) if ( - ( ( - true ) ) ) { } }",
  "func ID ( ) { var ID : [ ( true - ID ( ) [ - ( 123 ) ] + ( 123 ) ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] bool call ID ( - 123 * - true + - ID ) if ( - ID ) { } }",
  "func ID ( ID : bool , ID : int , ID : bool ) : [ ] [ ] bool { var ID : bool if ID { } if ( ( ( - - ID ) ) ) { } }",
  "func ID ( ID : bool ) { var ID : int { if - ID ( ) [ true ] { } if 123 { } } } func ID ( ) { }",
  "func ID ( ) { print - ( 123 * ( ( ID ) ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] int var ID : bool ID = false / ( true ) } func ID ( ) { }",
  "func ID ( ID : int ) : [ ( false * ID * ID - ( - ( false ) ) - ( true ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : bool var ID : [ ] bool call ID ( - ID [ ID ] ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int }",
  "func ID ( ID : [ ] bool , ID : [ ] [ ID / - - true / ID ( ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ( ( - ( - ( true ) ) ) ) ] [ ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : [ - ( ( false / 123 / ID ) ) ] int { }",
  "func ID ( ) { ID [ true and ( ID ( 123 ) ) ] [ ID ] = - ( - - ( 123 ) ) } func ID ( ) { }",
  "func ID ( ) : bool { } func ID ( ID : [ ] [ ID - ( 123 ) - ID ] bool ) { }",
  "func ID ( ID : [ ] bool , ID : int , ID : bool ) { var ID : [ ] [ ] [ ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ 123 * ( ID * ( false ) ) / ID ] int , ID : [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int ) : bool { var ID : int var ID : [ ( ID ) ] [ ] bool }",
  "func ID ( ID : int , ID : [ 123 != ID ( ( 123 ) ) ] [ ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] [ ( ( - true / 123 + ID + - true ) ) ] int { } func ID ( ) { }",
  "func ID ( ) : int { call ID ( ) print true / - ( - true * - - false ) / ( ( 123 ) ) }",
  "func ID ( ) : int { var ID : bool var ID : bool { var ID : [ ] [ - 123 - ID ] int var ID : bool } print ID } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID / ID / ID ( ) [ ID ] [ false ] ] [ ] [ ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ) : bool { call ID ( ID [ ID [ true ] [ - ID ] ] ) }",
  "func ID ( ) { var ID : int var ID : int if 123 / ( false == 123 ) * ( - ( ( - ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] [ 123 * - - 123 <= ( ID ) ] [ ] int ) { }",
  "func ID ( ) { var ID : bool ID [ ID ( ) [ ID [ ID ] ] [ ID ] ] [ ( 123 ) ] = ID }",
  "func ID ( ) { var ID : [ ] [ - ( ( 123 / - - - - - - ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : int return false and ID [ - 123 ] } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool print ( ( false * ID * ( - true ) ) ) print ( - - ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool call ID ( ) call ID ( ID ( ) [ 123 ] ) }",
  "func ID ( ) : bool { var ID : [ ] [ - true and true / ( - - ID ) / - - - ( - ID ) and ( ID ) ] [ ] bool var ID : [ ] int }",
  "func ID ( ID : [ ID ( - ID [ ID [ 123 ] [ ( 123 ) ] ] [ ID ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ - true and ( ( - ID ( ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int , ID : int ) : bool { var ID : int ID ( ) = - ( - - ID ) }",
  "func ID ( ID : int ) : int { var ID : bool return ID [ - false * - - ID ] [ ( ID ) ] } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : [ ID ( - ID ( ) [ ID ] ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) : bool { var ID : [ - ( - 123 / ( true ) * false ) ] [ ] [ ] int var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) { print ( true / - ID / ( ( ( ( false ) ) ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool return ( ( ID ( ID ) ) ) }",
  "func ID ( ID : [ ] bool , ID : bool , ID : [ false / - ( ID ) ] bool ) { }",
  "func ID ( ID : [ ] [ - - - - ( ID + ( 123 ) + ( ( - true ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool ) { print - ( - ID [ - ( false ) ] ) } func ID ( ) { }",
  "func ID ( ) : [ ( ( ID - - false * ( - 123 ) / ( ( - ID ) ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : [ - true * ID [ ID ( ID ) ] [ ID ] ] bool }",
  "func ID ( ID : int , ID : int ) { var ID : bool var ID : [ ] bool print ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ) { return - ( ID [ ID * false - ( ( - ( - 123 ) ) ) ] [ ID ] ) }",
  "func ID ( ID : int , ID : bool ) : int { var ID : [ 123 - - ( - ( ( 123 ) ) ) ] [ ] bool var ID : [ ] int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ - ( ID ( ) [ ( 123 ) ] ) ] int }",
  "func ID ( ) : bool { ID ( ) [ true / - - ( - ID ) ] [ true ] = - ( - true ) if ( 123 ) { } }",
  "func ID ( ID : bool , ID : bool , ID : [ ] bool ) : [ ] bool { var ID : bool print - - 123 if ID { } }",
  "func ID ( ID : bool , ID : [ ] bool , ID : [ - - ( true * ( ID ) * ( true ) ) ] [ ] bool ) { }",
  "func ID ( ID : int , ID : int ) : bool { var ID : bool ID [ - - ID * - false * - ID ] [ ID ] = 123 ID = ( ID ) }",
  "func ID ( ID : int , ID : [ - ( false / false + ( ( ID ) ) ) ] [ ] int , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool while true - false - - ( - 123 ) { } while ( ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ ( true + ( ID / ( ( ID ) ) * ID ) ) ] bool ) { }",
  "func ID ( ) { call ID ( ) return } func ID ( ID : [ ] bool , ID : [ ] bool , ID : [ false ] bool ) { }",
  "func ID ( ID : int , ID : [ ] bool ) { var ID : int var ID : int if true * true { } call ID ( ) }",
  "func ID ( ) { print true - 123 and ( ( false ) ) and ( ID ) { } }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : int var ID : bool if ( false ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] int call ID ( - - ID ( false ) ) print - ( ( ( - ID ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : [ ] int var ID : int print ID ( ) ID = - false } func ID ( ) { }",
  "func ID ( ) : int { var ID : int while ( - - false * - ID ( ) * ( ID ) ) { } { } } func ID ( ) { }",
  "func ID ( ID : [ true ] bool , ID : bool , ID : bool ) : int { print ID }",
  "func ID ( ID : bool , ID : int ) { var ID : int return ID ( 123 * ( - true ) ) } func ID ( ) { }",
  "func ID ( ) { print ID ( - ID [ 123 * ( - 123 ) * false ] ) }",
  "func ID ( ) : [ ( ( - - 123 / 123 * ( - ID ) ) ) ] [ ] [ ] [ ] [ ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ true + ( - ( ID ) ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) { if ( ( false + ( ( ID ) ) ) ) { } if ID { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool if ( ( ( ( ( true ) ) ) ) ) { } { } }",
  "func ID ( ID : int , ID : bool , ID : [ ID [ ( ID ( ) ) ] [ ( false ) ] ] int ) { }",
  "func ID ( ID : [ 123 / true * ( - ( ( ID ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : int { var ID : [ ID [ ( 123 ) ] [ ( ID ) ] ] bool var ID : [ ] int } while ( ID ) { } }",
  "func ID ( ID : [ false / true and - - - - true / - ID / ( - - ID ) and - - 123 ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { while false / ( ( ( ID ) ) ) * ( ID ) { } }",
  "func ID ( ) : bool { var ID : int var ID : bool print ( ID ( ) [ - ID ] ) }",
  "func ID ( ) : bool { var ID : [ ID ( ) [ false / ( - - - ( ( ( ID ) ) ) ) ] [ ( ID ) ] ] bool } func ID ( ) { }",
  "func ID ( ID : [ false * ID ( - - ID ( ) * ( - ID ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : bool if ( ( - ID ) ) { } if ( - ( ( false ) ) ) { } }",
  "func ID ( ID : int , ID : bool , ID : [ ( ( false / ( ID ) * ( false ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ( ID / 123 - ID ( ) ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) : [ ( ID ( ) and - - true - ID - 123 ) ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ - false / false / ID ( ID ) ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int if 123 * ( true * false / ID ) { } } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] int { { var ID : [ - ID [ 123 ] ] int } }",
  "func ID ( ) : bool { var ID : int ID [ - false * ID * ( - ID ) ] [ - - - true ] = ( ID ) print - - - false }",
  "func ID ( ) { ID ( ID [ ( 123 * - true ) ] [ true ] ) = ( false ) }",
  "func ID ( ID : bool ) { } func ID ( ID : int , ID : [ - false / true * ( ID ) ] int , ID : bool ) { }",
  "func ID ( ID : int , ID : [ ] int ) { var ID : int var ID : [ ] [ ( 123 ) ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ 123 != 123 * ID ( ) [ true ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { call ID ( ) return - ( false * false * ( 123 ) ) }",
  "func ID ( ID : int , ID : [ ID [ - false - - - ID ] [ ID ] ] [ ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ) : int { call ID ( false * ID [ - ( - - ( 123 ) ) ] [ ( ( ID ) ) ] ) }",
  "func ID ( ID : bool , ID : int , ID : int ) : int { var ID : int var ID : int while ( true ) { } print ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool var ID : bool }",
  "func ID ( ) : [ - 123 / true * ( ID * true / - ID ) ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool ID ( ) [ ( ( ID ) ) ] [ false ] = ( - - ( ( - ID ) ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int return - - - true / 123 * 123 >= false }",
  "func ID ( ) { var ID : int return ( ID ( ) [ 123 / ID ] [ ( ID ) ] ) }",
  "func ID ( ID : bool ) : [ ] int { var ID : int var ID : bool }",
  "func ID ( ID : [ ] int , ID : [ ] bool , ID : int ) { } func ID ( ) { var ID : [ ] bool var ID : int }",
  "func ID ( ) { var ID : int call ID ( - ( true / false - ID ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : int if - false * true + ID / ( ID ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int } func ID ( ) : [ ] [ ] int { var ID : bool { var ID : bool var ID : bool } while ( ID ) { } }",
  "func ID ( ) : int { return ( ( ( true + ID - ID ) ) ) }",
  "func ID ( ID : [ - ID [ - ID ( ) [ ( ID ) ] [ - ID ] ] [ true ] ] [ ] bool ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : int call ID ( ) return } func ID ( ID : bool , ID : int , ID : [ ] bool ) { }",
  "func ID ( ID : [ ] [ - ( ID ( ( ID ) ) ) ] [ ] [ ] int ) { }",
  "func ID ( ID : [ ] bool , ID : int ) { var ID : bool var ID : int if 123 * ID / ID { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : [ ] int print ( 123 * ( - false ) * 123 ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool , ID : bool ) : bool { if ( - false ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( ID [ - - 123 / - ( false ) ] [ true ] ) ] [ ] bool }",
  "func ID ( ) { var ID : int var ID : int print - ID ( ) / - - - - ( - ( ID ) ) / ID } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int var ID : bool call ID ( ( ID [ - ( ID ) ] ) ) while 123 { } } func ID ( ) { }",
  "func ID ( ID : [ ( ID [ ID ( true ) ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { print 123 * ( ( true ) ) / ID } func ID ( ) { }",
  "func ID ( ) : [ ID - ( true * ID / ( - ( ID ) ) ) - ( ( ID ) ) ] int { } func ID ( ) { }",
  "func ID ( ) : [ - ( ID ( ) [ ( - ID ) ] ) ] bool { }",
  "func ID ( ID : int ) : [ ] bool { var ID : bool return false / false - - ID + ID }",
  "func ID ( ID : [ ] bool ) { var ID : int var ID : [ ID [ 123 ] [ - ID ] ] [ ] [ ] bool }",
  "func ID ( ) { } func ID ( ) : [ ] [ ] [ ] [ ] bool { call ID ( 123 ) }",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : bool print ID ( ) * ID / false { } }",
  "func ID ( ) { return ( ID [ ID [ true ] [ ( - ( true ) ) ] ] ) }",
  "func ID ( ID : [ ( 123 + ID * 123 + ID ( - ( ID ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ] int var ID : bool call ID ( ( false ) ) }",
  "func ID ( ) { ID ( ( ID ( ) * ( - ( ( ( ( - ID ) ) ) ) ) ) ) = ( ( ( ( ID ) ) ) ) }",
  "func ID ( ID : [ ] [ 123 <= - ( ID ( ID ) ) ] int ) { }",
  "func ID ( ID : bool , ID : int ) : bool { return } func ID ( ) { if ID ( ) { } }",
  "func ID ( ID : bool , ID : bool ) { var ID : int if ( - 123 / ID * ID ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ - ID [ true + - - ID ] [ - - - false ] ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] [ ( - - true / ID [ true ] [ ID ] * ID ) ] bool var ID : [ ] [ ] [ ] bool }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { { var ID : bool return } return } func ID ( ) : [ ] bool { }",
  "func ID ( ID : int ) : int { var ID : int var ID : [ ( true * ID / ( ID ) ) ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool { var ID : [ ] [ ID ( ) [ true ] ] [ ] [ ] bool } }",
  "func ID ( ) { var ID : [ ] [ - ( 123 * ( ( ( ID ) ) ) / 123 ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) { print ( - ( 123 * ID ( false ) * - ID ) ) } func ID ( ) { }",
  "func ID ( ) : int { print ( ( - - ID ( ) [ 123 ] [ - false ] ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int call ID ( ) { } } func ID ( ) { ID = ( - ( true ) ) }",
  "func ID ( ) : [ ] [ ] int { var ID : bool var ID : int if ID ( ) [ ( ( true ) ) ] { } while ID { } }",
  "func ID ( ID : bool , ID : int ) : bool { var ID : bool var ID : int while false / - false { } call ID ( ) }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : int var ID : int if ID [ ID ] [ ID ] { } if ID { } }",
  "func ID ( ID : int ) : int { var ID : [ - ( ( false ) ) ] int } func ID ( ) { }",
  "func ID ( ID : int ) : bool { print 123 / 123 + - 123 != ( ( ID ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] [ ] bool { var ID : bool return ( - ( - ID ) ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int while - - true * ( ( ( ( - 123 ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : bool var ID : bool { var ID : [ 123 ] [ ] [ ] bool } }",
  "func ID ( ID : int , ID : [ ] int ) { var ID : int var ID : int print ( false ) } func ID ( ) { }",
  "func ID ( ) : bool { call ID ( ( ID [ 123 > ID ] [ ID ] ) ) print ( - 123 ) }",
  "func ID ( ) { var ID : [ ] bool var ID : int { var ID : [ ] int print ( - - ID ) { } } }",
  "func ID ( ) : [ - - - - ( - ID / ( - - ( - - ID ) ) * - false ) ] int { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool , ID : [ ] int ) : [ - ( ID ) ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : int if ( 123 * false / - true + ( - false ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( ( - - true * false / - - ID ) ) ] [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : [ - 123 / ( - ID ) ] int }",
  "func ID ( ) : bool { var ID : [ 123 * ( 123 - - true * ID * - - ID - false ) ] [ ] [ ] [ ] [ ] int }",
  "func ID ( ID : [ ] int ) : int { var ID : int if - ID [ - 123 ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int ID = true * ( ( ID ) ) * true while ( ( ( ( - ( ID ) ) ) ) ) { } }",
  "func ID ( ) : [ ] int { print - - false - - ID [ false ] [ ( ( ID ) ) ] ID = ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : [ ] [ ] [ false * false / ( false ) ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { var ID : [ ] int var ID : [ ( ID ) ] bool } func ID ( ) { }",
  "func ID ( ID : [ ID [ - ( false + ( ( 123 ) ) ) ] [ 123 ] ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : [ false + - - ( ( ( ID ) ) ) ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int , ID : [ ] [ ] [ ] bool ) { return - ( ( false ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { ID [ ID ( ) [ false ] ] [ ( - ( ( ( ID ) ) ) ) ] = - ID ID = - - ID } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : [ ] [ ] int call ID ( ) while ( ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID [ - ID ( ( ( - - ID ) ) ) ] ] [ ] [ ] [ ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : [ true != ID / ID ( false * ( ID ) ) * ( - ( ID ) ) ] bool ) { }",
  "func ID ( ID : [ ] [ ] [ true + ID [ ID [ - true ] [ ( ID ) ] ] [ ID ] ] bool ) { }",
  "func ID ( ) : [ ] int { var ID : bool var ID : bool print ( ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) : bool { var ID : int var ID : bool } func ID ( ) { var ID : int var ID : [ ] [ ] bool }",
  "func ID ( ) : int { var ID : bool call ID ( 123 / - ( - ( 123 ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : bool var ID : bool return false / true + - ID } func ID ( ) { }",
  "func ID ( ) { return } func ID ( ID : bool ) { var ID : [ - false / ( - - true ) / false ] [ ] int }",
  "func ID ( ) : int { while true - ID [ ( ID ) ] [ 123 ] + true { } } func ID ( ) { }",
  "func ID ( ) : [ ] [ ID / - ID ( ID ( - 123 ) ) * - 123 ] int { }",
  "func ID ( ) { if ID ( ) + ( ( - ( - ( ID ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : [ - ( ( 123 ) ) ] [ ] int }",
  "func ID ( ID : [ 123 / ( ( false - - ID - ( ( true ) ) ) ) / ( - ID ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ false or ( ID ( ) / ID * ID ) ] int { }",
  "func ID ( ID : int , ID : bool , ID : int ) : bool { if - - - ID ( ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID ( ( - true * ( false ) ) ) ] int , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { ID ( ) = false / ( ( ( - ID ) ) ) / ( - 123 ) while ( - - ID ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] [ ] bool call ID ( ) ID ( ) [ false ] [ ID ] = false } func ID ( ) { }",
  "func ID ( ) { var ID : int } func ID ( ID : bool , ID : int ) { if - false { } call ID ( ) }",
  "func ID ( ID : bool , ID : bool ) : [ true * 123 - ( ( 123 ) ) ] int { }",
  "func ID ( ) : bool { var ID : [ ] [ ( - ID ( - false ) ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : int } func ID ( ID : bool ) { }",
  "func ID ( ) { var ID : bool var ID : int call ID ( ( ( ( 123 ) ) ) ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : int print 123 + ID [ ( - ID ) ] - ID while true { } }",
  "func ID ( ) { var ID : [ ] bool var ID : int } func ID ( ) : bool { print true }",
  "func ID ( ID : int , ID : [ ] int ) : int { var ID : [ ] bool print ID + ( ( - true ) ) - ( ( - ID ) ) } func ID ( ) { }",
  "func ID ( ) : [ 123 - - true / ID ( ) [ - false - ID ] * ID ] int { } func ID ( ) { }",
  "func ID ( ) : [ ] [ - ( - ( true / ID ( ) ) ) ] [ ] int { }",
  "func ID ( ID : [ ( false + ID ( ) [ false * ID / - ( - ID ) ] - ID ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : [ ] [ ] [ - ( ( ( - - - ID ) ) ) ] bool var ID : bool }",
  "func ID ( ) : int { var ID : bool print ID [ - ( false * ID / ( ( false ) ) ) ] [ 123 ] ID = ID }",
  "func ID ( ID : int , ID : int , ID : bool ) : bool { if ( 123 / - ( ID ) ) { } { } } func ID ( ) { }",
  "func ID ( ) : [ ( - - - ID ( ) / false * ID ( ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ( false * - ( ( - 123 ) ) * ( ID ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : bool var ID : int ID ( - ( ID ) ) = 123 }",
  "func ID ( ID : int , ID : [ ( true - - - ( ID ) + false ) ] [ ] bool ) { }",
  "func ID ( ) : bool { var ID : bool var ID : [ - - ID ( ) [ ID ] [ - true ] ] int }",
  "func ID ( ) : bool { var ID : bool var ID : int call ID ( ) } func ID ( ) { if 123 { } }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { var ID : bool call ID ( ) }",
  "func ID ( ) : int { var ID : int var ID : [ ( false / - ( - ( ID ) ) / true ) ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool return }",
  "func ID ( ID : [ ID [ ( ( ( - - ID ) ) ) ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool ) { var ID : int var ID : [ ID - ( ID ) + ID ] int } func ID ( ) { }",
  "func ID ( ) { ID [ true * ( 123 * - ID ( ) ) ] [ ID ] = ID } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int ) : int { var ID : [ ] [ ] int if - - ID { } }",
  "func ID ( ) { var ID : bool if - true * ( - ID ( 123 ) ) { } while false { } }",
  "func ID ( ID : [ false and ID * ( - true - - ID ) and ID ] [ ] int ) { }",
  "func ID ( ID : int , ID : int ) { call ID ( ) return ID ( ) [ ( - - ID ) ] }",
  "func ID ( ) : [ ( 123 * true ) - ID [ ( - ( ( ( 123 ) ) ) ) ] [ true ] ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : int return } func ID ( ID : [ ] [ true ] bool ) { }",
  "func ID ( ID : [ false * ( ( 123 * ID ( ) [ ( ( ID ) ) ] [ - ( 123 ) ] ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) : int { return ( ( ID ( ) [ ID ] [ - ID ] ) ) } func ID ( ) { }",
  "func ID ( ) { call ID ( 123 * ( 123 * ID ( 123 ) / - ( ID ) ) ) while ( ( 123 ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( true * ID ( ) or - ( ( ID ) ) ) ] int }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : [ ID ( ( ( true ) ) ) ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) : [ ( ID ( ) [ ( - ( false ) ) ] ) ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ID [ - ID ( false / false + ID - - ( ( - - 123 ) ) ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ( - ID ( - ( - ( false ) ) ) ) ] bool { }",
  "func ID ( ) { var ID : int return - ( ( - ( - false ) ) ) }",
  "func ID ( ) { var ID : [ ID ( 123 - - - - ( true ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : int ) { if 123 / ( ( 123 and ( ( ID ) ) and - false ) ) { } ID = - - true } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : [ ] bool { var ID : [ ] bool return } func ID ( ID : [ ] int ) { }",
  "func ID ( ) : bool { while ID ( ) [ ID [ - 123 ] [ ID ] ] { } }",
  "func ID ( ) : bool { ID ( true - ID ( false * - ID ) ) = - - false print true }",
  "func ID ( ID : int ) { var ID : [ ] [ true - ( ( - - ID ) ) ] [ ] bool }",
  "func ID ( ID : int ) { var ID : int var ID : int while - ID ( ) [ ID ] { } }",
  "func ID ( ) { var ID : [ ID ( true * true < - false ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { } func ID ( ID : bool ) : [ ( ID ( ) [ ( ( ID ) ) ] ) ] int { }",
  "func ID ( ID : bool , ID : [ 123 + false / ( ID [ - - false ] ) ] [ ] bool , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] bool { while - 123 >= 123 / ID [ ID ] { } print ( false ) }",
  "func ID ( ) : int { var ID : int var ID : bool while - ( ID [ ( - - - 123 ) ] [ ( ( true ) ) ] ) { } { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ false + ( true * ( ( ( ID ) ) ) * ( ID ) ) ] bool ) { }",
  "func ID ( ID : int ) { var ID : int if true / ID ( ) [ ( - - - - false ) ] [ ID ] * ID { } print ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ - ( - ID ( ID ) ) ] int ) { }",
  "func ID ( ID : [ ] int , ID : bool , ID : bool ) { var ID : int var ID : int return true / false }",
  "func ID ( ) { var ID : [ ] [ - ( ID ( - ( ( ID ) ) ) ) ] bool var ID : int }",
  "func ID ( ) : int { return ( ID / ( false == - false ) * ID ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : int print ID ( 123 * 123 + ID ) } func ID ( ) { }",
  "func ID ( ID : [ - ( 123 / ID ( ) [ ID ( ) ] [ 123 ] / ( ID ) ) ] int ) { }",
  "func ID ( ) { var ID : [ ] int var ID : bool return } func ID ( ID : bool ) { var ID : bool var ID : [ ] [ ] bool }",
  "func ID ( ID : int , ID : int ) : [ ( 123 / ID ( ) - ( 123 ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { var ID : int var ID : bool print - ID [ - false ] [ true ] ID = ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int ) : bool { return - - ID [ false ] [ 123 ] }",
  "func ID ( ID : bool , ID : int , ID : bool ) { return } func ID ( ID : bool , ID : bool ) : int { var ID : [ ] [ ] [ ] bool }",
  "func ID ( ID : bool ) : [ true == ID [ ( ID ) ] [ - - false ] ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int if - - - ( ID ( ID ) ) { } }",
  "func ID ( ID : [ ] bool , ID : bool ) : int { return } func ID ( ) : bool { call ID ( ) }",
  "func ID ( ) : bool { var ID : bool var ID : int print ( ID [ - - - false ] [ false ] ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool { var ID : int var ID : bool if 123 * ( - ID ) * true { } } }",
  "func ID ( ) : int { var ID : [ ID [ ID [ false ] [ ID ] ] ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : [ ] bool { while ( - - - false ) { } if ( ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ) { { print 123 + ID [ false * ( 123 ) ] { } } ID = ID } func ID ( ) { }",
  "func ID ( ID : [ ID [ ( ( false != false ) ) ] ] int ) { }",
  "func ID ( ID : int ) { var ID : int print ( ID - ID ( ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int if ( - - true * ID ) { } { } } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : [ - ID - ( - - ( 123 ) ) + ( ( - ( - true ) ) ) ] int var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - 123 * ( false / ( ( ID ) ) / ID ) ] int , ID : [ ] [ ] int ) { }",
  "func ID ( ) : int { var ID : [ ] int ID = ( ID / ID / ID ) } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int ) : int { var ID : [ ID ( ) [ - - ID ] ] int } func ID ( ) { }",
  "func ID ( ) { print 123 * ( ID / - - ( ( - ( false ) ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( - - ( - ( ID ) ) ) ] bool var ID : [ ] int } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ( ( ( - true ) ) ) ] [ ] int , ID : bool ) { }",
  "func ID ( ) : bool { var ID : int ID ( ID ( ) [ ( ID ) ] [ - 123 ] ) = ( true ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool if true + - ( ID ( ) ) - ( ID ) { } } func ID ( ) { }",
  "func ID ( ) { } func ID ( ) : bool { var ID : [ ] bool var ID : int while ID { } }",
  "func ID ( ) : [ ] int { var ID : int var ID : bool { { var ID : [ ] bool var ID : [ ] bool } if - ( ID ) { } } if - ( false ) { } }",
  "func ID ( ID : bool , ID : bool , ID : [ ] int ) { var ID : int var ID : int { var ID : [ ] bool var ID : int } { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] int }",
  "func ID ( ) { var ID : int print ID / ( - - ( - ID ) ) / ( ( true ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool { if true * ID ( ID ) { } } while ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] bool { if - false + ( 123 ) - ( false ) { } print true } }",
  "func ID ( ID : bool , ID : int , ID : int ) { call ID ( ) return }",
  "func ID ( ID : bool , ID : [ 123 / - ID [ - ( - ID ) ] / - true ] bool , ID : int ) { }",
  "func ID ( ) { var ID : [ ] [ ] [ - ID [ true and ( - ( - 123 ) ) and - 123 ] ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] int var ID : bool while ID ( ) [ true ] [ true ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ false * false * 123 < - 123 * - ( ID ) * ID ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ] [ - ( false / ( false ) / true ) ] [ ] bool , ID : bool ) { }",
  "func ID ( ) { while - ID ( ) [ ID ( ) / - 123 + 123 - ( ( false ) ) ] { } while - false { } } func ID ( ) { }",
  "func ID ( ) { var ID : int while ( - false + false / ( ( ID ) ) ) { } if false { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID ( ( ID [ ( ID ) ] ) ) ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ( true < - false - true ) ] [ ] bool }",
  "func ID ( ID : [ ] [ - ( - 123 + ID [ - ID ] ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] [ ( - 123 - true * - ID * 123 - - ID ) ] [ ] int { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] bool ) : int { var ID : bool var ID : [ ID ] [ ] bool }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : int call ID ( ) call ID ( true ) }",
  "func ID ( ) : bool { var ID : [ ] int var ID : int call ID ( ) }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { var ID : bool if ID [ ID ] [ ( ( ID ) ) ] { } }",
  "func ID ( ID : int , ID : [ false / ( ( 123 / ID / - true ) ) ] [ ] int ) { }",
  "func ID ( ID : bool , ID : [ ] [ - 123 * ( ( - ( ID ) ) ) ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : int { var ID : bool var ID : [ ( - ( ( ID ) ) ) ] bool } { } }",
  "func ID ( ID : [ ] [ - false + true / 123 * ID ( ) [ 123 ] + ID ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : [ true / ID [ - - true / - ( ( - - ( ID ) ) ) / ID ] [ ID ] ] [ ] [ ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : [ ( ( 123 * true / - - ID ( ) ) ) ] bool { }",
  "func ID ( ID : int ) { var ID : int ID ( ) [ ( true / - ID ) ] [ true ] = ( - - ( false ) ) }",
  "func ID ( ) { var ID : [ 123 / 123 and false + true - ( false ) ] bool } func ID ( ) { }",
  "func ID ( ) : [ - ( 123 + ( ID ( ) [ ID ] [ ID ] ) ) ] int { }",
  "func ID ( ) : int { if ( ( 123 and true * ID * ID ) ) { } } func ID ( ) { }",
  "func ID ( ) : [ ID ( ) [ ID ( ( - ID ) ) ] [ ID ] ] [ ] int { }",
  "func ID ( ID : int , ID : int ) : int { var ID : int var ID : int return } func ID ( ID : [ ID ] int ) { }",
  "func ID ( ID : int , ID : [ - false and true * ( ( ( true ) ) ) ] bool , ID : [ ] bool ) { }",
  "func ID ( ID : [ ID ( 123 * ( ( - 123 ) ) * ID ) ] [ ] bool ) { }",
  "func ID ( ) { if false / ( ID ( ) [ - false ] ) / - - - - ID { } if ( 123 ) { } }",
  "func ID ( ID : [ ] int , ID : [ - false / ( ID [ ID ] ) / - ( ( ( ( true ) ) ) ) ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : int ) { var ID : bool var ID : int while - ( ID ) { } } func ID ( ) { }",
  "func ID ( ) : int { if true * ( - true * ID ( ID ) / ID ) { } }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : [ - ID * false / ( true ) ] bool }",
  "func ID ( ) { var ID : [ 123 * false and ( 123 / ( ID ) * ( - true ) ) and ( 123 ) ] [ ] bool }",
  "func ID ( ID : int ) : [ ] bool { call ID ( ( ID ( ) ) ) call ID ( ) }",
  "func ID ( ) : int { var ID : bool var ID : [ true / ( ID ( - ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool call ID ( ( - - ( - ID ) ) ) while ID { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : [ ( ( ( ( - - - - - - ID ) ) ) ) ] [ ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool while ID ( ( ID ( ) ) ) { } { } }",
  "func ID ( ) { var ID : [ ] [ - true / - true ] [ ID ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { if true * ID [ ID ] [ - ( false ) ] * false { } ID = false } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool var ID : [ ] bool ID ( - ( 123 ) ) = ( true ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : int return ID ( ) [ ( ID ) ] [ - 123 ] }",
  "func ID ( ) { var ID : bool print ( ( ID ( ) [ - ( ID ) ] ) ) ID = - - - - 123 } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ( ID [ true * ( ( false ) ) * ID ] [ - ID ] ) ] int ) { }",
  "func ID ( ) : [ ID + ( - ID / - 123 - ID + ID ) ] bool { }",
  "func ID ( ID : int , ID : int ) : bool { var ID : int { var ID : [ ] [ ] bool while ( false ) { } { } } if ( ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int } func ID ( ) { var ID : bool var ID : bool }",
  "func ID ( ) { while ( false / true + true * 123 / ID ) { } print 123 } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : [ ] [ ( ( ( ID ) ) ) ] int { }",
  "func ID ( ) { print - true and true / ID ( ( ( - ( ID ) ) ) ) }",
  "func ID ( ) { var ID : int ID [ ( ( false / ( ID ) * ID ) ) ] [ ( ( 123 ) ) ] = ( false ) } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] int { var ID : bool var ID : [ false / ID + - 123 - ( ID ) ] int } func ID ( ) { }",
  "func ID ( ID : [ true * ( false - - ID / - false + ID ) * ( - - 123 ) ] bool ) { }",
  "func ID ( ID : [ ] [ ] [ ID [ false / - - ( true ) * - ( ( ID ) ) ] [ true ] ] [ ] [ ] bool ) { }",
  "func ID ( ID : int ) : int { { var ID : [ ] bool if - true / ( ( 123 ) ) * ( - ( ( - ( ID ) ) ) ) { } } } func ID ( ) { }",
  "func ID ( ID : bool ) : int { return }",
  "func ID ( ID : [ ( false / ( ID [ ID ] ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool if ID [ false + true ] { } } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ( false or false * - - ID or ( 123 ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : [ false * 123 + - - ID [ - ID / ( - ID ) / false ] [ false ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { print - - - ID / ( ID ) * - true } func ID ( ) { }",
  "func ID ( ID : [ ID ( ID [ 123 * true - - - true ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : [ ] bool call ID ( 123 * - 123 - ( - ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool } func ID ( ID : int , ID : int , ID : [ true + ( ( ( ID ) ) ) - ID ] int ) { }",
  "func ID ( ) { var ID : int var ID : [ ID [ ( ID ) ] [ ( - ID ) ] ] int } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool { if 123 * ( - false ) * ( 123 ) { } call ID ( ) } call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ( false * ( ID ) / - true ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ false * ID ( ) [ false * ( ID ) * ID ] [ - - - - false ] ] [ ] bool }",
  "func ID ( ID : bool ) : int { { } } func ID ( ) { var ID : [ ID ] int var ID : int }",
  "func ID ( ) { var ID : int var ID : [ - ( 123 / - false + - ID ) ] int }",
  "func ID ( ) { var ID : bool var ID : [ ] int return } func ID ( ) { var ID : int var ID : int call ID ( ) }",
  "func ID ( ) : [ - ID [ ( ID ( ID ) ) ] ] bool { } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool ID ( ) = ID ( ( ( false ) ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ID ( ) [ ( ID ( ) ) ] [ ( ( 123 ) ) ] ] [ ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID [ ( ID ( false ) ) ] [ ( - ( - false ) ) ] ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : int ) : int { call ID ( ( ( ID ) ) ) }",
  "func ID ( ) { var ID : int } func ID ( ID : [ 123 + true / false / - 123 + - ( false ) ] bool ) { }",
  "func ID ( ID : [ true * 123 != - ( false * false / ID ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { ID ( ) = ID * ( - false * ( ID ) ) * ID if ID { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ] [ ] int ) : [ ( ID ( ) ) ] [ ] [ ] bool { }",
  "func ID ( ID : bool , ID : [ ] bool ) : bool { var ID : int var ID : int ID ( false ) = ( 123 ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) { } func ID ( ) : int { if - ( - ( ID ) ) { } call ID ( ) }",
  "func ID ( ) { if - ID [ ID ( true - - ID ) ] { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ( true / ID ( ( false ) ) * 123 ) ] [ ] int var ID : int }",
  "func ID ( ) { var ID : int var ID : int print ( - 123 + ID ( ) - 123 ) if true { } }",
  "func ID ( ID : int , ID : bool , ID : bool ) : [ ] bool { { } { ID ( true ) = ID } } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : [ ID ( ID ( ( ID ) ) ) ] int }",
  "func ID ( ID : bool , ID : [ ] bool , ID : int ) { var ID : bool var ID : [ ] bool { var ID : int } if ID { } } func ID ( ) { }",
  "func ID ( ) : [ ( - ID [ true / ID [ ( ID ) ] [ ( ID ) ] ] ) ] int { }",
  "func ID ( ) { } func ID ( ID : bool , ID : [ ] int , ID : int ) { }",
  "func ID ( ID : int , ID : [ ] int ) { { var ID : [ ] bool var ID : bool call ID ( ) } }",
  "func ID ( ) : [ false - - - ( - - ID ( ) [ ID ] [ - 123 ] ) - ID ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : bool return } func ID ( ID : [ ID ( ( true ) ) ] bool ) { }",
  "func ID ( ID : bool , ID : [ 123 * ID [ 123 + false / true + ID ] [ ID ] ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( - ID ( ID + - ( - ID ) + ( - 123 ) ) ) call ID ( ) }",
  "func ID ( ) { if 123 - ( true * ID ( ) + ID - ( - ID ) ) + false { } print false } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : [ ID ( ) / ( ( true ) ) ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : int print - ( - true ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool call ID ( ) call ID ( - ( 123 ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ( ID ( ) * ( ID ) / - - 123 ) ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID [ ID ( ) [ 123 ] [ ID ] ] ] bool ) { }",
  "func ID ( ID : [ true * - true / true and ( - ID ( ) ) ] bool ) { }",
  "func ID ( ID : [ ] bool , ID : int ) { var ID : [ ] [ ( ID ) ] [ ] [ ] int var ID : [ ] int }",
  "func ID ( ID : bool , ID : int , ID : [ ID ( ) / ID [ ID ] [ - false ] / false ] int ) { }",
  "func ID ( ID : int , ID : [ false * ( ID ( ) [ 123 ] [ 123 ] ) ] bool , ID : bool ) { }",
  "func ID ( ID : bool , ID : [ - ( ID ( ID / ID / - ID ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - ( 123 + 123 / ID ( ( ID ) ) + - 123 ) ] bool , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] bool }",
  "func ID ( ) { var ID : bool var ID : bool print ID [ false and true ] [ ID ] if ID { } }",
  "func ID ( ID : int ) : bool { var ID : [ ( ID ( ID ) ) ] int } func ID ( ) { }",
  "func ID ( ) : [ 123 / - ( ID ( ( - 123 ) ) ) ] int { }",
  "func ID ( ) { var ID : int ID [ ID * ( false / ( ID ) ) ] = ( 123 ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ( ID / ( false * ID * true ) / - ( - ( ( - - ID ) ) ) ) ] [ ] int , ID : [ ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID ( ( true / ( true ) / 123 ) ) ] bool ) { }",
  "func ID ( ID : [ ID [ ID ( true < - - - false ) ] [ ID ] ] bool ) { }",
  "func ID ( ID : int ) : bool { var ID : bool return - false / false / ID ( ID ) }",
  "func ID ( ID : [ ( false * 123 + ( ID ( true ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool { var ID : bool } while ID [ 123 ] [ - ( ID ) ] { } }",
  "func ID ( ) : [ ( ID [ ID [ ID ] ] ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ID [ false + - - ( - ( true ) ) ] [ ID ] ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { } func ID ( ID : int , ID : bool , ID : [ ID ] int ) { }",
  "func ID ( ) { var ID : bool var ID : int return - - ID ( ID * false / - ( ( ( - ID ) ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int return - - 123 * ( - - ID ) }",
  "func ID ( ) { var ID : int { var ID : bool var ID : [ ( ID [ ( ( - ID ) ) ] ) ] int } while ( ID ) { } } func ID ( ) { }",
  "func ID ( ) { print ( ( - ( 123 / ID ) ) ) }",
  "func ID ( ) { var ID : int print ID * - true and ( true ) and 123 } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : [ - ID ( ) [ ( ID ) ] [ ID ] ] int } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ID ( true + ID ( ) - false ) ] bool }",
  "func ID ( ID : bool , ID : bool , ID : [ ] int ) { var ID : bool var ID : int while ( ID ) { } }",
  "func ID ( ) : [ ] int { var ID : bool call ID ( - - ( false * ID ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool if false + ( true < - 123 ) { } call ID ( ) }",
  "func ID ( ID : [ ID ( ID [ ID ( ( ( 123 ) ) ) ] [ false ] ) ] int ) { }",
  "func ID ( ID : [ ID ( true / - ( true / true / 123 ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ 123 + false + ID <= true / ( ID ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) { var ID : [ ] int } func ID ( ID : [ ( ID ) ] int ) { }",
  "func ID ( ) { var ID : int var ID : bool print true / - true and ( - - - ID ) }",
  "func ID ( ID : bool , ID : int , ID : int ) : int { var ID : int return ID / ID * ( ID ) }",
  "func ID ( ID : int , ID : int ) { } func ID ( ID : bool ) { if true - - - true - - ID { } }",
  "func ID ( ID : int ) : bool { { ID [ ID [ ( ID ) ] [ - ID ] ] = - 123 ID = 123 } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] int call ID ( ( ID [ 123 ] ) ) { } }",
  "func ID ( ) : [ 123 * 123 - ( ID ( ) [ - - ID ] ) ] int { }",
  "func ID ( ) : [ false / true == ( ( ( 123 ) ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : int var ID : int print ( ID ( ) ) }",
  "func ID ( ) : bool { var ID : int var ID : bool { var ID : [ ( - true ) ] bool } ID = ( - true ) }",
  "func ID ( ) { var ID : bool ID [ - true * false * 123 or ( ID ) ] [ - ID ] = 123 } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( ID ( - 123 * ID / ID ) ) ] bool }",
  "func ID ( ) { var ID : int if - ID ( ) / true / true and - ID and 123 { } print 123 } func ID ( ) { }",
  "func ID ( ) { if ( ( ID ( ID ) ) ) { } }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ID : [ - true + ( ( ( false ) ) ) - ( ID ) ] int } func ID ( ) { }",
  "func ID ( ID : [ 123 / false - ( true * ID ( ) / ID ) ] bool ) { }",
  "func ID ( ID : bool , ID : [ ID - ( ( false / ID * ( false ) ) ) + ( ( ID ) ) ] [ ] bool ) { }",
  "func ID ( ) : [ ] int { var ID : [ ID [ ID [ 123 ] [ ID ] ] [ ( true ) ] ] int var ID : [ ] [ ] bool }",
  "func ID ( ) { return ID [ ( false - 123 * true - ID ) ] } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { var ID : [ ( ID - false ) ] bool }",
  "func ID ( ID : bool , ID : bool ) { print - ( ( ( false ) ) ) } func ID ( ) { }",
  "func ID ( ) : [ ] int { if ( - ID [ - ID ] [ true ] ) { } ID = 123 } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] [ ID / ( 123 / 123 ) * ID ] [ ] int var ID : int }",
  "func ID ( ) : int { return false + true / - ( false and 123 ) / ID }",
  "func ID ( ID : bool ) { ID [ ( ID ( false ) ) ] [ false ] = ( 123 ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ 123 / ( ID ( ) [ 123 ] [ - - - true ] ) ] int }",
  "func ID ( ID : int , ID : [ 123 and - - ID ( ) [ ID ] [ true ] and ID ] int ) { }",
  "func ID ( ID : bool , ID : [ 123 and ID [ ID ( ) - ( 123 ) ] and ( ( ID ) ) ] [ ] [ ] bool ) { }",
  "func ID ( ID : [ ] int , ID : bool ) : bool { var ID : [ ( ( - ID ) ) ] int var ID : bool }",
  "func ID ( ) : [ ID ( ID ( false / - ID / ID ) ) ] int { }",
  "func ID ( ID : bool ) : int { var ID : [ false + true * ID ( ) - - false ] [ ] int }",
  "func ID ( ID : int , ID : [ - true < true - ( - ( - false ) ) ] [ ] int ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ] bool return ( - - true ) }",
  "func ID ( ID : bool , ID : int ) : bool { var ID : int call ID ( ID ( ( 123 ) ) ) } func ID ( ) { }",
  "func ID ( ) { if ( true / ( ID ( ID ) ) ) { } }",
  "func ID ( ) { { ID = 123 * ( ( - ID ) ) * true } }",
  "func ID ( ID : int ) : int { var ID : [ ] [ ] int var ID : [ ( - ID ) ] int } func ID ( ) { }",
  "func ID ( ID : int ) : bool { return } func ID ( ID : bool , ID : bool ) { print ID call ID ( ) }",
  "func ID ( ) { var ID : bool ID ( ) = ID ( ID / true * false ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int if ID [ - - 123 * - ID * 123 ] { } } func ID ( ) { }",
  "func ID ( ) { while ( ( ( ID [ 123 ] ) ) ) { } } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : [ ] [ ] int var ID : bool return ( ID ) } func ID ( ) { }",
  "func ID ( ID : [ true / ID [ - false / ID [ ( ( - ID ) ) ] / ID ] [ ID ] ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool print 123 * ID ( ) [ false * ID / ( true ) ] / - - ID }",
  "func ID ( ) : bool { var ID : bool ID ( ) [ - true * 123 * ( - ID ) ] = ID }",
  "func ID ( ID : int , ID : int , ID : [ - ID ( 123 / ID ( ) ) ] [ ] bool ) { }",
  "func ID ( ) : [ 123 * - ( ( ID [ - - ID ] [ - - - - ID ] ) ) ] [ ] [ ] [ ] [ ] bool { }",
  "func ID ( ID : bool ) { ID ( ) = ( ( - - ( - ( ID ) ) ) ) }",
  "func ID ( ID : int , ID : int ) : int { if ( ID [ false ] [ ID ] ) { } print ID } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : [ ] bool print ID [ - - ( ID ) ] [ false ] while - ID { } }",
  "func ID ( ) { var ID : bool var ID : bool print - - ( false * - - 123 / - ( - ID ) ) ID = ID } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - - false * ( ID ( 123 ) ) / 123 ] int ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) { call ID ( - - 123 < 123 ) ID = ID } func ID ( ) { }",
  "func ID ( ) { print - ( true * - - ( ( - - ( ID ) ) ) ) print ( ID ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : [ ID [ ID ( false ) ] ] int }",
  "func ID ( ) { print - true / ID [ ( ( 123 ) ) ] / ( ID ) if true { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ( ID ( ) [ ( ( - - - ID ) ) ] ) ] bool }",
  "func ID ( ) : int { if ID ( ) - false and false / ID / ID and - ( ID ) { } call ID ( ) }",
  "func ID ( ID : bool , ID : int ) : bool { var ID : bool var ID : [ ID [ ID ] ] [ ] [ ] bool }",
  "func ID ( ID : int , ID : bool , ID : int ) : int { var ID : int }",
  "func ID ( ID : bool ) : int { return } func ID ( ) { return }",
  "func ID ( ) { var ID : int var ID : [ ] int { ID ( ) = - 123 / - ( ( true ) ) / - ( - ( - false ) ) } print 123 }",
  "func ID ( ID : bool ) { var ID : bool call ID ( 123 / - ID ( ( 123 ) ) ) }",
  "func ID ( ) { call ID ( ID ( ) [ ID [ 123 ] [ ( ID ) ] ] [ ID ] ) while ID { } }",
  "func ID ( ) { var ID : int var ID : int }",
  "func ID ( ) : [ ( 123 * ( 123 * - true * - true ) ) ] bool { }",
  "func ID ( ) : [ ( ID [ ID ( ID ) ] [ ID ] ) ] [ ] int { }",
  "func ID ( ID : int , ID : [ - ( - ID - 123 * 123 / ( ( ID ) ) ) ] [ ] bool , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) { while 123 / - ID [ ID [ ( false ) ] [ ID ] ] [ ( ID ) ] { } print 123 } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : int { var ID : int print true / - - - false ID = ( false ) }",
  "func ID ( ) : bool { call ID ( ( ID == ( 123 ) ) ) }",
  "func ID ( ID : [ ] [ ] int , ID : bool , ID : bool ) : [ ID ( ID ) ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool var ID : int { var ID : int call ID ( 123 ) print ID } } func ID ( ) { }",
  "func ID ( ) : bool { if ID / - false / ID [ true * ( ( true ) ) ] [ ID ] { } ID = ( ( - ( ( true ) ) ) ) } func ID ( ) { }",
  "func ID ( ) : int { ID = - ID ( ) / - ID ( ID ) * ( - false ) { } }",
  "func ID ( ID : int , ID : bool , ID : [ ] int ) : [ - - ID ( 123 ) ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ] bool ) : int { print false - true / - true + 123 } func ID ( ) { }",
  "func ID ( ) { var ID : bool ID [ - ID [ ID ( ) [ 123 ] ] [ ID ] ] = ( 123 ) while ID { } }",
  "func ID ( ID : [ ] bool , ID : int , ID : bool ) { var ID : [ ] int if - ID { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int { } call ID ( true + ID [ 123 ] ) }",
  "func ID ( ID : int ) : int { var ID : int } func ID ( ID : int ) : [ ( - false ) ] bool { }",
  "func ID ( ID : [ ] int , ID : [ true * ( - ID ( ( ( ( - ( ( ( - - ID ) ) ) ) ) ) ) ) / false ] int ) { } func ID ( ) { }",
  "func ID ( ) { if ( 123 <= false / true / 123 - ( - - - ( ( - 123 ) ) ) + ( ID ) ) { } }",
  "func ID ( ID : bool , ID : [ - 123 + - ID [ - 123 / ID / ( ID ) ] - true ] [ ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int , ID : bool ) : int { ID [ ID ( ) ] [ - true ] = false }",
  "func ID ( ) : bool { return ( false * ID [ ID * ( - ID ) / true ] [ ( - ( 123 ) ) ] / true ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool ) { while ID [ ID ( ) [ - ID ] [ ( ID ) ] ] { } ID = ID }",
  "func ID ( ID : int ) { var ID : [ false / ID + ID ( ) [ - ( false ) ] + ( ID ) ] bool var ID : bool }",
  "func ID ( ID : int , ID : [ ] bool , ID : bool ) { var ID : bool var ID : int ID [ false ] [ false ] = 123 ID = - - ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ] int ) { }",
  "func ID ( ID : [ true + ID [ ID ( - ID ) ] [ ( ( 123 ) ) ] ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : [ ] [ ] bool while ID ( ) [ ID ] [ ID ] { } call ID ( ) }",
  "func ID ( ) : int { var ID : bool var ID : [ true * - - ( ( ID ) ) ] [ ] [ ] bool }",
  "func ID ( ID : bool ) { var ID : int var ID : bool return - - false and false } func ID ( ) { }",
  "func ID ( ) { var ID : [ - - - ( ID [ ID ] ) ] int var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ - - ID [ ( ID ( ( 123 ) ) ) ] [ false ] ] int ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : [ 123 / ( 123 / ( ID ) ) ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) : bool { var ID : [ ] bool return ( ( ID ) ) }",
  "func ID ( ID : [ true / 123 * ( ( ID ( 123 ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ID ( false and ID ) ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( true * - ( ID / ID * ID ) / true ) ] bool ) { }",
  "func ID ( ) { var ID : bool var ID : [ ( - ID * ( ( - 123 ) ) ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : int var ID : int call ID ( ) return }",
  "func ID ( ID : [ ] [ ] [ ( false / false * ID ( ) [ ID ] ) ] [ ] [ ] int ) { }",
  "func ID ( ID : bool ) { } func ID ( ) { print ID ( ) [ ID ] [ - ( ID ) ] }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : [ ] bool { call ID ( - 123 ) call ID ( ) } print ID } func ID ( ) { }",
  "func ID ( ) { var ID : bool print ( ID [ false * 123 ] [ false ] ) while - true { } } func ID ( ) { }",
  "func ID ( ) : [ - 123 < ID ( ) [ false / - - ( - ID ) ] [ 123 ] ] bool { }",
  "func ID ( ID : int ) { var ID : int while ID ( - - false * - 123 ) { } if - ID { } }",
  "func ID ( ID : bool ) { var ID : int { var ID : bool { var ID : bool var ID : int } return - - ( ( ID ) ) } if - ID { } }",
  "func ID ( ) { var ID : [ ] [ ] int var ID : bool { ID ( true ) = ( - ( ( 123 ) ) ) } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int print ID ( ID ( ) [ - ( true ) ] ) if ( ( - - true ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : [ - true - - - - ( false ) + - ID ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ( true - ID [ - 123 ] [ ( - - false ) ] + ID ) ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : bool { var ID : int { var ID : int var ID : int } call ID ( ) } func ID ( ) { }",
  "func ID ( ) { return } func ID ( ) { var ID : [ ] bool var ID : int while - - ( 123 ) { } }",
  "func ID ( ID : bool , ID : int ) { var ID : [ 123 * true or - false or ID ] bool } func ID ( ) { }",
  "func ID ( ) : [ ID / 123 * 123 + false * ID * ID ( ) ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ID ( ID [ ( - true ) ] [ false ] ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : [ 123 or ID * ID [ ID ( ) ] [ ( ID ) ] / 123 or 123 ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int while true * ( ID ( ) [ ( - true ) ] [ ( - 123 ) ] ) { } call ID ( ) }",
  "func ID ( ID : [ ID [ - 123 * - - ID ( - ID ) ] [ - false ] ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] [ ] [ ] int ) : bool { var ID : int ID [ ID ] [ - 123 ] = true while false { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : int print ID ( - ID ) if ( true ) { } }",
  "func ID ( ID : [ ] bool , ID : bool ) { call ID ( ) ID [ - - 123 ] [ true ] = ( ID ) }",
  "func ID ( ) { var ID : int var ID : bool print ID ( ID ( ID ) ) }",
  "func ID ( ID : int , ID : bool ) { call ID ( ) return } func ID ( ID : [ ] bool ) : bool { }",
  "func ID ( ID : bool , ID : [ ] int ) { var ID : int var ID : int return - - ( true ) }",
  "func ID ( ) { ID ( - 123 >= ID [ false / false / false ] [ ID ] ) = true print false } func ID ( ) { }",
  "func ID ( ) { return ( ID ( ) [ - ( ID ) ] ) }",
  "func ID ( ) : int { } func ID ( ) : [ ] [ ] [ ( ID ) ] [ ] [ ] bool { }",
  "func ID ( ID : int , ID : [ ] int , ID : [ ( ID ( ( 123 ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int { ID = ID / true / ID } }",
  "func ID ( ) { var ID : bool } func ID ( ) { { call ID ( 123 / - ( ID ) ) } }",
  "func ID ( ) : int { var ID : int var ID : int if 123 / - ( true * ID ) { } while ( ( ( - 123 ) ) ) { } }",
  "func ID ( ) { var ID : [ true * 123 / true - ID * ( ID ) ] bool }",
  "func ID ( ID : int , ID : [ ] int , ID : [ 123 * ID [ ID ] [ ID ] / ID ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ( 123 / ID ( ) + ID [ ( - 123 ) ] ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { var ID : bool call ID ( ) return ( false ) }",
  "func ID ( ID : [ ( ID [ ID ( ) [ - ( ID ) ] ] ) ] [ ] int ) { }",
  "func ID ( ID : [ ] bool ) : [ ( ( 123 / ( ( ( ( ID ) ) ) ) * - ( ( false ) ) ) ) ] int { }",
  "func ID ( ID : bool ) : bool { var ID : bool return }",
  "func ID ( ID : int , ID : [ ] [ false * - true / ID ( - - true ) ] [ ] bool , ID : bool ) { }",
  "func ID ( ID : bool , ID : [ ] int , ID : [ ] [ ( ( - - - ID ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ( - ID ( ) and ID ( ) [ ID ] ) ] bool ) { }",
  "func ID ( ) : [ ( ID ( ( - ( ID ) ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : [ - 123 * true * ID [ true / false / ( true ) ] [ ID ] ] bool }",
  "func ID ( ID : [ ID ( ) [ ( ( ID ( ) ) ) ] [ true ] ] [ ] bool ) { }",
  "func ID ( ) { var ID : [ true + ID ( - - ( true ) ) ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] int call ID ( ) }",
  "func ID ( ID : [ ] bool ) : bool { var ID : [ ] [ ID [ ID ] [ 123 ] ] int } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : int { var ID : bool var ID : [ ID ( - - - ID ) ] int } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] int { return } func ID ( ID : bool , ID : int ) { ID ( ) = ID }",
  "func ID ( ID : int , ID : [ ] int , ID : int ) : bool { var ID : [ ] [ 123 * ( ID ) * ID ] bool } func ID ( ) { }",
  "func ID ( ) : [ ID ( - ( ( ID [ ID ] [ ( false ) ] ) ) ) ] int { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : [ ] bool { var ID : [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool while ID ( - - ID [ true ] ) { } } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : [ ] int var ID : int ID [ true * ID / 123 ] = true ID = - false }",
  "func ID ( ) : bool { var ID : int } func ID ( ) : [ ] int { call ID ( ) print ( true ) }",
  "func ID ( ID : int , ID : bool ) : int { } func ID ( ID : [ - ( true ) ] [ ] [ ] int ) { }",
  "func ID ( ) : [ - ( ID [ ( - ID ) ] ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int , ID : bool ) : int { return - - false / ( ID ) / - ID }",
  "func ID ( ) { var ID : bool if - 123 * false or ID [ 123 ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int while - ID ( ) / false - ( - ID ) { } }",
  "func ID ( ID : bool , ID : int , ID : bool ) { if true * - - - - ID ( ) / ID { } { } }",
  "func ID ( ID : int ) { call ID ( ID ( true / true == - - ( ( - false ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : [ - - - - ( ID ( ) / - - - - ( ID ) ) ] int ) { }",
  "func ID ( ID : [ ] [ ] [ ] [ ( true or false or - false ) ] [ ] int ) { }",
  "func ID ( ) : [ - ID * true * false - ( ( 123 ) ) - - ID ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : [ ] bool return } func ID ( ) : [ ] [ ID ] int { }",
  "func ID ( ID : bool , ID : int , ID : bool ) : int { return }",
  "func ID ( ID : [ ] int ) : bool { var ID : int var ID : bool print - ID ( true ) }",
  "func ID ( ) { var ID : int var ID : bool } func ID ( ID : bool , ID : int , ID : int ) : [ 123 ] bool { }",
  "func ID ( ) { var ID : [ 123 * 123 / ID ( ( false ) ) ] bool var ID : int }",
  "func ID ( ) : bool { var ID : int while true * ID ( ) [ ( - 123 ) ] { } } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : int var ID : int if 123 / true * - ID { } if ( ID ) { } }",
  "func ID ( ID : [ - false / ID == - ID ( - true ) ] bool ) { }",
  "func ID ( ID : bool ) { var ID : [ ] int return }",
  "func ID ( ID : bool , ID : int ) { var ID : bool var ID : int return }",
  "func ID ( ) : bool { print - ( ID + - ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int ID ( true * - false / ( - ( ( ID ) ) ) ) = ID }",
  "func ID ( ) { var ID : int while true * true * ( - ( 123 ) ) { } print - - - ( true ) }",
  "func ID ( ) { var ID : bool var ID : [ - ( ( ( false ) ) ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ] bool return } func ID ( ) { var ID : [ ( false ) ] int var ID : bool }",
  "func ID ( ) { var ID : bool var ID : bool return ( ID ( ( - false ) ) ) } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] int { }",
  "func ID ( ID : bool ) : int { return } func ID ( ) : int { { var ID : int } ID = ID }",
  "func ID ( ) { var ID : [ ] bool var ID : bool return 123 >= 123 * ( - - - ( ( true ) ) ) * ID } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : bool if 123 * - 123 * ( ID ) { } print ID } func ID ( ) { }",
  "func ID ( ) : bool { while - 123 / - true * - ( ID ( ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int return ID [ - ID + ( ID ) + ( - ( true ) ) ] [ true ] } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : int var ID : [ ( ( - ( ( true ) ) ) ) ] int } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool var ID : [ ] bool call ID ( ) { var ID : int var ID : [ ] int } }",
  "func ID ( ID : bool , ID : bool ) : bool { var ID : [ ( - ( ID ) ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int ) { while - - ID [ 123 ] { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ - - ID ( ID / ( - ID ) / false ) ] [ ] int ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool var ID : bool } func ID ( ) : bool { var ID : bool return }",
  "func ID ( ID : [ ( - - 123 > ( - ( ( ( false ) ) ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ true / - - ( - - ( - false ) ) * ID ] bool ) { }",
  "func ID ( ) : [ ] [ ] [ ] int { var ID : int print 123 / - true - false - 123 } func ID ( ) { }",
  "func ID ( ) { var ID : [ 123 + true * ( - ID ( ( true ) ) ) ] bool }",
  "func ID ( ) { var ID : [ ] int if ( - ID / ( false ) * ( ID ) ) { } }",
  "func ID ( ) : int { var ID : [ ID [ true - ( ID ) ] [ ID ] ] [ ] [ ] bool var ID : int }",
  "func ID ( ) : [ ID [ ID ( ( false * ( ID ) * ( ( - - ( - false ) ) ) ) ) ] ] bool { }",
  "func ID ( ) { var ID : int var ID : [ false * - ( false / ID * - - true ) / 123 ] int } func ID ( ) { }",
  "func ID ( ) : [ ] [ ID [ - - - ID ( 123 ) ] [ - ID ] ] int { } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ 123 * ID [ - - - ID ] [ ID ] / ID ] bool }",
  "func ID ( ID : [ ] int , ID : bool , ID : [ ] [ ] bool ) { var ID : [ ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] bool { } func ID ( ) : bool { var ID : bool print ( false ) }",
  "func ID ( ID : int ) { var ID : bool var ID : bool }",
  "func ID ( ) : int { var ID : int var ID : int ID [ ID [ true ] ] [ true ] = - 123 print ID } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : int if ( ( false ) ) { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool var ID : int ID ( ID [ - - ID ] ) = true } func ID ( ) { }",
  "func ID ( ) : int { while ( - ( - true ) / true ) { } if ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool print 123 - - - ID ( - ID ) if ( false ) { } }",
  "func ID ( ) { while ID ( ( ( ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { ID [ ID ( - ( ( false ) ) ) ] [ ID ] = - - 123 print true }",
  "func ID ( ) : int { if ID [ ( ( ID ) ) ] { } }",
  "func ID ( ) : bool { { while ID [ - - ID ( ) [ - ( false ) ] ] [ ( ID ) ] { } } } func ID ( ) { }",
  "func ID ( ID : int ) : int { ID = - ( ID [ ID ] ) print true } func ID ( ) { }",
  "func ID ( ) { { var ID : bool var ID : bool while ( ( 123 ) ) { } } call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ 123 / - ( - ( ID ) ) ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : bool { return } func ID ( ID : [ - - - 123 ] bool ) { }",
  "func ID ( ID : int , ID : int ) { var ID : bool call ID ( true + ID ( ) ) } func ID ( ) { }",
  "func ID ( ID : [ ( ID [ ( ID ( ( - ( ID ) ) ) ) ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ - ID ( ( - ( ID ) ) ) ] bool ) { }",
  "func ID ( ID : bool , ID : [ ] [ - ( true - - ID [ 123 ] [ ID ] - true ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID : int return ID ( ) * ID ( ID ) / ( ( ID ) ) }",
  "func ID ( ID : int ) { var ID : int var ID : [ 123 < ID ( ) / false * ( true ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool if 123 > ( - ID * 123 / ID ) { } }",
  "func ID ( ID : [ - - ID [ ( ( - ID ) ) ] ] bool ) { }",
  "func ID ( ) { var ID : [ ] [ ID ( ( ( ID ) ) ) ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : int { var ID : [ true * ID [ - ID ] [ ( ( - ID ) ) ] ] [ ] int }",
  "func ID ( ID : int , ID : [ ( ID ( ID - ID - ID ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ true >= ( false + ( - ID ) - ( - - ID ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ] [ ] [ ] int ) : bool { var ID : bool ID = ( true ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool if ( ( - ID ( ) [ ( 123 ) ] [ ID ] ) ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : int while - - 123 / - 123 + 123 - true { } } func ID ( ) { }",
  "func ID ( ID : int ) : bool { } func ID ( ) : int { var ID : bool var ID : bool if ID { } }",
  "func ID ( ) { var ID : bool while ID [ ( - ( - - ID ) ) ] { } ID = ID } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ true - false >= ID ( ) [ - ID ] [ ID ] ] [ ] int , ID : [ ] int ) { }",
  "func ID ( ID : int , ID : [ false * ( false - - false + - ID ) * - true ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : int ) : [ ( - ( ( false + true + ( - false ) ) ) ) ] bool { }",
  "func ID ( ) : int { var ID : [ ] [ ] [ ] bool }",
  "func ID ( ) { { var ID : int ID ( ) = ( - ( ( ID ) ) ) } }",
  "func ID ( ) { var ID : int var ID : int { var ID : int var ID : bool call ID ( ) while false { } } if - ID { } }",
  "func ID ( ) : [ ] [ ] bool { var ID : int return }",
  "func ID ( ) : [ ] bool { var ID : bool var ID : int if - - ( ID ) { } } func ID ( ) { }",
  "func ID ( ) { ID ( ) [ 123 / - ID [ - ID ] [ true ] ] [ 123 ] = ID }",
  "func ID ( ID : [ ] [ ID [ ( ( ID ) ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ false * ( ID ( ) * ID / true ) * ( - ( ( ( - ID ) ) ) ) ] int { }",
  "func ID ( ID : bool ) : [ ] [ ( ID [ false * ID ] ) ] [ ] bool { }",
  "func ID ( ID : [ ] [ - ID / ID / false + true + ( ( ID ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ] [ ] int var ID : int { var ID : bool return } if - - ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( ID [ 123 / 123 ] [ ID ] ) ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : int if ID ( ) != 123 + 123 { } if ID { } } func ID ( ) { }",
  "func ID ( ID : int ) { while ID ( ( ID ( ) [ ID ] [ - - - ID ] ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : bool ID ( 123 >= ( - ( ( ID ) ) ) ) = - ( 123 ) { } }",
  "func ID ( ID : bool ) : bool { while false * ID [ ( - ID ) ] [ false ] { } }",
  "func ID ( ) : bool { var ID : [ ] [ ] int { return } print false * ( false ) }",
  "func ID ( ID : int ) { return false / ID ( ) / false <= - ID } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int return } func ID ( ID : int ) { { return ( true ) } while - - ( ( 123 ) ) { } }",
  "func ID ( ID : [ - ( true or - - ( ID ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : [ false * 123 - false / ( ( true ) ) / - - ID ] [ ] [ ] bool }",
  "func ID ( ID : int , ID : [ ] int , ID : bool ) : [ 123 and - false and false ] int { }",
  "func ID ( ID : int , ID : [ ] int ) { while 123 != 123 or - true { } }",
  "func ID ( ) : int { var ID : [ ( ID [ ID * ( ID ) ] ) ] [ ] [ ] int }",
  "func ID ( ID : [ ] bool , ID : bool , ID : int ) : int { if 123 / true * false { } ID = - ( ( false ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : int if - - true / - - ID [ true ] [ - 123 ] / 123 { } while ( ( ( - ( ID ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int ) { var ID : bool var ID : bool return } func ID ( ) { var ID : [ ] [ ] [ ] int }",
  "func ID ( ) { call ID ( false * 123 * - true - ( ( ID ) ) + - ( - true ) ) print true }",
  "func ID ( ) : int { var ID : [ ] [ ] bool var ID : [ ] bool ID ( ID ) = false } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - false * ID [ 123 / ID [ - true ] / true ] [ - ID ] / - ID ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { var ID : int var ID : int while true + ID ( ) + - true { } }",
  "func ID ( ) : int { var ID : [ ID ( ) [ ID [ ( - - true ) ] ] ] [ ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) : int { var ID : int print ( ID [ ( false ) ] ) } func ID ( ) { }",
  "func ID ( ) { var ID : int while - false * ( ( 123 / ( ID ) / false ) ) * ( ( ( ID ) ) ) { } ID = 123 } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) : [ ID ( ) [ ID [ false ] [ ID ] ] ] bool { }",
  "func ID ( ID : [ - ( ID [ ( ID ( ) ) ] [ 123 ] ) ] int ) { }",
  "func ID ( ) { var ID : [ false / ( true and true / ( ( ID ) ) / 123 ) * ID ] [ ] int var ID : [ ] [ ] [ ] [ ] int }",
  "func ID ( ID : bool ) { var ID : [ ] bool ID ( ) = 123 - - - ( 123 ) }",
  "func ID ( ID : [ false * true + true * - - ID ( ( 123 ) ) * - ( ID ) + ID ] int ) { }",
  "func ID ( ) { var ID : [ ( ID ( ) - false * - ID + ( true ) ) ] int var ID : bool } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int ) { return ( ID ( ) [ ID ] [ ID ] ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( false * - ID [ true ] [ ( ( false ) ) ] ) ] int var ID : bool }",
  "func ID ( ) { while ( ( ID [ true < 123 ] [ - - ID ] ) ) { } print - ( ID ) }",
  "func ID ( ID : int , ID : bool ) { var ID : bool var ID : [ ] int if - 123 - ID - - 123 { } } func ID ( ) { }",
  "func ID ( ) { if false * false * 123 and - ID [ ID ] [ - true ] { } if ID { } }",
  "func ID ( ) : int { var ID : bool var ID : bool print 123 * 123 - - false * ( ID ) - ( - ID ) }",
  "func ID ( ID : [ true * - true / - ID [ - - - ID ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ID ( ) / ID ( ( ( - ( - ID ) ) ) ) / ( ID ) ] [ ] [ ] int ) { }",
  "func ID ( ) : int { var ID : bool return } func ID ( ID : int , ID : [ ( ID ) ] bool , ID : [ ] bool ) { }",
  "func ID ( ID : int , ID : int ) { var ID : bool }",
  "func ID ( ID : [ ] [ true * ID + ( ( ( ID ) ) ) - ID ] [ ] [ ] [ ] int ) { }",
  "func ID ( ) : bool { var ID : bool var ID : int print true * - ( ( ( ( 123 ) ) ) ) }",
  "func ID ( ID : [ - ID ( ) [ - - 123 + 123 * 123 / ( ID ) ] [ ( false ) ] ] bool ) { }",
  "func ID ( ) { ID ( true - ID * true and ID [ 123 ] ) = ID }",
  "func ID ( ID : bool , ID : int ) : int { var ID : [ - 123 - 123 - - ID ] [ ] int }",
  "func ID ( ) { var ID : bool var ID : int ID ( ) = - ( true and ( 123 ) and ID ) ID = ID } func ID ( ) { }",
  "func ID ( ) : int { print ID [ ( ID [ ( ID ) ] [ ID ] ) ] [ false ] print false }",
  "func ID ( ) { var ID : bool var ID : int return - - 123 / ID [ ( - - ID ) ] }",
  "func ID ( ) { var ID : bool var ID : bool print true * ( - true / 123 ) * true } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID ( ) [ ID ( ) [ - ID ] [ - ( ( ID ) ) ] ] ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : [ 123 / false - - true / false / ( ID ) + false ] [ ] int ) { }",
  "func ID ( ID : [ - 123 / true / - ID - - ID [ ID ] [ ID ] ] [ ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ) { var ID : bool } func ID ( ID : bool ) { var ID : int var ID : bool }",
  "func ID ( ID : bool , ID : int , ID : bool ) : bool { var ID : [ ID ( ) [ ( ( ID ) ) ] [ ID ] ] [ ] bool var ID : [ ] int } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool , ID : int ) : bool { call ID ( ) print true / true }",
  "func ID ( ID : int , ID : bool ) : [ ( ID [ - - ID ] ) ] bool { } func ID ( ) { }",
  "func ID ( ID : [ - ( - false / 123 / false and true / false / true ) ] bool ) { }",
  "func ID ( ) { var ID : bool var ID : [ ] [ true - - - ID [ ( ( - false ) ) ] [ - false ] ] int }",
  "func ID ( ) : int { while ( - ( - false - ( true ) ) ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool call ID ( ) if false * true / 123 > ID { } }",
  "func ID ( ) : int { var ID : [ ] bool var ID : [ ( ID [ ( ID ) ] ) ] int }",
  "func ID ( ) : [ - 123 and ( ID ( - ( ID ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : bool var ID : bool call ID ( ) ID = false * - 123 / ID } func ID ( ) { }",
  "func ID ( ) : int { while - 123 - ID ( - - - - ( 123 ) ) { } }",
  "func ID ( ID : [ ] bool , ID : bool ) : int { var ID : bool var ID : [ - ID ( ) ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ID ( ID ( - 123 ) ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int while ID + 123 * 123 + - ( ID ) { } if 123 { } } func ID ( ) { }",
  "func ID ( ) { while false * ( - ID [ - ID ] [ - - ID ] ) { } } func ID ( ) { }",
  "func ID ( ) : int { if ( ID [ ( true ) ] ) { } }",
  "func ID ( ID : bool ) : [ 123 / ( 123 + ( ( - true ) ) - false ) ] [ ] bool { }",
  "func ID ( ID : int , ID : [ ] [ - 123 * 123 / ( - ( - ( ID ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ( false ) / ( true or - true ) / 123 ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ( ID ( ) [ true + ID - ID ] ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int { while - ( ID * true ) { } { } } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool return } func ID ( ID : int , ID : [ ( ID ) ] [ ] int ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ID : [ - false / ID [ 123 ] * false ] [ ] int var ID : [ ] bool }",
  "func ID ( ) : bool { var ID : bool var ID : bool return } func ID ( ) : [ ] int { var ID : bool var ID : bool }",
  "func ID ( ) : [ ID ( ) [ - - ( ( ID ) ) ] [ ( ( ( false ) ) ) ] ] bool { } func ID ( ) { }",
  "func ID ( ) { if ID [ 123 / - ID ( ) [ false ] [ ID ] * - ( ( ( - ID ) ) ) ] { } { } }",
  "func ID ( ID : int ) : bool { var ID : int } func ID ( ) { var ID : [ ] int print ID }",
  "func ID ( ) : int { ID = ( - ( true / ( - - - ID ) ) ) ID = ID } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : int var ID : bool if - ID [ - ID ] { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : [ - - true / ( - false ) ] [ ] [ ] bool }",
  "func ID ( ) { print - ( 123 + - ( ( ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : bool { var ID : [ - ID ( ) [ 123 ] [ - ( true ) ] ] [ ] bool }",
  "func ID ( ID : [ true / - - true * 123 or - - ID - - ID - 123 or - - - ( - ( ID ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) { print 123 / ( ( 123 * - - ID ) ) * ID while ( ( ( ( ( ID ) ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) { var ID : bool }",
  "func ID ( ID : [ - ID ( - true * - - ID [ 123 ] * 123 ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : bool var ID : [ ( false / 123 / - ID ) ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - - ( ( ( ( ( ID ) ) ) ) ) ] [ ] [ ] [ ] int , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : int return }",
  "func ID ( ) { print - ( - true * ( ID ( ( ( - ( - ID ) ) ) ) ) * 123 ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : int var ID : [ - ID and true and - ID ] bool }",
  "func ID ( ID : [ ] int ) { var ID : [ ( ( ID ) ) ] [ ] [ ] [ ] [ ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ true * ( ID ( - ( false ) ) ) ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ) { } func ID ( ) : int { var ID : int }",
  "func ID ( ) { ID ( ID [ - - ID ( ) * ID / 123 ] [ ID ] ) = - ID } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : bool while ( ID [ true ] [ ID ] ) { } call ID ( ) }",
  "func ID ( ID : int , ID : [ - - true * ID * - - 123 + - - true - ( true ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { } func ID ( ID : [ ID [ - ( - ID ) ] [ - true ] ] int ) { }",
  "func ID ( ID : int , ID : [ ( ( 123 * 123 + - 123 ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : [ ] [ ] [ ID [ ID ] [ ID ] ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ID : [ 123 * ID [ ( ID ( ( ( - ID ) ) ) ) ] ] [ ] int ) { }",
  "func ID ( ) : [ ( - true * ( ( ID ( ) ) ) ) ] int { }",
  "func ID ( ) : int { var ID : [ ] bool var ID : bool }",
  "func ID ( ID : [ ] [ ID [ ( 123 / - ( ( false ) ) / - ( ID ) ) ] [ 123 ] ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool while true * ID ( - true - 123 ) / ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : int { var ID : bool var ID : [ ] bool } } func ID ( ) : bool { var ID : int }",
  "func ID ( ) : [ ] bool { var ID : int var ID : bool { call ID ( ) } ID = ( ID ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : int return }",
  "func ID ( ID : bool , ID : [ ] bool , ID : bool ) : int { var ID : [ - ( ( ( ( false ) ) ) ) ] [ ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool { var ID : [ ] bool var ID : int return } while - - ( ID ) { } }",
  "func ID ( ) { var ID : bool call ID ( ) return } func ID ( ) : bool { var ID : [ - ID ] [ ] int }",
  "func ID ( ) { var ID : bool return } func ID ( ) { print ID ( ( - ( ID ) ) ) }",
  "func ID ( ) : [ ] int { var ID : bool return } func ID ( ) : int { }",
  "func ID ( ) : int { call ID ( ) return }",
  "func ID ( ID : bool , ID : int , ID : [ 123 * ID ( ) [ - ID ] [ ID ] * 123 ] int ) { }",
  "func ID ( ID : bool , ID : [ - ( ID [ - ( ( ( ( - 123 ) ) ) ) ] ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : int var ID : bool } func ID ( ID : [ true ] bool ) { }",
  "func ID ( ) : int { var ID : bool { { var ID : int var ID : int } while ( false ) { } } ID = ( 123 ) } func ID ( ) { }",
  "func ID ( ) { var ID : int print - 123 / ( ( ID ( ) ) ) ID = ID } func ID ( ) { }",
  "func ID ( ID : [ - ID [ ID [ ID [ false ] ] [ ( ID ) ] ] [ - - 123 ] ] bool ) { }",
  "func ID ( ID : int , ID : [ - - ID ( 123 * ( ( - true ) ) / 123 ) ] int , ID : bool ) { }",
  "func ID ( ) { var ID : [ ] [ ] bool var ID : [ - - - ( ID ) ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : [ - ID ( ) [ - - - false ] [ 123 ] ] int } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : [ ] [ ID ( ) / true * ID ] int }",
  "func ID ( ) : int { var ID : [ - ( ID [ ID [ - true ] [ - - ID ] ] ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ 123 and ( true * false * - ( ( - false ) ) ) and ID ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( - ( - ( ( - ( true ) ) ) ) ) ] bool } func ID ( ) { }",
  "func ID ( ) : [ ID ( ( false / ID / - ( ID ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : [ ] [ ] int { var ID : [ ] [ true ] int } func ID ( ) { }",
  "func ID ( ID : [ false / ( ID ( - ( - 123 ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] bool call ID ( ID [ - - ( - - ID ) ] [ ( true ) ] ) while ( 123 ) { } } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : int } func ID ( ID : int ) { call ID ( ID ) }",
  "func ID ( ) { var ID : bool call ID ( 123 + ID [ ID / ( true ) * - false ] [ ( 123 ) ] ) { } }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var ID : int var ID : int call ID ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ) { return ID ( ) and - 123 - true / ( 123 ) * ( ID ) - true and false }",
  "func ID ( ) { var ID : bool return } func ID ( ) : int { var ID : int var ID : int ID = ID }",
  "func ID ( ID : bool , ID : int , ID : int ) { return 123 * ( ID [ true ] ) / ( ( - ID ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool ID = - 123 / ID ( ID ) print true }",
  "func ID ( ID : int ) { while ID ( - - ID >= ( true ) ) { } } func ID ( ) { }",
  "func ID ( ) { ID [ ( ID ( ) [ - false ] ) ] [ 123 ] = 123 if 123 { } }",
  "func ID ( ID : bool ) : [ ID ( ) ] int { var ID : bool var ID : bool while ( ( ( ID ) ) ) { } { } }",
  "func ID ( ID : bool , ID : [ ID ( true + ( ID ) - 123 ) ] int ) { }",
  "func ID ( ) { return 123 + - ( ( ( ID ) ) ) }",
  "func ID ( ) { var ID : [ ID [ - ( ID [ ( - ( false ) ) ] [ false ] ) ] [ false ] ] bool var ID : [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) { } func ID ( ) { var ID : bool var ID : int print false + ID ID = true }",
  "func ID ( ) : bool { var ID : [ - 123 - true / - false * - - 123 - ( ( - ID ) ) ] [ ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int , ID : bool ) { var ID : [ true / ( - ( - ( ID ) ) ) * 123 ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) : bool { ID [ false + ID ( ( 123 ) ) ] [ ID ] = false print ID }",
  "func ID ( ID : bool , ID : bool , ID : int ) : bool { var ID : [ ] int var ID : bool { var ID : bool var ID : bool } }",
  "func ID ( ) : bool { { var ID : int var ID : bool while - ID [ - - true ] { } call ID ( ) } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] bool }",
  "func ID ( ID : [ ] [ ] bool , ID : bool , ID : int ) : bool { var ID : [ ( ( true ) ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int { var ID : bool return ID [ - - 123 ] [ - ID ] } print false } func ID ( ) { }",
  "func ID ( ID : int ) { } func ID ( ) { var ID : int if - ( ID ) { } }",
  "func ID ( ID : bool , ID : bool ) : [ ] [ ] bool { var ID : [ ] int var ID : bool ID ( ) = false }",
  "func ID ( ) { call ID ( - - - - - - ( - - ( - ID ) ) ) }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : bool { return ( ID ( 123 ) ) } func ID ( ) { }",
  "func ID ( ID : bool ) { if ID ( 123 * ( ( true ) ) / ID ) { } }",
  "func ID ( ) : [ ] [ 123 - - - ID ( ID / 123 * - ID ) + ( - true ) ] int { }",
  "func ID ( ) { ID ( ) [ - - ( ( ( - ID ) ) ) ] = ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ( ID ( ) [ ( ( ( ( true ) ) ) ) ] [ true ] ) ] [ ] int ) { }",
  "func ID ( ID : bool ) : int { return } func ID ( ) : [ true * - - ( - ID ) * - 123 ] bool { }",
  "func ID ( ID : bool ) : bool { }",
  "func ID ( ID : [ ] [ ] int , ID : int , ID : [ - false * ID ( - ID ) * - true ] int ) { }",
  "func ID ( ) { { var ID : int var ID : int } call ID ( true / false + ID - ID ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - 123 / ( - false * ( ID ) ) * false ] bool , ID : bool ) { }",
  "func ID ( ) { } func ID ( ID : bool , ID : int ) : [ ] [ ( ID ) ] bool { }",
  "func ID ( ) { var ID : bool return ID ( ID ( ) [ ID ] ) }",
  "func ID ( ID : bool ) { var ID : [ - false / ( - ID / true ) / ID ] bool }",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : int var ID : bool } func ID ( ID : bool , ID : int ) { }",
  "func ID ( ID : int ) { ID [ true * ( ID ( ( ( ( - ID ) ) ) ) ) ] = true }",
  "func ID ( ID : int , ID : [ ] [ ( - ID ( ( ID ) ) ) ] bool ) { }",
  "func ID ( ) { var ID : int print false - ID * ID ( ) [ ID ] / - ID if ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool print - true * ID ( false ) while ( 123 ) { } }",
  "func ID ( ID : bool ) { var ID : int var ID : [ ( - - - ( - ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ) : [ ( ( ( ( false / ID * ID ) ) ) ) ] bool { }",
  "func ID ( ) { var ID : [ ] [ ] int var ID : [ - false or 123 ] bool }",
  "func ID ( ID : bool , ID : int ) : int { print ( - false * 123 - ID ) } func ID ( ) { }",
  "func ID ( ID : int ) : [ false * ID ( ( ( ID ) ) ) ] int { }",
  "func ID ( ) { var ID : bool } func ID ( ) : int { var ID : [ - - ID ( ) ] bool var ID : bool }",
  "func ID ( ) { var ID : bool var ID : bool while 123 / - 123 / ( false ) { } print ( - - 123 ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool var ID : [ ] bool call ID ( ) { var ID : bool while - ( 123 ) { } ID = - ( ID ) } }",
  "func ID ( ID : int ) : bool { }",
  "func ID ( ID : [ ( ( ID ( - ID ( ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : bool ) { if - ID ( ) [ ( - false ) ] { } }",
  "func ID ( ) : [ ] int { var ID : [ - true - - true and ID and ID ] [ ] int var ID : [ ] [ ] bool }",
  "func ID ( ) : int { } func ID ( ID : bool ) { var ID : int return }",
  "func ID ( ID : [ ] int , ID : bool ) { var ID : int return false * ( false ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : int { return }",
  "func ID ( ) { var ID : [ - - - 123 / - ( ( - ID ) ) ] [ ] bool var ID : int }",
  "func ID ( ) { var ID : bool var ID : [ false / true + ( ( ID ) ) + false ] bool } func ID ( ) { }",
  "func ID ( ) : [ ( ID / true - false != ( - ( ID ) ) ) ] bool { }",
  "func ID ( ID : [ ( ( false - ID ( ) * ID + false ) ) ] [ ] bool ) { }",
  "func ID ( ID : bool ) : [ ] bool { while ID ( ) [ - - - - - ( - 123 ) ] [ false ] { } ID = ( true ) }",
  "func ID ( ID : [ false / ( ID ( ) [ ID [ ID ] [ false ] ] ) * - ( ( ( ( ( 123 ) ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ - - - 123 / ( 123 / ID * ID ) ] bool }",
  "func ID ( ID : [ - false * true and ( ( ( ( false ) ) ) ) ] int ) { }",
  "func ID ( ) { var ID : bool var ID : bool ID ( - true * - 123 / - ( - - ID ) ) = ( ( ID ) ) ID = true }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { } func ID ( ) { var ID : bool ID ( ID ) = false }",
  "func ID ( ) : [ ] int { var ID : [ - 123 / ( - ID [ ID ] ) / ID ] bool var ID : [ ] [ ] bool }",
  "func ID ( ID : int , ID : [ true <= ID ( ID [ ( false ) ] ) ] bool ) { }",
  "func ID ( ) { var ID : bool var ID : bool while - 123 / true + - ( ID ) - ( ID ) { } while ( ( false ) ) { } }",
  "func ID ( ID : bool ) { var ID : int var ID : bool call ID ( 123 * ( ID ) / ID ) call ID ( ) }",
  "func ID ( ID : [ ] int , ID : bool , ID : bool ) { var ID : [ ] bool } func ID ( ID : int , ID : [ ] bool ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) : [ - - - ID ( 123 ) ] int { }",
  "func ID ( ) : int { var ID : [ ] bool var ID : int while ID [ ( ID ) ] [ ID ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool while - ( ( 123 / true ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ( ID ( ) - true - ID ) ] bool var ID : [ ] int }",
  "func ID ( ) { var ID : [ ] int return - false / ID [ 123 * - - true * ( true ) ] * ID }",
  "func ID ( ID : bool , ID : int , ID : bool ) : bool { }",
  "func ID ( ID : int , ID : bool , ID : [ ] int ) : [ ID [ ( - false ) ] ] [ ] [ ] int { }",
  "func ID ( ) : bool { if ID ( ( - - ( true ) ) ) { } call ID ( ) }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : int var ID : int { var ID : [ ] int ID = ID if - 123 { } } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : bool ) { print - ID ( false ) }",
  "func ID ( ) { var ID : int var ID : [ ] int return 123 - ID [ ID ] } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID ( false / ( - ( true ) ) ) ] [ ] int }",
  "func ID ( ) : int { } func ID ( ) : int { var ID : bool var ID : bool if ( ID ) { } }",
  "func ID ( ) : [ - 123 / ( ( 123 * - true - ID + ( ID ) ) ) / - ID ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : [ - false / - - false / - ( 123 ) ] bool } func ID ( ) { }",
  "func ID ( ID : bool ) : [ false * false * ( ID [ ( ID ) ] ) ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ] [ - ( ID [ ID ] ) ] bool }",
  "func ID ( ) : bool { { var ID : bool while ID ( ) / ( - - - - ( ID ) ) { } } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int , ID : bool ) { var ID : bool { call ID ( 123 ) } if - ID { } } func ID ( ) { }",
  "func ID ( ) { return true / 123 and 123 * ID [ ( - - - - - false ) ] [ - false ] } func ID ( ) { }",
  "func ID ( ) : [ ( false * ID [ true * ( ( ( ( false ) ) ) ) / ID ] / ID ) ] bool { }",
  "func ID ( ID : int ) { var ID : [ ID ( ( true / ID ) ) ] bool var ID : [ ] bool }",
  "func ID ( ) { var ID : int var ID : [ - ( 123 * ID ( ( true ) ) / - ID ) ] bool } func ID ( ) { }",
  "func ID ( ) : int { print ID ( ( ID [ - ( ID ) ] ) ) while ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ true / - 123 * ID ( ) - true + false ] int ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ ] [ ID ( ) [ 123 ] [ 123 ] ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : bool var ID : [ ID ( ) [ 123 ] ] [ ] bool }",
  "func ID ( ID : bool , ID : int ) { while - ( ID / 123 * 123 ) { } } func ID ( ) { }",
  "func ID ( ) { return 123 * ID ( 123 != ID * ( 123 ) ) } func ID ( ) { }",
  "func ID ( ) : int { return ( ( - - ID [ true ] [ - ( ID ) ] ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : [ ( ID ( - ID ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID ( true / ( - - false ) ) ] bool , ID : int ) { }",
  "func ID ( ) : bool { var ID : int return }",
  "func ID ( ID : bool , ID : bool , ID : [ ( - - - - false >= - ID ) ] [ ] int ) { }",
  "func ID ( ) { var ID : int var ID : [ ] bool return - true * ( - - ( - ID ) ) / ID }",
  "func ID ( ) : bool { ID ( ID [ false / ( false ) / ( 123 ) ] [ ID ] ) = - ( - ID ) } func ID ( ) { }",
  "func ID ( ) : int { { var ID : bool var ID : int } } func ID ( ID : int , ID : bool , ID : bool ) { }",
  "func ID ( ID : int , ID : int ) : int { call ID ( ( ( - - ( ( ( ID ) ) ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ false + - false and - ( - ID ( ) ) ] bool ) { }",
  "func ID ( ) : [ ] [ ( ( ID / ( false ) ) ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID [ - ID [ true / false * - ID ] ] [ ID ] ] int ) { }",
  "func ID ( ID : [ - - - - true + 123 == - - ID [ ID ] [ - ID ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int print true / ID - ID ( ) [ ( ( ( true ) ) ) ] } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] bool print - ( ( - ( ( false ) ) ) ) }",
  "func ID ( ID : bool , ID : bool ) : bool { var ID : bool var ID : bool { var ID : [ ( true ) ] bool } if false { } }",
  "func ID ( ID : bool , ID : bool ) : [ ( true and ( ID ) and - - - ( ID ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : [ ] bool var ID : [ true * - ID * - ID ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int , ID : [ - false * ID + 123 - ID ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ false / 123 + - true / ( - ID [ true ] ) / ID ] bool ) { }",
  "func ID ( ID : int , ID : bool ) : [ ] int { var ID : [ ID ( ( ( ( ID ) ) ) ) ] bool }",
  "func ID ( ID : bool ) : int { var ID : [ false + - 123 < ( - - ID ) ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) : int { ID ( - ( ID [ true ] [ false ] ) ) = ( - true ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : [ ] [ ] bool ID [ false / 123 ] [ ( ID ) ] = - ID call ID ( ) }",
  "func ID ( ID : bool ) : bool { call ID ( ) return }",
  "func ID ( ID : [ false / - - ( ( ( false ) ) ) * true ] bool ) { }",
  "func ID ( ) { ID [ ( ( - ID * ID / ID ) ) ] = false }",
  "func ID ( ) { var ID : int var ID : [ ] [ - 123 + - - - - false + - ( - - ( ( - ( ID ) ) ) ) ] bool }",
  "func ID ( ID : bool , ID : [ - ( ID ( ) + ( true ) - - true ) ] bool , ID : int ) { }",
  "func ID ( ) : [ - - false / - ( ( false / - false ) ) * ID ] int { }",
  "func ID ( ) { var ID : bool } func ID ( ) { var ID : [ ID [ ID ] ] int var ID : bool }",
  "func ID ( ID : [ - ( 123 and ( ( ID ) ) and ID ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ - - ID ( ) / - ( - ( ( ID ) ) ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int if ( true + ( ID ) + ID ) { } while ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : [ ( true / ID + - - ( ( ( ( - ( ID ) ) ) ) ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) { print 123 / ( - ( - ( false ) ) ) / - true { } }",
  "func ID ( ) : [ ] bool { var ID : bool var ID : int print ( - ID ( ) ) { } }",
  "func ID ( ID : bool , ID : bool ) : bool { var ID : int } func ID ( ) { var ID : bool print ID { } }",
  "func ID ( ID : [ ( ( ( - ID ( - ( ID ) ) ) ) ) ] int ) { }",
  "func ID ( ID : [ ] [ true / ( false / - - ID ( ( false ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - - ID [ false / 123 <= false ] [ ( ID ) ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ false - 123 * - false - ( false ) ] int , ID : int ) { }",
  "func ID ( ID : int ) { var ID : [ true / ID * true - ID * ( 123 ) / - ( ID ) - 123 ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] bool } func ID ( ) : bool { { var ID : int var ID : int } print ( ID ) }",
  "func ID ( ) : bool { var ID : bool var ID : bool { var ID : bool var ID : [ false * ID / ID ] [ ] bool } }",
  "func ID ( ID : bool ) { var ID : [ ] bool var ID : int return ID ( ) and - false } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] [ - ID ( ) [ ( ( ID ) ) ] ] int } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ ID * ID ( ) and - - - ID ] ] bool ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var ID : [ ] bool ID [ - 123 ] [ ID ] = ID } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ( ID [ ( - ID ) ] ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ false / ID + ( ( - - - - false ) ) ] [ ] [ ] int var ID : [ ] [ ] bool }",
  "func ID ( ) { var ID : bool var ID : bool while 123 * ( - ( - - - - - ( ID ) ) ) { } { } } func ID ( ) { }",
  "func ID ( ID : [ - false * - - ID [ ( - - ( ( true ) ) ) ] [ ID ] ] int ) { }",
  "func ID ( ID : [ ID / false / - ID [ ( - 123 ) ] [ ID ] ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { return } func ID ( ) { print - false / true > ID }",
  "func ID ( ID : [ ( ( ID [ true * 123 / ( true ) ] ) ) ] [ ] [ ] [ ] int ) { }",
  "func ID ( ID : [ ID ( ) + - - ( 123 * - true ) + false ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool return - ID ( ) [ - false ] }",
  "func ID ( ) { var ID : [ ] [ ( 123 / false + ID ( ) + ID ) ] bool var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) { ID ( ID ( - true / - ( ID ) ) ) = ( ( - ( false ) ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : [ ID [ ( - ( - ( - ( true ) ) ) ) ] ] int }",
  "func ID ( ) : [ false - ID [ 123 - ( 123 ) ] + - 123 ] bool { }",
  "func ID ( ID : bool ) : int { var ID : [ ID ( - ( ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool if ID ( ( false ) ) { } print ( 123 ) }",
  "func ID ( ) { var ID : bool return - ID ( ) [ 123 - 123 / ( ( ( - true ) ) ) - ID ] }",
  "func ID ( ID : int , ID : int ) { var ID : [ ] bool ID [ - false - - ID ] [ ( true ) ] = ( true ) }",
  "func ID ( ) : [ ID ( ) / ID ( ) [ ( ( ID ) ) ] * ID ] bool { } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool call ID ( ) { var ID : int var ID : [ ] bool return ID } }",
  "func ID ( ) : bool { return } func ID ( ) : int { var ID : [ ] int var ID : int call ID ( - false ) while false { } }",
  "func ID ( ID : int , ID : int ) : int { var ID : [ ] [ false and ID ] bool }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : [ ] bool ID ( - - ( ID ) ) = - false } func ID ( ) { }",
  "func ID ( ID : [ true / ( ID * - ( - false ) ) ] bool ) { }",
  "func ID ( ) : bool { print ( 123 + ID + ( false ) ) }",
  "func ID ( ID : [ ID [ ID ( ) / ID [ ID ] ] ] bool ) { }",
  "func ID ( ID : [ ID / ID ( ) [ 123 + true - 123 ] ] bool ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : [ ( false / ( ( ( ID ) ) ) / - - 123 ) ] bool { }",
  "func ID ( ) : bool { var ID : int return false + false / ( - ( ID ) ) + - true }",
  "func ID ( ) : bool { ID = - ( - ( ID * ID / ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) : [ false - - - - - - - true ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : bool { { var ID : int { var ID : bool var ID : int } } } } func ID ( ) { }",
  "func ID ( ) : bool { if ( ID [ ( ID ) ] ) { } }",
  "func ID ( ID : [ 123 + - false / - - true / ID ( ) [ ID ] ] [ ] int ) { }",
  "func ID ( ) : [ ] int { call ID ( false * - true / ID ( ) + - 123 ) if ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] int { var ID : int return } while ( false ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int return ( true + false * - ( ( 123 ) ) + ID ) } func ID ( ) { }",
  "func ID ( ) { { var ID : int if ( 123 * false * false ) { } } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int return } func ID ( ID : bool , ID : int , ID : [ ] int ) : [ ] [ ] bool { }",
  "func ID ( ) { var ID : [ - ID / ( true > ID ) * true ] bool var ID : bool }",
  "func ID ( ) { var ID : int var ID : int ID ( ) [ ( ( true ) ) ] = ( true ) ID = - ID }",
  "func ID ( ) { print - - - - - 123 - false * 123 - - ID call ID ( ) }",
  "func ID ( ) : bool { print false / ( - ID [ - ( true ) ] [ ( - - 123 ) ] ) } func ID ( ) { }",
  "func ID ( ) : bool { if ID [ ID ( ) [ - ID ] [ ID ] ] [ ID ] { } }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : bool while ( false * 123 * ( ID ) ) { } while ID { } }",
  "func ID ( ID : [ - - - ( ( 123 / ( false ) ) ) ] bool ) { }",
  "func ID ( ID : int , ID : [ false - ID ( ) / ( ( ID ) ) ] [ ] [ ] [ ] [ ] int ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] [ false + ( ( ID ) ) - ID ] int , ID : int ) { }",
  "func ID ( ID : bool ) : int { if - ( true * true > - ( ID ) ) { } if ID { } }",
  "func ID ( ) { var ID : int { var ID : bool } ID = false } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] bool print ( false / ( ( 123 ) ) ) while ( ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : [ ] [ ] bool print 123 * false * - ID ID = 123 }",
  "func ID ( ) { var ID : [ true / ( 123 / - 123 - - - ( false ) ) ] bool }",
  "func ID ( ) { var ID : int var ID : [ ] [ false * - false < ID ( ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ( - true / 123 * ID ( ) ) ] [ ] bool ) { }",
  "func ID ( ) { var ID : int { var ID : bool { { var ID : int ID [ ID ] [ ID ] = false call ID ( ) } } } print false } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID ( ) [ ( ID [ true ] ) ] [ ( - ID ) ] ] [ ] [ ] [ ] int ) { }",
  "func ID ( ) { var ID : [ ] int var ID : int call ID ( ) if - ( - ID ) { } }",
  "func ID ( ID : int , ID : int ) : int { var ID : [ ] [ ] bool { var ID : [ - ( ID ) ] int } if ID { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) : bool { { var ID : [ ] [ ] bool if ID { } } print ( - 123 ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] int print ID + ID [ ID ] [ ( ID ) ] } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : [ ] int ID [ false / ID * - ID ] = true print false } func ID ( ) { }",
  "func ID ( ) : bool { return ID ( false / ID ( ID ) / ( - ID ) ) }",
  "func ID ( ID : int , ID : bool ) : int { var ID : [ ] [ ] int ID = ID if false { } } func ID ( ) { }",
  "func ID ( ) { while 123 / - ( ID [ ( ( ( - false ) ) ) ] [ - ( - ID ) ] ) { } print 123 }",
  "func ID ( ) { { var ID : [ ] bool var ID : bool } }",
  "func ID ( ID : int ) { var ID : int return ID and false / false + ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : [ ID ( ( ID ( ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int return - true * 123 >= ID [ ID ] [ - ID ] } func ID ( ) { }",
  "func ID ( ) { var ID : int if ( false / - - ID [ - 123 ] [ - - 123 ] ) { } } func ID ( ) { }",
  "func ID ( ID : [ ( ID + ID >= true and ID and true ) ] bool ) { }",
  "func ID ( ) { var ID : bool var ID : bool call ID ( ID [ - false * ID ] ) while ID { } }",
  "func ID ( ) { var ID : int if ID ( - ID * ID ( ) * 123 ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int while - 123 and 123 + ID [ ( ( - false ) ) ] [ ( - 123 ) ] { } if ( ID ) { } }",
  "func ID ( ) : bool { var ID : [ ] int var ID : [ ] bool ID ( ) = ID ( ) }",
  "func ID ( ) { var ID : bool { var ID : int return } return }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ] int var ID : int call ID ( ) call ID ( false ) } func ID ( ) { }",
  "func ID ( ID : [ - - - ID [ ( 123 - ID ) ] [ ID ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ false / ID ( ) [ ID ( false ) ] ] bool var ID : bool }",
  "func ID ( ) { var ID : [ ] [ ] [ ] int var ID : [ ID [ ID ] [ ( ( ID ) ) ] ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : [ ( ID [ ( ID ) ] [ true ] ) ] [ ] int var ID : bool }",
  "func ID ( ) : bool { var ID : int print ID [ ( false / ( - - true ) / ( ( 123 ) ) ) ] } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : bool { { var ID : bool { return - ID } } }",
  "func ID ( ) : bool { var ID : int var ID : int call ID ( false >= ID [ ( - true ) ] ) while 123 { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int if - ( 123 * true * - 123 ) { } print ( ( 123 ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) : [ - ID ( - ID [ - ID ] ) ] [ ] int { }",
  "func ID ( ) { while ID ( - ( - 123 * - ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { while true / 123 - ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : int ) { if ID ( ) [ ID ( - 123 ) ] [ ( ID ) ] { } ID = ID }",
  "func ID ( ID : int ) : bool { var ID : int var ID : int }",
  "func ID ( ) { var ID : [ false + ID + ( ( - ( ID ) ) ) ] int var ID : bool }",
  "func ID ( ) { var ID : int var ID : [ ] [ ( ( false ) ) ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : int { var ID : bool return - ( ID [ ( ID ) ] [ ( ( ID ) ) ] ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - - ID ( ID [ ID ] [ ( false ) ] ) ] [ ] bool , ID : int ) { }",
  "func ID ( ID : [ true or ID ( ) * true / - ID ( ) or ( ( false ) ) ] bool ) { }",
  "func ID ( ID : [ ] [ ] int , ID : bool , ID : int ) : [ ] [ ] [ ] int { var ID : [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { ID [ - ID ( ( - - ( 123 ) ) ) ] [ - - true ] = - ( 123 ) print ID } func ID ( ) { }",
  "func ID ( ) : bool { if ( - true + ID * ( false ) / - ID ) { } ID = ( - - ( false ) ) }",
  "func ID ( ) : [ ] int { var ID : bool print ID ( true - - ( - false ) ) }",
  "func ID ( ID : [ ] int ) { var ID : bool var ID : bool print 123 * true / - ( - ID ) }",
  "func ID ( ID : int , ID : [ ] bool ) : bool { var ID : int var ID : [ ] [ ( - ID ) ] int }",
  "func ID ( ) : int { } func ID ( ) : [ ( - ( - 123 ) ) ] bool { }",
  "func ID ( ) { var ID : bool if - false / - ID [ ID [ - ID ] ] [ - ID ] { } call ID ( ) }",
  "func ID ( ID : [ ( 123 + false / 123 / true - 123 ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( ID ( ) * ID [ false ] ) ] int var ID : int }",
  "func ID ( ) : int { return false * ID [ ID ( ) [ ( - ( ( - ID ) ) ) ] [ false ] ] }",
  "func ID ( ) : bool { var ID : bool var ID : bool call ID ( - ( ( - ( ID ) ) ) ) }",
  "func ID ( ) : int { var ID : int call ID ( ) while false / 123 and ( ID ) and ( ( ID ) ) { } }",
  "func ID ( ) : [ true >= ( ID / - ID ( - ( true ) ) ) ] [ ] bool { }",
  "func ID ( ID : int ) { } func ID ( ) { ID ( - ID ( ) * ( - ( ( ID ) ) ) / - 123 ) = - ID print ID }",
  "func ID ( ID : [ ] int ) : bool { var ID : [ ( ID [ - ( ( ( - - 123 ) ) ) ] [ ID ] ) ] bool }",
  "func ID ( ID : int , ID : [ ] [ ID ( ) [ - ID [ false ] ] ] int , ID : int ) { }",
  "func ID ( ) { var ID : int print ID ( ) [ - - 123 / - ( ID ) / ( ID ) ] [ ID ] ID = ( ( - ID ) ) } func ID ( ) { }",
  "func ID ( ) : [ ( ( false * ID ( false ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) { call ID ( ) call ID ( ID [ true / ( 123 ) / - ( ( true ) ) ] ) }",
  "func ID ( ) : bool { call ID ( ID ( true - ( ID ) - - ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID : [ ID [ false * ( true ) * - true ] ] [ ] [ ] [ ] [ ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : [ - false * - - - ( ( false * ID / ( ID ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] int var ID : int } func ID ( ) : int { var ID : int return - true }",
  "func ID ( ) { var ID : [ ( ID ( true / ( - - - ( ID ) ) ) ) ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : int while ID ( ( - false ) ) { } } func ID ( ) { }",
  "func ID ( ) { ID [ ( 123 / true - ( 123 ) ) ] [ - ID ] = ( - - false ) } func ID ( ) { }",
  "func ID ( ID : [ false / ID ] int ) : int { { var ID : [ ] bool var ID : bool } }",
  "func ID ( ) : bool { var ID : bool var ID : [ - ID / ( - - ( - ID ) ) / ( true ) ] int } func ID ( ) { }",
  "func ID ( ID : [ ( ID [ ID ( ) / true >= false ] ) ] [ ] int ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ] bool ) { var ID : int call ID ( ) }",
  "func ID ( ) : bool { var ID : int var ID : bool while true + ID [ ID ] [ ID ] { } if ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { { return } print false * ID ( ) [ false ] [ ID ] } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : bool print - ( ID [ ID ] ) ID = true } func ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( ) } func ID ( ) : bool { { var ID : [ - - - ( - - ID ) ] bool } { } }",
  "func ID ( ID : [ ] [ ] int ) { ID ( true + - - ID + ( 123 ) ) = ID } func ID ( ) { }",
  "func ID ( ID : [ - ID [ - ID ( - 123 - false ) ] [ true ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ - ID [ ( - ID [ true ] [ ID ] ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) : int { while ( - 123 ) { } { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] int { var ID : bool var ID : bool if false { } ID = 123 } }",
  "func ID ( ) : int { var ID : [ ] int var ID : [ ] int call ID ( - ID [ - ID ] ) while - ( ID ) { } }",
  "func ID ( ID : bool ) : bool { var ID : bool var ID : [ ] int ID = true <= 123 ID = - ( 123 ) }",
  "func ID ( ) : [ ] bool { ID [ true / ( ( ID ) ) / ID ] [ - ID ] = ID } func ID ( ) { }",
  "func ID ( ID : [ ( ( true / 123 / true - ( ID ) ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int return ID ( ( true and ( - - - 123 ) ) ) }",
  "func ID ( ) : [ - ID ( true * ( - ID ( ) ) * false ) ] [ ] bool { }",
  "func ID ( ID : int ) : int { var ID : [ - true * ID [ true ] [ - ID ] / true ] int var ID : bool }",
  "func ID ( ID : [ ID ( ) / false / - ID [ - - ID ] ] int ) { }",
  "func ID ( ID : int , ID : int ) { var ID : [ ID ( ( false ) ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( ) call ID ( ( ID ( ) [ - ( ID ) ] [ false ] ) ) }",
  "func ID ( ) : int { var ID : int while 123 / ( false / true + true - - ID ) * ID { } }",
  "func ID ( ID : bool ) { var ID : [ ] bool var ID : [ ] int }",
  "func ID ( ) : bool { while ID [ ID ( false * ( ID ) * true ) ] { } } func ID ( ) { }",
  "func ID ( ID : [ ( ID ( ID [ - ( ID ) ] ) ) ] bool ) { }",
  "func ID ( ID : [ ] int ) { } func ID ( ID : int , ID : bool ) { var ID : int var ID : bool }",
  "func ID ( ID : [ ID [ true * - ID [ true / - ( ( - true ) ) * 123 ] [ - ID ] / 123 ] [ true ] ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ( ( - ( - false / false ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) { while ( ( 123 * ( ID ) ) ) { } }",
  "func ID ( ID : [ ] int , ID : [ false + 123 / ID * - ( true ) - ID ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) { { } call ID ( false - true * ( ID ) - 123 ) }",
  "func ID ( ) : int { } func ID ( ) { var ID : bool if - false * false + - true { } }",
  "func ID ( ID : int , ID : int ) : int { var ID : int if - ID - ( - - true ) + ID { } ID = - ( ( ( true ) ) ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool ID = - 123 > false { while ID { } print - - ID } }",
  "func ID ( ID : int , ID : [ ] int , ID : bool ) : [ ] int { var ID : [ false ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] int { print false / ID ( - ID ) if - ( ( - ( ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) { return } func ID ( ) { return }",
  "func ID ( ID : bool ) : bool { var ID : [ ] bool var ID : bool return ID ( ) * true / ( ( ID ) ) }",
  "func ID ( ) : bool { var ID : [ ] int var ID : int } func ID ( ID : int ) : bool { var ID : [ ] int }",
  "func ID ( ID : [ 123 / ID / - ID ( ) - ( false ) + ( ( true ) ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : [ ] [ ] bool ID [ ID [ - ( - false ) ] [ ( ( ID ) ) ] ] = ( - ( - 123 ) ) print ID }",
  "func ID ( ) : [ ] bool { var ID : [ ] [ true / ID ( ID ) / 123 ] [ ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ] bool ) { var ID : int } func ID ( ) { return }",
  "func ID ( ID : bool ) { while ( - - 123 * ID ( ) [ true ] [ - ( ( false ) ) ] / false ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ - false / false / true < ID [ - ( - ID ) ] [ ( ID ) ] ] bool var ID : int }",
  "func ID ( ) : bool { call ID ( true + ID [ true / true / true ] [ - ( ( true ) ) ] + - ( ID ) ) }",
  "func ID ( ) { var ID : int print ( 123 - false != 123 - ID + false ) ID = true }",
  "func ID ( ID : [ ] int ) : [ ] [ ] bool { var ID : [ 123 * ID / 123 ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ 123 / ID + ( ( ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ) : [ ID + ( 123 / ID * ID [ ID ] [ ( ID ) ] ) + ( ( ID ) ) ] bool { }",
  "func ID ( ) : int { var ID : [ ] bool var ID : [ ID ( ) [ 123 ] [ true ] ] int } func ID ( ) { }",
  "func ID ( ) : bool { print ( ( ( false < true ) ) ) if 123 { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( - - - ( - ID ( ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ] int { ID [ ID [ false / - 123 / ( - - false ) ] ] = ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { print ID [ ( ID ( ) ) ] [ ID ] ID = ( ID ) } func ID ( ) { }",
  "func ID ( ) : [ ( ID ( ID [ 123 * - - 123 * 123 ] [ - ( ID ) ] ) ) ] [ ] int { }",
  "func ID ( ) { var ID : bool var ID : bool ID ( ) = ID ( ) [ ( - ( true ) ) ] if ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : [ ] [ false / ID [ false + ID ] [ - 123 ] / 123 ] int { }",
  "func ID ( ID : [ ] [ ] int ) : bool { var ID : bool var ID : [ ID - 123 + ID ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ - ( 123 / - - ID ( ) ) ] [ ] [ ] [ ] int ) { }",
  "func ID ( ID : bool ) { var ID : int var ID : int ID [ false / true / ( 123 ) ] = - ID }",
  "func ID ( ID : [ ( ID ( ) [ true / ( ID ) ] [ ID ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int print ( - ID [ true ] ) print - false } func ID ( ) { }",
  "func ID ( ID : [ true * false + false - 123 * true / 123 >= ( ( - ID ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { ID [ - ID ( ) [ ( - ( ID ) ) ] [ 123 ] ] = ( true ) if true { } } func ID ( ) { }",
  "func ID ( ID : [ ID [ ID [ true - ( false ) + ID ] [ - 123 ] ] ] bool ) { }",
  "func ID ( ) { var ID : [ ] [ ] [ ] bool var ID : [ ] [ - ID ( ) ] bool }",
  "func ID ( ID : bool , ID : [ ] [ ] bool , ID : [ false / ( ( ( ( ID ) ) ) ) * - - ID ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { } func ID ( ) : [ true * ID [ - false ] ] bool { }",
  "func ID ( ID : [ ] bool , ID : int ) { var ID : int var ID : bool }",
  "func ID ( ) { var ID : int while ID ( ) - ID ( ) [ - - ( ( - ID ) ) ] [ ID ] { } ID = 123 } func ID ( ) { }",
  "func ID ( ) : [ ( - ( ( ID [ - 123 ] [ - - ( ID ) ] ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : int ) { ID = ID [ ID ( ) [ ( ID ) ] ] [ - - ID ] } func ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( ) return ( ( false * - ID ) ) } func ID ( ) { }",
  "func ID ( ) : bool { ID = ( ID [ 123 > true ] [ - ( - ID ) ] ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ] int ) : [ ] int { var ID : int var ID : bool if false { } }",
  "func ID ( ) : [ ID ( true * 123 * - ( - false ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ID [ - - ID or ID ( - ID ) or ID ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { call ID ( ) } func ID ( ID : bool , ID : int ) { var ID : int var ID : bool }",
  "func ID ( ID : bool , ID : [ ] bool ) : int { var ID : int } func ID ( ID : int ) { var ID : bool var ID : [ ] bool }",
  "func ID ( ID : [ ( ID ( ) [ ( ( ( true ) ) ) ] [ 123 ] ) ] bool ) { }",
  "func ID ( ) : bool { call ID ( ) while ( ( - ID ( ) ) ) { } }",
  "func ID ( ) : [ ID [ ID [ ( - - ( - ( ID ) ) ) ] ] [ ID ] ] int { }",
  "func ID ( ID : bool , ID : [ true / ID [ 123 / - - true * true ] [ ID ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) { call ID ( ) return ID ( ) [ - - ( 123 ) ] [ false ] }",
  "func ID ( ID : [ ID ( ( ID ( ) [ - false ] [ ( ID ) ] ) ) ] int ) { }",
  "func ID ( ID : int , ID : [ ] bool , ID : int ) { var ID : bool return } func ID ( ID : [ ] [ ] int ) { }",
  "func ID ( ) : bool { print - ID [ ID ( ) [ - ID ] [ - - true ] ] [ ( ( false ) ) ] }",
  "func ID ( ID : int , ID : int , ID : bool ) : int { var ID : int { var ID : [ - false ] [ ] [ ] int } } func ID ( ) { }",
  "func ID ( ) : int { if ID * ID ( - 123 - 123 ) { } }",
  "func ID ( ) { var ID : bool return ( ID ( ) [ ID * ID * ID ] ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ] int ID [ ( false * 123 * ID ) ] = ID call ID ( ) }",
  "func ID ( ) : int { while - ID ( ) [ ( ( ( - false ) ) ) ] [ ID ] { } while ( 123 ) { } }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] bool ID = - ID ( ) [ - false ] if ID { } }",
  "func ID ( ID : bool ) : int { while true * false / false { var ID : [ ] [ ] [ ] int var ID : [ ] bool } }",
  "func ID ( ) { if true and ID [ ID [ ID ] [ true ] ] and ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : [ ] bool var ID : int print false * 123 / ( - false ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { var ID : bool { var ID : int var ID : [ ] bool if ID { } { } } { } }",
  "func ID ( ) { var ID : int print ( 123 * ( ( true ) ) ) }",
  "func ID ( ) { var ID : bool while true - true and true - ( true ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID [ ( ( ( - ( - ID ) ) ) ) ] [ ID ] ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool { var ID : bool return } ID ( ID ) = 123 }",
  "func ID ( ) { var ID : bool if - true * ( ID / - - ( ID ) / - ID ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : bool var ID : bool { { } { } } call ID ( ) }",
  "func ID ( ID : [ ( ( - ( - - 123 * - - ID * false ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] int while ( ( ID ) ) { } }",
  "func ID ( ID : int , ID : [ ] [ true / - true / - ID ( ) [ ( ID ) ] [ true ] ] [ ] int , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ] bool { print ID [ - ID [ 123 ] ] [ 123 ] if ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ( - ( ( 123 ) ) ) ] bool ) { }",
  "func ID ( ) { var ID : int if 123 + - - false / ID / false + ID { } }",
  "func ID ( ) { var ID : int var ID : bool while false / ID [ true / ( 123 ) ] [ 123 ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : int return true / ID [ ( 123 ) ] / ( ID ) }",
  "func ID ( ) { var ID : bool ID ( - ( ID [ false ] [ ID ] ) ) = ( ( ( ID ) ) ) print true } func ID ( ) { }",
  "func ID ( ) : bool { if ( - ( ( - true ) ) ) { } while ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ true + ID ( ) - - - ID and true and ( ( - ID ) ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { { var ID : bool { while true - ID ( - ( false ) ) - ( ( ID ) ) { } } if false { } } }",
  "func ID ( ) { { var ID : [ ] [ - ID ( ID [ - 123 ] [ - false ] ) ] int var ID : [ ] bool } }",
  "func ID ( ID : bool , ID : [ ID [ true * true / - ( 123 ) ] ] bool , ID : [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) : int { while ID ( ) [ - false ] { } }",
  "func ID ( ID : int , ID : [ ] int ) { ID ( ( false - ID - - - ID ) ) = - ID }",
  "func ID ( ID : int , ID : [ ID ( - - - ( ID ) ) ] int , ID : bool ) { }",
  "func ID ( ) : [ ] bool { var ID : bool }",
  "func ID ( ) { var ID : int print ID * - ( ( false ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : int call ID ( false / - - ( ID ) ) }",
  "func ID ( ID : int ) { var ID : bool var ID : [ - ( false + ID + - 123 ) ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { print ID [ ( ( ID ) ) ] } func ID ( ) { }",
  "func ID ( ) { var ID : bool print ( false + true / ID ( ) [ ID ] ) print true } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : bool while ( ( ID ) ) { } ID = ID } func ID ( ) { }",
  "func ID ( ) : [ ( ( false / - false / - ( false ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID and ID ( - ID [ ID ] ) and ID ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int print ( ID ( ( ID ) ) ) ID = ID }",
  "func ID ( ID : int ) { } func ID ( ID : bool , ID : int ) { var ID : bool }",
  "func ID ( ) { var ID : int call ID ( - true * ( ID [ - 123 ] ) ) print - - - 123 } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : int var ID : int { ID [ ( ( - false ) ) ] [ - 123 ] = 123 if false { } } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : bool return } func ID ( ID : int , ID : int , ID : bool ) { }",
  "func ID ( ) { var ID : [ ID ( ( false - 123 ) ) ] [ ] int var ID : [ ] bool }",
  "func ID ( ID : int , ID : [ ( false and false / false + ( - ID ) + - true ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int ) { { var ID : bool var ID : int print ID ID = ( - ID ) } print - - true } func ID ( ) { }",
  "func ID ( ) { var ID : int if - 123 and ( - ID [ ID ] [ ( ID ) ] ) and ( ID ) { } }",
  "func ID ( ) : [ ( ( 123 / 123 == ID ( ) ) ) ] bool { }",
  "func ID ( ID : bool , ID : [ ] int ) { var ID : int var ID : [ ] [ ] int { var ID : [ ] [ ] bool } }",
  "func ID ( ) { { var ID : bool var ID : [ ] int call ID ( ) return false / - true / ID } } func ID ( ) { }",
  "func ID ( ) { { while false - - false / false * ( ID ) { } } if false { } } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ( false / - ID [ ( ID ) ] [ 123 ] * ( ( ( - ( ( ID ) ) ) ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : bool call ID ( ) print ( - ( ( - - ID ) ) ) } func ID ( ) { }",
  "func ID ( ) : int { ID [ false + ( true * ( ID ) * ID ) + ( ( - ID ) ) ] = ID print ( 123 ) }",
  "func ID ( ) : bool { var ID : int var ID : bool if - true / - true + ID { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : bool return }",
  "func ID ( ) { call ID ( ) }",
  "func ID ( ) { var ID : bool return } func ID ( ID : bool ) { }",
  "func ID ( ID : [ ] [ ] bool ) { while - - - - ( - ( ( true ) ) ) { } ID = 123 }",
  "func ID ( ) { } func ID ( ID : bool , ID : [ ID * - - true - ID ] int , ID : [ ] bool ) { }",
  "func ID ( ID : int ) { { var ID : [ ] bool print ID [ true ] [ ID ] } print ID }",
  "func ID ( ) { var ID : bool var ID : [ ] int return }",
  "func ID ( ID : [ ( ( ID ( false / 123 ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : bool { var ID : bool ID [ ( ID ) ] [ - ID ] = ID }",
  "func ID ( ) { var ID : [ ] int var ID : bool while - ID ( - ( ( ID ) ) ) { } { } } func ID ( ) { }",
  "func ID ( ID : [ ( ID [ - ID [ ( - ( - ID ) ) ] ] ) ] int ) { }",
  "func ID ( ) { var ID : bool var ID : [ ID ( ID [ false ] ) ] int }",
  "func ID ( ID : [ 123 * - false - true * - false - ( - ( - false ) ) ] [ ] [ ] [ ] int ) { }",
  "func ID ( ) : int { var ID : bool var ID : int while - ID [ ID ( ) ] [ - - - ( ID ) ] { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : [ ] int var ID : int ID ( ID ) = - ( ID ) }",
  "func ID ( ) { var ID : int { var ID : int ID ( ) [ ID [ ( false ) ] [ ID ] ] [ - 123 ] = ID } }",
  "func ID ( ) { var ID : bool ID [ ID [ ( ID ) ] [ ( ID ) ] ] = - - ( ID ) print - - ID } func ID ( ) { }",
  "func ID ( ) { { var ID : int var ID : int { var ID : [ ID + ID ] int var ID : int } } while 123 { } } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] int { }",
  "func ID ( ) { var ID : [ ] bool var ID : [ ID ( ( - ( false ) ) ) ] [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool call ID ( ) } func ID ( ) : [ ] bool { var ID : [ ] int }",
  "func ID ( ID : [ ] [ ] [ ] [ false * 123 * ( - - ID ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { return ID - ( ( - ID [ ( ID ) ] [ ( ( 123 ) ) ] ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ID ( ) [ ID ( ) [ ( - ( ( ID ) ) ) ] [ - ID ] ] ] int var ID : int } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : [ ( - - ID [ - ( false ) ] [ ID ] ) ] [ ] [ ] [ ] int }",
  "func ID ( ) { print false * ID / false }",
  "func ID ( ID : [ ] [ ] int , ID : bool ) : bool { while 123 + - 123 + ID { } }",
  "func ID ( ) { var ID : [ ] [ ID ( false / true and - true ) ] [ ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool print - true and ( - - ID ( ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( ( - 123 / true - ID + - - ID ) ) ] bool , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : int var ID : [ 123 - - 123 * 123 * ID + - ID ] bool }",
  "func ID ( ID : [ ( false and 123 + - ID [ false ] + ( ID ) and - ( ( ID ) ) ) ] int ) { }",
  "func ID ( ) : int { var ID : int call ID ( ) while - ID - - - - ( ( - - ID ) ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ - ( ID / true and ID and - - ID ) ] int var ID : [ ] int }",
  "func ID ( ID : [ ] int , ID : int ) : int { return - - ID ( false ) }",
  "func ID ( ) : [ ID ( ) [ true != false * ID ( ) ] ] int { }",
  "func ID ( ) : int { var ID : int { var ID : int var ID : [ ( - ID ) ] [ ] [ ] int } }",
  "func ID ( ID : [ ] int , ID : bool , ID : [ ] bool ) { var ID : int var ID : int return ID }",
  "func ID ( ID : int ) : bool { var ID : int var ID : bool } func ID ( ID : int , ID : [ ( ( ( true ) ) ) ] bool , ID : bool ) { }",
  "func ID ( ID : [ ID ( ( ( 123 / ( ( - ID ) ) ) ) ) ] int ) { }",
  "func ID ( ID : [ ] int ) : [ ( 123 * ID ( ) [ ( 123 ) ] * ( - ID ) ) ] [ ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) { print ( ( ( - ID [ - ( ( ( - 123 ) ) ) ] ) ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ( ID [ - ( ID ) ] [ ( - true ) ] ) ] int var ID : [ ] int }",
  "func ID ( ) { var ID : int var ID : int if - ( ID / ( ID ) * ( - ID ) ) { } if ID { } }",
  "func ID ( ID : [ ID [ - ID ( ID / ( ID ) * false ) ] [ ( ( ID ) ) ] ] [ ] [ ] int ) { }",
  "func ID ( ID : bool , ID : bool ) : bool { while ( ID ( - true ) ) { } while - ( - - ID ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int } func ID ( ID : bool ) : [ ( ( - - ( 123 ) ) ) ] bool { }",
  "func ID ( ) { print ( ID [ true != ( 123 ) ] ) ID = true } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool }",
  "func ID ( ) : int { var ID : int ID [ - 123 * ID ( - ID ) * 123 ] = ( ID ) } func ID ( ) { }",
  "func ID ( ID : [ ( ( ( false * - false / ( - ( ( ( ID ) ) ) ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { if - ID * ID ( ( ID ) ) { } }",
  "func ID ( ID : int , ID : [ ] [ ] [ true * true / - 123 != ( false ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : [ - ( ID + ID - ( true ) ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool call ID ( ( ID * ( true ) * - ID ) ) }",
  "func ID ( ID : [ ( true / ( - - 123 * ID ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) { var ID : int while - ( ID ) { } if - ( true ) { } }",
  "func ID ( ID : [ ] int , ID : bool ) : int { var ID : int ID [ ( ( - ( ID ) ) ) ] [ true ] = ID } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : int { { print - false * ID ( ) [ true ] [ 123 ] * ID { } } print ( 123 ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ID * ( - ID ( ) * - - - true / - ID ) ] bool }",
  "func ID ( ID : int ) : bool { call ID ( - - ( - - true * ( true ) / - - true ) ) call ID ( ) }",
  "func ID ( ) : bool { var ID : int call ID ( ) } func ID ( ) { var ID : int var ID : [ ( ( 123 ) ) ] int }",
  "func ID ( ID : [ ( - ID [ ( ID ( ) ) ] [ 123 ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : [ ] int { var ID : bool var ID : int return }",
  "func ID ( ID : bool , ID : bool ) { return }",
  "func ID ( ID : int , ID : int , ID : [ true / ID ( ( true ) ) * - ID ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - ID [ ID ( ) + false / ID * - ID + ID ] ] int ) { }",
  "func ID ( ) { var ID : bool var ID : [ ] int if ( 123 * ID ( ) / true ) { } while false { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : [ ] [ - ID ( ( - 123 ) ) ] [ ] int { }",
  "func ID ( ) { var ID : int var ID : [ ( - - ID [ ID ] [ - - ( ID ) ] ) ] [ ] [ ] bool }",
  "func ID ( ) : bool { var ID : int print ( true * 123 / ( true ) ) print true } func ID ( ) { }",
  "func ID ( ID : [ 123 / ID ( ) [ false / ( ( ID ) ) ] [ - 123 ] ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] int var ID : bool call ID ( ) return }",
  "func ID ( ID : bool ) : int { var ID : bool while ( ID [ ID ] ) { } }",
  "func ID ( ID : int ) { var ID : int var ID : bool } func ID ( ID : bool , ID : int , ID : bool ) { }",
  "func ID ( ID : bool , ID : bool ) : bool { var ID : [ ] int { { ID ( ) = - ID print ( ID ) } while ( false ) { } } while ( ( ( true ) ) ) { } }",
  "func ID ( ID : [ ] int , ID : int , ID : [ - ( ( ( ( false ) ) ) ) ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ) { var ID : [ - - ( - 123 - false / true / ID ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ] int ) : bool { call ID ( ) return true / 123 } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ( ID ( ID ( ) ) ) ] [ ] [ ] int , ID : bool ) { }",
  "func ID ( ) : [ ID ( ) [ ID [ true / - ID ] ] ] int { } func ID ( ) { }",
  "func ID ( ) : [ - ID ( - false * ( ID / ID / - ID ) * - ID ) ] bool { }",
  "func ID ( ) : bool { var ID : bool ID ( ) [ - ( - ID ( ) ) ] [ ID ] = true } func ID ( ) { }",
  "func ID ( ID : int , ID : [ false * ID ( ( ( ( ( - - ID ) ) ) ) ) / ( - ID ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ 123 / ( - ( - - 123 ) ) ] [ ] [ ] [ ] [ ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : bool { } func ID ( ) : bool { var ID : int var ID : bool return false }",
  "func ID ( ID : bool , ID : bool , ID : [ ] int ) : int { return false * ( - false ) * ID }",
  "func ID ( ID : bool ) { var ID : [ - false - ID / false + - ID ] [ ] bool }",
  "func ID ( ) { var ID : int var ID : [ ID ( ) [ ID [ ( ( true ) ) ] ] [ true ] ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] [ 123 != ID [ 123 * - ID ] ] int ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : [ false - ID ( ) [ true ] - ( ( - 123 ) ) ] [ ] [ ] [ ] int ) { }",
  "func ID ( ) { var ID : bool print 123 * ID ( ID ( ) [ - false ] [ - - ( false ) ] ) / 123 call ID ( ) } func ID ( ) { }",
  "func ID ( ) : [ ] bool { if true / 123 + ( - ( ID ) ) + ID { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ true - ID ( - ID ( ) / ( false ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int { } print - ( false - false + ID ) }",
  "func ID ( ) { var ID : int if false * ID [ - ID ( ID ) ] [ ( ID ) ] * - - true { } ID = ID } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int ) { { var ID : int print false - ID + - ID } ID = ( - ID ) } func ID ( ) { }",
  "func ID ( ) { return true + - ( - true * ( ( - true ) ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID - ID ( ( ( ID ) ) ) - - ( - true ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : bool { var ID : int while - - - - false * ( - ID ) { } } func ID ( ) { }",
  "func ID ( ) : [ ( false * - - 123 + 123 / ID ( ) / ID + - ID ) ] bool { }",
  "func ID ( ) { var ID : [ ] int var ID : int { var ID : int var ID : int while true { } } }",
  "func ID ( ID : [ ID [ false != ( - ID ( ) ) ] [ 123 ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ true + ID [ ID [ - ( ( ID ) ) ] [ false ] ] [ ( true ) ] + - true ] int } func ID ( ) { }",
  "func ID ( ID : [ ID ( true >= false / - ID ( ID ) ) ] [ ] [ ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) : [ ] int { var ID : [ ( false ) ] int var ID : bool }",
  "func ID ( ID : [ - - - - ID ( ) / - ( ID ( ) ) ] [ ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ( ( ID [ - ID ] ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int print - false - ( - ID ) if - true { } }",
  "func ID ( ID : int ) : int { var ID : [ ] bool var ID : bool }",
  "func ID ( ) { var ID : int var ID : int { var ID : int var ID : int call ID ( ) ID ( ) = true } }",
  "func ID ( ID : bool , ID : int ) : int { var ID : int { var ID : int if ID ( ) { } { } } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool call ID ( - ( ( - ID ) ) ) } func ID ( ) { }",
  "func ID ( ) { call ID ( false * ID [ ( false - - ( - false ) ) ] ) { } }",
  "func ID ( ) { var ID : bool var ID : bool print ID / ( ( - ( - false ) ) ) * ID }",
  "func ID ( ID : int ) { if ID + - true + false * - false * ( 123 ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : [ ] [ - 123 * ( ID [ - ID ] ) * - ID ] bool { }",
  "func ID ( ID : int , ID : int , ID : bool ) : [ - - ( - 123 / - ID * ID ) ] bool { } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] bool { print true * ( - ( ( ( ( 123 ) ) ) ) ) }",
  "func ID ( ) { var ID : int return } func ID ( ) { var ID : [ ] [ ] [ ID ] bool var ID : [ ] bool }",
  "func ID ( ID : [ ] [ ] bool , ID : int , ID : bool ) : bool { } func ID ( ID : bool , ID : [ ] int ) { }",
  "func ID ( ID : int , ID : bool ) : int { var ID : bool while 123 - - ( ( ID ) ) { } if ( - false ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool return ( - ID [ ID [ - ID ] [ - ( ID ) ] ] ) }",
  "func ID ( ID : int , ID : [ 123 - ID [ ID ( ) * - ID ] [ - - ( - 123 ) ] ] [ ] int , ID : [ ] bool ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : [ ] bool print ID [ - true ] [ ( ( ID ) ) ] } func ID ( ) { }",
  "func ID ( ID : [ ( - ID * 123 / ( 123 * false ) ) ] bool ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : bool if ( - true ) { } }",
  "func ID ( ID : bool , ID : [ 123 + - ( ID [ ID ] ) - - ( true ) ] int , ID : int ) { }",
  "func ID ( ) : [ ] [ ] int { var ID : [ ( false / - 123 ) ] int var ID : int }",
  "func ID ( ) { var ID : bool var ID : bool return }",
  "func ID ( ) : int { var ID : bool var ID : [ ( ID ( ) [ ( - false ) ] [ true ] ) ] int } func ID ( ) { }",
  "func ID ( ) : bool { } func ID ( ID : bool ) : bool { var ID : [ - ( ( true ) ) ] bool }",
  "func ID ( ID : bool ) : int { var ID : [ ] int var ID : bool } func ID ( ID : int ) : bool { }",
  "func ID ( ) : int { var ID : [ ] bool } func ID ( ID : [ ID - ( true ) + ( - - ID ) ] [ ] int ) { }",
  "func ID ( ) { if false - false >= ( false * false ) { } }",
  "func ID ( ) { var ID : [ ] bool ID [ - ID ( ( ID ) ) ] = - - false call ID ( ) }",
  "func ID ( ID : int , ID : int ) : [ ID ( ) [ ID ( 123 ) ] ] int { }",
  "func ID ( ID : [ ] bool , ID : [ ] [ ] [ 123 * - ID [ true ] ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : [ - - true * - ID ( ) [ - ( ( ( - ( ID ) ) ) ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { print ( ID [ ID ( ) * false * - ( 123 ) ] [ - - ID ] ) print true } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] int if ID ( ) * ( false ) / true { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool if ID ( false - ( ID ) + ID ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { call ID ( ) return } func ID ( ID : int ) : int { var ID : bool }",
  "func ID ( ID : bool ) : bool { ID ( ID [ false ] / ID / ID ) = ( ( ID ) ) }",
  "func ID ( ) : [ ID ( ( - 123 / ( 123 ) * true ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool ID ( ) [ - - ( 123 / ( ( - true ) ) * 123 ) ] = - ( false ) } func ID ( ) { }",
  "func ID ( ID : bool ) : int { call ID ( 123 + ( 123 * - - 123 / ( ID ) ) + ( 123 ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int ) { var ID : bool var ID : [ ] bool { var ID : [ ( ( - - true ) ) ] int } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : int call ID ( ) { var ID : bool } return }",
  "func ID ( ID : [ ] [ ] bool , ID : int ) { var ID : bool var ID : bool call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ID ( ) [ 123 / ( ID ) ] [ - ID ] ] bool ) { }",
  "func ID ( ) { var ID : bool return ( ID and ID ( ) [ ( ID ) ] and - ( 123 ) ) }",
  "func ID ( ID : int , ID : [ - - ID ( ) [ ( ( ID ) ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : int } func ID ( ID : bool , ID : bool , ID : [ - 123 ] bool ) { }",
  "func ID ( ) : int { { } return false >= ( 123 - - ID ) }",
  "func ID ( ) { var ID : [ ] int var ID : [ ] bool { ID [ ( - ID ) ] = ID if - ( - false ) { } } ID = ( ( ( false ) ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : int { var ID : int var ID : bool if ( true ) { } call ID ( ) }",
  "func ID ( ID : [ 123 / 123 / ( ( ID ( ) [ - true ] [ ( true ) ] ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool { var ID : [ ] [ ] int var ID : [ ] int print ID while - ID { } } }",
  "func ID ( ID : int , ID : [ 123 * - ( - - ID ( ) [ ( true ) ] [ true ] ) ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int ) { }",
  "func ID ( ID : [ 123 * - ( ( ID ( ( - ID ) ) ) ) / - - ( - ID ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { return - ID [ - 123 * ID ( ) and - false ] [ ID ] } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ( ID ( ) [ ( ID ) ] ) ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : [ true / - ID ( - ID [ - ( ID ) ] [ - ID ] ) ] int , ID : int ) { }",
  "func ID ( ) : bool { return } func ID ( ) : [ ] bool { ID = ID ( ) }",
  "func ID ( ID : bool ) : [ ( ( ID ( ) * ID [ - ( ( - ( ( ( - - ID ) ) ) ) ) ] / ID ) ) ] [ ] int { }",
  "func ID ( ) : int { var ID : int var ID : [ ID [ ( false ) ] ] [ ] [ ] int }",
  "func ID ( ID : bool ) : bool { var ID : int var ID : [ - - ID ( ) [ 123 ] ] int }",
  "func ID ( ID : [ ] int , ID : bool ) : bool { var ID : int var ID : bool while true / ( ( - ( ( ID ) ) ) ) { } }",
  "func ID ( ) { return } func ID ( ) { var ID : int ID ( ( false ) ) = 123 }",
  "func ID ( ID : bool ) : bool { var ID : int var ID : int }",
  "func ID ( ) : bool { var ID : bool }",
  "func ID ( ID : [ ] int , ID : [ ] bool , ID : int ) { var ID : [ ] [ ] [ ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : [ false / - ID ( ) [ - true + ( true ) ] [ true ] * ID ] bool , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { while - ( ( - ( true ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int ID [ ID ( ) [ ID ] ] = ID }",
  "func ID ( ) { var ID : int var ID : int print true + ID [ ( ID ) ] [ - 123 ] }",
  "func ID ( ID : bool , ID : int , ID : bool ) { { print ID [ - ID ] print ID } } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] [ false * ( - 123 or ( ( ID ) ) ) * - 123 ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) { return } func ID ( ) { var ID : int var ID : int { } }",
  "func ID ( ) : bool { var ID : int print - - ( true and ( - 123 ) and true ) ID = true }",
  "func ID ( ID : [ - - 123 / true + 123 - ( ( - ( ID ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ID ( ( true / - ID / - false ) ) ] [ ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int while - ( - true - - 123 ) { } while 123 { } }",
  "func ID ( ) { call ID ( ) ID [ ( false / true - false - - - - ( ( - ID ) ) ) ] = 123 }",
  "func ID ( ID : [ false / ( ( - ID ( ( 123 ) ) ) ) / ( ( false ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { { } print true / - - - ( ID [ - ID ] [ ( - ID ) ] ) / ID } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : bool { call ID ( ) call ID ( - ID ) }",
  "func ID ( ) { while ID ( ( - ID + ID ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int ID [ ID ( 123 + 123 ) ] = 123 } func ID ( ) { }",
  "func ID ( ) : bool { print true or ( false >= - - ID ) ID = - - ( 123 ) } func ID ( ) { }",
  "func ID ( ) { return - ( ID - ( 123 / - - 123 / ( - ID ) ) - ID ) }",
  "func ID ( ID : int , ID : [ true / - false - ( false * ( - ( ID ) ) ) + ID ] int ) { }",
  "func ID ( ID : int , ID : [ ] int , ID : bool ) : bool { print ID [ true ] if ( ( 123 ) ) { } } func ID ( ) { }",
  "func ID ( ) { while - - true * ID [ ( ID ) ] [ - ID ] / - ID { } { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool ) { var ID : int return }",
  "func ID ( ) { print - ( - false + ( true / ( - ( true ) ) ) + ( - - false ) ) while 123 { } } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { return - - - ( ( ( ID ) ) ) }",
  "func ID ( ) { } func ID ( ) : [ ] int { var ID : [ ] bool call ID ( ) }",
  "func ID ( ID : bool ) { var ID : [ ] bool var ID : bool return 123 / false / 123 } func ID ( ) { }",
  "func ID ( ) : int { var ID : int return }",
  "func ID ( ID : bool ) { var ID : bool call ID ( ) return true / - ( 123 ) } func ID ( ) { }",
  "func ID ( ID : [ 123 * - 123 * ( false * 123 * ID [ - 123 ] [ ( ( - ID ) ) ] ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] [ ( - ( true != ( ID ) ) ) ] [ ] int { }",
  "func ID ( ) : [ ( ( - true + ID [ ( 123 ) ] ) ) ] bool { }",
  "func ID ( ) { var ID : bool ID = ID ( ) [ ( - false ) ] [ - ID ] call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ID ( ID ( false ) ) ] int ) { }",
  "func ID ( ID : [ false and - - ID [ false - - true + - ( ( true ) ) ] and - ID ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ false + ID [ ID ( ID ( ) ) ] + true ] int ) { }",
  "func ID ( ID : [ ] int , ID : bool ) { return - ID [ true * ID ] [ ( ID ) ] }",
  "func ID ( ) : int { var ID : bool return false * true * false - ( ID ) + ( false ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : int if - ( ID ( - - - ( ( ( true ) ) ) ) ) { } }",
  "func ID ( ID : int , ID : int , ID : int ) : bool { var ID : int var ID : bool }",
  "func ID ( ) : [ ] int { var ID : bool var ID : int return ID / - ID [ ID ] / ID }",
  "func ID ( ID : [ ] [ 123 * ID ( - ID [ ( - ID ) ] [ true ] ) / true ] int ) { }",
  "func ID ( ) { if ID [ ( ( ( - true ) ) ) ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool call ID ( ( ID [ - ID ] [ true ] ) ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : bool var ID : [ ] [ - ( ID ) ] int }",
  "func ID ( ) : [ ID * true - ID + 123 or - - - ID ] int { } func ID ( ) { }",
  "func ID ( ID : [ ID ( false or - - - ID or ( 123 ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) { call ID ( ) }",
  "func ID ( ) { var ID : int var ID : bool while false / false * false - 123 * false / ( - true ) { } }",
  "func ID ( ) : bool { var ID : [ ] [ ] [ ] [ ] [ 123 - - ( true ) ] [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : int return } func ID ( ID : bool ) : int { var ID : int while ID { } }",
  "func ID ( ID : int , ID : [ - ( false / ID ( ) [ ID ] [ - false ] * ( - ( ID ) ) ) ] int , ID : int ) { }",
  "func ID ( ID : int ) : bool { call ID ( ID / ( false * ID / - ID ) ) }",
  "func ID ( ) : [ true * ( ( false * ( ( ID ) ) ) ) ] int { }",
  "func ID ( ) : bool { var ID : bool { var ID : int var ID : bool call ID ( ) { var ID : bool var ID : [ ] bool } } }",
  "func ID ( ID : int ) : [ ] bool { while ( ID / ( ID ) ) { } }",
  "func ID ( ) : bool { var ID : [ ID ( true / 123 or ID ) ] [ ] bool }",
  "func ID ( ) { var ID : int call ID ( ) print ID [ - ( - ID ) ] } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ - false - true + ( - ( ID ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool } func ID ( ) { var ID : bool { var ID : bool return } print ID }",
  "func ID ( ) { var ID : bool print false / ( ID ( ) [ - ( 123 ) ] ) / ( - ( ( ( ( ( false ) ) ) ) ) ) }",
  "func ID ( ID : bool ) { call ID ( ) while false >= ( ( ( false ) ) ) { } }",
  "func ID ( ) { var ID : bool var ID : int { var ID : [ ] bool } { var ID : bool var ID : [ ] [ ] int } }",
  "func ID ( ) : int { var ID : int { var ID : [ ] bool } print ID ( ) [ ID ] } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ ] int , ID : int ) { var ID : [ - ID ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool ID ( ( ID + ( 123 ) + ID ) ) = ( ID ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ] bool var ID : bool while ( - 123 ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) { } func ID ( ) : bool { var ID : int var ID : bool { var ID : int var ID : [ ] bool } }",
  "func ID ( ID : [ ] bool , ID : [ ID [ - - - 123 * ID ] ] int ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : [ - ID [ true / ( ( - true ) ) ] [ ID ] ] int var ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ( false / ( - - ( ( - ID ) ) ) / - - ID ) ] bool }",
  "func ID ( ID : int ) { var ID : [ - ( - - 123 * ( ID ) / ID ) ] int var ID : bool } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : int { call ID ( ) print ( ID [ - true ] [ - - ID ] ) }",
  "func ID ( ) { var ID : [ ] [ ] [ - ID [ ID ( ) ] ] int var ID : [ ] int }",
  "func ID ( ) { var ID : bool } func ID ( ) { var ID : bool }",
  "func ID ( ) : [ ID ( false * false / ID ( 123 ) ) ] [ ] bool { }",
  "func ID ( ) : int { var ID : int var ID : bool call ID ( ) }",
  "func ID ( ) : int { var ID : bool var ID : int } func ID ( ID : int , ID : bool ) { call ID ( ) }",
  "func ID ( ID : bool , ID : bool , ID : int ) : bool { { while ID [ 123 ] [ ( false ) ] { } } if ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool , ID : [ ] [ ] bool ) : int { var ID : [ ] int var ID : bool }",
  "func ID ( ) : int { var ID : bool ID ( ID < - - ID ( ) ) = ID call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool { var ID : int while true + true / 123 * ( ( ID ) ) { } } ID = ID }",
  "func ID ( ID : int , ID : int ) : bool { ID = false / - ID ( ) [ true ] } func ID ( ) { }",
  "func ID ( ) { return ID ( ) [ ( true / ( ( 123 ) ) ) ] }",
  "func ID ( ID : bool , ID : [ ] int ) : int { return ( ID * ( - ( - ( - - true ) ) ) ) }",
  "func ID ( ) { var ID : bool var ID : int { var ID : [ - ( 123 ) ] bool } print 123 } func ID ( ) { }",
  "func ID ( ) { var ID : int } func ID ( ID : int , ID : [ ] int , ID : bool ) : int { var ID : int }",
  "func ID ( ID : bool ) { var ID : int var ID : int { var ID : int } { var ID : [ ID ] [ ] [ ] int } }",
  "func ID ( ) : int { var ID : int { var ID : [ ] [ ] bool { if ID { } print ID } ID = ID } }",
  "func ID ( ID : [ - ID * - false - true + true * ID / - ID ] [ ] bool ) { }",
  "func ID ( ID : [ ] int ) : [ - ( - - 123 * true * ID ) ] int { }",
  "func ID ( ) : bool { var ID : [ ] [ ( 123 / true / - false ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool }",
  "func ID ( ID : int ) { var ID : [ ] int return 123 > - ( ID ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : int { var ID : bool var ID : [ ID ( ) / - ( ( ( ( ( 123 ) ) ) ) ) * ID ] int }",
  "func ID ( ID : bool , ID : int , ID : [ ] int ) : bool { var ID : bool var ID : [ ] bool }",
  "func ID ( ) : bool { ID [ false * ( ( ID ) ) ] = ID call ID ( ) }",
  "func ID ( ID : [ ( - ID ( ) - ( ( false ) ) - ID ) ] bool ) { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : bool var ID : int call ID ( - ( false ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool ) { call ID ( ) return }",
  "func ID ( ID : [ true != ( ID [ true / ( - ( 123 ) ) / ( ( ( 123 ) ) ) ] ) ] bool ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ID ( - - true and ( 123 ) and false ) ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ( 123 - false * ID [ - ( ( - ( ID ) ) ) ] [ true ] * ID ) ] int ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { var ID : int var ID : bool while ID [ ID ] [ ( ID ) ] { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] bool return - false / - ( ID ) / ( false ) }",
  "func ID ( ) { call ID ( ) while ( - - - - 123 - - - ID ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( - 123 * ( - - true ) * ( 123 ) ) ] bool var ID : bool }",
  "func ID ( ID : [ ( ID ( ID [ 123 ] [ 123 ] ) ) ] int ) { }",
  "func ID ( ) { call ID ( ) while - ( ( ID ( ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : int ) : int { } func ID ( ) { var ID : int call ID ( true * ( ID ) ) }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { } func ID ( ID : bool , ID : [ ] bool ) { var ID : int }",
  "func ID ( ID : int , ID : [ ] [ ] [ 123 * - - - - true < ID ] [ ] [ ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { while - ( ( false / false + true ) ) { } print ( false ) }",
  "func ID ( ID : bool , ID : [ ID [ ( - - - false / ID * 123 ) ] [ ( - ( ID ) ) ] ] bool , ID : bool ) { }",
  "func ID ( ) { var ID : bool while - false / ID ( ) [ ( 123 ) ] { } ID = - - true }",
  "func ID ( ID : [ ID ( ) and 123 / - true + true / true - ( ID ) ] [ ] [ ] bool ) { }",
  "func ID ( ID : [ ( ( ID ( ID ( ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool , ID : bool ) { var ID : bool ID [ ( false ) ] [ ID ] = ( ( - false ) ) print - - false }",
  "func ID ( ) { print ID ( - ( ( ( - false ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] bool ) { var ID : int call ID ( ) return }",
  "func ID ( ID : bool , ID : bool ) { var ID : int var ID : int return }",
  "func ID ( ID : [ ] [ ID [ - ID [ 123 / ID ] [ false ] ] ] [ ] [ ] int ) { }",
  "func ID ( ID : [ ID * ( ID ( ID * true * ID ) ) * 123 ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool print ( - - ( ( ( ( ( true ) ) ) ) ) ) }",
  "func ID ( ID : [ ] int ) { var ID : int var ID : bool while ( - - true ) { } ID = ID } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int , ID : bool , ID : [ ] [ ] [ ] int ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool while - - - ( - - true ) { } }",
  "func ID ( ) : bool { while ( - true ) * false / ( - true ) { } { } } func ID ( ) { }",
  "func ID ( ID : [ ID ( ( true / - - ( ID ) / ( - false ) ) ) ] [ ] int ) { }",
  "func ID ( ) { call ID ( ) } func ID ( ID : int , ID : bool , ID : bool ) : bool { var ID : [ ] bool }",
  "func ID ( ID : bool ) { var ID : [ - ID [ true / ( - ID ) ] ] int } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] [ false != - - ( true / false ) ] int { } func ID ( ) { }",
  "func ID ( ID : bool ) { call ID ( - ID ( ) [ ( false ) ] ) while - ( - - - ID ) { } }",
  "func ID ( ID : bool , ID : bool ) : bool { ID ( ID / ID [ - false ] [ true ] * - - - 123 ) = ( ( ( ( ( - true ) ) ) ) ) if ( true ) { } }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ID ( ) * - ID ( ID ) ] bool }",
  "func ID ( ) : bool { call ID ( ID / - true * true + ID * ( 123 ) / - ( - true ) ) print ID }",
  "func ID ( ) { var ID : bool if ID [ true / - ID ( - ( - false ) ) / 123 ] [ - ID ] { } }",
  "func ID ( ID : [ 123 != true + 123 / ( - - false ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int { while ID / ( - ( ID ) ) { } } } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : int call ID ( ID [ ( ID ) ] [ 123 ] ) call ID ( ) }",
  "func ID ( ) : [ ] int { var ID : [ ] bool { var ID : bool ID ( ( ( false ) ) ) = - ID while - ID { } } } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int ) { var ID : int var ID : bool while ID - true { } { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] int ) : int { while ( ID ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : int } func ID ( ID : [ ID ( ) [ ( ( 123 ) ) ] [ 123 ] ] int ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : [ ID [ - ( - - false ) ] ] bool { }",
  "func ID ( ) : int { print - ( - 123 - - ( false ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : [ ( true - - ID [ ID ] ) ] bool { } func ID ( ) { }",
  "func ID ( ID : bool ) : int { print false <= ( false / - false ) if false { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : bool print - - ( false - ID ) print ID }",
  "func ID ( ) : bool { var ID : int var ID : int return } func ID ( ) : bool { if ID { } }",
  "func ID ( ) : [ ] [ ] bool { var ID : int var ID : int ID ( ) [ ID ] [ - ID ] = - false while ( ID ) { } }",
  "func ID ( ID : int , ID : [ ] [ ] [ ] bool ) { print ( false ) print ( 123 ) } func ID ( ) { }",
  "func ID ( ID : [ false / false ] int , ID : int , ID : bool ) : [ false ] int { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : bool ) : [ ] int { var ID : int call ID ( ) return ( true ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] bool ) : int { ID [ ( ID ) ] = true call ID ( ) } func ID ( ) { }",
  "func ID ( ) { while ID ( 123 * ID ( ( ( true ) ) ) * ( - ID ) ) { } } func ID ( ) { }",
  "func ID ( ) : [ false * ( - false * ID [ ID ] [ ( ( true ) ) ] / ( false ) ) * ( ( - ( 123 ) ) ) ] bool { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : int { var ID : int ID [ false * ( 123 ) / true ] = ID } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int while ID [ 123 or false or true ] { } { } } func ID ( ) { }",
  "func ID ( ) { ID = ID [ 123 <= ID ( ) * ( false ) ] [ ( - ID ) ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : bool return ID ( ) [ - ID ] }",
  "func ID ( ID : [ ] [ ( - - ( ( ID ) ) ) ] [ ] int ) { }",
  "func ID ( ) : int { var ID : bool var ID : [ ] bool ID [ ID ( false ) ] = ID } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool , ID : bool ) : bool { var ID : bool if - ID { } print ( false ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool while - ID ( 123 + ( true ) ) { } }",
  "func ID ( ID : int , ID : [ ] [ ID + 123 - ID [ ( - false ) ] [ 123 ] ] int , ID : [ ] int ) { }",
  "func ID ( ID : int , ID : [ ] [ ] int ) { } func ID ( ) : int { var ID : [ ID ] [ ] bool }",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : [ false == - - ( - - - 123 ) ] [ ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int if ( - true / false * ID ) { } }",
  "func ID ( ID : bool ) : int { var ID : int var ID : int } func ID ( ) : bool { return }",
  "func ID ( ) : bool { print ( ( ( - ( true ) ) ) ) if ID { } } func ID ( ) { }",
  "func ID ( ) { return } func ID ( ID : bool , ID : bool ) { var ID : bool }",
  "func ID ( ) : bool { var ID : int var ID : [ ] [ ] bool return }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : bool var ID : int }",
  "func ID ( ID : [ - - ( false - ( ( - true ) ) ) ] int ) { }",
  "func ID ( ) { var ID : int while ( ( ID ( false ) ) ) { } }",
  "func ID ( ID : bool , ID : [ ] int , ID : [ - false + - ID ( ) * - 123 * true - false ] bool ) { }",
  "func ID ( ) : bool { while - ID ( ID [ ( false ) ] ) { } }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ID : int while ID / true / - ID { } print ID }",
  "func ID ( ID : int , ID : int , ID : int ) : bool { var ID : int var ID : bool } func ID ( ID : int , ID : int , ID : bool ) { }",
  "func ID ( ID : bool , ID : bool ) : bool { call ID ( 123 - ( ( false ) ) - false ) } func ID ( ) { }",
  "func ID ( ID : [ 123 - ID [ false / 123 * ( false ) ] [ ID ] + true ] [ ] int ) { }",
  "func ID ( ) { var ID : [ ID ( ( ( ID ) ) ) ] bool }",
  "func ID ( ) : [ ] int { var ID : int var ID : int } func ID ( ID : [ ( ID ) ] int ) { }",
  "func ID ( ) : int { var ID : [ ID [ ( ( - false ) ) ] [ 123 ] ] bool var ID : int }",
  "func ID ( ID : [ ID ( ) [ - false * ( - ID ) ] ] [ ] bool ) { }",
  "func ID ( ) { var ID : bool var ID : int call ID ( ) ID ( ) = ID ( ) [ ( true ) ] }",
  "func ID ( ID : [ true - ( ID ( ( ID ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : bool { { var ID : int } ID ( ID ) = ( 123 ) } func ID ( ) { }",
  "func ID ( ) { var ID : int while true * ID [ ( ID ) ] [ ( ( ID ) ) ] { } print false } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : int var ID : int print ID ( ID ) }",
  "func ID ( ID : int , ID : [ ] bool , ID : bool ) : bool { call ID ( ( false ) ) call ID ( ) }",
  "func ID ( ID : int , ID : int , ID : bool ) { ID ( ( - ( 123 ) ) ) = ( ID ) print ( ( true ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { var ID : int ID [ ( ( ID ) ) ] = - - ID while 123 { } }",
  "func ID ( ) : bool { var ID : int var ID : int ID [ ( - false * - - true / ( ID ) ) ] [ - ID ] = ( ID ) { } } func ID ( ) { }",
  "func ID ( ) { ID [ - - 123 / ( ( - - - - ID ) ) * true ] [ ( - false ) ] = - ID { } } func ID ( ) { }",
  "func ID ( ) { ID [ - ID ( ( ( - - ID ) ) ) ] [ ID ] = false } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ] int ) : int { { var ID : bool var ID : int } ID = - ( 123 ) } func ID ( ) { }",
  "func ID ( ) { call ID ( ) { while - - ID [ - 123 ] [ false ] { } } }",
  "func ID ( ID : bool , ID : int , ID : [ ] int ) : bool { var ID : [ ID ( ) [ ID ] ] [ ] [ ] [ ] [ ] bool }",
  "func ID ( ID : int ) { var ID : int print - - 123 - ( false / ID ) - - ID while 123 { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ false / false / 123 + ID / - true * true + ( - - ( ( ( - - ( true ) ) ) ) ) ] int var ID : [ ] int }",
  "func ID ( ID : int ) { var ID : int { var ID : [ ID ( ) [ ( ( ( ( ID ) ) ) ) ] [ - - ID ] ] int var ID : int } if - ( ( ( - true ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool ) { } func ID ( ) : [ ] bool { if 123 { } }",
  "func ID ( ) { var ID : [ ] [ ( true / true * true - - - false ) ] bool }",
  "func ID ( ID : [ ] bool , ID : bool ) : [ ] [ ( ID [ - ID ] [ true ] ) ] int { }",
  "func ID ( ID : [ - ( ( ID ( ) [ - ID ] ) ) ] int ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : int ) : int { while 123 / ( ( true ) ) * true { } }",
  "func ID ( ) : [ ID ( ID ( true / ID + ID ) ) ] bool { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { if ( false * false - ( ID ) - - - ( ( ID ) ) ) { } { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool } func ID ( ) { var ID : [ ID [ ( - ID ) ] ] bool }",
  "func ID ( ) : [ ] [ - - ID ( ) [ ( - ( ( false ) ) ) ] ] [ ] int { }",
  "func ID ( ID : int , ID : bool , ID : int ) { print ( ( ( ( ( ( - false ) ) ) ) ) ) }",
  "func ID ( ) { var ID : bool var ID : [ ] [ - ( - ( ( ( ( - 123 ) ) ) ) ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ] int return ( false / true or ID or true ) }",
  "func ID ( ID : [ 123 <= ID + ( ID ( ID ) ) - true ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool if 123 - - true / 123 * true { } if - true { } } func ID ( ) { }",
  "func ID ( ) : [ ] [ ( 123 * - ( true * ( ( 123 ) ) / - ID ) ) ] bool { }",
  "func ID ( ID : bool ) { var ID : bool { var ID : bool } ID ( - - ( true ) ) = ( ( - false ) ) }",
  "func ID ( ) { var ID : [ ] int var ID : [ ] [ ID [ false / ID / - ID ] ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( ID ( ID ( ID ) ) ) ID = - ID } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : bool call ID ( ) return }",
  "func ID ( ) { ID ( - false / ( ID ( ) [ 123 ] ) / ID ) = ID }",
  "func ID ( ) { print ID ( - 123 * ( ID ) ) }",
  "func ID ( ID : bool ) { var ID : bool return } func ID ( ) : [ ] bool { }",
  "func ID ( ) : int { var ID : int var ID : int call ID ( ) ID [ 123 + ( ( ID ) ) - ( ID ) ] [ ID ] = - ID } func ID ( ) { }",
  "func ID ( ) : [ - ID ( ID ( ) * true and ( true ) ) ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int } func ID ( ) : [ ] [ 123 / true ] int { }",
  "func ID ( ) : bool { var ID : [ ( ( - ID ( true ) ) ) ] bool var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { var ID : bool var ID : int { } } func ID ( ID : [ ] [ ] [ ] int ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { var ID : [ ] [ ] int var ID : int } func ID ( ) { }",
  "func ID ( ) : int { var ID : int { ID ( false / ( - false ) / false ) = - - true if - - - - ( - - ID ) { } } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : int { var ID : int var ID : [ ] bool return ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ID * ( - ID / true ) * - ID ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : int if false + ID [ 123 ] { } { } }",
  "func ID ( ) { { print ID ( ) [ ID [ ( true ) ] ] } ID = - ( - 123 ) }",
  "func ID ( ) { ID [ false * ( false + 123 * - ID ) / ( - - ( ( - - - false ) ) ) ] [ ID ] = - ( - ( false ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool ID [ true * ID ( ) - ID ( ) ] = 123 } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] int print ID ( ) [ - - ID ] [ ID ] } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : [ ] bool if ID ( ) [ false ] [ - ( true ) ] { } ID = ID } func ID ( ) { }",
  "func ID ( ID : [ ID ( true / true * - ID or true ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ false - false / ID [ true ] * - false ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : int print - ( - - ID ) while 123 { } } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) : bool { var ID : [ ID ( ) [ 123 ] ] [ ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : int while 123 / true / false - ( ( true ) ) { } }",
  "func ID ( ) : [ - - - ( ID ( ID ( ) [ false ] ) ) ] int { }",
  "func ID ( ID : int ) : int { var ID : int var ID : bool }",
  "func ID ( ID : bool ) { var ID : [ ] int } func ID ( ID : int , ID : int ) { var ID : int }",
  "func ID ( ID : [ ] bool , ID : int ) : int { var ID : bool ID ( ) = 123 * - 123 * false if true { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : int } func ID ( ) : [ ( 123 ) ] int { }",
  "func ID ( ) { var ID : [ false / - - - ( 123 - - 123 ) ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) : [ ID ( ) [ false ] [ ( ( ( - ID ) ) ) ] ] bool { } func ID ( ) { }",
  "func ID ( ) : [ - - ID ( 123 * - - - ( ID ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : [ ] int { var ID : [ ] bool var ID : int } return }",
  "func ID ( ID : bool , ID : [ false / ID ( ) [ false * - - ( ID ) ] [ ID ] ] [ ] int ) { }",
  "func ID ( ) : bool { var ID : [ ] int var ID : bool call ID ( - false * ID ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int call ID ( ) } func ID ( ID : int , ID : [ ID ] [ ] int ) { }",
  "func ID ( ID : bool ) { var ID : bool print ( ( ID ( true ) ) ) print ( false ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int , ID : bool ) : int { var ID : bool var ID : int call ID ( ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) : [ ( 123 > ID ( ( - ID ) ) ) ] bool { }",
  "func ID ( ) : bool { var ID : int var ID : [ ] [ ID [ ID [ - ( ID ) ] ] ] int }",
  "func ID ( ) { var ID : int print ( true * 123 >= true / 123 ) } func ID ( ) { }",
  "func ID ( ) : [ ] int { while - - true + - - - 123 - 123 { } { } }",
  "func ID ( ) { var ID : int var ID : [ ID ( ) [ ( false ) ] [ ID ] ] [ ] int }",
  "func ID ( ID : int , ID : int ) : [ ] int { var ID : bool } func ID ( ID : int ) { var ID : int var ID : bool }",
  "func ID ( ID : int , ID : [ ] int , ID : bool ) { var ID : bool var ID : int print ( false ) } func ID ( ) { }",
  "func ID ( ) { { if ( true * ID * 123 + ( ( ( true ) ) ) ) { } } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) { { var ID : [ ] [ ] [ ( ( - true ) ) ] bool var ID : [ ] int } }",
  "func ID ( ID : bool , ID : int ) : [ ] int { call ID ( ) if ID [ ID ] [ false ] { } } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) : int { var ID : [ true / ID [ ( ( 123 ) ) ] ] bool }",
  "func ID ( ) : bool { var ID : int if ID - ID [ ( ( - - ( ID ) ) ) ] + ( true ) { } }",
  "func ID ( ) : int { { if ID ( ) - - - - - ID ( ) + ID { } print - ID } } func ID ( ) { }",
  "func ID ( ) { var ID : bool ID [ ID [ true + 123 + true ] [ - - - 123 ] ] [ ( ( ( ( true ) ) ) ) ] = - ( ID ) } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] bool { var ID : bool ID [ ( - 123 ) ] [ ( - 123 ) ] = false }",
  "func ID ( ) { var ID : [ - - ( ( ( 123 ) ) ) ] [ ] [ ] bool var ID : int }",
  "func ID ( ) { ID = 123 * 123 * ID [ ID ( ( ( ID ) ) ) ] while - ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ - ( - ( - ( - - ID ) ) ) ] int ) { }",
  "func ID ( ) : [ 123 * false + ( false / false == ID ) ] [ ] bool { }",
  "func ID ( ID : int , ID : bool ) { return ( - ( ( - ID ) ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ - - ID ( ) * true * - true + true ] int ) { }",
  "func ID ( ) { return } func ID ( ID : int , ID : [ ( - 123 + - ( ID ) + - false ) ] [ ] int ) { }",
  "func ID ( ) : [ ] int { var ID : [ ] [ ] [ ID * ID ( ID ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int return ( ID ( ) [ ( false ) ] [ 123 ] ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] int var ID : int ID [ ( - ID ) ] [ 123 ] = ( ( - ( ( 123 ) ) ) ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool while 123 * ( true / ID ( ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool return true >= 123 - ( ( ID ) ) - - - ( ( false ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int while false == true / - ID [ ( 123 ) ] / ID { } print ID }",
  "func ID ( ID : [ ( ( true < ( ( ID ) ) ) ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) { if ID [ ID ( - ( - - ( ( true ) ) ) ) ] [ - ( 123 ) ] { } }",
  "func ID ( ID : [ - - - ( ID [ ID * ( true ) ] [ ( ( ( ( ID ) ) ) ) ] ) ] bool ) { }",
  "func ID ( ) : bool { return } func ID ( ) : [ ] bool { var ID : bool var ID : [ ID ] int }",
  "func ID ( ID : int , ID : [ - 123 * - false / ( true - ID ) ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ) : int { while true / false or - ID ( ) [ false ] [ false ] or ( - 123 ) { } }",
  "func ID ( ID : [ 123 + ID [ false / ID ( false ) / false ] [ 123 ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ] [ false / ID ( 123 * ID [ true ] * ID ) / - ID ] bool { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool var ID : int print true + 123 * - ID } func ID ( ) { }",
  "func ID ( ID : bool ) : [ true / ID ( true / ID ( 123 ) * ID ) ] [ ] bool { }",
  "func ID ( ) { if 123 / ID [ - ( ID [ - - ID ] [ true ] ) ] [ ID ] { } { } }",
  "func ID ( ) : bool { var ID : int var ID : [ ] [ 123 <= ID ( true ) ] bool }",
  "func ID ( ) { call ID ( ( ( ( - ID ) ) ) ) }",
  "func ID ( ID : int , ID : [ ] bool , ID : int ) : bool { var ID : int var ID : [ ID ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int if ( true * ID [ - ( ( ( 123 ) ) ) ] * true ) { } }",
  "func ID ( ) : bool { } func ID ( ) { var ID : [ ] bool var ID : bool if - 123 { } }",
  "func ID ( ID : int , ID : [ ID ( ) [ false / false / ( ID ) ] ] bool , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int if ID [ ID ( ) [ ( true ) ] ] [ - ( true ) ] { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : [ ( ( false * ( ID [ - ID ] [ 123 ] ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) { return 123 >= ID ( ID ( ) [ ( 123 ) ] ) } func ID ( ) { }",
  "func ID ( ) : int { { var ID : bool while ID ( ) * - ( false ) { } } call ID ( ) }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool }",
  "func ID ( ) : int { while ID + - ( ( ( ID ) ) ) { } ID = - ( ID ) }",
  "func ID ( ID : bool ) : [ - ID / ( - true / - 123 - - ( ( ( ( ID ) ) ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : int } func ID ( ) : int { var ID : bool call ID ( ) }",
  "func ID ( ID : [ ID ( - ID [ 123 / - ( - false ) ] ) ] [ ] int ) { }",
  "func ID ( ID : int ) { print - ID [ - ( ID ) ] [ ID ] }",
  "func ID ( ID : [ ] [ ] int ) { var ID : [ 123 / - ID ( ) * ( ID ) ] [ ] bool var ID : [ ] int }",
  "func ID ( ) { if ID ( ) [ - ID ( ID ) ] [ ( ( - false ) ) ] { } } func ID ( ) { }",
  "func ID ( ) : [ true / true and 123 / ( ( ID ) ) / ID ] int { } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool } func ID ( ID : int , ID : [ ] [ true ] int , ID : int ) { }",
  "func ID ( ID : [ ] [ - ( - ID ( ( - 123 ) ) ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int ID = ID [ - ( ID ) ] [ ( - ID ) ] } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int return } func ID ( ID : bool , ID : int ) { var ID : int }",
  "func ID ( ID : int , ID : [ 123 * ( ( - - ( false ) ) ) * 123 ] int , ID : [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { print - ID [ - ( - - - ID ) ] [ ID ] }",
  "func ID ( ) { var ID : [ - ( ( ID ( ) [ 123 ] ) ) ] int }",
  "func ID ( ID : [ ( ID * false > - - ( ID ) ) ] bool ) { }",
  "func ID ( ) : bool { var ID : int return ID ( - ( - - ID ) ) }",
  "func ID ( ) { var ID : int ID ( - ID ( ) [ ( ( ( ID ) ) ) ] ) = 123 ID = - 123 } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int ) { var ID : bool var ID : [ ID [ 123 ] ] [ ] bool }",
  "func ID ( ID : int ) { if ID - - ( ID / ID / - 123 ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ - - ( ( true / - ( - 123 ) ) ) ] [ ] bool }",
  "func ID ( ) { var ID : bool { var ID : bool return ( ID ( ) [ ( - ID ) ] ) } print ID } func ID ( ) { }",
  "func ID ( ) : [ - ( - ID ( ID [ - ( true ) ] [ ( ( ID ) ) ] ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : int var ID : bool return 123 * ID / ( ID ) }",
  "func ID ( ) : bool { var ID : int print ( 123 - ID ( ) [ - ID ] ) if - ( ID ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int print ( ID [ ID ( ) * false ] ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) : bool { while ( ( ID ) ) { } { } }",
  "func ID ( ID : [ ] [ true * true - - ( ( ( ID ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : [ ID - true - ( ( ID ) ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ID : bool var ID : bool call ID ( ) { { } } } func ID ( ) { }",
  "func ID ( ) { var ID : bool } func ID ( ID : int , ID : bool ) : bool { var ID : [ false ] int }",
  "func ID ( ) { var ID : bool var ID : [ ] int print ( - 123 / true ) if - ( - 123 ) { } } func ID ( ) { }",
  "func ID ( ) { } func ID ( ) : [ ID [ 123 * - - true * ( 123 ) ] ] int { }",
  "func ID ( ID : bool , ID : int , ID : [ ID [ 123 + - ( ID ) + ID ] [ 123 ] ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] [ ] bool call ID ( 123 - ( - 123 ) ) { } }",
  "func ID ( ID : [ ( ID ( ) / ( - ( ID ) ) ) ] bool ) { }",
  "func ID ( ) { ID ( - - - ID ( true * ID ) ) = ( ( true ) ) { } } func ID ( ) { }",
  "func ID ( ) { print ( ( ( ID ( ( - ( ID ) ) ) ) ) ) print ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : [ 123 * 123 / ( ( ID ) ) ] [ ] [ ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : int { } }",
  "func ID ( ) : int { var ID : [ ] [ ] [ ] bool var ID : int if ID ( ) { } }",
  "func ID ( ) : [ ( - - ID [ false * false / 123 ] [ ( ( - ID ) ) ] ) ] int { } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] int { var ID : bool var ID : int } func ID ( ID : [ ] bool , ID : bool , ID : [ ] bool ) { }",
  "func ID ( ) : bool { var ID : [ false * true * ( true * 123 ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ( 123 or - - ( ID ) ) ] bool }",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) { var ID : [ ] bool var ID : bool return - false } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : [ - ID / ID / - ID ] [ ] bool , ID : int ) { }",
  "func ID ( ID : bool , ID : int ) { { ID [ ID ( ) [ true ] ] [ true ] = 123 } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : int { var ID : [ - true / - ID * ID ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID ( ) * ID ( ) * - 123 >= true ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool } func ID ( ) { var ID : int while - - - ( true ) { } }",
  "func ID ( ID : int , ID : [ ID * - true - ID * - - - - ( ( - 123 ) ) ] [ ] int , ID : int ) { }",
  "func ID ( ID : bool ) : bool { var ID : int var ID : bool if ID ( ID ) { } } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : bool { var ID : [ ( ( - false ) ) ] bool } { } }",
  "func ID ( ) : [ - ( ( - - 123 * false - - ( ( - - ID ) ) - 123 ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : [ false / ( ID [ - true * ID ] ) ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : int return } func ID ( ) { var ID : bool var ID : [ ] bool }",
  "func ID ( ) : [ ] int { var ID : bool } func ID ( ID : bool , ID : bool , ID : int ) : int { var ID : int var ID : int }",
  "func ID ( ) { var ID : bool var ID : [ true and - 123 - 123 * ID / - 123 and false ] int }",
  "func ID ( ID : [ ID ( - ID ( ) [ ID [ ( - true ) ] ] ) ] bool ) { }",
  "func ID ( ) : bool { if 123 * - ID / false + 123 == false { } print 123 } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : bool }",
  "func ID ( ) : [ ] bool { var ID : int print 123 - true / ID [ ( ( ID ) ) ] [ ID ] } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : bool { var ID : bool if ( true ) { } } }",
  "func ID ( ID : [ ( ID ( ) and ID ( ) / ( ID ) * true and - ( ( ( ( ( - ( - - ( ( 123 ) ) ) ) ) ) ) ) ) ] [ ] [ ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool { var ID : bool var ID : [ ( ( ID ) ) ] bool } while ( ID ) { } }",
  "func ID ( ) { var ID : bool var ID : bool ID = ( - ID * ( true ) ) while false { } } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ - - - ID * - ( - true ) ] [ - true ] ] [ ] int ) { }",
  "func ID ( ID : [ ] [ false - ID ( ID [ ID ] [ ( false ) ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ID ( ) * ( ID ( ( ( ( - - - ID ) ) ) ) ) ] int { }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ID : int var ID : bool while ( false ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { { var ID : [ ] bool var ID : [ false ] int } ID = ( ( ( - - 123 ) ) ) }",
  "func ID ( ) { var ID : int if ID [ ( true * false ) ] [ ( ( ( ID ) ) ) ] { } }",
  "func ID ( ) : bool { if false + ID ( ( ( - 123 ) ) ) - ID { } { } } func ID ( ) { }",
  "func ID ( ) : [ ] bool { return ID / true + 123 / ( false ) * ID } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : int if ID [ ( ID ) ] [ - 123 ] { } }",
  "func ID ( ) { { var ID : bool var ID : int print ( ( ID ) ) while true { } } } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ ] [ ] [ false * 123 + ID ( ) + ID ] bool ) { }",
  "func ID ( ID : bool ) : int { var ID : int var ID : [ ] [ ] int ID ( ) = ( ( ID ) ) }",
  "func ID ( ) { var ID : int var ID : int while ( ( false - - ID - - ( ID ) ) ) { } }",
  "func ID ( ID : int , ID : int ) { var ID : [ ID ( ) [ ID [ ID ] ] ] bool var ID : int }",
  "func ID ( ID : int , ID : [ ] bool ) : bool { var ID : [ ] bool call ID ( ID ) call ID ( ) }",
  "func ID ( ID : int ) { return 123 / false * 123 - ( false - ( - ID ) + - ID ) + ID } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] int { var ID : [ - false or 123 * 123 / - - ( false ) ] bool var ID : bool }",
  "func ID ( ID : bool , ID : [ ( ( false <= - - ID ) ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( ID [ ( 123 / ( 123 ) / true ) ] ) while ( ( - ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID [ ( ID [ false ] ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : [ ] bool { var ID : int return } func ID ( ID : int , ID : int ) { }",
  "func ID ( ID : [ ] bool ) : int { var ID : int var ID : [ - ID ( ) [ ( ( ID ) ) ] [ 123 ] ] int } func ID ( ) { }",
  "func ID ( ) { var ID : bool while 123 < ID [ - ID [ - true ] [ false ] ] [ ID ] { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool , ID : [ ( ID ( ( ID ) ) ) ] int ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ] [ ] bool ) { if ( ( - 123 ) ) { } ID = ID }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ID : [ ] bool print true * - - ( ID ) / 123 } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : int } func ID ( ) : int { var ID : bool var ID : bool call ID ( ) while - ( ID ) { } }",
  "func ID ( ) { var ID : int var ID : int call ID ( ) print ( true / - - ID / false ) }",
  "func ID ( ID : [ ] int , ID : bool ) : bool { var ID : [ ( ID [ ID ] ) ] [ ] [ ] int var ID : [ ] [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int var ID : [ ] bool print 123 * - ID [ ( ID ) ] [ ID ] } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : int { var ID : int var ID : int return ( ID ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] int , ID : int ) { }",
  "func ID ( ID : [ ] [ ] bool ) : bool { var ID : [ ] [ false and true ] int }",
  "func ID ( ) : bool { { var ID : int { { var ID : bool var ID : int call ID ( false ) ID = - ( - - ID ) } } } while - false { } }",
  "func ID ( ID : int ) : [ ID ( ID [ - 123 ] ) ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool , ID : int ) : [ ] int { var ID : bool if ID { } { } }",
  "func ID ( ) { var ID : [ ] int var ID : bool return ID [ ( false ) ] }",
  "func ID ( ) { while false * ( ( 123 + ( - - ( false ) ) + - ( ID ) ) ) { } }",
  "func ID ( ) : [ ( ( - ( false / true * - ( 123 ) ) ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID : [ ] [ ( ( true ) ) ] [ ] [ ] bool }",
  "func ID ( ID : int ) : [ ] int { var ID : int call ID ( ) call ID ( ID ( ) ) } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : int var ID : bool ID ( false * - ID ) = ( - - ID ) } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : bool var ID : bool return - 123 * 123 * ID } func ID ( ) { }",
  "func ID ( ) { var ID : bool if ( - - - false * false > true ) { } print ID }",
  "func ID ( ID : [ ID [ 123 - false / - ID [ 123 ] [ - ID ] / - - ID ] [ ( ID ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ID * ( - ( - 123 / - - - ( 123 ) / ( ID ) ) ) * - ( - ID ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : int var ID : bool } func ID ( ) { var ID : bool var ID : int }",
  "func ID ( ) { while - ID ( ) [ ( - false / ID ) ] [ ID ] { } }",
  "func ID ( ID : int , ID : [ ] bool , ID : bool ) { var ID : int var ID : bool ID = - - ( ( 123 ) ) }",
  "func ID ( ) : int { var ID : int { } return }",
  "func ID ( ) { var ID : bool while true - - - - ID ( ) [ ( false ) ] [ - ( ID ) ] { } if - - false { } }",
  "func ID ( ) : int { var ID : bool var ID : int return ( ( ID ) ) }",
  "func ID ( ) { var ID : [ ] bool var ID : [ - true * ID / false and ( ID ) ] int }",
  "func ID ( ID : bool ) : bool { } func ID ( ID : int , ID : int ) : bool { if true { } { } }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : int { var ID : bool var ID : [ ] bool { var ID : int } if 123 { } }",
  "func ID ( ID : int , ID : [ false ] int ) { var ID : [ ( ( 123 ) ) ] [ ] bool }",
  "func ID ( ) { var ID : int var ID : bool return ( - ( ( - - ID ) ) ) }",
  "func ID ( ID : int , ID : int , ID : [ true / false - - true / true - - ID ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { { var ID : int return ( ID [ ID ] [ ( ( - - ( ( ( ID ) ) ) ) ) ] ) } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool print ID ( ID ( ) [ ( ( - - ( - - ID ) ) ) ] [ ( 123 ) ] ) }",
  "func ID ( ID : int , ID : bool , ID : [ ] [ ] bool ) : bool { var ID : int var ID : int }",
  "func ID ( ID : int , ID : [ ( - ( - true * ID ( ) ) ) ] [ ] [ ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] int { var ID : int var ID : int return ( - - - true ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ false * true * ( ID ( ) ) ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ ( - ( ( ID ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ( ( ID ( ) or - ( false ) ) ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : bool var ID : [ 123 + - - ID ] [ ] int } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : int ID [ ( ID [ false ] [ 123 ] ) ] [ ( 123 ) ] = ID }",
  "func ID ( ID : bool , ID : [ ID <= ID ( ) [ - ( ID ) ] [ false ] ] bool , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int print - 123 + ( ID / ( ID ) * true ) - - - ( - false ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : int { var ID : [ ] int } }",
  "func ID ( ) { var ID : [ true * - ID ( ) [ ( ID ) ] ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool return } func ID ( ) { return }",
  "func ID ( ID : int , ID : bool , ID : bool ) : int { }",
  "func ID ( ID : [ 123 - ID * - ID ( false <= ( ID ) ) * ID + - ID ] int ) { }",
  "func ID ( ) : [ ] bool { if - - - ( - ( ID ) ) { } if - ID { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ( 123 / ID ( ID ) ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ 123 * ( ( true / - - ( 123 ) ) ) * ( - - ( ( ( ID ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : int var ID : int if 123 - - ID ( ) + ( ( ID ) ) { } print ID } func ID ( ) { }",
  "func ID ( ) : [ ] [ ( - ID ( ID [ false ] ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool ) { var ID : [ ] [ ] int var ID : [ ] [ ( ID ) ] bool } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : int var ID : [ ID ( ) [ 123 ] [ - false ] ] bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] int { var ID : int var ID : [ ] [ ] int { } } }",
  "func ID ( ID : [ ] [ 123 + false / - - true or ( 123 ) ] int ) { }",
  "func ID ( ID : [ ] int , ID : bool ) { var ID : [ ] [ ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : [ ] int print ID / - 123 / ( ID ) }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : [ ( ( ID ) ) ] [ ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : bool call ID ( ) while - - ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) { ID = ID [ ID / ID [ ( 123 ) ] [ ID ] * ( ID ) ] [ false ] }",
  "func ID ( ID : bool ) { var ID : bool return } func ID ( ID : [ ] [ 123 - ID ] [ ] int ) { }",
  "func ID ( ) { while ID [ ( ( false + - 123 - ID ) ) ] { } } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] [ ] bool { var ID : [ ( false * - ( ID ) * true ) ] int }",
  "func ID ( ) : [ ID ( ) and ( ( ID ( ) ) ) and ID ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool } func ID ( ) { var ID : [ ] int while - ID { } while - ID { } }",
  "func ID ( ) { var ID : int if ID [ ID ( true ) ] { } print ID }",
  "func ID ( ID : [ ] int , ID : [ true + ID / ( true ) ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ] bool while - - ID ( ID ) { } if false { } }",
  "func ID ( ) { return true * - 123 - ID [ ( ( - ID ) ) ] [ ( ( ID ) ) ] + true }",
  "func ID ( ) : [ - false - - ( true / 123 - ( ID ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : [ ] int { var ID : int var ID : [ ] [ ID ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : int { var ID : bool var ID : int } if ( ( - ( ID ) ) ) { } }",
  "func ID ( ) : int { var ID : [ ] [ ] [ ( ID ( ID ) ) ] int }",
  "func ID ( ID : [ ] [ ] [ - ID [ ID ( ) [ 123 ] [ - false ] ] ] bool ) { }",
  "func ID ( ID : int , ID : bool ) : [ ID ( - ( ID ) ) ] bool { }",
  "func ID ( ) { var ID : [ ID / - ID ( false / ( false ) ) / 123 ] bool var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( 123 * ( true / - ID ) ) ID = - ID }",
  "func ID ( ) { var ID : int var ID : bool } func ID ( ) { var ID : int var ID : int }",
  "func ID ( ) : [ ] int { call ID ( ) }",
  "func ID ( ) { var ID : bool ID ( ) = ( ( ID [ ID ] [ - - - ( true ) ] ) ) print - ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : bool var ID : int while ID ( ID ) { } if ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID ( ) [ ID ( ) [ ( ID ) ] [ false ] ] [ ( true ) ] ] bool ) { }",
  "func ID ( ) : [ false * ID ( ) - ID [ - ( - ( - - ( 123 ) ) ) ] ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ( true + false * - ( - ( - ( ID ) ) ) ) ] [ ] int ) { }",
  "func ID ( ID : [ ID [ ( ID ( ) - ID + - ID ) ] [ ( ID ) ] ] int ) { }",
  "func ID ( ID : int ) : [ ( - ID * - - ID ( ID ) * ID ) ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : bool call ID ( ) { } return true + ( ( ( 123 ) ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : [ - ( - ID ( 123 ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( 123 * ID ( ) [ - ( - ( - ID ) ) ] [ false ] * - 123 ) ] int var ID : int }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ID : [ ] bool var ID : bool call ID ( ) }",
  "func ID ( ID : [ ] bool , ID : int , ID : int ) { var ID : [ ] [ - - 123 ] int }",
  "func ID ( ID : bool , ID : int , ID : [ ] int ) : bool { var ID : int var ID : int while ID { } }",
  "func ID ( ) { call ID ( ) call ID ( ( ID ( - - true ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ - ID [ ID ( ) [ ID ] [ - 123 ] ] ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool call ID ( ) call ID ( - ( ID ( ( ID ) ) ) ) }",
  "func ID ( ) : [ ] bool { while ID ( true / ( - true ) / 123 ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ true / ( ( ( 123 ) ) ) ] bool ) { }",
  "func ID ( ID : bool ) : bool { var ID : [ - ID ( ) - - false - ( ( - ID ) ) ] bool }",
  "func ID ( ID : [ ] [ ] [ ID ( ) - ID - ID or 123 or - ID ] bool ) { }",
  "func ID ( ID : [ ] [ 123 / true != - false / true * - ( - ( ID ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : [ ] int { var ID : bool var ID : int while ID { } } func ID ( ) { }",
  "func ID ( ) { if - ( ( - - false - ( ID ) - true ) ) { } print false } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) { ID = 123 / false / ( false ) while ID { } } func ID ( ) { }",
  "func ID ( ID : [ - ID ( ) [ - false * ( ID ) ] [ false ] ] bool ) { }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] int if true * - - - ID { } call ID ( ) }",
  "func ID ( ) { var ID : int var ID : bool ID [ ID * ID ( ) [ true ] / ID ] = true }",
  "func ID ( ) { { var ID : int var ID : bool ID ( ) [ 123 / ID / ( ( true ) ) ] = - - ID } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : [ 123 - ( ID ) - false ] [ ] bool var ID : int }",
  "func ID ( ) : int { } func ID ( ID : [ ] int ) : int { var ID : bool var ID : int call ID ( ) }",
  "func ID ( ID : int , ID : bool ) : bool { { var ID : int if - - ( ( ( - - ID ) ) ) { } } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] [ - ID ( ) * - ID ( ) [ ( - 123 ) ] [ ID ] ] [ ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ ( ID ( - - - - - true ) ) ] [ ] bool ) { }",
  "func ID ( ID : int , ID : [ - ID [ ( false and ( ( - ( ( ID ) ) ) ) ) ] ] bool ) { }",
  "func ID ( ID : int ) { if false + 123 * - 123 - true / ( - ( - ID ) ) * ( ID ) { } { } } func ID ( ) { }",
  "func ID ( ) { ID [ ( ID [ ID [ ID ] [ true ] ] [ ID ] ) ] [ ID ] = false }",
  "func ID ( ID : [ ] bool ) { } func ID ( ID : [ ] [ ] [ ] bool , ID : bool , ID : [ ] bool ) { }",
  "func ID ( ID : bool , ID : [ ] int , ID : bool ) { var ID : bool { var ID : int } ID ( ) = ( ( - 123 ) ) }",
  "func ID ( ID : bool ) { var ID : bool } func ID ( ID : bool ) : [ ] int { var ID : int { } if 123 { } }",
  "func ID ( ID : bool , ID : [ ] int , ID : bool ) : [ ] [ ] bool { var ID : int var ID : bool while ( 123 ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( ID [ true + ID - ID ] ) ] [ ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : bool return } func ID ( ) { var ID : int var ID : int while ( - - - ( ID ) ) { } if ID { } }",
  "func ID ( ) : int { var ID : [ ] [ ] bool var ID : bool return }",
  "func ID ( ) : int { var ID : int var ID : int ID [ true - ID [ - ( - ( - true ) ) ] ] [ ID ] = - true } func ID ( ) { }",
  "func ID ( ) { var ID : [ false / 123 / true >= ( - false ) ] [ ] [ ] [ ] [ ] int var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ID : int ) { { var ID : [ ] bool ID [ - ( ( ( ID ) ) ) ] [ 123 ] = ID { } } }",
  "func ID ( ) { return } func ID ( ) { return }",
  "func ID ( ) : int { var ID : [ ] bool return ( ID [ ID ] [ ID ] ) }",
  "func ID ( ) { var ID : [ true / 123 / ID ( ID [ ID ] [ 123 ] ) ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : int if true - ( ( - ( - ID ) ) ) { } ID = false }",
  "func ID ( ID : [ ] [ 123 != ( 123 * - ( ID ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ( ( 123 * ( ( false ) ) ) ) ] int }",
  "func ID ( ID : int , ID : int ) { var ID : bool var ID : bool }",
  "func ID ( ID : [ ID [ ( ( ID [ - ( ID ) ] [ ( 123 ) ] ) ) ] [ - 123 ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int call ID ( - ID ( ) + - 123 - ( ID ) ) }",
  "func ID ( ) { var ID : [ ] int var ID : bool while - true / ( false ) { } } func ID ( ) { }",
  "func ID ( ID : [ 123 * 123 / ID ( ) [ - 123 / ( - ID ) * ( - ID ) ] [ ID ] ] int ) { }",
  "func ID ( ID : [ ] int , ID : bool ) : [ ( ID [ ( ID ) ] ) ] [ ] int { }",
  "func ID ( ) { if - ID [ true < ( ID ) ] { } print ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ) : [ - ( false / false + ID * ID ( - - false ) ) ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : [ ( - ( - 123 * - 123 * ( ( ID ) ) ) ) ] bool { }",
  "func ID ( ) : [ ] int { var ID : int print true * true / 123 + ( ID ) + ID } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ] [ ] int return } func ID ( ID : [ 123 ] int ) { }",
  "func ID ( ) { var ID : bool ID = ( - ID [ ID ] [ false ] ) print ( ( ID ) ) }",
  "func ID ( ) : int { var ID : int var ID : bool }",
  "func ID ( ) { return true + ( ID [ ID ( ID ) ] ) }",
  "func ID ( ID : [ ] bool , ID : int , ID : int ) : bool { var ID : [ ( 123 ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : [ false + true * true / ( ( - - ( 123 ) ) ) ] int ) { }",
  "func ID ( ) : bool { call ID ( ) }",
  "func ID ( ) { var ID : [ ] [ - ID ( ) [ false or - ID ] ] [ ] bool var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : int { var ID : int var ID : bool return }",
  "func ID ( ID : bool , ID : bool ) : bool { if ( 123 * ID ( ( - - ( false ) ) ) ) { } }",
  "func ID ( ID : bool , ID : int , ID : [ ] [ ID [ - ( ( - 123 ) ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool } func ID ( ) : bool { var ID : bool var ID : [ - ID ] bool }",
  "func ID ( ID : int ) : bool { var ID : [ ] bool var ID : [ true / 123 >= - - ID ] [ ] int } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool ) : [ ID [ - true * ( ID ) ] ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var ID : bool var ID : int print ID [ ( ID ) ] } func ID ( ) { }",
  "func ID ( ) : bool { print - - - - - false * ID ( true ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { var ID : int }",
  "func ID ( ) { var ID : [ ] int print ID ( ( ID ) ) }",
  "func ID ( ) : int { print - ( ID * ( ID [ ID ] ) ) }",
  "func ID ( ) : [ ] int { var ID : [ ( ( ID ( ) ) ) ] bool }",
  "func ID ( ID : int ) { var ID : int return 123 - ID ( ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool while true > 123 * ID ( false ) / 123 { } }",
  "func ID ( ID : int , ID : [ - 123 / - ID ( ) [ - ( true ) ] [ ID ] ] int , ID : bool ) { }",
  "func ID ( ID : [ ] [ - false * ID * ( ID ( ) [ - ID ] [ - - ( - - ( 123 ) ) ] ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ - ID ( ) [ 123 * ( ( - - - true ) ) ] ] [ ] [ ] bool }",
  "func ID ( ID : bool , ID : [ ] int , ID : int ) : int { var ID : int var ID : int return } func ID ( ID : [ ] [ ] int ) { }",
  "func ID ( ) { return ID [ - ID [ ID ( ( true ) ) ] ] [ - - true ] } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ true + true / - - ( - ID ) / ID ] [ ] [ ] bool var ID : int }",
  "func ID ( ID : [ ] int , ID : bool ) { var ID : bool var ID : int call ID ( 123 >= false ) }",
  "func ID ( ) : int { var ID : bool var ID : bool { if - - ( - ( ( ID ) ) ) { } } call ID ( ) }",
  "func ID ( ID : int ) { var ID : int var ID : [ ] int { var ID : int var ID : int while - 123 { } print ID } call ID ( ) }",
  "func ID ( ID : bool , ID : bool ) { var ID : int var ID : bool ID ( ) = true * ( 123 ) if ID { } }",
  "func ID ( ID : int ) : bool { var ID : [ ] [ ( - ID [ - ID ] ) ] [ ] bool var ID : [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool return }",
  "func ID ( ) { } func ID ( ) { var ID : [ ( ( - - - true ) ) ] [ ] int }",
  "func ID ( ) { var ID : [ ] int var ID : [ ] int return - ID * ID ( ) }",
  "func ID ( ID : [ ] [ true / true < 123 / ( ID ) * - - ID ] int ) { }",
  "func ID ( ) : [ ] int { var ID : bool call ID ( 123 * ( ( ID ) ) / ID ) ID = - - ( true ) }",
  "func ID ( ) { ID [ - 123 + - ( ID [ - 123 ] [ - false ] ) ] [ true ] = ID ID = ID }",
  "func ID ( ) { var ID : bool var ID : bool if ( ( ( true ) ) ) { } { } }",
  "func ID ( ID : [ ( ( false / - ID ( - true ) ) ) ] int ) { }",
  "func ID ( ) : int { var ID : bool while ( ( 123 / ( ( true ) ) ) ) { } ID = - ID } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : [ ID ( ) [ - - ( 123 ) ] [ ( ( true ) ) ] ] int { }",
  "func ID ( ID : int , ID : bool ) : [ 123 + false / ID / - ID - ID ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { ID [ ID ( ) [ - ID ] [ ID ] ] = ID }",
  "func ID ( ) : [ ] bool { var ID : [ true * true - - ( ID ) ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int print - false / ( ID [ - - true ] ) if - - - ID { } }",
  "func ID ( ID : int , ID : int , ID : [ ] int ) : int { var ID : bool return - ( - ID ) } func ID ( ) { }",
  "func ID ( ) : bool { call ID ( - - ( false / - ( ID ) ) ) print false }",
  "func ID ( ID : bool , ID : [ ] int , ID : [ ] [ ID ( ) [ ( ID ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) : bool { return }",
  "func ID ( ID : int , ID : bool ) { var ID : bool var ID : bool return } func ID ( ID : bool , ID : bool ) { }",
  "func ID ( ID : [ ] bool , ID : bool , ID : [ ID * - - - - true / ID ] int ) { } func ID ( ) { }",
  "func ID ( ) { print ID ( ) [ 123 / false * ( ID ) ] [ ID ] if ID { } } func ID ( ) { }",
  "func ID ( ) { ID ( ID [ ID ( ( - false ) ) ] ) = - false }",
  "func ID ( ID : [ ] bool , ID : [ false / false / 123 + - - - - ( - ( ( ID ) ) ) + 123 ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ - - ID ( ) [ - ( ( false ) ) ] ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] int var ID : bool { var ID : [ ID [ - true ] [ - true ] ] [ ] int } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : int ID ( ID / - true ) = - ( ( - ID ) ) } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ true / 123 * ( ID [ ID ] [ ID ] ) ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : bool { var ID : [ ] [ ] [ ] [ ( ID ) ] int var ID : [ ] int }",
  "func ID ( ) { return - - ID ( 123 or - 123 * ID ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : [ ] [ ] int { var ID : int var ID : [ ( ( ( ( ( - - ( - true ) ) ) ) ) ) ] int }",
  "func ID ( ) { var ID : [ ] bool if ( 123 * - - - ID / false ) { } } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : int var ID : int { print ( true ) call ID ( ) } ID = ID }",
  "func ID ( ID : bool , ID : int ) : int { var ID : int var ID : int }",
  "func ID ( ) : [ ] int { return } func ID ( ID : [ ] [ ID ( - - true ) ] bool ) { }",
  "func ID ( ) { var ID : int var ID : [ ] [ - - ID ( ) [ ( ID ) ] [ ( ID ) ] ] int }",
  "func ID ( ) { return } func ID ( ID : bool ) { var ID : int }",
  "func ID ( ID : [ ] [ ] [ ID ( ) / ID ( ( - ID ) ) / - ( - ( - 123 ) ) ] [ ] int ) { }",
  "func ID ( ID : [ ( 123 / 123 or ( - false ) ) ] int ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool var ID : int call ID ( - false * ID / - - false ) if false { } } func ID ( ) { }",
  "func ID ( ) : int { while ID ( false - 123 - ID ) { } print 123 } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ID [ false * ID ( ) [ ID ] / - ( ( false ) ) ] ] bool } func ID ( ) { }",
  "func ID ( ) : int { return ID + - ( - false - ID - ID ) + ( false ) }",
  "func ID ( ID : int , ID : bool , ID : [ ID ( ) [ true / ( ( ( - true ) ) ) * ID ] [ - ( ( ( ID ) ) ) ] ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ - 123 < true / false * ( - 123 ) ] int var ID : int }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ] bool var ID : bool return ( ( - 123 ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : [ ( - ID ( ) and - ( ( ( ( true ) ) ) ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ] [ ( ID ( ) [ - ( ( - false ) ) ] [ ( ID ) ] ) ] [ ] int { }",
  "func ID ( ) : int { var ID : [ ] [ ID / false * ( ID ) ] [ ] int }",
  "func ID ( ID : int ) : [ ] bool { var ID : bool ID = ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { while ID [ - false / ( ( - false ) ) * - - ID ] { } while 123 { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : bool , ID : [ ] int ) { var ID : bool { var ID : [ ] [ ] int } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : int } func ID ( ) : int { var ID : int var ID : bool print - - 123 }",
  "func ID ( ) { var ID : bool var ID : bool { var ID : bool return 123 / ID / ID } print - ID } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool { var ID : bool } while ID ( ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] [ ] [ 123 / false / ID or ID ] int var ID : int }",
  "func ID ( ) : int { var ID : int { var ID : int ID [ ID [ ID ] ] = false } }",
  "func ID ( ID : int ) : int { call ID ( ID [ false / ID [ - ( false ) ] [ - ( ( ID ) ) ] * ( ( false ) ) ] [ ( ( true ) ) ] ) ID = false }",
  "func ID ( ID : [ ] int , ID : bool , ID : bool ) { var ID : int ID [ ( false ) ] = - ID { } }",
  "func ID ( ) : [ ] [ - ( ID ( true / ID ) ) ] [ ] [ ] bool { }",
  "func ID ( ) { var ID : [ false * ID ( - ( - ID ) ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ) : [ ( - ( ( ( 123 ) ) ) ) ] int { }",
  "func ID ( ID : [ ] int , ID : [ ] [ 123 * true * - ( true ) ] int , ID : int ) { }",
  "func ID ( ID : bool ) { var ID : int } func ID ( ID : bool ) { var ID : int }",
  "func ID ( ID : [ ( - ID ( ID ( 123 ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : [ - ( - - ( - ( ID ) ) ) ] bool }",
  "func ID ( ) { var ID : int var ID : [ ] int { var ID : [ 123 / ID * - 123 ] bool var ID : bool } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ] int var ID : int call ID ( ) print true - ( - - ( false ) ) }",
  "func ID ( ) : int { while ID ( ID [ - ( ( ( - ID ) ) ) ] ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ( true / false == true / ( ID ) * 123 ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : bool { var ID : bool if - - ( ( - - ID ) ) { } call ID ( ) } } func ID ( ) { }",
  "func ID ( ) { print 123 / true - ( ID [ ( - ( ID ) ) ] ) if ( - true ) { } } func ID ( ) { }",
  "func ID ( ID : [ ( 123 > ID ( ID - ( 123 ) + false ) ) ] [ ] bool ) { }",
  "func ID ( ) : int { var ID : bool var ID : int } func ID ( ) : [ ID ( - ID ) ] int { }",
  "func ID ( ) : [ ( ( - - - ( - true ) ) ) ] bool { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { ID [ 123 / 123 + ID - ( ( - false ) ) ] = 123 }",
  "func ID ( ) { { var ID : int var ID : [ ] bool while ID [ - false ] [ false ] { } } }",
  "func ID ( ) : bool { while - true + 123 or ID ( ) [ ID ] [ ID ] { } }",
  "func ID ( ) : int { { return } } func ID ( ) : [ ( ID ) ] int { }",
  "func ID ( ID : [ false - true / ( 123 and - ID and ( ( ID ) ) ) / false - true ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool call ID ( ) call ID ( ) return ID [ ( true ) ] [ false ] }",
  "func ID ( ) : [ - ( ID ( ) * false - ( - false ) ) ] [ ] int { }",
  "func ID ( ) : bool { var ID : bool ID ( ID / true * ID - - ID ) = - ID call ID ( ) }",
  "func ID ( ) : [ ] int { print - ( ( false * false * 123 ) ) }",
  "func ID ( ) { var ID : bool var ID : int return ( ( ID ( true ) ) ) }",
  "func ID ( ) : bool { var ID : [ - ( true / false / false - ( 123 ) ) ] int } func ID ( ) { }",
  "func ID ( ) { { var ID : [ false * - ( ID * ID / - ( true ) ) * ( true ) ] [ ] int } }",
  "func ID ( ID : int ) { var ID : [ false / ID ( - - ID ) * ( - ID ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ true / - - true and false * ID ( ) ] [ ] int }",
  "func ID ( ) : int { var ID : [ ] [ 123 / - - 123 * ID ( ) [ - - true ] ] int var ID : bool }",
  "func ID ( ID : int , ID : [ - ID [ ID ( ID ) ] [ ( true ) ] ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] bool ID [ - ID - ( ( - ( - ID ) ) ) ] = ( ( - true ) ) { } } func ID ( ) { }",
  "func ID ( ) { { var ID : [ ] bool var ID : [ ] [ 123 / ( ID ) ] bool } }",
  "func ID ( ) { var ID : [ ] [ 123 - ID ( ) [ - - - 123 ] [ ( - ID ) ] ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : [ ] int while false + - - - ID { } }",
  "func ID ( ID : [ ] bool ) : bool { var ID : int var ID : int print ID ( ID ) print ID } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int while ( ( 123 / 123 * ( ID ) ) ) { } }",
  "func ID ( ) : [ ] [ ( - ID [ - false + ( false ) + false ] ) ] int { }",
  "func ID ( ) : int { var ID : bool print true + ( ID [ - false ] ) - - 123 }",
  "func ID ( ) : int { } func ID ( ) : bool { ID ( ) = - false / - false / ( ID ) if true { } }",
  "func ID ( ID : [ ] int , ID : bool , ID : [ - ( - false / - ( - true ) * ID ) ] bool ) { }",
  "func ID ( ID : [ - false - false - - false * ID != 123 ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : [ ] [ ( - ID ( ) ) ] bool }",
  "func ID ( ) : [ ] bool { } func ID ( ID : bool , ID : bool ) { var ID : [ ID ] [ ] int var ID : bool }",
  "func ID ( ID : bool ) : int { var ID : [ ] [ ] bool var ID : bool return ( ID ) }",
  "func ID ( ) { var ID : bool var ID : [ ] int { var ID : [ ] [ ] bool var ID : int print - false while - ID { } } while false { } } func ID ( ) { }",
  "func ID ( ID : int ) { return }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : int var ID : [ - false * ID ] bool }",
  "func ID ( ID : bool , ID : int , ID : int ) : int { var ID : int var ID : bool print - ( 123 ) ID = ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) { } func ID ( ID : bool , ID : [ ( 123 ) ] int ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ ( false - false + ID ) ] [ ] [ ] int var ID : bool }",
  "func ID ( ID : bool , ID : bool , ID : [ ] int ) { while true * - ( ( - ID ) ) { } } func ID ( ) { }",
  "func ID ( ) : [ - ID ( - 123 / true * ( - ( ( ID ) ) ) ) ] [ ] int { }",
  "func ID ( ) { var ID : bool ID ( ) [ ( false * ID [ 123 ] [ 123 ] ) ] [ - ( - ID ) ] = ( ID ) { } }",
  "func ID ( ) { var ID : bool var ID : bool if - ID / ( - ID ) / ID { } }",
  "func ID ( ) : [ ] int { var ID : int var ID : int }",
  "func ID ( ) : bool { var ID : [ ] [ ] bool }",
  "func ID ( ) { var ID : bool var ID : bool { while ID [ false * - ( - false ) * ID ] { } if true { } } } func ID ( ) { }",
  "func ID ( ) { while ( ( ( ( - false ) ) ) ) { } }",
  "func ID ( ) : int { return } func ID ( ID : bool ) { var ID : int var ID : int while - 123 { } }",
  "func ID ( ) : bool { } func ID ( ID : bool , ID : bool , ID : [ 123 * ID [ 123 ] ] bool ) { }",
  "func ID ( ) { { } return - - 123 / ( ID ( ) [ - - ID ] ) }",
  "func ID ( ID : int , ID : bool , ID : [ ] [ - ID ( ) [ ( ID ) ] [ - - ID ] ] int ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : int { var ID : bool var ID : [ - ( ID ) ] int } ID = ID } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool call ID ( ) print - ( false * - false / false ) }",
  "func ID ( ) { var ID : int var ID : [ ] int while ( ID [ - ( ( true ) ) ] ) { } } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] int { return - - ID / - ID [ ID ] }",
  "func ID ( ID : bool , ID : bool ) { var ID : int while - ( - - - - ( ID ) ) { } }",
  "func ID ( ID : int ) { var ID : bool call ID ( ) }",
  "func ID ( ) : bool { call ID ( ( - false - ID + true ) ) }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { var ID : [ true / ( ID ) ] bool }",
  "func ID ( ) : [ ] bool { var ID : int }",
  "func ID ( ) : [ - ( ID * true - ( ( ( ID ) ) ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ ( ( - ID [ ID ] ) ) ] bool , ID : [ ] int ) { }",
  "func ID ( ID : [ ] [ false / true <= ID * 123 + ID ( ) - - ( ( ( true ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ false * ( ( 123 / ID ( true ) * ( true ) ) ) * 123 ] bool { }",
  "func ID ( ID : [ ] [ ] [ ] bool ) : [ ] int { var ID : [ - ( ID ) ] [ ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - ( ( false * ( ID ) * - - ( ( - 123 ) ) ) ) ] [ ] [ ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ( ID * ID ( ( ( - ( - ( ID ) ) ) ) ) ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool return - ( true / - ID ( 123 ) ) }",
  "func ID ( ) : [ - ID ( 123 / ID ( false / ( ID ) * - ( true ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - true / ID ( ID [ - ( false ) ] ) / false ] bool ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : [ ] bool { var ID : bool var ID : bool if ( ID ) { } while ID { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool , ID : int ) { var ID : [ ] [ - ID ( ) ] [ ] bool }",
  "func ID ( ) { print ID [ false - ( - ID ( ) ) + ( ID ) ] [ true ] call ID ( ) }",
  "func ID ( ID : int , ID : int , ID : bool ) : [ ] [ ] bool { var ID : [ - - false ] [ ] [ ] bool }",
  "func ID ( ID : int ) { var ID : int print false / - ID ( ) [ 123 ] [ - ( - ID ) ] / ( - - 123 ) }",
  "func ID ( ID : [ ] bool , ID : int , ID : bool ) { var ID : bool var ID : [ ] bool return } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : bool return } func ID ( ID : bool , ID : bool , ID : [ ID ] bool ) { }",
  "func ID ( ID : [ ID ( ( - - ID / ( ID ) ) ) ] bool ) { }",
  "func ID ( ID : bool ) : int { return } func ID ( ID : int , ID : [ ] [ ID ] bool ) { }",
  "func ID ( ) { var ID : [ ] bool return ID ( 123 - ( - false ) - ( true ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { var ID : int var ID : [ ] [ ( ID ) ] bool }",
  "func ID ( ) { } func ID ( ID : bool , ID : [ - - true * ( ( ID ) ) * ( ( ( false ) ) ) ] [ ] [ ] bool , ID : bool ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ 123 / - ID [ - ID ] [ ID ] / ID ] [ ] [ ] [ ] int }",
  "func ID ( ) { var ID : [ ] int { var ID : [ ] [ false / ID ( ) ] int } ID = - ( ID ) }",
  "func ID ( ) { return } func ID ( ) : bool { var ID : int var ID : bool { return ( ( ID ) ) } }",
  "func ID ( ID : [ ] bool ) { var ID : [ 123 / ( - ( ID ) ) * ID ] [ ] bool }",
  "func ID ( ) { var ID : int var ID : int if false == 123 * ( - ( ID ) ) { } if ( ID ) { } }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ] int ID [ ID [ ID ] ] = true print ID } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int ) { var ID : [ ] bool var ID : int { return } ID = ID }",
  "func ID ( ) : int { var ID : int var ID : int if - - ( ID [ - ( - 123 ) ] ) { } print true } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool , ID : [ ( ID ( ) [ ID ] ) ] [ ] bool ) { }",
  "func ID ( ) : int { var ID : bool var ID : bool print true * ( ID ( ( false ) ) ) { } }",
  "func ID ( ID : int , ID : [ true ] int ) : bool { var ID : bool var ID : [ ID ] int } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ ( ID [ - 123 / ID ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var ID : bool var ID : [ ] int { var ID : [ ] bool var ID : bool } }",
  "func ID ( ID : bool ) : int { var ID : bool }",
  "func ID ( ID : [ ] int ) : int { var ID : bool var ID : [ ] [ ( true ) ] int }",
  "func ID ( ) { var ID : int call ID ( ) return } func ID ( ) { print ( - ( ID ) ) }",
  "func ID ( ) : bool { } func ID ( ) { var ID : [ ] [ ] [ ] int var ID : bool print ( ( ( ID ) ) ) while ( ( - - 123 ) ) { } }",
  "func ID ( ID : [ ] bool ) : [ ] int { while - ( true / - true / ID ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) : bool { var ID : int while ID ( ) / 123 { } ID = ID } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : bool ID ( ( true + ID ) ) = - ( ( false ) ) } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] [ ( ID + false / - - ( - true ) * 123 ) ] bool { }",
  "func ID ( ID : int , ID : bool , ID : [ - true * - ( ( ID ) ) ] int ) { }",
  "func ID ( ) { var ID : int var ID : [ ] bool { var ID : bool if 123 / ( ( - ( - ( - ID ) ) ) ) / ID { } } }",
  "func ID ( ID : bool , ID : [ - ID ( ID ( ID ) ) ] bool ) { }",
  "func ID ( ID : [ ] bool , ID : [ ( ( ID [ ID ] [ ID ] ) ) ] bool , ID : bool ) { }",
  "func ID ( ID : [ ] [ - ID ( ) [ ID ( ) / 123 - ID + ( - ID ) ] ] bool ) { }",
  "func ID ( ) : [ ] [ ] [ ] bool { var ID : bool var ID : bool if ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ ID [ ( ( - - ID ) ) ] ] [ ] bool ) { }",
  "func ID ( ID : int ) { while - - ID [ 123 / - ( ID ) ] [ - 123 ] { } }",
  "func ID ( ) { return ( - ID * ID ( ) [ false ] * ( ID ) ) } func ID ( ) { }",
  "func ID ( ) { ID = 123 + 123 / ( ( ( true ) ) ) call ID ( ) }",
  "func ID ( ID : int ) : [ ] bool { var ID : int return - ( ( - - false ) ) }",
  "func ID ( ) { ID ( true / - - ID - false - - - true ) = 123 while ( 123 ) { } } func ID ( ) { }",
  "func ID ( ID : [ false and - - 123 * - ID [ ID ] [ ID ] * ID ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { return } func ID ( ) { if - ID ( ) [ ID ] [ ID ] { } call ID ( ) }",
  "func ID ( ) { var ID : [ ] [ ] [ ID [ true and ID and true ] [ false ] ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : [ ( ( ( - 123 ) ) ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID [ ID [ - - - 123 ] ] ] int var ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : bool } func ID ( ) : int { var ID : [ ] int var ID : int if ( - true ) { } print ( ID ) }",
  "func ID ( ID : int , ID : [ ] [ - - ID / - - ID ( - - ID ) / ( ID ) ] int ) { }",
  "func ID ( ID : int , ID : int , ID : [ ] int ) : bool { }",
  "func ID ( ) { var ID : [ - ( ID ( - ID [ ID ] ) ) ] [ ] [ ] [ ] [ ] [ ] [ ] bool }",
  "func ID ( ) : int { var ID : int var ID : bool if ID [ ID ( ) ] { } }",
  "func ID ( ) : int { var ID : bool var ID : int return - ( ( ID ) ) }",
  "func ID ( ID : int , ID : int , ID : bool ) : int { var ID : int var ID : bool return }",
  "func ID ( ID : [ ] int ) { var ID : int { var ID : int var ID : int return } ID = - ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : [ ( ( ID ) ) ] int }",
  "func ID ( ) : int { var ID : bool { var ID : [ ] bool var ID : [ ] bool { var ID : int var ID : [ ] bool } ID = ID } while 123 { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool if ( ID ( ) + true / false * true + true ) { } print 123 } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ( ( - - false <= ID ) ) ] [ ] int }",
  "func ID ( ) { var ID : int print 123 - ( ID [ 123 ] ) }",
  "func ID ( ID : bool , ID : int , ID : int ) { ID [ ID ( ) * ( false ) ] [ ( ( - - - ( ( true ) ) ) ) ] = 123 call ID ( ) }",
  "func ID ( ) { var ID : int var ID : int } func ID ( ID : int , ID : int , ID : [ ] bool ) { var ID : [ ] int }",
  "func ID ( ) { var ID : int { var ID : int if ID [ - ID ] [ ( false ) ] { } } print 123 }",
  "func ID ( ) : int { var ID : bool var ID : int call ID ( ID ( ) [ 123 ] ) }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : bool var ID : int return } func ID ( ID : int , ID : [ ] int , ID : [ ] int ) { }",
  "func ID ( ) { var ID : [ ] [ ] [ ( ( true + - false - - ( false ) ) ) ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool ) { var ID : bool var ID : int return } func ID ( ) { var ID : bool }",
  "func ID ( ) { var ID : [ ] [ ] int var ID : bool call ID ( ID ( ) / - - ID / ( ( true ) ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool ) : [ ] [ ] [ ] [ 123 * ID ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] int return }",
  "func ID ( ) { var ID : [ ID ( ( ID ( - 123 ) ) ) ] int }",
  "func ID ( ID : [ ID ( ID * ID + ( ( ( true ) ) ) ) ] int ) { }",
  "func ID ( ) { var ID : bool var ID : int while - - ( ( true ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ 123 / false / - - ID - ( ( - - - false ) ) ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ID : [ ( false / ( ( ID + ID + - ID ) ) / - ( ID ) ) ] [ ] [ ] int ) { }",
  "func ID ( ) { var ID : [ ( false * - - - ID ( true ) / ID ) ] int var ID : [ ] int }",
  "func ID ( ID : int , ID : [ ] int , ID : [ true / - ID [ ID ] ] bool ) { }",
  "func ID ( ) : int { var ID : [ ] [ ] int var ID : [ ID * - - 123 / ( ( true ) ) ] bool }",
  "func ID ( ID : int , ID : int ) { var ID : int var ID : int call ID ( - ID ( ID ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] [ ] int var ID : [ ] [ ] [ ] [ ( - false ) ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : int } func ID ( ID : int , ID : [ ] int ) { var ID : [ true ] [ ] bool var ID : bool }",
  "func ID ( ) { var ID : [ ( ID ( true * ( ( - - ( ID ) ) ) / - true ) ) ] bool }",
  "func ID ( ID : [ ] [ ] bool ) : [ ] [ ] [ ID ( ) [ ( ID ) ] [ ( ID ) ] ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ] int ) : int { var ID : int call ID ( ) }",
  "func ID ( ) : [ ( ( ID ( ID ( ) ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ) { while - ( ID ( ) [ 123 - - 123 - ID ] ) { } }",
  "func ID ( ) { var ID : [ ] int ID ( ID [ ID ( ) ] ) = ( ( ( - false ) ) ) }",
  "func ID ( ID : int ) : int { }",
  "func ID ( ID : int ) : bool { var ID : bool } func ID ( ) : [ - - ( - ( ID ) ) ] int { }",
  "func ID ( ID : [ true / 123 + false * 123 != true / - 123 * ID ] int ) { }",
  "func ID ( ) : bool { var ID : int var ID : int if ( false * - true - false + 123 ) { } }",
  "func ID ( ) { var ID : bool var ID : int call ID ( ) { var ID : [ ] bool var ID : [ - ID ] bool } } func ID ( ) { }",
  "func ID ( ID : [ false * - 123 / ( ID ( ) [ - true ] [ ( ( ( - ( ID ) ) ) ) ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : [ 123 / - ID [ true ] ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] int var ID : int { var ID : [ ] int while true { } ID = - ( - ID ) } } func ID ( ) { }",
  "func ID ( ID : int ) { if ID / ( ( ID ) ) { } { } } func ID ( ) { }",
  "func ID ( ) { print - 123 return }",
  "func ID ( ) : int { while true + ID ( 123 and ( ID ) and - ID ) + - - - - false { } while ( 123 ) { } }",
  "func ID ( ) { var ID : bool print ( false + ( ( ( ( ( ( ( ( - false ) ) ) ) ) ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : int ) : bool { if - 123 + ID ( ) [ ID ] - ID { } print ID } func ID ( ) { }",
  "func ID ( ) { ID ( ID [ ID [ ( ID ) ] [ - - 123 ] ] ) = ID { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : bool { var ID : int var ID : [ ] int while - ( 123 ) { } call ID ( ) }",
  "func ID ( ID : bool , ID : [ false / ID [ ID ( - ID ) ] / false ] bool ) { }",
  "func ID ( ID : bool , ID : int ) { while ID ( - - - ID [ ID ] ) { } }",
  "func ID ( ) : bool { var ID : bool var ID : int print ID ( ) [ - ID ] { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int , ID : int ) { var ID : bool var ID : bool { var ID : [ ] int } if - ID { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ( true / - - - 123 and false ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( ( ID [ - ( ID ) ] ) ) ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int if 123 / true * - false - - - ID - - ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ true * true * ID ( ) [ - ID ] [ ( - ID ) ] ] bool , ID : [ ] int ) { }",
  "func ID ( ID : int , ID : [ ] int , ID : [ ID [ ID ( ) [ ( ( false ) ) ] [ 123 ] ] ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var ID : [ ] int var ID : [ ] bool ID [ true ] = - 123 } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool var ID : bool if false * false / ( ( - true ) ) { } }",
  "func ID ( ) { call ID ( ) { var ID : bool var ID : int while ( ( ID ) ) { } } }",
  "func ID ( ID : bool , ID : bool ) : int { var ID : bool if ( ( ID ) ) { } ID = - - false } func ID ( ) { }",
  "func ID ( ID : [ ( true / ID ( - ID ( ) ) / ID ) ] int ) { }",
  "func ID ( ID : bool ) : bool { var ID : int var ID : int return }",
  "func ID ( ) { var ID : [ ID ( ID ( ) [ ID ] [ false ] ) ] bool } func ID ( ) { }",
  "func ID ( ) : [ ( 123 * false + ( ID ( ) ) ) ] [ ] bool { }",
  "func ID ( ID : bool , ID : [ ( - ID ( ) [ - 123 ] ) ] int , ID : bool ) { }",
  "func ID ( ) { call ID ( ( ( ID [ - - true ] ) ) ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int while ID ( - - ( ( ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { while ( ( false + ID ) ) { } }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ID [ 123 / ( ID ) ] ] bool } func ID ( ) { }",
  "func ID ( ) { print ( - ID ( ) [ 123 * - - 123 * - - - ( - - ( - ID ) ) ] [ - 123 ] ) } func ID ( ) { }",
  "func ID ( ) : int { { var ID : bool ID [ - ID [ 123 ] [ - - ID ] ] = - 123 } print - false } func ID ( ) { }",
  "func ID ( ) : int { print ID ( ) * ID ( ) [ ID ( ) ] } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool var ID : int return } func ID ( ID : bool , ID : bool , ID : [ ] [ ] bool ) { }",
  "func ID ( ) { var ID : bool if ID ( ) [ ( - ( ID ) ) ] { } call ID ( ) }",
  "func ID ( ID : [ ] int , ID : bool , ID : bool ) { { var ID : int call ID ( ID ) } } func ID ( ) { }",
  "func ID ( ) : int { call ID ( ) while ID [ ( true ) ] { } } func ID ( ) { }",
  "func ID ( ID : [ 123 * - 123 - true / ID ( ) [ 123 ] ] int ) { }",
  "func ID ( ) { var ID : bool var ID : int if - ID and ( - - - - ID ) { } }",
  "func ID ( ) { call ID ( ) return ID * ID ( true != ID ) }",
  "func ID ( ) { var ID : [ ( - ID [ true / ( ( - - - - true ) ) * ( false ) ] [ - ID ] ) ] bool var ID : bool }",
  "func ID ( ID : int , ID : [ ] [ ] bool ) { while 123 + ID ( ID ) + ( - ( ID ) ) { } if 123 { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { } func ID ( ) : int { { var ID : bool var ID : int while 123 { } if false { } } }",
  "func ID ( ) { var ID : [ ] [ ] bool return - ID [ - - - - - false ] }",
  "func ID ( ID : [ ] int ) { var ID : int var ID : int return }",
  "func ID ( ID : [ ] [ ( - true and ( ( - ID ) ) and - ( - - 123 ) ) ] int ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : bool var ID : [ ] [ ] int call ID ( ) call ID ( ) }",
  "func ID ( ) : bool { } func ID ( ID : [ false / true * true - true * ID / - ID + - ( ( ( ( ( - false ) ) ) ) ) ] [ ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ) { var ID : [ ] int } func ID ( ) : [ ] [ - true * 123 / ID ] int { }",
  "func ID ( ID : bool , ID : int , ID : [ true / ID + ID ( ( ID ) ) ] int ) { }",
  "func ID ( ) : bool { var ID : [ ] [ false * ( ID ( ID ) ) ] bool var ID : [ ] bool }",
  "func ID ( ID : int , ID : bool , ID : int ) : bool { var ID : int var ID : int }",
  "func ID ( ) { var ID : int var ID : bool if false + - ( ID [ - ID ] ) { } } func ID ( ) { }",
  "func ID ( ID : int ) : bool { } func ID ( ID : bool , ID : bool ) { var ID : [ ] int call ID ( ) }",
  "func ID ( ) { var ID : int while false * - - - - 123 / ( 123 ) { } while ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : bool { var ID : int if false * false * ( - true ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - ID ( ID ( ) [ ID ] [ ID ] ) ] bool , ID : [ ] [ ] [ ] bool ) { }",
  "func ID ( ID : bool ) : bool { { call ID ( - 123 / - ID or ID ) } if ( ID ) { } }",
  "func ID ( ID : int , ID : [ ] int , ID : [ ] bool ) { ID ( - ID ) = - ( ( - ( false ) ) ) call ID ( ) }",
  "func ID ( ) : [ ] bool { var ID : bool { var ID : bool print - ( ( ID ) ) print ID } ID = - - ID } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : [ ( ID / ID [ ID ] [ - ( ID ) ] ) ] bool var ID : [ ] [ ] [ ] [ ] int }",
  "func ID ( ID : int ) { var ID : [ ( ID ( ) [ false ] ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) { { } } func ID ( ID : int , ID : [ ] int , ID : [ ] int ) { var ID : [ ] bool }",
  "func ID ( ) { } func ID ( ) { var ID : int }",
  "func ID ( ID : int ) : int { if - 123 * - ID ( ( - false ) ) * true { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : int call ID ( ID ( false / ( ID ) ) ) while - ID { } }",
  "func ID ( ) : [ ] bool { var ID : int var ID : int print - ( true / ID ) { } }",
  "func ID ( ) : int { while 123 * 123 * 123 + ID [ ID ] { } call ID ( ) }",
  "func ID ( ID : [ ID ( ID <= ID / false - ( false ) + ( ID ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : bool { var ID : [ true / - - - ( ( ( - ( ( true ) ) ) ) ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : bool ) { } func ID ( ) { call ID ( ID * - ID / true ) }",
  "func ID ( ) : bool { var ID : int var ID : [ - - ( ID ( ) [ - ID ] ) ] bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] int var ID : int if ID ( ) [ ( - false ) ] { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - ID ( ) [ ( ( 123 ) ) ] [ ID ] ] int ) { }",
  "func ID ( ) { if ( ( - ID ( ) [ ID ] ) ) { } ID = ( 123 ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( - ( ( true ) ) ) ] bool , ID : [ ] bool ) { }",
  "func ID ( ) { if - false + ( ( - - - - - ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : int var ID : bool }",
  "func ID ( ) { if 123 * ID [ - - false + true * ID * ( false ) ] * ID { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ( ID [ 123 / - - ID ] ) ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : int var ID : [ ( 123 ) ] [ ] int }",
  "func ID ( ID : int , ID : bool , ID : bool ) : bool { print false / ID [ ID ] [ ID ] } func ID ( ) { }",
  "func ID ( ID : [ 123 * ( true * ID [ - true ] [ - ( - ID ) ] ) ] [ ] int ) { }",
  "func ID ( ) : [ - ( ID ( ) [ true * ID [ ID ] [ ( - 123 ) ] * - ( ( - false ) ) ] ) ] int { }",
  "func ID ( ID : [ ] bool ) { var ID : [ true - ID ( ) + true ] [ ] bool }",
  "func ID ( ID : bool ) : [ ID ( ) [ ID ( - true ) ] [ 123 ] ] [ ] bool { }",
  "func ID ( ) { var ID : [ ] [ ] int var ID : bool call ID ( ) } func ID ( ID : bool ) : [ ] int { }",
  "func ID ( ) { ID [ - ( ID [ ( ID ) ] [ ( ( - - 123 ) ) ] ) ] = true while - 123 { } }",
  "func ID ( ID : int , ID : bool , ID : [ ] [ ID [ ( ( ( - ID ) ) ) ] ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : [ ] int { var ID : [ ] bool var ID : [ ( - 123 ) ] int }",
  "func ID ( ID : bool , ID : bool ) : int { } func ID ( ID : bool , ID : int ) : int { var ID : bool var ID : [ ] bool }",
  "func ID ( ID : bool ) { print false / - - ( ( ID ) ) / ( - false ) }",
  "func ID ( ID : bool ) : bool { return } func ID ( ) { var ID : int }",
  "func ID ( ID : bool , ID : int ) { var ID : bool var ID : int } func ID ( ID : [ ] int , ID : [ ] bool ) { }",
  "func ID ( ID : bool , ID : bool ) { { while ( ID ( ( false ) ) ) { } print ( - false ) } }",
  "func ID ( ) { var ID : bool return ID ( ) / ID ( ) [ - ( - ( true ) ) ] [ - - ( 123 ) ] * false } func ID ( ) { }",
  "func ID ( ) { var ID : [ true * 123 / - ( true / - 123 * ( 123 ) ) ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : bool var ID : bool while ( false / ID ) { } print - ID } func ID ( ) { }",
  "func ID ( ) { print ( ( ( ( ID ) ) ) ) }",
  "func ID ( ID : int , ID : [ - ID ( - - ID ( ID ) ) ] int , ID : [ ] bool ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : bool print - ID [ true ] }",
  "func ID ( ID : int , ID : int ) { var ID : bool if ( ID ( ) [ - ( ( - - 123 ) ) ] ) { } { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ( ID ( ) * ( ( ID ) ) ) ] bool var ID : [ ] int }",
  "func ID ( ) : int { call ID ( 123 * - ( false * ( true ) / 123 ) / - ( true ) ) }",
  "func ID ( ID : [ ( ID ( ) [ ( ( - ID ) ) ] ) ] bool ) { }",
  "func ID ( ID : int ) : [ - ID ( ) [ ( ID ( ) ) ] ] int { } func ID ( ) { }",
  "func ID ( ID : int ) : int { if ( - true * false / - 123 ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) : [ true * ID ( ) [ ID ( ( 123 ) ) ] ] int { } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] int { var ID : [ ] int var ID : int ID ( ) = - 123 ID = ( ( ( false ) ) ) }",
  "func ID ( ) : int { var ID : int var ID : int print - ID ( ( ID ) ) call ID ( ) }",
  "func ID ( ) : int { var ID : [ ( ( ( ( false ) ) ) ) ] [ ] [ ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - false * 123 - ( ID [ ID ] ) ] [ ] bool , ID : int ) { }",
  "func ID ( ) : bool { print - true - ID ( ID * ID * - ( - - ( true ) ) ) print ( ID ) } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] bool { var ID : int var ID : [ ] [ ] bool ID ( ( 123 ) ) = ( - - - ( true ) ) print ID } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : [ ( ID [ true ] ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) { return } func ID ( ) : int { var ID : bool var ID : [ ] int }",
  "func ID ( ID : int , ID : bool ) : [ ] int { }",
  "func ID ( ) { var ID : bool var ID : int call ID ( ) ID ( - - - false * - true * ( ( - - false ) ) ) = ID } func ID ( ) { }",
  "func ID ( ) { var ID : bool print ID [ - - ID ( ) [ - ( false ) ] [ ID ] ] }",
  "func ID ( ) { var ID : [ ] [ ] int var ID : int { } if - ( 123 ) { } } func ID ( ) { }",
  "func ID ( ) : int { ID [ ID ( ) [ ( ( true ) ) ] [ ( 123 ) ] ] = - ( - ( ( 123 ) ) ) print ( ID ) }",
  "func ID ( ) : int { var ID : bool return ID [ ID [ ID ] [ ID ] ] }",
  "func ID ( ID : int , ID : bool ) { var ID : int var ID : [ ( ID ( ) ) ] int }",
  "func ID ( ID : bool , ID : [ ID [ - ( - - - ( true ) ) ] ] bool ) { }",
  "func ID ( ) : bool { } func ID ( ) { var ID : int return ( ID ( ) ) }",
  "func ID ( ) : int { return ( ( ( ID ( ID ) ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ] bool call ID ( ) while ( - ( - ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : [ - - 123 != 123 ] int }",
  "func ID ( ) { var ID : int { return false and false + ( 123 ) and ( - ( ( ( - ID ) ) ) ) } ID = ID } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : bool return }",
  "func ID ( ) { if ( - - ( ID * ID ( ) ) ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : [ ( - - false / - - false * true and ID and ID ) ] bool { }",
  "func ID ( ID : [ ID [ ( ID ( ) [ ID ] [ ( ( - ( - - 123 ) ) ) ] ) ] ] bool ) { }",
  "func ID ( ID : int ) { if - false + ( - - false == ( ( - - - - false ) ) ) - ( ( ID ) ) { } }",
  "func ID ( ) : bool { { var ID : bool var ID : [ ] bool if - ( ID ) { } print - false } if ( ( ( ( ( ID ) ) ) ) ) { } }",
  "func ID ( ) : [ ID ( ) [ - ( ID [ ID ] [ - 123 ] ) ] [ - - ( ( false ) ) ] ] bool { }",
  "func ID ( ) : int { var ID : [ ] int var ID : bool print ( ID ( ) ) print - 123 } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ID : int ) : bool { var ID : int var ID : [ 123 ] int }",
  "func ID ( ) { var ID : int return - false - - ID ( ) / ID + true }",
  "func ID ( ) { var ID : int var ID : bool { while - true and ( ID ) and 123 { } print ( ID ) } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { return true * ID ( ( ( ( false ) ) ) ) }",
  "func ID ( ID : [ ] int , ID : int , ID : int ) : [ 123 / false * ID ( ) ] bool { }",
  "func ID ( ID : [ ID ( ID ( - - ( false ) ) ) ] [ ] bool ) { }",
  "func ID ( ) : int { var ID : [ ] int call ID ( ) return } func ID ( ) { var ID : int var ID : int }",
  "func ID ( ID : int ) : [ ( ( true / - ID ( ID ) / ( ID ) ) ) ] [ ] int { }",
  "func ID ( ) : bool { call ID ( 123 / ( 123 / - - - - ( ID ) ) ) while - true { } }",
  "func ID ( ID : [ ] bool , ID : [ ] int ) : int { var ID : bool call ID ( - false ) }",
  "func ID ( ID : bool ) { print - ID [ ID ( ( - - ID ) ) ] [ 123 ] }",
  "func ID ( ) : bool { ID [ ID ( ) [ - ( ( 123 ) ) ] ] = true } func ID ( ) { }",
  "func ID ( ) : bool { while ( - ( false / ID ( ( false ) ) / - true ) ) { } if - false { } }",
  "func ID ( ID : [ ] [ ] int , ID : [ ] bool , ID : [ ] bool ) { var ID : [ - ID ] [ ] bool var ID : [ ] bool }",
  "func ID ( ID : int , ID : [ - ( ID ( ( true ) ) ) ] [ ] bool ) { }",
  "func ID ( ) : bool { return } func ID ( ) : bool { call ID ( ) print ( ID ) }",
  "func ID ( ID : [ - ( - - ID [ - - ( ( ( ID ) ) ) ] ) ] [ ] int ) { }",
  "func ID ( ) : int { var ID : [ ] int { var ID : int var ID : bool { var ID : [ ( false ) ] bool var ID : bool } } { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool if ID ( ) + ( true / ( ( false ) ) / false ) { } }",
  "func ID ( ) : int { var ID : [ ] [ ] bool ID [ ( ( - ( ( ( ID ) ) ) ) ) ] [ false ] = true }",
  "func ID ( ID : bool ) { var ID : bool var ID : int print ( 123 * ( - - - - ( ( ID ) ) ) ) }",
  "func ID ( ) : [ ( - ( - ( 123 * ID ) ) ) ] [ ] [ ] [ ] [ ] [ ] bool { }",
  "func ID ( ID : bool , ID : [ ] int ) : int { var ID : int if 123 * true != ( ( ( true ) ) ) { } call ID ( ) }",
  "func ID ( ) : int { var ID : int call ID ( ) while - - true > ( - - ( 123 ) ) { } } func ID ( ) { }",
  "func ID ( ) { print - ( - - - - false + ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : [ false * ID ( ) [ ( - ( ( ID ) ) ) ] [ ( ( ( - ID ) ) ) ] / ID ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ - ( ( 123 - ( - - ID ) - 123 ) ) ] int ) { }",
  "func ID ( ) : bool { var ID : [ ] [ ( - ID ( false ) ) ] [ ] [ ] int }",
  "func ID ( ) { call ID ( ) print true * false / false < ID [ - ID ] } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) or ( ID ( ) + false ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { call ID ( - true and ( true == ( 123 ) ) and 123 ) ID = false }",
  "func ID ( ID : bool , ID : int , ID : bool ) : [ ] [ false + ID ( ) [ ID ] [ ID ] - ID ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID ( 123 * false != ID ( ) ) ] int , ID : int ) { }",
  "func ID ( ID : int , ID : [ - false / - - - - ID ( 123 ) ] bool , ID : bool ) { }",
  "func ID ( ID : bool ) { var ID : bool if ID [ ID [ ID ] ] [ - ( ID ) ] { } print ID }",
  "func ID ( ID : [ ID / true <= ID and ( - ID ) ] [ ] bool ) { }",
  "func ID ( ) : int { } func ID ( ) { var ID : int }",
  "func ID ( ID : [ ] [ 123 * ID ( - - true * - ID * true ) / ID ] bool ) { }",
  "func ID ( ) : bool { print - ( - ( ID ( - ID ) ) ) } func ID ( ) { }",
  "func ID ( ID : int ) : [ ID [ - 123 and ID [ - ( ( ( false ) ) ) ] and ID ] [ ID ] ] int { }",
  "func ID ( ID : int , ID : [ ] bool ) : [ ] int { print ID [ false ] while 123 { } } func ID ( ) { }",
  "func ID ( ID : [ 123 / - - ID [ - true * false * - 123 ] [ - ID ] / ID ] [ ] [ ] bool ) { }",
  "func ID ( ID : int , ID : bool ) : int { var ID : [ ] [ ( false * false / - 123 ) ] int var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( ( ( true / ID ) ) ) ] int var ID : bool }",
  "func ID ( ID : [ ] int , ID : int ) : [ ] int { var ID : int while - ID { } print ID }",
  "func ID ( ID : [ ( - ( ID * true or ( - false ) or ID ) ) ] [ ] int ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : bool var ID : [ ] [ ] bool call ID ( ) call ID ( ) }",
  "func ID ( ) : int { var ID : int var ID : [ false / ID ( ) [ false ] [ true ] ] bool } func ID ( ) { }",
  "func ID ( ) : int { }",
  "func ID ( ID : int ) : int { var ID : [ ( - false * ( ID ) ) ] [ ] bool var ID : int }",
  "func ID ( ID : bool , ID : int ) { var ID : [ - ( ID [ - ID ] ) ] bool var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : int { var ID : [ ] int call ID ( ( ( ( ( ID ) ) ) ) ) call ID ( ) } call ID ( ) }",
  "func ID ( ID : int , ID : [ false / ID ( true - ID ( ) ) ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { while true - ID ( ) [ ID ] [ 123 ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : bool ID ( ) [ 123 / ( false ) ] [ ID ] = ID { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int return false / ID ( ) [ ID ( ) ] [ ID ] * 123 } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : bool ) : [ ID * ID ( ) [ true ] [ ID ] ] bool { } func ID ( ) { }",
  "func ID ( ) : int { return - ( ID ( ID [ - - ( ID ) ] [ ID ] ) ) }",
  "func ID ( ID : [ ] bool ) { var ID : bool ID ( ) = ID ( ID ) }",
  "func ID ( ID : [ ] bool , ID : int ) { return }",
  "func ID ( ID : int ) { var ID : [ ] [ ID ( ( ( ID ) ) ) ] [ ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : [ true - true * true * ( ID ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : bool { } }",
  "func ID ( ID : [ - ID ( ( ( ( ID ) ) ) ) ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : int var ID : int if ( ID ( ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : [ ] bool ID ( ) = ID if ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) { } func ID ( ) : bool { }",
  "func ID ( ) { var ID : [ ] int var ID : int call ID ( 123 * false - ( - ( false ) ) ) while ( 123 ) { } } func ID ( ) { }",
  "func ID ( ) : [ - ID ( true / - ( ( false ) ) ) ] int { }",
  "func ID ( ) { var ID : [ ID ( ID ( ) / ID ( 123 ) ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool return } func ID ( ID : bool , ID : [ - ( ID ) ] [ ] int , ID : bool ) { }",
  "func ID ( ID : bool , ID : bool ) : bool { print ( ( ( ( ID ) ) ) ) call ID ( ) }",
  "func ID ( ID : int , ID : bool ) : [ ] bool { call ID ( ) } func ID ( ) { var ID : int ID = ID }",
  "func ID ( ID : int , ID : [ ] int ) : bool { var ID : int ID ( ) = ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool ) : [ true - ( ID ( ( ID ) ) ) + - ( false ) ] [ ] bool { }",
  "func ID ( ) { var ID : int ID = ID [ ( ( ID ) ) ] [ ( true ) ] } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ - true * false + ID - ID ] [ true ] ] int ) { } func ID ( ) { }",
  "func ID ( ) { call ID ( - - true / ( false - ID ( ) ) ) print ( 123 ) } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool var ID : int ID ( ) [ ( - ( - - ( - false ) ) ) ] = ( ID ) }",
  "func ID ( ) : bool { var ID : bool while - true and false * ( ( 123 ) ) * ( ID ) { } } func ID ( ) { }",
  "func ID ( ) { return - 123 / - - ( - - ( - ( ( 123 ) ) ) ) }",
  "func ID ( ID : bool , ID : [ ] [ ID ( ID ( ) + ( ( - ID ) ) ) ] bool , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - ID ( ) [ ( - false ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ 123 * ID ( ) * true < - - - ID ] [ ] int }",
  "func ID ( ID : [ - - ( ( true * ID ( 123 ) * ID ) ) ] [ ] [ ] int ) { }",
  "func ID ( ID : [ true - ( - - 123 / false / false - false ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ID : bool ) : [ ] [ ( ID [ - 123 ] [ - ( ( false ) ) ] ) ] bool { }",
  "func ID ( ) { var ID : bool while ID ( ( false * - ID ) ) { } }",
  "func ID ( ID : bool ) { var ID : bool var ID : bool }",
  "func ID ( ID : int , ID : [ ] [ ] int ) : int { var ID : [ ] int } func ID ( ID : int ) { }",
  "func ID ( ) : [ ] int { var ID : bool var ID : int call ID ( ID ( true ) ) } func ID ( ) { }",
  "func ID ( ) : [ ( ( ID ( ( - true ) ) ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ID [ false / - - - - ( 123 ) * true ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) : int { print - 123 / ( false - ID + ( - false ) ) }",
  "func ID ( ) { var ID : int var ID : [ ID ( false / - - - true * 123 ) ] bool }",
  "func ID ( ) { var ID : [ ] int ID [ - - 123 * 123 * ( ( ID ) ) ] [ - ID ] = false call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ID [ ( true / ( ID ) / ID ) ] [ - ( ID ) ] ] int var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID ( ( 123 / ID [ ID ] [ ( - false ) ] / false ) ) ] int ) { }",
  "func ID ( ID : [ ] bool ) { var ID : [ false * ID [ ( true ) ] [ 123 ] ] int var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int while 123 / false * ( 123 * - - - ID ) { } call ID ( ) }",
  "func ID ( ) : int { return - - - 123 and - - ID / 123 == - 123 and - ID } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID : bool return } func ID ( ID : int ) : bool { return ID }",
  "func ID ( ) : [ - 123 * - ID ( ) [ ( true ) ] [ - true ] / 123 ] int { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ - ID [ true * ( - ( true ) ) ] [ false ] ] [ ] [ ] [ ] bool { }",
  "func ID ( ID : bool ) : [ 123 + ID [ false * - true * ( ( - - ( - ( ID ) ) ) ) ] + false ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( - ( ( - ( ( ID ) ) ) ) ) ] bool , ID : bool ) { }",
  "func ID ( ) { var ID : int { var ID : [ ID ( ) [ ID ] ] int var ID : bool } }",
  "func ID ( ) : [ ID ( ( - ( false / - true ) ) ) ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( false / false * - ( - false ) ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ID ( ) [ ID ( ID ) ] [ - false ] ] int } func ID ( ) { }",
  "func ID ( ) : bool { return } func ID ( ) { var ID : bool }",
  "func ID ( ID : [ ] [ false / - ID ( ) [ true > - - ( - ( true ) ) ] [ ( ID ) ] ] bool ) { }",
  "func ID ( ) : bool { var ID : int { ID [ false * - - - ( - false ) / - false ] = - false } while false { } } func ID ( ) { }",
  "func ID ( ) { var ID : int print true + 123 + 123 / ( false ) if ( true ) { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ID * false * - ( ( ID ) ) ] int var ID : int }",
  "func ID ( ID : bool , ID : bool ) { var ID : int while false / ( - - ID ) * ID { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ( ( ( ID ) ) ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : int } func ID ( ID : bool , ID : [ ] int ) : int { print - ID { } }",
  "func ID ( ) : bool { } func ID ( ID : bool ) : int { while ( - ( false ) ) { } if true { } }",
  "func ID ( ID : int , ID : bool ) { call ID ( ) if 123 * 123 * ( true ) { } }",
  "func ID ( ID : [ - ( 123 + - - false / ( - ID ) * ID - - ( - ID ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool { var ID : int if - ID ( ) [ false ] [ ID ] { } } }",
  "func ID ( ) : [ ] [ ] bool { var ID : [ - - ID [ - ID ] [ - - true ] ] int }",
  "func ID ( ID : bool ) { var ID : int var ID : [ ID ( - false * ( ( - - ID ) ) ) ] [ ] int }",
  "func ID ( ID : [ ] bool , ID : [ ( ID ( - ( ID ) ) ) ] [ ] [ ] [ ] [ ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : int var ID : [ false - false * 123 + true ] int }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool return - ID ( ) [ ( - false ) ] }",
  "func ID ( ) : int { if - ID [ ID ( ) - ( ID ) ] { } if ID { } }",
  "func ID ( ) { var ID : bool var ID : int print - ( - ( false ) ) if 123 { } }",
  "func ID ( ID : [ ] [ ID ( ) [ false * ( ( ID ) ) * ID ] [ false ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ 123 * ( false / - ID ( ) - ( - - - - ( - ID ) ) ) ] int ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] int ) { var ID : [ ] int if 123 - 123 - ID { } if - 123 { } }",
  "func ID ( ) : [ true * ( ( ID ( 123 ) ) ) ] int { }",
  "func ID ( ) { var ID : [ ID ( ) [ false / - ( ID ) ] [ ID ] ] bool }",
  "func ID ( ID : bool ) : bool { var ID : [ ] [ ] int if ID ( 123 ) { } if ( - ID ) { } }",
  "func ID ( ID : int ) : int { var ID : int var ID : bool } func ID ( ID : [ 123 + ID - - true ] int ) { }",
  "func ID ( ) : [ ID ( ) - - ID [ - - false / false * ID ] [ ID ] - - - - false ] bool { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] int call ID ( ) }",
  "func ID ( ID : int , ID : [ ] [ ] bool , ID : bool ) : bool { var ID : int print ID }",
  "func ID ( ID : [ ] [ ] [ ] int , ID : [ ] [ ( ID ( ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool ) { call ID ( ID [ ( ( ID ) ) ] [ ID ] ) while ( ID ) { } } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : int var ID : [ ( ID ( ( - - - - true ) ) ) ] [ ] [ ] int }",
  "func ID ( ID : int , ID : [ ( false * ( - ( ID ) ) ) ] [ ] [ ] int ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) { while - 123 * - - - ID ( ) { } }",
  "func ID ( ) : bool { ID ( ( false - ( - ( ID ) ) ) ) = ( - ID ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID ( ) [ ( - ID ( ) ) ] ] bool ) { }",
  "func ID ( ID : int ) { var ID : [ ] int return ID * ( ID ) } func ID ( ) { }",
  "func ID ( ) { { var ID : int ID [ - true and - - false ] = false ID = - ( ID ) } ID = ( ( - ( false ) ) ) } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool ID ( false <= ( ( ( ID ) ) ) ) = - - - ( ( true ) ) }",
  "func ID ( ID : int , ID : bool ) { var ID : int return ID ( ) [ true ] } func ID ( ) { }",
  "func ID ( ID : [ - ( 123 / - 123 * ID ( ( ID ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ 123 > ( true / ID ( ) - - ( false ) ) ] bool ) { }",
  "func ID ( ID : bool , ID : [ - 123 / false - false * true * 123 + true ] bool , ID : bool ) { }",
  "func ID ( ) { var ID : [ ] int ID ( ) [ - - - ( ID ) ] [ - false ] = false } func ID ( ) { }",
  "func ID ( ID : [ false / - 123 / false ] [ ] bool , ID : bool ) { var ID : [ ] bool }",
  "func ID ( ) { var ID : int var ID : [ false * true + 123 / ( 123 ) - ( false ) ] [ ] bool }",
  "func ID ( ) { var ID : bool { return ID ( ) [ - 123 + true - false ] [ ( ID ) ] } while - ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ 123 + true / ( ID [ - ( ID ) ] [ ID ] ) * ( true ) ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : int { if - false + true / ID * - ID + - ID { } print ID } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int } func ID ( ) : int { var ID : [ ] int if ( ID ) { } call ID ( ) }",
  "func ID ( ) : int { var ID : int var ID : bool } func ID ( ) : bool { var ID : int call ID ( ) return }",
  "func ID ( ) { var ID : [ ( ID [ ( false ) ] [ ( ( ID ) ) ] ) ] [ ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ true / ID [ - - 123 / 123 / - ( 123 ) ] [ ID ] ] bool var ID : bool }",
  "func ID ( ID : [ ] [ false * false > ( - - ID [ ID ] ) ] bool ) { }",
  "func ID ( ID : int ) : [ ] bool { var ID : [ ( ( ID ) ) ] [ ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : [ 123 / ( ( ID >= - ID ) ) * ( ID ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { var ID : int var ID : [ false - 123 / true - 123 ] bool }",
  "func ID ( ) : [ ] int { while 123 / ID [ 123 + ( ID ) + 123 ] * ( false ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool , ID : int ) : int { var ID : [ ( ID ) ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) { return } func ID ( ) : [ - true ] bool { var ID : [ ] bool }",
  "func ID ( ID : bool ) : bool { var ID : int while - - ID ( ) [ - ( 123 ) ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int return } func ID ( ) { var ID : int }",
  "func ID ( ) { ID ( ) = ( true and - - ( false ) and false ) } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : [ false * ( 123 + false ) / ID ] int } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) + true ] [ true * false - - ID + ID ] int ) { }",
  "func ID ( ID : bool , ID : int ) : [ - ID ( ) [ 123 / - ( ( ( ( - - ID ) ) ) ) * ( true ) ] [ ID ] ] bool { } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ - true + ( - ( false ) ) - true ] [ ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID : [ ] [ ] int }",
  "func ID ( ID : bool ) : [ ] [ ] bool { call ID ( ( ID [ 123 ] ) ) call ID ( ) }",
  "func ID ( ID : int ) : [ ] bool { var ID : bool var ID : [ ] int if - ID { } } func ID ( ) { }",
  "func ID ( ) : [ false * - false + - - ( ID ( ID ) ) - ID ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) { { var ID : [ ] bool var ID : [ ] bool call ID ( ) { var ID : int } } }",
  "func ID ( ) : int { var ID : int var ID : int if false * false != ID / ( ID ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool ) { } func ID ( ) { var ID : [ ( ( ( false ) ) ) ] int }",
  "func ID ( ID : int , ID : [ ID ( ) [ ( true < true ) ] [ ( ( - ( false ) ) ) ] ] [ ] [ ] [ ] int , ID : [ ] bool ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : [ ] [ ] int { if true / true { } } func ID ( ) { }",
  "func ID ( ID : [ ID [ ( ID * true * ID ) ] [ ID ] ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] int { var ID : [ ] bool var ID : [ ] int return - ( false ) }",
  "func ID ( ID : bool ) : int { var ID : [ - 123 - false > ( ID ) ] [ ] int }",
  "func ID ( ID : bool , ID : bool ) : [ - ID [ ( ID ) ] ] bool { } func ID ( ) { }",
  "func ID ( ) { var ID : int while ID ( ) [ - - - - ( ID ) ] { } print ID }",
  "func ID ( ID : [ ] [ ] bool , ID : [ ] [ ] bool , ID : int ) : [ - - ID ] [ ] [ ] bool { }",
  "func ID ( ) { var ID : [ ( - - ID [ - ( true ) ] [ ( 123 ) ] ) ] int }",
  "func ID ( ID : bool , ID : [ ] bool , ID : bool ) : int { return } func ID ( ID : bool , ID : bool , ID : [ ] bool ) { }",
  "func ID ( ID : int , ID : int ) : bool { var ID : [ false + ( - ( true ) ) + - - ID ] [ ] [ ] int var ID : [ ] [ ] [ ] [ ] bool }",
  "func ID ( ID : bool , ID : int , ID : [ ID * ( 123 / ( - 123 ) * - - - ( false ) ) * - ( - ID ) ] int ) { }"
]
