[
  "func ID ( ID : bool ) : int { var ID : [ 123 and ( ID ) and - false ] int var ID : int ] [ }",
  "func ID ( ID : bool ) : int { var ID : [ 123 and ( ID ) and - false ] int var ID : int ] [ }",
  "func ID ( ID : bool ) : int { var ID : [ 123 - ( ID ) and and false ] int var ID : int ] [ }",
  "func ID ( ) { ID [ - - true / ( 123 / ID [ 123 ] [ ID ] ) ] [ ID ] = - } - ID ) } func ID ( ) { (",
  "func ID ( ) { ID [ - ID true / ( 123 / ID [ 123 ] [ - ] ) ] [ ID ] = - } - ID ) } func ID ( ) { (",
  "func ID ( ) { ID [ - ID true / ( 123 / ID [ 123 ] [ - ] ) ] [ ID ] = - } - ID ) } func ID ( ) { (",
  "func ID ( ) : int { var ID : [ ( - ID ( ) * 123 / ID ) ] [ ] [ ] [ ] int var ID : bool ] [ }",
  "func ID ( ) : int { var ID : [ ( - ID ( ) * var / ID ) ] [ ] [ ] [ ] int 123 ID : bool ] [ }",
  "func ID ( ) : int { ID ID : [ ( - var ( ) * var / ID ) ] [ ] [ ] [ ] int 123 ID : bool ] [ }",
  "func ID ( ) { bool { var ID : int : var ID : [ ] int ID = ID ( ) print - ( - ( - true ) ) } }",
  "func ID ( - { bool { var ID : int : var ID : [ ] int ID = ID ( ) print ) ( - ( - true ) ) } }",
  "func ID ( - { bool - var ID : int : var ID : [ ] int ID = ID ( ) print ) ( { ( - true ) ) } }",
  "func ID ( ID : int ) : bool { var ID : bool var ID : ] { var ID : bool var ID : [ - 123 bool bool } }",
  "func ID ( ID : int { : bool { var ID : bool var ID : ] ) var ID : bool var ID : [ - 123 bool bool } }",
  "func ID ( - : bool , ID : int , ID : bool ) { var ID : [ ] [ ID ( - ( - ( ( - - 123 ) ) ) ) ] bool var ID : bool }",
  "func : ( - : bool , ID ID int , ID : bool ) { var ID : [ ] [ ID ( - ( - ( ( - - 123 ) ) ) ) ] bool var ID : bool }",
  "func : ( - : , , ID ID int bool ID : bool ) { var ID : [ ] [ ID ( - ( - ( ( - - 123 ) ) ) ) ] bool var ID : bool }",
  "func ID ( ( { var ID : bool { ID ) ) = - ID [ - - ( ID ) ] call ID ( ) } }",
  "func ID ( ( { var ID : bool { ID ) ) = - ID [ - - ( ID ) ] call ID ( ) } }",
  "func ID ( ( { var ID : bool { ID ) ) = - ID [ - - ( ID ) ] call ID } ) ( }",
  "func ID true ) { var ID : int call ID ( false / ID ( ) * ( + - ( - ID ) - ( - - ID ) ) } func ID ( ) { }",
  "func ID true ) { var ID : int call ID ( false ( ID ( ) * ( + - ( - ID ) - / - - ID ) ) } func ID ( ) { }",
  ") ID true ) { var ID : int call ID ( false ( ID ( ) * ( + - ( - ID ) - / - - ID func ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : ID ID * - [ [ - - ( ID ) ] ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : ID ID * - [ [ ] - ( ID ) - ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ] : ID ID * - [ [ ] - ( ID ) - ] [ ] [ ID int } func ID ( ) { }",
  "func ID ( ID : int , ID : [ true + } ( ) [ ( 123 ) ] - - ( ID ) ] int ) { } func ID ( ) { ID",
  "func ID ( ( : int , ID : [ true + } ( ) [ ( 123 ) ] - - ID ID ) ] int ) { } func ID ( ) { ID",
  "func ID ( ( [ int , ID : : true + } ( ) [ ( 123 ) ] - - ID ID ) ] int ) { } func ID ( ) { ID",
  "( ID ( ) : bool { print ID [ - ( func ( true ) ) ) ] print ID }",
  "( ID ( ) ID bool { print ID [ - ( func ( true ) ) ) ] print : }",
  "( ID ( ) ID bool { print ID [ ) ( func ( true ) - ) ] print : }",
  "func ID ( ) { } func ID ( ) : [ ] [ ] int - call ID ( ) ID ( ) [ - { - ( - ID ) ] = true }",
  "func ID ( ) { } func ID ( ) : [ ] [ ] int - call ID ( ) ID ( ) [ - { - ( - ID ) ] = true }",
  "func ID ( ) { } func ID ( ) : [ ] [ ] int - call ID ( ) ID ( ) [ - { - ( - ID ) true = ] }",
  "func ID ( ) { var ID : } return true - false * - - ID ( 123 ) bool",
  "func ID ( ) { var ID ) } return true - false * - - ID ( 123 : bool",
  "func ID ( ) { var ( ) } return true - false * - - ID ID 123 : bool",
  "func ID ( ) { var ID : bool if ( ( } ID / true * ID ) ) { } { - }",
  "func ID ( ) { var ID : bool if ( ( } ID / true * ID ) ) { } { - }",
  "func ID ( ) { bool ID : var if ( ( } ID / true * ID ) ) { } { - }",
  "func ID ( ) { - ( ID ( ) [ ( true ) ] [ if 123 ] ) { } } func ID ( ) { }",
  "func ID if ) { - ( ID ( ) [ ( true ) ] [ ( 123 ] ) { } } func ID ( ) { }",
  "func ID if ) { - ( ID } ) [ ( true ) ] [ ( 123 ] ) { } ( func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID [ } ID ( ID ) ] ] int ) { -",
  "func ID ( ID : int { ID : [ ID [ } ID ( ID ) ] ] int ) , -",
  "func ID ( ) { { 123 or - 123 / - ( ( 123 ) ) / - true while } { } } func ID ( ) { }",
  "func ID ( ) { { 123 or - 123 / - ( ( 123 ) ) / - true while } { } } func ID ( ) { }",
  "func ID ( ) { { 123 or - 123 } - ( ( 123 ) ) / - true while / { } } func ID ( ) { }",
  "func ) ( ID { var ID : int } func ID ( ) : int { print false / ( ( true ) ) }",
  "func ID ( ID { var ) : int } func ID ( ) : int { print false / ( ( true ) ) }",
  "int ID ( ID { var ) : int } func ID ( ) : func { print false / ( ( true ) ) }",
  "while ID ( ID : bool , ID : int , ID : bool ) { { var ID : int call ID ( ID ) func - - false { } } }",
  "while ID ( ID : bool , ID : int , ID : bool { ) { var ID : int call ID ( ID ) func - - false { } } }",
  "while ID ( ID : bool } ID : int , ID : bool { ) { var ID : int call ID ( ID ) func - - false { } } ,",
  "func ID ( ID : [ ID int , ID : [ ] [ ] int ) : bool { var ] : bool }",
  "func ID ( ID : [ ] int , ID : [ ID [ ] int ) : bool { var ] : bool }",
  "func ID ( ID : : ] int , ID : [ ID [ ] int ) [ bool { var ] : bool }",
  "func ID ( ) ] bool { if - ID ( - ID ( ) [ false ] [ - true : ) { } ID = ( ( - ( ID ) ) ) } func ID ( ) { }",
  "func - ( ) ] bool { if - ID ( ID ID ( ) [ false ] [ - true : ) { } ID = ( ( - ( ID ) ) ) } func ID ( ) { }",
  "func - ( ) ] bool { if - ID ( ID ID ( ) [ false ] ID - true : ) { } ID = ( ( - ( ID ) ) ) } func [ ( ) { }",
  "func ID ( ) { call ID ( ) print true return - ( func - 123 ) ) } ( ID ( ) { }",
  "func ID ( ) { call ID ( ) print ) return - ( func - 123 ) ) } ( ID ( true { }",
  "func ID ( ) { call ID ( print ) ) return - ( func - 123 ) ) } ( ID ( true { }",
  "func ID ( ID : int ) var { ID : bool } func ID ( ID : int , ID : int , ID : [ ] int ) : int { }",
  "func ID ( ID : int } var { ID : bool } func ID ( ID : int , ID : int , ID : [ ] int ) : int { )",
  "func ID ( * : [ 123 ID 123 - - true / - ID ( ) [ ID ] [ ID ] + ( 123 ) ] bool ) { } func ID ( ) { }",
  "func ID ( * : / 123 ID 123 - - true [ - ID ( ) [ ID ] [ ID ] + ( 123 ) ] bool ) { } func ID ( ) { }",
  "func ID ( * : / 123 ID 123 - - true [ - ID ( ) [ ( ] [ ID ] + ( 123 ) ] bool ) { } func ID ID ) { }",
  "[ ID ( ID : [ ID [ 123 - ( ID ( ) func ID ] ) ] ] int ) { } func ID ( ) { }",
  "[ ID ( } : [ ID [ 123 - ( ID ( ) func ID ] ) ] ] int ) { ID func ID ( ) { }",
  "[ ID ( } : [ ID [ 123 - ( ID ( ) func ID ] ) ] ] int ) { ID { ID ( ) func }",
  "func ID ) ID : int , ID : [ ] bool ) { call ID ( ( call ID ( - ( 123 ) ) }",
  "func ID ) ID : int , ID : [ bool ] ) { call ID ( ( call ID ( - ( 123 ) ) }",
  "func ID ) ID : int , ID : [ bool ] ) { call ID ( ( call ) ( - ( 123 ID ) }",
  "func ID ( ) { var ID func bool return ( ( ID * ID ( ) ) ) } : ID ( ) { }",
  "func ID ( ) { var ID func bool return ( ( ID * } ( ) ) ) ID : ID ( ) { }",
  "func ID ) ) { var ID func bool return ( ( ID * } ( ) ) ) ID : ID ( ( { }",
  "func ID ) ID : [ - true / ( ( true * ID ( ) * - ( 123 ) ) ( * ID ] [ ] bool ) { }",
  "func ID ) ID : ( - true / ( ( true * ID ( ) * - ( 123 ) ) [ * ID ] [ ] bool ) { }",
  "func - ) ID : ( - true / ( ( true * ID ( ) * ID ( 123 ) ) [ * ID ] [ ] bool ) { }",
  "func ID ( ID : int , ID ID [ : ( ID ( ) [ false ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ID ID int , : ID [ : ( ID ( ) [ false ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ID ID ) , : ID [ : ( ID ( int [ false ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) { return 123 + } [ ( - false ) ] [ true ] - ( ( - ID ) ) ID func ID ( ) { }",
  "func ID ( ID : bool ) { return 123 + } [ ( - false ) ] [ true ] - ( ( - ) ) ) ID func ID ( ID { }",
  "func ID ( ID : bool ID { return 123 + } [ ( - false ) ] [ true ] - ( ( - ) ) ) ID func ) ( ID { }",
  "func ID ( ID : [ ] int , ID : [ ] + , ID : int ) { var ID : bool if false bool ( - ID ) { } }",
  "func ID ( ID : [ ] int , ID : [ ] + , ID : int ) { var ID : bool if false bool ( - ID ) { } }",
  "func ID ( ID : [ ] int , ID : int ] + , ID : [ ) { var ID : bool if false bool ( - ID ) { } }",
  "func ID ( { : bool , ID : int , ID : int ) ID }",
  "func ID ( { : bool , ID : int , ID : int ) ID }",
  "func ID ( { : bool , ID } int , ID : int ) ID :",
  "func ID ( ) { var ID : int var ID : bool 123 ID ( ) return ID ( - - call ) }",
  "func ID ( ) { var int : ID var ID : bool 123 ID ( ) return ID ( - - call ) }",
  "func ID ( ) { var bool : ID var ID : int 123 ID ( ) return ID ( - - call ) }",
  "func ID ( ID bool int , ID : int , ID : : ) : int { }",
  "func ID ( ID bool int : ID , int , ID : : ) : int { }",
  "int ID ( ID bool int : ID , func , ID : : ) : int { }",
  "func ID ( ID : int , ID ) bool , ID : [ 123 / - ( - ID ( - ID : ) ] [ ] int ) { }",
  "func ID ( ID : int , ID ) bool , ID : [ 123 / - ( - ID ( - ID [ ) ] : ] int ) { }",
  "func ID ( ID : int , ID ) bool , ID : int 123 / - ( - ID ( - ID [ ) ] : ] [ ) { }",
  "func ID ( ID : [ ] bool ) var { ID : [ ( ID [ - - - ( - - - true ) ] ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) var { ID : [ ( ID [ - - - ( - ] - true ) ] ) - int var ID : int } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) var { ID : [ ( ID [ - - - ( - ] int true ) ] ) - - var ID : int } func ID ( ) { }",
  "ID ID ( ID : bool , func : bool ) { { return } return }",
  "ID ID ( , : bool ID func : bool ) { { return } return }",
  "ID { ( , : bool ID func : bool ) { ID return } return }",
  "func ID ( ) : bool { var ID : int var ID : [ ] / 123 * - true [ - true ] [ ] [ ] bool }",
  "func ID ( ) : bool { var bool : int var ID : [ ] / 123 * - true [ - true ] [ ] [ ] ID }",
  "func ID ( ) : bool { var bool * int var ID : [ ] / 123 : - true [ - true ] [ ] [ ] ID }",
  "func ID ( ID : [ false / - ( false or - ID * 123 / ( - ID ) ) { [ ] int ) ] } func ID ( ) { }",
  "func ID ( ID : [ false / - ( false or - ID * 123 / ( - ( ) ) { [ ] int ) ] } func ID ID ) { }",
  "func ID ( ID : [ false / - ( false or - ( * 123 / ID - ( ) ) { [ ] int ) ] } func ID ID ) { }",
  "func ID { ID : bool , ID : [ ID ( - ( ID [ ID ] [ ( - ( ( - ( ( ( ID ) ) ) ) ) ) ] ) ) ] bool ) ( }",
  "func ID { ID : bool , ID : [ ID ( - ( ID [ ID ] [ ( - ] ( - ( ( ( ID ) ) ) ) ) ) ] ) ) ( bool ) ( }",
  "func ID { ID : bool , ID : [ ID ( - ( ID [ ID ] [ ( - ID ( - ( ( ( ] ) ) ) ) ) ) ] ) ) ( bool ) ( }",
  "func ID ( ID : int , ID : bool ) [ [ ] bool { var ID : [ false / ID [ - ( - ID ) ] [ ID ] * - - ( ( ( - ( ID ) ) ) ) ] int var ID : : ] bool }",
  "func ID ( ID : int , ID : bool ) [ [ ] ( { var ID : [ false / ID [ - bool - ID ) ] [ ID ] * - - ( ( ( - ( ID ) ) ) ) ] int var ID : : ] bool }",
  "func ID ( ID : int , ID : bool ) [ [ ] ( { var ID : [ false / ID [ - bool - ID ) ] [ ID ] * - - ( ( ( - ) ID ) ( ) ) ] int var ID : : ] bool }",
  "func ID ( ID : [ true and ID ( func [ 123 / ( - ID ) / 123 ] [ true ] and false ] bool ) { } ) ID ( ) { }",
  "func ID ( ID : true [ and ID ( func [ 123 / ( - ID ) / 123 ] [ true ] and false ] bool ) { } ) ID ( ) { }",
  "func ID ( ID : true [ and ID ( func [ 123 / ( - ID ) / 123 ] [ true ] and false ) bool ] { } ) ID ( ) { }",
  "func ID ( ) { while ID [ 123 / true ] + ( false ) { ID while ( } ) { } }",
  "func ID ( ) { while ID [ 123 / true ] + ( false ) { ID while ( } ) { } }",
  "- ID ( ) : [ - 123 < ID ( ) and func ID ( ) [ 123 ] [ ID ] ] bool { } func ID ( ) { }",
  "- ID ( ) : [ - 123 < ID ( ) and func ID ( ) [ 123 ] [ ID ] ] bool { } func ID ( ) { }",
  "- ID ( ) : [ - 123 < ID ( ) and func ID ( ) [ 123 ] [ ID ] ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID [ ID [ ID [ - - true ] ] [ - - ( - ( false ) ) ) ] ] [ ( ID ] ] int ) { } func ID ( ) { }",
  "func ID ( [ : [ ] [ ID [ ID [ ID [ - - true ] ] ID - - ( - ( false ) ) ) ] ] [ ( ID ] ] int ) { } func ID ( ) { }",
  "func ID ( [ : [ ] [ ID [ ID [ ID ID - - true ] ] ID - - ( - ( false ) ) ) ] ] [ ( [ ] ] int ) { } func ID ( ) { }",
  "func ID ( * { while - 123 ) 123 / ( ( ID [ ID ] ) ) { } }",
  "func ID ] * { while - 123 ) 123 / ( ( ID [ ID ( ) ) { } }",
  "func ID ] * { while - 123 ) 123 / ( ( ID [ ID ( ) ) { } }",
  "func ID ( ) : int { call ID ( ) ID ( false / 123 + ( } ) ) = ( true ) } func ID ( ) { 123",
  "func ID ( ) : int { call ID ( ) ID ( false / 123 + ( } ) ) = ( true ) } ID func ( ) { 123",
  "func + ( ) : int { call ID ( ) ID ( false / 123 ID ( } ) ) = ( true ) } ID func ( ) { 123",
  "func ID ( ) { { var 123 : [ ] int var ID : [ ID + - ID ( ) + ( ID ) ] bool } }",
  "func ID ( ) { { var 123 : [ ] ( var ID : [ ID + - ID int ) + ( ID ) ] bool } }",
  "func ID ( ) { { var 123 : [ ] + var ID : [ ID ( - ID int ) + ( ID ) ] bool } }",
  "func ID ( ID : [ - - false / - ( - ( false / - ( - - ( - } ) ) ) * false ) ] [ ] bool ) { 123",
  "func ID ( ID : / - - false / - ( - ( false [ - ( - - ( - } ) ) ) * false ) ] [ ] bool ) { 123",
  "func ID ( ) { var ID : int var ID : int ( ID ( return ( 123 ) ) ) }",
  "func ID ( ) { var ID : int ) ID : int ( ID ( return ( 123 var ) ) }",
  "func ID ( ) { var ID : int ) ID : int ( ) ( return ( 123 var ID ) }",
  "func ID ( ) : bool ] int { var ID : int } func ID ( ID : [ ) : bool { var ID : [ 123 ] [ ] int var ID : [ ] [ ] int }",
  "func ID ( ) : bool ] int { var ID [ int } func ID ( ID : [ ) : bool { var ID : [ 123 ] [ ] int var ID : [ ] : ] int }",
  "func : ( ) : bool ] int { var ID [ int } func ID ( ID : [ ) ID bool { var ID : [ 123 ] [ ] int var ID : [ ] : ] int }",
  "func ID ( ID } int , ID : int , ID : bool ) : [ ID ( ( true ) ) ] int { :",
  "func ID ( ID } int [ ID : int , ID : bool ) : , ID ( ( true ) ) ] int { :",
  "func ID ( ID } int [ ID ) int , ID : bool ) : , ID ( ( true ) : ] int { :",
  "func bool ( ID : bool , ID : bool , ID : [ false and ( - true / true ) ] ID ) { } func ID ( ) { }",
  "func bool ( ID : bool , ID : ) , ID : [ false and ( - true / true ) ] ID bool { } func ID ( ) { }",
  "func bool ( ID : bool , ID : ) , ID : [ false and ( - true true / ) ] ID bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { var ID : int var ID : [ - } - false ) ] bool (",
  "func ID ( ID : bool , ID : ] , ID : int ) : bool { var ID : int var ID : [ - } - false ) int bool (",
  "func ID ( ) : int ( var ID : bool var ID : bool print ( { - ( true ) ) ) }",
  "func true ( ) : int ( var ID : bool var ID : bool print ( { - ( ID ) ) ) }",
  "func true ( ) ) int ( var ID : bool var ID : bool print ( { - ( ID ) ) : }",
  "func ID ( ID : : , ID : [ ] int ) { var ID int int if ( false / ID / false ) { } } func ID ( ) { }",
  "func ID ( ID : : , ID : [ ] int ) { var } int int if ( false / ID / false ) { } ID func ID ( ) { }",
  "func ID ( ID : ID , ID : [ ] int ) { var } int int if ( false / ID / false ) { } : func ID ( ) { }",
  "func ID ( ) : [ ] int { while - ) ( - false / ( ID ) - { } } func ID ( ) { }",
  "func ID ( ) : [ ( int { while - ) ( - false / ] ID ) - { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) : bool { if 123 + false * true + - ID { } call ID ( ) } func ID ( ) } {",
  "func ID ( ID : int , ID : * , ID : bool ) : bool { if 123 + false int true + - ID { } call ID ( ) } func ID ( ) } {",
  "func ID ( ID : int , ID : * false ID : bool ) : bool { if 123 + , int true + - ID { } call ID ( ) } func ID ( ) } {",
  "func ID int ) { var ID : bool var ID : int { var ID : bool var ID : [ ] ( print ID } { } }",
  "func var int ) { var ID : bool var ID : int { ID ID : bool var ID : [ ] ( print ID } { } }",
  "func ( int ) { var ID : bool var ID : int { ID ID : bool var ID : [ ] var print ID } { } }",
  "func ID ( ) { var ID : int call ID ( - ID ( ( ID ) ) ) if false ( } } func ID { ) { }",
  "func ID ( ) - var ID : int call ID ( { ID ( ( ID ) ) ) if false ( } } func ID { ) { }",
  "func ID ( ) - var ID : int call ID ( { ID ( ( ID ) ) ) ID false ( } } func if { ) { }",
  "func ID ( - { var ID : bool print ( ) - true - ID ( ) [ false ] ) ID = ( 123 ) }",
  "func ID ( - { var ID : bool print ( ) - true - ID [ ) ( false ] ) ID = ( 123 ) }",
  "func ID ( - { var ID : bool print ) ) - true - ID [ ) ( false ] ( ID = ( 123 ) }",
  "func ID ( ) : [ ] [ - ( ID [ ID ( ) [ true ] - [ - ( ] - ( - ID ) ) ] ) ] int { } func ID ( ) { }",
  "func ID ( ) : [ ] [ - ( ID ( ID ( ) [ true ] - [ - ( ] - ( - ID ) ) ] ) ] int { } func ID [ ) { }",
  "func ID ( ) : [ ] [ - ( ID ( ) ( ) [ true ] - [ - ( ] - ( - ID ID ) ] ) ] int { } func ID [ ) { }",
  "func ID ( ) { var ID : int var ID } bool return ID / true - true * - - - ID :",
  "func ID ( ) { var * : int var ID } bool return ID / true - true ID - - - ID :",
  "func / ( ) { var * : int var ID } bool return ID ID true - true ID - - - ID :",
  "func ID ( ) { bool var ID : { print true * false + - ID ( false ) - ID } }",
  "func ID ( ) { false var ID : { print true * bool + - ID ( false ) - ID } }",
  "func ID ( ) { false var ID : { print true * bool + - ID ( false ) - ID } }",
  ") ID ( ID : bool ) : bool { var ID : int call ID ( func while ID [ ( ( - ID ) ) ] { } }",
  ") ID ( ID ( bool ) : bool { var ID : int call ID ( func while ID [ : ( - ID ) ) ] { } }",
  ") ID ( ID ( bool ) : bool { var ID : int call ID ( func while ID ) : ( - ID ) [ ] { } }",
  "func ) ( ID : [ ] [ 123 + ID [ ID / ID ( ) * - - ID ] ] bool ID { } func ID ( ) { }",
  "func ) ( ID : [ ] [ 123 + ( [ ID / ID ID ) * - - ID ] ] bool ID { } func ID ( ) { }",
  "func } ( ID : [ ] [ 123 + ( [ ID / ID ID ) * - - ID ] ] bool ID { ) func ID ( ) { }",
  "func ID ( ID : [ true - - - ID ( - - ID [ ( ) ) ] [ - ( - - 123 ) ] ID - false ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ true - - - ID ( - - ID [ ( ) - ] [ - ( ) - 123 ) ] ID - false ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ) - - - ID ( - - ID [ ( true - ] [ - ( ) - 123 ) ] ID - false ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : ) var ID : int call ID ( ) call ID ( int return - 123 }",
  ": ID ( ID : int , ID func bool ) : bool { var ID : ) var ID : int call ID ( ) call ID ( int return - 123 }",
  ": ID ( ID ID int , ID func bool ) : bool { var : : ) var ID : int call ID ( ) call ID ( int return - 123 }",
  "func ID ( ID : int ) : bool { } func ID ( var : bool ) { ID ID : bool return }",
  "func ID ( ID : int } : bool { } func ID ( var : bool ) { ID ID : bool return )",
  "func ID ( ID : int bool : bool { } func ID ( var : } ) { ID ID : bool return )",
  "func ID ( ID : [ ] bool , ID : [ false * ID [ - ( - - 123 ) ] [ ] - 123 ) ] * 123 ] [ ] int , ID : [ ( [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ false * ID [ - ( - - 123 ) ] [ ] - 123 ) ] * 123 ] [ ] int , ID : [ ( [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ false * ID [ - ( - - 123 ) ] [ ] - 123 ) ] * 123 ] [ ] int , ID : [ ( [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID bool , ID : int ) { var ] : bool print ID [ - ID ] [ false ] print ID }",
  "func ID ( ID : bool , ID : [ ID bool , ID : int ) { var ] : bool print ID [ - ID ] [ false ] print ID }",
  "func ID ( ID : bool , ID : [ { bool , ID : int ) ID var ] : bool print ID [ - ID ] [ false ] print ID }",
  "ID ID ( ) : [ - - ID ( ) / ( ( 123 / false * func ) ) ] bool { } func ID ( ) { }",
  "ID ID / ) : [ - - ID ( ) / ( ( 123 ( false * func ) ) ] bool { } func ID ( ) { }",
  "ID ID / ) : [ - - ID ( ) ] ( ( 123 ( false * func ) ) / bool { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID : bool ID [ ID [ - ( 123 ) ] ] [ = ID ] - ID } func ID ( ) { }",
  "- ID ( ID : int ) { var ID : int var ID : bool ID [ ID [ func ( 123 ) ] ] [ = ID ] - ID } func ID ( ) { }",
  "- ID var ID : int ) { var ID : int ( ID : bool ID [ ID [ func ( 123 ) ] ] [ = ID ] - ID } func ID ( ) { }",
  "func ID ( ) { var ID : bool { var ID : [ ] [ ] [ - - ID [ ID ] ] [ ] ] [ bool } while - ID { } }",
  "func ID ( ) { var ID : [ { var ID : [ ] [ ] bool - - ID [ ID ] ] [ ] ] [ bool } while - ID { } }",
  "func ID ( { { var ID : [ ) var ID : [ ] [ ] bool - - ID [ ID ] ] [ ] ] [ bool } while - ID { } }",
  "func ID ( ) { var ] : [ ( ( ID [ ID ] [ false ID ) ) ] int }",
  "} ID ( ) { var ] : [ ( ( ID [ ID ] [ false ID ) ) ] int func",
  "} ID ( ) { var ] : [ ( ( ] [ ID ] [ false ID ) ) ID int func",
  "func ID ( ID : int , ID : [ ] [ ] int , int : bool ) : int { var ID : ID var ID : [ 123 ] int } func ID ( ) { }",
  "func ID ( ID ) int , ID : [ ] [ ] int , int : bool ) : int { var ID : ID var ID : [ 123 ] int } func ID ( : { }",
  "func ID ( ID ) int , ID : [ ] [ ] int , int : bool ) : int : var ID : ID var ID : [ 123 ] int } func ID ( { { }",
  "func ID ( ) : int { var ID : bool var { : [ ] bool return } func ID ( ) { print ID if ID ID } }",
  "func ID ( ) : bool { var ID : bool var { : [ ] int return } func ID ( ) { print ID if ID ID } }",
  "func ID ( ) : bool { var ID : ) var { : [ ] int return } func ID ( bool { print ID if ID ID } }",
  "func ID ( ) { var ID : int var ) : [ ] bool print ID ( ) * ( 123 ID / - ID } func ID ( ) { }",
  "func ID ( ) var var ID : int { ) : [ ] bool print ID ( ) * ( 123 ID / - ID } func ID ( ) { }",
  "func ID ( ) ] var ID : int { ) : [ var bool print ID ( ) * ( 123 ID / - ID } func ID ( ) { }",
  "func ID ( ) { : ID var [ ID ( ) [ ( - true / true ) ] ] [ ] int } func ID ( ) { }",
  "func ID [ ) { : ID var [ ID ( ) ( ( - true / true ) ] ] [ ] int } func ID ( ) { }",
  "func ID [ ) { : ID var [ ID ( ) ( ( - true / true ) ] ] [ ] int } { ID ( ) func }",
  "func ID { ID : bool , ID : bool , ID : [ ] int ) : bool ( } func ID ( ) : bool { var ID : [ ] int }",
  "func ID { ID : bool , ID : bool , : : [ ] int ) : bool ( } func ID ( ) : bool { var ID ID [ ] int }",
  "func ID { ID : bool , ID : bool , func : [ ] int ) : bool ( } : ID ( ) : bool { var ID ID [ ] int }",
  "func ID ( ) : [ ] bool { var ID : bool var { : bool while - ( true * 123 ) { } } func ID ( ) ID }",
  "func ID ( ) : [ ] bool { var ID : bool var { : bool while - ( true * 123 ( { } } func ID ) ) ID }",
  "func ID ( ) : [ ] : { var ID bool bool var { : bool while - ( true * 123 ( { } } func ID ) ) ID }",
  "func ID / ID : [ - 123 * false ( ID [ true * ( ( ID ) ) * false ] ] int ) { } func ID ( ) { }",
  "func ID / ID : [ - 123 ID false ( * [ true * ( ( ID ) ) * false ] ] int ) { } func ID ( ) { }",
  "func ID / ID : [ - 123 ID false ( * [ true * ( ( ID ) ) * ) ] ] int ) { } func ID ( false { }",
  "func ID ( ID : bool ) { var ID ] int var ID : [ : [ ] int }",
  "func ID ( ID } bool ) { var ID ] int var ID : [ : [ ] int :",
  "func ID ( ID : int ) { } func ID ( ) : : { var ID : int var ID int bool print ( ID ) print - ( ID ) }",
  "func ID ( ID func int ) { } : ID ( ) : : { var ID : int var ID int bool print ( ID ) print - ( ID ) }",
  "func ID ( ID func int ) { } : ID ( ) : : ID var ID : int var ID int bool print ( { ) print - ( ID ) }",
  "func ID ( ) { var ID : [ ID ( ) ] ID [ ( ( ID ) ) ] ] ] [ [ int } func ID ( ) { }",
  "ID ID ( ) { var ID : [ ID ( ) ] ID [ ( ( func ) ) ] ] ] [ [ int } func ID ( ) { }",
  "ID ID ( ) { var ID : [ ID ( ) ] ID [ ( ( func ) ) ] ] ] [ [ int } func ID ( ) { }",
  "func ID ( ) { while false / ( ID / ID ( ) + - ( ) ) - ( - - - ID ) ) * - ( ( false ) ID { } } func ID ( ) { }",
  "func ID ( ) { while false / ( ID / ID ( ) + - ( ) ) - ( } - - ID ) ) * - ( ( false ) ID { } - func ID ( ) { }",
  "func ID ( ) { call ID ( ) } func ID ( ) : int { : ID : [ ] bool var ID var [ ] int }",
  "func ID ( ) { call ID ( ) } func ID ( ) : int { : ID : [ ] bool var ID var [ ] int }",
  "func ID ( ) { call ID ( ) } func ID ( ) : int { : ID : [ ] bool var ID var [ ] int }",
  "func ID ( ID : int ) { var ID : int var ID : bool return } func ID ( ) : [ ] ID { var bool : [ ] int var ID : int }",
  "func ID ( ID : int ) { var ID : int var ID : bool return } func ID ( ) : [ ] ID { var bool : [ ] int var ID : int }",
  "func ID ( ID : int [ { var ID : int var ID : bool return } func ID ( ) : [ ] ID { var bool : ) ] int var ID : int }",
  "func ID ( ) : [ ( - true ( / - - ( true ) ) ) ] int { }",
  "func ID ( ) : [ ( - true ( / - ] ( true ) ) ) - int { }",
  "func ID ( ) ) [ ( - true ( / - ] ( true ) ) : - int { }",
  "func ID ( - : [ true - ( ID ID ( ( 123 ) ) ) ] bool ) { } func ID ( ) { }",
  "func - ( - : [ true ID ( ID ID ( ( 123 ) ) ) ] bool ) { } func ID ( ) { }",
  "func - ( - bool [ true ID ( ID ID ( ( 123 ) ) ) ] : ) { } func ID ( ) { }",
  "ID ID ( ID : int ) { var ID : [ ] int print false * - ID / - true print func } func ID ( ) { }",
  "ID ID ( ID : int ) { var ID : [ ] int func false * - ID / - true print print } func ID ( ) { }",
  "ID ID } ID : int ) { var ID : [ ] int func false * - ID / - true print print } func ID ( ) { (",
  "func ID ( ID : int ID ID : int ) : int { var , : bool call ID ( ( ID ) ) ID = ( ( true ) ) }",
  "func , ( ID : int ID ID : int ) : int { var ID : bool call ID ( ( ID ) ) ID = ( ( true ) ) }",
  "func , ( ID : int ID ID : int ) : int { var ID : bool call ID ( ( ID ) ) ID = ( ( true ) ) }",
  "func ID ( ID : [ ] int ) : [ ] } ] [ false * true - ( ID ) - 123 ] int { [",
  "func ID ( - : [ ] int ) : [ ] } ] [ false * true ID ( ID ) - 123 ] int { [",
  "func ID ( - : [ [ int ) : [ ] } ] [ false * true ID ( ID ) - 123 ] int { ]",
  "func ID ( ) { var ID : bool var ID : [ - false - ( 123 * - bool * ID ) ] true } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ - false - ( 123 * - bool * ID true ] ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ - false - ( 123 * - bool * ID ID ] ) } func true ( ) { }",
  "func ID ( ID : [ ( false - ID } ( false ) ] [ - true ] + ( ( true ) ) ) ] [ ] int ) { [",
  "func ID ( ID : ] ( false - ID } ( false ) ] [ - true [ + ( ( true ) ) ) ] [ ] int ) { [",
  "func ID ( ID : ] ( false - ID } ( false ) ] [ - true [ { ( ( true ) ) ) ] [ ] int ) + [",
  "func ID ( ) : bool { call ID ( int return } func ID ( ) : [ ] bool { var ID : ) var ID : int }",
  "func ID ( ) : bool { call ID ( int return func } ID ( ) : [ ] bool { var ID : ) var ID : int }",
  "func ID ( ) ( bool { call ID ( int return func } ID : ) : [ ] bool { var ID : ) var ID : int }",
  "func ID var ID : bool ) { ( ID : int var ID : [ ] bool call ID ( ) print - ( false ) }",
  "func ID var ID : bool ) { ( ID : int var ID : [ ] bool ( ID call ) print - ( false ) }",
  "func ID var ID : bool ) ( ( ID : int var ID : [ ] bool ( ID call ) print - { false ) }",
  "func ID ( ( : bool ) { return } func ID ( ) { return ID ID ( 123 ) ) }",
  "func { ( ( : bool ) { return } func ID ( ) ID return ID ID ( 123 ) ) }",
  "func { ID ( : bool ) { return } func ( ( ) ID return ID ID ( 123 ) ) }",
  "func ID ( ] { var ID : int print ( ID * ID ( ) [ - 123 ) [ ID ] / ID ) }",
  "func ID ( ID { var ] : int print ( ID * ID ( ) [ - 123 ) [ ID ] / ID ) }",
  "func ID ( ) { var ] : int print ( ID * ID ( ID [ - 123 ) [ ID ] / ID ) }",
  "func ID ID ) { var ( : bool { var ID : int return } }",
  "func ID ID ) { var ( : bool var { ID : int return } }",
  "func ID ID ) { var bool : ( var { ID : int return } }",
  "func ID ( / : int { while 123 ) ID [ ( - false ) ] { } } func ID ( ) { }",
  "func ID ID / : int { while 123 ) ID [ ( - false ) ] { } } func ( ( ) { }",
  "func ID ID / : int { false 123 ) ID [ ( - while ) ] { } } func ( ( ) { }",
  "func ID var ) : [ ] [ ] [ ] bool { ( ID : [ false / ID ( ) / ID ] bool } func ID ( ) { }",
  "func ID var ) : [ ] [ ] [ ] bool { ( ID : [ false / ID ) ) / ID ] bool } func ID ( ( { }",
  "func ( var ) : [ ] [ ] [ ] bool { ID ID : [ false / ID ) ) / ID ] bool } func ID ( ( { }",
  "func ID ( ID : bool , ID : int ) { while - - - 123 false - / / true - - true - true { } while 123 { } } func ID ( ) { }",
  "func ID ( ID while bool , ID : int ) { : - - - 123 false - / / true - - true - true { } while 123 { } } func ID ( ) { }",
  "func ID ( ID while bool , ID : int ) } : - - - 123 false - / / true - - true - true { } while 123 { { } func ID ( ) { }",
  "func ID ( ) : bool { print - 123 / - ID ( ( - - - ID ) ) ( true while ( ( ID ) ) { } } func ID / ) { }",
  "func ID ( ) : bool { print - 123 / - ID ( ( - - - ID ) ) ( true while ( ( ID ) ) { / } func ID } ) { }",
  "func ID ( ) : bool { print - 123 / - ID ( ) - - - ID ) ) ( true while ( ( ID ( ) { / } func ID } ) { }",
  "func ID ( ID : bool ) : [ ID [ true + - 123 ] 123 - ] bool { } func ID ( ) { }",
  "func ID ( ID : bool ) : { ID [ true + - 123 ] 123 - ] bool { } func ID ( ) [ }",
  "ID func ( ID : bool ) : { ID [ true + - 123 ] 123 - ] bool { } func ID ( ) [ }",
  "func ID ( ) { var ID ( int var ID : int return ID : - ( - ID ) ) } func ID ( ) { }",
  "func ID ( ) { var ID ( int var ID : int - ID : return ( - ID ) ) } func ID ( ) { }",
  "func ID ( ) var { ID ( int var ID : int - ID : return ( - ID ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int ) false - - ID / ID [ ID ] [ ( ID ) ] if false { } } func ID ( print { }",
  "func ID ( ) { var ID : bool var ID : int ) false - - ID / ID [ ID ] [ ( ID ) ] if false { } { func ID ( print } }",
  "func ID ( ) { var ID : bool var ID : int ) false - - ID / ID [ ID ] [ ( ID ) { if false ] } { func ID ( print } }",
  "func ID ( ID : int , ID : [ ID ( false ) ID ( ) * ( - false ) / ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID ( false ) ID ( ( * ( - false ) / ] bool ) { } func ID ) ) { }",
  "func ID ( ID : int , ID : [ ID ( false ) ID ( ( * ( - ) false / ] bool ) { } func ID ) ) { }",
  "func ID ( ID : bool , ID ) int , ID : int ) : bool { var ID : int var ID : int call ID ( : while ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID ) { , ID : int ) : bool { var ID : int var ID : int call ID ( : while ( ID ) int } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int return [ func ID ( ) : [ - ID ( ID ) ] [ ] } ] [ ] int { }",
  "func ID ( ) { var ID : int var ID : int return [ func ID ( ) : [ ] ID ( ID ) ] [ ] } ] [ - int { }",
  "func ID ( ) { var ID : int ( ID : int return [ func ID ( ) : [ ] ID var ID ) ] [ ] } ] [ - int { }",
  "func ID ( ) : int { var ID : [ ] [ - 123 ID ( ID ( ( * ) ) ) / true ] bool var ID : bool }",
  "func ID ( ) : int { var ID : [ ] [ - 123 ID ( ID ( ( * var ) ) / true ] bool ) ID : bool }",
  "func ID ( ) : int { var ID : [ ] [ - 123 ID ( ID ( ( * var ) true / ) ] bool ) ID : bool }",
  "func ID ( ) : [ ] [ ] int { var ID : = var ID : [ ] bool ID ( ) [ ID ] int 123 print - true } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] int true var ID : = var ID : [ ] bool ID ( ) [ ID ] int 123 print - { } func ID ( ) { }",
  "func ID ( ) : [ int [ ] ] true var ID : = var ID : [ ] bool ID ( ) [ ID ] int 123 print - { } func ID ( ) { }",
  "func ID ( ) ] [ ( ( false / ( ID * ( - true ) / - - false ) * ID ) ) ] [ : bool { } func ID ( ) { }",
  "func ID ( ) ] [ ( ( false / ( ID * ) - true ) / - - false ( * ID ) ) ] [ : bool { } func ID ( ) { }",
  "func ID ( ) ] [ ( ( false / ( ID * ) - true ) / - - false ( * ID ) ) ] [ : bool { } func ID ( ) { }",
  "func ID ( ) { var : ID [ ] int print true * false + - ( ( 123 ) ) - ( ID ) while ID { } }",
  "func ID ( ) { var : ID [ ] int print true * false ) - ( ( 123 ) + - ( ID ) while ID { } }",
  "func ID ( ) { var : ID [ ] int print true * false ) - ( ( 123 ) + - ( ID ) while ID { } }",
  "func ID ( ) : int { var ID : [ true - false * ( ID ( ) ) - ( ID ) ] [ ] int ID ID : [ ] int } func var ( ) { }",
  "[ ID ( ) : int { var ID : [ true - false * ( ID ( ) ) - ( ID ) ] [ ] int ID ID : func ] int } func var ( ) { }",
  "[ ID ( ) : int { var ID : [ true - false * ( ID ( ) ) - ( ID ) ] [ ] int ID ID } func ] int } func var ( ) { :",
  "func ID ( ) : bool { var ID : bool while ( { true / ID * true ) ) ( } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool while ( { true / ID * true ) ) ( } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool while ( { true / ID * true ) ) ( } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int ) : int { } func ID ( ID : int : ID : int , ID : bool ) : bool { var ID : int var ID , int }",
  "func ID ( ID : int ) : int { } func ID ( ID : int : ID : int , ID : bool ) : bool { , ID : int var ID var int }",
  "func ID ( ID : int ) : int { } func ID ( ID : int : ID : int , ID : bool ) : ID { , ID : int var bool var int }",
  "func ID ( { : int ) { var ID : int ID } } func ID ( ) { }",
  "func ID ( { int int ) { var ID : : ID } } func ID ( ) { }",
  "func ID var { int int ) { ( ID : : ID } } func ID ( ) { }",
  "func ID ( ID : [ , ID : [ ] bool ) : bool ID ( ) [ 123 / - 123 ] ] int { }",
  "func ID ( ID : [ , ID : bool ] [ ) : bool ID ( ) [ 123 / - 123 ] ] int { }",
  "func ID ( ID : [ , ID : bool ] [ ) : [ ID ( ) bool 123 / - 123 ] ] int { }",
  "func ID ( ID : int , ID : int ) { var ID : [ - ID * ID [ true ] ] int var : ID bool } func ID ( ) { }",
  "func ID ( ID : int , ID int int ) { var ID : [ - ID * ID [ true ] ] : var : ID bool } func ID ( ) { }",
  "func ID ( ID : int , ID int int ) { var ID : [ - true * ID [ ID ] ] : var : ID bool } func ID ( ) { }",
  "func ID ( ID ) bool , ID : int , ID : bool : { var ID : int if ID [ - - ( ID ) ] { } while ( - - ID ) { } } func ID ( ) { }",
  "func ID func ID ) bool , ID : int , ID : bool : { var ID : int if ID [ - - ( ID ) ] { } while ( - - ID ) { } } ( ID ( ) { }",
  "func ID func ID ) bool , { : int , ID : bool : ID var ID : int if ID [ - - ( ID ) ] { } while ( - - ID ) { } } ( ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : bool { ID ID : bool call var ( false + true ) if - - - 123 { } }",
  "func ID ID ID : int , ( : bool ) : bool { ID ID : bool call var ( false + true ) if - - - 123 { } }",
  "func ID ID ID : int , ( : bool ) : bool { ID ID : bool call var ( false + true ) if - { - 123 - } }",
  "func ID ( ) : [ ( - - ( ( ID ( ID ) ) ) ] [ ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ( - - ( ( ID ( ID ) ) ) ] [ ] [ ] [ ] [ ] int ) ) } func ID ( { { }",
  "func ID ( ) : [ ( - - ( ( ID ( ID ) ) ) ] [ ] [ ] [ ] [ ] int ) ) } func ID ( { { }",
  "func { ( ) : int ID var ID : int var ID : int return ( true * ( ( - true ) ) * ID ) } func ID ( ) { }",
  "func { ( ) : int ID var ID * int var ID : int return ( true * ( ( - true ) ) : ID ) } func ID ( ) { }",
  "int { ( ) : int ID var ID * func var ID : int return ( true * ( ( - true ) ) : ID ) } func ID ( ) { }",
  "func } ( ) { if ID ( ( false / 123 * true ) ) { ID }",
  "func ( ( ) { if ID ( } false / 123 * true ) ) { ID }",
  "func ID ( ) { return ( - ( false / true / false - - ( false ) - - ID ) ( } func ID ) ) { }",
  "func ID ( ) { return ( - { false / true / false - - ( false ) - - ID ) ( } func ID ) ) ( }",
  "func ID ( ) { return ( - { false / true / false - - ( false ) - - ID ) ( } func ID ) ) ( }",
  "func ID ( ID : [ ] [ { ID * - true / false or ( ( - false ) ) or - ( ID ) ] [ ] [ ] [ ] bool ) - } func ID ( ) { }",
  "func ID ( ID : [ ] [ { ID * - true / false or ( ( - false ) ) or - ( ID ) ] [ - [ ] [ ] bool ) ] } func ID ( ) { }",
  "func ID ( ID ) [ ] [ { ID * - true / false or ( ( - false ) ) or - ( ID ) ] [ - [ ] [ ] bool ) ] } func ID ( : { }",
  "func ID ( ) : int { var ID : bool var ID : bool print true and ID * ID / ( { ) and - false print - ( ( 123 ) ) } func ID ( ) ID }",
  "func ID ( ) : int { var ID : ( var ID : bool print true and ID * ID / bool { ) and - false print - ( ( 123 ) ) } func ID ( ) ID }",
  "func ID ( ) : int / var ID : ( var ID : bool print true and ID * ID { bool { ) and - false print - ( ( 123 ) ) } func ID ( ) ID }",
  "func ID ( { { var ID : bool var ID : [ ID ( ) [ ( - ( ( - ID ) ) ) ] ] bool } func ID ( ) ) }",
  "func ID ( { { var ID : bool var ID bool [ ID ( ) [ ( - ( ( - ID ) ) ) ] ] : } func ID ( ) ) }",
  "func ID ( { { var ID : bool var ID bool [ ID ( - [ ( - ( ( ) ID ) ) ) ] ] : } func ID ( ) ) }",
  "func ID ( ) { var ID : [ ] bool var ID : ID call ID ( - int ( ) >= - ID ) }",
  "func ID ( ) { var ID ] [ : bool var ID : ID call ID ( - int ( ) >= - ID ) }",
  "func ID ( ) { var - ] [ : bool var ID : ID call ID ( ID int ( ) >= - ID ) }",
  "func ID ( : : int , ID : [ ] int , ID : bool ) { var ID : bool var ID ID bool if - ( true ) { } }",
  "func ID ( : : int , ID : [ ] bool , ID : bool ) { var ID : int var ID ID bool if - ( true ) { } }",
  "func ID ( : : int , ID : [ ] bool , ID : bool ) { } ID : int var ID ID bool if - ( true ) { var }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool var ID : bool ID ( ID ( ID ) ) = ( 123 ) } ID ( ) call func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ( : bool var ID : bool ID ( ID ( ID ) ) = ( 123 ) } ID ID ) call func ID ( ) { }",
  "func ID ) ID : bool , ID : bool ) { var ( : bool var ID : bool ID ( ID ( ID ) ) = ( 123 ) } ID ID ) call func ID ( ( { }",
  "func ID ( ) : [ [ [ ID ID ( ID ) ] ] ] bool { } func ID ( ) { }",
  "func ID ( ) : [ [ [ ID ID ( ID ) ] ] ] bool { } { ID ( ) func }",
  "func ID ( ) : [ [ [ ID ID ( ID ) ] ] ] bool { } { ) ( ID func }",
  "func ID ( ) : int { var ID : int return ID } ID - ( false ) + - - - false ) ( func ID ( ) { }",
  "func ID ( false : int { var ID : int return ID } ID - ( ) ) + - - - false ) ( func ID ( ) { }",
  "func ID ( false } int { var ID : int return ID : ID - ( ) ) + - - - false ) ( func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : } { return - - - true * - ID * - - false bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : } { return - - - true * - ID * - ) false bool } func ID ( - { }",
  "func ID ( ) : bool { - ID : bool var ID : } { return - - - true * var ID * - ) false bool } func ID ( - { }",
  "func ID ( ) : int { ID - ID [ while ( ) * ID [ true ] ] { } } func ID ( ) { }",
  "func ID ( ) : ID { int - ID [ while ( ) * ID [ true ] ] { } } func ID ( ) { }",
  "func ID ( ) : ID { int - ID [ while ( ) ID ID [ true ] ] { } } func * ( ) { }",
  "func ID ( ) { var ID : [ - false * false } [ ] bool var ID : int call ID ( ) ID = - ID ] func ID ( ) { }",
  "func ID ( ) { var ID : [ - false * false } [ ] bool var ID : int call { ( ) ID = - ID ] func ID ( ) ID }",
  "func var ( ) { ID ID : [ - false * false } [ ] bool var ID : int call { ( ) ID = - ID ] func ID ( ) ID }",
  "( ID ( ) { var ID : [ ] [ ] [ ] int var ID : bool ID [ func ( ID ) ) ] = - - ( - false ) } func ID ( ) { }",
  "( ID ] ) { var ID : [ ( [ ] [ ] int var ID : bool ID [ func ( ID ) ) ] = - - ( - false ) } func ID ( ) { }",
  "func false ( ID : [ ] int ) : int { var ID : int var ID : [ ( ID + false ) ] int }",
  "func false ( ID : [ ] int ) : int { var ID : int var ID : [ ( ID + false int ] ) }",
  "func false ( ID : [ ] int ) : ID { var ID : int var ID : [ ( int + false int ] ) }",
  "func ID ( ID : int , ID : [ ] int , ID : int ) { { var ID ) int return ID } } func ID ( : { }",
  "func ID ( ID : int , ID : [ ] int , ID : int ) { { var ID ) int return ID } } func ID ( : { }",
  "func ID ( ID : int , ID : [ { int , ID : int ) { ] var ID ) int return ID } } func ID ( : { }",
  "func ID ( ) { ( var ID : [ ] int var ID : int } print { - ( 123 ) ) } func ID ( ) { }",
  "func ID ( ) ) ( var ID : [ ] int var ID : int } print { - ( 123 { ) } func ID ( ) { }",
  "func ID ( ) ) : var ID ( [ ] int var ID : int } print { - ( 123 { ) } func ID ( ) { }",
  "func ID [ ) : ( - true + - - ID ( ID ( 123 ) ) - true ] [ ] int { } func ID ( ) { }",
  "func ID [ ) : ) - true + - - ID ( ID ( 123 ) ( - true ] [ ] int { } func ID ( ) { }",
  "func ID [ ) : ) - true + - - ID ( ID ( 123 ) ( - true { [ ] int { } func ID ( ) ] }",
  "func ID ( ID : int , ID : [ true * false + false * [ ID ( ) [ ( 123 ) ] - ID ] - ( false ) ] bool , ID : [ ] [ ] int ) { }",
  "func ID ( ID : int , ID : [ true * false + false * [ ID ( ) [ ( 123 ) ] - ID ] - ( : ) ] bool , ID false [ ] [ ] int ) { }",
  "func ID ( ID ) int , ID : [ true * false + false * [ ID ( ) [ ( 123 ) ] - ID ] - ( : : ] bool , ID false [ ] [ ] int ) { }",
  "func ID ( ID : ] true / true + ( 123 * true * ID ( ) ) + true [ [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : ] true / true + ( 123 * true * ID ( ) ) + true [ [ ] } ) { bool func ID ( ) { }",
  "func ID ( ID : ] true / true + ( 123 * true * ID ( ) ( + true [ [ ] } ) { bool func ID ) ) { }",
  "func ID ( ] : [ ] [ ] [ ] int , ID : bool , ID : [ ID [ ID [ ID ] [ ( 123 ) ] ] [ ] [ ] int ) { }",
  "func ] ( ] : [ ] [ ] [ ] int , ID : bool , ID : [ ID [ ID [ ID ] [ ( 123 ) ID ] [ ] [ ] int ) { }",
  "func ] ( ] : [ ] [ ] [ ] int , ID ( bool , ID : [ ID [ ID [ ID ] [ : 123 ) ID ] [ ] [ ] int ) { }",
  "func ID ( ) : int { var false : int var ID : bool return false / - ( - ID ) / ( ( ID ) ) } func ID ( ) { }",
  "ID ID ( ) : int { var false : int var ID : bool return false / - ( - ID ) / ( ( func ) ) } func ID ( ) { }",
  "ID ID ( ) : int { var false : int var ID : bool return false / - ( ) ID ) / ( ( func ) ) } func ID ( - { }",
  "func ID ( ) : [ ( ( ) ( ) [ - ( ID ) ] [ ( false ) ] ) ID ] [ ] int { }",
  "func ID ( ) : [ ( ( ) ( ) [ - ( ID ) ] [ ( false ) ] ) ID int [ ] ] { }",
  "func ID ( ) : [ ID ( - - false / ( ID ( ) ) ) ] [ ] } { bool func ID ( ) { }",
  "func ID ( ) : [ ID ( - - false / ( ID ID ) ) ) ] [ ] } { bool func ( ( ) { }",
  "func ID ( ) : [ ID ( - - false ) ( ID ID ) ) / ] [ ] } { bool func ( ( ) { }",
  "func ID ( ) : [ true ( + - ( - ID [ ID ] [ 123 ] ) ) - true ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : [ true ( + - ( - ID [ ID ] [ 123 ] ) ) - true ] [ ] bool { func } ID ( ) { }",
  "func ID ( ) : [ true ( + - ( - ID [ ID ] [ 123 ] ) ) - true ] [ ] bool { func } ID ( ) { }",
  "func ID ( ID : int , ID : [ ] ( ) : [ bool - ID * true >= ( 123 ) ) ] [ ] [ ] [ ] [ ] int { }",
  "func ID ( ID bool int , ID : [ ] ( ) : [ : - ID * true >= ( 123 ) ) ] [ ] [ ] [ ] [ ] int { }",
  "func ID ( ID bool int , ID : [ ] ( ) : [ : - ID * true >= ( 123 ) ) ] [ [ [ ] ] ] [ ] int { }",
  "func ID : ID ( [ ( - - - ( - ID ( ( ( - ID ) ) ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID : ID ( [ ( - ) - ( - ID ( ( ( - ID ) ) - ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { print - true * ID ( - ID false [ ] [ false ] ) }",
  "func ID - ) { print - true * ID ( ( ID false [ ] [ false ] ) }",
  "func ID - ) { print - true * ID ( ( ID ] [ false [ false ] ) }",
  "func ID ( ID : } , ID : int , ID : [ - - ID < ( ID ) ] bool ) { } func ID ( ) { bool",
  "func : ( ID : } , ID ID int , ID : [ - - ID < ( ID ) ] bool ) { } func ID ( ) { bool",
  "func : ( ID : } , ID ID int , ID : [ - - ID < ( ID ) ] bool ) { } func ID ( ) { bool",
  ": ID ( ) func bool { return } func ID ( ID : int , ID : int , ID : bool ) : [ ] bool { }",
  ": ID ( ) func bool { return } func ID ( ID : int , ID : int , ID : bool ) bool [ ] : { }",
  ": ID ( ) func bool { return } } ID ( ID : int , ID : int , ID : bool ) bool [ ] : { func",
  "func ID ] ) : int { var ID : [ ( int var ID : bool print true - ID [ ( false ) ] [ ID ] + ID }",
  "func ID ] ) : int { int ID : [ ( var var ID : bool print true - ID [ ( false ) ] [ ID ] + ID }",
  "func ID ] int : int { ) ID : [ ( var var ID : bool print true - ID [ ( false ) ] [ ID ] + ID }",
  "func ID ( ID : bool , ID : [ ] bool , ID : bool ) { var ID : [ ( ) ID - ] bool }",
  "func ID ( ID [ bool , ID : : ] bool , ID : bool ) { var ID : [ ( ) ID - ] bool }",
  "func ID ( ID [ bool , ID , : ] bool : ID : bool ) { var ID : [ ( ) ID - ] bool }",
  "func ID ( ID : int , var : int , ID : bool ) : bool { var ID : [ ( true / ID ) ] int ID ID : [ ] [ ] [ ] int }",
  "func ID ( ID : int , var [ int , ID : bool ) : bool { var ID : : ( true / ID ) ] int ID ID : [ ] [ ] [ ] int }",
  "func ID ( ID : int , var ID int , ID : bool ) : bool { var ID : : ( true / [ ) ] int ID ID : [ ] [ ] [ ] int }",
  ": ID ( ID : bool , ID func int , ID : int ) { var ID : int var ID : int while ( false ) { } } func ID ( ) { }",
  ": ID ( ID : ID , ID func int , ID : int ) { var ID : int var bool : int while ( false ) { } } func ID ( ) { }",
  ": ID ( ID : ID , ID func int , ID : int ) { var ID : int var bool : int while ( false ) { } } func ID ( { ) }",
  "func ID ( ) : bool { var ID : call var ID : int int ID ( ) { var ID : [ ] int var ID : [ ] bool } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : call var ID : int int ID ( ) { var ID : [ : int var ID ] [ ] bool } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : call var ID : int int ID ( ID { var ID : [ : int var ) ] [ ] bool } } func ID ( ) { }",
  "func ID ( ID : bool ) { var bool : int var ID : ID print true - - ( ( - ID ) ) + - ( false ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var bool : int ( ID : ID print true - - var ( - ID ) ) + - ( false ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var bool : int ( ID : ID print true - - var false - ID ) ) + - ( ( ) } func ID ( ) { }",
  "func ID ( ID : [ ( - ( - 123 / true - / - - ( 123 ) ) ) ] bool ) { }",
  "func ID ( ID : [ ( - ( - 123 / true } / - - ( 123 ) ) ) ] bool ) { -",
  "func ID ( ID : [ ( ] ( - 123 / true } / - - ( 123 ) ) ) - bool ) { -",
  "func ID ( ) { var ID : [ ] int var ID : int call ID ID ) print false / ( ( ) }",
  "( ID ( ) { var ID : [ ] int var ID : int call ID ID ) print false / func ( ) }",
  "( ID ( ) { var ID : [ ] int false ID : int call ID ID ) print var / func ( ) }",
  "func ID ( ) : int { var ID : [ ] bool true [ ID [ ( ( ID ) ) ] ] [ ( ID ) ] = ( ( - ID ) ) ID = true }",
  "func ID ( ) : int { var ID : [ ] bool true [ ID [ ( ( ID ) ) ] ] [ ( ID ) ] = ) ( - ID ) ( ID = true }",
  "func ID ( ) : int { var ID : [ ] bool true [ ID [ ( ( ID ) ) - ] [ ( ID ) ] = ) ( ] ID ) ( ID = true }",
  "func ID ( ID : int : ID , int ) : int { var ID : [ ] int }",
  "func ID ( ID : int ] ID , int ) : int { var ID : [ : int }",
  "func ID ( , : int ] ID ID int ) : int { var ID : [ : int }",
  "func ID ( ) : - { var ID : int if ( - - false * - - ( ( bool - true ) ) / ( ID ) ) { } }",
  "func ID ) ) : - { var ID : int if ( - - false * - - ( ( bool - true ) ( / ( ID ) ) { } }",
  "func ID ) ) : - { var ID : int if ( - - false * - - ) ( bool - true ) ( / ( ID ( ) { } }",
  "func ID ( ID : int , ID : int bool : [ ] int { var ID : [ false / - ID [ 123 ] [ true ] ] ) var ID : int }",
  "func int ( ID : int , ID : int bool : [ ] int { var ID : [ false / - ID [ 123 ] [ true ] ] ) var ID : ID }",
  "func int ( ID : int , ID : int bool : [ ] int { var ID : [ false / - ID [ 123 ] [ true ] ] ) var ID : ID }",
  "func ID ( ID : [ ] int ) ID bool { var ID : [ true + : ( ) [ ID ] + - true ] bool }",
  "func ID ( ID : [ true int ) ID bool { var ID : [ true + : ( ) [ ID ] + - ] ] bool }",
  ") ID ( ID : [ true int func ID bool { var ID : [ true + : ( ) [ ID ] + - ] ] bool }",
  "func ID ( ID false bool , ID : [ - false * : < ( 123 + false ) ] int ) { } func ID ( ) { }",
  "func ID ( ID false bool , ID : [ - false * : < ( 123 + false ) ] int ) { } func ID { ) ( }",
  "func ID ( ID false bool , ID : [ - false * : int ( 123 + false ) ] < ) { } func ID { ) ( }",
  "func ID ( ID : [ ] [ ( true { ID / ( true ) ) ] [ ] [ ] [ ] int ) / } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( true { ID / ( true ) ) ] [ ] [ ] [ ] int ) / } func ID ( ) { }",
  "func ( ( ID : [ ] [ ( true { ID / ( true ) ) ] [ ] [ ] [ ] int ) / } func ID ID ) { }",
  "func ID ) ( { { return ( ID * - true - - 123 - - true ) } ID = ID }",
  "func ID ) ( { { return ( ID * - true - - 123 - - true ) } ID = ID }",
  "func ID ) ( { { return ( ID * - true - - 123 - - true = } ID ) ID }",
  "func ID ( ) ID var { : bool } func ID ( ) : int { var ID : [ ] int var ID : [ ] int call ID ( ) }",
  "func ID ( ID ) var { : bool } func ID ( ) : int { var ID : [ ] int var ID : [ ] int call ID ( ) }",
  "func ID ( ID ) var { : bool } func int ( ) : int { var ID : [ ] ID var ID : [ ] int call ID ( ) }",
  "func ID ( ID : { , ID : bool ) bool var ID : [ ID and 123 * ID ] int var ID : int }",
  "func ID ( ID : { , ID : bool ) bool var ID : [ ID 123 and * ID ] int var ID : int }",
  "func ID ( ID : { , ID : bool ) bool var ID : [ ID 123 and * ID ] } var ID : int int",
  "func ID ( ID : bool , - : int , ID : int ) : [ ( 123 * ( ( ID ID ) ) / ( ( 123 ) ) ) ] [ ] [ ] int { }",
  "func ID ( ID : bool , - : int , ID : int ) : [ ( 123 * ( ( ID [ ) ) / ( ( 123 ) ) ) ] ID ] [ ] int { }",
  "func ID ( ID : bool , - : int , ID ] int ) : [ ( 123 * ( ( ID [ ) ) / ( ( 123 ) ) ) ] ID ] [ : int { }",
  "func ID ( ) { var ID bool : while - ID - false - ( ID ) { } ID = ( - ID ) } func ID ( ) { }",
  "func ID ( ) { var ID bool : ID - ID - false - ( ID ) { } ID = ( - ID ) } func while ( ) { }",
  "} ID ( ) { var ID bool : ID - ID - false - ( ID ) { func ID = ( - ID ) } func while ( ) { }",
  "func ID ( : : bool , ID : bool , ID ID bool ) : bool { var ID : bool { return ( ID ) } call ID ( ) } func ID ( ) { }",
  "func ID ( : : , bool ID : bool , ID ID bool ) : bool { var ID : bool { return ( ID ) } call ID ( ) } func ID ( ) { }",
  "func ID ( : : , bool ID : bool , ID ID bool ) { bool : var ID : bool { return ( ID ) } call ID ( ) } func ID ( ) { }",
  "func ID ( - : int ) { var ID : int while 123 / ( ID ( - ( false ) ) ) / - false { } while ( ID ( ID ) ) { } }",
  "func ID ( - : int ) { var ID : int while 123 / ( ID ( - ( false ) ID ) / - false { } while ( ID ( ) ) ) { } }",
  "func ID ( - : int ) { var ID : int while 123 / ( ID ID - ( false ) ID ) / - false { } while ( ( ( ) ) ) { } }",
  "func ID ( ) { var ID : : - true / ( - ID [ - - ( - - ID ) ] ) ] int var ID [ bool } func ID ( ) { }",
  "func ID ( ) { var ID : : - true / ( - ID [ - - ( - - ID ) ] ) ] int var ID [ ( } func ID bool ) { }",
  "func ID ( ) { var ID : : - var / ( - ID [ - - ( - - ID ) ] ) ] int true ID [ ( } func ID bool ) { }",
  "func ID ( ID : * , ID : int , ID : bool ) : int { var ID : [ 123 / false int true ] bool var ID : int }",
  "func ID ( ID : * , ID : int var ID : bool ) : int { var ID : [ 123 / false int true ] bool , ID : int }",
  "func ID ( ) : int ) var ID : int var ID : bool while true * true + ( ( - ( - ID ) ) { + ID { } } func ID ( ) { }",
  "func ID ( ) : int ) var ID : int var ID : bool while true * true + ( ( - ( - ID ) { ) + ID { } } func ID ( ) { }",
  "func ID ( ) : int ) var ID : int var ID : bool while true func true + ( ( - ( - ID ) { ) + ID { } } * ID ( ) { }",
  "- ID ( ) { var ID : int print true / ID ( ) func - ID ( ) [ 123 ] [ 123 ] + ( - ID ) { } } func ID ( ) { }",
  "- ID ID ) { var ID : int print true / ID ( ) func - ID ( ) [ 123 ] [ 123 ] + ( - ( ) { } } func ID ( ) { }",
  "- ID ID ) { var ID func int print true / ID ( ) func - ID ( ) [ 123 ] [ 123 ] + ( - ( ) { } } : ID ( ) { }",
  "func ID ( ) ] [ ] [ ID [ ID ( - - false ) ] : [ ] int { } func ID ( ) { }",
  "func [ ( ) ] [ ] [ ID [ ID ( - - false ) ] : ID ] int { } func ID ( ) { }",
  "func [ ( ) ] [ ] [ ID [ ID ( { - false ) ] : ID ] int { } func ID ( ) - }",
  "func ID ( ) : [ ] [ 123 ( ( - ( 123 * / true ) * ID ) ) ] int { }",
  "func ID ( ) : [ ] [ 123 ( ID - ( 123 * / true ) * ( ) ) ] int { }",
  "func ID ( ) : [ ] [ 123 ( ID - ( 123 * / } ) * ( ) ) ] int { true",
  "func ID ( ID : bool , ID : int ) : bool [ var ID : int var ID : [ ID ( true ) ] { ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : bool [ var ID : int var ID : [ ID ( true ) ] { ] bool } } ID ( ) { func",
  "func ID ( ID : bool , ID : int ) : bool [ var ID : int var ID : [ ID ( true ) ] { ] bool } } ID ( ) { func",
  "func ID ( ID : int , ID * bool , ID : [ - false / ID [ - true * 123 * true ] : 123 ] bool ) { }",
  "func ID ( ID : int , ID * bool , ID - [ - false / ID [ : true * 123 * true ] : 123 ] bool ) { }",
  "* ID ( ID : int , ID * bool , ID - [ - false / ID [ : true func 123 * true ] : 123 ] bool ) { }",
  "} ID ( ID : bool ) : [ ] bool { if ( ID [ ID ] ) { func } func ID ( ) { }",
  "} ID ( ID : bool ) ) [ ] bool { if ( ID [ ID ] ) { func } func ID ( : { }",
  "} ID ( ID : bool ) ) [ ] bool { if : ID [ ID ] ) { func } func ID ( ( { }",
  "func ID ( ID ] [ - 123 - ID [ - - - - ( ( ID ) ) : [ - true ] ] bool ) { }",
  "func ID ( ID ] [ - 123 - ID [ - - - - ( ( ID ) ) { [ - true ] ] bool ) : }",
  "func ID ( ID ] [ ) 123 - ID [ - - - - ( ( ID - ) { [ - true ] ] bool ) : }",
  "func ID ( ) : int { var ID : bool var ID : } } func ID ( ) { { var ID : [ ] [ ] int } print 123 int",
  "func ID ( ) : int { var ID : bool var ID : } } func ID ( ) { { var ID ] [ : [ ] int } print 123 int",
  "func ID ( ) : int { var ID : bool var ID : } } int ID ( ) { { var ID ] [ : [ ] func } print 123 int",
  "func ID ( ID : int , ID : ) ] [ true / ID ( ID ( ( ID ) ) [ * ID ] bool ) { }",
  "func ID ( ID : int , ID : ) ] [ true / ID ( ID ( ( ID ) ) [ * ID ] bool ) { }",
  "func ID ( ID : int , ID : ) ] [ true / ID ( ID ( ( ID ) ) [ * ID ] { ) bool }",
  "func ID ( ) { var ID : [ 123 - 123 * true and ID ( false func ] bool var ID : int } ) ID ( ) { }",
  "func ID } ) { var ID : [ 123 - 123 * true and ID ( false func ] bool var ID : int ( ) ID ( ) { }",
  "func ID } ) { var ID { [ 123 - 123 * true and ID ( false func ] bool var ID : int ( ) ID ( ) : }",
  "- ID ( ) { var ID : [ ] [ ] bool call ID ( - false func ( ID ) - - - true ) } func ID ( ) { }",
  "- ID ( ) { var ID : [ ] [ ] bool call ID ( - false func ( ID ) } - - true ) - func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) : int { var ID : bool var ID : int { var ID : int ID } - true } = func ID ( ) { }",
  "func ID ( ID : [ ID bool , ID : bool ) : int { var ID : bool var ] : int { var ID : int ID } - true } = func ID ( ) { }",
  "func ID ( ID : bool ) { ID ID : int var ID : bool var = 123 / ( ( true ) ) }",
  "func ID ( ID : bool ) { ID var : int var ID : bool ID = 123 / ( ( true ) ) }",
  "func ID ( ID : bool ) { ID var : int = ID : bool ID var 123 / ( ( true ) ) }",
  "func ID bool ) { var ID : ( var ID : [ ] [ ( - ( - true ) ) ] int }",
  "func ID bool ) { var ID - ( var ID : [ ] [ ( - ( : true ) ) ] int }",
  "func ID bool ) { true ID - ( var ID : [ ] [ ( - ( : var ) ) ] int }",
  "func ID : ID ( bool , ID : [ - ID / ( ID ( 123 ) ) * - ( ID ) ] int , ID : bool ) { }",
  "func ID ( ) { ] ( ) [ ( ID [ ( false ) ] ) ID = ID ID = - 123 } func ID ( ) { }",
  "func ID ( ) { ] ( ) [ = ID [ ( false ) ] ) ID = ID ID ( - 123 } func ID ( ) { }",
  "func ID ( ID { ] ( ) [ = ID [ ( false ) ] ) ID = ID ID ( - 123 } func ) ( ) { }",
  ": ID ( ID : int , ID func bool ) { var ID : int var ID : int ID [ false * - - - - ID * ( - 123 ) ] = ID ID = ID }",
  ": ID ( ID : ( , ID func bool ) { var ID : int var ID : int ID [ false * - - - - ID * int - 123 ) ] = ID ID = ID }",
  ": ID ( ID int ( , ID func bool ) { var ID : int var ID : int ID [ false * - - - - ID * : - 123 ) ] = ID ID = ID }",
  "func ID ( ) { ID 123 / 123 * 123 + ( ID ( ) + ( false ) ) } func print ( ) { }",
  "func ID ( ) { ID 123 / 123 * 123 + ( { ( ) + ( false ) ) } func print ( ) ID }",
  "func ID ( ) { ID 123 123 / * 123 + ( { ( ) + ( false ) ) } func print ( ) ID }",
  "func ID ( ) { var ( : [ ] [ ( ( false / - ( ( ID - true ) ) ) * ( ( - 123 ) ) ) ) ] [ ] int } func ID ( ) { }",
  "func { ( ) ID var ( : [ ] [ ( ( false / - ( ( ID - true ) ) ) * ( ( - 123 ) ) ) ) ] [ ] int } func ID ( ) { }",
  "func { ( ) ID var ( : [ ] [ ( ( func / - ( ( ID - true ) ) ) * ( ( - 123 ) ) ) ) ] [ ] int } false ID ( ) { }",
  "func ID ( ) : int { ( ID : int var ID : int } func ID var ) { return - true * ( - ( ID ) ) / false }",
  "func ID ( ) : int { ( ID : int var ID : int } func ID var ) { * - true return ( - ( ID ) ) / false }",
  "func ID ( ) : int { ( ID : int var ID : int } func ID var ) { * - true return ( - } ID ) ) / false (",
  "func ID } ID : bool ) { (",
  "func ID { ID : bool ) } (",
  "func ID ) ID : bool { } (",
  "func ID ( ) { var ID : int return ( true and - ID [ - false ] [ { ] ) } func ID ( ) ID }",
  "func ID ( ) { var ( : int return ( true and - ID [ - false ] [ { ] ) } func ID ID ) ID }",
  "func true ( ) { var ( : int return ( ID and - ID [ - false ] [ { ] ) } func ID ID ) ID }",
  "func ID ( ID : bool ) { while ID [ - ID true 123 ] [ ID ] ] [ [ ] { } print ( 123 ) } func ID ( ) { }",
  "func ID ( ID : ID ) { while ID [ - bool true 123 ] [ ID ] ] [ [ ] { } print ( 123 ) } func ID ( ) { }",
  "func ID ( ID : ID while { ) ID [ - bool true 123 ] [ ID ] ] [ [ ] { } print ( 123 ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID ] [ ID ( - - ( true ) ) : int } func ID ( ) { }",
  "func ID ( ) ( bool { var ID : int var ID ] [ ID ( - - ( true ) ) : int } func ID : ) { }",
  "func ID ( ) ( bool { { ID : int var ID ] [ ID ( - - ( true ) ) : int } func ID : ) var }",
  "func ID ( ID : [ ] bool ) : { { var ID : bool var ID : int { } } func ID ( ) : bool int }",
  "func ID ( ID ID [ ] bool ) : { { var : : bool var ID : int { } } func ID ( ) : bool int }",
  "func ID ( ID ID [ ] bool ) : { { var : : bool var ID : int { } } func ID ( ) : bool int }",
  "func ID ( ) { var ID : int while ) false * ( ID ( ID ) - { } { } } func ID ( ) { }",
  "func ID ( ) { var ID : int while ) false * ( } ( ID ) - { ID { } } func ID ( ) { }",
  "func ID ( ) ) var ID : int while { false * ( } ( ID ) - { ID { } } func ID ( ) { }",
  "func ) ( ID : [ ] int , ID : [ - ( ( false / ( 123 ID ) ) ] int ) { } func ID ( ) { }",
  ") ) ( ID : [ ] int , ID : [ - ( ( false / ( 123 ID ) func ] int ) { } func ID ( ) { }",
  ") ) ( ID : [ ] int ] ID : [ - ( ( false / ( 123 ID ) func , int ) { } func ID ( ) { }",
  "func ID ( ) { var ID ID int { var ID : int print - false * - - false / ( true ) if - : { } } } func ID ( ) { }",
  "func ID ( ) { var ID ID int if var ID : int print - false * - - false / ( true ) { - : { } } } func ID ( ) { }",
  "func ID ( ) { var ID ID int if var ID : int print false false * - - - / ( true ) { - : { } } } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] bool { var ID : [ ] [ if - - ID bool - ( ID ) ] [ ID ] { } } func ID ( ) { }",
  ": ID ( ID : int ) : [ ] bool { var ID func [ ] [ if - - ID bool - ( ID ) ] [ ID ] { } } func ID ( ) { }",
  "func ID ( ) { return - ( ) [ 123 + ID - ( - 123 ) - - 123 ] [ true ] }",
  "func ID ) ( { return - ( ) [ 123 + ID - ( - 123 ) - - 123 ] [ true ] }",
  "func ID ) ( { return - ( ) [ 123 + ID - - ( 123 ) - - 123 ] [ true ] }",
  "func ID ( ID : [ ] bool , ID : { , ID : int ) : bool bool var ID : [ ID ( ) [ ID ] ] bool var ID : bool }",
  "func ID ( var : [ ] bool , ID : { , ID : int ) : bool bool ID ID : [ ID ( ) [ ID ] ] bool var ID : bool }",
  "func ID ( var : [ ] bool , ID : { , ID : int ) : bool bool ID ID : [ ) ( ID [ ID ] ] bool var ID : bool }",
  "func ID ( ID : bool ) { var ID : int { var ID : ] ( ID [ - 123 ] [ ID ] ) [ [ ] [ ] [ ] bool var ID : int } { } } func ID ( ) { }",
  "func ID ( ID : bool ) [ var ID : int { var ID : ] ( ID [ - 123 ] { ID ] ) [ [ ] [ ] [ ] bool var ID : int } { } } func ID ( ) { }",
  "func ID ( ID : bool ) [ var ID : int { var ID : ] ( ID [ - ] ] { ID ] ) [ [ 123 [ ] [ ] bool var ID : int } { } } func ID ( ) { }",
  "func ID ( ) : int ] var ID : [ { bool }",
  "( ID func ) : int ] var ID : [ { bool }",
  "( ID func ) : int ] [ ID : var { bool }",
  "func ID ( ) : [ - ID [ ID ( ) [ true * ( ( 123 ) ) ] [ } ] ] ] int { ID",
  "func ID ( ) : [ - { [ ID ( ) [ true * ( ( 123 ) ) ] [ } ] ] ] int ID ID",
  "func ID ( ) : [ - { [ ID ( ( [ true * ( ) 123 ) ) ] [ } ] ] ] int ID ID",
  "func ID ( - : bool , ID : int ) { ID [ ID ( ) [ ID ] [ - ID ( 123 ) ] ] = 123 call ID ( ) } func ID ( ) { }",
  "func ID ( - : bool , ID : int ) ID { [ ID ( ) [ ID ] [ - ID ( 123 ) ] ] = 123 call ID ( ) } func ID ( ) { }",
  "func ID ( ) : 123 { print - ID ( int * - ( true ) ) call ID ( ) }",
  "func ID ( ) : 123 { print - int ( ID * - ( true ) ) call ID ( ) }",
  "func ID ( ) : true { print - int ( ID * - ( 123 ) ) call ID ( ) }",
  "func ID ( ) { var } : int print false and ( ( ID ) ) and ID } func ID ( ) { ID",
  "func ID ( ) { var } and int print false and ( ( ID ) ) : ID } func ID ( ) { ID",
  "ID func ( ID : bool ) { return }",
  "ID ID ( func : bool ) { return }",
  "bool ID ( func : ID ) { return }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : int { var ID : bool call ID ( while ) - 123 { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ( : int { var ID : bool call ID ( while ) - 123 { } } func ID ) ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ( : int { var ID : bool call ID ( } ) - 123 { while } func ID ) ) { }",
  "func ID ( ID : bool ) : int { var ID : bool var ID : bool } func bool ( ) : [ ] int { var ID : ID var ID : bool }",
  "func ID ( ID : bool ) : int { var ID : bool var ID : bool } func bool ( ) : [ ] : { var ID : ID var ID int bool }",
  "func ID ( ID : bool ) bool int { var ID : bool var ID : bool } func : ( ) : [ ] : { var ID : ID var ID int bool }",
  "func ID ( ) { if 123 + ID ( ) [ - ( - ( ( ) true ) ( ) ) ] [ - ID ] - false { } }",
  "func ID ( ) { if 123 + ID ( ) [ - ( - ( ( ) true ) ( ) ) ] [ - ID ] - false { } }",
  "func ID ( ) { if - + ID ( ) [ 123 ( - ( ( ) true ) ( ) ) ] [ - ID ] - false { } }",
  "func ID ( ID : bool , ID } [ true * false or false * ( - ID ) ] int , ID : bool ) { : func ID ( ) { }",
  "( ID func ID : bool , ID } [ true * false or false * ( - ID ) ] int , ID : bool ) { : func ID ( ) { }",
  "( ID func ID : bool , ID } [ true * false or false * ( - ID ) ] int , ID : bool ) { ) func ID ( : { }",
  "func ID ID ( : bool ) : [ ] [ ] bool { ID = ( - ID ) }",
  "func ID ID ( : bool ) : [ ] [ ] ( { ID = bool - ID ) }",
  "func ID ID ( : bool ) : [ ] [ ] ( { } = bool - ID ) ID",
  "ID ID ( ) { if 123 / ID ( ID [ func ] ) { } while ( - ID ) { } }",
  "ID ) ( ) { if 123 / ID ( ID [ func ] ) { } while ( - ID ID { } }",
  "ID ) ( ) { if 123 ID ID ( / [ func ] ) { } while ( - ID ID { } }",
  "[ ID ( ) : [ - ( ( ID func - ID ] [ ID ] ) ) ] bool { } func ID ( ) { }",
  "[ ID ( ) : [ ( ( ( ID func - ID ] [ ID ] ) ) ] bool { } func ID - ) { }",
  "[ ID ( ) : [ ( ( ( ID func - ID ] [ ID ] ) - ] bool { } func ID ) ) { }",
  "func ID ( ID : int , ID : int ) : int { var ID : int var ID : bool } func ID ( ) int : { return }",
  "int ID ( ID : int , ID : func ) : int { var ID : int var ID : bool } func ID ( ) int : { return }",
  "int int ( ID : ID , ID : func ) : int { var ID : int var ID : bool } func ID ( ) int : { return }",
  "func ID ( ) : [ ID [ - - - ( ID ( ( ( ID ) ID ) ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ID [ - - - ( ID ( ( ( ID ) ID ) ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ID [ - - ] ( ID ( ( ( ID ) ID ) ) ] - int ) { } func ID ( ) { }",
  "func ID ( ID : [ - - - - - false func ( - ( true ) ) ] int ) { } / ID ( ) { }",
  "func ID { ID : [ - - - - - false func ( - ( true ) ) ] int ) ( } / ID ( ) { }",
  "func ID { ID : [ - - - func - false - ( - ( true ) ) ] int ) ( } / ID ( ) { }",
  "func ID ( ) : int { while ( ID ( ) [ - ) ( ) ] [ ID ] ID { } } func ID ( ) { }",
  "func int ( ) : ID { while ( ID ( ) [ - ) ( ) ] [ ID ] ID { } } func ID ( ) { }",
  "func int [ ) : ID { while ( ID ( ) [ - ) ( ) ] ( ID ] ID { } } func ID ( ) { }",
  "ID func ( ID : int ) { var ID : int while ( ( ID [ true ] [ true ] ) ) { } } func ID ( ) { }",
  "ID func ( ID : int ) ( var ID : int while ( ( ID [ true ] [ true ] ) ) { } } func ID { ) { }",
  "ID func ( ID : int ) ( var ID : int while ( ( ID [ true ] [ true ] { ) ) } } func ID { ) { }",
  "func ID ( ID : int bool { var ID : ) } func ID ( ) { var ID : bool }",
  "func ID ( ID : int bool { var ID : ) } func ID ( ) { var ID : bool }",
  "var ID ( ID : int bool { var ID : ) } func ID ( ) { func ID : bool }",
  "} ID ( ID : [ ] bool ) : int { print - false and - ( - false ) func",
  "} ID ( ID : [ ] bool ) : int { print func false and - ( - false ) -",
  "} ID ( ID : [ ] bool { : int ) print func false and - ( - false ) -",
  "func ID ( ) : int { var ID : [ * / false - ID ( ) ID ( - ID ) / ID ] [ ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ * func false - ID ( ) ID ( - ID ) / ID ] [ ] int } / ID ( ) { }",
  "func ID ( ) : int { var ID : [ * func false - ID { ) ID ( - ID ) / ID ] [ ] int } / ID ( ) ( }",
  "func ID ( ID : int ) : bool { { call ID ) - ( - ( 123 ) ) ) call ID ( ( } } func ID ( ) { }",
  "func ID ( ID : int ) : bool { { call ID ) - ( - ( 123 ) ) ) call ID ( ( } } func ID ( ) { }",
  "func ID ( ID : int ) : ( { { call ID ) - ( - bool 123 ) ) ) call ID ( ( } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : [ ] bool ID ( 123 / - ID ( - true ) = ( / 123 ) ) if - ( ( - - - ID ) ) { } }",
  "func ID ( ) : } { var ID : int var ID : [ ] bool ID ( 123 / - ID ( - true ) = ( / 123 ) ) if - ( ( - - - ID ) ) { } bool",
  "func ID ( ID : bool ) : int { print true * false + ID ( ) [ ( - ( ( ID ) ) ) ] + ( ID ) } } ID ( ) { func",
  "func ID ( ID : bool ) : int { print true * false + ID ( } [ ( - ( ( ID ) ) ) ] + ( ID ) } ) ID ( ) { func",
  "func ID ( ID : bool ) : int { print true * false + ID ( ID [ ( - ( ( ID ) ) ) ] + ( ID ) } ) } ( ) { func",
  "func ID ( ID : int , ID [ [ false - ID ( - ID : - ID ] [ ( ID ) ] ) - ( 123 ) ] int ) { }",
  "func ID ( ID : int , ID [ [ false - ID ( - ID : - ID ] [ ( ID ) ] ) - ( 123 ) ] int ) { }",
  "func ID ( ) { var ID : int var ID : [ ] bool call ( ID ( false / ( true ) ) ) }",
  "func ID ( ) { var ID : int var ID : [ ] bool ) ( ID ( false / ( true ) call ) }",
  "func ID ( ) { var ID : int var ID ID [ ] bool ) ( : ( false / ( true ) call ) }",
  "func ID ( ) : bool { if ID ( - ( ( ( ( ID ) ) ID ) ) { } call ) ( ) } func ID ( ) { }",
  "func ID ( ) : ID { if bool ( - ( ( ( ( ID ) ) ID ) ) { } call ) ( ) } func ID ( ) { }",
  "func ID ( ) : ID { if bool ( ) ( ( ( ( ID ) ) ID ) ) { } call ) ( - } func ID ( ) { }",
  "func ID ( ) : bool { { var ID : bool var ID : int { } return ID ( - } ) } print false true",
  "func ID ( ) : bool { { var ID : bool var ID : ID { } return int ( - } ) } print false true",
  "func ) ( ID : bool { { var ID : bool var ID : ID { } return int ( - } ) } print false true",
  "( ID ( ) : [ 123 and ( false + ( ( true ) ) + true ) and - func 123 ) ] int { }",
  "( ID ( ) : [ + and ( false 123 ( ( true ) ) + true ) and - func 123 ) ] int { }",
  "( ID ( ) : [ + and ( false 123 ( ( true ) ) + true ) and - func 123 ) ] int { }",
  "{ ID ( ) : int { var ID : bool if ID ( ID ( false ) ) func } print 123 }",
  "{ ID var ) : int { ( ID : bool if ID ( ID ( false ) ) func } print 123 }",
  "{ { var ) : int ID ( ID : bool if ID ( ID ( false ) ) func } print 123 }",
  "func ID ( ) ) var ID : bool print - - - ID ( false * ( ID ) ) print 123 } func ID ( { { }",
  "func ID ( ) ) var ID ID bool print - - - : ( false * ( ID ) ) print 123 } func ID ( { { }",
  "func ID ( ) ) var ID ID { print - - - : ( false * ( ID ) ) print 123 } func ID ( bool { }",
  "func ID ( ) : [ ] [ ] bool { var ID : int var ID ( bool } func ID : ) : [ ID ] int { }",
  "func ID ( ) : [ ] [ ] bool { var ID : int var ID bool ( } func ID : ) : [ ID ] int { }",
  "func ID ( ) : [ ] : ] bool { var ID : int var ID bool ( } func ID : ) [ [ ID ] int { }",
  "func ID ( ID : int , ID : [ true * ID [ ID [ 123 ] [ - false ] ] [ ( - 123 [ ] ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ true * ] [ ID [ 123 ] [ - false ID ] [ ( - 123 [ ] ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ true * ] [ ID [ 123 ] [ - { ID ] [ ( - 123 [ ] ] ) ] bool ) false } func ID ( ) { }",
  "func ID ID ( : [ ] [ ] [ false / false * ( - - ID ) ] [ ] bool ) { }",
  "* ID ID ( : [ ] [ ] [ false / false func ( - - ID ) ] [ ] bool ) { }",
  "* ID ID ( : [ ] [ ] [ false / false func - - ( ID ) ] [ ] bool ) { }",
  "func ) ( ID : [ ] int , ID : int , ID : [ ID ( ) * ( ( - ID ID ) / ID ] int ) { }",
  "func ) ( ID : [ ] int , ID : int , ID : [ ID ( ) * ( ( - ID ID ) / ID ] int ) { }",
  "func ) ( ID : [ ] int , ID : int , ID : [ ID ( ) * ( ( ID ID ID ) / - ] int ) { }",
  "- ID ( ) : [ func - true / ID ( ID ( ) >= ID ) ] int { }",
  "- ID [ ) : ( func - true / ID ( ID ( ) >= ID ) ] int { }",
  "- ID [ ) : ( ID - true / ID ( func ( ) >= ID ) ] int { }",
  "func ID : ID : int , ID ( bool ) : int { }",
  "func ID : { : int , ID ( bool ) : int ID }",
  "func + ( ) { var ID : bool ID = - false * ID / false - ( true ) ID true ID = - ( - ( false ) ) }",
  "func + ( ) { ID ID : bool var = - false * ID / false - ( true ) ID true ID = - ( - ( false ) ) }",
  "func ID ( ) : ) { return false * ( false * - ( ( ID ) ) / ( - ID ) bool }",
  "func - ( ) : ) { return false * ( false * ID ( ( ID ) ) / ( - ID ) bool }",
  "func - ( ) : ) { return false * ( false * ID ( ) ID ) ) / ( - ID ( bool }",
  "func ID ( ID : bool , ID : bool , ID : int ) { return } func : ( ID ID [ ] [ ID ] [ ] int ) { }",
  "ID func ( ID : bool , ID : bool , ID : int ) { return } func : ( ID ID [ ] [ ID ] [ ] int ) { }",
  "ID func ( ID int bool , ID : bool , ID : : ) { return } func : ( ID ID [ ] [ ID ] [ ] int ) { }",
  "func ID ( ) { var : ID int } func ID ( ) : [ - true * ( true ) * - - - ( true ) ] bool { }",
  "func func ( ) { var : ID int } ID ID ( ) : [ - true * ( true ) * - - - ( true ) ] bool { }",
  "func func ( ) { var : ID int } ID ID ( ) : [ - true * ( true ) * - - - ( true ) ] bool { }",
  "func ID ( ID : [ - ID and - - 123 * { true - ID ( ID ) ] bool ) - }",
  "123 ID ( ID : [ - ID and - - func * { true - ID ( ID ) ] bool ) - }",
  "false ID ( ) : int { var ID : int var ID : bool if - ( ID * func / ID ) { } } func ID ( ) { }",
  "false ID ( ) : int { var ID : int bool ID : var if - ( ID * func / ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ 123 / ( true + ) ID ( ) [ ID ] - ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ 123 / ( true + ) ID ( ID [ ID ] - ] bool ) { } func ) ( ) { }",
  "func ID ( ID : [ 123 / ( true + ) ID ( ID [ ID ] - ] bool ) { } func ) ( ) { }",
  "func ID ( print { ) - ( - 123 * - 123 + - ID ( ) ) }",
  "func ID ( print { ) - ( - 123 * - 123 + - ID ( ) ) }",
  "func ID ( print { ) - ( - 123 * - 123 + - ID ( ) ) }",
  "func ID ( ) : int ( var ID : int return false * - { false * - ( ID ) ) / 123 } func ID ( ) { }",
  "func ID ( ) : int ( var ID : int return false * - { false * - ( ID ) ) / 123 } func ID ( ) { }",
  "func ID ( ) : int ( var ID : int return false ID - { false * - ( ID ) ) / 123 } func * ( ) { }",
  "func ID ( ID : [ ( int [ - true * ID / - true ] ) ] [ ] ID ) { } func ID ( ) { }",
  "func ID ( ID : [ ( int [ - true * ID / - true ] ) ) [ ] ID ] { } func ID ( ) { }",
  "- ID ( ID : [ ( int [ - true * ID / func true ] ) ) [ ] ID ] { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] * ( false / ID [ 123 ] [ 123 ) ] int ) { }",
  "func ID ( ID : bool , ID : [ ] * ( false / ID [ 123 ] [ 123 } ] int ) { )",
  "bool ID ( ID : func , ID : [ ] * ( false / ID [ 123 ] [ 123 } ] int ) { )",
  "func ID ( ID : bool , ID ( [ ] bool ) { var ID : bool var ID : bool return : ( ( ( true ) ) ) ) }",
  "func ID ( ID : bool , ID ( [ ] bool ) bool var ID : bool var ID : { return : ( ( ( true ) ) ) ) }",
  "func ID ( ID : [ ) ID ( ) [ ( - - ID [ false ] [ true ] - ] [ ( - ID ) ] ] int ) { } func ID ( ) { }",
  "int ID ( ID : [ ) ID ( ) [ ( - - ID [ false ] [ true ] - ] [ ( - ID ) ] ] func ) { } func ID ( ) { }",
  "int ID ( ID : [ ) ID ( ) [ ( - - ID [ false ] [ true ( - ] [ ( - ID ) ] ] func ) { } func ID ] ) { }",
  "func ID ( ) : ID { var ID : [ ( ( 123 - true - - bool ) ) ] bool } func ID ( ) { }",
  "func ID ( ) : ID { var ] : [ ( ( 123 - true - - bool ) ) ID bool } func ID ( ) { }",
  "func ID ( ) : ID { var ] : [ ( ( 123 - true - - bool ) ) ID bool } func ID ( ) { }",
  "bool ID ( ID : [ ] int ) : func { var ID : bool return }",
  ": ID ( ID : [ ] int ) bool func { var ID : bool return }",
  ": ID ( ID : [ ] int bool ) func { var ID : bool return }",
  "func ID ( ID : [ ] [ false - ( * ( ( false ) ) ) * ID ] bool ) { }",
  "func ID ( ) : [ ] [ false - ( * ( ( false ) ID ) * ID ] bool ) { }",
  "func ID ( ) : [ ] [ false - ( * ( ( false ) ID { * ID ] bool ) ) }",
  "func ID ( ID : bool , ID : bool , ID : ID ) : bool { if true / false / false - ( false ) { } int = ( ( ID ) ) } func ID ( ) { }",
  "ID ID ( ID : bool , func : bool , ID : ID ) : bool { if true / false / false - ( false ) { } int = ( ( ID ) ) } func ID ( ) { }",
  "ID ID ( ID : bool , func : bool , ID : ID ) : { bool if true / false / false - ( false ) { } int = ( ( ID ) ) } func ID ( ) { }",
  "func + ( ) : bool { } func ID ( ID : int , ID : int ) { print ID + ( - ID ) ID true }",
  "func ID ( ) { ( ID : [ false / - var - ( ID ) ) ] int }",
  "func ID ( ) { ( ID : ) false / - var - ( ID ) [ ] int }",
  "func ID ( ) { ( ID : ) false / - var - ( ID ) [ ] int }",
  "func ID ( ) print while ID ( ) [ - 123 - ( ( - - - - ID ) ) ] { } { ( - false ) } func ID ( ) { }",
  "func ID ( ) print while ID ( ) [ - 123 - ( ( - - - - ID ) ) ] { } { ( - false ) } func ID { ) ( }",
  "func ID ( ) : ( ID ( false / [ 123 * ( ID ) * ID ) ) ] bool { }",
  "func ID * ) : ( ID ( false / [ 123 * ( ID ) ( ID ) ) ] bool { }",
  "false ID * ) : ( ID ( func / [ 123 * ( ID ) ( ID ) ) ] bool { }",
  "func ID ( ) [ var ID : bool var ID : [ ID ( ) { false / ( false ) / ID ] ] [ ] [ ] int }",
  "func ID ( ) [ var ] : bool var ID : [ ID ( ) { false / ( false ) / ID ID ] [ ] [ ] int }",
  "func ID ( ) [ var ] : bool var ID : [ ( ( ) { false / ID false ) / ID ID ] [ ] [ ] int }",
  "func ID ( ID : [ ] bool , ID : bool ) int var ID : [ ID [ false / ID ] ] [ ] { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) int ID ID : [ var [ false / ID ] ] [ ] { } func ID ( ) { }",
  "func int ( ID : [ ] bool , ID : bool ) ID ID ID : [ var [ false / ID ] ] [ ] { } func ID ( ) { }",
  "func ID ( int : int { var ID : bool var ID : ) if ID [ ( ( ( - - 123 ) ) ) ] { } } func ID ( ) { }",
  "func ID ( int : int { var ID : bool var ID : ) if ID [ ( ( ( - - 123 ) ) ) ] { } } func ) ( ID { }",
  "func ID ( int : int { var ID : bool var ID : ) ] ID [ ( ( ( - - 123 ) ) ) if { } } func ) ( ID { }",
  "func ID ( ID : [ true * ( 123 / ID 123 - ( 123 ) ] [ - [ ] ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ true * func 123 / ID 123 - ( 123 ) ] [ - [ ] ) ] [ ] int ) { } ( ID ( ) { }",
  "func ID ( ID : [ true * func 123 / ID 123 - ( 123 ) ] [ - [ ] ) ] [ ] int ) { } ( ID ( ) { }",
  "func ID ( ID : [ ] bool ) : int { { print ( - ( - - - ( } ( - ( ID ) ) ) ) ) } } func ID ( ) { -",
  "func ID ( ID : [ ] bool ) : int - { print ( - ( - - { ( } ( - ( ID ) ) ) ) ) } } func ID ( ) { -",
  "func ID ( ID : [ ] bool ) : int - { print - - ( ( - { ( } ( - ( ID ) ) ) ) ) } } func ID ( ) { -",
  "func ID ( ID : int ) { ID [ ID ( - false ( ( ( - * 123 ) ) ) ) ] [ - - - ID ] = ( 123 ) } func ID ( ) { }",
  "func ID ( ID : int ) { ID [ ID ( - false ( ( func - * 123 ) ) ) ) ] [ - - - ID ] = ( 123 ) } ( ID ( ) { }",
  "func ID ( ID : int ) { ID [ ( ( - false ( ( func - * 123 ) ) ) ) ] [ - - - ID ] = ( 123 ) } ID ID ( ) { }",
  "func ID ( ) : bool { if - and 123 ( ID [ ID ] [ false ] ) { } } func ID ( ) { }",
  "func ID ( ) : bool { if - and 123 ( ID [ ID ] [ false } ) { } ] func ID ( ) { }",
  "func ID ( ) : bool { if - and 123 ( ID [ ID ] [ false } ) { } ] func ID ( ) { }",
  "func ID ( ID : int { ) }",
  "func ID { ID : int ( ) }",
  "int ID { ID : func ( ) }",
  "func ID ( ) : int { var - : bool var ID : bool return ID 123 / ID / - - ID }",
  "func ID ( ) : bool { var - : bool var ID : int return ID 123 / ID / - - ID }",
  "func ID ( ) : bool { var 123 : bool var ID : int return ID - / ID / - - ID }",
  "] ID ( ) { var ID : int if ( - - true * - ID [ - 123 func [ - 123 ] ) { } } func ID ( ) { }",
  "] ID ( ) * var ID : int if ( - - true { - ID [ - 123 func [ - 123 ] ) { } } func ID ( ) { }",
  "] ID ( ) * var ID : int if ( { - true { - ID [ - 123 func [ - 123 ] ) - } } func ID ( ) { }",
  "func ID ( ) : [ int ] { var ID : bool var ID : bool }",
  "func ID ( ) : [ int ] : var ID : bool var ID { bool }",
  "func ID ( ) : [ ID ] : var int : bool var ID { bool }",
  "func ID ( ID : [ ] [ ] int , ID : [ ID ( * [ false ) ( - true ) * - ( - - 123 ) ] ] [ ] [ ] bool ) { }",
  "func ID ( ID : [ ] [ ] int , [ : [ ID ( * [ false ) ( - true ) * - ( - - 123 ) ] ] ID ] [ ] bool ) { }",
  "ID ID ( ID : [ ] [ ] int , [ : [ func ( * [ false ) ( - true ) * - ( - - 123 ) ] ] ID ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] bool ( { var ID : int ID ( ) [ ( ( 123 ) ) ] [ ID ] = 123 } func ID ) ) { }",
  "( ID ( ID : bool , ID : bool , ID : [ ] bool ( { var ID : int ID func ) [ ( ( 123 ) ) ] [ ID ] = 123 } func ID ) ) { }",
  "( ID ) ID : bool , ID : bool , ID : [ ] bool ( { var ID : int ID func ) [ ( ( 123 ) ) ] [ ID ] = 123 } func ID ) ( { }",
  "int ID ( ID : func , ID : bool ) { return }",
  "int ID ( ID : func , ID } bool ) { return :",
  "int ID ( ID : func , ID } bool ) { return :",
  "func ID ( ID : bool , var : int , ID : int ) : bool { ID ID : int var ID : bool while ID / - - ( - ( - ( false ) ) ) / false { } }",
  "func ID ( ID : bool , var : int , ID : int ) : bool { ID ID : { var ID : bool while ID / - - ( - ( - ( false ) ) ) / false int } }",
  "func ID ( : : bool , var : int , ID ID int ) : bool { ID ID : { var ID : bool while ID / - - ( - ( - ( false ) ) ) / false int } }",
  "func ID ( ) { { var ID : [ false * ID [ ( - - 123 ) ] / - - ( ID ) ] [ ] [ ] bool var ID : int } { func ID ( ) } }",
  "func ID ( ) { { var ID ) [ false * ID [ ( - - 123 ) ] / - - ( ID : ] [ ] [ ] bool var ID : int } { func ID ( ) } }",
  "func ID ( ) { { var ID ) [ ( * ID [ false - - 123 ) ] / - - ( ID : ] [ ] [ ] bool var ID : int } { func ID ( ) } }",
  "func ID ( ID : [ ] bool , ID : bool ) { var ID : int ) ID : int { var ID : [ - - ( true ) ] bool var ID : int } ID = ( ( true ) ) } func ID ( var { }",
  "func ID ( ID : [ : bool , ID : bool ) { var ID ] int ) ID : int { var ID : [ - - ( true ) ] bool var ID : int } ID = ( ( true ) ) } func ID ( var { }",
  "func ID ( ID : [ : bool , ID : bool ) { var ( ] int ) ID : int { var ID : [ - - ( true ) ] bool var ID : int } ID = ( ID true ) ) } func ID ( var { }",
  "func ID ( ID : } ] [ ] int ) : int { var ID : [ ] bool call ID ( ) while ID { } [",
  "func ID ( ID : } ] [ ] int ) : int { ID ID : [ ] bool call var ( ) while ID { } [",
  "func ID ( ID : } ] [ ] int ) : int { ID bool : [ ] ID call var ( ) while ID { } [",
  "func ID ID ) { if - ID [ ( ( ID ) ) ] [ true ] { } } func ( ( ) { }",
  "func ID ID ) { if - ID [ ( ( ID ) ) ] [ ) ] { } } func ( ( true { }",
  "func ID ID ) ( if - ID [ ( ( ID ) ) ] [ ) ] { } } func { ( true { }",
  "func ID ( ID : [ - int ) : bool { var ID : [ ID ( ) [ ( ] ( ID ) ) ] [ ( ID ) ] ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : [ - int ) ) bool { var ID : [ ID ( ) [ ( ] ( ID ) ) ] [ ( ID ) ] ] int var ID : int } func ID ( : { }",
  "func ID ( ID : [ - int ) ) bool { var ID : [ ID ( ) [ ( ] ( ID ) ) ] [ ( ID ) ] ] int var ID : int func } ID ( : { }",
  "func ID ( ) : bool { var ID : ) var ID : [ ] [ - ID ( bool / true / false ] [ ] bool } func ID ( ) { }",
  "func ) ( ) : bool { var ID : ) var ID : [ ] [ - ID ( bool / true / false ] [ ] bool } func ID ( ID { }",
  "func ) ( ) : bool { var ID ID ) var : : [ ] [ - ID ( bool / true / false ] [ ] bool } func ID ( ID { }",
  "func ID ( ID ) int , ID : int , ID : int ) { var ID : bool ID ( 123 * - false : = ( ID ) if ID { } }",
  "func ID if ID ) int , ID : int , ID : int ) { var ID : bool ID ( 123 * - false : = ( ID ) ( ID { } }",
  "func ID if ID ) int , ID ID int , ID : int ) { var : : bool ID ( 123 * - false : = ( ID ) ( ID { } }",
  "func ID ( ) { var ID : int print - * ID + - ( ( - ( - false ) ) ) + true - ID } func ID ( ) { }",
  "func ID ( ) { var ID : int print ) * ID + - ( ( - ( - false ) - ) + true - ID } func ID ( ) { }",
  "print ID ( ) { var ID : int func ) * ID + - ( ( - ( - false ) - ) + true - ID } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] ) ID [ true / ID [ ID ] [ - ( - - - ( ( ID ) ) ) ] ] [ true ] = ( ( ( 123 bool ) ) }",
  "func ID ( ) { var ID : [ ] ) ID [ true / ID [ ID ] [ - ( - - - ( ( ID ) ) ) ] } [ true ] = ( ( ( 123 bool ) ) ]",
  "[ ID ( ) { var ID : [ ] func ] [ ] bool } func ID ( ) : int { var ID : bool var ID : int }",
  "[ ID ( ) { var ID : [ ] func ] [ ] bool } func ID ( ) : int { } ID : bool var ID : int var",
  "[ ID ( ) { var ID : [ ] func ] [ ] bool var func ID ( ) : int { } ID : bool var ID : int }",
  "func ID ( ID : int , ID : [ ] bool ) : [ ] int { var ID : [ ] int call ID ( ID } } func ID ( ) { )",
  "func ID ( ID : int , ID : [ ] bool ) : [ ] int { var ID : [ ] int call ID ( ID } } func ID ( ) { )",
  "func ID ( ID : int , ID : [ { bool ) : [ ] int ] var ID : [ ] int call ID ( ID } } func ID ( ) { )",
  "func ID ( ID : [ ] [ ] [ ( - ID ( ) [ - ] false ) ] [ - 123 ] ) ] [ ( int ) { }",
  "func ID ( ( : [ ] [ ] [ ( - ID ID ) [ - ] false ) ] [ - 123 ] ) ] [ ( int ) { }",
  "func ID ( ( : [ ] [ ] ) ( - ID ID [ [ - ] false ) ] [ - 123 ] ) ] [ ( int ) { }",
  "func ID ( ID : int , ID true int ) { if ( - ID * : and ID ) { } if - 123 { } }",
  "func ID ( ID : int , ID true int ) { if ( - ID * : and ID ) { } if - 123 { } }",
  "func ID * ID : int , ID true int ) { if ( - ID ( : and ID ) { } if - 123 { } }",
  "func ID ( ID : int ) { print true / ID [ ( 123 - false ) ] [ false ] / - ID = ID }",
  "func ID ( ID : int ) { print true / ID [ ( 123 - false ) } [ false ] / - ID = ID ]",
  "func ID ( ID : int ) { print true ID ID [ ( 123 - false ) } [ false ] / - / = ID ]",
  "func ID ( ) : [ ] [ ] [ true - int 123 / true + false ) ] [ ] ( { } func ID ( ) { }",
  "func ID ( ) : [ ] [ { [ true - int 123 / true + false ) ] [ ] ( ] } func ID ( ) { }",
  "func ID ( ) : [ ] 123 { [ true - int [ / true + false ) ] [ ] ( ] } func ID ( ) { }",
  "func ID ( ) { var ID ( int while ( true / : ( true ) ) ) { } } func ID ( ) { }",
  "func ID ( ) while var ID ( int { ( true / : ( true ) ) ) { } } func ID ( ) { }",
  "func ID ( true while var ID ( int { ( true / : ( ) ) ) ) { } } func ID ( ) { }",
  "false ID ( ) : bool { var ID : bool var ID : int return ( func / - - 123 ) } func ID ( ) { }",
  "false ID ( ) : bool { var ID : bool var ID : int return ( func / - - 123 ( } func ID ) ) { }",
  "false ID ( ) : bool { var ID : bool var ) : int return ( func / - - 123 ( } func ID ) ID { }",
  "func ID ( ID : int , ID : [ ] int , ID = int ) { var ID : [ ] bool var ID : bool ID ( ) : - ( ID ) print - - ID } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ID = int ) { var ID : [ ] - var ID : bool ID ( ) : bool ( ID ) print - - ID } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ID = int ) { var ID : [ ] - var ID : bool ID ( ) : bool ( { ) print - - ID } func ID ( ) ID }",
  "func ID ( ID ) int ) { var ID : bool return } func ID ( : : bool { var ID : bool }",
  "func ID ( ID ) int ) { var ID func bool return } : ID ( : : bool { var ID : bool }",
  "func } ( ) { var ID : int var ID : [ true * 123 + ( ( - ID ) ) ] bool ID func ID ( ) { }",
  "func } ( ) { bool ID : int var ID : [ true * 123 + ( ( - ID ) ) ] var ID func ID ( ) { }",
  "func } ( ID { bool ID : int var ID : [ true * 123 + ( ( - ID ) ) ] var ) func ID ( ) { }",
  "func ID ( ) : [ - ( ( 123 ] ( ID ) or ( - - ( true ) ) ) ) or [ ] bool { } func ID ( ) { }",
  "( ID ( ) : [ - ( ( 123 ] ( ID ) or ( - - ( true ) ) ) ) or [ ] bool { } func ID func ) { }",
  "func ID ( ID : int , ID : ID ) { var ID : bool int ( ID - ID ( ) ) = ID { } } func ID ( ) { }",
  "} ID ( ID : int , ID : ID ) { var ID : bool int ( ID - ID ( ) ) = ID { } } func ID ( ) { func",
  "} ID ( ID : int , int : ID ) { var ID : bool ID ( ID - ID ( ) ) = ID { } } func ID ( ) { func",
  "func ID ( ID : , , ID : [ ID ( - - ( ( ( 123 ) ) ) ) ] int int ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : , , ID : [ ID ( - - ( ( ( 123 ) ) ) ) ] int int ) : bool ) { } func ID ( ID { }",
  "func ID ( ID : , , ID : [ ID ( - - ( ( ( 123 ) ) ) ) ] int int ) : bool ) { } func ID ( ID { }",
  "func ID ( ID : int , - : int ) { var ID : [ ID / ID ( ID ) * ID ( true ) ] [ ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : int , * : int ) { var ID : [ ID / ID ( ID ) - ID ( true ) ] [ ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : int , * : int ) { var ID : [ ID / ID ( ) ) - ID ( true ) ] [ ] bool var ID : int } func ID ( ID { }",
  "func ID ( ) { var ID { bool var ID : int : var ID : bool call ID ( false / - ID / true ) call ID ( ) } }",
  "func ID ( ) / var ID { bool var ID : int : var ID : bool call ID ( false { - ID / true ) call ID ( ) } }",
  "func ID ( ) / var ID { bool var ID : int : var ID : bool ID call ( false { - ID / true ) call ID ( ) } }",
  "func ID ( ID : int ) { var ID : bool var [ : bool if ID ( ) [ ( ID ) ] ID 123 ] { } }",
  "func ID [ ID : int ) { var ID : bool var ( : bool if ID ( ) [ ( ID ) ] ID 123 ] { } }",
  "func ID [ ) : int ID { var ID : bool var ( : bool if ID ( ) [ ( ID ) ] ID 123 ] { } }",
  "func ID ( ID : int , ID : bool , ID : [ ] [ ] [ ] func ) { if - ( ID ) { } ID = ( ID ) } bool ID ( ) { }",
  "func ID ID ID : int , ID : bool , ID : [ ] [ ] [ ] func ) { if - ( ID ) { } ID = ( ID ) } bool ( ( ) { }",
  "func ID ID ID : int , ID : bool , ID : ( ] [ ] [ ] func ) { if - [ ID ) { } ID = ( ID ) } bool ( ( ) { }",
  "func ID ( ) { return 123 * - true / * ( - 123 ID false ) }",
  "func ID ( ) { return 123 * - true / 123 ( - * ID false ) }",
  "func ID ( ) { return 123 - - true / 123 ( * * ID false ) }",
  "func ID int ID : ( ) { { var ID : bool if - ( ID ( ) ) { } { } } } func ID ( ) { }",
  "func ID int } : ( ) { { var ID : bool if - ( ID ( ) ) { } { } } ID func ID ( ) { }",
  "ID ID ( ) : bool { var func : bool var ID : [ ] [ ] bool { var ID : bool if ( false ) { } } } func ID ( ) { }",
  "ID ID ( ) : bool { var func : bool var ID : [ ] [ ] bool { var ID ( bool if : false ) { } } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] [ ] bool { var ID ( bool if : false ) { } } } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool var ID : [ - } - true * false - ID + ID ] int - func ID ( ) { }",
  "func ID ( ID } bool ) { var ID : bool var ID : [ - : - true * false - ID + ID ] int - func ID ( ) { }",
  "func ID ( ID } bool ) { var ID : : var ID : [ - bool - true * false - ID + ID ] int - func ID ( ) { }",
  "func ID : ID : int , ID ( [ ] bool ) { var ID : [ ] bool }",
  "func ID : ID bool int , ID ( [ ] : ) { var ID : [ ] bool }",
  "func ID : ID bool int ] ID ( [ , : ) { var ID : [ ] bool }",
  "func ID ( ID : bool ) ID [ ] int { return false and - ID ( ) and - - ID } func : ( ) { }",
  "func : ( ID ID bool ) ID [ ] int { return false and - ID ( ) and - - ID } func : ( ) { }",
  "func : ( ID ID bool ) ID [ ] int { return false and - ID ( ) and - - ID } func : ( ) { }",
  "func ID ( ID : int ) : [ false - ID ( ] * ID [ - ID ] [ ( ID ) ] ) ] [ false [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : int ) : [ false - ID ( ] * ID [ - ID ] [ ( ID ) ] ) ] [ false [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : int ) : [ false - ID ( ] * ) [ - ID ] [ ( ID ID ] ) ] [ false [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : bool ) { call ID ( ( - ID [ ID ) [ - ( - 123 ) ] ] ) if ( true ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) { call ID ( ( - ID [ ID ) [ - ( - 123 ) ] ] ) if ( true ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( false / ( ID ( ( false ) ) ) ) ] int } ID func ( ) { }",
  "func ID ID ) { var ID : [ ( false / ( ID ( ( false ) ) ) ) ] int } ( func ( ) { }",
  "func ID ID ) { var ID : [ ( false / ( func ( ( false ) ) ) ) ] int } ( ID ( ) { }",
  "func ID ( ) { var ID : bool ID ( - = ) ID [ - ID ( ) ] [ false ] if - false { } }",
  "func ID ( ) { var ID : bool ID ( - = ) ID [ - ID ( ) ] [ - ] if false false { } }",
  "func ID ( ) { var ID : bool ID ( ) = - ID [ - ID ( ) ] [ - ] if false false { } }",
  "func ID ( ) : int { var ID : int { var ID : int var ID : [ ] [ - ] ID - bool } } func ID ( ) { }",
  "func ID ( } : int { var ID : int { var ID : int var ID : [ ] [ - ] ID - bool } } func ID ( ) { )",
  "func ID ( } : int { var ID : int { ID ID : int var var : [ ] [ - ] ID - bool } } func ID ( ) { )",
  ": ID ( ) { var ID : int var ID func bool }",
  ": ID ( ) { var ID func int var ID : bool }",
  "ID ID ( ) { var ID func int var : : bool }",
  "func ID ID ) : [ ( ( false <= 123 * ID ( ) / ( ) ) ] bool { }",
  "func ID ID ) : [ ( ( false <= 123 * ID ( ) / ( ) ) ] bool { }",
  "func ID / ) : [ ( ( false <= 123 * ID ( ) ID ( ) ) ] bool { }",
  "func ID ( ID [ int , ID : int , ID : : ] bool ) { var ID : bool if ID [ false ] { } }",
  "func ID ( ID [ int } ID : int , ID : : ] bool ) { var ID : bool if ID [ false ] { } ,",
  "func ID ( ID [ int } ID : int , ID : : [ bool ) { var ID : bool if ID ] false ] { } ,",
  "func ID ( ID : int , ID : bool , ID : bool ) { call ID ( ( - } ) ) ID = ( ( - - - ID ) ) false",
  "func ID ( ID : int , ID : bool , ID : bool ) { call ID ( ( = } ) ) ID - ( ( - - - ID ) ) false",
  "func ID ( ID : int , ID : bool , ID : bool ) { call ID ( ( = } ) ) ID - ( ( - - - ID ) ) false",
  "func ID ( ID : [ - ( false + - ) ( 123 ( ) ) ] [ ] [ ] int ) { }",
  "func ID ( ID : [ - ( false + ( ) - 123 ( ) ) ] [ ] [ ] int ) { }",
  "func ID ( ID : [ - int false + ( ) - 123 ( ) ) ] [ ] [ ] ( ) { }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : int { var ID : bool return } func ID } print ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : int { var ID : bool return } func ID } { ID ( ) print }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : int { var ID : bool return } func } ID { ID ( ) print }",
  "func ID ( ID ( [ ( : ( ( ID ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID ( [ ( : ( ( ID ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID ( [ ( } ( ( ID ) ) ) ) ] int ) { } func ID ( ) { :",
  "func ID ( ) : int { var ID : ) var ID : int call ID ( ( ( - ID ) bool ) } func ID ( ) { }",
  "func ID ( var : int { var ID : ) ) ID : int call ID ( ( ( - ID ) bool ) } func ID ( ) { }",
  "func ID ( var : int { var ID : ) ) ID : int call ID ( ( ( - ID ) bool } } func ID ( ) { )",
  "func ID ( ID : int , ID : bool , ID : bool ) { { ID ( ) return ID ( ) [ ( ID ) ] [ ID ] } func ID ( ) call }",
  "func ID ( ID : int , ID : , bool ID : bool ) { { ID ( ) return ID ( ) [ ( ID ) ] [ ID ] } func ID ( ) call }",
  "func ID ( ID : int , ID : , bool ID : bool ) ( { ID ( ) return ID { ) [ ( ID ) ] [ ID ] } func ID ( ) call }",
  "func ID ( ID : int , ID : [ ] int ) { var ID : [ ] bool while ( ( 123 ) ( { } if - ) ID ) { } }",
  "func ID ( ID if int , ID : [ ] int ) { var ID : [ ] bool while ( ( 123 ) ( { } : - ) ID ) { } }",
  "func ID ( ID if int , ID : [ ] int ) { var ID : [ ] bool while ( ( 123 ) ( { } : - ) ID ) { } }",
  "func ID ( ID ID [ ( ID ( ) [ - ( : ) ] [ ( ( 123 ) ) ] ) ] bool ) { }",
  "func ID ( ID ID [ ( ID ( ) [ } ( : ) ] [ ( ( 123 ) ) ] ) ] bool ) { -",
  "func ID ( ] ID [ ( ID ( ) [ } ( : ) ] [ ( ( 123 ) ) ID ) ] bool ) { -",
  "func ID ( ID : bool , ID : int ) { while ID : bool var ID ( ) [ - - - ID ] [ - ID ] { } call ID ( ) }",
  "func ID ( ID : } , ID : int ) { while ID : bool var ID ( ) [ - - - ID ] [ - ID ] { } call ID ( ) bool",
  "func - ( ID : } , ID : int ) { while ID : bool var ID ( ) [ ID - - ID ] [ - ID ] { } call ID ( ) bool",
  "func ID ( ID : int , ID : [ ID ( ID } - ( - ( 123 ) ) and ID ) ] bool , ID : [ ] int ) { and func ID ( ) { }",
  "func ID ( ID ( int , ID : [ ID : ID } - ( - ( 123 ) ) and ID ) ] bool , ID : [ ] int ) { and func ID ( ) { }",
  "func ID and ID ( int , ID : [ ID : ID } - ( - ( 123 ) ) ( ID ) ] bool , ID : [ ] int ) { and func ID ( ) { }",
  "func ID ( ) : [ ( - true + ID [ false * 123 / ID ] [ ID ] } ] [ ] bool { ) func ID ( ) { }",
  "func ID ( ) : [ ( - true + ID [ false * 123 / ID ] [ [ ] } ] ID ] bool { ) func ID ( ) { }",
  "func ID ( ) : [ ( - true + ID [ false * 123 / { ] [ [ ] } ] ID ] bool { ) func ID ( ) ID }",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) { var ID : [ ] bool ] [ var ID : bool while - ID { } }",
  "func ID ( ID : int , ID var int , ID : [ ] bool ) { var ID : [ ] bool ] [ : ID : bool while - ID { } }",
  "func ID ( ID : bool , } : bool , ID : bool ) { var ID : [ false / ( ID ) / - ( 123 ) ] int var ID : [ ] int } func ID ( ) { ID",
  "func ID ( ID : bool , } : bool , ID : bool ) { var ID : [ false / ( ID ) / - ( 123 ) ] int var ID : [ ] int } func ID ( ) { ID",
  "func ID ( ID : bool , } : bool , ID : bool ) { var ID : [ false / ( ID ) / - ( 123 ) ] int var ID : [ { int } func ID ( ) ] ID",
  "bool ID ( ID : int ) { var ID : [ ID [ - ID ( - ( false ) ) ] [ true ] ] func var ID : bool }",
  "bool ID ( ID : false ) { var ID : [ ID [ - ID ( - ( int ) ) ] [ true ] ] func var ID : bool }",
  "bool ID ( ID : false ) { var ID : [ ID [ - ID ( - ( int ) ) ] [ true ] ] func : ID var bool }",
  "func ID ( ) : bool { if ID ] ( - true / - - ID / 123 ) [ [ ID ] { } } func ID ( ) { }",
  "func ID ( ) : bool { if ID ] ( - true / - - ID / 123 ) [ [ ID ] { ( } func ID } ) { }",
  "func ID ( ) : bool { if ID ] ( - ID / - - ID / 123 ) [ [ true ] { ( } func ID } ) { }",
  "func ID ( ) { return ID ) ) [ ID ( - false / - true / ( ID ( ) ] [ ( ID ) ] }",
  "func ID ( ) { return ID ) ) [ [ ( - false / - true / ( ID ( ) ] ID ( ID ) ] }",
  "func ID ( ) { return ID ) / [ [ ( - false ) - true / ( ID ( ) ] ID ( ID ) ] }",
  "func ID ( ) : int { var ID : [ ] [ ] ID var ID : [ ID [ - ID ] [ int ] ] [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ] : int { var ID : [ ] [ ] ID var ID : [ ID [ - ID ) [ int ] ] [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ] : int { var ID : [ ] [ ] ID var ID } [ ID [ - ID ) [ int ] ] [ ] [ ] [ ] bool : func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] bool while ( ID [ 123 ] ) { ( print } true ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ( bool while ( ID [ 123 ] ) { ( print } true ) } func ID ] ) { }",
  "( ID ( ) { var ID : int var ID : [ func bool while ( ID [ 123 ] ) { ( print } true ) } func ID ] ) { }",
  "func ID ( ID : bool , ID : [ 123 and ID [ 123 * - ( - ID ) bool ID ] [ 123 ] and ID ] [ ] [ ] int , ID : / ) { }",
  "func ID ( ID : bool , ID : [ 123 and ID [ 123 * - ( - ID ) bool ID ] [ 123 ] and ID / [ ] [ ] int , ID : ] ) { }",
  "func ID ( ID : bool , ID : [ 123 and ID [ 123 * - ID - ID ) bool ID ] [ 123 ] and ID / [ ] [ ] int , ( : ] ) { }",
  "func ID ( ) : bool { while ID ( ) [ ID ( ) [ ID ] ] - [ ID ] { } } func ID ( ) { }",
  "func ID ( ) : bool { while ID ( ) [ ID ID ) [ ( ] ] - [ ID ] { } } func ID ( ) { }",
  "func ID ID ) : bool { var ( : bool var ID : int return } func ID ( ID : int , ID : [ ] bool , ID : [ ] int ) { }",
  "func , ID ) : bool { var ( : bool var ID : int return } func ID ( ID : int ID ID : [ ] bool , ID : [ ] int ) { }",
  "func , ID ) : bool { var ( : bool var ID : int ID } func ID ( return : int ID ID : [ ] bool , ID : [ ] int ) { }",
  "func ID ( ID : int ) { var ID : bool var ID : [ ] [ ] [ - ) ID ( ] bool }",
  "func ID ( ID : int [ { var ID : bool var ID : ) ] [ ] [ - ) ID ( ] bool }",
  "func ID ( ID : int [ { var ID : bool var ID : ) ] [ ] [ - ) ID ( ] bool }",
  "func ID ( [ : int { var ID : bool var ID : ) true - - ID ( false ) ] [ ] bool } func ID ( ) { }",
  "func ID ( [ : int { var ID : bool var ID : ) true } - ID ( false ) ] [ ] bool - func ID ( ) { }",
  "func ID ( [ : int func var ID : bool var ID : ) true } - ID ( false ) ] [ ] bool - { ID ( ) { }",
  "func ID ( ) : bool { return ID ( ) [ true - true or - ID or - - - ( - func false ) ) ] } ( ID ( ) { }",
  "func ID ( ) : bool { return ID ( ) [ true - ) or - ID or - - - ( - func false true ) ] } ( ID ( ) { }",
  "func - ( ) : bool { return ID ( ) [ true - ) or ID ID or - - - ( - func false true ) ] } ( ID ( ) { }",
  "int ID ( ID : bool , ID : func ) { return ( - ( ID / ( ( ( ( - ( false ) ) ) ) ) * ( ( ID ) ) ) ) }",
  "int ID ( ID : bool , ID : func ) return { ( - ( ID / ( ( ( ( - ( false ) ) ) ) ) * ( ( ID ) ) ) ) }",
  "int ID ( ID : bool , ID : func ) return { ( - ( ID / ( ( ( ( - ( ( ) ) ) ) ) * ( false ID ) ) ) ) }",
  "func ID ( ID : [ ] bool ID [ false / - 123 != ID ] [ true ] ] [ ] [ ] [ ) { }",
  "func ID ( ID : [ ] ] ID [ false / - 123 != ID bool [ true ] ] [ ] [ ] [ ) { }",
  "func ID ( ] : [ ] ] ID [ false / - 123 != ID bool [ true ] ] [ ] [ ID [ ) { }",
  "func ID ( ) : bool { ( ID : int ID var ) [ - ID <= ID [ ID ] ] [ true ] = - false if - ID { } } func ID ( ) { }",
  "func ID ( ) : bool { ( ] : int ID var ) [ - ID <= ID [ ID ] ] [ true ID = - false if - ID { } } func ID ( ) { }",
  "func } ( ) : bool { ( ] : int ID var ) [ - ID <= ID [ ID ] ] [ true ID = - false if - ID { ID } func ID ( ) { }",
  "func ID ( ) : bool { while ID ( 123 - false + - ) * ID ( ) / 123 { } }",
  "func ID ( ) : bool { while ID ( 123 - false + - ) * ID ( ) / 123 { } }",
  "func ID ( ) : bool { while ID ( 123 - false + - ) * ID ( ) / 123 { } }",
  "func ID ( ) - var ID : int return } func ID ( ) { return { false / false * ( ID ) }",
  "func ID ( ) - var ID : int return } * ID ( ) { return { false / false func ( ID ) }",
  "func ID ( ) - var ID : int return } * ID ( ) { return func false / false { ( ID ) }",
  "func ID ( ID : int , ID : bool , ID : ) int { var ID : bool var ID : [ false ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int func ID : bool , ID : ) int { var ID : bool var ID : [ false ] [ ] int } , ID ( ) { }",
  "func ID ( ID : int func ID : bool , ID : ) int { } ID : bool var ID : [ false ] [ ] int var , ID ( ) { }",
  "func ID ( ID , bool : ID : int ) { var ID : [ - - ( 123 / - ID / ID ) ] bool } func ID ( ) { }",
  "func ID ( ID , bool : ID : int ) { var ID : - [ - ( 123 / - ID / ID ) ] bool } func ID ( ) { }",
  "func ID ( ID , bool : ID : int ) { var ID : - [ - ( 123 / / ID - ID ) ] bool } func ID ( ) { }",
  "func ID - ID : int ) : [ false + ID ( ( - ID [ true ] [ - true ] ) - true ] [ ] int { }",
  "func ID - ID : int ) : [ false + ID ( ( - ID [ true ] [ - { ] ) - true ] [ ] int true }",
  "func ID - ID : int ) : [ false + ID ( ( - ID [ true ] [ - { true ) - ] ] [ ] int true }",
  "func ID return ) : bool { var ID : bool call ID ( ) ( ( true == ID ) }",
  "func ID return ) : bool { var ID : ) call ID ( bool ( ( true == ID ) }",
  "func ID return ) : bool { var ID : ) call ID ( bool ( ( true == } ) ID",
  "func ID ( ) { call ID ( ID * - ( } ID ( ) ) ) / ID ) (",
  "func ID ( ) { call ID ( ID * - ( } ID ( ) ) ) / ID ) (",
  "func ID ( ) { call ID ( ID ) - ( } ID ( * ) ) / ID ) (",
  "func ID ( ID : bool , ID : } , ID : [ ] bool ) : bool { var ID : int bool",
  "func ID : ID : bool , ID ( } , ID : [ ] bool ) : bool { var ID : int bool",
  "func ID ( ID : bool , ID : int ) : int { var ID ) bool call ID ( : return }",
  "func ID ( ID : bool , ID : int ) : int : var ID ) bool call ID ( { return }",
  ": ID ( ID func bool , ID : int ) : int : var ID ) bool call ID ( { return }",
  "func ID ( ID : [ ] int ) { int ID : [ ] var var ID : bool print ID ( ID ) print ( false ) }",
  "func ID ( ID : [ ] int ) { int ID : [ ] var var ID : print print ID ( ID ) bool ( false ) }",
  "func ID ( ID : [ ] int ) { int ID : [ ] var var ID : print print ID ( ID ) false ( bool ) }",
  "func ID ( ID : bool , ID : [ ] [ ] bool ) : [ ID ( ) ID ID ( ) * ( ID ) ] [ ] bool { } func * ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] ) ) : [ ID ( ) ID ID ( ) * ( ID ) ] [ ] bool { } func * ( bool { }",
  "func ID bool ID : bool , ID : [ ] [ ] ) ) : [ ID ( ) ID ID ( ) * ( ID ) ] [ ] ( { } func * ( bool { }",
  "func ID ( ) { { ID ( ) [ ( } + ( - true ) + ( - ID ) ) ] = ID call ID ( ) true print - ID }",
  "func ID ( ) { { ID ( ) [ ( } + ( - true ) + ( - ID ) ) ] = ID true ID ( ) call print - ID }",
  "func ID ( ) { { ID ( ) [ ( } + ( - true ) + = - ID ) ) ] ( ID true ID ( ) call print - ID }",
  "func ID ( ID : [ false * 123 / ID - 123 >= ID [ ID ] ] bool ) { } func - ( ) { }",
  "func ID : ID ( [ false * 123 / ID - 123 >= ID [ ID ] ] bool ) { } func - ( ) { }",
  "func ID : ID ( [ false * 123 / ID - 123 >= ID [ ) ] ] bool ) { } func - ( ID { }",
  "func { ( ID : int , ID : [ ] int , ID : bool ) { var ID : bool while ( ( ( - ID ) ) ) { } print ( ( ID ) ) } func ID ( ) ID }",
  "func { , ID : int , ID : [ ] int ( ID : bool ) { var ID : bool while ( ( ( - ID ) ) ) { } print ( ( ID ) ) } func ID ( ) ID }",
  "func ID ( ID : int ) : bool ID var ID : [ ID ( ) / - { + ( 123 ) ] [ ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : int ) : bool ID var ID : [ ID ( ) / - { + ( 123 ) ] [ ] int var ID : int } func ID ( ) } {",
  "func ID ( ID : int ) : bool ID var ID : [ ) ( ) / - { + ( 123 ID ] [ ] int var ID : int } func ID ( ) } {",
  "func ] ( ID : [ - ID ( ) * ( 123 == true * true / 123 ) ] [ ] [ ID [ ] int ) { } func ID ( ) { }",
  "func ] ( ID : [ - ID ) ) * ( 123 == true * true / 123 ( ] [ ] [ ID [ ] int ) { } func ID ( ) { }",
  "func ] ( ID : [ - ID ) ) * ( true == 123 * true / 123 ( ] [ ] [ ID [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { var ID : bool var ID : bool if false * ID - 123 + - 123 func } { } } { ID ( ) { }",
  "func ID ( ID : [ ] int ) { : ID var bool var ID : bool if false * ID - 123 + - 123 func } { } } { ID ( ) { }",
  "func ID ( ID : [ ] int ) { : ID var bool var ID : bool if false * ID - 123 + - 123 func } } { } { ID ( ) { }",
  "func 123 ( ) { var ID : [ ID * ( ( ( ID ) ) ) / - ID ] int var ID : bool }",
  "func 123 ( ) { var ID : [ ID * ( ( ( ID - ) ) / ) ID ] int var ID : bool }",
  "func 123 ID ) { var ID : [ ( * ( ( ( ID - ) ) / ) ID ] int var ID : bool }",
  "true ID ( ) { var ID : [ ] [ ] [ ID ( func > ( ID ) ) ] bool } func ID ( ) { }",
  "true ID ( ) { var ID : [ ] [ ] [ ID ( func > ( ID ) ) ] bool func } ID ( ) { }",
  "true ID ( ) { var ID : [ ] [ ] bool ID ( func > ( ID ) ) ] [ func } ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool ( 123 / 123 * if ID ) { } }",
  "func ID ( ) { var ID : bool var ID : int ( 123 / 123 * if ID ) { } }",
  "func ID ( ) { var ID : bool var / : int ( 123 ID 123 * if ID ) { } }",
  "func ID ( ) : } ID [ true / ID [ 123 * false ] ] ] int { [ func ID ( ) { }",
  "func ID ( ) : } ID [ true / ID } 123 * false ] ] ] int { [ func ID ( ) { [",
  "func ID ( ) : } ID [ true / 123 } ID * false ] ] ] int { [ func ID ( ) { [",
  "func ID ( ID : bool ) { while - ID [ - 123 } ( true ) / 123 ] { } / func ID ( ) { }",
  "func ID ( ID : bool ) { } - ID [ - 123 } ( true ) / 123 ] { } / func ID ( ) { while",
  "func ID ( ID : bool ) { } - ID [ - 123 } ( ) ) / 123 ] { } / func ID ( true { while",
  "func ID ( ID : [ - - ( ID + true * - ( ID ] * ID + ID ) ) int ) { }",
  "func ID ( ID : [ - - ( ID + true * - ( ID ] * ID + ID ) ) int ) { }",
  "func ID ( ID : [ - - ( ID + true * - + ID ] * ID ( ID ) ) int ) { }",
  "( ID func ID : int ) : [ - ( ( - - 123 and - - ID ) ) ] bool { }",
  "( ID func ID : int ) - [ - ( ( - - 123 and : - ID ) ) ] bool { }",
  "( ID func ID : int ) - [ - ( ( - - 123 and : ] ID ) ) - bool { }",
  "func ID ( ) { var ID : bool var ID ID [ ID / : [ - ( 123 ) ] [ ID ] ] bool }",
  "func ID ( ) { var ID : bool var ) ID [ ID / : [ - ( 123 ID ] [ ID ] ] bool }",
  "func ID ( ) { var ID : bool var ) ID [ ID ( : [ - / 123 ID ] [ ID ] ] bool }",
  "func ID ( ) : [ 123 / - - false - true / false / ID ( + ) ID false ] int { }",
  "func - ( ) : [ 123 / ID - false - true / false / ID ( + ) ID false ] int { }",
  "func - ( ) : [ / / ID - false - true / false 123 ID ( + ) ID false ] int { }",
  "func ID ( ID : int , ID : bool , : : bool ) ID [ ] bool { var ID : bool }",
  "func ID ( ID : int , ID : bool , : : bool ) } [ ] bool { var ID : bool ID",
  "func ID ( ID : int , ID : bool , : : bool ) } [ ] bool { ID var : bool ID",
  "func ID ( ) : [ 123 / ( true * - ( ID - false + 123 ) / - 123 ) ] ID ] int { } func [ ( ) { }",
  "func ID ( ) : [ 123 / ( ) * - ( ID - false + 123 ) / - 123 true ] ID ] int { } func [ ( ) { }",
  "func ID ( ) : [ 123 / ( ) * - ( ID - false + ] ) / - 123 true 123 ID ] int { } func [ ( ) { }",
  "func ID int ) { var ID : [ - - true + - ID [ - true ] ] ( }",
  "func ID int ) { var ID : [ - - true + - ] [ - true ] ID ( }",
  "func ID int ) { var ID : [ - - true true - ] [ - + ] ID ( }",
  "} ID ( ) { var ID : int var ID : bool return true * - ( 123 / - ( ( ID ) ) * ( ID ) ) / true } func ID ( ) { func",
  "func ID ( ID : int , ID : int ) : [ ( false { ( ( false ) ) ) ] [ ] bool >= } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : [ ( >= { ( ( false ) ) ) ] [ ] bool false } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : [ ( >= { ( ( false ) ) ) ] ( ] bool false } func ID [ ) { }",
  "func ID ( ) { var ID : int ID [ true and ID [ ( ( ID ) ) ] ] [ ID ] print false = false }",
  "func ID ( ) { var ID : int print [ true and ID [ ( ( ID ) ) ] ] [ ID ] ID false = false }",
  "func ID ( ) { var ID : int = [ true and ID [ ( ( ID ) ) ] ] [ ID ] ID false print false }",
  "func ID ( ID : ) , ID : bool bool : int { while false / - 123 * 123 { } print 123 }",
  "func ID ( ID : ) , ID : bool bool { int { while false / - 123 * 123 : } print 123 }",
  "func { ( ID : ) , ID : bool bool { int ID while false / - 123 * 123 : } print 123 }",
  "func ID ] ID : [ ( true + ( false / ID [ - ( true ) ( [ - ( ( ID ) ) ] ) ) ] [ ] [ ] int ) { }",
  "func ID ] ID : [ ( true + [ false / ID [ - ( true ) ( ( - ( ( ID ) ) ] ) ) ] [ ] [ ] int ) { }",
  "func ID ( ID : [ ] [ ] { , ID : int ) : [ - true >= - ( ID ) ] bool { } func ID ( ) bool }",
  "ID func ( ID : [ ] [ ] { , ID : int ) : [ - true >= - ( ID ) ] bool { } func ID ( ) bool }",
  "ID func ( ID : [ ] [ ] { , ID : int ) : [ - true >= - ) ID ( ] bool { } func ID ( ) bool }",
  "func ID ( ) { var ID : [ ] int var ID : [ ] ID ] [ ] int [ = false } func ID ( ) { }",
  "func ID ( ) { func ID : [ ] int var ID : [ ] ID ] [ ] int [ = false } var ID ( ) { }",
  "func ID ( ( { func ID : [ ] int var ID : [ ] ID ] [ ] int [ = false } var ID ) ) { }",
  "func ID ( ID [ [ ] bool , ID : [ ] [ ID ( ) [ ID : ( 123 ) ] [ 123 ] ] ] [ ] bool , ID : [ ] bool ) { }",
  "func ID ( ID [ [ ] bool , ID : [ ] [ ID ( ) [ ID ] ( 123 ) ] [ 123 ] ] ] [ ] bool , ID : [ : bool ) { }",
  "func ID ( ID [ [ ] bool , ID [ [ ] [ ID ( ) [ ID ] ( 123 ) ] [ 123 ] ] ] [ ] bool , ID : : : bool ) { }",
  "func { ( ID : bool ) : [ ] bool { var ID : bool { var ID : int print ID [ - - ID ] [ ID ] } } func ID ( ) ID }",
  "func { ( ID : bool var : [ ] bool { ) ID : bool { var ID : int print ID [ - - ID ] [ ID ] } } func ID ( ) ID }",
  "func ID ( ) bool [ ] [ ID [ ID ( - - ( 123 ) ) ] ] : { }",
  "func ID ( ) : [ ] bool { var ID : [ ) [ ( - ID ID ] ] int } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID ] [ ) [ ( - ID ID : ] int } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID ] [ ) [ ( - ID ID : ID int } func ] ( ) { }",
  "func ID ( ID : [ ] bool , } : int , ID : [ ] int ) : bool { { return } return ID ID",
  "func ID ( ID : [ ] bool , } : int , ID : [ ] int ) : bool { { return } return ID ID",
  "func ID ( ID : [ ] bool , } : return , ID : [ ] int ) : bool { { return } int ID ID",
  "func ID ( ID : [ false / ( ( - ID ( - ID ) ) ) ] bool ) { { func ID ( ) } }",
  "func ID ( ) : [ false / ( ( - ID ( - ID ) ID ) ] bool ) { { func ID ( ) } }",
  "func ID ( ) : ID false / ( ( - ID ( - [ ) ID ) ] bool ) { { func ID ( ) } }",
  "func ID ( ID : var , ID : int ) : int { var ID : [ ID [ ID ( ) ] ] [ ] int bool ID : int } func ID ( ) { }",
  "func ID ( ID : var , ID : int ) : int { var ID : [ ID [ ID ( ) ] ] [ ] int bool ID : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) : int { ID ( ID [ - ( ) ) ] [ - 123 ] = - ID }",
  "func ID ( ID : bool [ ID : int , ID : bool ) : int { ID ( ID , - ( ) ) ] [ - 123 ] = - ID }",
  "func ID ( ID : bool [ ID : - , ID : bool ) : int { ID ( ID , - ( ) ) ] [ - 123 ] = int ID }",
  "func ID ( ) { var ID : bool { func ID ( ) } return }",
  "{ ID ( ) func var ID : bool } func ID ( ) { return }",
  "func ID var ) : int { var ID : int ( ID : bool ID ( ) = true / 123 * true } func ID ( ) { }",
  "func ID var ) : int { true ID : int ( ID : bool ID ( ) = var / 123 * true } func ID ( ) { }",
  "func ID var ) : int { true ID : int ( ID : bool ID ( ) = func / 123 * true } var ID ( ) { }",
  "func : ( ID : bool , ID : int , ID ID [ ] int ) { while ID [ - ID ] { } call ID ( ) }",
  "func : ( ID : bool , ID : int , ID ID [ ] int ) { while ID [ - ID ] { } call ID ( ) }",
  "func : ( ID : bool , ID : int , ID ID [ ] int ) [ while ID { - ID ] { } call ID ( ) }",
  "func ID ( ) { call ID ( ( false * ( - ( ID ) ) } ) ) func ID ( ) { }",
  "func ID ( ) { call ( ( ( false * ( - ( ID ) ) } ) ) func ID ID ) { }",
  "func ID ( ) { call ( ( ( false * { - ( ID ) ) } ) ) func ID ID ) ( }",
  "func ID ( ( : [ true * - 123 - ID ID ( - ( false ) ) ) - - true ] [ ] [ ] bool ) { }",
  "func ID ( ( : [ true * - 123 - ID ID ) - ( false ) ) ) - - true ] [ ] [ ] bool ( { }",
  "func ID ( ( : [ ID * - 123 - true ID ) - ( false ) ) ) - - true ] [ ] [ ] bool ( { }",
  "] ID ( ID : int , ID : bool ) : bool { var ID : int var ID : [ false * 123 * ( ID ) func [ ] bool }",
  "] ID ( ID : int , ID : bool ) : bool { var ID : int var ID : [ false * ( * 123 ID ) func [ ] bool }",
  "] ID ( ID * int , ID : bool ) : bool { var ID : int var ID : [ false * ( : 123 ID ) func [ ] bool }",
  "func ID ( ) { while } - ( ( ID / ( - ( ID ) ) ) ) { - }",
  "( ID ( ) { while } - func ( ID / ( - ( ID ) ) ) ) { - }",
  "( ID ( ) { while } - func ( ID - ( - ( ID ) ) ) ) { / }",
  "func ID ( ID : int , ID : int , ID : bool ) : [ ] [ false + ( ( true ) [ ] [ ] ) ] [ ] [ ] int { }",
  "bool ID ( ID : int , ID : int , ID : func ) : [ ] [ false + ( ( true ) [ ] [ ] ) ] [ ] [ ] int { }",
  "[ ID ( ID : int , ID : int , ID : func ) : [ ] [ false + ( ( true ) [ ] [ ] ) ] [ ] bool ] int { }",
  "func ID ( ID : ] ] int , ID : bool ) { var ID : int return ID ( ) [ ( ID ) ] [ ID [ }",
  "func ID ( ID : ] ] int , ID : bool ) { var ID : int return ID ( ) [ ( ID ) ] [ ID [ }",
  "func ID ( ID : ] ID int , ] : bool ) { var ID : int return ID ( ) [ ( ID ) ] [ ID [ }",
  "func ID ( ID : int , ID : int ) : bool { var ID : bool var ID : bool false - - ID ( ) while print { } }",
  "func ID ( ID : int , ID } int ) : bool { var ID : bool var ID : bool false - - ID ( ) while print { : }",
  "func ID ( ID : int , ID } int ) : bool { var ID : ) var ID : bool false - - ID ( bool while print { : }",
  "func ID ( ID : bool , ( : int ) { if - ID ID ( - ID ) ) { } } func ID ( ) { }",
  "- ID ( ID : bool , ( : int ) { if func ID ID ( - ID ) ) { } } func ID ( ) { }",
  "func ID ( ) : int { while true / - - ID { ) [ ID [ ( - ID ) ] ] ( } }",
  "func ID ( ) : int { while true / - - ID { ) [ ] [ ( - ID ) ] ID ( } }",
  "func ID ( ) : int { while ( / - - ID { ) [ ] [ true - ID ) ] ID ( } }",
  "func ID ( ID : bool , ID : [ ] bool , ID ] [ : [ ] int ) : bool { var ID : int print 123 print ID }",
  "func ID ( ID : bool , ID : var ] bool , ID ] [ : [ ] int ) : bool { [ ID : int print 123 print ID }",
  "func ID ( ID : bool ) : int * call ID ( - false { ( - ( ID ) ) ) }",
  "func ID ( ID : bool ) : } * call ID ( - false { ( - ( ID ) ) ) int",
  "func ID ( ID : bool ) : } * call ID ( - false { ( - ( ID ) ) ) int",
  "func ID ( ) { var false : bool var ID : [ - 123 * - - true / - - ID ] bool } func ID ( ) { }",
  "func ID ( ) { bool false : bool var ID : [ - 123 * - - true / - - ID ] var } func ID ( ) { }",
  "func ID ( ) false bool { : bool var ID : [ - 123 * - - true / - - ID ] var } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] bool { var ID : bool print ID ( ID ( ( ( ( ID ) ) ) ] ) call ID [ ) } func ID ( ) { }",
  "func ID } ) : [ ] [ ] bool { var ID : bool print ID ( ID ( ( ( ( ID ) ) ) ] ) call ID [ ) ( func ID ( ) { }",
  "func ID } ) : [ ] [ ] bool ) var ID : bool print ID ( ID ( ( ( ( ID ) { ) ] ) call ID [ ) ( func ID ( ) { }",
  "func ID ( ) : int , ID : [ - ID ( ID [ false * ( - false ) / - ID ] ] [ ] bool , ID : int ) { }",
  "int ID ( ) : int , ID : [ - ID ( ID [ false * ( - false ) / - ID ] ] [ ] bool , ID : func ) { }",
  "int ID ( ) : int , ID : [ - ID ( ID [ false * ( } false ) / - ID ] ] [ ] bool , ID : func ) { -",
  "func ID ( ID : int ) { var } : [ ] [ 123 <= true * ID ( ) ] [ ] int } func ID ( ) { ID",
  "func ID ( ID : int ) { var } : [ ] [ 123 <= true * ID ( ) ] [ ] int ID func ID ( ) { }",
  "func ID ( ] : int ) { var } : [ ] [ 123 <= true * ID ( ) ] [ ID int ID func ID ( ) { }",
  "func ID ( ) : [ ] [ ] int { var ID : int var ID : [ ] bool print ID ( ) true - } func ID ( ) { }",
  "func ID ( ) ID [ ] [ ] int { var : : int var ID : [ ] bool print ID ( ) true - } func ID ( ) { }",
  "func ID ( ) ID [ ] [ ] int { var : : int var ( : [ ] bool print ID ( ) true - } func ID ID ) { }",
  "func ID ( ID : bool , ID : [ ( true - true * 123 false ) - ( ( ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( true - ) * 123 false ) - ( ( ) true ] int ) { } func ID ( ) { }",
  ", ID ( ID : bool func ID : [ ( true - ) * 123 false ) - ( ( ) true ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : ) , ID : [ - - 123 * ( - - 123 ) / ( ( ID ) ) ] [ ] [ ] int int { }",
  "func ID ( ID : bool , ID : ) , ID : [ - - 123 * ( - - 123 ( / ( ) ID ) ) ] [ ] [ ] int int { }",
  "func ID ( ID : bool , ID : ) , ID : [ - - 123 * ( - - 123 ) / ( ) ID ( ) ] [ ] [ ] int int { }",
  "func ID ( ) : [ ] [ - ID [ true * - ( { ) ] ] int { } func ID ( ) 123 }",
  "func ID ( ) : [ ] [ - ID [ true * - ( { ) ] ] int { } func ID ( ) 123 }",
  "func ID ( ) : [ { [ - ID [ true * - ( ] ) ] ] int { } func ID ( ) 123 }",
  "func ID / ) { var ID : [ 123 * ID ( - ( ID ( ID ) ) ] [ ] int } func ID ( ) { }",
  "func ID / ) { var ID : [ 123 * ID ( - ( ID ( ID ) ) ] [ ] ) } func ID ( int { }",
  "func ID / ) { var ID : [ 123 * ) ( - ( ID ( ID ID ) ] [ ] ) } func ID ( int { }",
  "func ID ( ) : [ / ( - - ID + true * - ( true ) ID ( false ) ) ] bool { }",
  "func ID ( ) : [ / ( - - ID + ) * - ( true ) ID ( false ) true ] bool { }",
  "func ) ( ) : [ / ( - - ID + ID * - ( true ) ID ( false ) true ] bool { }",
  "func ID ( ) { var ID : bool var / : bool return - - ( false ID ( ID ) ) }",
  "func ID ( ) { var ID : bool ID / : bool return - - ( false ID ( var ) ) }",
  "ID ID ( ) { var ID : bool func / : bool return - - ( false ID ( var ) ) }",
  "func ID ( ID : bool { ID : bool ) , var ID : [ ] int var ID : bool call ID ( ) }",
  "func ID ID ID : bool { ID : bool ) , var ID : [ ] int var ( : bool call ID ( ) }",
  ") ID ID ID : bool { ID : bool func , var ID : [ ] int var ( : bool call ID ( ) }",
  "func ID ( ) { var ID : [ ] [ ] true ( 123 / [ * - ID ) ] int var ID : bool }",
  "func bool ( ) { var ID : [ ] [ ] true ( 123 / [ * - ID ) ] int var ID : ID }",
  "func bool ( ) { var ID : [ ] [ ] true ( 123 / [ * - ID ) ] int var ID : ID }",
  "func ) ( ID : bool { { return } if ID [ ID [ - ID ] ] [ - ID ] { } }",
  "func ) ( ID : } { { return } if ID [ ID [ - ID ] ] [ - ID ] { bool }",
  "func ) ( ID : } { { return } if ID [ ID [ - ID ] ID [ - ] ] { bool }",
  "func ID ( ID { bool , ID : int , ID : int ) : [ true / ID ( ) * true + false ] int : } func ID ( ) { }",
  "func ID ( ID { bool , ID : int , ID : int ) : [ true / ID ( ) * true + false ] int : ) func ID ( } { }",
  "func ID ( ) : [ ID [ ID [ ID ( ) + 123 ] [ true } ] ] [ ] bool { } func ID ( ) { ]",
  "func ID ( ) : [ ID [ ID [ ID ( ) + 123 ] [ true } ] ] [ ] bool ] } func ID ( ) { {",
  "func ID ( ) : [ ID [ ID [ ID ( ) + 123 ] [ true } ] bool [ ] ] ] } func ID ( ) { {",
  "func ID ( ID : [ ] int , ID : var ) { bool ID : int var ID : bool ID = - ID call ID ( ) } func ID ( ) { }",
  "func ID , ID : [ ] int ( ID : var ) { bool ID : int var ID : bool ID = - ID call ID ( ) } func ID ( ) { }",
  "func ID , ID : [ ] int ( ID : var ) { bool ID : int var ID : bool ID = - ID call ID { ) } func ID ( ) ( }",
  "func ID ( ID : int , ID : var ) { bool ID : bool var ID : [ ] [ ( - ( 123 ) ) ] int }",
  "} ID ( ID : int , ID : var ) { bool ID : bool var ID : [ ] [ ( - ( 123 ) ) ] int func",
  "} ID ( ID : int , ID : var ID { bool ID : bool var ) : [ ] [ ( - ( 123 ) ) ] int func",
  "func { ( ) ID var ID : [ ] [ ID [ false + ( ID ) ] ] [ ] bool }",
  "func : ( ) ID var ID { [ ] [ ID [ false + ( ID ) ] ] [ ] bool }",
  "func : ( ) ID var ID { [ + [ ID [ false ] ( ID ) ] ] [ ] bool }",
  "func ID ( ID : [ ] int ) { ID = - - - ( - ID true ) + true } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { ID = - - - ( - true true ) + ID } func ID ( ) { }",
  "func ID ( ) { print ID ( ) * ( ID [ ID ] ) } func ID ) ( { }",
  "func ID ( ) { print ID ( ) } ( ID [ ID ] ) * func ID ) ( { }",
  "func ID ( ) { print ID ( ) } ( ID [ ID ] ) * func ID ) ( { }",
  "func ID ( : : [ ] [ ] bool ) { var ID : bool var ID : bool { var ID ID int print false while ( false ) { } } print ID } func ID ( ) { }",
  "func ID ( : : [ ] [ ] ( ) { var ID : bool var ID : bool { var ID ID int print false while ( false ) { } } print ID } func ID bool ) { }",
  "func ) ( : : [ ] [ ] ( ) { var ID : bool var ID : bool { var ID ID int print false while ( false ) { } } print ID } func ID bool ID { }",
  "func ID ( ID : [ ] [ ] [ ( ( ( - true ( ) ) ) ) ] bool ) { }",
  "func ID ( ID : [ ] [ ] [ ( ( ( - true ( ) ) { ) ] bool ) ) }",
  "func ID ( ID : [ ] [ ] [ ( ( ( - true ( ) ) { ) ] bool ) ) }",
  "func ID ( ID : bool ) { { var ID : [ false / ID [ ( - ( ( false ) ) ) ] [ ID ] * false ] int } ) func ID ( } { }",
  "false ID ( ID : bool ) { { var ID : [ false / ID [ ( - ( ( false ) ) ) ] [ ID ] * func ] int } ) func ID ( } { }",
  "false ID ( ID : bool ) { { var ID : [ false / ID [ ( - ) ( false ) ) ) ] [ ID ] * func ] int } ( func ID ( } { }",
  "func ID ( ID : int ) : [ ( false func - ( true / ID ) ) ] bool { } * ID ( ) { }",
  "func ID ( ID : int ) : [ ( false func - ( true / ID ) bool ] ) { } * ID ( ) { }",
  "func ID ( ID : int ) : false ( [ func - ( true / ID ) bool ] ) { } * ID ( ) { }",
  "func ID ( ) : bool { var ID bool [ ] int } func ID ( ID : : ) : [ ] int { }",
  "func ID ( ) : bool var { ID bool [ ] int } func ID ( ID : : ) : [ ] int { }",
  "func ID ( ID : int ) : var { bool ID : [ ] [ ] int var ID : bool }",
  "func ID ( ID : int ) : var { } ID : [ ] [ ] int var ID : bool bool",
  ": ID ( ID : int ) : var { } ID : [ ] [ ] int var ID func bool bool",
  "func ) ( ) : int { var ID : bool } func ID ( ID { var ID : bool if ID ( - ID ) { } }",
  "func ) ( ) : } { var ID : bool int func ID ( ID { var ID : bool if ID ( - ID ) { } }",
  "func var ( ) : } { var ID : bool int func ID ( ID { ) ID : bool if ID ( - ID ) { } }",
  "func ID ( ) : bool { print ID ID ( ) [ ( - ( ) ] ) print 123 }",
  "func ID ( ) : bool { print ID ID ( ) [ ( - ( ) ] ) print 123 }",
  "func ID ( ) : ID { print ID bool ( ) [ ( - ( ) ] ) print 123 }",
  "func ID ( ) { } [ ID ( ID : bool , ID : func false / ( ID ) * 123 ] bool , ID : bool ) { }",
  "func ID ( ) { } [ ID ( ID : bool , ID : func false / ( ID ) * 123 ID bool , ] : bool ) { }",
  "func ID ( ] { } [ ID ( ID : bool , ID : func false / ( ID ) * 123 ID bool , ) : bool ) { }",
  "func ID ( ID : : ] bool ) [ bool { var ID : [ ] int var ID : bool return }",
  "func ID ( : : : ] bool ) [ bool { var ID : [ ] int var ID ID bool return }",
  "func ID ( : : : ] bool ] [ bool { var ID : [ ) int var ID ID bool return }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ] bool ID ( ( - ( ( ( - = ID ) ) ) ) ) - ID }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ] bool ID ( ( - ( ( ( ID = - ) ) ) ) ) - ID }",
  "func ID ( ID : int , ID : bool ) { var ID : - ] bool ID ( ( - ( ( ( ID = [ ) ) ) ) ) - ID }",
  "func ID ( ) : [ ( bool { var ID : int var ID : [ ] int print ( ID ) } func ID ] ) { }",
  "func ID ( ) : [ ( bool { var ID : : var ID int [ ] int print ( ID ) } func ID ] ) { }",
  "func ID ) ) : [ ( bool { var ID : : var ID int [ ] int print ( ID ) } func ID ] ( { }",
  "func ID ( ID : bool ) { var ID : ( if ID / ( - ID [ ( ID ) ] ) { } } func ID bool ) { }",
  "func [ ( ID : bool ) { var ID : ( if ID / ( - ID ID ( ID ) ] ) { } } func ID bool ) { }",
  "func [ ( ID : bool ) { var ID ID ( if ID / ( - ID ID ( : ) ] ) { } } func ID bool ) { }",
  "func true ( ) { var ID : bool { var ID : bool return ID * ( ( false ) ) * - ( false ) } }",
  "func true ( ) { var ID : bool { var ID * bool return ID * ( ( false ) ) : - ( false ) } }",
  "func true ( ) { var ID : bool { false ID * bool return ID * ( ( var ) ) : - ( false ) } }",
  "func ID ( ) { var ID : [ ] bool var ID : [ ] bool if ( false { ID ) * } } func ID ( ) { }",
  "func ID ( ) { } ID : [ ] bool var ID : [ ] bool if ( false { ID ) * } } func ID ( ) { var",
  "func ID ( ) { } ID : [ ] bool var ID : [ ] bool if ( false { ID ) * } } func ID ( ) { var",
  "func ID ( ID : [ ) int , ID : int ) : int { var ID : bool var ID : [ ID ( ] ] int }",
  "func ID ( ID var [ ) int , ID : int ) : int { : ID : bool var ID : [ ID ( ] ] int }",
  "func ID ( ID var [ ) int , ID : int ) : int { : ID : bool var ID : [ ID ( int ] ] }",
  "func ID ( ID : [ ] bool , ID : bool ) ID int { return false / : ( ID ) }",
  "func ID ( ID : [ ) bool , ID : bool ] ID int { return false / : ( ID ) }",
  "func ID ( ID : [ ) bool , ID ID bool ] ID int { return false / : ( : ) }",
  "func ID ( { ) var ID : [ false / 123 - 123 / true / ( false ) ] [ ] bool } func ID ( ) { }",
  "func ID ( { ) var ID : [ false / 123 - 123 / true / ( false ) ] [ ] ( } func ID bool ) { }",
  "func ID ( ) { var ID : bool return ) func ID ( ID : int , ID : [ ] int } : [ - ( ID ) ] [ ] bool { }",
  "func ID ( ) { var , : bool return ) func ID ( ID : int ID ID : [ ] int } : [ - ( ID ) ] [ ] bool { }",
  "func ID ( ) { var , : bool return ) ] ID ( ID : int ID ID : [ ] int } : [ - ( ID ) func [ ] bool { }",
  "func ID ( ) { var ID : [ false * 123 - [ * 123 < true ] [ ] true ] [ ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ false * 123 - [ * ) < true ] [ ] true ] [ ] [ ] [ ] int } func ID ( 123 { }",
  "func : ( ) { var ID ID [ false * 123 - [ * ) < true ] [ ] true ] [ ] [ ] [ ] int } func ID ( 123 { }",
  "func ID ( ) : [ - ID ( ) [ ( ( } ) ) ] [ ( ID ) ] ] bool { false func ID ( ) { }",
  "func ID ( ) : [ - ID ( ) [ ( ( } ) ) ] [ ( ID ) ] ] bool { false func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int return ) 123 / true / ( ID ( ) } func ID ( ) { }",
  "} ID ( ) { var ID : int var ID : int return ) 123 / true / ( ID ( ) } func ID ( ) { func",
  "func ID ( ID : [ ] bool ) { var ID : [ func true - ( true ) - ID ) ] [ ] bool var ID : [ ] int } ( ID ( ) { }",
  "func ID ( ID true [ ] bool ) { var ID : [ func true - ( : ) - ID ) ] [ ] bool var ID : [ ] int } ( ID ( ) { }",
  "func ID ( ID true [ ] bool ) { ID ID : [ func true - ( : ) - var ) ] [ ] bool var ID : [ ] int } ( ID ( ) { }",
  "func ID - ) : int { { var ID : int print ID ( ) / false / true ( ( ( ID ) ) } call ID ( ) }",
  "func ID print ) : int { { var ID : int - ID ( ) / false / true ( ( ( ID ) ) } call ID ( ) }",
  "func ID ( ) { var ID : int var ID : [ - ( ( ) * 123 / ( - false ) ) ) ] [ ] int } func ID ( true { }",
  "func ID ( ) { var ID : int var ID : [ - ( ( ) ) 123 / ( - false ) ) * ] [ ] int } func ID ( true { }",
  "func ID ( ) { var : : int var ID ID [ - ( ( ) ) 123 / ( - false ) ) * ] [ ] int } func ID ( true { }",
  "func ID ( ) { int ID : int { var ID : int var ID : int } } func ID ( ID : int , ID : var , ID : bool ) { }",
  "func ID ( ) { int ID : int { var ID : int var { : int } } func ID ( ID : int , ID : var , ID : bool ) ID }",
  "func ID ( ) { int ID : int { var ID : int var { : int } : func ID ( ID : int , ID : var , ID } bool ) ID }",
  "func ID ( ) : bool , ID : int , ID : bool ID { var ID : int var ID : bool return ( ID ) } func ID ( ) { }",
  ", ID ( ) : bool func ID : int , ID : bool ID { var ID : int var ID : bool return ( ID ) } func ID ( ) { }",
  ", ID ( ) : bool func ID : int , ID bool bool ID { var ID : int var ID : : return ( ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int return } func ID ( ) : bool { var ID ] [ ( ( - - - - 123 ) ) ] [ : int }",
  "func ID ( ) { - ID : int var ID : int return } func ID ( ) : bool { var ID ] [ ( ( var - - - 123 ) ) ] [ : int }",
  "func ID ( ) { - ID : int var ID : int return } func ID ( ] : bool { var ID ] [ ( ( var - - - 123 ) ) ) [ : int }",
  "func ID ( ) : [ ( 123 ) ( - true - - - true - - ( ( ( ID ) ) + ) ) ] int { } func ID ( ) { }",
  "func ID ( ) : [ ( 123 ) ( - true - - - true - - ( ( ( ID ) ) + ) ) ] int { } func ID ( ) { }",
  "func ID ( ) : [ ( 123 ) ( true true - - - - - - ( ( ( ID ) ) + ) ) ] int { } func ID ( ) { }",
  "func ID ( ) : [ 123 * ID [ 123 + true + - true } * ( - - 123 ) ] int { ]",
  "func ID ( ) : [ 123 * 123 [ ID + true + - true } * ( - - 123 ) ] int { ]",
  "func ( ID ) : [ 123 * 123 [ ID + true + - true } * ( - - 123 ) ] int { ]",
  "func ID ( } : int { var ID : [ ( false and 123 - - - ID + ID and ID ) ] [ ] [ ] bool )",
  "func ID ( } : int { var ] : [ ( false and 123 - - - ID + ID and ID ) ] [ ID [ ] bool )",
  "func ID ( } : int { var ] : [ ( false and 123 - ) - ID + ID and ID ) ] [ ID [ ] bool -",
  "func ID ( ID : bool ) } var ID : bool print ( ID + ( ID ) ) print - false {",
  "func ID ( ID : bool { } var ID : bool print ( ID + ( ID ) ) print - false )",
  "func ID ( ) : bool { var ID : int ID [ ( true ID ID ( ) ) ] [ - / ] = true } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int ID [ ( true ID ID ( ) ) ] [ / - ] = true } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int ID [ ID true ID ID ( ) ) ] [ / - ] = true } func ( ( ) { }",
  "func ID ( ) { var ID : bool if ( true / ( - ID ) ) { } print ( ( ) 123 ) - } func ID ( ) { }",
  "func ID ( ) { var ID : bool if ( true / ( - ID ) ) { } print ( ( ) 123 ) - } func ID ( ) { }",
  "func ID ( ) { var ID : bool if ( true / ( - ID ) ) { } print ( ( ) 123 ) { } func ID ( ) - }",
  "func ID ( ) : int { var ID : [ ] bool var ID : [ } bool { var ID : int { var ID : [ ] bool } } while - ( - - - 123 ) { } } func ID ( ) { ]",
  "func ID ( ) : int { var ID : [ ] bool var ID : [ } bool { var ID : int { var ID : [ ] bool } } while - ( - - - 123 ) { } } func ID ( ) { ]",
  "func ID ( ) : int { var ID : } ] bool var ID : [ } bool { var ID : int { var ID : [ ] bool } } while - ( - - - 123 ) { [ } func ID ( ) { ]",
  "func ID ( ID : int , ID : bool ) { var ID : / var ID : bool return true int true - - true - true }",
  "func ID ( ID : int , ID : bool ) { var ID : / var ID : bool return true int true - - true - true }",
  "func } ( ID : int , ID : bool ) { var ID : / var ID : bool return true int true - - true - true ID",
  "func ID ( ) : int { var ID : int var ID : int call ID ( - true * true - + true ) if 123 { } }",
  "func ID ( ) : int { true ID : int var ID : int call ID ( - var * true - + true ) if 123 { } }",
  "func ID ( ) : int { true ID : int var ID : int call ID ( - var * true - + true ) if 123 { } }",
  "func ID ( ID : : , ID : [ ID [ ( ( - ID ) ) ] [ - ( ( ID ) ) ] ] int , ID int bool ) { }",
  "func ID ( ID : : , ID : [ ID ID ( ( - [ ) ) ] [ - ( ( ID ) ) ] ] int , ID int bool ) { }",
  "func ID ( ID : : , ID : [ ID ID ( ] - [ ) ) ( [ - ( ( ID ) ) ] ] int , ID int bool ) { }",
  "func ID ( ) { call ID ( ) - 123 / true * ID [ false ] - } func ID ( ) { }",
  "func ID ( ) { call ID ( } - 123 / true * ID [ false ] - ) func ID ( ) { }",
  "func ID ( ) { call ID ( } - 123 { true * ID [ false ] - ) func ID ( ) / }",
  "func ID ( ID : [ - ( ID [ ID + true > - false int ) ] ] ) { }",
  "func ID ( ID : [ - ( [ ID ID + true > - false int ) ] ] ) { }",
  "func ID ( ID : [ - ( [ ID ID + { > - false int ) ] ] ) true }",
  "func ID ( ID - bool , ID : int ) { if ID ( ID [ : - ID ] [ ID ] ) { } { } }",
  "func ID ( ID - bool , ID } int ) { if ID ( ID [ : - ID ] [ ID ] ) { } { } :",
  "func ID ( ID - bool , ID } { ) { if ID ( ID [ : - ID ] [ ID ] ) { } int } :",
  "func ID ( ) : bool { var ID : int var ID : bool ID ( true / ( 123 ) * = 123 ) - - - 123 } func ID ( ) { }",
  "func ID - ) : bool { var ID : int var ID : bool ID ( true / ( 123 ) * = 123 ) - ( - 123 } func ID ( ) { }",
  "func ID - ) : bool { var ID : int var ID : bool ID ( true / ( 123 ) * func 123 ) - ( - 123 } = ID ( ) { }",
  "func ID ( ID : [ ID ( ) true true / ID [ 123 / ( - - ID ) / ( false ) ] [ * ] ] int ) { }",
  "func ID ( ID : [ ID ( ) ID true / ID [ 123 / ( - - true ) / ( false ) ] [ * ] ] int ) { }",
  "func ID ( ID : [ ID ( ) ID true / ( [ 123 / ( - - true ) / ID false ) ] [ * ] ] int ) { }",
  "func ID ( ID : int , ID ) int ) : int { call ID ( : }",
  "func ID ( ID : int , ID ) int ) ID int { call : ( : }",
  "ID ID ( ID : int , func ) int ) ID int { call : ( : }",
  "func ID ( 123 { var ID : bool print ( - ID ( ) [ 123 ] [ ( - ( ) ) ) ] ) }",
  "func ID [ 123 { var ID : bool print ( - ID ( ) ( 123 ] [ ( - ( ) ) ) ] ) }",
  "func ID [ ( { var ID : bool print ( - ID ( ) 123 123 ] [ ( - ( ) ) ) ] ) }",
  "func ID ( ID : int ) : [ int [ ] int { var ID : ] { } } func ID ( ) { var ID : bool var ID : bool }",
  "func ID ( ID : int ) ID [ int [ ] int { var ID : ] { } } func ID ( ) { var ID : bool var : : bool }",
  "func ID ( ID : int ) ( [ int [ ] int { var ID : ] { } } func ID ID ) { var ID : bool var : : bool }",
  "func ID ( ID : ID , ID : int ) : bool { var ID : [ ID [ int ( ) ] [ false ] ] [ ] bool }",
  "func ID ( ID : ID , ID : int ) ] bool { var ID : [ ID [ int ( ) ] [ false ] ] [ : bool }",
  "func ID ( ID : ID , ID : int ) ] bool { var [ : ID ID [ int ( ) ] [ false ] ] [ : bool }",
  "func ID ( false : int { ID ( ) / - ( ID [ ID ] ) ) = false call ID ( ) } func ID ( ) { }",
  "func ID false ( : int { ID ( ) / - ( ID [ ID ] ) ) = false call ID ( ) } func ID ( ) { }",
  "func ID false ( : int { ID ID ) / - ( ID [ ( ] ) ) = false call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : int : ID : bool return } func ID ( ID : bool ) : bool { var ID var [ ] [ ] [ ] bool }",
  "func ID ( ) { var ID : int : ID : bool return } func ID ( ID : bool ) : bool { var ID var [ ] [ ] [ ] bool }",
  "func ID ( ) { var ID : int : ID : bool return } func ID ( ID : bool ) : bool { var ID var [ ] [ ] [ ] bool }",
  "func ID ( ) { var ID : bool } ID : bool while ( ID [ ID ] ) { var if false { } } func ID ( ) { }",
  "ID ID ( ) { var func : bool } ID : bool while ( ID [ ID ] ) { var if false { } } func ID ( ) { }",
  "ID ID ( ) { var func : bool } ID : func while ( ID [ ID ] ) { var if false { } } bool ID ( ) { }",
  "func ID ( ID : [ ] [ ] int ) : bool { if ) - ( 123 * - 123 ) { } } func ID ( - { }",
  "func ID ( ID : [ ] [ ] int ) : bool { if ) - ( 123 * - 123 ) { } } func ID ( - { }",
  "func ID ( ID : [ * [ ] int ) : bool { if ) - ( 123 ] - 123 ) { } } func ID ( - { }",
  "func ID ( ID : [ ] bool , ID : [ ] bool , ID : [ ( ID [ - - ( ( true ) ) ] { ( ID ) ] ) ] [ ] bool ) [ } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ] bool , ID : [ ( ID [ - - ( ] true ) ) ( { ( ID ) ] ) ] [ ] bool ) [ } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ] bool , ID : [ ( ID [ - - ( ] true ) ) ( { ( ID ) ] ) ] [ { bool ) [ } func ID ( ) ] }",
  "func ID ( ) ] var ID : [ ] bool var ID : [ 123 and ID ( ID ) and ( true ) { int }",
  "func ID ( ) ] ID var : [ ] bool var ID : [ 123 and ID ( ID ) and ( true ) { int }",
  "func ID ( ) ] ID var : [ ] bool var ID : [ 123 and ID ( ID ) and ( true ) { int }",
  "func ID ( ) : bool { var ID : int var ID : [ ID ) 123 * - ID / ( ID ( ) ] bool } func ID ( ) { }",
  "func ID ( ) : { bool var ID : int var ID : [ ID ) 123 * - ID / ( ID ( ) ] bool } func ID ( ) { }",
  "func ID ( ) : { bool var ID : int var ID : [ ID ) 123 * - ) / ( ID ( ) ] bool } func ID ( ID { }",
  "func ID ( [ { var ID : ) ] int return ( - ( false / true / ID ) ) } func ID ( ) { }",
  "func ID ( - { var ID : ) ] int return ( [ ( false / true / ID ) ) } func ID ( ) { }",
  "( ID ( - { var ID : ) ] int return ( [ func false / true / ID ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ID { return false * 123 < true - ID - ) } func ID ( ) { }",
  "func ID ( ID } bool , ID : bool ID { return false * 123 < true - ID - ) : func ID ( ) { }",
  "func ID ( ID } bool , ID : bool ID { return false * 123 < true - ID } ) : func ID ( ) { -",
  "func ID ( ID : bool ) { while ( ID [ true * ID * - - - ) ] ) { } if - ( true ID { } }",
  "func ID ( ID : bool ) { while ( ID [ true * } * - - - ) ] ) { } if - ( true ID { } ID",
  "func ID ( ID : bool ) { while ( ID [ true * } * - - - ) ] ) { ( if - } true ID { } ID",
  "func ID ( ID : [ ] bool , ID : [ ] int , ID : [ ( ( ID ) ) ] [ { [ ] [ ] [ ] [ ] bool ) ] }",
  "func ID ( ID : int ] bool , ID : [ ] [ , ID : [ ( ( ID ) ) ] [ { [ ] [ ] [ ] [ ] bool ) ] }",
  "func ID ( ID : int ] bool , ID : [ ] [ , ID : ( [ ( ID ) ) ] [ { [ ] [ ] [ ] [ ] bool ) ] }",
  "func ID ( { : int { var ID : bool var ID : [ ] int call ID ( ) while - ID ( ) ) } } func ID ( ) { }",
  "func ID ( { : int { var ( : bool var ID : [ ] int call ID ( ) while - ID ( ) ) } } func ID ID ) { }",
  "func ID ( ) : int { var ( : bool var ID : [ ] int call ID ( ) while - ID ( { ) } } func ID ID ) { }",
  "func ID ( ID var int ) : bool { : ID : bool var ID : [ ] bool return }",
  "func ID var ID ( int ) : bool { : ID : bool var ID : [ ] bool return }",
  "func ID var ID ( int ) : bool { : ID : bool var ID : [ ] bool return }",
  "func ID ( ) func { var ID : int var ID : int return } return - ( true / - ID / ID ) } { ID ( ) { }",
  "func ID ( ) func { var ID : int var ID : int ) } return - ( true / - ID / ID ) } { ID ( return { }",
  "func ID ( ) func { var ID : int var ID : int ) } return - ( true / - ID / ID ) } { ID ( return { }",
  "func ID ( ) : [ true - - ( 123 / ID ( / ( - ID ) ) ) ] int { }",
  "func ID ( / : [ true - - ( 123 ) ID ( / ( - ID ) ) ) ] int { }",
  "func ) ( / : [ true - - ( 123 ID ID ( / ( - ID ) ) ) ] int { }",
  "func ID ( ) { call ID ( ) } func ID ( ID : bool ) : int { { var ID : [ ] bool var ID : int } while ( ( false ) } { } )",
  "func ID ( ) { call ID ( ) } func ID ( ID : bool ) } int { { var ID : [ ] bool var ID : int : while ( ( false ) } { } )",
  "func ID ( ) { call ID ( ) } func ID ( ID : bool ) } int { { var ID : [ ] bool var ID : int : while ( ( false ) } { } )",
  "func ID ID ) : [ ] int { print false - ( 123 + ( ID ) ) - ( ID = 123 }",
  "func ID ID ) : [ ] int { print false - ( 123 + ( ID ) ) - ( ID = 123 }",
  "func ID ID ) : [ ] int { print false - ( ) + ( ID 123 ) - ( ID = 123 }",
  "func ID ( ID : bool ) : int { var ID : int return } func : ( ID : [ ] int , ID ID int ) { }",
  "func ID ( ID : bool ) : int { var ID : int return } func : ( ID : [ ] int , ID ID int ) { }",
  "func ID ( ID : : ) bool int { var ID : int return } func : ( ID : [ ] int , ID ID int ) { }",
  "func ID ( ) { if true - ( - ( - ID ID ) ) { } while true { } }",
  "func ID ( ) { if true - ( - ( ) ID ID - ) { } while true { } }",
  "func ID ( - { if true ) ( - ( ) ID ID - ) { } while true { } }",
  "func ID ( ID : int , ID : int ) : bool { while ) ( ID or ( ID ) or ( ( true ) ) ID { } call ID ( ) }",
  "func ID ( ID : int , ID : int ) : bool { while ) ( ID or ( ID ) or ( ( true ) ( ID { } call ID ) ) }",
  "func ID ( ID : int , ( : int ) : bool { while ) ( ID or ( ID ) or ( ID true ) ( ID { } call ID ) ) }",
  "func ID ( ID : bool , ID : bool , ID : [ true * ( ( false / ( - ( 123 ) ) 123 - / ) ) ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ( : [ true * ( ( false / ( - ID 123 ) ) 123 - / ) ) ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ( : [ true * ( ( ) / ( - ID 123 ) ) 123 - / ) false ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool return true / ID ( ID [ ( ID ) ] [ false ] } func ) ( ) { }",
  "func ID ( ) { ] ID : bool return true / ID ( ID [ ( ID ) var [ false ] } func ) ( ) { }",
  "func ID ( ) { ] ID : bool return true / ID ( ID [ ( ID ) var [ false ] } func ) ( ) { }",
  "func ID ( ) { ID [ ( ID [ - - false ) true ] ) ] [ true ] = ( ( ( true ) ) * }",
  "func ID ( ) { ID [ ( ID [ - - false ) true ] ) ] [ true ] = true ( ( ( ) ) * }",
  "func ID ( ) { ID [ ( ID [ - - false ) true ] ) ] [ true ] = true ( ( } ) ) * (",
  "func ID ( - : [ - ID ( ) true + - - ( true ) + false ) ] bool { }",
  "- ID ( - : [ func ID ( ) true + - - ( true ) + false ) ] bool { }",
  "func , ( ID : [ ] bool ID ID : bool ) { var ID : int var ID : int }",
  "func , ( ID : [ ] bool ID ID : int ) { var ID : int var ID : bool }",
  "func , ( ID : [ ] bool ID ID : int bool { var ID : int var ID : ) }",
  "func ) ( ID : bool , ID : [ ( ( ID ( ) [ ID ] ID ) ] bool ) { }",
  "func ) ( ID : bool , ID : [ bool ( ID ( ) [ ID ] ID ) ] ( ) { }",
  "func ) ( ID : bool , ID ) [ bool ( ID ( ) [ ID ] ID ) ] ( : { }",
  "func ID ( ID : [ ID * ID != true [ false * ( ( false ) ) ] ] int ) { }",
  "func ID ( ID : [ ID * ID != true [ false * ( ) false ) ( ] ] int ) { }",
  "func ID ( ID : [ ID * ID false true [ != * ( ) false ) ( ] ] int ) { }",
  "func ID ( ) { var ID : [ ] bool print - ID ( } * ID ) if true { } ID",
  "} ID ( ) { var ID : [ ] bool print - ID ( } * ID ) if true { func ID",
  "func ID ( ) : int { var ID : [ - false / true * ( ( - ( ID ) ) bool ] bool var ID : [ ] ) }",
  "func ID ( ) : { int var ID : [ - false / true * ( ( - ( ID ) ) bool ] bool var ID : [ ] ) }",
  "func ID : ) ( { int var ID : [ - false / true * ( ( - ( ID ) ) bool ] bool var ID : [ ] ) }",
  "func { ( ) : int ID call ID ( ( - true / ( ( ( 123 ) ) ) * ID ) ) }",
  "func { ( true : int ID call ID ( ( - ) / ( ( ( 123 ) ) ) * ID ) ) }",
  "func { ( true : int ID call ID ( ( - ) 123 ( ( ( / ) ) ) * ID ) ) }",
  "func ID ( ID : bool , ID : int , ID : : ) bool [ ] bool { return }",
  "func ID ( ID : bool , ID : int , } : : ) bool [ ] bool { return ID",
  "func ID ( ) { call ID ( ) } func ID var ID : int , ID : bool ) { ( ID : bool return true }",
  "func ID ( bool { call ID ( ) } func ID var ID : int , ID : ) ) { ( ID : bool return true }",
  "{ ID ( bool func call ID ( ) } func ID var ID : int , ID : ) ) { ( ID : bool return true }",
  "func ID } ID : int , ID : bool ) { var ID : int print ( ( 123 ) ) if 123 { } (",
  "func ID int ID : int , ID : bool ) { var ID : } print ( ( 123 ) ) if 123 { } (",
  "func - ( ) { print ( ID ( ( ID ID ) ) ) call ID ( ) } func ID ( ) { }",
  "func - ( ) { print ( } ( ( ID ID ) ) ) call ID ( ) } func ID ( ) { ID",
  "func - ( ) { print ( ID ( ( } ID ) ) ) call ID ( ) } func ID ( ) { ID",
  "func ID ( ) : [ - - ID ( ) [ ( true / ID ] ) ] int { } func ID ( ) { }",
  "func ID ( ) : [ - - ID func ) [ ( true / ID ] ) ] int { } ( ID ( ) { }",
  "func ID ( ) : [ - - ID int ) [ ( true / ID ] ) ] func { } ( ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : int while - false * 123 / true - - true + - - - ID { } print - ( - 123 ) } func } ( ) { ID",
  "func false ( ID : int ) : bool { var ID : int while - ID * 123 / true - - true + - - - ID { } print - ( - 123 ) } func } ( ) { ID",
  "func false ( ID : int ) : bool { var ID ( int while - ID * 123 / true - - true + - - - ID { } print - : - 123 ) } func } ( ) { ID",
  "func ID ( ID : int , ID ID int ) : int { var ID : int var : : int print true - ID while false { } }",
  "int ID ( ID : int , ID ID func ) : int { var ID : int var : : int print true - ID while false { } }",
  "int ID ( : : int , ID ID func ) : int { var ID : int var : ID int print true - ID while false { } }",
  "] ID ( ID : int , ID : bool ) { var ID : int var ID : bool ID [ ( true ) func = false call ID ( ) }",
  "] ID ( ID : int , ID : bool ) ( var ID : int var ID : bool ID [ ( true ) func = false call ID { ) }",
  "] ID ( ID : int , ID : ( ) ( var ID : int var ID : bool ID [ bool true ) func = false call ID { ) }",
  "func ID ( ID : [ ] bool , ID : int ) : var ID : bool var ID { [ ] [ ID ( ) ] [ ] [ ] bool }",
  "func ID ( ID : [ ] bool , ID : int [ : var ID : bool var ID { [ ] ) ID ( ) ] [ ] [ ] bool }",
  "func ID ( ID : [ ] ] , ID : int [ : var ID : bool var ID { [ ] ) ID ( ) ] [ ] [ bool bool }",
  "func ID ( ) ID int { return ( ID [ ID [ ID ] [ : ] ] ) }",
  "func : ( ) ID int { return ( ID [ ID [ ID ] [ ID ] ] ) }",
  "func ID ( ) : [ ] [ - ( ( ID ( ) [ ( ( ] false ) ) ) ] [ ID ] ) ) ( bool { }",
  "func ID ( ) : [ ] [ - ( ( ID ) ) [ ( ( ] false ( ) ) ] [ ID ] ) ) ( bool { }",
  "func ID ( ) : [ ] - [ ( ( ID ) ) [ ( ( ] false ( ) ) ] [ ID ] ) ) ( bool { }",
  "func [ ( ) : int { var ID : int call ID ( ID [ - true / - false ] ID ID ] ) } func ID ( ) { }",
  "func [ ( ) : int { var ID : ] call ID ( ID [ - true / - false ] ID ID int ) } func ID ( ) { }",
  "func [ ( ) ] int { var ID : : call ID ( ID [ - true / - false ] ID ID int ) } func ID ( ) { }",
  "func var ( ID : int ) : int { ID ID : bool var ID : int return ( true + ( ( - false ) ) ) } func ID ( ) { }",
  "func var ( ID : int ) : int { ID ID : bool var ID : int + ( true return ( ( - false ) ) ) } func ID ( ) { }",
  "func var } ID : int ) : int { ID ID : bool var ID : int + ( true return ( ( - false ) ) ) ( func ID ( ) { }",
  "func ID ( ) : } { var ID : bool int",
  ") ID ( ) : [ true * - - 123 / true and ID ( false func ] [ ] bool { }",
  ") ID ( ) : [ true * ] - 123 / true and ID ( false func ] [ - bool { }",
  ") ID ( ) : [ true * ] - 123 / true and ID ( false func ] [ - bool { }",
  "func ID ( ID : bool ID , : [ ] int , ID : int ) { var ID : int var ID : [ ( ID ) ] [ ] [ ] int }",
  "func ID ( ID : bool ID , : [ ] int , ID : int ) { var ID : int var ID : [ ( ID ) ] [ ] [ int ] }",
  "func ID ( ID ID bool : , : [ ] int , ID : int ) { var ID : int var ID : [ ( ID ) ] [ ] [ int ] }",
  "func ID ( ) : [ ID [ false / - false / true + ] ( true ) ) + - ID ] [ ID ] ] [ ( int { }",
  "func ID ( ) : [ ID [ false / - false / true + ] ( true ) ) + - ID ] [ ID ] ( [ ] int { }",
  "func ID ( ) : [ ID [ false / ( false / true + ] ( true ) ) + - ID ] [ ID ] - [ ] int { }",
  "ID ID ( ID : bool , ID : bool ) { var ID : bool var ID : [ func ( ) [ - - true ] [ ( ( - ID ) ) ] ] int } func ID ( ) { }",
  "ID ID ( ID : bool [ ID : bool ) { var ID : bool var ID : [ func ( ) , - - true ] [ ( ( - ID ) ) ] ] int } func ID ( ) { }",
  "ID ID ( ID : bool [ ID : bool ) { var ID : bool var ID : [ func ( ) , - - true ] [ ID ( - ID ) ) ] ] int } func ( ( ) { }",
  "func ID ( ) { var ID : [ - ( ( ( true ) ) ) ) [ ] int var ID : int } func ID ( ] { }",
  "func ID ( ) { var ID : [ - ( ( ( ID ) ) ) ) [ ] int var true : int } func ID ( ] { }",
  "func ID ( ID : bool , ID : int ( ID : int ) { { return ID , ) [ 123 ] [ ( false ) ] } }",
  "func ID ( ID : bool , ID : int ( ID : int } { { return ID , ) [ 123 ] [ ( false ) ] ) }",
  "func ID ( ID : bool , ID : int ( ID : int } { { return ID , ) [ 123 ] [ } false ) ] ) (",
  "func ID ( ) : [ - - - ( ID int ID <= 123 ) ) ] ( { }",
  "func ID ( ) : [ - - - ( ID int ID { 123 ) ) ] ( <= }",
  "func ID 123 ) : [ - - - ( ID int ID { ( ) ) ] ( <= }",
  "func ID ( ) { { ID [ - ( ( 123 + ID + - ) ) ] [ ( true ) ] = false } while ID true { } }",
  "func ID ( ) } { ID [ - ( ( 123 + ID + - ) ) ] [ ( true ) ] = false } while ID true { } {",
  "func ID ( ) true { ID [ - ( ( 123 + ID + - ) ) ] [ ( true ) ] = false } while ID } { } {",
  "func ID ( ID : bool , ID : int ) { var ID : bool var ID : int return ( ID [ ( ( ID ) ) ] [ false ( ( ) ) ] ) }",
  "func ID ( ID : bool , ID : int ) { var ID : bool var ID : int return ( ID [ ( ( ID ) ) ] [ false ( ( ) ) ] ) }",
  "func ID ( ID : bool , ID : int ) { var ID : bool var ID : int return ( ID [ ( ( ID ) ) ] [ false ( ( ) ) ] ) }",
  "func ID ( ID : bool , ID : int print : bool { var ID : int var ID : bool ) ( ID ) print false } func ID ( ) { }",
  "func ID ( ID : bool , ID : int print : ID { var ID : int var ID : bool ) ( ID ) print false } func bool ( ) { }",
  "func ID ( ID : bool , ID : int ID : print { var ID : int var ID : bool ) ( ID ) print false } func bool ( ) { }",
  "func ID ( ID : int } { var ID : [ ] bool while - false and - - - ID { } ) func ID ( ) { }",
  "func ID ( ID : int } { var ID : [ ] bool while - false and - - - ( { } ) func ID ID ) { }",
  "func ID ( ID : int } { var ID : [ ] bool while - false and - - - ( { } ) func ID ID ) { }",
  "func ID ( ) : [ ] bool false var ID : int ID ( - 123 <= true * { / ( ( - - - ID ) ) ) = ( true ) }",
  "func ID ( ) { [ ] bool false var ID : int ID ( - 123 <= true * : / ( ( - - - ID ) ) ) = ( true ) }",
  "func ID ( ) { [ ] bool false var ID : int ID ( ( 123 <= true * : / ( - - - - ID ) ) ) = ( true ) }",
  "func ID ( ID : [ ] int , ID : int , ID : [ 123 * ( ID + ( - ( ( ID ) ) ) ) * ) ] [ ] [ ] int true { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : [ 123 ] ( ID + ( - ( ( ID ) ) ) ) * ) * [ ] [ ] int true { } func ID ( ) { }",
  "func ID ( ( : [ ] int , ID : int , ID : [ 123 ] ( ID + ID - ( ( ID ) ) ) ) * ) * [ ] [ ] int true { } func ID ( ) { }",
  "func ID ( ID : [ ) ( ) / ( - true * - - 123 - true ) / false ] int ID { }",
  "func ID ) ID : [ ) ( ( / ( - true * - - 123 - true ) / false ] int ID { }",
  "func ID / ID : [ ) ( ( / ( - true * - - 123 - true ) ) false ] int ID { }",
  "func ID ( ) : int { while ID and true / - ( ) false - * ID and ID { } { } } func ID ( ) { }",
  "func ID ( ) : int { while ID and true / - ( { false - * ID and ID { } { } } func ID ( ) ) }",
  "func ID while ) : int { ( ID and true / - ( { false - * ID and ID { } { } } func ID ( ) ) }",
  "func ID ( ) : int { var ID int [ - ID / ( ( ID ) ) / ID ] : } func ID ( ) { }",
  "func ID ( ) : int { var ID int [ - ID / ( ( ID ) ) / ID ] : } func ID ( ) { }",
  "func var ( ) : int { ID ID int [ - ID / ( ( ID ) ) / ID ] : } func ID ( ) { }",
  "func ID ( ) { var ID : ) print - ID ( bool [ ID / ID / 123 ] { } }",
  "func ID ( ) { var ID : ) print ID ID ( bool [ ID / - / 123 ] { } }",
  "func ID ( ) { var ID : [ ( ( ( ID ID ID ) ) ) ] bool var ID : [ ] [ ] bool } func ID ( ) { }",
  "} ID ( ) { var ID : [ ( ( ( ID ID ID ) ) ) ] bool var ID : [ ] [ ] bool func func ID ( ) { }",
  "} ID ( ) { var } : [ ( ( ( ID ID ID ) ) ) ] bool var ID : [ ] [ ] bool func func ID ( ) { ID",
  "func ID ( ) : [ ] [ ] bool { bool ID : [ ] [ ] var ID ( ) [ ID ] = ( ID ) { } }",
  "func ( ID ) : [ ] [ ] bool { bool ID : [ ] [ ] var ID ( ) [ ID ] = ( ID ) { } }",
  "func ( ID ) : [ ] [ ] bool ] bool ID : [ ] [ { var ID ( ) [ ID ] = ( ID ) { } }",
  "func ID [ ID : int ) : int { var ID : [ ( false * ( true ) / - - ID ) ] [ ] bool var ID : [ ] ( ] [ ] int }",
  "bool ID [ ID : int ) : int { var ID : [ ( false * ( true ) / - - ID ) ] [ ] func var ID : [ ] ( ] [ ] int }",
  "bool ] [ ID : int ) : int { var ID : [ ( false * ( true ) / - - ID ) ] [ ] func var ID : [ ID ( ] [ ] int }",
  "func ID ( ) { var ID : bool - ID : int } func ID ( ID : int ) : int { return var ID }",
  "func ID ( ID { var ID : bool - ) : int } func ID ( ID : int ) : int { return var ID }",
  "func ID ( ID { var ID : bool - ) : { } func ID ( ID : int ) : int int return var ID }",
  "func ID ( ID ( [ ID - - ID ( ) / ID [ - - 123 ] [ - : - - ( true ) ) ] * ID ] bool ) { }",
  "func ID ( ID ( [ ID - - ID ( ) / ID [ - - ) ] [ - : - - ( true 123 ) ] * ID ] bool ) { }",
  "func ID ( ID ( [ ID - - ID ( ) / true [ - - ) ] [ - : - - ( ID 123 ) ] * ID ] bool ) { }",
  "func ID - ID : bool , ID : [ ( ( - true + ( false ) ) ] int , ID : bool ) { } func ID ( ) { }",
  "func ID - ID : bool , ID : [ ) ( - true + ( false ) ) ] int , ID : bool ) { } func ID ( ( { }",
  "func ID - ID : bool , ID : [ ) ( - true + ( false ) { ] int , ID : bool ) { } func ID ( ( ) }",
  "func ID ( ) : bool { var ID : int var ( : bool if - true * ID - ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : ID var ( : bool if - true * int - ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : ID var ( : bool if - true * int - ( ID ) ) { } } } ID ( ) { func",
  "func ID ( ) { var ID : [ - ID [ - ( ID : ) ) ] ] int var ID ( int }",
  "func ID ID ) { var ID : [ - ( [ - ( ID : ) ) ] ] int var ID ( int }",
  "func ID ID ) { var ID [ : - ( [ - ( ID : ) ) ] ] int var ID ( int }",
  "func ID ( ID : [ true and 123 > ID [ false * - ( - ) ID ] and - - - false ] int ) { }",
  "func ID ( ID : [ true and 123 > ID [ false * - ( - ) ID ] and - - - false ] int ) { }",
  "func ID 123 ID : [ true and ( > ID [ false * - ( - ) ID ] and - - - false ] int ) { }",
  "func ID ( bool : int , ID : int , ID : [ ] ID ) { var ID : int return } func ID ( ) { if ID { } }",
  "func ID ( bool : int , ID : int , ID : [ ] ID ) { var ID : int return } func ID ( ) { if ID { } }",
  "func ID ( bool : int , ID : int , ID : [ ] ID ) { var ID : ( return } func ID int ) { if ID { } }",
  "func ID ( ) { print ( ( ID / - false true / ID ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) { print ( ( ID / - call true / ID ) ) false ID ( ) } func ID ( ) { }",
  "func ID ( ( { print ) ( ID / - call true / ID ) ) false ID ( ) } func ID ( ) { }",
  "func ID ( ) { { var ID : int var ID : [ ID [ 123 ] ( - - ID ) - false ] [ - 123 ] - int } } func ID ( ) { }",
  "func ID ( ) { { var ID : int [ ID : [ ID [ 123 ] ( - - ID ) - false ] var - 123 ] - int } } func ID ( ) { }",
  "func ID ( ) { { var ID : int [ ID : [ ID [ 123 ] ( - - ID ) - false ] var - 123 ] - int } } func ID ( ) { }",
  "func ID ( print : bool { var ID : bool while ID ( - 123 * true / ID ) { } ) - ID } func ID ( ) { }",
  "func ID ( print : bool { var ID : bool while ) ( - 123 * true / ID ) { } ) - ID } func ID ( ID { }",
  "func ID ( print : bool { var ID : bool while / ( - 123 * true ) ID ) { } ) - ID } func ID ( ID { }",
  "func ID ( ) : int { var ID : [ ] bool call ID ( ) return - 123 * - true * ( ID } )",
  "func ID ( ) : int { var ID : [ ] bool call ID ( ) return - 123 * - true * ( ID } )",
  ": ID ( ) func int { var ID : [ ] bool call ID ( ) return - 123 * - true * ( ID } )",
  "func ID ( ) { var ID : bool var ID : : } func ID ( ID : bool , ID int [ false * - ID / - false ] bool , ID : [ ] [ ] bool ) { }",
  "func ID ( ) { var : : bool var ID ID : } func ID ( ID : bool , ID int [ false * - ID / - false ] bool , ID : [ ] [ ] bool ) { }",
  "func ID ( ) { var bool : bool var ID ID : } func ID ( ID : : , ID int [ false * - ID / - false ] bool , ID : [ ] [ ] bool ) { }",
  "func ID ( ID : int , ID : int ) : [ ] [ ) false + true / ( ID - * true + ID ] [ ] bool { }",
  "func ID ( [ : int , ID : int ) : ID ] [ ) false + true / ( ID - * true + ID ] [ ] bool { }",
  "func ID ( [ : int , ID : int ) : ID ] [ ) false + true / ( ID ID * true + - ] [ ] bool { }",
  "[ ID ( ) { var ID : [ ( false - ID - ID ( ) ) ] func ] int var ID : int } func ID ( ) { }",
  "[ ID ( ) { var ID : [ ( false - ID - ID ( ) ) ] func var int ] ID : int } func ID ( ) { }",
  "[ ID ( ) func var ID : [ ( false - ID - ID ( ) ) ] { var int ] ID : int } func ID ( ) { }",
  "func false ( ) { print true - ( ID * ID [ - - ID ] [ - ID ] ) }",
  "func false ( ) { print true [ ( ID * ID - - - ID ] [ - ID ] ) }",
  "func false ( ) { print true [ ( ID * ID - - - ID ] [ - ID ] ) }",
  "func ID ( ID : int , ID : [ ] [ - ID [ ( - ID ) ) ] [ ] ( ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : ID ] [ - ID [ ( - [ ) ) ] [ ] ( ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID [ int , ID : ID ] [ - ID : ( - [ ) ) ] [ ] ( ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : } ) : int { return int",
  "func ID ( ID : bool , : : } ) ID int { return int",
  ": ID ( ID : bool , func : } ) ID int { return int",
  "func ID ( ID : [ ID == - - 123 / ( false * 123 * ) ID * true ] [ ] bool ) { }",
  "func ID ( ID : [ ID == - - 123 / ( false * 123 * ) ID * true ] } ] bool ) { [",
  "func ID ( ID : [ ID == - - 123 / ( false * 123 * ) ID * true ] } ] bool ) { [",
  "func ID ( ) { var ID : [ ( } / ( false / - - - ( 123 ) ) ) ] [ ] [ ] [ ] bool var ID : int } func ID ( ) { true",
  "func ID ( ) { var ID : [ ( } / ( false int - - - ( 123 ) ) ) ] [ ] [ ] [ ] bool var ID : / } func ID ( ) { true",
  "func ID ( ) { var ID : [ ( } / ( false int - - true ( 123 ) ) ) ] [ ] [ ] [ ] bool var ID : / } func ID ( ) { -",
  "func [ ( ) { var ID : ID ( ID ( true - ID ) ) ] [ ] [ ] [ ] bool }",
  "func [ ( ) { var ID : ID ( ] ( true - ID ) ) ] [ ] [ ] [ ID bool }",
  "func [ ( ) { var ID ID : ( ] ( true - ID ) ) ] [ ] [ ] [ ID bool }",
  "func = ( ) : int { ID ID true * - - true <= false / - ID print ( 123 ) }",
  "func = ( ) : int { ID ID true * - - true <= false / - print ID ( 123 ) }",
  "func = ( ) : int { ID ID true * ( - true <= false / - print ID - 123 ) }",
  "func ID ( ) 123 int { var ID : bool print : - ( ID [ false ] ) - ID ID = 123 }",
  "func ID ( ) 123 int { ID ID : bool print : - ( var [ false ] ) - ID ID = 123 }",
  "func ID ( ( 123 int { ID ID : bool print : - ) var [ false ] ) - ID ID = 123 }",
  "func } ( ) { var ID : int var ID : bool call ID ( ( ( ( ID ) ) ) ) } func ID ( ) { ID",
  "func } ( ) { var ID : : var ID int bool call ID ( ( ( ( ID ) ) ) ) } func ID ( ) { ID",
  "func } ( ) { var ID : : var ID ( bool call ID int ( ( ( ID ) ) ) ) } func ID ( ) { ID",
  "func ID ( ID : [ ( ID ( - - true + true ) ) ] [ ] [ ] int ) ( } func ID { ) { }",
  "func ID ( ID : [ ( ID ) - - true + true ) ) ] [ ] [ ] int ) ( } func ID { ( { }",
  "func ID ( ID : [ ( ID [ - - true + true ) ) ] ) ] [ ] int ) ( } func ID { ( { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : [ ] [ ] bool { var ID : [ false / false / ID ] [ ] [ ] [ ( bool var ID : bool } func ID ] ) { }",
  "func ID ( ID : bool , ID : bool , ID : : ) : [ ] [ ] bool { var ID : [ false / false / ID ] [ ] [ ] [ ( bool var ID int bool } func ID ] ) { }",
  "func ID ( ID : bool , ID : bool / ID : : ) : [ ] [ ] bool { var ID : [ false / false , ID ] [ ] [ ] [ ( bool var ID int bool } func ID ] ) { }",
  "func ID ( ) : int { var ID : [ ] bool call ID ID ( ( ) [ 123 ] [ true ] ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] { call ID ID ( ( ) [ 123 ] [ true ] ) call ID ( ) } func ID ( ) bool }",
  "func ID ( ) : int { var } : [ ] { call ID ID ( ( ) [ 123 ] [ true ] ) call ID ( ) } func ID ( ) bool ID",
  "func ID ( ID : int , ID : [ ] int , ID int : ) : bool { return }",
  "func ID ( : : int , ID ID [ ] int , ID int : ) : bool { return }",
  "func ID int : : ( , ID ID [ ] int , ID int : ) : bool { return }",
  "func ( ID ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { var ID : int var { : bool } func ID ( ) ID while - ID { } { } }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { var ID : int var { : bool } func } ( ) ID while - ID { } { } ID",
  "ID ID ( ID : bool , ID : int , func : int ) : bool { var ID : int var { : bool } func } ( ) ID while - ID { } { } ID",
  "func ID ( ID : bool , ID : bool ) : [ ] [ ] int { var ID : int while false } ( ID ) { } * func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : [ ] [ ] int { var ID : int while false } ( ID ) { } * func ID ( ) { }",
  "func ID ( ID : [ , ID : bool ) : [ ] bool ] int { var ID : int while false } ( ID ) { } * func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID ] [ ] [ false * ID [ ID : [ false ] / ( ID ) ] int ) { }",
  "func ID ( ID : int , ID : int , ID ] [ ] [ false * ID [ ID : [ false ] / ( int ) ] ID ) { }",
  "func ID ( ID : int , ID : int , { ] [ ] [ false * ID [ ID : [ false ] / ( int ) ] ID ) ID }",
  "{ ID ( ID : [ ] int , ID : bool ) func var ID : bool var ID : int print ID ( ID ) }",
  "{ ID ( ID : [ ] int } ID : bool ) func var ID : bool var ID : int print ID ( ID ) ,",
  "{ ID ( ID : [ ] int } ID : bool ) func var ID : bool int ID : var print ID ( ID ) ,",
  "func ID ( ) : bool { ID ID : bool var var : [ ] bool print true / 123 == 123 }",
  "func ID ( ) : bool { ID ID : bool var var : 123 ] bool print true / 123 == [ }",
  "ID ID ( ) : bool { func ID : bool var var : 123 ] bool print true / 123 == [ }",
  "func ID ( ID : func ) { var ID : bool var ID : int call ID ( ) ID ( ) [ - true ] [ ( 123 ) ] = - ( true ) } bool ID ( ) { }",
  "func ID ( ID : func ) { var ID : bool var ID : int call ID ( ) ID ( ) [ - true ] [ ( 123 ) ] ( - ( true ) } bool ID = ) { }",
  "func ID ( ID : func ) { var ID : bool var ID : int call ID ( ) ID ( ) [ - true ] [ ( 123 ) ] ( - ( = ) } bool ID true ) { }",
  "func ID ( ) : bool { var : ID int return } func ID ( ID : int , ID : int , ID : [ - ( ID ) ] [ ] [ ] bool ) { }",
  "( ID func ID : bool , ID : [ ] bool , ID : bool ) { var ID : bool print 123 * - ID }",
  "( ID func ID : bool , ID : [ bool bool , ID : ] ) { var ID : bool print 123 * - ID }",
  "( ID func ID : bool , ID : [ bool bool , ID : ] ) { var ID : bool print 123 } - ID *",
  "func ID ( ID : bool , , : [ ] bool ID ID : int ) : bool { return }",
  ") ID ( ID : [ ID ( ) + - ID [ true / ID * - ID ] [ - true ] - ( - ID ) ] bool func { } func ID ( ) { }",
  ") ID ( ID : [ ID ( ) + - ID [ true / ID * - ID ] [ - true bool - ( - ID ) ] ] func { } func ID ( ) { }",
  ") ID ( ID : ] ID ( ) + - ID [ true / ID * - ID ] [ - true bool - ( - ID ) ] [ func { } func ID ( ) { }",
  "func ID ( ) : ID { var ID : bool return - true * ID ( ( bool ) ) } func ID ( ) { }",
  ") ID ( ) : ID { var ID : bool return - true * ID ( ( bool ) ) } func ID ( func { }",
  ") ID ( func : ID { var ID : bool return - true * ID ( ( bool ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) { func ID : bool var ID : [ ID ( - ID ) ] bool } var ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) { func ID : bool var ID : [ ID ( - ID ) ] } } var ID ( ) { bool",
  "func ID ( ID : bool , ID : [ ] int ) { func ID : bool ) ID : [ ID ( - ID var ] } } var ID ( ) { bool",
  "func ID ( ID : func ) { var ID : int } int ID ( ) : [ ] [ ( - ID ) ] [ ] int { }",
  "func ID ( ID : func ) { var ID : ( } int ID ( ) : [ ] [ int - ID ) ] [ ] int { }",
  "func ID ( ID : func ) { var ID : ( } int ID ( ) : [ ] [ int - ID ) ] [ ] int { }",
  "func ID ( ) : int { } func ID ( var : int { ) ID : [ ( - 123 ) ] [ ] int var ID : [ ] [ ] int }",
  "func ID ( ) : int { [ func ID ( var : int { ) ID : [ ( - 123 ) ] [ ] int var ID : [ ] } ] int }",
  "func ID ( ) : int { [ func ID ( var : int { ) ID : [ ( - 123 ) ] : ] int var ID [ [ ] } ] int }",
  "func ID ( ID } int ) : bool { var ID : [ ] bool { ID [ - - ID ] [ ID ] = ( ( ID ) ) : while 123 { } } func ID ( ) { }",
  "func ID ( ID } int ) : bool { var ID : [ ] bool { ID [ - } ID ] [ ID ] = ( ( ID ) ) : while 123 { } } func ID ( ) { -",
  "func ID ( ID } int ) : bool { var ID : [ ID bool { ID [ - } ] ] [ ID ] = ( ( ID ) ) : while 123 { } } func ID ( ) { -",
  "func ID ( ID : int , ID : ID , ID : bool ) : bool { var ID : bool call int ( ) return } func ID ( ) { }",
  "func ID ( ID : int , ID : ID , bool : bool ) : bool { var ID : ID call int ( ) return } func ID ( ) { }",
  "func ID ( ID : } ] int ) { var ID : [ ] [ ] bool var ID : bool return - 123 [",
  "func ID ( ID : } ] int ) { var ID : [ ] [ ] bool var ID : bool return - 123 [",
  "func ID ( ) { var ID : bool var ID : ) print - - false / ID ( ( false ) int } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : ) print - - ) / ID ( ( false ) int } func ID ( false { }",
  "func ID ( ) { var ID : bool var ID : ) print - - ) / ID ID ( false ) int } func ( ( false { }",
  "func ID ( ) : [ ] [ ID [ - ( ( - ( ( - ID ) ) ) ) ] ] int { } func false ( ) { }",
  "func ID ( ) : [ ] [ ID [ ( - ( - ( ( - ID ) ) ) ) ] ] int { } func false ( ) { }",
  "func ID ( ) : [ ] [ ID { ( - ( - ( ( - ID ) ) ) ) ] ] int { } func false ( ) [ }",
  "func ID ( ID : int , ID : { ) : int { var ID : int print - ( ( 123 ) ) } func ID ( ) bool }",
  "func ID ( ) : int , ID : { ) : int { var ID : int print - ( ( 123 ) ) } func ID ( ID bool }",
  "func ID ( ) { var ID : bool return ID [ true * - - - - ( ( ( ) ) ) false / ID ] [ ID ] } func ID ( ) { }",
  "func ID ( ) { var ID : bool return ID [ true * - - - { ( ( ( ) ) ) false / ID ] [ ID ] } func ID ( ) - }",
  "func ID ) ) { var ID : bool return ID [ true * - - - { ( ( ( ( ) ) false / ID ] [ ID ] } func ID ( ) - }",
  "func ID ( ID : [ ( ( ( ) - - ( false ) ) ) ) ] [ ] bool 123 { } func ID ( ) { }",
  "func ID ( ID : [ ( ( ( ) - - ( false ID ) ) ) ] [ ] bool 123 { } func ) ( ) { }",
  "func ID ( ID : [ ( ( ( ) - - ( [ ID ) ) ) ] false ] bool 123 { } func ) ( ) { }",
  "func ID int ID : int ) : int { var ID : ( var ID : int { if - - ID { } } }",
  "ID ID int func : int ) : int { var ID : ( var ID : int { if - - ID { } } }",
  "ID ID int func : int ) : int { var ID : ( var ID : int { if - - ID { } } }",
  "func ID ( ID : int , ID : ID ) : bool { return ( ID ( ) / ( ID ) / - ID ) } func int ( ) { }",
  "func ID ( ID : int , ID : ID ) : bool { return ( ID ( ) / ( ID / ) - ID ) } func int ( ) { }",
  "func ID / ID : int , ID : ID ) : bool { return ( ID ( ) / ( ID ( ) - ID ) } func int ( ) { }",
  "func ID ( ID : [ - [ ( - ] ID ( ) [ ID ] [ ( ID ) ] ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ) [ ( - ] ID ( ) [ ID ] [ ( ID ) ] - ] [ ] bool ) { } func ID ( ) { }",
  "func ) ( ID : [ ) [ ( - ] ID ( ID [ ID ] [ ( ID ) ] - ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ] int , ID : int ) : [ ( 123 / true - ( - ( true ) ) ) ] [ { }",
  "func ID ( ID : int , ID : bool ] int , ID : int ) [ [ ( 123 / true - ( - ( true ) ) ) ] : { }",
  "func ID ( ID : int , ID : bool ] int , ID : int ) [ [ ( 123 / true - ( - ( true ) ) ) ] : { }",
  "func ID ( ) { bool { var ID : bool } func ID ( ) : [ ] bool : var ID : int var ID : bool }",
  "func ID : ) { bool { var ID : bool } func ID ( ) : [ ] bool ( var ID : int var ID : bool }",
  "[ ID ( ID : [ ] bool , ID : [ ] func ID [ ID ( true ) ] [ ID ] ] [ ] [ ] bool ) { } func ID ( ) { }",
  "[ ID ( ID : [ ] bool , ID : [ ] func ID [ ID ( true ) ] [ ID ] ] [ ] [ ] bool ) { } func ID ( ) { }",
  "[ ID ( ID } [ ] bool , ID : [ ] func ID [ ID ( true ) ] [ ID ] ] [ ] [ ] bool ) { : func ID ( ) { }",
  "func ID ( ) { print false / - - ID / ID ( ) ID [ ] } func ID ( ) { }",
  "func ID ( false { print ) / - - ID / ID ( ) ID [ ] } func ID ( ) { }",
  ") ID ( false { print func / - - ID / ID ( ) ID [ ] } func ID ( ) { }",
  ": ID ( ID : int ) { var ID : bool var ID func [ ] bool while - ( ID ) { } while ID { } } func ID ( ) { }",
  ": : ( ID : int ) { var ID ID bool var ID func [ ] bool while - ( ID ) { } while ID { } } func ID ( ) { }",
  ": - ( ID : int ) { var ID ID bool var ID func [ ] bool while : ( ID ) { } while ID { } } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : - print - bool ( - ID ( ) ) print ( ID ) }",
  "func ID ( ID : int ) : int { var ID : - print - bool ( - ID ( ) ) print ( ID ) }",
  "func ID ( ID : int ) ( int { var ID : - print - bool ( - ID : ) ) print ( ID ) }",
  "func ID ID ) : bool { return } func ID ( ID : int , ( : int , ID : int ) { while - ID { } while ( ID ) { } }",
  "func ID ID ) : bool { return } func ID ( ID : int , ( : int , ID : int ) { while - ID { } while ( ID ) { } }",
  "func ID ID ) : bool { return } func ID ( ID : int , ID : int , ID : int ) { while - ( { } while ( ID ) { } }",
  "func ID [ ID : int , ID : [ ] int ) { var ID : int var ID : int print - ID ( false ] if - ( ( ( ( ID ) ) ) ) { } }",
  "func ID [ ID : int , ID : [ ] int ) { var ID : if var ID : int print - ID ( false ] int - ( ( ( ( ID ) ) ) ) { } }",
  "func ID [ ID : int , ID : [ ] int ) { var ID : if var ) : int print - ID ( false ] int - ( ( ( ( ID ) ) ID ) { } }",
  "func ID ( ) { var ID : ( ID [ ( - ( false ) ) ) ] bool var ID : bool }",
  "func ID ( ) { var ID : ( ID [ ( - ( false var ) ) ] bool ) ID : bool }",
  "func ID ( ) { var ID : ( ID [ ( - ( false var ) bool ] ) ) ID : bool }",
  "func ID ( ) : int { var ID : int ( - ID ( - - if ( ( 123 ) ) ) ) { } if true { } }",
  "ID ID ( ) : int { var func : int ( - ID ( - - if ( ( 123 ) ) ) ) { } if true { } }",
  "ID ID ( ) : int { var func : int ( - ID ( - - if ( ( 123 ) ) ) ) { } if true { } }",
  "func ID ID ID : bool , ( : bool , ID : [ ] int ) : int { call ID ( - true / ID * ( - true ) ) { } }",
  "bool ID ID ID : bool , ( : func , ID : [ ] int ) : int { call ID ( - true / ID * ( - true ) ) { } }",
  "bool ID ID ID : bool , ) : func , ID : [ ] int ) : int { call ID ( - true / ID * ( - true ) ( { } }",
  "func ID ( ID { var ID : int var ID : bool { var ) : [ ] bool call ID ( - 123 ) { } } if 123 { } } func ID ( ) { }",
  "func ID ( ID { var ID : int var ID : bool { var ) : } ] bool call ID ( - 123 ) { } } if 123 { } } func ID ( ) { [",
  "func ID ( ID { var ID : int var ID : bool { - ) : } ] bool call ID ( var 123 ) { } } if 123 { } } func ID ( ) { [",
  "func ID ( ) : [ ] int { return true and } [ ( 123 ) ] [ 123 ] ID func ID ( ) { }",
  "func ID ( ) : [ ] 123 { return true and } [ ( int ) ] [ 123 ] ID func ID ( ) { }",
  "func ID ( ) : [ ] 123 { return true and } [ ( int ) ] [ 123 ID ] func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool ID [ ( ID [ ID ] [ - - ( - ( - ( ( ( - ID ) ) ) ) ) ] ) ] = - - - - ( } ID ) ) if - ( ID ) { } ( func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool ID [ ( ID [ ID ] [ - - ( - ( - ( ( ( - ID ) ) ) ) ) ] ) ] = - - - - ( } ID ) ) if - ( ID ) { } ( func ID ( ) { }",
  "func ID ( ) { var ID : bool var ) : bool ID [ ( ID [ ID ] [ - - ( - ( - ( ( ( - ID ) ) ) ) ) ] ) ] = - - - - ( } ID ) ) if - ( ID ID { } ( func ID ( ) { }",
  ": ID ( ID func [ ] int , ID : [ 123 * ( 123 / - ID ( ) * ID ) ] [ ] int ) { } func ID ( ) { }",
  ": ID ( ID func [ ] int , ID : [ 123 * ( 123 / - ID ( ) * ID ) int [ ] ] ) { } func ID ( ) { }",
  ": ID ( ID func [ ] int , ID : [ 123 * ( 123 / - ID ( ) * ID ) int [ ] ] ) { } func { ( ) ID }",
  "func bool ( ID : int , ID : int ) : [ ] bool { var ID : ID var ID : int while - - true { } }",
  "func bool ( ID : int , ID : int ) : [ ] bool { var ID : ID var ID : int while - - true { } }",
  "func bool ( ID : int , ID : int ) : [ ] bool { var ID : ID var ID int : while - - true { } }",
  "func ID ( ID ) [ ] [ - ( 123 * - true * - false + ( - ID ) ) ] bool ) { } func ID ( : { }",
  "func ID ( ID ) [ ] [ - ) 123 * - true * - false + ( - ID ) ( ] bool ) { } func ID ( : { }",
  "func ID ( ID ) [ ] [ - ( 123 * - true * - false + ) - ID ) ( ] bool ) { } func ID ( : { }",
  ", ID ( ID : int func ID : bool ) : int { return ( - ( ( true ) ) ) }",
  ", ID ( ID : int func ID : bool ) : int { return ( - ( ) true ) ( ) }",
  ", ID ( ID : int func ID : bool return : int { ) ( - ( ) true ) ( ) }",
  "func ) ( ID { var ID : [ ID [ false * ( ( ID ) ) ] [ ID ] ] bool var ID : int }",
  "func ) ( ID { var ID : [ ID [ false * ( ( ID ) ) ] [ ID ] ] bool var ID : int }",
  "func ) ( ID { var ID : [ ID [ false * ( ( ID ) ) ] [ ID ] ] bool ID var : int }",
  "func ID ( ID : bool , ID : [ - - - ID [ ( ID func ] ] bool , ID : int ) { } ) ID ( ) { }",
  "func ID ( ID : bool , ID : [ - - - ID [ ( ID func ] ] bool , ID : int ) { } ) ID ( ) { }",
  "func ID ( ID : bool , ID : [ - - - ( [ ( ID func ] ] bool , ID : int ) { } ) ID ID ) { }",
  "func ID ( [ : bool , ID : ID ] [ true - 123 and true / ID ( ) * ID and - - - - 123 ] int ) { }",
  "func ID ( [ : bool , ID : ID ] [ true - 123 and true / ID ( ) * ID 123 - - - - and ] int ) { }",
  "func ID ( [ : bool , ID : ID ] [ true - 123 ) true / ID ( and * ID 123 - - - - and ] int ) { }",
  "func ID ( ID : [ ] ) , ID : int ) : bool { var ID : int var ID : int ID [ - ( - ID ) ] = ( ( ( ID int ) ) print ( false ) }",
  "func ID ( ID : [ ] ) , ID : int ) : bool { var ID : int var ID : int ID [ - ( - ID ) ] = ( ( ( ID int ) ) print ( false ) }",
  "func ID ( ID : [ ] ) , ID : int ) : bool { var ID : int ID ID : int ID [ - ( - var ) ] = ( ( ( ID int ) ) print ( false ) }",
  "func ID ( ID : bool , ID : int ) : [ ] bool { var ID : bool var ID : int ID ( ) [ ID ] = false if ( - ( - ID ) { } } func ID - ) { }",
  "func ID ( ID : bool , ID : int ) : [ ] ID { var bool : bool var ID : int ID ( ) [ ID ] = false if ( - ( - ID ) { } } func ID - ) { }",
  "func ID ( ID : bool , ID : int ) : [ ] ID { var bool : bool var ID : ID ID ( ) [ ID ] = false if ( - ( - int ) { } } func ID - ) { }",
  "func ID ) ) { var ID : int return ID - - - ( false + ( true ) ) } func ID ( ( { }",
  "func ID ) ) { var ID : int ) ID - - - ( false + ( true ) return } func ID ( ( { }",
  "func ID ) ) { - ID : int ) ID - - var ( false + ( true ) return } func ID ( ( { }",
  "func ) ( ID : [ - ( ( false / ID ( - - ID ) ) ) ] bool ) { } func ID ( ID { }",
  "func ) ( ID : [ - ( ( false / ID ( - - { ) ) ) ] bool ) ID } func ID ( ID { }",
  "func ) ( ID : [ - ( ( false / ID ( - - { ) ) ) ( bool ) ID } func ID ] ID { }",
  "func ID ( ID : int , ID : [ - ( 123 + ID ( - ID ) ) ] int , ID : [ ] { ) { } func ID ( ) int }",
  "func ID ( ID : int , ID ) [ - ( 123 + ID ( - ID ) ) ] int , ID : [ ] { ) { } func ID ( : int }",
  "func ID ( ID : int ID ID ) [ - ( 123 + ID ( - ID ) ) ] int , ID : [ ] { ) { } func , ( : int }",
  "func ID ( ID : int ) { var ID [ : ] int if ( ID ( ) [ - - ( ID ) ] ) { } }",
  "func ID ( ID : int ) { ) ID [ : ] int if ( ID ( var [ - - ( ID ) ] ) { } }",
  "func ID ( ID : int ) { - ID [ : ] int if ( ID ( var [ - ) ( ID ) ] ) { } }",
  "func ID ( ) { ID var : int var ID : int print ( ( - ID [ false ] [ - false ] ) ) } func ID ( ) { }",
  "func ID ( ) { ID var : int var ID : int print ( ( - ID [ false ] [ - false ] ) ) func } ID ( ) { }",
  "func ID false ) { ID var : int var ID : int print ( ( - ID [ ( ] [ - false ] ) ) func } ID ( ) { }",
  "func ID ( ID : [ ] bool ) : int { call - ( true + - ID ( ) [ ID ] ID ID ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) ID int { call - ( true + - ID ( ) [ : ] ID ID ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) ID int { call - ( true + - ID ( ) ) : ] ID ID ) } func ID ( [ { }",
  "func ID ( ) : [ false ID - 123 - 123 / ID ( ) [ - ( ( ( true ) ) ) ] / ID - - - ( / ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : [ bool ID - 123 - 123 / ID ( ) [ - ( ( ( true ) ) ) ] / ID - - - ( / ) ] [ ] false { } func ID ( ) { }",
  "func ID ( ) : [ bool ID - 123 { 123 / ID ( ) [ - ( ( ( true ) ) ) ] / ID - - - ( / ) ] [ ] false { } func ID ( ) - }",
  "func ID ( ) : [ ] [ ( - - ID / ( ID ( ) ) * ID bool ] ) { } func ID ( ) { }",
  "func ID ) ) : [ ] [ ( - - ID / ( ID ( ) ) * ID bool ] ) { } func ID ( ( { }",
  "( ID ) ) : [ ] [ ( - - ID / ( ID func ) ) * ID bool ] ) { } func ID ( ( { }",
  "func ID ( - : [ ( - - 123 * 123 / ID ( ) [ ID true ] ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( - : [ ( - - 123 * 123 / ID ( ) [ ID true ] } ] [ ] bool ) { } func ID ( ) { )",
  "func ID ( / : [ ( - - 123 * 123 - ID ( ) [ ID true ] } ] [ ] bool ) { } func ID ( ) { )",
  "func ID ( ) { { } ID : [ ] int var ID : bool var ID = ( ID ) }",
  "func ID ( ) { { } ID : [ ] int var ID : bool var ID = ( ID ) }",
  "func ID ( ) : int { call ID ) - false * ( ( ( - true ( ) ) ) }",
  "func ID - ) : int { call ID ) ( false * ( ( ( - true ( ) ) ) }",
  "func ID ( ID : [ ID ( ) * ( ( 123 / ( ( false ) ( * ID ) ) ] int ) { } func ID ) ) { }",
  "func ID int ID : [ ID ( ) * ( ( 123 / ( ( false ) ( * ID ) ) ] ( ) { } func ID ) ) { }",
  "func ID int ID : [ ID ( ) * ( ( 123 / ( ) false ) ( * ID ( ) ] ( ) { } func ID ) ) { }",
  "func } ( ) : [ ] int { { return ID ID ( ) = ( ID ) } func ID ( ) { }",
  "func } ( ) : [ ] int { { return ID ID ( ) = ( ID ) } func ID ( ) { }",
  "func return ( ) : [ ] int { { } ID ID ( ) = ( ID ) } func ID ( ) { }",
  "bool ID ( ) { var ID : func var ID : int ID ( - ID [ ID ] ) = true }",
  "bool ID ( ) { = ID : func var ID : int ID ( - ID [ ID ] ) var true }",
  "{ ID ( ) bool = ID : func var ID : int ID ( - ID [ ID ] ) var true }",
  "func ID ( ) : [ while int { ] ( ID and - ID [ ID ] and ( - ID ) ) { } }",
  "func ID ( ) : [ while int ID ] ( ID and - ID [ { ] and ( - ID ) ) { } }",
  "func ID ( ) : ID while int ID ] ( ID and - ID [ { ] and ( - [ ) ) { } }",
  "func ID ( ID : bool , ID : [ ] [ ( 123 / ID bool ID ] [ ( ( false ) ) ] * 123 ) ] int , ID : [ ) { } func ID ( ) { }",
  "func ID ( ID [ bool , ID : : ] [ ( 123 / ID bool ID ] [ ( ( false ) ) ] * 123 ) ] int , ID : [ ) { } func ID ( ) { }",
  "func ID ( ID [ bool , ID : : ] [ ( 123 } ID bool ID ] [ ( ( false ) ) ] * 123 ) ] int , ID : [ ) { } func ID ( ) { /",
  "func ID ( ) var bool { : ID : int } func ID ( ) { return }",
  "func ID ( : var bool { ) ID : int } func ID ( ) { return }",
  "func ID ( : var bool } ) ID : int { func ID ( ) { return }",
  "func ID ( ) { var ID : int var ID : [ false * ID false - - false * ID * true ] int } func - ( ) { }",
  "func ID ( ) { var ID : int var ID : [ false true ID false - - false * ID * * ] int } func - ( ) { }",
  "func : ( ) { var ID : int var ID ID [ false true ID false - - false * ID * * ] int } func - ( ) { }",
  "func ID ( ) : } { return bool",
  "func ID ( { : } ) return bool",
  "func ID ( ) { int ID : [ ] var var ID : int }",
  "func ID ( ) { int int : [ ] var var ID : ID }",
  "func ID ( ] { int int : [ ) var var ID : ID }",
  "func ID ( ) { ] ID : bool var ID : [ ( ID [ - - ID ] ) var bool }",
  "func ID ( ) { ] ID : bool [ ID : var ( ID [ - - ID ] ) var bool }",
  "func ID ( ID { ] ID : bool [ ID : var ( ) [ - - ID ] ) var bool }",
  "func ID ( ] : [ ] [ - ID ( - - ( ID ( ) ) ) ) int { } func ID ( ) { }",
  "func ID ( ] : [ ] [ { ID ( - - ( ID ( ) ) ) ) int { } func ID ( ) - }",
  "func ID ( ] : [ ] [ { ID ( - - ( ID ( ) ) ) ) int { } func ID ( ) - }",
  "func ID ( ID : bool , ID : [ ] [ ] int , ID : [ ] [ 123 * ( ( ID - ( - ( ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ID , : [ ] [ ] int , ID : [ ] [ 123 * ( ( ID - ( - ( ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ID , : [ ] [ ] int , * : [ ] [ 123 ID ( ( ID - ( - ( ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : true , ID : [ ] [ - ID ( ) / bool * ID ( ID ) ] bool , ID : int ) { }",
  "func ID ( ID : true { ID : [ ] [ - ID ( ) / bool * ID ( ID ) ] bool , ID : int ) , }",
  "func ID ( ID : true { [ : ID ] [ - ID ( ) / bool * ID ( ID ) ] bool , ID : int ) , }",
  "func ID ( ID } int ) : bool { var ID : [ 123 / - - true / ID ( ( true ) ) ] bool } func ID ( ) { :",
  "func ID ( ID } int : ) bool { var ID : [ 123 / - - true / ID ( ( true ) ) ] bool } func ID ( ) { :",
  "var ID ( ID : bool ) { var ID : int { func ID : [ ] [ 123 * ID ( ) * 123 ] bool var ID : [ ] bool } if ID { } }",
  "] ID ( ID : bool ) { var ID : int { func ID : [ var [ 123 * ID ( ) * 123 ] bool var ID : [ ] bool } if ID { } }",
  "] ID ( ID : bool ) { } ID : int { func ID : [ var [ 123 * ID ( ) * 123 ] bool var ID : [ ] bool } if ID { } var",
  "func ID ( ID : int ) : [ } ( ) + false + ( 123 * - ( - ( - 123 ) ) ) ] int { } func ID ( ) { ID",
  "func ID ( ID : + ) : [ } ( ) + false int ( 123 * - ( - ( - 123 ) ) ) ] int { } func ID ( ) { ID",
  "func ID ( ID : + ) : [ } ( ) + false int ( 123 * - { - ( - 123 ) ) ) ] int { } func ID ( ) ( ID",
  "func ID ( ID : int ) } bool { var ID : [ - - 123 / - - ( false ) ] int :",
  "func - ( ) { var ID : int var ID : int print - false * ( - - ID ID ) while ID { } }",
  "func - ( ) { var ID : int var ID ) int print - false * ( - - ID ID : while ID { } }",
  "func - - ) { var ID : int var ID ) int print ( false * ( - - ID ID : while ID { } }",
  "func ID ( ) { ( func ID } ID : [ ] bool , ID : [ ] int ) { call ID ( ( true ) ) }",
  "func ID ( ) { ( func ID } ID call [ ] bool , ID : [ ] int ) { : ID ( ( true ) ) }",
  "func ID ( ) { ( func ID } ID call : ] bool , ID : [ ] int ) { [ ID ( ( true ) ) }",
  "func ID ( ) { if } ( ( ID [ ID ] ) ) { } } func ID ( ) { -",
  "func ID ( ) { if } ( ( ID [ ID ] ) ) { } } ID func ( ) { -",
  "func ID ( ) { if } ( ( ID ID [ ] ) ) { } } ID func ( ) { -",
  "func ID ( ) { var ID : [ ] [ ( ID [ - ( - ( - var - ID ) ) ) ] [ - - ID ] ) ] bool ( ID : [ ] [ ] int }",
  "func ID ( ) { var - : [ ] [ ( ID [ - ( ID ( - var - ID ) ) ) ] [ - - ID ] ) ] bool ( ID : [ ] [ ] int }",
  "func ID ( ) { var ID : [ ] [ ( ID [ - ( ID ( - var - - ) ) ) ] [ - - ID ] ) ] bool ( ID : [ ] [ ] int }",
  "ID ID ( ) : bool { var ID : [ 123 * ( 123 / false / - ID ) * false ] int var func : [ ] bool } func ID ( ) { }",
  "ID ID ( ) : bool { var ID : [ 123 * ( 123 / false / - ID ) var false ] int * func : [ ] bool } func ID ( ) { }",
  "ID ID ( ) : bool { var ID : [ 123 * ( 123 * false / - ID ) var false ] int / func : [ ] bool } func ID ( ) { }",
  "func ID { ) : int ( while ( ID ( - ( - ( ID ) ) ) ) { } }",
  "func ID { ) : int } while ( ID ( - ( - ( ID ) ) ) ) { ( }",
  "func ID ( ) : int } while ( ID ( - ( - ( ID ) ) ) ) { { }",
  "func ID ( ) : int { ( ( ( true and ( - ( ( ID ) ) ) and return ( ID ) ) ) ) } func ID ( ) { }",
  "func ID ( ) : int { ( ( ( true and ( - ( ( ID ) ) ) and return ID ( ) ) ) ) } func ID ( ) { }",
  "func ID ( ) ( int { ( ( ( true and ( - ( ( ID ) ) ) and return ID ( ) ) ) ) } func ID : ) { }",
  "func ID var ID : int ) { ( ID : bool }",
  "func ID ID ID : int ) { ( var : bool }",
  "func } ( ) : [ - ( - ID / ( true - ID - - ID ) / - ID ) ] bool { ID",
  "func } ( ) : [ - ( - ID / ( true - - ID - ID ) / - ID ) ] bool { ID",
  "func } ( ) : [ - ( - / / ( true - - ID - ID ) ID - ID ) ] bool { ID",
  "func ID ( ) { var ID : ( ID ( ) [ false / - - ( 123 ) ] ] int } func ID [ ) { }",
  "func ID - ) { var ID : ( ID ( ) [ false / ( - ( 123 ) ] ] int } func ID [ ) { }",
  "} ID - ) { var ID : ( ID ( ) [ false / ( - ( 123 ) ] ] int func func ID [ ) { }",
  "func ID ( ID : [ ] bool , ID : [ ( ID / ID ( ) [ ID ] [ false ] ) [ bool , ID : ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ( ID / ID ( ) [ ID ] [ false ] ) [ bool , ID : ] ] bool ) { } func ID } ) { (",
  "func ID ] ) { var ID : [ false and ( ( ID ( ) ) ) ] [ ( int var ID : bool } func ID ( ) { }",
  "func ID ] ) { var ID : [ ) and ( ( ID ( ) ) ) ] [ ( int var ID : bool } func ID ( false { }",
  "func ID ] ) { ( ID : [ ) and var ( ID ( ) ) ) ] [ ( int var ID : bool } func ID ( false { }",
  "ID ID ( ) { } func ID ( ) : [ ] int { var func : bool var ID : bool while ID { } }",
  "ID ID ( ) { } func ID ( ) : [ ] int { var func : bool var ID : bool while ID { } }",
  "ID ID ( ) bool } func ID ( ) : [ ] int { var func : { var ID : bool while ID { } }",
  "func bool ( ID : int , ID : int ) : int { var ID : bool var ID : bool return } func ID ( ) { var ID : ID }",
  "func bool ( ID : int , ID : int ) : int { var ID : bool var ID : bool return } func ID ( ) { var ID : ID }",
  "func bool ( ID : int , ID : int ) : int { var ID : bool var ID : bool return } func ID ( ) { var ID : ID }",
  "func ID ( ID : int , ID : bool , ID : int ) { - ID ( call - ( false ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { - ID ( call - false ( ) ) } func ID ( ) { }",
  "func ID : ID ( int , ID : bool , ID : int ) { - ID ( call - false ( ) ) } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ID ( ( false / false ( ) * true ) ) ] int var ID : [ ] [ ] [ ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ID ( ( false / false ( ) * true ) ) ] int var ID : [ ] [ ] [ ] [ ] [ ] int } { ID ( ) func }",
  "func ID ( ID : int ) { var ID : [ ID ( ( false / false ( ) * true ) ) ( int var ID : [ ] [ ] [ ] [ ] [ ] int } { ID ] ) func }",
  "func ID ( ID : int , ID - [ ID ( 123 != false * ( - : true ) ) ] int ) { }",
  "func ID ( ID : int , ID - [ ID ( { != false * ( - : true ) ) ] int ) 123 }",
  "func * ( ID : int , ID - [ ID ( { != false ID ( - : true ) ) ] int ) 123 }",
  "func ID ( ID : [ ID ( ) [ [ ID true + ID ] ] [ true ] ] int ) { }",
  "ID ID ( func : [ ID ( ) [ [ ID true + ID ] ] [ true ] ] int ) { }",
  "func ID ( ) : true ] [ ] [ true * - ( 123 / true - ( ID ) ) * - ( [ ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : true ] [ ] [ true * ( - 123 / true - ( ID ) ) * - ( [ ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : - ] [ ] [ true * ( - 123 / true true ( ID ) ) * - ( [ ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : [ bool ] { var ID : bool return }",
  "func ID ( ) : : bool ] { var ID [ bool return }",
  "{ ID ( ) : : bool ] func var ID [ bool return }",
  "func ID ( ID ID [ ID [ ( : [ ID ] ) ] [ true ] ] bool ) { }",
  "func ID ( ID ID [ ID [ ( : [ ID ] ) ] [ true ] { bool ) ] }",
  "func ID ( ID ID [ [ [ ( : [ ID ] ) ] ID true ] { bool ) ] }",
  "func ID ( ) { var ID : bool } func ID ( ID ) int , ID : int , ID : [ ( ( ( 123 : ) ) ] int ) { }",
  "func { ( ) { var ID : bool } func ID ( ID ) int , ID : int , ID : [ ( ( ( 123 : ) ) ] int ) ID }",
  "func { ( ) { var ID : bool } func ID ( ID ) int , ID : int , ID : [ ( ( ( 123 : ) ) ] int ) ID }",
  "func ID ( ID ID int , : : int ) { ID ( 123 / - - true / ID ) = - ID } func ID ( ) { }",
  "func ID ID ID ID int , : : int ) { ID ( 123 / - - true / ( ) = - ID } func ID ( ) { }",
  "func ID ( ) { if true * ID [ ID - false * false * ID ] * ( ID ) { } while ID { } } func true ( ) { }",
  "func ID ( ) { if true * ID [ ID } false * false * ID ] * ( ID ) { - while ID { } } func true ( ) { }",
  "func ID ( ) { if true * ID [ ID } false * false * } ] * ( ID ) { - while ID { } } func true ( ) { ID",
  "func ID ( ) : bool { var ID : int print - 123 >= true and 123 < ID ID ID call and ( ) } func ID ( ) { }",
  "- ID ( ) : bool { var ID : int print func 123 >= true and 123 < ID ID ID call and ( ) } func ID ( ) { }",
  "- ID ( ) : bool { var ID and int print func 123 >= true and 123 < ID ID ID call : ( ) } func ID ( ) { }",
  "func ID ( ) { if ( false * ] ( ) [ ID ( ) ID [ ID ] ) { } } func ID ( ) { }",
  "func ID ( ) { if ( false * ] ( ) [ ID ( ) ID [ ID ] ) { ID } func } ( ) { }",
  "func ID ( ) { - ID : int return true * var - - ( ( ID ) ) }",
  "func ID ( ) { - ID : int return true * var - - ( ( ID ) ) }",
  "func ID ( ) { - - : int return true * var ID - ( ( ID ) ) }",
  "func ID ( ) : [ true ] ID [ ID [ false / ID ] [ false - ] [ true ] + - false ] bool { }",
  "func ID ( - : [ true ] ID [ ID [ false / ID ] [ false ) ] [ true ] + - false ] bool { }",
  "func ID ( - : [ true ] ID [ ID [ false / ID ] [ false - ] [ true ] + ) false ] bool { }",
  "func ID ( ) : bool { ID = ( - ID ( false / ( - - ( true ) * ) - false ) ) }",
  "func ID ( ) : bool { ID = ( - ID ( false / ( - - ( true ) } ) - false ) ) *",
  "func ID ( ID : int ) : int { var ID : : ID / 123 / - - ID ( ) ] int var ID [ int } func ID ( ) { }",
  "func ID ( = { var ID : bool ID [ ID [ 123 * ID ( ) ] ] [ ID ] ) - 123 ID = ( ( ( false ) ) ) } func ID ( ) { }",
  "func ID ( = { var ID : bool ID [ ID [ 123 * ID ( ) ] ] [ ID ] ) - 123 ID = ( ( ( false ) ) ) } func ID ( ) { }",
  "func ID ( = { var ID : bool ID [ ID [ { * ID ( ) ] ] [ ID ] ) - 123 ID = ( ( ( false ) ) ) } func ID ( ) 123 }",
  "func ID ( ) { if ( 123 [ ID + false * ID / ( ID ) ] + true ) { } call ID ( ) }",
  "func ID ( ) { if ( 123 [ ID + false * ID / ( ID ) ] + true ) { } ) ID ( call }",
  "func ID ( ) { if true 123 [ ID + false * ID / ( ID ) ] + ( ) { } ) ID ( call }",
  "func ID ( ID : [ - true - true / ( - ID [ - - true ] [ - ID ] ) ] [ ] [ ] [ ] int func { } ) ID ( ) { }",
  "func ID ( ID : [ - true - true / ( - ID [ - - true ] ( - ID ] ) ] [ ] [ ] [ ] int func { } ) ID [ ) { }",
  "func ID ( ID : [ ) true - true / ( - ID [ - - true ] ( - ID ] ) ] [ ] [ ] [ ] int func { } - ID [ ) { }",
  "func ID ( ID : ID ) { var ID : [ ] [ false * ( bool ( ) ) / ( ( ID ) ) ] int } func ID ( ) { }",
  "func ID ( ID : ID ) { var ID : ID ] [ false * ( bool ( ) ) / ( ( ID ) ) ] int } func [ ( ) { }",
  "func ID ( ID : [ - false * ( ID ( ID [ false ] [ ( - ( ( 123 ) ) ) ] ) ) / ( ( ( true ) ) ) ] [ func bool ) { } ] ID ( ) { }",
  "func ID ( ID : [ - false * ( ID ( ID [ false ] [ ( - ( ( 123 ) ) ] ) ) ) / ( ( ( true ) ) ) ] [ func bool ) { } ] ID ( ) { }",
  "func ID ( ID : [ - false * ( ID ( ID [ false ] [ ( - ( ( 123 ) ) ] ) ) ) / ( ( ( true ) ) ) ] [ func bool ) { } ] ID ( ) { }",
  "func ID var ) { ( ID : int var ID : int { while 123 * ID [ ID ] { } } ID = - ID }",
  "func ID var ) { ( ID : int var ID : int * while 123 { ID [ ID ] { } } ID = - ID }",
  "func ID var ) { ( ID : int ID ID : int * while 123 { var [ ID ] { } } ID = - ID }",
  "func ID ( ID int int , ID : [ ] int , ID : bool ) : : { }",
  "ID ID ( ID int int , func : [ ] int , ID : bool ) : : { }",
  "ID ID ( ID int int , func : [ ] int , ID : { ) : : bool }",
  "func ID ( ID : int , ID : [ ( - 123 / true + ( ID ) } ID ) ] int ) { +",
  "+ ID ( ID : int , ID : [ ( - 123 / true + ( ID ) } ID ) ] int ) { func",
  "+ ID ( ID : int , ID : [ ( - 123 } true + ( ID ) / ID ) ] int ) { func",
  "func ID ( ID : int , ID : + ID [ 123 [ - - ID [ - ( true ) ] [ ID ] - false ] [ ID ] ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : } , ID : + ID [ 123 [ - - ID [ - ( true ) ] [ ID ] - false ] [ ID ] ] [ ] int ) { int func ID ( ) { }",
  "func ID ( ID : } , ID : + ID [ 123 [ - - ID [ - ( true ) ] [ ID ] - false ] [ ID int ] [ ] ] ) { int func ID ( ) { }",
  "func ID ( ID : int , ID : [ ( ID ( ) [ - { / ( - - ID ) ] ) ] [ ] bool ) { } func ID ( ) false }",
  "func ID ( ID : int , ID ) [ ( ID ( ) [ - { / ( - - ID : ] ) ] [ ] bool ) { } func ID ( ) false }",
  "func ID ( ID : int , ID ) [ ( ID ( ) [ - { / ( - - ID : ] ) ] [ ] bool ) { } func ( ID ) false }",
  "func ID [ ID : int , ID : ( - - ID ( ) * ( ID ( ID ) ) / - - false ] bool ) { }",
  "func ID [ ID : int , ID : ) - - ID ( ) * ( ID ( ID ) ) / - - false ] bool ( { }",
  "func ID [ ID : int , ID : ) ) - ID ( ) * ( ID ( ID ) - / - - false ] bool ( { }",
  "func ID ( ID : bool , ID * int ) : [ true : true > ID [ ( ID ) ] [ - ( ID ) ] ] int { }",
  "func ID ( ID : bool , ID * int ) : [ true : true > ID [ ( ID ) ( [ - ] ID ) ] ] int { }",
  "func ID ( ID : ] , ID * int ) : [ true : true > ID [ ( ID ) ( [ - ] ID ) bool ] int { }",
  "func ID ( ID : bool * ID : [ ( true , ( true * - false ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool * ID true [ ( : , ( true * - false ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ( ID true [ ( : , * true * - false ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] int { while ( ( 123 / ( - false ) ) ) { } } func ID { ) ( }",
  "func ID ( ) : [ ] int ( while ( ( 123 / { - false ) ) ) { } } func ID { ) ( }",
  "func ID ( ) : [ ] int ( while ( ( 123 / { - false ) { ) { } } func ID ) ) ( }",
  "func ID ( ) { var ID : bool ID [ - ID ( ) } ( ( 123 ) ) ] ] [ - - - false ] = - true [",
  "func ID ( ) { var ID : - ID [ - ID ( ) } ( ( 123 ) ) ] ] [ - - bool false ] = - true [",
  "func ID ( ) { var ID : - ID [ - ID ( ) } ( ( bool ) ) ] ] [ - - 123 false ] = - true [",
  "var ID ( ID : int ) { func ID : int var ID : bool return }",
  "var ID ( ID : int ) return func ID : int var ID : bool { }",
  "var ID ( : : int ) return func ID ID int var ID : bool { }",
  "func ID ( ID } [ ] int , ID : [ - true > 123 * ( - ID ) ] int ) { : func ID ( ) { }",
  "func ID ( ID } [ ] int , ID : [ - true > 123 * ( - ID : ] int ) { ) func ID ( ) { }",
  "func ID ID ( } [ ] int , ID : [ - true > 123 * ( - ID : ] int ) { ) func ID ( ) { }",
  "func ID ( ) { while ID ( 123 * ( ID ( ) ) / - ) - ( ( ( ID - ) ) ) { } call ID ( ) }",
  "func ID ( ID : int , ID : bool - { var ID : [ ] [ ] int var ID : int if true / true / ) ID { } while true { } }",
  "} ID ( ID : int , ID : bool - { var ID : [ ] [ ] int var ID : int if true / true / ) ID { } while true { } func",
  "} ID ( ID : int , ID : bool - { var ID : [ ] } ] int var ID : int if true / true / ) ID { } while true { [ func",
  "int ID ( ID : bool , ID : func , ID : [ - ( ID ( ID ) ) ] bool ) { }",
  "int ID ( ID ( bool , ID : func , ID : [ - : ID ( ID ) ) ] bool ) { }",
  "int ID ( ID ( bool , ID : func , ID : [ - : ID ( ID ) ) ] bool ) { }",
  ") ID ( ID : [ ] bool func : [ false * ( ID / ( ( ( ID ) ) ) ) ] bool { }",
  ") ID ( ID : [ ] bool func : [ ) * ( ID / ( ( ( ID ) ) ) false ] bool { }",
  ") ID ( false : [ ] bool func : [ ) * ( ID / ( ( ( ID ) ) ) ID ] bool { }",
  "func ID ( ID } bool ) : int { print 123 / ( ID [ - ( ( false ) ) ] ) / false : func ID ( ) { }",
  "func ID ( ID } bool { : int ) print 123 / ( ID [ - ( ( false ) ) ] ) / false : func ID ( ) { }",
  "func func ( ID : int , ID : int ) : int { var ID : int var ID : int while ID [ ID ] { } { } } ID ID ( ) { }",
  "func func ( ID : int , ID : int ) : { { var ID : int var ID : int while ID [ ID ] { } { } } ID ID ( ) int }",
  "{ func ( ID : int , ID : int ) : func { var ID : int var ID : int while ID [ ID ] { } { } } ID ID ( ) int }",
  "func ID ( / { var ID : bool var ID : [ ] bool if 123 - false ) ( - - - ( ( true ) ) ) - ID { } print false }",
  "func ID ( / { var ID : bool var ID : [ ] bool if 123 - false ) ( - - - ( ( true ) ) ) - ID { } print false }",
  "[ ID ( ID : func ( ( - ( ID ( - ( 123 ) ) ) ) ) ] bool ) { } func ID ( ) { }",
  "[ ID ( ID func func ( ( - ( ID ( - ( 123 ) ) ) ) ) ] bool ) { } : ID ( ) { }",
  "[ ID ( ID func func ( ( - ( ID ) - ( 123 ) ) ) ) ) ] bool ( { } : ID ( ) { }",
  "func ID ) ) { var ID : int while false + ( ( ( ID ( ) ) + - - false { } call ID ( ) } func ID ( ) { }",
  "func ID ) ) { var ID : int while false + ( ( ( ID ( ) ) + - - false } } call ID ( ) { func ID ( ) { }",
  "func ID ) ) { var ID : int } false + ( ( ( ID ( ) ) + - - false } while call ID ( ) { func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int } func ID ( ID : } , ID : int ) { var ID : [ ] int var ID : bool bool",
  "func ID ( ) { var ID : bool var ID : int } func ID ( ID : [ , ID : int ) { var ID : } ] int var ID : bool bool",
  "func ID ( ) { var ID : bool var ID : int } func ID ( ID : [ , ID : int ) { var ID : } ] int var ID : bool bool",
  "func ID ( ID : [ bool int ) : bool { var ID : [ ID [ ( ( ID ) ) ] [ - ID ] ] ] var ID : bool } func ID ( ) { }",
  "func ID ( ID : [ bool int ) : bool { var ID : [ ID [ ( ( ID ) ) ] [ - ID ] { ] var ID : bool } func ID ( ) ] }",
  "func ID ( ID : : bool int ) : bool { var ID [ [ ID [ ( ( ID ) ) ] [ - ID ] { ] var ID : bool } func ID ( ) ] }",
  "func ID ( ID : [ ] [ ( [ 123 / ( ID * false / - true ) / ( ( ] true ) ) ) ] bool ) { }",
  "func ID ( ID ) [ ] [ ( [ 123 / ( ID * false / - true : / ( ( ] true ) ) ) ] bool ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : bool while var ID : int var ID : bool { - ( - ID ) { } call ID ( ) }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : bool while var ID : int var ID : bool { - ( - ID ) { } call ID ( ) }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : bool int var ID : while var ID : bool { - ( - ID ) { } call ID ( ) }",
  "func ID ( ) { return + 123 ID != ID ( ) [ - - ( ID ) ] } func ID ( ) { }",
  "func ID [ ) { return + 123 ID != ID ( ) ( - - ( ID ) ] } func ID ( ) { }",
  "func ID [ ) { return + 123 ID != ID ( ) ( ID - ( ID ) ] } func - ( ) { }",
  "func ID ( ID : [ ] int , ID : ( ) { var ID : bool var ID : int if bool ( - - false ) ) { } print ID } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : ( ) { var ID : bool var ID } int if bool ( - - false ) ) { : print ID } func ID ( ) { }",
  "func ID false ID : [ ] int , ID : ( ) { var ID : bool var ID } int if bool ( - - ( ) ) { : print ID } func ID ( ) { }",
  "func ID ( ) { var ID : : ] [ ] bool var ID [ int return }",
  "ID func ( ) { var ID : : ] [ ] bool var ID [ int return }",
  "ID func ( ) { var ID : : ] var ] bool [ ID [ int return }",
  "func ID ( - : [ - - ID ID ( - ( true + false - - ( ID ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( - : [ ( - ID ID ( - ( true + false - - ( ID ) ) ) ] bool ) { } func ID - ) { }",
  "func ID ( - : [ ( - ID ID ( - ( true + ) - - ( ID ) ) ) ] bool ) { } func ID - false { }",
  "func ID ( ID : 123 ) { print - ID ( ( - 123 * - - ( - int ) * ID ) ) { } }",
  "func ID ( ID : ) ) { print - ID ( ( - 123 * - - ( - int ) * ID ) 123 { } }",
  "func ID ( ID ) ) : { print - ID ( ( - 123 * - - ( - int ) * ID ) 123 { } }",
  "func ID ( ID : bool ) : ) - ID ( ( - ID [ - 123 ] [ ID ] [ ) ] int { }",
  "func ID ( ID : bool ) : ) - ID ( ( - ID [ - 123 ] int ID ] [ ) ] [ { }",
  "func - ( ID : bool ) : ) ID ID ( ( - ID [ - 123 ] int ID ] [ ) ] [ { }",
  "func ID false ID : int , ID : int ) { print false and ID + - ID and - false ID = ( }",
  "func ID false ID : int , ID : int ) false print { and ID + - ID and - false ID = ( }",
  "func ID ( ) : [ } int { var ID : int ]",
  "func : ( ) : [ } int { var ID ID int ]",
  "func : ID ) : [ } int { var ( ID int ]",
  "func ID ( ID : ID 123 * ID [ ID - 123 and - - [ ] [ 123 ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : ID 123 * ID [ ID - 123 and - - [ ] [ ] 123 ] bool ) { } func ID ( ) { }",
  "func ID ( ID : ID 123 * ID [ ID - 123 and - - [ ] [ ( 123 ] bool ) { } func ID ] ) { }",
  "func ID ( ) - int { if false * ( ( ( : true ) ) ) { } { } } func ID ( ) { }",
  "func ID ( ) - int { if false * ( ( ( : true ) { ) { } { } } func ID ( ) ) }",
  "func ID ( ) true int { if false * ( ( ( : - ) { ) { } { } } func ID ( ) ) }",
  "ID ID ( ) : bool { var ID : int { var ID : bool print - false * - true / 123 call func ( ) } ID = true }",
  "ID ID ( ) : bool { var ID : int { var ID : bool print true false * - true / 123 call func ( ) } ID = - }",
  "ID ID ( ) : bool / var ID : int { var ID : bool print true false * - true { 123 call func ( ) } ID = - }",
  "func ID ( ID : bool , ID : bool , ID : [ ID ( ) [ true + 123 + ( - ] - ID ) ) ] [ - false ] ( [ ] [ ] int ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ID ( ) [ true + - + ( - ] - ID ) ) ] [ 123 false ] ( [ ] [ ] int ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ID ( ) [ true + - + ( - ] - ID ) ) ] [ 123 false ] ( [ ] [ ] int ) { }",
  "func ( ID ) : int { print ( ( ID ( ) [ ID ] ) ) print - ( - - ID ) } func ID ( ) { }",
  "func ( ID ) : int { print ( ( ID ( ) [ ID ] ) ) print ( - - - ID ) } func ID ( ) { }",
  "func ( ID } : int { print ( ( ID ( ) [ ID ] ) ) print ( - - - ID ) ) func ID ( ) { }",
  "func ID ( ) + call ID ( ( ( 123 { ( ID ) - true ) ) ) call ID ( ) }",
  "func ID ( ) ) call ID ( ( ( 123 { ( ID ) - true ) ) + call ID ( ) }",
  "func ID ( ) ) call ID ( ( ( 123 { ( ID ) - ) ) true + call ID ( ) }",
  "func ID ( ) { var ID : [ ( var + ( 123 / - - ID * - ID ) ) ] [ ] int false ID : bool }",
  "func ID ( ) { var ID : [ ( var + ( 123 / - - ID * - ID ) ) ] [ ] ID false int : bool }",
  "func ID ( ) { var ID : [ ( false + ( 123 / - - ID * - ID ) ) ] [ ] ID var int : bool }",
  "func ID ( bool : int , ID : ID , ID : bool ) { return true + false >= ID ( ) }",
  "func >= ( bool : int , ID : ID , ID : bool ) { return true + false ID ID ( ) }",
  "func } ( bool : int , ID : ID , ID : bool ) { return true + false ID ID ( ) >=",
  "func ID ( : ID [ ] int ) : int { ID ( ID ( - ID ) ) = ID } func ID ( ) { }",
  "func ID ( : ID [ ) int ) : int { ID ( ID ( - ID ] ) = ID } func ID ( ) { }",
  "func ID ( : ID [ ) int ) : int { ID ( ID ( - ID ] ) = ID } func ID ( ) { }",
  "func ID ( ID : [ ID bool , ID : bool , ID : int ) : int { var ] : bool call ID ( ( - 123 ) ) } func ID ( ) { }",
  "func ID ( ID : [ } bool , ID : bool , ID : int ) : int { var ] : bool call ID ( ( - 123 ) ) ID func ID ( ) { }",
  "func ID ( ID ( int ) { print ( ( ID [ ID ] ) ) } func ID : ) { }",
  "func ID ( ID ( int ) { print ( ( ID [ ID ] ) ) ID func } : ) { }",
  "func ID ( ID ) int ) { print ( ( ID [ ID ] ) ) ID func } : ( { }",
  "func bool ( ) { var ID : [ ] bool var ID : ID } func ID ( ) { { var ID : [ ID ] int } ID = ID }",
  "func bool ] ) { var ID : [ ( bool var ID : ID } func ID ( ) { { var ID : [ ID ] int } ID = ID }",
  "func bool ID ) { var ID : [ ( bool var ] : ID } func ID ( ) { { var ID : [ ID ] int } ID = ID }",
  "func ID ( ) : [ - ID ( ) [ ID ( ( true ) ) ] [ ] true ] [ ] bool { }",
  "func ID ( ) : [ - ID ( ) [ ID ( ( true ) ) { [ ] true ] [ ] bool ] }",
  "func ID ( ) : [ - ID ( ) [ ID ( ( true ) ) ] [ ] true ] [ ] bool { }",
  "func ID ( ) : bool { var ID : int var ID : bool return } func ID ( ) [ var ID : int var ID : [ ] { ] bool }",
  "func ID ( ) { bool : var ID : int var ID : bool return } func ID ( ) [ var ID : int var ID : [ ] { ] bool }",
  "func ID ( ) { : : var ID bool int var ID : bool return } func ID ( ) [ var ID : int var ID : [ ] { ] bool }",
  "func ID ( ID : [ + ID [ ID [ false - - ID ] [ - - - ID ] ] ] bool ) { } func ID ( ) { }",
  "func ID func ID : [ + ID [ ID [ false - - ID ] [ - - - ID ] ] ] bool ) { } ( ID ( ) { }",
  "func ID func ] : [ + ID [ ID [ false - - ID ] [ - - - ID ] ID ] bool ) { } ( ID ( ) { }",
  "func ID ( - : [ ] [ ] bool ) { while true < ID ( ( false ) ) { } }",
  "[ ID ( - : func ] [ ] bool ) { while true < ID ( ( false ) ) { } }",
  "[ ID ( - : func } [ ] bool ) { while true < ID ( ( false ) ) { } ]",
  "false ID ( ID : bool ) : [ - - - 123 * ID [ ( func ) ] * false ] bool { } func ID ( ) { }",
  "false ID ( ID : bool ) : [ * - - 123 * ID [ ( func ) ] - false ] bool { } func ID ( ) { }",
  "false ID ( ID : bool ) : [ * - - 123 * ID [ ( func ) ] - false ] bool { } func ID ( ) { }",
  "- ID ( ID : [ 123 / false and ID [ func true * false ] [ ID ] ] bool ) { }",
  "- ID ( ID : [ 123 / false and ) [ func true * false ] [ ID ] ] bool ID { }",
  "- false ( ID : [ 123 / false and ) [ func true * ID ] [ ID ] ] bool ID { }",
  "func ID ( ID : bool ) { var ID : int var ID : [ true - ID ( 123 ) + - 123 ] [ } bool ]",
  "func ID ] ID : bool ) { var ID : int var ID : [ true - ID ( 123 ) + - 123 ] [ } bool (",
  "func ID ] ID : ( ) { var ID : int var ID : [ true - ID bool 123 ) + - 123 ] [ } bool (",
  "func ID ( ID ] int , ID : [ ] [ : bool , ID : bool ) { if ( ID ) { } } func ID ( ) { }",
  "func bool ( ID ] int , ID : [ ] [ : bool , ID : ID ) { if ( ID ) { } } func ID ( ) { }",
  "func bool ( ID ] int , ID : [ ] [ : bool , ID : ID ) { if ( ID ) { } } func ID ( ) { }",
  "func ID ) ) { var ID : [ ] [ false * - - true - ( ( ( ID ) ) ( - ( ( - ( false ) ) ) ] int }",
  "func ID : ) { var ID ) [ ] [ false * - - true - ( ( ( ID ) ) ( - ( ( - ( false ) ) ) ] int }",
  "func ID ( ID : bool bool { var ID : ) var ID : bool return true * true * true + true - ( 123 ) }",
  "func true ( ID : bool bool { var ID : ) var ID : bool return true * true * ID + true - ( 123 ) }",
  "func true ( } : bool bool { var ID : ) var ID : bool return true * true * ID + true - ( 123 ) ID",
  "func ID ( ID ID bool ) { while - 123 * : ( ) [ ID ( ) ] [ false ] * ID { } print true }",
  "func ID ( - ID bool ) { while ID 123 * : ( ) [ ID ( ) ] [ false ] * ID { } print true }",
  "func ID ( - ID bool ) print while ID 123 * : ( ) [ ID ( ) ] [ false ] * ID { } { true }",
  "func ID ( ID : [ ] [ ID ) ) [ ( - ID [ ID ] ( ] [ true ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] ) ) [ ( - ID [ ID ID ( ] [ true ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] ) ID [ ( - ID [ ID ) ( ] [ true ] ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : ] - ID ( ( - false + - ( false ) + ( ID ) ) ) [ bool }",
  "func ID ( ID : bool , ID : bool ) { var ID [ int var ID : : ] int return } func ID ( ID : [ ] int ) { }",
  "func ID ( ID : bool , ID : bool ) : var ID [ int var ID : { ] int return } func ID ( ID : [ ] int ) { }",
  "func ID ( ID : bool , ID var bool ) : var ID [ int : ID : { ] int return } func ID ( ID : [ ] int ) { }",
  "func ID ( ID : bool ) { ( ID : bool var ID : int if var ID ( false ) ) { } call ID ( ) }",
  "func ID ( ID : bool ) false ( ID : bool var ID : int if var ID ( { ) ) { } call ID ( ) }",
  "func ID ( ID : bool ) false ( ID : bool var ID { int if var ID ( { ) ) : } call ID ( ) }",
  "func ID ( ) { var ID : [ ( bool ( ) [ ( ID ) ] [ ID ] ) ] [ ] ID var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( bool ( ) [ ( ID ] ) [ ID ] ) ] [ ] ID var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( bool ( ) [ ( ] ] ) [ ID ] ) ID [ ] ID var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ] : [ ID ( ) [ 123 - true > ID [ - ID ] [ ( true ) ] ) ] bool { } func ID ( ) { }",
  "ID ID ( ] : [ func ( ) [ 123 - true > ID [ - ID ] [ ( true ) ] ) ] bool { } func ID ( ) { }",
  "func ID - ) : int { ID ( ID / - 123 + ( ( ( ( true ) ) ) ) - - true ) = - ID while ( - 123 { } }",
  "func { - ) : int { ID ( ID / - 123 + ( ( ( ( true ) ) ) ) - - true ) = - ID while ( - 123 ID } }",
  "func { - ) : int { ID ( ID / - 123 + ( ( ( ( true ) ) ) ) - - true ) = - ID while ( - 123 ID } }",
  "func ID ( ) { } print ID ( ) { ID [ ID ( 123 * ID ) ] = 123 func ID }",
  "func ID ( ) { [ print ID ( ) { ID } ID ( 123 * ID ) ] = 123 func ID }",
  "func ID ( ) { [ print ID ( ) { ID } ID ( 123 * ID ) ] = ID func 123 }",
  "func ID ( ) : [ ] int { var ID : [ - ID [ - ID false [ ] ] [ - - - true ] ] bool } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : [ - [ [ - ID false ID ] ] [ - - - true ] ] bool } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : [ [ - [ - ID false ID ] ] [ - - - true ] ] bool } func ID ( ) { }",
  ": ID ( ID func int ) { var ID : bool var ID : int }",
  ": ID ( ID func int ) { var ID : bool } ID : int var",
  ": ID ( ID func int ID { var ) : bool } ID : int var",
  "func ID } ID : [ ] int , ID : int , ID : [ ] bool ) { print ID * ( ID ) / ID (",
  "func ID } ID : [ ] int , ID : int , / : [ ] bool ) { print ID * ( ID ) ID ID (",
  "func ID } ID : int ] int , ID : [ , / : [ ] bool ) { print ID * ( ID ) ID ID (",
  "func ID ( ID : [ + int ) { print ID * 123 + ( ID ) ] ( - ID ) } func ID ( ) { }",
  "func ID ( ID + [ + int ) { print ID * 123 : ( ID ) ] ( - ID ) } func ID ( ) { }",
  "func ID ( ID + [ + int 123 { print ID * ) : ( ID ) ] ( - ID ) } func ID ( ) { }",
  "func ID ( ID : { ID [ ID ( ) [ ID ( ) [ ( false ) ] [ 123 ] ] [ ( ( - ID ) ) ] ] ] int ) [ } func ID ( ) { }",
  "func ID ( ID : { ID [ ID ( ) [ ID ( ) [ ( false ) ] [ 123 ] ) [ ( ( - ID ) ] ] ] ] int ) [ } func ID ( ) { }",
  "func ID ) ID : { ID [ ID ( ( [ ID ( ) [ ( false ) ] [ 123 ] ) [ ( ( - ID ) ] ] ] ] int ) [ } func ID ( ) { }",
  "func ID ( ) { return } func ID ( ) : bool { { ID : int var ID : int call ID ( ID ) var } }",
  "func ID ( ) { return } func ID ( ) : bool { : ID { int var ID : int call ID ( ID ) var } }",
  "func ID ( ) { return } func ID ( ) : bool { } ID { int var ID : int call ID ( ID ) var } :",
  "func ID ( ) ( var ID : [ ID [ - { false / ID ) ] [ ID ] ] bool var ID : bool }",
  "func ID ( ) ( var ID : [ ID [ - { false ) ID / ] [ ID ] ] bool var ID : bool }",
  "( ID func ) ( var ID : [ ID [ - { false ) ID / ] [ ID ] ] bool var ID : bool }",
  "func ID ( ID : ( - 123 * ( ID ( ) [ - - ID ] ) * [ ID ) ] int ) { }",
  "func ID ( ID : ( - 123 * ( ID ( ) [ - - ID } ) * [ ID ) ] int ) { ]",
  "func ID ( ID ) ( - 123 * ( ID ( : [ - - ID } ) * [ ID ) ] int ) { ]",
  "func ID ( ) : int { var ID ID int var ID : int ID = - ( - - ID ) call : ( ) }",
  "int ID ( ) : int { var ID ID func var ID : int ID = - ( - - ID ) call : ( ) }",
  "func ID ( ) : [ ID ( ( false - ID ( ) [ false ] [ - { ] - ( false ) ) ) ] [ ] [ ] bool ID } func ID ( ) { }",
  "func ID ( ) : [ ID ( ( false - ID ( ) [ [ ] [ - { ] - ( false ) ) ) ] [ ] false ] bool ID } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int } } ID ( ) { var ID : int var ID : bool while ID { } { } func",
  "func ID ( ) : bool { var ID : int } } ID ( ) { var ID : int var while : bool ID ID { } { } func",
  "func ID ( ) : bool { var ID ID int } } ID ( ) { var ID : int var while : bool ID : { } { } func",
  "func ID ( { : bool ) ID var ID : [ ID [ - ID * true ] [ ID ] ] [ ] bool var ID : bool }",
  "func ID ( { : bool ) ID var ID ID [ ID [ - ID * true ] [ : ] ] [ ] bool var ID : bool }",
  "func ID ( { : bool : ID var ID ID [ ID [ - ID * true ] [ : ] ] [ ] bool var ID ) bool }",
  "func ID ( ID : bool , ID : [ ] int , ID : [ ] int ) ) bool { var ID : [ ] [ ( ID ) ] int var ID : bool } func ID ( : { }",
  "func ID : ID : bool , ID : [ ] int , ID : [ ] int ) ) bool { var ID : [ ] [ ( ID ) ] int var ID ( bool } func ID ( : { }",
  "func ID : ID : { , ID : [ ] int , ID : [ ] int ) ) bool bool var ID : [ ] [ ( ID ) ] int var ID ( bool } func ID ( : { }",
  "func ID ( ) { var ID : int if ID [ ( ( ] ) ) ID [ ID ] { } print - ( - - - ( ID ) ) }",
  "func ID ( ) { var ID : int if ID [ ( ( ] ) ) ID [ ID ] { } - - ( print - - ( ID ) ) }",
  "func ID ( ) { var ID : int if ID [ ( ( ] ) ) ID [ ID ] - } - - ( print - { ( ID ) ) }",
  "func ID ( ID : [ ( ( true - ID ] ID ) ) ) ( int ) { }",
  "func ID ( ID int [ ( ( true - ID ] ID ) ) ) ( : ) { }",
  "func ID ( ID int [ ( ( true - ID ] ID ) ) } ( : ) { )",
  "func ID ( ) : int { var ID : [ 123 ID / [ ( 123 ) ] [ false ] / false ] [ ] bool }",
  "func ID ( ) : int { var ID : [ 123 false / [ ( 123 ) ] [ false ] / ID ] [ ] bool }",
  "func ID ( ) : int { var ID : [ ID ( ) [ false / ID ( ) * - ( ] ] int var ID : int } func ID true ) { }",
  "func ID ( ) : int { var ID : [ ID ( ) [ false : ID ( ) * - ( ] ] int var ID / int } func ID true ) { }",
  "func ID ( ) : int { var ID : [ ID ( ) ID false : ID ( ) * - ( ] ] int var ID / int } func [ true ) { }",
  "func ID ( ID : [ ID [ ID ( ) [ true bool ( ( false ) ) ] ] [ ID ] ] / ) { }",
  "func ID ( ID : [ ID [ ID ( ) [ true bool ( ( false ) ) ] ] [ ID ] ] / ) { }",
  "func [ ( ID : [ ID [ ID ( ) [ true bool ( ( false ) ) ] ] ID ID ] ] / ) { }",
  "ID ID ( ID : bool ) { var ID : int } func func ( ID : int , ID : bool ) : [ ID ] [ ] int { }",
  "ID ID ( ID : bool ) { var ID : int } func func ( ID : int , ID : ID ) : [ bool ] [ ] int { }",
  "ID ID ( ID : bool ) { var ID : int } func func ( [ : int , ID : ID ) : [ bool ] ID ] int { }",
  "func ID ( ) { { var ID : [ ID ( ID ( ID ) ) } bool var ID : bool } while ( - 123 ) { ] }",
  "func ID ( ) { { var ID : [ ID ( ID ( ID - ) } bool var ID : bool } while ( ) 123 ) { ] }",
  "func ID ( ) { { var ID : [ ID ( ID ( } - ) } bool var ID : bool ID while ( ) 123 ) { ] }",
  "func ) ( ID : bool , ID : [ ] bool ) : bool { var ID : [ ] bool while ID ( ID { } print ID } func ID ( ) { }",
  "func ) ( ID : bool , ID : { ] bool ) : bool { var ID : [ ] bool while ID ( ID { } print ID } func ID ( ) [ }",
  "func ) ( ID : bool , ID : { ] bool ) : bool { var ID : [ ] bool while ID ( ID { } print ID ( func ID } ) [ }",
  "func ID ( ID : bool , ID : bool , ID ] [ : [ ] int ) : int { while ( - - ID ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID ] [ : [ ] int { : int ) while ( - - ID ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID ] [ : [ ] int { : int ) while ( - - ID ) { } } func ID ( ) { }",
  "func ) ( ) { if ( true * false / ID ( true ) ID { } } func ID ( ) { }",
  "func ) ( ) { if ID true * false / ( ( true ) ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , } : bool ) : int { var ID : bool if ID ( ) [ ID ] { ID }",
  "func ID ( ID : bool , ID : ) , } : bool ) : int { var ID : bool if ID ( bool [ ID ] { ID }",
  "func ID ( ID : bool ) ID : , , } : bool ) : int { var ID : bool if ID ( bool [ ID ] { ID }",
  "func ID ( ID : [ - true + 123 * ID ( ) [ false * false ] [ ] false ] * true ] [ - bool ) { }",
  "func ID ( ID : [ - true + 123 * false ( ) [ false * ID ] [ ] false ] * true ] [ - bool ) { }",
  "func ID ( ID : [ - true [ 123 * false ( ) [ false * ID ] [ ] false ] * true ] + - bool ) { }",
  "func ID ( ID : [ ID ] ID ( ) [ ( - - false ) ( [ ID ] ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ID ] ID ( ) { ( - - false ) ( [ ID ] ) ] [ ] int ) [ } func ID ( ) { }",
  "func ID ( ID : [ ID ] ID ( ) { ( - - false ) ( [ { ] ) ] [ ] int ) [ } func ID ( ) ID }",
  "func ID ( ID : [ true / 123 ] ID ( ) or ( ( - ( - false ) ) ) or ID / int ) { } func ID ( ) { }",
  "func ID ) ID : [ true / 123 ] ID ( ( or ( ( - ( - false ) ) ) or ID / int ) { } func ID ( ) { }",
  "func ID ) ID : [ true ( 123 ] ID ( ( or ( ( - ( - false ) ) ) or ID / int ) { } func ID / ) { }",
  "func ID ( ) : bool { } func ID ( ID : int , ID : [ ] [ { [ 123 * ( 123 ) ] int ) ] }",
  "func ID ( ) : bool { } func ID ( ID ] int , ID : [ ] [ { [ 123 * ( 123 ) ] int ) : }",
  "func ID ( ) : bool ] } func ID ( ID { int , ID : [ ] [ { [ 123 * ( 123 ) ] int ) : }",
  "func ID ( ) { while ID [ - - 123 / ID / - ( ( ID ) ) ] [ ID ] { } ID call ( ) }",
  "func ID ( ) { while ID [ - - 123 / ] / - ( ( ID ) ) ID [ ID ] { } ID call ( ) }",
  ") ID ( ) { while ID [ - - 123 / ] / - ( ( ID func ) ID [ ID ] { } ID call ( ) }",
  "func ID ID ID : bool ) : [ ] int { var ID : int var ID : [ ] int call ID ( - - true ) { } } func ( ( ) { }",
  "func ID ID ID : bool ) : [ ] int { var ID : int var ID } [ ] int call ID ( - - true ) { } } func ( ( ) { :",
  "func ID ID ID : bool ) : ] ] int { var ID : int var ID } [ [ int call ID ( - - true ) { } } func ( ( ) { :",
  "func ID ( while : bool { ) ( ID [ ID * true / ID * ID ] / ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ true / ID [ { * true - true ] * ID ] int ) { } func ID ( ) false }",
  "func true ( ID : [ ] [ ] [ true / ID [ { * true - ID ] * ID ] int ) { } func ID ( ) false }",
  "func ID ( ID : [ - * ( - 123 false * - ( - true ) ) ] bool ) { }",
  "func ID ( ) : [ - * ( - 123 false * - ( - true ) ID ] bool ) { }",
  "func ID ( ID : bool , ID : int ) : int { ID ( ( 123 - false ) ) = ID while } { } ID",
  "func ID ( ID : bool , ID : int ) : int - ID ( ( 123 { false ) ) = ID while } { } ID",
  "func ID ( - : bool , ID : int ) : int ID ID ( ( 123 { false ) ) = ID while } { } ID",
  "func bool ( ID : [ ] [ ] [ ] [ ( ( false and false ) ) ] ID ) { } func ID ( ) { }",
  "func bool ( ID : [ ] ] [ [ ] [ ( ( false and false ) ) ] ID ) { } func ID ( ) { }",
  "func ID ( } : bool , ID : int , ID : [ ( ID [ - - ( ID ) ] ) ] int ) { } func ID ( ) { ID",
  "func ID ) } : bool , ID : int , ID : [ ( ID [ - - ( ID ) ] ( ] int ) { } func ID ( ) { ID",
  "func ID ) } [ bool , ID : int , ID : : ( ID [ - - ( ID ) ] ( ] int ) { } func ID ( ) { ID",
  "func ID ( ID : bool , ID [ [ ] : - - ( false * 123 * ( ID ) ) ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( [ : bool , ID ID [ ] : - - ( false * 123 * ( ID ) ) ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( [ : bool , ID ID [ ] : - - ( { * 123 * ( ID ) ) ] bool , ID : int ) { } func ID ( ) false }",
  "func ID ( ) ) int { var ID : int return ( ( false - false : ) } func ID ( ) { }",
  "func ID ( ) : int { var ID ) int return ( ( false - false : ) } func ID ( ) { }",
  "func ID ( ) : int { var ID ) int return ( ( false - false : ) } func ) ( ID { }",
  "func ID ( ) : int { var ID : int - [ true * ID ID ( ) [ 123 ] [ - ( ( false ) ) ] ] [ - 123 ] = ( ID ) while ID { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int - [ true * ID func ( ) [ 123 ] [ - ( ( false ) ) ] ] [ - 123 ] = ( ID ) while ID { } } ID ID ( ) { }",
  "func ID ( ) : int { var ID : int - [ true * ID ] ( ) [ 123 ] [ - ( ( false ) ) ] func [ - 123 ] = ( ID ) while ID { } } ID ID ( ) { }",
  "func ID ( - : bool { var ID : bool while ) ( ( false and ID and - 123 ) ) { } }",
  "func ID ( - : bool { var ID : bool while ) ( ( false 123 ID and - and ) ) { } }",
  "func ID ( - : bool { 123 ID : bool while ) ( ( false var ID and - and ) ) { } }",
  "func ID ( ID : [ ( - ( [ ID / ID ID ) ] [ ID ] ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ( - ( [ ID / ID ID ) ] [ ID ] ) ] [ ) [ ] bool ] { } func ID ( ) { }",
  "func ID ( ID : [ ( - ) [ ID / ID ID ) ] [ ID ] ( ] [ ) [ ] bool ] { } func ID ( ) { }",
  "func ID ( bool : bool , ID : bool , ID : ID ) { call ID ( ) return }",
  "func { ( bool : bool , ID : bool , ID : ID ) ID call ID ( ) return }",
  "func { ( bool : bool , ID : bool , ID : ID ) ID call ID ( ) return }",
  "func ID ( } { { var ID : [ ] bool var ID : int print ID * - 123 / - - 123 ) } func ID ( ) { }",
  "func ID ( } { { var ID : [ ] 123 var ID : int print ID * - 123 / - - bool ) } func ID ( ) { }",
  "func ID ( } { { var ID : [ ] 123 var ID : print int ID * - 123 / - - bool ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int var ID : bool ) func ID ( ID : int } { var ID : int call ID ( ) }",
  "func ID ( ) { var ID : [ ] int var ID : int ) func ID ( ID : bool } { var ID : int call ID ( ) }",
  "func ID ( ) { var ID : [ ] int var int : ID ) func ID ( ID : bool } { var ID : int call ID ( ) }",
  "func ID true ID : bool , ID : int ) { var ID : bool var ID : [ ] [ ] int ID ( ID ) = ( if ( ( ID ) ) { } }",
  "func ID true ID : bool , ID : int ) { var ID : bool = ID : [ ] [ ] int ID ( ID ) var ( if ( ( ID ) ) { } }",
  "func ID true ID : bool , ID : ID ) { var ID : bool = ID : [ ] [ ] int ID ( int ) var ( if ( ( ID ) ) { } }",
  "func ID ( [ : [ ] int ) : [ 123 / ID or ID ID ( ID ) ] ] int { } func ID ( ) { }",
  "func ID ( [ ( [ ] int ) : [ 123 / ID or ID ID ( ID ) ] ] int { } func ID : ) { }",
  "func ID ( [ ( [ ] } ) : [ 123 / ID or ID ID ( ID ) ] ] int { int func ID : ) { }",
  "func ID ( ) { } func ID ( ID { call ID ( ) ( ( ( - ID ) ) ) ) }",
  "func ID ( ) { } func ID ( ID { call ID ( ) ( ( ( - ID ) ) ) ) }",
  "func ID ( ) { } func ID ( ID { call ID ( ) ( ( ( - ID ) ) ) ) }",
  "func ID ( ID : * ) : bool { var ID : [ true == ( true / ID int - ID ) ] [ ] int } func ID ( ) { }",
  "func ID ( ID : * ) : int { var ID : [ true == ( true / ID int - ID ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : * ) : int { var ID : [ true == ( true / ) int - ID ID ] [ ] bool } func ID ( ) { }",
  "func - ( ID : bool ) { print false / false + ID / ( true ) * ID + ID 123 }",
  "func - ( ID : bool ) { print / false false + ID / ( true ) * ID + ID 123 }",
  "/ - ( ID : bool ) { print / false false + ID func ( true ) * ID + ID 123 }",
  "func ID ( ID : int , ID : [ - ( - ( ID ) false * false ) ) ] bool * { }",
  "bool ID ( ID : int , ID : [ - ( - ( ID ) false * false ) ) ] func * { }",
  "bool ID ( ID : { , ID : [ - ( - ( ID ) false * false ) ) ] func * int }",
  "func ID ( } : int , ID : bool , ID : int ) { return } func ID ( ID : bool , ID : [ ] bool , ID : [ ] int ) { ID",
  "func ID ( } : int , ID : bool , ID : int ) { return } func ID ( ID : bool , ID : [ ] bool , ID : [ ] int ) { ID",
  "func ID ( ID : int , ) : bool ) : bool { if ( ID ( true ID ) { } print - ID } func ID ( ) { }",
  "func ID ( ID : int ( ) : bool ) : bool { if , ID ( true ID ) { } print - ID } func ID ( ) { }",
  "func ID ( ID : { ( ) : bool ) : bool int if , ID ( true ID ) { } print - ID } func ID ( ) { }",
  "func ID ( ID : [ false + - ) ( ( true * ( true ) ) ) ] [ ] int - { } func ID ( ) { }",
  "func ID ( ID : [ false + - ) ( ( true * ( true ) } ) ] [ ] int - { } func ID ( ) { )",
  "func ID ( : ID [ false + - ) ( ( true * ( true ) } ) ] [ ] int - { } func ID ( ) { )",
  "func ID ( ) : bool { var ID : int var ID : int } func ID ( ) : bool { ] ID : [ ID ] [ var int }",
  "func ID ( ) : bool { var ID : int var ID : int } func ID ( ) : bool { ] ID : [ ID } [ var int ]",
  "func ID ( ID : bool { var ID : int var ID : int } func ID ( ) : bool { ] ) : [ ID } [ var int ]",
  "func ID ( ) { var { ID : [ ] [ ID ( ID [ ID ] ) ] int var ID : bool } }",
  "} ID ( ) : [ ] int { var ID : [ - false * ( ( - ID ) ) * ID ] bool } func ID ( ) { func",
  "} ID ( ) [ : ] int { var ID : [ - false * ( ( - ID ) ) * ID ] bool } func ID ( ) { func",
  "} ID ( ) [ : ] int { var ID : [ - false * ( ( - ID ) ) * ID ] bool } func ID ( ) func {",
  "func ID ( ID : [ ( 123 / - ( 123 / ( ID ) ) / - - ID ) { int ) ] } func ID ( ) { }",
  "func ID - ID : [ ( 123 / ( ( 123 / ( ID ) ) / - - ID ) { int ) ] } func ID ( ) { }",
  "func ID - ID : [ ( 123 / ( ( 123 / ( ID ) ) / - - ID ) { int ) ] } func ID } ) { (",
  "func ID ( ) { var ID : [ false + true * ID ( 123 / + - false ) ) ( - ( 123 ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ) + true * ID ( 123 / + - false ) false ( - ( 123 ) ] int } func ID ( ) { }",
  "func ID ( } { var ID : [ ) + true * ID ( 123 / + - false ) false ( - ( 123 ) ] int } func ID ( ) { )",
  "func ID ( ID : [ ID ) ) [ - - ID [ ID ( ) ] [ ID ] ] ] int ( { }",
  "func ID ( ID : [ ID ) ) [ - - ID [ ID ( ) ] [ ID ] ] ] int ( { }",
  "func ID ( ID : [ int ) ) [ - - ID [ ID ( ) ] [ ID ] ] ] ID ( { }",
  "ID func ( ID : bool ) : [ 123 and ID ( true / ID ( ) * - - - ID ) ] int { } func ID ( ) { }",
  "ID func ( ID : bool ) : [ 123 and ID ( true / ID ( ) * - - - ID ) ] int { } { ID ( ) func }",
  "ID ( func ID : bool ) : [ 123 and ID ( true / ID ( ) * - - - ID ) ] int { } { ID ( ) func }",
  "func ID ( ID : [ ] int ) : int { var ID : bool ( if ID ( ( ( true ) ) ) ) { } }",
  "func ID ( ID : [ ] int ) : int { var ID : bool ( if ID ( ( ( true ) ) ) ) { } }",
  "func ID ( ID : [ ] int ) : int { var ID bool : ( if ID ( ( ( true ) ) ) ) { } }",
  "func ID ( ) : bool { print - 123 / ID + - false * ) true ( - true print true }",
  "func ID ( ID : int , ID : [ - ID [ ( - ( - 123 ) ) ] [ ( ID ) ] ] int , ID : [ ] [ ] ( ] [ ] [ ] [ ] bool ) { } func ID [ ) { }",
  "func ID ( ID : int , ID : [ - ID [ ( - ( - 123 ) ) ] [ ( ID ) [ ] int , ID : [ ] [ ] ( ] [ ] [ ] [ ] bool ) { } func ID ] ) { }",
  "func ID ( ID : int , ID : [ - ID [ ( - ( - 123 ) ) ] [ ( ID ) [ ] int , ID : [ ] [ ] ( ] [ ] ID ] [ ] bool ) { } func [ ] ) { }",
  "func ID ( ) : int { - true / ID * ID [ ( print true ) ] while ID { } }",
  "func ID ( ) : int { - true / ID * ID [ ( ID true ) ] while print { } }",
  "func ID ( ) : int { - true / ID * ID [ ( ID true ) } while print { } ]",
  "func ID ( ID : int , ID : int ) : int { var ID : int print false ( ID / / ID ) } func ID ( ) { }",
  "func ID ( ID : ) , ID : int int : int { var ID : int print false ( ID / / ID ) } func ID ( ) { }",
  "func ID ( ID : ) , ID : int int : int { var ID : int print false ( ID / / ID ) } func ( ID ) { }",
  "func : ( ) ID [ ] bool { }",
  ") : ( func ID [ ] bool { }",
  ") : ( func ] [ ID bool { }",
  "func ID ( ID ID bool ) : int { var : : int var ID : bool return }",
  "func ID ( ID ID bool ) : int { var : : int ID var : bool return }",
  "ID ID ( ID func bool ) : int { var : : int ID var : bool return }",
  "func ID ( ID : int ) { var ID : ( var ID : int call ID ( - ID bool ) [ - ID ] ) while false { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : ( var ID ) int call ID ( - ID bool ) [ - ID ] : while false { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : ( var ID ) int call ID ( - ID bool ) { - ID ] : while false [ } } func ID ( ) { }",
  "func { ( ID : [ ] int , ID : int ) { var ID : [ ] int var ID : int if - ( ( true ) ) ID } } func ID ( ) { }",
  "func { ( ID : [ ] int , ID : int ) { var ID : [ ] int var ID : int if - ( ( true ) ) ID } } func ID ( ) { }",
  "func { ( ID : [ ] int , ID : int int { var ID : [ ] int var ID : ) if - ( ( true ) ) ID } } func ID ( ) { }",
  "func ID ( ) { [ - ID ( ID [ ID [ true ] ] [ - ID ] ) ] int { } func ID ( ) : }",
  "func ID ( ) func [ - ID ( ID [ ID [ true ] ] [ - ID ] ) ] int { } { ID ( ) : }",
  "func ID } ) func [ - ID ( ID [ ID [ true ] ] [ - ID ] ) ] int { } { ID ( ) : (",
  "func ID ( ID : bool , ID : bool ID , : [ ( ( ID ( - false ) ) ) ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool func ID : bool ID , : [ ( ( ID ( - false ) ) ) ] [ ] [ ] [ ] int ) { } , ID ( ) { }",
  "func ID ( ID : bool func ID : bool ID , ) [ ( ( ID ( - false ) ) : ] [ ] [ ] [ ] int ) { } , ID ( ) { }",
  "func [ ( ) { print - true + ID ID true * - - - ID ] + - false while 123 { } } func ID ( ) { }",
  "func [ ( ) { print - true while ID ID true * - - - ID ] + - false + 123 { } } func ID ( ) { }",
  "func [ ( ) { print - true while ID ID true * - - - ID ] + - false + 123 { } } func ID ( ) } {",
  "func ID ( ID [ int , ID : bool ) { var ID : : 123 / ( true - - 123 ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ID [ int , ID : 123 ) { var ID : : bool / ( true - - 123 ) ] int var ID : int } func ID ( ) { }",
  "func ID : ID [ int , ID ( 123 ) { var ID : : bool / ( true - - 123 ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : bool ) { call ID ( - - 123 / - - - ID ( ) [ false ] / ) ( 123 ( ) ) } func ID ( ) { }",
  "func ID ( ID : bool ) { ) ID ( - - 123 / - - - ID ( ) [ false ] / call ( 123 ( ) ) } func ID ( ) { }",
  "func ID ( ID : bool ) { ) ID ( - - 123 / ID - - - ( ) [ false ] / call ( 123 ( ) ) } func ID ( ) { }",
  "func ID ( ) { int { var ID : [ ] int } func ID ( ) : var ID : [ ] bool var ID : [ ] [ ] bool }",
  "func ID ( ) { int } var ID : [ ] int { func ID ( ) : var ID : [ ] bool var ID : [ ] [ ] bool }",
  "func ID ( ) { int } var ID : [ ] [ { func ID ( ) : var ID : [ ] bool var ID : [ ] int ] bool }",
  "func ID ( - : [ ( ID true / ( - ID [ 123 ] [ true ] ) * ID ) ] int ) { } func ID ( ) { }",
  "func ID ( - : [ ( ID true / ( [ ID - 123 ] [ true ] ) * ID ) ] int ) { } func ID ( ) { }",
  "func ID ( - : [ ( ID true / ) [ ID - 123 ] [ true ] ( * ID ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { ID ( - 123 ( ID ( ) * ID [ - ] / ( ( true ) ) ) ) = false call ID ( ) }",
  "func ID ( ) { ID ID - 123 ( ID ( ) * ( [ - ] / ( ( true ) ) ) ) = false call ID ( ) }",
  "func ID ( ) { ID ID - 123 ( ID ( ) * ( [ - ] / ( ( true ) ) ) ) = ) call ID ( false }",
  "func ID ( [ { var ID : bool return ( - ID ( ) [ ( false ) ] ) ( - - ( true ) ) ] ) }",
  "func ID ( [ { var ID : bool return ( - ID ( ) [ - false ) ] ) ( ( - ( true ) ) ] ) }",
  "func ID ( [ { var ID : bool return ( - ID ( ) [ - false ] ) ) ( ( - ( true ) ) ] ) }",
  "func ID ( - : bool , ID : int ) : [ ( ID - 123 / ( true ) ) ] int { }",
  "func ID ( - : bool , ID : int ) : [ ( - ID 123 / ( true ) ) ] int { }",
  "ID ID ( - : bool , func : int ) : [ ( - ID 123 / ( true ) ) ] int { }",
  "func ID ( ID : bool ) : int { } ID ( ( ID ( ( - true ) ) ) ) { } } func ID ( ) { call",
  "func ID ( ID : bool ) : int { } func ( ( ID ( ( - true ) ) ) ) { } } ID ID ( ) { call",
  "func ID ( ID : bool ) : int { } func ( ( ID ( ( - true ) ) ) ) { ) } ID ID ( } { call",
  "func ID ( ) { var ID : bool * ID ( ID call ID - ID ( ) ) } func ID ( ) { }",
  "( ID func ) { var ID : bool * ID ( ID call ID - ID ( ) ) } func ID ( ) { }",
  "( ID func ) { ID ID : bool * ID ( ID call ID - var ( ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int if - * <= true 123 - true * ID { } while ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var } : int if - * <= true 123 - true * ID { } while ID { } } func ID ( ) { ID",
  "func ID ( ) { var ID : bool var } : * if - * <= true 123 - true int ID { } while ID { } } func ID ( ) { ID",
  "func ID : ID ( bool ) { var ID : bool var ID : int call ID ( ) return } func ID ( ) { var ID : [ ] bool }",
  "func ID : ID var bool ) { var ID : bool var ID : int call ID ( ) return } func ID ( ) { ( ID : [ ] bool }",
  "func ID : ID var bool ) { var ID : bool ID var : int call ID ( ) return } func ID ( ) { ( ID : [ ] bool }",
  "func ID ( ID ) int , ID : int , ID : int : : [ ] [ - true - 123 < - - ( false ) ] int { } func ID ( ) { }",
  "func ID ( ID ) int , ID : int , ID : int - : [ ] [ - true : 123 < - - ( false ) ] int { } func ID ( ) { }",
  "func ID ( ID ) int , ID : int , true : int - : [ ] [ - ID : 123 < - - ( false ) ] int { } func ID ( ) { }",
  "func ID ( ) { var ID ] [ ( ( ( true / ( true ) ) ) ) ] [ : [ ] [ ] int }",
  "func ] ( ) { var ID ] [ ( ( ( true / ( true ) ) ) ) ] [ : [ ] [ ID int }",
  "func ] ( ) { var ID ] [ / ( ( true ( ( true ) ) ) ) ] [ : [ ] [ ID int }",
  "func ID ( ID : bool , ID : [ ( ID [ false * - ID / true ] ) [ int , ID : ] ] bool ) { }",
  "func ID ( ID : bool ) ID : [ ( ID [ false * - ID / true ] ) [ int , ID : ] ] bool , { }",
  "func ID ( ) { var bool : ID var ID : int if false * false and - - ID { } } func ID ( ) { }",
  "func ID ( : { var bool : ID var ID ) int if false * false and - - ID { } } func ID ( ) { }",
  "func ID ( : { var bool : ID var ID ) int if false false * and - - ID { } } func ID ( ) { }",
  "func ID ( ID : false , ID : int , ID : bool ) { { print - int * true + ID } { } } func ID ( ) { }",
  "func ID ( ID : false , ID : int , ( : bool ) { { print - int * true + ID } { } } func ID ID ) { }",
  "func ID ( : ID false , ID : int , ( : bool ) { { print - int * true + ID } { } } func ID ID ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : int var [ : [ ] ID false * 123 - false - ID ] [ ] bool } func ID ( ) { }",
  "func ID ( ID bool int , ID : : ) { var ID : int var [ : [ ] ID false * 123 - false - ID ] [ ] bool } func ID ( ) { }",
  "func ID ( ID bool int , ID : : ) { var ID : int var [ : [ ] ID false * 123 - false - ( ] [ ] bool } func ID ID ) { }",
  "{ ID ( ) { var ID : bool var ID : int print false / ( - true * false ) ID = 123 } func ID ( ) func }",
  "{ ID ( ) { var ID : bool var ID : int print false / ( - true * false ) ID = 123 } func ID ( ) func }",
  "var ID ( ) { var ID : bool { ID : int print false / ( - true * false ) ID = 123 } func ID ( ) func }",
  "func ID ( ) : int { var ] : [ - - - ID ( ID [ ID ] [ - false ] ) ID int } func ID ( ) { }",
  "func ID ( ) : int { - ] : [ var - - ID ( ID [ ID ] [ - false ] ) ID int } func ID ( ) { }",
  "func ID ( ) : int { - ] : [ var - - ID ( ID [ ID ] [ - false ] ) ID ) } func ID ( int { }",
  "func ID ( ) { var ID : int ID ( 123 / ) ( ( - ID ) ) * - ID ID = ID if - ID { } }",
  "func ID ( ) { var ID : int ID ( 123 / ) ( ( - ID ) ) * - ID ID = ID if - ID { } }",
  "func ID } ) { var ID : int ID ( 123 / ) ( ( - ID ) ) * - ID ID = ID if - ID { ( }",
  "func ID , ID : int , ID : bool ( ID : bool ) : int { var ID : bool call ID ( ) return } func ID ( ) { }",
  "func ID , ID : int , ID : bool ( call : bool ) : int { var ID : bool ID ID ( ) return } func ID ( ) { }",
  "func ID , ID : int , ID : bool ( call : bool ) : int ( var ID : bool ID ID ( ) return } func ID { ) { }",
  "func ID : ID : int , ID : int , ID ( int ) { { var ID : [ ] [ ] [ ] bool } ID = ID }",
  "func ID : ID : int , ID : int , ID ( int ) { { var ID : [ ] [ ] [ ] bool } ID = ID }",
  "func ID ( ) var int { : ID : int var ID : int ID = true / true <= false }",
  "func ID ( : var int { : ID : int var ID ) int ID = true / true <= false }",
  "func ID ( : var int { ID ID : int var ID ) int : = true / true <= false }",
  "func ID ( ID : int ) { var ID : bool var ID : int if 123 - ( ( ( ( - ID ) ) ) ( - ID { } print - ( ) ( - 123 ) ) ) }",
  "} ID ( ID : int ) { var ID : bool var ID : int if 123 - ( ( ( ( - ID ) ) ) ( - ID { func print - ( ) ( - 123 ) ) ) }",
  "func ID ( ) { var ID : [ ] [ ID ( ( ID func ) ) ) ] bool } ( ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ID ( bool ID func ) ) ) ] ( } ( ID ( ) { }",
  "func ID ( bool { var ID : [ ] [ ID ( ) ID func ) ) ) ] ( } ( ID ( ) { }",
  "func ID ( ) { var ID : [ 123 / - ID ( ) + - - - ( ID ) + - ( false ) ] bool var ID : ( ] bool } func ID [ ) { }",
  "func ID ( ) { var ID : [ 123 / - ID ( ) + - - - ( ID ) + - ( false ) ] bool var ID : ( } bool ] func ID [ ) { }",
  "func ID ( ) : [ false - false * - - > 123 + ( true ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : [ false - false * true - > 123 + ( - ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : [ false - false * true - > 123 + ( - ) ID [ ] int { } func ] ( ) { }",
  "func ID { ID : bool , ID : bool ) : [ ( ( - false > - ID ) ) ] bool { } func ID ( ) ( }",
  "func ID { ID : bool , ID : bool ) : [ ( ( - false > - ID ) ) ID bool { } func ] ( ) ( }",
  "func ID { ID : bool , ID ) bool ) : [ ( ( - false > - ID : ) ID bool { } func ] ( ) ( }",
  "func ID ( ID : bool , ID : int ) : [ ] [ - ( 123 * ( ( ID ) ] * false ) ] [ ) [ ] [ ] int { }",
  "func ID ( ID : bool , ] : int ) : [ ] [ - ( 123 * ( ( ID ) ] * false ) ID [ ) [ ] [ ] int { }",
  "func ID ( int : bool , ] : ID ) : [ ] [ - ( 123 * ( ( ID ) ] * false ) ID [ ) [ ] [ ] int { }",
  "func ID ( ) { var ID : [ ] [ ) false * ID ( ) [ ID ] ( ] bool var ID : [ ] [ ] bool }",
  "func ID ( ) { [ ID : [ ] var ) false * ID ( ) [ ID ] ( ] bool var ID : [ ] [ ] bool }",
  "func ID ( ) { [ ID : [ ] var ) false * ID ( ) [ ID ] ( ] bool var ID : [ ] [ ] bool }",
  "func ID ( ) { print true / ( - ID - ( ( ( [ ID ) ) ) ] ) }",
  "func ID ( ) { print true / ( - ID - ( ( ( [ ) ) ) ) ] ID }",
  "func ID ( ID : int , ID : int , ID : [ - 123 * ID ( ) [ ( ID / ] [ ( ID ) ] ) ( - - ( ID ) ) ] int ) { }",
  "func ID ( ID : int , ID : ( , ID : [ - 123 * ID int ) [ ( ID / ] [ ( ID ) ] ) ( - - ( ID ) ) ] int ) { }",
  "ID func ( ID : int , ID : ( , ID : [ - 123 * ID int ) [ ( ID / ] [ ( ID ) ] ) ( - - ( ID ) ) ] int ) { }",
  "func bool ( ID : bool , ID : [ ] [ - true * ( false * - ( ( - ID ) ) / ID ) ] int , ID : ID ) { }",
  "func bool ( ID : bool , ID : [ ] [ - true * ) false * - ( ( - ID ( ) / ID ) ] int , ID : ID ) { }",
  "func bool ( ID : ID , ID : [ ] [ - true * ) false * - ( ( - ID ( ) / ID ) ] int , ID : bool ) { }",
  "func ID ( - { call ID ( ( false / ( - false / true / ) ID ) * 123 ) ) if - - 123 { } }",
  "func ID ( - { call ID ( ( false / ( - false / true / ) ID ) * 123 ) ) if - - 123 { } }",
  "func ID ( - { call ID - ( false / ( ( false / true / ) ID ) * 123 ) ) if - - 123 { } }",
  "func ID ( ID - [ ] [ - ID ( : - ID ( ID ) ) ] int ) { }",
  "func ID ( ID - [ ] [ - ID ( : - ID ( ID ) ] ) int ) { }",
  "func ID ( ID - [ ] [ - ID ( : - ID ( ID ) ] ) int ) { }",
  "func ID ( ID : [ ] bool , ID : 123 , ID : bool ) { { var ID : [ ] [ false ] bool } if - bool { } }",
  "func ID ( ID : [ bool bool , ID : 123 , ID : bool ) { { var ID : [ ] [ false ] ] } if - bool { } }",
  "func ID ( ID : [ bool bool , ID : 123 , ID : bool ) { { var ID : [ ] [ false ] } } if - bool { } ]",
  "func ID ( ID : : ] int , ID : bool ) [ int { var ID : bool var ID : bool while ID [ false ] { } while ID { } }",
  "func ID ( ID : : ] int , ID : bool ) [ int { var ID : bool var ID : bool while ID [ false ] { } while ID { } }",
  "func ID ( { : : ] int , ID : bool ) [ int ID var ID : bool var ID : bool while ID [ false ] { } while ID { } }",
  "func int ( ) { var ID : [ ] ID var ID : bool { var ID : [ ] [ 123 * ( - ID ) * - false ] int var ID : bool } call ID ( ) }",
  "func int ( ) { - ID : [ ] ID var ID : bool { var ID : [ ] [ 123 * ( - ID ) * var false ] int var ID : bool } call ID ( ) }",
  "func ID ( ID : bool - ID : [ , true / - ID ( ID [ ID ] [ ( ID ) ] ) * ID ] int ) { }",
  "func ID ( ID : bool - ID : [ , true / - ID ( ID [ ID ] [ ( ID ) ] ) * ID ] int ) { }",
  "func ID ( ID : bool - ID [ [ , true / - ID ( ID [ ID ] : ( ID ) ] ) * ID ] int ) { }",
  "func ID ( ID : ] - - ( true and ID [ - ID ] and ID ) [ bool ) { }",
  "func ID ( ID : ] - ID ( true and ID [ - - ] and ID ) [ bool ) { }",
  "func ] ( ID : ] - ID ( true and ID [ - - ID and ID ) [ bool ) { }",
  "func ID ( ) : bool { var ) : [ ] [ ( false * ID ( ) - - - true + ( ID ) ) ] int var ID : bool } func ID ( ID { }",
  "func ID var ) : bool { var ) : [ ] [ ( false * ID ( ) - - - true + ( ID ) ) ] int ( ID : bool } func ID ( ID { }",
  "func ID var ) false bool { var ) : [ ] [ ( : * ID ( ) - - - true + ( ID ) ) ] int ( ID : bool } func ID ( ID { }",
  "func ID ( ID int : ) { var ID : bool return }",
  "func return ( ID int : ) { var ID : bool ID }",
  "func ID ( ] : int { var ID : [ ] [ ] [ ] [ ID ( ID ) ) bool }",
  "func { ( ) { while - ( ( ( - - - ( - ( - ( ID ) ) ) ) ) ) ID } } func ID ( ) { }",
  "func { ( ) { while - ( ( ( - - - ( - ( - ( ID ) } ) ) ) ) ID ) } func ID ( ) { }",
  "func { ( ) { while - ( ( ( - - - ( - ( func ( ID ) } ) ) ) ) ID ) } - ID ( ) { }",
  "func ID ( ) : int { var ( : [ ( ID ID ( - ( - ( - ID ) ) ) ) ) ] bool var ID : [ ] int }",
  "func ID ( ) : int { var ( : [ ( ID ID - - ( ( ( - ID ) ) ) ) ) ] bool var ID : [ ] int }",
  "func ID { ID : bool ) : [ 123 / 123 * false + ID / ID [ - true ] [ - ( 123 ) ] - true ] int ( } func ID ( ) { }",
  "func ID { ID ID bool ) : [ 123 / 123 * false + ID / : [ - true ] [ - ( 123 ) ] - true ] int ( } func ID ( ) { }",
  "func ID { ID ID bool ) : [ 123 / ] * false + ID / : [ - true ] [ - ( 123 ) ] - true 123 int ( } func ID ( ) { }",
  "func ID ( ) : int { if - ID ( ) / 123 * false - ID [ { ID ) ] + true ( } }",
  "ID ID ( ) : int { if - func ( ) / 123 * false - ID [ { ID ) ] + true ( } }",
  "ID ID ( ) : int { if - func ( ) / 123 ) false - ID [ { ID * ] + true ( } }",
  "func ID ( ) : [ ] int { * ID : [ ] int while 123 - true / ( - - - true ) var ID { } }",
  "func ID ( ) : [ ] int { * ID } [ ] int while 123 - true / ( - - - true ) var ID { : }",
  "func ID ( ) : [ ] int { * ID } [ ] int while 123 - true / ( - - - true ) var ID { : }",
  "func ID ( ) : bool { var ID : [ 123 + - true ( ID / ID ) / true - 123 ] bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID / [ 123 + - true ( ID : ID ) / true - 123 ] bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID / [ 123 + - true ( ID ) ID : / true - 123 ] bool } func ID ( ) { }",
  ": ID ( ) : bool { var ID : [ ] int var ID func bool if ID ( ( ID ) ) { } call ID ( ) }",
  ": ID ( ) : } { var ID : [ ] int var ID func bool if ID ( ( ID ) ) { bool call ID ( ) }",
  ": ID ( ) : } { var ID : [ ] int var ID func bool if ID ( ( ID { ) ) bool call ID ( ) }",
  "ID ID ( func : int , ID : [ ] int ) : int { var ID : bool }",
  "ID ID ( func : int , ID var [ ] int ) : int { : ID : bool }",
  "func ID ( ) : ( { var ID : bool ID ( - bool - ID / - - ( ID ) / - false ) ) = 123 } func ID ( ) { }",
  "func ID - ) : ( { var ID : bool ID ( - bool ( ID / - - ( ID ) / - false ) ) = 123 } func ID ( ) { }",
  "func ID - ) : ( { var ID : bool ID ( - bool ( ID ) - - ( ID ) / - false ) / = 123 } func ID ( ) { }",
  "func ID ( ID : [ true * 123 / ( { - ID [ ID ] [ ID ] ) ] int ) { } func ID ( ) 123 }",
  "func ID ( ID : [ true * 123 / ( { - ID [ ID ] [ ID ] ) ] int ) { } func ) ( ID 123 }",
  "func ID ( ID 123 [ true * 123 / ( { - ID [ ID ] [ ID ] ) ] int ) { } func ) ( ID : }",
  "func ID ( ) : [ ] int { print true / 123 * ( - true / ID * ( false ID ) while - ) { } }",
  "func ID ( ) : [ ] int { print true / 123 * ( - true / ID * ( false ID ) while - ) { } }",
  "func ID ( ) : [ ] { { print true / 123 * ( - true / ID * ( false ID ) while - ) int } }",
  "func ID ( ID : [ ( ID ) false and - ( ID ) ) ( ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ( ) ) false and - ( ID ID ) ( ] int ) { } func ID ( ) { }",
  "func ( ( ID : [ ( ) ) false and - ( ID ID ) ( ] int ) { } func ID ID ) { }",
  "func ( ID ) { } func ID ( ) : [ ( ( ID ( ) ) ) ] [ ] int { }",
  "func ( ID ) ID } func ID ( ) : [ ( ( { ( ) ) ) ] [ ] int { }",
  "ID ( ID ) func } func ID ( ) : [ ( ( { ( ) ) ) ] [ ] int { }",
  "ID ID ( ID : bool ) : [ func ( ) [ 123 + ( ( - false ) ) + - ( 123 ) ] ] int { }",
  "ID ID ( ID : bool ) : [ func ( ) [ 123 + ( ( - false ) ) + - ( 123 ) ] ] int { }",
  "ID ID ( ID : bool ) : [ func ( ) [ 123 + ( ( - false ) ) ] - ( 123 ) ] + int { }",
  "func ID ( ID : [ ] bool , ID : [ - false * - ID - ( - ( - - false ) ) + - false ] bool , ID : bool ) { } func ID } ) { (",
  "func ID ( ID : [ ] bool , , : [ - false * - ID - ( - ( - - false ) ) + - false ] bool ID ID : bool ) { } func ID } ) { (",
  "func ID ( ID : [ ] bool , , : } - false * - ID - ( - ( - - false ) ) + - false ] bool ID ID : bool ) { [ func ID } ) { (",
  "func ID ( ID : [ - 123 * 123 - ID ( ) [ ID ( ) ] [ - - - ( ( - false ) ) ] ] int ) ( } func ID { ) { }",
  "func 123 ( ID : [ - ID * 123 - ID ( ) [ ID ( ) ] [ - - - ( ( - false ) ) ] ] int ) ( } func ID { ) { }",
  "func 123 ( ID : [ - ID * 123 - ID ( ) [ ID ( ) ] [ - - - ( ( - false ) ) } ] int ) ( } func ID { ) { ]",
  "func ID ( ) : int { { call ID ( ) return ID ( ) [ ( - false } ] [ ( ( ID ) ) ] ) print ( false ) } func ID ( ) { }",
  "func ID { ) : int { { call ID ( ) return ID ( ) [ ( - false } ] [ ( ( ID ) ) ] ) print ( false ) } func ID ( ) ( }",
  "func ID { ) : int { { call ID ( ) return false ( ) [ ( - ID } ] [ ( ( ID ) ) ] ) print ( false ) } func ID ( ) ( }",
  "func ID ( ) { var ID : [ ID * - true / false - [ [ false ] [ - ID ] ] [ ] ID ] [ ] int }",
  "func ID ( ) { var ID : [ [ * - true / false - [ [ false ] [ - ID ] ] ID ] ID ] [ ] int }",
  "func ID ( ) } var ID : [ [ * - true / false - [ [ false ] [ - ID ] ] ID ] ID ] [ ] int {",
  "func ID ( ) : int { var ID : bool var ID : [ true * - false / 123 ID ID + 123 ] bool } func - ( ) { }",
  "func ID ( ) : int { var ID : bool var } : [ true * - false / 123 ID ID + 123 ] bool ID func - ( ) { }",
  "func ID ( ) : / { var ID : bool var } : [ true * - false int 123 ID ID + 123 ] bool ID func - ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) : int { if true > - false + ID - true } } call ID ( ) { func ID ( ) { }",
  "func ID ( ID : [ ] bool , : ID bool ) : int { if true > - false + ID - true } } call ID ( ) { func ID ( ) { }",
  "bool ID ( ID : [ ] bool , : ID func ) : int { if true > - false + ID - true } } call ID ( ) { func ID ( ) { }",
  "func ID ( ) { print - ID ( ( ID / false * false ) ) } func ) ( ID { }",
  "func ID ( ) { print - ID ( ( ID / false * false ) ) } func ) ( ID { }",
  "func ID ID ) { print - ( ( ( ID / false * false ) ) } func ) ( ID { }",
  "func ID ( ) : bool { ID ID : int var var : bool call ID ( ) }",
  "func ID ( ) : bool { ID ID : var var int : bool call ID ( ) }",
  "func ID ( ) : bool { ID ID : var var int : ( call ID bool ) }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] [ - ID or ( ID ) or ( - ( { ) ) ] bool } func ID ( ) ID }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] [ - ID or ( ID ) or ( - ( { ) ) } bool } func ID ( ) ID ]",
  "func ID ( ) : bool { var ID ) bool var ID : [ ] [ - ID or ( ID : or ( - ( { ) ) } bool } func ID ( ) ID ]",
  "func ID ( ID ( [ : ID ( ) * ID * - ID [ ID ] [ false ] ) ] int ) { }",
  "func ID ( ID ( [ : ID ( ) * ID * - ID [ ID ] [ false ] ) ] int ) { }",
  "func ID ( ID ( [ : ID ( ) * ID * - ID [ ID ] [ false ] ) ] int ) { }",
  "func ID ( ) : [ ] int { var ID : [ ( 123 / 123 ] ID ) - int }",
  "ID ID ( ) : [ ] int { var func : [ ( 123 / 123 ] ID ) - int }",
  "ID ID ( ) : [ ] int { var func [ : ( 123 / 123 ] ID ) - int }",
  "func ID } ) { var ID : bool var ID : int { var ID : int var ID : bool if - ID { } call ID ( ) ( call ID ( ) }",
  "func ID } ) { var - : bool var ID : int { var ID : int var ID : bool if ID ID { } call ID ( ) ( call ID ( ) }",
  "func ID } ) { var ID : bool var ID : int { var - : int var ID : bool if ID ID { } call ID ( ) ( call ID ( ) }",
  "func ID ( ) { var ID : int var ID : [ ( bool if ( - ID ( ( true ) ) ) { } } func ID ] ) { }",
  "func ID ( ) { var ID : int var ID : [ ( bool if ( - ID ( ID true ) ) ) { } } func ( ] ) { }",
  "func ID ( ID { var ID : int var ) : [ ( bool if ( - ID ( ID true ) ) ) { } } func ( ] ) { }",
  "func ID ( ID : bool , ID : int , ID : / ) : [ - ID - ID / 123 int ( - true ) ] [ ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : / [ : [ - ID - ID / 123 int ( - true ) ] [ ] [ ] ) ] int { } func ID ( ) { }",
  "func ID } ID : bool , ID : int , ID : / [ : [ - ID - ID / 123 int ( - true ) ] [ ] [ ] ) ] int { } func ID ( ) { (",
  "func ID ( ID : bool , ID : [ true * 123 / 123 + ID ( ID ) + ( - - ) - true ) ( ] int , ID : [ ] int ) { }",
  "func ID ( ID : bool , ID : [ true * 123 / 123 + ID ( ID ) + ( [ - ) - true ) ( ] int , ID : - ] int ) { }",
  "func ID ( ID : bool , ID : [ true * 123 / 123 + ID ( ID ) + ( [ - ) - true ) ] ( int , ID : - ] int ) { }",
  "func ID ( ) { var ID : bool var ID : int if ID ( ( ( ID ) ) ) { } } func ID } ) { (",
  "func ID ( ) { var ID : bool var ( : int if ID ( ( ID ID ) ) ) { } } func ID } ) { (",
  "func ID ( ) { ) ID : bool var ( : int if ID ( ( ID ID ) ) var { } } func ID } ) { (",
  "func ID ( ) : bool { var ID : [ func - true * ID ( ( - ( false ) ) ) ] int var ID : int } - ID ( ) { }",
  "func ID ( ) : bool { var ID : [ func - true * ID ( } - ( false ) ) ) ] int var ID : int ( - ID ( ) { }",
  "func ID ( ) : bool { var ID : ( func - true * ID ( } - [ false ) ) ) ] int var ID : int ( - ID ( ) { }",
  "func ID ( ID : [ ( ID ( ( [ - ID ) ID ) ] ) ] int ) { }",
  "func ( ( ID : [ ( ID ( ID [ - ID ) ID ) ] ) ] int ) { }",
  "func ( ( ID : [ ( ID ) ID [ - ID ) ID ) ] ( ] int ) { }",
  "func ID ( ) : [ ] bool { var / : [ ] [ ] int return - 123 - false ID - - - ID / ID + ID } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var / : [ ] [ ] int return - false - 123 ID - - - ID / ID + ID } func ID ( ) { }",
  "func ID ( ) / [ ] bool { var : : [ ] [ ] int return - false - 123 ID - - - ID / ID + ID } func ID ( ) { }",
  "func : ( ) { var ID ID [ ] int while true <= ID ( ( ID ) ) { } }",
  "func : ( ) { var ID ID [ ] int while true <= ID ( { ID ) ) ( } }",
  "func : ( ) { var ID ID [ <= int while true ] ID ( { ID ) ) ( } }",
  "func ID ( ID : int ID { var ID : int var ID : bool call ID ( 123 / - - ) ( ) * ( - true ) ) }",
  "func ID ( ID : int ID { var ID : ) var ID : bool call ID ( 123 / - - ) ( int * ( - true ) ) }",
  "func ID ( ID : int ID { var ID : ) var ID : bool call ID ( 123 / - - ) ( int * ( - true ) ) }",
  "func ID ( ID : int , ID : bool , ID : int var { ) ID : int call ID ( ) { var ID : int var ID : bool } } func ID ( ) { }",
  "func ID ( ID : : , ID : bool , ID : int var { ) ID int int call ID ( ) { var ID : int var ID : bool } } func ID ( ) { }",
  "func ID ( ID : : , ID : bool , ID : int var { ) ID int int call ID ( ) { var ID : int ID ID : bool } } func var ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ] [ false / ID [ 123 ] [ ID ] / ID ] func ] int var ID : [ ] [ ] [ ] int } [ ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ] [ false / ID [ 123 ] [ ID ] / ID ] func ] int var ID : [ ] [ ] [ ] int } [ ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ] [ false / ID [ 123 ] [ ID ] / ID ] func ] int var ] : [ ] [ ] [ ID int } [ ID ( ) { }",
  "func ID ( ID : [ ID * ( 123 * ( ( ( - 123 ] ) ) * ID ) / ID ) int ) { } func ID ( ) { }",
  "func ID ( ID : [ ID * ( 123 * ( ( ( - 123 ] ) ) * ID ) / ID ) int ) { } func ID ( ) { }",
  "func ID ( ID : [ ID * ( 123 * ( ( ( - 123 ] int ) * ID ) / ID ) ) ) { } func ID ( ) { }",
  "func ID ( ID : int { : bool ) var ID : bool var ID : int } func ID ( ) { var ID : [ ] [ ] bool }",
  "func ID ( ID : int ] : bool ) var ID : bool var ID : int } func ID ( ) { var ID : [ ] [ { bool }",
  "func ID ( ) { ) - - ( ( ( ( ( - - true ) ) print ) ) ID = ( true ) }",
  "func ID ( ) { ) - - print ( ( ( ( - - true ) ) ( ) ) ID = ( true ) }",
  "func ID ( ) { ) - - print ( ( ( ( - - true ) ) ( ) ) ID = ( true ) }",
  "func ID ( bool : ID ) : [ ] int { }",
  "func ID } bool : ID ) : [ ] int { (",
  "ID ID } bool : func ) : [ ] int { (",
  "func ID ( ID : [ ( false } - - ( 123 <= - ID ) ) ] int ) { } func ID ( ) { -",
  "func : ( ID ID [ ( false } - - ( 123 <= - ID ) ) ] int ) { } func ID ( ) { -",
  "func : ( ID ID [ ( false } - - ( 123 <= - ID ID ) ] int ) { } func ) ( ) { -",
  "func ID ( ) { var ID : bool var ID : bool call ID ( ) - ID - ID ( ) ) ID = ( ID - }",
  "func ID ( ) { var ID : bool var ID : bool ID ID ( ) - call - ID ( ) ) ID = ( ID - }",
  "func ID ( ) { ID ID : bool var ID : bool ID ID ( ) - call - ID ( ) ) ID = ( var - }",
  "func ID ( ) { var ID : [ - - ( ( ( ID ] ) ) ) [ ] int }",
  "- ID ( ) { var ID : [ - func ( ( ( ID ] ) ) ) [ ] int }",
  "- ID ( ) ) var ID : [ - func ( ( ( ID ] ) { ) [ ] int }",
  "func ID ( ) { var ID : bool var ID : [ ] int * - - ( 123 / false print ID ) if - 123 { } } func ID ( ) { }",
  "func { ( ) { var ID : bool var ID : [ ] int * - - ( 123 / false print ID ) if - 123 ID } } func ID ( ) { }",
  "func { ( ) { var ID : bool var ID : [ ] int * - - ( 123 / false print ID ) if } 123 ID - } func ID ( ) { }",
  ") ID ( ID : [ ] [ - ( ( ID [ ( - - ( 123 ) ) ] [ - ( ( true ) ) ] ) ) ] int func { }",
  ") ID ( ID : [ ] [ - ( ( ID [ ( ( - - 123 ) ) ] [ - ( ( true ) ) ] ) ) ] int func { }",
  ") ID [ ID : [ ] ( - ( ( ID [ ( ( - - 123 ) ) ] [ - ( ( true ) ) ] ) ) ] int func { }",
  "func ID ( ID : bool , ID var int , ID : bool ) : bool { : ID : [ ] bool var ID : int while - ( - - true ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID var int , ID : bool ) : bool { ] ID : [ : bool var ID : int while - ( - - true ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( , : bool ID ID var int , ID : bool ) : bool { ] ID : [ : bool var ID : int while - ( - - true ) { } call ID ( ) } func ID ( ) { }",
  "func ID - ID : bool , ID : bool ) : bool { var ID : bool { var ID : bool var ID : int call ID ( ( - ( ( - - ( ID ) ) ) ) } } func ID ( ) { }",
  "func ID - ID : bool , ID : bool ) : bool { var ID : bool { var ID : bool var ID : int call ID ( ( - ( ( - - ( ID ) ) ) ) } } func ID ( ) { }",
  "func ID - ID : bool , ID : bool ) ID bool { var ID : bool { var ID : bool var ID : int call ID ( ( - ( ( - - ( ID ) ) ) ) } } func : ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool , call : [ ] bool ) : bool { ID ID ( true * ( ID ) * - ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool , call : [ ] bool ) : bool { ID ID ( true * ( ID ) * ) ID - { } } func ID ( ) { }",
  "func ID ( ID : ] [ bool , ID : bool , call : [ ] bool ) : bool { ID ID ( true * ( ID ) * ) ID - { } } func ID ( ) { }",
  ") ID ( func : int { ID ( ) [ - true * ID ( ID ) ] [ ID ] = ID } func ID ( ) { }",
  ") ID ( func : int { ( ( ) [ - true * ID ID ID ) ] [ ID ] = ID } func ID ( ) { }",
  "} ID ( func : int { ( ( ) [ - true * ID ID ID ) ] [ ID ] = ID ) func ID ( ) { }",
  "func ID ( ID : [ ] [ true and ) ( ID ( false ) - ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ true and ) ( ID ( false ) - ] [ ] [ ] bool ) { } func ID ( ) } {",
  "func ID ( ID : [ ] [ true and ) ( [ ( false ) - ] ID ] [ ] bool ) { } func ID ( ) } {",
  "func ID ( ID : bool , ID : int ) : bool { var ID : int print ( ID ) ID ] [ }",
  "func ID ( ID : bool , ID : int ) : bool { var ID : int print ( [ ) ID ] ID }",
  "func ID ( ) : bool , ID : int ID : bool { var ID : int print ( [ ) ID ] ID }",
  "func ID ( ) : bool { var ID : * false * - false + true [ ( - true ) + true ] [ ] int }",
  "func ID ( ) : bool { } ID : * false * - false + true [ ( - true ) + true ] [ ] int var",
  ": ID ( ) : bool { } ID func * false * - false + true [ ( - true ) + true ] [ ] int var",
  "func ID ( ID : [ ] int ) : [ ] bool { var ID : [ ( ID ( ) ) ] } bool",
  "func ID ( ID } [ ] int ) : [ ] bool { var ID : [ ( ID ( ) ) ] : bool",
  "func ID ( ID } [ ] int ) : [ ] bool { var : ID [ ( ID ( ) ) ] : bool",
  "func ID ( ID : ID , ID : [ ] int ) { var bool : int { var ID : int var ID : [ ] bool while ( true ) { } } }",
  "func ID ( ID : : , ID : [ ] int ) { var bool : int { var ID : int var ID ID [ ] bool while ( true ) { } } }",
  "func ID ( ID : : { ID : [ ] int ) { var bool : int { var ID : int var ID ID [ ] bool while ( true ) , } } }",
  "func ID ( ) : [ ( ( ID * ID [ - ( ID ) ] [ - ( ( - - - ( ( ID ) ) ) ) ] * - ( - - - false ) ) ) ] [ ] int { { func ID ( ) } }",
  "func ID ( ) : [ ( ( ID * ] [ - ( ID ) ] [ - ( ( - - - ( ( ID ) ) ) ) ] * - ( - - - false ) ) ) ID [ ] int { { func ID ( ) } }",
  "func ID ( ) : [ ( ( ID * ] [ - ( ID ) ] [ - ( ( - - - ( ( ID ) ) ) ) ] * - ( - - { false ) ) ) ID [ ] int - { func ID ( ) } }",
  "func ID ( ) : int { var ID : [ ] 123 ] [ 123 * - - ( - 123 ) / [ ] int } func ID ( ) { }",
  "int ID ( ) : int { var ID : [ ] 123 ] [ 123 * - - ( - 123 ) / [ ] func } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] } , ID : int ) : int { if ID ( ) + - true { bool ID = ( ID ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] } , ID : int ) : int { if ID ( ) + - true { bool ID = ( ID ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] } , ID : int ) : int { if ID ( ) + bool true { - ID = ( ID ) } func ID ( ) { }",
  "ID ID ( ) : int { var ID : int var ID : int } func ID ( ID : bool ) : bool { var func : int }",
  "ID ID int ) : int { var ID : int var ID : int } func ID ( ID : bool ) : bool { var func : ( }",
  "ID ID int ) : int { var ID : int var ID : } } func ID ( ID : bool ) : bool { var func : ( int",
  ", ID ( ID : int , ID : int func ID : [ ] int ) { var ID : bool var ID : bool if ( - ( ID ) ) { } }",
  ", ID ( ID : int , ID : bool func ID : [ ] int ) { var ID : int var ID : bool if ( - ( ID ) ) { } }",
  ", ID ) ID : int , ID : bool func ID : [ ] int ) { var ID : int var ID : bool if ( - ( ID ( ) { } }",
  "func ID ( ID [ : ( - true / ( ( 123 ) ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID [ : } - true / ( ( 123 ) ) ) ] [ ] int ) { ( func ID ( ) { }",
  "func ID ( ID [ : } - true / ( ( 123 ) ) { ] [ ] int ) ) ( func ID ( ) { }",
  "func ID ( ID : [ } int , ID : int , ID : int ) { var ID : bool var ID : [ ] bool return ]",
  "func ID ( ID : [ } int , ID : int , ID : int ID { var ) : bool var ID : [ ] bool return ]",
  "func - ( ID : [ true * - false ID ID ( ) [ ( ID ) ] [ ( ID ) ] - - - ( true ) ] [ ] bool ) { } func ID ( ) { }",
  "func - ( ID : [ true * - false ID ID ( ) [ ( ID true ] [ ( ID ) ] - - - ( ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func - ( ID : [ true * - false ID ID ( ) [ ( ID true ] [ ( ID ) ] - - - ( ) ) ] [ ] bool ) { func } ID ( ) { }",
  "func ID ( ID : bool } : [ 123 / true and ( ID / false ) ] bool { )",
  "func ID ( ID : bool } : / 123 / true and ( ID [ false ) ] bool { )",
  "func ID ( ID : bool } : / 123 / true ID ( and [ false ) ] bool { )",
  "func ID ( ID : bool , ID : bool , ID : bool ) : int { var ID ID int var ID : bool : ( ) = - 123 while ( - ID ) { } }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : int { var ID - int var ID : bool : ( ) = ID 123 while ( - ID ) { } }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : int { var ID - int var ID : bool : ( ) = ID 123 while ( - ID ) { } }",
  "func ID ( ID : bool , ID : [ ] int ) { var ID bool int var ID : : }",
  "func ID ( ID : bool bool ID : [ ] int ) { var ID , int var ID : : }",
  "func ID ( ID : bool } ID : [ ] int ) { var ID , int var ID : : bool",
  "func ID ( ) { ) ID : bool ID ( true * ( ID - ( - false ) ) * - - 123 var = ( ID ) if ID { } }",
  "func ID ( ) { ) ID : bool ID ( true * ( ID - ( - false ) ) * - - 123 var = ( ID ) if ID { } }",
  "func ID ( ) { ) ID : bool ID ( true - ( ID - ( - false ) ) * - * 123 var = ( ID ) if ID { } }",
  "func ID ( ID : int , ID : bool ) ) [ ] bool { var ID : int print - ID ( ) / ( ( ID : ) while true { } }",
  "func ID ( ID : int , ID : bool ) ) [ ] bool { var ID : int print - ID ( ) true ( ( ID : ) while / { } }",
  "func ID ( ID : int , ID bool bool ) ) [ ] : { var ID : int print - ID ( ) true ( ( ID : ) while / { } }",
  "func * ( ID : [ ] [ ID ( ) [ 123 ID - - ( ID ) ] [ ( ( ID ) ) ] ] bool ) { }",
  "func * ( ID : [ ] [ ID ] ) [ 123 ID - - ( ID ) ] [ ( ( ID ) ) ( ] bool ) { }",
  "func * ( ID : [ ] [ ID ] ) } 123 ID - - ( ID ) ] [ ( ( ID ) ) ( ] bool ) { [",
  "func ID ( ID ) int , ID : bool ) : [ ] [ ( ID ( ) [ false ] [ - ( ( - - ID ) : ] ) ] bool { } func ID ( ) { }",
  "func ID ( ID ) int , ID : bool ) : false ] [ ( ID ( ) [ [ ] [ - ( ( - - ID ) : ] ) ] bool { } func ID ( ) { }",
  "func ID ( ID ) int , ID : bool ) : false ] [ ( ID ( ) [ [ ] [ - ( ( - - ID ) : ] ) ] } { bool func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ( } - 123 ) ) ] bool var ID : bool (",
  "func ID ( ID : int , ID : bool ) { var ID : [ ( } - 123 ) ) ] bool var ID : bool (",
  "[ ID ( ID : int , ID : int , ID : func ] bool ) : int { var ID : int var ID : [ ID ] int }",
  "[ ID ( ID : int , ID : int , ID : func ] bool ) : int { var ID : ID var ID : [ int ] int }",
  "[ ID ( ID : int , ID : int , ID : func ] bool ) : int { var ID : ID var ID : [ int ] int }",
  "func ID ( ID : bool , ID : int , ID : bool ) : bool { var ] : [ ] [ ] bool var ID : [ ID int return }",
  "func ID ( ID : bool , ID : ] , ID : bool ) : bool { var ] : [ int [ ] bool var ID : [ ID int return }",
  "func ID ( ID : bool ] ID : ] , ID : bool ) : bool { var , : [ int [ ] bool var ID : [ ID int return }",
  "func ID ( ) { var ID : [ ID ( bool [ ( ID ) ] [ - - - ( 123 ) ] ) ] [ ] [ ] ID var ID : [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID ( bool [ ( ID ) ] [ - - - ( 123 : ] ) ] [ ] [ ] ID var ID ) [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID ( bool [ ( ID ) ] [ - - - ( 123 : ] [ ] [ ] ) ] ID var ID ) [ ] int } func ID ( ) { }",
  "func ID ( ID : [ ( ID int - ID < ID ] [ - - ID ] ) ] [ ] [ ) { } func ID ( ) { }",
  "func ID ( ID [ [ ( ID int - ID < ID ] : - - ID ] ) ] [ ] [ ) { } func ID ( ) { }",
  "func ID ( ) : int { if ID ( ) - ( - false / ( { false ) ) + ( ID ) - } }",
  "func ID ( false : int { if ID ( ) - ( - false / ( { ) ) ) + ( ID ) - } }",
  "/ ID ( false : int { if ID ( ) - ( - false func ( { ) ) ) + ( ID ) - } }",
  "func ID ( ) { var ID : [ ] [ ] int var ID : bool return ID ( ) [ func ] [ ( 123 ) ] } true ID ( ) { }",
  "func ID ( ) { var ID : { ] [ ] int var ID : bool return ID ( ) [ func ] [ ( 123 ) ] } true ID ( ) [ }",
  "func ID ( ) { var ID : { ] [ ] int var ID 123 bool return ID ( ) [ func ] [ ( : ) ] } true ID ( ) [ }",
  "func ) ( ) { var ID : int var ID : [ ] bool call ID ( ) call ID ( ID * 123 ID } func ID ( ) { }",
  "func ( ) ) { var ID : int var ID : [ ] bool call ID ( ) call ID ( ID * 123 ID } func ID ( ) { }",
  "func ( ) ) { var ( : int var ID : [ ] bool call ID ID ) call ID ( ID * 123 ID } func ID ( ) { }",
  "func ID ( ID : bool ID ID : bool ) { var ID : bool if ID [ ( - , ) ] { } }",
  "func ID ( ID : bool ID ID : bool ) { var ID : bool if ID [ ( - , ) ] { } }",
  "func ID ( ID : bool ID ID : bool ) { var , : bool if ID [ ( - ID ) ] { } }",
  "func ID bool ) { var ID : int var ID : ( if true * true * true - - true { } } func ID ( ) { }",
  "func ID bool ) { - ID : int var ID : ( if true * true * true - var true { } } func ID ( ) { }",
  "func ID bool * { - ID : int var ID : ( if true * true ) true - var true { } } func ID ( ) { }",
  "bool ID ( ID : bool , ID : [ ] [ ] [ ] func ) { return }",
  "bool ID ( ID : bool , ID : [ ] [ ] [ ] func ) { return }",
  "func ID ( ) { var ID : int } func ID ( ID ( [ 123 * 123 == - ( ( ( - - - ( : ( ( ( ( ( - ( - ID ) ) ) ) ) ) ) ) ) ) ) ] bool ) { }",
  "func ID ( ) { var ID : int } func ID ( ID ( [ ) * 123 == - ( ( ( - - - ( : ( ( ( ( ( - ( - ID ) ) ) ) ) ) 123 ) ) ) ) ] bool ) { }",
  "func ID ( ) { var ID : int } func ID ( ID ( [ ) * 123 == - ( ( ( - - - ( { ( ( ( ( ( - ( - ID ) ) ) ) ) ) 123 ) ) ) ) ] bool ) : }",
  "func ID ( ID : [ ID ( ) [ ID ( ID func - true * true ) ] [ ID ] ] int ) { } * ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ ID ( ID func - true * true ) ] ) ID ] ] int ) { } * ID ( [ { }",
  "func ID ( ) { var ID : [ - ID [ ID ( ) [ - ( - ( ID ) ) ] ) [ ( ( ( ( - - ( true ] ) ) ) ) ] ] [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ID [ ( ( ) [ - ( - ( ID ) ) ] ) [ ( ( ( ( - - ID true ] ) ) ) ) ] ] [ ] int } func ID ( ) { }",
  "func ID ( ) [ var ID : [ - ID [ ( ( ) [ - ( - ( ID ) ) ] ) { ( ( ( ( - - ID true ] ) ) ) ) ] ] [ ] int } func ID ( ) { }",
  "func ID true ID : bool ) : [ - - ( * 123 - - ( - - ( ( - - ID ) ) ) - ( true ) ] [ ] int { } func ID ( ) { }",
  "func ID true int : bool ) : [ - - ( * 123 - - ( - - ( ( - - ID ) ) ) - ( true ) ] [ ] ID { } func ID ( ) { }",
  "func ID true int : bool ) : [ - - ( * 123 - - ( - - ( ( - - ID ) ) ) - ( true [ ] ) ] ID { } func ID ( ) { }",
  "func ID ( ) ] bool { var ID : [ ] bool var ID : [ false / ( ( ID ) ) : [ ] int } func ID ( ) { }",
  "func ID ID ) ] bool { var ID : [ ] bool var ( : [ false / ( ( ID ) ) : [ ] int } func ID ( ) { }",
  "func ID ID ) ] bool { var ID : [ ] bool var ( : [ false / ( ( ID ) ) : [ ] int } func ID ( ) { }",
  "func ID ( ID : int , ID { bool ) : [ ID [ 123 * - true + ID ] ] int : } func ID ( ) { }",
  "func ID ( ID : int , ID int bool ) : [ ID [ 123 * - true + ID ] ] { : } func ID ( ) { }",
  "func ID ( ID + int , ID int bool ) : [ ID [ 123 * - true : ID ] ] { : } func ID ( ) { }",
  "bool ID ( ) { var ID : [ ] bool var ID : [ ] [ - - ( 123 ) ] func } func ID ( ) { }",
  "bool ID - ) { var ID : [ ] bool var ID : [ ] [ - ( ( 123 ) ] func } func ID ( ) { }",
  "bool ID - ) { var ID : [ ] bool var ID : [ ] [ - ( ( } ) ] func } func ID ( ) { 123",
  "func ID ( ID : ( ( ID ( [ - ( ID ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : ( ( ID ( [ - ( ) ) ) ) ) ] int ) { } func ID ( ID { }",
  "func ID ( ID : ( - ID ( [ ( ( ) ) ) ) ) ] int ) { } func ID ( ID { }",
  "func ID ( ID : int , ID : bool ) { 123 ID : bool while - var / false and - true { } call ID ( ) } func ID ( ) { }",
  "func ID ( 123 : int , ID : bool ) { ID ID : bool while - var / false and - true { } call ID ( ) } func ID ( ) { }",
  "func ID ( 123 : int , : ID bool ) { ID ID : bool while - var / false and - true { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ - ID ( - true / ( - ID ) ] int } func ID * ) { }",
  "func ID { ID : int ) ( var ID : [ - ID ( - true / ( - ID ) ] int } func ID * ) { }",
  "func ID { ID } int ) ( var ID : [ - ID ( - true / ( - ID ) ] int : func ID * ) { }",
  "func ID ( ) { var ID : int var ID : int call ID ( ID [ ( ID ) ] ) 123 ] ) } func ID ( [ { }",
  "func ID ( ) { var ID : int var ID : int } ID ( ID [ ( ID ) ] ) 123 ] ) call func ID ( [ { }",
  "func ID ( ) { var int : ID var ID : int } ID ( ID [ ( ID ) ] ) 123 ] ) call func ID ( [ { }",
  "func ID ( ) : bool { var ID : [ ] int var ID : bool call ID ( ) int var ID : [ ] int var ID : { } }",
  "func ID ID ) : bool { var ID : [ ] int var ID : bool call ( ( ) int var ID : [ ] int var ID : { } }",
  "func ID ID ) : bool { var ID : [ ] int var ID : bool call ( ( ] int var ID : [ ) int var ID : { } }",
  "func ID ( ) { var ID : [ ] int { var ID : int var ID : [ ] bool while - - ( ) 123 { } print ( - ( - 123 ) ) } print ( ID ) }",
  "func ID ( ) { var ID : [ ] int { var ID : int var ID : [ ) bool while - - ( ) 123 { } print ( - ( - 123 ) ) } print ( ID ] }",
  "func ID ( ) { var ID : [ ] int { var ID : int var ID : [ ) bool while - - ( ) 123 { } print ( - ( - 123 ) ) } print ( ID ] }",
  "} ID ( ID : int ) { var ID : int } func ID ( ) { var ID : [ ] int func",
  "} ID ( ID : int ] { var ID : int } func ID ( ) { var ID : [ ) int func",
  "} ID ( ID : int ] { var ID : func } int ID ( ) { var ID : [ ) int func",
  "func [ ( ) { ID ( ID ( ) [ false * 123 + - true + ( ID ) ] ID 123 ] ) = ID call ID ( ) } func ID ( ) { }",
  "ID [ ( ) { func ( ID ( ) [ false * 123 + - true + ( ID ) ] ID 123 ] ) = ID call ID ( ) } func ID ( ) { }",
  "ID [ ( ) { func ( ID ( ) [ false * 123 ID - true + ( ID ) ] ID 123 ] ) = ID call + ( ) } func ID ( ) { }",
  "func ID ( ) : bool { while 123 func ID ( ID [ ID ] ) { } { } } + ID ( ) { }",
  "func ID ( ID : bool { while 123 func ID ( ID [ ID ] ) { } { } } + ) ( ) { }",
  "func ID ( ID : bool { while 123 func ID ( ID [ ID ) ) { } { } } + ] ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) ID var ID : [ ] [ - false / - { / ID ] bool var ID : [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID ID int , ID : int , ID : bool ) ID var ID : [ ] [ - false / - { / : ] bool var ID : [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID ID int , ID : int , ID : bool ) ID var ID : [ ] [ - false / - { ( : ] bool var ID : [ ] [ ] int } func ID / ) { }",
  "func ID ( ID : bool ) { var ID : bool return ( ( - false * ID / ( ID ) ) ) ) func ID ( } { }",
  "func ID ( ID : bool ) { var ID : bool false ( ( - return * ID / ( ID ) ) ) ) func ID ( } { }",
  "func ID ( ID : bool ) { var ID : bool false ( ( - return * ID / ( ID func ) ) ) ) ID ( } { }",
  "func ID ( ) { } var ID : [ ] int var ID : int print ( 123 / 123 ) print ID } } func ID ( ) { {",
  "func ID ( ) { } var ID : [ ] int var ID : int print ( 123 / 123 ) print ID } } func ) ( ID { {",
  "} ID ( ) { } var ID : [ ] int var ID : int print ( 123 / 123 ) print ID } func func ) ( ID { {",
  "func ID ( ) : bool { var ID : int var ID : bool } func ID ( ) : [ ] : { var ID bool [ ] [ ] bool }",
  "func ID ( ) : bool { var ID : int var ID : bool } func ID ( ) : [ ] : { var ID bool [ ] [ ] bool }",
  "func ID ID ) : bool { var ID : int var ID : bool } func ID ( ) : [ ] : { var ( bool [ ] [ ] bool }",
  "func ID ( ID : [ - - ( false ) 123 * ID [ true ] [ ( ID ) ] / ] bool ) { }",
  "func ID ( ID : int , ID : [ ] [ - - ID [ [ / - false ] ] 123 ] bool , ID : [ ] int ) { }",
  "func ID ( ID : int , ] : [ ] [ - - ID [ [ / - false ID ] 123 ] bool , ID : [ ] int ) { }",
  "func ID ( ID : int , ] : ) ] [ - - ID [ [ / - false ID ] 123 ] bool , ID : [ ] int [ { }",
  "func ID ( ID : bool , ID : ID - false / ( ( ID ( ) ) ) ] int , ID : [ ] bool ) { } func [ ( ) { }",
  "func ID ( ID : bool , ID : ID - false / ( ( ID ( ) ) ) ] [ , ID : [ ] bool ) { } func int ( ) { }",
  "func ID ( ID : bool , ID ) ID - false / ( ( ID ( ) ) ) ] [ , ID : [ ] bool : { } func int ( ) { }",
  "func ID ( ) { var ID bool : var ID : int }",
  "func ID ( ) { var ID bool : var ID : int }",
  "func ID : ) { var ID bool ( var ID : int }",
  "func ID ( ) { print ID ( ( 123 ID ( ID ) and true ) ) call and ( ) } func ID ( ) { }",
  "func ID ( ) { call ID ( ( 123 ID ( ID ) and true ) ) print and ( ) } func ID ( ) { }",
  "func ID ( ) { call ID ( ( 123 ID ( ID ID and true ) ) print and ( ) } func ) ( ) { }",
  "func ID ( ID : [ ID ( 123 * true <= - true / ( ( - ( ID ) ) ) ) ] int ) { } ) ID ( func { }",
  "func ID ) ID : [ ID ( 123 * true <= - true / ( ( - ( ID ( ) ) ) ] int ) { } ) ID ( func { }",
  "func ID ) ID : [ ID { 123 * true <= - true / ( ( - ( ID ( ) ) ) ] int ) { } ) ID ( func ( }",
  "func ID ( ) : [ 123 * ( - ID [ true - bool ( ID ) ] [ ( ID ) ] ) ] - { }",
  "func ID ( ) : [ 123 * ( - ID [ true - bool ( ID ) ] [ ( ID ) ] ) ] - { }",
  "func ID ( ) : [ 123 * ( - ID [ true - bool ( ID ) } [ ( ID ) ] ) ] - { ]",
  "func ID ( ID : [ ] bool ) : [ ( ( 123 / ( ( - - 123 ) ) * - ) true - ) ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : ) ] bool ) : [ ( ( 123 / ( ( - - 123 ) ) * - ) true - ) ] [ ] [ ] bool { } func ID ( [ { }",
  "func ID ( ID : ] ) bool ) : [ ( ( 123 / ( ( - - 123 ) ) * - ) true - ) ] [ ] [ ] bool { } func ID ( [ { }",
  "func ID ( ) { ID = ( true / ID ( } [ 123 ] * ( - ID ) ) )",
  ") ID ( ) { ID = ( true / ID ( } [ 123 ] * ( - ID ) func )",
  ") ID ( ) { ID = ( true / ID 123 } [ ( ] * ( - ID ) func )",
  "func ID ( - : int { print ID [ 123 / ID ( ( false ) ) * true ] [ ) ( ID ) ] }",
  "func ID ( ID : bool , ID : [ ] bool { { var ID : [ ] int var ID : [ ] bool while - - - ID { } while false ) } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool { { var ID : [ ] int var ID : [ ] bool while - - - ID { } while false ) } } func ID ( ) { }",
  "func ID ( ID : bool , ID var [ ] bool { { : ID : [ ] int var ID : [ ] bool while - - - ID { } while false ) } } func ID ( ) { }",
  "func ) ( ) { var ID : [ ( ID ( ) [ ( - - ( ID ID ) ] [ ID ] ) ] int }",
  "] ) ( ) { var ID : [ ( ID ( ) [ ( - - ( ID ID ) ] [ ID func ) ] int }",
  "] { ( ) ) var ID : [ ( ID ( ) [ ( - - ( ID ID ) ] [ ID func ) ] int }",
  "func ID ( ) { var ID { int ID ( ID [ ID - ( ID ) ] ) = ID } func ID ( ) : }",
  "func ID ( ) { var ID { int ID ( ID [ ID } ( ID ) ] ) = ID } func ID ( ) : -",
  "func ID ( ID : [ true * false - ID [ ( ID ) - [ ( ID ) ] ] ID ] [ ] int ) { }",
  "func ID ( ID ID [ true * false - ID [ ( ID ) - [ ( ID ) ] ] : ] [ ] int ) { }",
  "func ID ( ID ID [ true * false - ID [ ( ID ) - [ ( ID ) ] ] : ] [ ] int ) { }",
  "func ID ( ID : int : ) bool { if ID [ 123 * - - 123 - ID - ID ] { } }",
  "func ID ID ( : int : ) bool { if ID [ 123 * - - 123 - ID - ID ] { } }",
  "func ID ID ( : int : ) bool { if ID [ 123 * - - - - ID 123 ID ] { } }",
  "func ID ( ID : [ ] bool , ID : bool ) { while ID [ - ( ( ) ) true ] [ ID ] { } call ID ( ) }",
  "func ID ( ID : [ ] bool ] ID : bool ) { while ID [ - ( ( ) ) true , [ ID ] { } call ID ( ) }",
  "func ID ( ID : [ ] bool ] ID : bool ) { while ID ( - ( [ ) ) true , [ ID ] { } call ID ( ) }",
  "func ID ( ID : int ) : bool { return ID : bool var }",
  "func ID ( bool : int ) : bool { return ID : ID var }",
  "func ID ( var : int ) : bool { return ID : ID bool }",
  "func ID ( ) { var ID : [ ] int var ID : [ true + false * ( ( ( ( ( true ) ) ID ) ) - - ) ] bool }",
  "func ID ( ) { ID ID : [ ] int var var : [ true + false * ( ( ( ( ( true ) ) ID ) ) - - ) ] bool }",
  "func ID ( : { ID ID ) [ ] int var var : [ true + false * ( ( ( ( ( true ) ) ID ) ) - - ) ] bool }",
  "func ID ( ID : bool ) : int { var ID : bool var ID : bool print 123 and ID [ ID ] and false ] [ - ID } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : bool var ID : bool print 123 and ID [ false ] and ID ] [ - ID } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : bool ID ID : bool print 123 and ID [ false ] and var ] [ - ID } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { if - 123 / ID ( ( false ( ) * ( - ( ) ( 123 ) ) ) ) { } }",
  "func ID ( ID : [ ] int ) { if - 123 123 ID ( ( false ( ) * ( - ( ) ( / ) ) ) ) { } }",
  "func ID ( ID : [ ] int ) { if - ) 123 ID ( ( false ( ) * ( - ( ) ( / ) ) ) 123 { } }",
  "or ID ( ID : bool , ID : bool ) : int { var ID : int while false < false func false { } }",
  "or ID ( ID ID bool , : : bool ) : int { var ID : int while false < false func false { } }",
  "or ID ( } ID bool , : : bool ) : int { var ID : int while false < false func false { ID }",
  "func ID ( ID : bool , ID : bool ) { } func } ( ID : int , ID : [ ( - ID ) ] bool , ID : bool ) { ID",
  "ID ID ( ID : bool , func : bool ) { } func } ( ID : int , ID : [ ( - ID ) ] bool , ID : bool ) { ID",
  "ID ID ( ] : bool , func : bool ) { } func } ( ID : int , ID : [ ( - ID ) ID bool , ID : bool ) { ID",
  "func ID ( ID } bool ) { var ID : int call ID ( ) return - ( 123 * 123 / ID ) : func ID ( ) { }",
  "func ID ( ID } bool ) 123 var ID : int call ID ( ) return - ( 123 * { / ID ) : func ID ( ) { }",
  "func ID ( ID } ID ) 123 var ID : int call ID ( ) return - ( 123 * { / ID ) : func bool ( ) { }",
  "func ID ( ) int bool { var ID : [ ( - false / false * ID [ - ( false ) ] [ 123 ] ) ] [ ] [ ] : } func ID ( ) { }",
  "func ID ( ) int bool { var ID : [ ( - false ) false * ID [ - ( false / ] [ 123 ] ) ] [ ] [ ] : } func ID ( ) { }",
  "func ID ( ] int bool { var ID : [ ( - false ) false * ID [ - ( false / ) [ 123 ] ) ] [ ] [ ] : } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : int return ID [ - false / ID / - ) - ( ( - - false ) - ] [ 123 ] }",
  "func ID / ) : bool { var ID : bool var ID : int return ID [ - false / ID ( - ) - ( ( - - false ) - ] [ 123 ] }",
  "func ID / : : bool { var ID : bool var ID ) int return ID [ - false / ID ( - ) - ( ( - - false ) - ] [ 123 ] }",
  "func ID ( ) { var ID : bool ID ID : [ ] int } func var ( ID : bool , ID : bool ) : bool { ID = true }",
  "func ID ( ) { var ID : bool ID ID ID [ ] int } func var ( ID : bool , : : bool ) : bool { ID = true }",
  "func ID ( ) { var true : bool ID ID ID [ ] int } func var ( ID : bool , : : bool ) : bool { ID = ID }",
  "func : ( ) : int { var ID ID bool var ID : bool ID [ ID [ true ] [ ( ID ) ] ] [ - ID ] = ID ID = ( ID ) }",
  "func : ( ) : int { var ID ID bool var ID : bool ID [ ID [ true ] [ ( ID ) ] ] [ - ID ] = ID ID = ( ID ) }",
  "func : ( ) : int { var ID ID bool var ID : ID ID [ ID [ true ] [ ( ID ) ] ] [ - ID ] = ID bool = ( ID ) }",
  "func ID ( ) : bool { var ID : int } func { ( ) ID var ID : bool var ID : [ ] [ ] bool }",
  "func ID ( ) { var ID ID int while : ( 123 * ( ( 123 ) ) * true ) { } }",
  "var ID ( ) { func ID ID int while : ( 123 * ( ( 123 ) ) * true ) { } }",
  "var ID ( ) { func ID ID 123 while : ( int * ( ( 123 ) ) * true ) { } }",
  "func ID ( ) { var ID : int if } true * ( 123 / ID ) ) { } while - true { } (",
  "func ID ( ) { var ID : int if } true * ( true / ID ) ) { } while - 123 { } (",
  "func ID ( ) { var ID : int if } true * ( true / } ) ) { } while - 123 { ID (",
  "func ID ( ID : bool { var ID : bool var ID : int print ( ( ( ( ( ( ( ID ) ) ) ) ) ) ) ) = ID }",
  "func ID ( ID : bool { var ) : bool var ID : int print ( ( ( ( ( ( ( ID ) ) ) ) ) ) ) ID = ID }",
  "func ID ( ID : bool { var ) : bool var ID : int print ( ( = ( ( ( ( ID ) ) ) ) ) ) ) ID ( ID }",
  "func ID ( ) : [ ] bool { var ID : [ ID [ - ID int - - false ] ] = ID }",
  "func ID ( ) : [ ] bool { var ID : false ID [ - ID int - - [ ] ] = ID }",
  "func ID ( ) : [ ] bool { var ID : false ID [ - ID int - - [ ] ] = ID }",
  "func ID ( ID : [ ( - - ( ID [ ID ] ) } ] [ ] int ) { )",
  "func ID ( ) : [ ( - - ( ID [ ID ] ) } ] [ ] int ID { )",
  "func ID ( ) ID [ ( - - ( ID [ : ] ) } ] [ ] int ID { )",
  "func ID ( ) { var ( : bool ID ID - 123 / ID ( ) [ false ] [ ( - false ) ] ) = ( - - ID ) print true } func ID ( ) { }",
  "func ID ( ) { var ( : bool ID ID - func / ID ( ) [ false ] [ ( - false ) ] ) = ( - - ID ) print true } 123 ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int print ID ( ( [ ) 123 ) ] }",
  "func ID ( ) ID var ID : bool var ID : int print { ( ( [ ) 123 ) ] }",
  "func ID ( ) ID var ID : bool var ID : int print { ( ( [ ] 123 ) ) }",
  "func ID ( ) : [ ( { ( ID ( ID ( ) ) ) ) ] [ ] int - }",
  "func ID ( ) : [ ( { ( ID ( ID ] ) ) ) ) ( [ ] int - }",
  "func ID ( ) : [ ( { ( ID ( ID ] ) ) ) ) ( [ ] int - }",
  "func ID ( ID { var ) : int return ID [ ID ( ) [ ID ] [ 123 ] ] [ ID ] }",
  "] ID ( ID { var ) : int return ID [ ID ( ) [ ID ] [ 123 func ] [ ID ] }",
  "func ID ( ) { } int ID ( ) { var ID : func var ID : bool if false * ID ( ) * ( true ) { } }",
  "( ID ( ) { } int ID ( ) { var ID : func var ID : bool if false * ID ( ) * func true ) { } }",
  "( ID ( ) { } int ID ( ) { var ID : func var ID : bool ) false * ID ( if * func true ) { } }",
  "func ID ( } : bool ) : bool { var ID : [ ] [ ] bool ID func ID ( ID : [ ] bool , ID : int , ID : int ) { }",
  "func ID ( var : bool ) : bool { } ID : [ ] [ ] bool ID func ID ( ID : [ ] bool , ID : int , ID : int ) { }",
  "func ID ( var : bool ) : bool { } ID : [ int [ ] bool ID func ID ( ID : [ ] bool , ID : int , ID : ] ) { }",
  "func ID ( ID : int , ID : int ) { var ID : bool var ID : [ false / false * ( ( - 123 ) ] ) int } func ID ( ) { }",
  "func ID ( ID 123 int , ID : int ) { var ID : bool var ID : [ false / false * ( ( - : ) ] ) int } func ID ( ) { }",
  "func ID ( ) 123 int , ID : int ) { var ID : bool var ID : [ false / false * ( ( - : ID ] ) int } func ID ( ) { }",
  "func ID ( ) : int { ID ID : bool return } func var ( ID : [ ID [ 123 ] ] bool ) { }",
  "func ID ( ) ID int { ID : : bool return } func var ( ID : [ ID [ 123 ] ] bool ) { }",
  "func ID ( int ID ) { ID : : bool return } func var ( ID : [ ID [ 123 ] ] bool ) { }",
  "func ID ( ) { var ID : int return } func ID ( int { var ID : ) }",
  "func ID ( ) { var ID : ID return } func ID ( int { var int : ) }",
  "func ID ( ) { var ID : ID func } return ID ( int { var int : ) }",
  "func ID ( ID : [ ( ( ( - ID [ ( ( 123 ) ) ] [ } ] ) ) ) ] int ) { false",
  "func ID ( ID : [ ( ( ( - ID [ ( ( 123 ) ) ] [ } ] ) ) ) ] int ) { false",
  "func ID ( ID : [ ( ( ( - ID [ ( ( 123 ) ) ] [ ) ] ) ) } ] int ) { false",
  "func and ( ID : [ ] [ true - 123 / false ID - ( false ) ] [ ] int ) { }",
  "- and ( ID : [ ] [ true - 123 / false ID func ( false ) ] [ ] int ) { }",
  "- and ( ID : [ - [ true ] 123 / false ID func ( false ) ] [ ] int ) { }",
  "func ID ( ) { var ID : bool var ID : [ ] - if ID ( ) [ int - ( false ) ] [ 123 ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ] - if ID ( ) [ int - ( false ) ( [ 123 ] { } } func ID ] ) { }",
  "func ID ( ) { var ID ( bool var ID : [ ] - if ID : ) [ int - ( false ) ( [ 123 ] { } } func ID ] ) { }",
  "func ID ( ID : [ true * false < false - ID ( ( ( ] ) ) ) + ID true bool ) { }",
  "func ID ( ID : [ true * false < false - ID ( ( ( ] ) ) ) + ID true bool ) { }",
  "func ID ( ID : [ true * false < false - ID ( ( ( ] + ) ) ) ID true bool ) { }",
  "func ID ( ID : * ] int ) { ID = ( - 123 [ ( ID ) / ( ( ( ID ) ) ) ) }",
  "func ID ( ID : * ] int ) { ID = ( - 123 / ( ID ) [ ( ( ( ID ) ) ) ) }",
  "func ID ( ID : * ] int ) { ID = ( - 123 / ( ID ) [ ( ( ( ID ) ) ) ) }",
  "func ID ( ) { while - ID ( - true * ID ( ID ) ) { } } func ID ( ) } {",
  "func while ( ) { ID - ID ( - true * ID ( ID ) ) { } } func ID ( ) } {",
  "func while ( ) { ID - ID ( ( true * ID - ID ) ) { } } func ID ( ) } {",
  "func : ( ) ID int { call ID ( ( - false / ID ( ID ) / 123 ) ) } func ID ( ) { }",
  "func : ( ) ID int { call ID ( ( - false / ID ( ID ) / 123 ) ) } func ID ( ) { }",
  "func : ( ) ID int { call ID ( ( - false / ID ( ID ) ( 123 ) ) } func ID / ) { }",
  "func ID ( ) : int { var ID ID bool var ID : bool while ID [ ( ID ) ] [ 123 ] { } while 123 { } } func : ( ) { }",
  "func ID ( ) : int { var ID ID bool var ID : bool while ID ( [ ID ) ] [ 123 ] { } while 123 { } } func : ( ) { }",
  "func : ( ) ID int { var ID ID bool var ID : bool while ID ( [ ID ) ] [ 123 ] { } while 123 { } } func : ( ) { }",
  "func ID ( ) : bool { var ID ( int ID [ ( 123 * : - true ) ) ] = ( false ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID ( int ID [ 123 ( * : - true ) ) ] = ( false ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID ( int : [ 123 ( * ID - true ) ) ] = ( false ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool , var : int ) { var ID : int ID ID : [ ] int { var ID : bool var ID : bool } }",
  "func ID ( ID : bool , var : int ) { var ID : int ID ID : [ ] int ID var ID : bool var { : bool } }",
  "func ID } ID : bool , var : int ) { var ID : int ID ID : [ ] int ID var ID : bool var { : bool } (",
  "func ID ( ) : bool { } ID : bool var ID : int { var ID : [ 123 / 123 - - ID + - ID ] int } call ID ( ) var func ID ( ) { }",
  "func ID ( ) : bool { } ID : bool var ID : int { var } : [ 123 / 123 - - ID + - ID ] int } call ID ( ) var func ID ( ) { ID",
  "func ID ( ) : bool { } ID : bool var ID : int { var } : [ 123 123 / - - ID + - ID ] int } call ID ( ) var func ID ( ) { ID",
  "func ID ( ID : int , ID : [ ID ( ( ID ( ( ( false ) ID ) ) ) ] [ ] bool , ID : bool ) { } func ) ( ) { }",
  "func ID ( ID ( int , ID : [ ID ( ( ID ( : ( false ) ID ) ) ) ] [ ] bool , ID : bool ) { } func ) ( ) { }",
  "func ID ( ID ( int , ID : [ ID ( ( ID ( ] ( false ) ID ) ) ) ] [ : bool , ID : bool ) { } func ) ( ) { }",
  "func ID [ ID : [ ] ( ] bool ) { { while ID ( false ) { } while ( ID ) { } } } func ID ( ) { }",
  "{ ID [ ID : [ ] ( ] bool ) { { while ID ( false ) { } while ( ID ) func } } } func ID ( ) { }",
  "{ ID [ ID : { ] ( ] bool ) { [ while ID ( false ) { } while ( ID ) func } } } func ID ( ) { }",
  "bool ID ( ID : [ ] [ ID ( - - ( 123 / ( ID ) ) ) ] [ ] func ) { }",
  "bool ID ( ID : [ ] [ func ( - - ( 123 / ( ID ) ) ) ] [ ] ID ) { }",
  "[ ID ( ID : [ ] [ func ( - - ( 123 / ( ID ) ) ) ] bool ] ID ) { }",
  "func ID : ID : int , ID : bool , ID : int ) { var ID ( bool } func ID ( ) : [ ] bool { var ID : bool var ID : int }",
  "func ID : : ID int , ID : bool , ID : int ) { var ID ( bool } func ID ( ) : [ ] bool { var ID : bool var ID : int }",
  "func ID : : ID int , ID : bool , ID : int ) { var ID ( bool } func ID ( ) : [ ] bool { var ID : bool var ID : int }",
  "func ID ) ( : bool { var ID : [ ] [ ] bool var ID : int return }",
  "func ID : ( ) bool { var ID : [ ] [ ] bool var ID : int return }",
  "func ID : ( ) bool { var ID : [ ] [ ] bool var ID : int return }",
  "/ ID ( ) : bool { } func ID ( ) : bool { var ID : bool if ID / - true func ( - ID ) { } }",
  "/ ID ( ) : bool { } func ID ( ) : bool { var ID : bool if ID / - true func ( - } ) { ID }",
  "/ ID ( ) : bool { } func ID ( ) : { bool var ID : bool if ID / - true func ( - } ) { ID }",
  "func ID ( ID : [ ] int ) : bool { if true / ( ID [ - ID ] [ false ] ) * ( ( true } ) { } call ID ( ) ) func ID ( ) { }",
  "func ID ( ID : [ ] int } : bool { if true / ( ID [ - ID ] [ false ] ) * ( ( true ) ) { } call ID ( ) ) func ID ( ) { }",
  "func ID ( ID : [ ] int } : bool { if true / ( ID [ - ID ] true false ] ) * ( ( [ ) ) { } call ID ( ) ) func ID ( ) { }",
  "func ID ( ( : [ ID [ ( true * ) - 123 ) ) ] ] bool { }",
  "func ID ( ( : [ * [ ( true ID ) - 123 ) ) ] ] bool { }",
  "func ID ( ( : 123 * [ ( true ID ) - [ ) ) ] ] bool { }",
  "func , ( ID : bool ID ID : int ) { return - ( - ID [ true ] ) }",
  "func , ( ID : ID ID ID : int ) { return - ( - bool [ true ] ) }",
  "func , ( ID : ID ID ID } int ) { return - ( - bool [ true ] ) :",
  "func ID ( ID : [ ] int ) : [ ID ( ) [ true * ID [ ( - - ( ID ) ) ] / ( int - ID ) ] ] [ ] - { }",
  "func ID ID ID : [ ] int ) : [ ID ( ) [ true * ID [ ( - - ( ID ) ) ] / ( int - ( ) ] ] [ ] - { }",
  "func ID ID ID - [ ] int ) : [ ID ( ) [ true * ID [ ( - : ( ID ) ) ] / ( int - ( ) ] ] [ ] - { }",
  "func ID int ) { var ID : ( var ID : [ ] bool while ( ( true ) ) { } }",
  "func ( int ) { var ID : ID var ID : [ ] bool while ( ( true ) ) { } }",
  "func ( int ) { var ID : ID var ID : [ true bool while ( ( ] ) ) { } }",
  "func ID ( ID ] [ ] bool , ID : [ ] [ ] [ : [ ID [ true ] [ true ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID ] [ ] bool , ID : [ ] [ ] [ : [ ID [ true ] [ true ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID ] [ bool ] , ID : [ ] [ ] [ : [ ID [ true ] [ true ] ] [ ] bool ) { } func ID ( ) { }",
  "ID ID ( ID : [ ] [ 123 / 123 - ( ( func ) ) ] bool ) { } func ID ( ) { }",
  "ID ID ( ID : [ ] [ 123 / 123 - ( ( } ) ) ] bool ) { func func ID ( ) { }",
  "ID ID ( ID : [ ] [ 123 / 123 - } ( } ) ) ] bool ) { func func ID ( ) { (",
  "func ID ( ) : true true + false * true * ID ( ) [ - ID ] + - - - - [ ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : ) true + false * true * ID ( ) [ - ID ] + - - - - [ ] [ ] [ ] bool { } func ID ( true { }",
  "func ID ( ) : ) true + false * true * ID ( ) [ - ID ] - + - - - [ ] [ ] [ ] bool { } func ID ( true { }",
  "func ID ( ID : bool ) : int { var ID : bool } func ID [ ID : int , ID : int , ID : ( ] int ) : [ ] bool { }",
  "func ID ( ID : bool ) : int int var ID : bool } func ID [ ID : int , ID : { , ID : ( ] int ) : [ ] bool { }",
  "func ID ( ID : bool ) : int int var ID : bool } func ID [ , : int , ID : { ID ID : ( ] int ) : [ ] bool { }",
  "func ID ( ID : int , ID : int , ID : bool ) : int - call ID ( 123 - - ( { ( ID ) ) ) }",
  "func ID ( ID : int , ID : int , ID ( bool ) : int - call ID ( 123 - - : { ( ID ) ) ) }",
  "func ID ( ID : int , : : int , ID ( bool ) : int - call ID ( 123 - - ID { ( ID ) ) ) }",
  "func ID ( ID : [ ] [ ( - ID ( ) / ( true ) ( * ( 123 ) ) ) ] bool ) { }",
  "func ID ( ID : [ ] ) ( - ID ( ) / ( true [ ( * ( 123 ) ) ) ] bool ) { }",
  "func ID } ID : [ ] ) ( - ID ( ) / ( true [ ( * ( 123 ) ) ) ] bool ) { (",
  "func ID ( ID : [ ] bool , ID : int , ID : bool } : int { var ID : bool var ID : int return )",
  "func ID ( ID : [ ] bool , ID : , int ID : bool } : int { var ID : bool var ID : int return )",
  "func ID ( ID : [ ] bool , ID { , int ID : bool } : int : var ID : bool var ID : int return )",
  "func ID ( ID : [ ( ( ID [ ( ( true ) ) ] int ( false ) ] ) ) ] [ ) { } func ID ( ) { }",
  "func ID ( ID : [ ( int ID [ ( ( true ) ) ] ( ( false ) ] ) ) ] [ ) { } func ID ( ) { }",
  "func ID ( ID { [ ( int ID [ ( ( true ) ) ] ( ( false ) ] ) ) ] [ ) { } func ID ( ) : }",
  "func ID ( ) : bool { var ID } int return - - ID ( - ( ( ( - true ) ) ) ) } func ID ( ) { :",
  "func ID ( ) : bool { var ID } int ) - - ID ( - ( ( ( - true ) ) ) return } func ID ( ) { :",
  "func ID ( ) : bool { var ID } int ) - - ID ( - ( ( ( - true ) ) ) return ( func ID } ) { :",
  "func ID ( ID : int ) : bool { var ID : bool ( [ - ID [ false ] [ - false ] ] = ( - ID ) } func ID ID ) { }",
  "func ID ID ID : int ) : bool { var ( : bool ( [ - ID [ false ] [ - false ] ] = ( - ID ) } func ID ID ) { }",
  "func ID ID ID : int ) : bool { var ( : bool ( [ - ID [ false ] [ - false ] ] = ( - ID ) } func ID ID ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : bool var ID : [ ( ID [ 123 ] ] ] [ ) [ ] bool }",
  "func ID ( ID : int ) ID : bool , { var ID : bool var ID : [ ( ID [ 123 ] ] ] [ ) [ ] bool }",
  "func ID ( : : int ) ID ID bool , { var ID : bool var ID : [ ( ID [ 123 ] ] ] [ ) [ ] bool }",
  "func ID ( ) : [ ID [ ID ( false * ( - ( ( 123 ) ) ) ) ] [ ) ID ( ] ] int { }",
  "func ID ( ) : ID ID [ ID ( false * ( - ( ( 123 ) ) ) ) ] [ ) [ ( ] ] int { }",
  "func ID ( ) : ID ID [ ID ( false * ( - ( ) 123 ) ( ) ) ] [ ) [ ( ] ] int { }",
  "func ID ( ) { print ( false * ID { ) [ false / false / ( false ) ] * ID ) } func ID ( ) ( }",
  ") ID ( ) { print ( false * ID { ) [ false / false / ( false func ] * ID ) } func ID ( ) ( }",
  ") ID ( { ) print ( false * ID { ) [ false / false / ( false func ] * ID ) } func ID ( ) ( }",
  "func ID ( ) 123 [ ] int { var ID : bool while 123 * ID [ : * false * ID ] { } ID = - ( false ) } func ID ( ) { }",
  "func ID ( ) 123 [ ] int { var : ID bool while 123 * ID [ : * false * ID ] { } ID = - ( false ) } func ID ( ) { }",
  "func ID ( ID : ] , ID : [ ( false == ( ( ID ) ) ) bool [ ] [ ] [ ] bool ) { }",
  "func ID ( ID : ] , ID : [ ( false == ( ( [ ) ) ) bool [ ] ID ] [ ] bool ) { }",
  "func ID ( ID : ] , ID ) [ ( false == ( ( [ ) ) ) bool [ ] ID ] [ ] bool : { }",
  "func ID ( ) : var { int ID : [ ] int call ID ( ) print ID [ ( false ) ] } func ID ( ) { }",
  "func ID ( ) ID var { int ID : [ ] int call ID ( ) print : [ ( false ) ] } func ID ( ) { }",
  "func ID ( ) ID var { int ID : [ ] int ( ID call ) print : [ ( false ) ] } func ID ( ) { }",
  "and ID ( ID : bool , ID : bool , ID : bool ) : [ ID [ - - 123 and - ID func - ( ID ) ] [ ( ( false ) ) ] ] bool { } func ID ( ) { }",
  "and ID ( ID : bool , ID : false , ID : bool ) : [ ID [ - - 123 and - ID func - ( ID ) ] [ ( ( bool ) ) ] ] bool { } func ID ( ) { }",
  "( ID ( ID : [ ] int ) : [ ID func - ( ( - 123 ) ) ) ] [ ] bool { }",
  "( ID ( ID : [ ] int ) : - ID func [ ( ( - 123 ) ) ) ] [ ] bool { }",
  "( ID ( ID : [ ] int ) : - ID func [ ( ( - 123 [ ) ) ] ) ] bool { }",
  "func ID { ) { ID ( ( ID [ true == 123 ] [ 123 ] ) ) = - ID while 123 ( } } func ID ( ) { }",
  "func ID { ) { ID ( ( ID [ true [ 123 ] == 123 ] ) ) = - ID while 123 ( } } func ID ( ) { }",
  "func ID { ) { ID ( ( ID [ true [ 123 ] == 123 ] ) ) = - ID while 123 ) } } func ID ( ( { }",
  "func ID ( ) { var ID : bool print false ) true / ( ID ( ID + ) / ID - ID }",
  "func ID ( ) { var ID : bool print false ) ID / ( true ( ID + ) / ID - ID }",
  "func ID ( print { var ID : bool ) false ) ID / ( true ( ID + ) / ID - ID }",
  "func ID ( ) { if 123 * ID [ - ( true / - true * ID ) ] [ ( ( ID ) ) ] / ) { } } func ID ( true { }",
  "func ID ( ) func if 123 * ID [ - ( true / - true * ID ) ] [ ( ( ID ) ) ] / ) { } } { ID ( true { }",
  "func ID ( ) func if 123 ( ID [ - ( true / - true * ID ) ] [ ( * ID ) ) ] / ) { } } { ID ( true { }",
  "func ID ( ) { var ID : ( var ID : int call ID ( ID [ bool - ( - 123 ) ) ] [ ( ID ) ] ) } func ID ( ) { }",
  "func ID ( ) { var ID : ( var ID : int call ID ( [ ID bool - ( - 123 ) ) ] [ ( ID ) ] ) } func ID ( ) { }",
  "func ID ( ) { var ID : ( 123 ID : int call ID ( [ ID bool - ( - var ) ) ] [ ( ID ) ] ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool if ID - - ( ( ) ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool if ID - - ( ( ) ) { } call ID ( ) } func ID } ) { (",
  "func ID ( ) : bool { var ID : bool var ID : bool if ID - - ( ( ( ) { } call ID ( ) } func ID } ) { )",
  "func ID ( ID : int ) : bool { var ID : [ ] [ ] [ ] int if ID ID ) { } } func ( ( ) { }",
  "func ID ( ID : int ( : bool { var ID : [ ] [ ] [ ] int if ID ID ) { } } func ) ( ) { }",
  "func ID ( ID : int ( : bool { var ID : [ ] [ ] [ ] int if ID ID ) { } } func ) ( ) { }",
  "func ID ( ID : bool ] [ true or - 123 and - - ( ID ) and ( - - ID ) or 123 ] [ ) { }",
  "func ID ( ID : bool ] [ true or - 123 and - - ( ID ) and ( ID - - ) or 123 ] [ ) { }",
  "func ID ( ID : bool , ( : int ) : [ ] [ true / ( - ID false ) ) ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ( : ] ) : [ int [ true / ( - ID false ) ) ] int { } func ID ( ) { }",
  "func ID ( ID ] bool , ( : ] ) : [ int [ true / ( - ID false ) ) : int { } func ID ( ) { }",
  ") ID ( ID : [ - ID [ - true - - - ID [ ID ] ] [ - ID ] ] int func { }",
  ") ID ( int : [ - ID [ - true - - - ID [ ID ] ] [ - ID ] ] ID func { }",
  "] ID ( int : [ - ID [ - true - - - ID [ ID ] ] [ - ID ] ) ID func { }",
  "func : ( ID ID int , ID : int ) : int { }",
  "func : ( ID ID : , ID : int ) int int { }",
  "func : ( ID ID : , ID : int ) int int { }",
  "func ID ( ) : bool { var ID : [ ( true + ) ( - true ) + ( - 123 - ) ] bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ( true + ) ( - true ) + ( - 123 ] ) - bool } func ID ( ) { }",
  "func ID ( ) : true { var ID : [ ( bool + ) ( - true ) + ( - 123 ] ) - bool } func ID ( ) { }",
  "func ID ] ) : [ ] bool { var ID : bool } func ID ( ) { var ID : [ 123 > ( ID ) ( bool }",
  "func ID ] ) : [ ] bool { var ID ) bool } func ID ( : { var ID : [ 123 > ( ID ) ( bool }",
  "func ID } ) : [ ] bool { var ID ) bool ] func ID ( : { var ID : [ 123 > ( ID ) ( bool }",
  "func ID ( ) : int { ( ID ( ) [ 123 and ID / - while - ID ) * ID and true ] { } } func ID ( ) { }",
  "func ID ( ) : int { ( ID ( ) [ 123 and - / - while ID ID ) * ID and true ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : ) ] [ ID ( ) [ - - - ( false ) ] [ ( false [ ] ] int }",
  "] ID ( ) { var ID : ) ] [ ID ( ) [ - - - ( false ) ] [ ( false [ func ] int }",
  "] ID ( ) { var false : ) ] [ ID ( ) [ - - - ( false ) ] [ ( ID [ func ] int }",
  "func ID ( ID : bool , ID { [ - ID / - - - ( ID ( ) ) ] int , ID : bool ) : } func ID ( ) { }",
  "func ID ( ID : bool , ID { [ - ID / - - - ( ID ( ) ) ] int , ID : bool ) : } func ID ( ) { }",
  "func ID ( ID : bool , ID { [ - ID / - - - ( ID ( ) ) ] int , ID : bool { : } func ID ( ) ) }",
  "func ID ( ID : int ) { } func ID ( ID : int ) : bool { : ID var bool var ID : int }",
  "func ID ( ID : int ) { } bool ID ( ID : int ) : bool { : ID var func var ID : int }",
  "func ID ( ID : int ) { } bool ID ( ) : int ID : bool { : ID var func var ID : int }",
  "and ID ( ) : bool { ID = ( - false <= 123 func ( ID ) and false ) } func ID ( ) { }",
  "and ID ( ) : bool { ID = ( - false <= 123 func ( ID ) and false ) } func ID ( ) { }",
  "and ID ( ) : bool { ID = ( - false <= ID func ( ID ) and false ) } func 123 ( ) { }",
  "func ID ( ID func int , ID : int , ID : int ) { var ID : [ ] int while true / - ID * 123 { } call ID ( ) } : ID ( ) { }",
  "func ID ( ID func int , ID : int , ID : int ) { var ID : [ ] int while true / - ID * 123 { } ) ID ( ) } : ID ( call { }",
  "func ID ( ID func int int ID : int , ID : int ) { var ID : [ ] , while true / - ID * 123 { } ) ID ( ) } : ID ( call { }",
  "func ID ( ) { } ID : int var ID : int { ID ( ) [ ID ( false ) ] [ ID ] = ID { var } { } }",
  "func ID ( ) { } ID : int var ID : [ { ID ( ) [ ID ( false ) ] int ID ] = ID { var } { } }",
  "func ID ( ) { } ID : int var ID : [ { ID ( = [ ID ( false ) ] int ID ] ) ID { var } { } }",
  "func ID ( ) { var ID : [ } * ID ( true * 123 * ( 123 ) ) ] bool 123",
  "func ID ( * { var ID : [ } * ID ( true * 123 ) ( 123 ) ) ] bool 123",
  "func ID ] * { var ID : [ } * ID ( true * 123 ) ( 123 ) ) ( bool 123",
  "func ID } ) : bool { var ID : bool return (",
  "func ID } ) : bool var { ID : bool return (",
  "func ID ( ) { while - true / false + - false { true * - ID ( ) { } } func ID ( ) / }",
  "func { ( ) ID while - true / false + - false { true * - ID ( ) { } } func ID ( ) / }",
  "func { ( ) ID while - true / false + - false { true * - ID ( ) { } } func ID ( ) / }",
  "func ID ( ID : int ) { var ID : bool return ( true + ( ( ) + 123 ) } func ID ID ) { }",
  "func ID ( ID : int ) { var ID 123 bool return ( true + ( ( ) + : ) } func ID ID ) { }",
  "func ID ( ID : [ ] [ true and ID ( ) [ ( ID ] ] ] [ ) [ ] int ) { }",
  "func ID ID ( : [ ] [ true and ID ( ) [ ( ID ] ] ] [ ) [ ] int ) { }",
  "func ID ( ) { int : var ID : [ ] [ ] bool return }",
  "func ID ( ) { int : var ID : [ ] [ ] bool return }",
  "func ID ( ) { int : var ID : [ ] ] [ bool return }",
  "func ID ( ID : [ ( ( - ( ( { ) ) ) ) ] [ ] bool ) true }",
  ") ID ( ID : [ ( ( - ( ( { ) ) ) func ] [ ] bool ) true }",
  ") ID ( ID : [ ( true - ( ( { ) ) ) func ] [ ] bool ) ( }",
  "func ID ) ID : bool ( { var ID : bool print - ID [ ID ( ) [ ( false ) ] ] while ( false ) { } }",
  "func ID ) ID : bool ( { print ID : bool var - ID [ ID ( ) [ ( false ) ] ] while ( false ) { } }",
  "func ID ) ID : bool ( { { ID : bool var - ID [ ID ( ) [ ( false ) ] ] while ( false ) print } }",
  "func ID ( ID : bool ) : [ 123 [ bool { var ID : int var ID : ] true ] int }",
  "func ID ( ID : bool int : [ 123 [ bool { var ID : ) var ID : ] true ] int }",
  "func ID ( ID ID bool int : [ 123 [ bool { var : : ) var ID : ] true ] int }",
  "func ID ( ) : bool ( var ID : int return 123 / ID / ID ( ) [ { - - ID ) ] [ ID ] }",
  "func ID ( ) : bool ( var ID : int return 123 [ ID / ID ( ) / { - - ID ) ] [ ID ] }",
  "func ID ( ) : bool ( / ID : int return 123 [ ID / ID ( ) var { - - ID ) ] [ ID ] }",
  "ID ID ( ID : [ ( ( false * ( 123 * ID / func ) ) ) ] int ) { } func ID ( ) { }",
  "ID ID ( ID : [ ) ( false * ( 123 * ID / func ) ) ) ] int ) { } func ID ( ( { }",
  "ID ID ( ID : [ ) ( false * ( 123 * ID / func ) ) ) ] int ) { } ( ID func ( { }",
  "} ID ( ID : int , ID : int ) { { var ID : bool func call ID ( ID ( ) ) } func ID ( ) { }",
  "} ID ( ID : int , ID : int ) { { var ID call bool func : ID ( ID ( ) ) } func ID ( ) { }",
  "} ID ( ID : int , ID : int ) { { var ID call bool ID : func ( ID ( ) ) } func ID ( ) { }",
  "func ID ( ID : int ) { } func ID ( ) { while true - ID [ ( ID ) ] [ ( ] ) { } }",
  "func ID ( ID : int ) { } func ID ( ) { while true - ID [ ( ID ) ] [ ( ] ) { } }",
  "func ID ( ID ) int ) { } func ID ( : { while true - ID [ ( ID ) ] [ ( ] ) { } }",
  "ID ID ( ) : int { var func : [ ] int var ID : bool call ID ( ) }",
  "ID ID ( ) : int { var func : [ ] int var ID : bool call ID ( ) }",
  "ID ID ( ) : ( { var func : [ ] int var ID : bool call ID int ) }",
  "func ID ( ) : int { var ID : int var ID : true ( ID ( [ ) ) ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : true ( ID ( [ ) ) ] bool func } ID ( ) { }",
  "func [ ( ) : int { var ID : int var ID : true ( ID ( ID ) ) ] bool func } ID ( ) { }",
  "func ) ( ID : [ ] [ ( 123 / ID [ ID [ - ID ] [ ( ( - ID ) ) ] ] [ ( ( 123 ) ) ] ID ] bool ) { } func ID ( ) { }",
  "func ) ( ID ( [ ] [ ( 123 / ID [ ID [ - ID ] [ ( ( - ID ) ) ] ] [ ( : 123 ) ) ] ID ] bool ) { } func ID ( ) { }",
  "func ) ( ID ( [ ] [ ( 123 / ID [ ID [ - ID ] [ ( ( - ID ) ) ] ] ) ( : 123 ) ) ] ID ] bool ) { } func ID ( [ { }",
  "func { ( ID : [ ID ( ID [ 123 - ID ( ) - ( ( ID ) ) ] ) ] bool ) ID }",
  "func { ( ID : - ID ( ID [ 123 - ID ( ) [ ( ( ID ) ) ] ) ] bool ) ID }",
  "func { ( ] : - ID ( ID [ 123 - ID ( ) [ ( ( ID ) ) ] ) ID bool ) ID }",
  "func ID ( ID : [ ] [ ] func ] [ - - - false + ( - 123 ) + ( ( 123 ) ) ] bool ) { } [ ID ( ) { }",
  "func ID ( ID : [ ] [ ] func ] [ - - - false + ( - 123 ) + ( ( 123 ) ) ] bool ) { } [ ID ( ) { }",
  "func ID ( ID : [ ] [ ] func ] [ - - - false + ( - 123 ) + [ ( 123 ) ) ] bool ) { } ( ID ( ) { }",
  "func ID ( { : bool ) var ID : [ ( true * - true * ( ( false ) / 123 ) ) ] [ ] int }",
  "func ID ( { : bool [ var ID : ) ( true * - true * ( ( false ) / 123 ) ) ] [ ] int }",
  "func ID ( ) : bool { var ID : [ ( bool ( ( ( false ) ) ) ) ] - } func ID ( ) { }",
  "bool ID ( ) : func { var ID : [ ( bool ( ( ( false ) ) ) ) ] - } func ID ( ) { }",
  "bool ID ( ) : func { var ID : [ ( bool ( ( ( false ) ) ) ID ] - } func ) ( ) { }",
  "func ID ( ID : bool ) { var ID : int var ID : ) return ID ( ( ID int ) }",
  "func ID ( ID : bool ) { ID var : int var ID : ) return ID ( ( ID int ) }",
  "func ID ID ID : bool ) { ( var : int var ID : ) return ID ( ( ID int ) }",
  "func ID ( ) : [ ] { ] int [ return }",
  "func [ ( ) : [ ] { ] int ID return }",
  "func ID int ID : [ ID ( ( 123 / ( ( ID ) ) ) ) ] ( ) { } func ID ( ) { }",
  "func ID int ID : [ ID ( ( 123 / ( ( ID ) ) } ) ] ( ) { ) func ID ( ) { }",
  "func ID int ID : [ ID ( ( 123 / ( } ID ) ) ( ) ] ( ) { ) func ID ( ) { }",
  "func ID ( ID : ID , ID : [ ] bool ) : int { var bool : int return false / - ( false ) / ID } func ID ( ) { }",
  "func ID ( ID : ID ID , : [ ] bool ) : int { var bool : int return false / - ( false ) / ID } func ID ( ) { }",
  "func ID ( ID : ID ID , : [ ] bool ) : int { ID bool : int return false / - ( false ) / var } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ - ( [ 123 / ( - ( ID ) ) ) ] ] - ] [ ] [ ] [ ] int ) { }",
  "func ID ( ID : [ ID ( ) [ - ( ) 123 / ( - ( ID [ ) ) ] ] - ] [ ] [ ] [ ] int ) { }",
  "func ID ( ID : [ ID ( ) [ - ( } 123 / ( - ( ID [ ) ) ] ] - ] [ ] [ ] [ ] int ) { )",
  "func ID ( ) { var ID : ( - ID [ - ID ( 123 ) ] [ - true ] ] bool } func ID [ ) { }",
  "func ID ( ) { var ID : ( func ID [ - ID ( 123 ) ] [ - true ] ] bool } - ID [ ) { }",
  "func var ( ) { ID ID : ( func ID [ - ID ( 123 ) ] [ - true ] ] bool } - ID [ ) { }",
  "func ID ( ID : bool ) { var ID [ bool while ID : ID / false * ID ] [ ID ] { } { } } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID [ bool while ID : ID / false * { ] [ ID ] { } ID } } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID [ bool while ID : ID / false * { ] [ ID ] { } ID } } func ID { ) ( }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : bool var ID : bool while ID / ( ( ID ( ) * ) ( false ) ) { } call ID ( ) }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : bool var ID : bool while ID / ( ( ID ( ) * ) ( false ) ) { } } ID ( ) call",
  "func ID ( ID : int ) ID : int , ID : bool , { var ID : bool var ID : bool while ID / ( ( ID ( ) * ) ( false ) ) { } } ID ( ) call",
  "func ID ( ) { print } - ID ( ) [ ( ID ) ] [ - false ] ID",
  "func ID ( - { print } ) ID ( ) [ ( ID ) ] [ - false ] ID",
  "func ID ( - { print } ) ID ( ) [ ( ID ) ] [ - false ] ID",
  "func ID ( ) { and ID : int var ID : bool call ID ( 123 * true and ( ( - 123 ) ) var - ID ) while ID { } } func ID ( ) { }",
  "func ID ( ) { ID and : int var ID : bool call ID ( 123 * true and ( ( - 123 ) ) var - ID ) while ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ( { var ID : bool ID ( ) [ ID * 123 * ID ] = ( ( - ID ) ) } func ID ) ) { }",
  "func ID ( ID : bool , ID : bool ( { bool ID : var ID ( ) [ ID * 123 * ID ] = ( ( - ID ) ) } func ID ) ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) : ) { var ID : int var ID : int } func ID ( ID : [ ] int int { }",
  "func ID ( ID : int , ID ( bool , ID : int ) : ) { var ID : int var ID : int } func ID : ID : [ ] int int { }",
  "func ID ( ID : int , ID int bool , ID : int ) : ) { var ID : int var ID : ( } func ID : ID : [ ] int int { }",
  "func { ( ) ID print ID [ ID * false * - 123 + true ] } func ID ( ) { }",
  "func ID ( ) { while ID ( ) [ ) / true + 123 / ID / - ( - ( ( - ID ) ) false ] { } }",
  "func ID ( ) { while ID ( - [ ) / true + 123 / ID / - ( - ( ( ) ID ) ) false ] { } }",
  "func ID ( ) { 123 ID ( - [ ) / true + while / ID / - ( - ( ( ) ID ) ) false ] { } }",
  "func ID ( ) { while - ID [ 123 or ( ( - ID ) ) or - ID ] } } } func ID ( ) { {",
  "func ID ( ) { } - ID [ 123 or ( ( - ID ) ) or - ID ] while } } func ID ( ) { {",
  "func ID ( ) { } - ID [ 123 or ( ( - ID ) ) or - ID ] while } } func ID ( ) { {",
  "func ID ( ) { print false ID - true + true - ( false * ( true ) * ( - ( ID ) ) ) ID = false } func / ( ) { }",
  "func ID ( ) { print false ID - true + true ( ( false * - true ) * ( - ( ID ) ) ) ID = false } func / ( ) { }",
  "func ID ( ) { print false ID - true + true ( } false * - true ) * ( - ( ID ) ) ) ID = false ( func / ( ) { }",
  "func + ( ) { if true - ( true ID ID [ ( ID ) ] [ ( ID ) ] ) { } } func ID ( ) { }",
  "func + ( ) { { true - ( true ID ID [ ( ID ) ] [ ( ID ) ] ) if } } func ID ( ) { }",
  "func ) ( ) { { true - ( true ID ID [ ( ID ) ] [ ( ID + ] ) if } } func ID ( ) { }",
  "func ID : ID : bool , ID ( bool ) { var ID : int print ID [ 123 * - false ] [ true ] { } }",
  "func ID : ID : bool , ID ( bool ) { 123 ID : int print ID [ var * - false ] [ true ] { } }",
  "func ID : ID : : , ID ( bool ) { 123 ID bool int print ID [ var * - false ] [ true ] { } }",
  ") ID ( ID : int ) : int { var ID : int return } func ID ( ID : [ ( ( false ) func ] int ) { }",
  ") ID ( ID : int ) : int { var ID : int return } func ID ( ID : ] ( ( false ) func [ int ) { }",
  ") ID ( ID : int ) : int { var ID : ( return } func ID ( ID : ] ( int false ) func [ int ) { }",
  "func ID ( ) { ( ( ) [ ID ( ( ID [ ( false ) ] [ ID ] ) ) ] = ID true ) print ID }",
  "func ID ( ) { ( ( ) [ ID ( ( ID [ ( false ) ] [ ID ID ) ) ] = ] true ) print ID }",
  "func ID ( ) ( ( ( ) [ ID { ( ID [ ( false ) ] [ ID ID ) ) ] = ] true ) print ID }",
  "func ID ( ID : [ ] bool , ID : int , ID : int ) 123 [ : * - ID - - ID - ( 123 ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int , ID : int ) 123 [ : * - ID - - ID - ( 123 ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int , ID : int ) 123 [ : * - ID - - ID - ( 123 ) int [ ] ] { } func ID ( ) { }",
  "func ) ( ID { var ID : bool print ID [ ID ( ) * - ID ( ) ] { } } func ID ( ) { }",
  "func ID ( ) : [ ( { ( ) [ ID ( ) [ - true ] ] [ false ] ) ] [ ] int { } func ID ( ) ID }",
  "func ID ( ) : [ ( { ( ) [ ID ( ) ] - true [ ] [ false ] ) ] [ ] int { } func ID ( ) ID }",
  "func ID ( ) : [ ( { ( ) [ ID ( ) ] - true [ ] [ false ] ) ] [ ] int { } func ( ID ) ID }",
  "func ID ( ID : [ ] bool , ID : bool ) : int ID var ID : int var { : [ true >= - true ] int }",
  "func ID ( ID : [ ] ID , ID : bool ) : int bool var ID : int var { : [ true >= - true ] int }",
  "func ID ( ID : [ ] ID , ID : bool ) : int bool var ID : int var } : [ true >= - true ] int {",
  "func ID ( ) { var ID : int ID [ ID = ( ID ) ] ] [ 123 ] [ - - - false { } }",
  "func ID ( ) { var ID : int ID [ ID = ( ID ) ] ] false 123 ] [ - - - [ { } }",
  "ID ID ( ) { while - ( true + - ID [ ( ( ID ) ) ] [ func ] ) { } call ID ( ) } func ID ( ) { }",
  "ID ID ( ) call while - ( true + - ID [ ( ( ID ) ) ] [ func ] ) { } { ID ( ) } func ID ( ) { }",
  "ID ID ( ) call while - ( true + - ID [ ( ( ID ) ) ] [ func ] ) { func { ID ( ) } } ID ( ) { }",
  "func ID ( ID : [ ( ( ID ( false - ( ( ID ) ) + ID ) ) ) ] bool ) { } func false ( ) { }",
  "func ID ( ID : [ ( ( ID ( false - ) ( ID ) ) + ID ) ) ) ] bool ( { } func false ( ) { }",
  "func ID ( ) { var ID : ID var ID : int if - true / false or ( ( false ) ) { } } func bool ( ) { }",
  "func ID ( ) { var ID { ID var ID : int if - true / false or ( ( false ) ) : } } func bool ( ) { }",
  "func ID ( ID : bool ) - [ ID and - - ID / false * false + 123 + ( : true ) ] bool { }",
  "func ID ( ID : bool ) - [ ID and - - ID / false * false bool 123 + ( : true ) ] + { }",
  "func ID ( ID : bool ) - [ ID and - - ID : false * false bool 123 + ( / true ) ] + { }",
  "func ID ( ID : int , ID : bool , ID : [ ] [ ] ID ) { var ID : int var ID : int while ( int ) { } }",
  "func ID ( ID : int bool ID : , , ID : [ ] [ ] ID ) { var ID : int var ID : int while ( int ) { } }",
  ", ID ( ID : int bool ID : , func ID : [ ] [ ] ID ) { var ID : int var ID : int while ( int ) { } }",
  "func ID ( ) { var ID : int call ID ( } print ( ( ( false ) ) ) } func ID ( ) { )",
  "func ID ( ) { var ID : int func ID ( } print ( ( ( false ) ) ) } call ID ( ) { )",
  "func ID ( ) { var ID : int func ID ( } print ( ( ( false ) ) } ) call ID ( ) { )",
  "[ ID ( ) : bool { var ID : func ] int var ID : bool print ( ( ( ID ) ) ) } func ID ( ) { }",
  ") ID ( ) : bool { var ID : func ] int var ID : bool print ( ( ( ID ) ) ) } func ID ( [ { }",
  ") ( ( ) : bool { var ID : func ] int var ID : bool print ( ( ID ID ) ) ) } func ID ( [ { }",
  "func ID bool ID : bool , ID : [ ] ( , ID : bool ) { var ID : int ID = ( 123 ) }",
  "func ID ( ) { var ID : int ID [ - - ( 123 * ) ( - ID ) ) ] = ( ( 123 ) - }",
  "func ID ( ) { ] ID : int ID [ - - ( 123 * ) ( - ID ) ) var = ( ( 123 ) - }",
  "func ID ( ) { ] ID * int ID [ - - ( 123 : ) ( - ID ) ) var = ( ( 123 ) - }",
  "func : ( ID : bool , ID ID [ ] int ) : bool { var ID : bool var ID : bool if ID [ ( ( ID ) ) ] [ ID ] { } while ID { } }",
  "func : ( ID : bool , ID ID [ ] int ) : bool { var ID : bool var ID ID bool if ID [ ( ( : ) ) ] [ ID ] { } while ID { } }",
  "func : ( ID : bool , ID ID [ ] int ) } bool { var ID : bool var ID ID bool if ID [ ( ( : ) ) ] [ ID ] { : while ID { } }",
  "func ID ( ) : bool { int ID : bool var ID : [ ( ( - true ) ) ] var }",
  "func ID ( ) : ID { int ID : bool var bool : [ ( ( - true ) ) ] var }",
  "func ID ( ) : ID { int ID : bool var ) : [ ( ( - true bool ) ] var }",
  "func ID ( ) : bool { var ID : bool var ID : [ ID ( - ( - ID ) int ] ) }",
  "func ID ( { : bool ) var ID : bool var ID : [ ID ( - ( - ID ) int ] ) }",
  "func ID ( ID : bool , ID : [ ( true ( * false + ID + false ) ) ] [ ] int ) { }",
  "func ID ( ID : bool , ID : [ + true ( * false + ID ( false ) ) ] [ ] int ) { }",
  "func ID ( ID : bool , ID : [ { true ( * false + ID ( false ) ) ] [ ] int ) + }",
  "func ID ( ID : ( ID ( ) [ [ ( 123 * 123 / ( ( ID ) ) ) ) ] ] bool ) { }",
  "func ID ( ID : ( ID ( ) [ [ ( 123 * 123 / ( ] ID ) ) ) ) ( ] bool ) { }",
  "func ID ( ID : ( ID ( ) [ [ ( 123 * 123 / ( ] ID ) ) ) ) ( bool ] ) { }",
  "func ID ( ) : int - if ID and ID [ ( ( false ) ) ] and true { } print { ID }",
  "func ID ( ) : int - if ID and ID [ ( ( false ) ) ] and true { } print { ID }",
  "ID ID ( ) : int - if ID and func [ ( ( false ) ) ] and true { } print { ID }",
  "func ID ( ) { var ID : int var ID : [ true + ( ID [ ID ] [ ( true ) ] ) + ( ( - ID { ) ] int } func ID ( ) ) }",
  "func ID ( ) { var ID ) int var ID : [ true + ( ID [ ID ] [ ( true : ] ) + ( ( - ID { ) ] int } func ID ( ) ) }",
  "func ID ( ) { var ID ) int var ID : func true + ( ID [ ID ] [ ( true : ] ) + ( ( - ID { ) ] int } [ ID ( ) ) }",
  "func ID ( ID : int , ID : [ ] int ) { var ID : bool return ID ) - ID ( ) * - ( 123 * }",
  "func ID ( ID : int , ID : [ ] int var { ) ID : bool return ID ) - ID ( ) * - ( 123 * }",
  "func ID ( ID : int , ID : [ ID int var { ) ] : bool return ID ) - ID ( ) * - ( 123 * }",
  "func ID ( ID : bool , ID : int , ID : [ false * ID ( ) [ - - - ID ] [ true ] / ID ] ) ] int [ { }",
  "func ID ( ID : bool , ID : int , ID : [ false * ID ( ) [ - - - ID ] [ true ] / ID ] ) ] int [ { }",
  "func ID ( ID : bool , ID : int , ID : [ false * ID ID ) [ - - - ( ] [ true ] / ID ] ) ] int [ { }",
  "func ID ( ID : int ) : bool { var ID : ( false / ( [ true ) ) ] bool }",
  "} ID ( ID : int ) : bool { var ID : ( false / ( [ true ) ) ] bool func",
  "} ID ( [ : int ) : bool { var ID : ( false / ( ID true ) ) ] bool func",
  "func ID ( ) : int { var ID : bool var ID : int while true * - ID ( - true ) { } { func ID ( ) } }",
  "func var ( ) : int { ID ID : bool var ID : int while true * - ID ( - true ) { } { func ID ( ) } }",
  "func var ( ) : ID { int ID : bool var ID : int while true * - ID ( - true ) { } { func ID ( ) } }",
  "func ID ( ) { } func ID ( ) = ID { ID / ID ( ) [ - 123 ] print 123 }",
  "func ID ( ) { } func ID ( ) = ID { print / ID ( ) [ - 123 ] ID 123 }",
  "func ID ( ) { } func ID ( ] = ID { print / ID ( ) [ - 123 ) ID 123 }",
  "func ID ( ID [ [ ] [ 123 / ID ( ) [ ID ( ( ID ) ) ] : - ID ] ] bool ) { }",
  "func ID ( ID [ [ ] - 123 / ID ( ) [ ID ( ( ID ) ) ] : [ ID ] ] bool ) { }",
  "func ID ( ID [ [ ] ) 123 / ID ( ) [ ID ( ( ID - ) ] : [ ID ] ] bool ) { }",
  "func ID ( ) { var ID : int ( ID : int print true * true - ID ( ) [ ( ID ) ] [ true ] - ( var 123 ) ) }",
  "func - ( ) { var ID : int ( ID : int print true * true ID ID ( ) [ ( ID ) ] [ true ] - ( var 123 ) ) }",
  "func ID ( ) : int { var ID : return bool } func ID ( ID : [ ] int ) { while false { } }",
  "func ID ( ) return int { var ID : : bool } func ID ( ID : [ ] int ) { while false { } }",
  "func ID ( ) return int { var ID : : bool } func ID ( ID : [ ] int ) { while false { } }",
  "func ID ( } { { ) }",
  "func ID { } ( { ) }",
  "func ID ( } { { ) }",
  "func ID ( ) { var ID : int var bool : [ ] [ ] [ ] [ ] ID call ID ( ID ) if 123 { } }",
  "func ID ( ) { var ID : int var bool : } ] [ ] [ ] [ ] ID call ID ( ID ) if 123 { } [",
  "func ID call ) { var ID : int var bool : } ] [ ] [ ] [ ] ID ( ID ( ID ) if 123 { } [",
  "func ID ( ) / return false { ( ID ( ID ( ) ) ) / - false }",
  "func ID ( ) / return false { ( ID ( ID ( ) ) ) / false - }",
  "func ID ( ) / return false { ( ID ( ID ( ) ) ) / false - }",
  ": ID ( ID : [ ] bool ) func bool { var ID : [ false / ID ( ) [ false ] [ - - false ] * false ] [ ] bool }",
  ": ID ( ID : [ ] bool ) func bool { [ ID : [ false / ID ( ) [ false ] var - - false ] * false ] [ ] bool }",
  ": ID ( ID : [ false bool ) func bool { [ ID : [ false / ID ( ) [ false ] var - - ] ] * false ] [ ] bool }",
  "func ID ( ) bool : { var ID : int return } func ID ( ID : bool ) : [ ] [ ] [ ID ] int { }",
  "func ID ( ) bool : { var ID { int return } func ID ( ID : bool ) : [ ] [ ] [ ID ] int : }",
  "func ID ( ) [ : { var ID { int return } func ID ( ID : bool ) : [ ] bool ] [ ID ] int : }",
  "func ID ( ) { var ID return bool : - ( ( ( ID ) ) ) }",
  "func ID ( ) { bool ID return var : - ( ( ( ID ) ) ) }",
  "func var ( ) { bool ID return ID : - ( ( ( ID ) ) ) }",
  "func ID ( ID : [ ] int , ID : [ ( ID [ ID [ ID ] [ ( - ( ( - false ) ) ) ] ] [ } ( true ) ] ) ] int , ID : int ) { } func ID ( ) { -",
  "func ID ( ID : [ ] int , ID : [ ( ID [ ID [ ID ] [ ( - ( ( - false ) ) ) ] ] [ } ( true ) ] ) ] int , ID : int ) func } { ID ( ) { -",
  "func ID ( ID : [ ] int , ID : [ ( ID [ ID [ ID ] [ ( - ( ( - false ) ) int ] ] [ } ( true ) ] ) ] ) , ID : int ) func } { ID ( ) { -",
  "func ID ( ID : [ ] [ ( - 123 / ( ID ( ID ) / true ) ] int ) { } func ) ( ) { }",
  "func ID ( ID : [ ] [ ( true 123 / ( ID ( ID ) / - ) ] int ) { } func ) ( ) { }",
  "func ID ( ) : [ ] [ true or ( ( ID ( ) ) ) ] { ] int [ } func ID ( ) { }",
  "func ID ( ) : [ ] [ true or ( ( ID ( ) ) ) [ ] ] int { } func ID ( ) { }",
  "func ID ( ( : [ ] [ ID [ true - ID ID ( true ) ) + ID ] [ 123 ] ] bool ) { }",
  "func ID ( ( : [ ] [ ID [ true - ID ID ( true ) ) + ID ] [ 123 } ] bool ) { ]",
  "func ID ( ( : [ ] [ ID [ true - ID ID ( true ) ) + ID ] [ } 123 ] bool ) { ]",
  "func ID ( ID bool int ) { var ID : : var ID : bool ID [ false * 123 - ( false ) + ID ] = ( ID ) while - ( - ID ) { } }",
  "func ID ( ID bool int ) { var ID : : var ID : bool ID [ false * 123 - ( false ) + ID ] = { ID ) while - ( - ID ) ( } }",
  "func ID ( ID bool int ) { var ID : : var ID : bool ID [ false * 123 - ( false ) + ID ] = { ID ) while - ( - ID ) ( } }",
  "func ID ( ID : [ ] bool , ID : [ ID [ 123 * ( true ) ] [ ID ) ] int , ID : [ ] bool ] { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ID [ 123 * ( true ) ] [ ID ) ] int : ID , [ ] bool ] { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID { [ ID [ 123 * ( true ) ] [ ID ) ] int : ID , [ ] bool ] : } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { ID [ ID [ - ( ID ] ] [ - ( ID ) ] ) [ - 123 ] = false if ( - ( ID ) ) { } }",
  "} ID ( ID : int , ID : bool ) { ID [ ID [ - ( ID ] ] [ - ( ID ) ] ) [ - 123 ] = false if ( - ( ID ) ) { func }",
  "} ID ( ID : int , ID : bool ID { ID [ ) [ - ( ID ] ] [ - ( ID ) ] ) [ - 123 ] = false if ( - ( ID ) ) { func }",
  "func ID ( ) var var ID : bool { ID : int if ID [ ( - ( - 123 ) ) ] { } { } }",
  "func ID ( ) var var ID : bool { ID : int if ID [ ( - 123 - ( ) ) ] { } { } }",
  "func ID ( ) var var ID : bool { ID : int - ID [ ( - 123 if ( ) ) ] { } { } }",
  "func ID ( ) : [ ] int { call ID ( ) ID ( ) [ true * ID [ - - ID ] ] [ false ID = ] }",
  "func ID ) ( : [ ] int { call ID ( ) ID ( ) [ true * ID [ - - ID ] ] [ false ID = ] }",
  "func ID ) ( : [ ] int { call ID ( ) ID ( ) [ true * ID [ - - ID ] ] [ false ID = ] }",
  "func ID ( - { if ( false / false / - ID > ( ) ID ) ) { } } func ID ( ) { }",
  "func ID ( - { if } false / false / - ID > ( ) ID ) ) { } ( func ID ( ) { }",
  "func ID ( ) { if } false / false / - ID > ( - ID ) ) { } ( func ID ( ) { }",
  "func ID ( ID : bool , ID bool : , ID : [ - ID ( ) or ( - ( - false ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID bool : , ID : [ ) ID ( - or ( - ( - false ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID bool : , ID : [ ) ID ( - or ( - ( ( false ) ) ] [ ] int ) { } func ID - ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : [ ] [ ] [ ID [ ] false - ] bool { }",
  "] ID ( ID : bool , ID : bool , ID : int ) : [ func [ ] [ ID [ ] false - ] bool { }",
  "] ID ( ID : bool , ID : bool , ID : int ) : [ func [ ] [ false [ ] ID - ] bool { }",
  "func ID ( ID : bool , ID : int ) } var ID : [ 123 / ( ( ( ( false ) ) ) ) ] [ ] bool { func ID ( ) { }",
  "func ID ( ID ( bool , ID : int ) } var ID : [ 123 / ( ( ( ( false ) ) ) ) ] [ ] bool { func ID : ) { }",
  "func ID ( ID ( bool , ID : int ) } var ID : [ 123 / ( ( ( ( false ) func ) ) ] [ ] bool { ) ID : ) { }",
  "func ID ( ID : int , call : int ) { } func ID ( ) : bool { call ID ( ( ID ) ) ID ID ( ) }",
  "func : ( ID ID int , call : int ) { } func ID ( ) : bool { call ID ( ( ID ) ) ID ID ( ) }",
  "func : ( ID ID { , call : int ) int } func ID ( ) : bool { call ID ( ( ID ) ) ID ID ( ) }",
  "func ID 123 ) : [ ] int { var ID : int var ID : int call ID ( ) call ID ( - ( ) }",
  "func ID 123 ) : ) ] int { var ID : int var ID : int call ID ( ) call ID ( - ( [ }",
  "func ID 123 ) : ) ] int { var ID : int var ( : int call ID ( ) call ID ( - ID [ }",
  "func ID ( ID : bool , ID : [ ] int ) ] var ID : [ ] [ - true / - ( 123 ) * ID { int var ID : int }",
  "func ID ( ID : bool 123 ID : [ ] int ) ] var ID : [ ] [ - true / - ( , ) * ID { int var ID : int }",
  "func ID ( ID : int ID ID : bool ) : int { var , : int var ID : bool call ID ( ) } func ID ( ID : bool ) { }",
  "func ID ( ID : int ID ID : bool ) : int ID var , : int var ID : bool call ID ( ) } func { ( ID : bool ) { }",
  "func ID ( ID : int ID ID : bool ) : int ID var , : int var ID : bool call ID ) ( } func { ( ID : bool ) { }",
  "func ID ( ID : bool ) : bool { if ( - ( false / - ( ( { ) ) ) ) { } while false { } } func ID ( ) ID }",
  "func ID ( ID : bool ) : bool { { ( - ( false / - ( ( if ) ) ) ) { } while false { } } func ID ( ) ID }",
  "func ID ( false : bool ) : bool { { ( - ( ID / - ( ( if ) ) ) ) { } while false { } } func ID ( ) ID }",
  "func ID ( ) : bool { var ID : [ ( false / ID [ ( - - ( ID ) ] ) [ ( ( ID ) ) ] * 123 ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) : / { var ID : [ ( false bool ID [ ( - - ( ID ) ] ) [ ( ( ID ) ) ] * 123 ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) : / { var ID ) [ ( false bool ID [ ( - - ( ID ) ] ) [ ( ( ID ) ) ] * 123 : ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) : bool { while ( ( true * false / - false ) ) } { { } } func ID ( ) { }",
  "func } ( ) : bool { while ( ( true * false / - false ) ) ID { { } } func ID ( ) { }",
  "func } ( ) : bool func while ( ( true * false / - false ) ) ID { { } } { ID ( ) { }",
  "func ID ( ) { ID ( ) = - ID * ) ( ( ID ( ) ) * ID ID = ( ( true ) ) } func ID ( ) { }",
  "func ID ( ) { ID ( ) = - ( * ) ( ( ID ( ) ) * ID ID = ID ( true ) ) } func ID ( ) { }",
  "func ID ( ) { ID = ) = - ( * ) ( ( ID ( ) ) * ID ID ( ID ( true ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool { var ID : bool call ID ID ) return } return } func ID ( ) { while ID { } call ( ( ) }",
  "func ID ( ) { var ID : bool { var ID : bool call ID ID ) return } return } func ID while ) { ( ID { } call ( ( ) }",
  "func ID ( ) { var ID : bool { var ID : bool call ID ID ) return } return ID func } while ) { ( ID { } call ( ( ) }",
  "func bool ( ID : ID ) : bool { var ID : int var ID : [ ] bool { var ID : int var ID : int { } } } func ID ( ) { }",
  "func bool ( ID : ID ) ID bool { var ID : int var ID : [ ] bool { var ID : int var ID : int { } } } func : ( ) { }",
  "func bool ( ID : ID ) ID bool { func ID : int var ID : [ ] bool { var ID : int var ID : int { } } } var : ( ) { }",
  "func ID ( ) : int { var ID [ int var ID : [ ID / 123 / ID [ - false ] : ( - false ) ] ] bool }",
  "func - ( ) : int { var ID [ int var ID : [ ID / 123 / ID [ ID false ] : ( - false ) ] ] bool }",
  "func ID - ) : int { { } ID [ ( false * - ( ID ) / false ] = ID }",
  "func ID - ) : int { { } ID [ * false ( - ( ID ) / false ] = ID }",
  "func ID - } : int { { ) ID [ * false ( - ( ID ) / false ] = ID }",
  "func : ( ID : bool ) ID [ ] int { return }",
  "func : ] ID : bool ) ID [ ( int { return }",
  "( : ] ID : bool ) ID [ func int { return }",
  "func ID ( while : bool { var ID : bool ) ( ID [ false and - ID ] [ ( ( 123 ) ) ] ) { } }",
  "func ID ( while : bool { and ID : bool ) ( ID [ false var - ID ] [ ( ( 123 ) ) ] ) { } }",
  "func ID ( while : bool { and ID : bool ) ( ID [ false } - ID ] [ ( ( 123 ) ) ] ) { var }",
  "func int ( ) : int { var ID : ID var ID : int }",
  "int func ( ) : int { var ID : ID var ID : int }",
  "int func ( ) : int { var ID : ID var ID : int }",
  "func ID ( ) { var ID false bool var ID : bool if : / ( ID [ ( - ID ) ] [ - 123 ] ) { } } func ID ( ) { }",
  "func ID ( ) { var ID false bool var ID : bool if : / ( ID [ ( - ID ) ] [ - 123 ] ) { } { func ID ( ) } }",
  "func ID ( ) { var ID false bool var ID : ID if : / ( ID [ ( - bool ) ] [ - 123 ] ) { } { func ID ( ) } }",
  "func ID ( ) { var ) : bool call ID ( false + ( - true / ( ID ID * ( 123 ) ) + 123 ) if ID { } } func ID ( ) { }",
  "func ID ( ) { var ) : bool call ( ( false + ( - true / ( ID ID * ( 123 ) ) + 123 ) if ID { } } func ID ID ) { }",
  "func ID ( ) ( [ ( ID [ ID : ( ID ) ) ] [ ID ] ) ] bool { } func ID ( ) { }",
  "bool ID ( ) ( [ ( ID [ ID : ( ID ) ) ] [ ID ] ) ] func { } func ID ( ) { }",
  "bool ID ( ) ( [ ( ID [ ID : ( ID ) ) ] [ ID ] ) ] func { ( func ID } ) { }",
  "func ID ( ID ( bool , ID : int , ID : bool ) : [ : ID [ ID ] ) ] bool { }",
  "func ID ( ID ( bool , ID : int , ID : bool ) : ID : [ [ ID ] ) ] bool { }",
  "func ID ( [ ( bool , ID : int , ID : bool ) : ID : ID [ ID ] ) ] bool { }",
  "func ID ( ID : [ ( - - - ID ) ) [ true / ( false ( ] ) ] bool ) { }",
  "func ID ( ID : [ ( - - - ID ) ) [ true / ( false ( ] ) ] bool ) { }",
  "- ID ( ID : [ ( - - func ID ) ) [ true / ( false ( ] ) ] bool ) { }",
  "func ID ( ) { var ID : bool var ID : 123 { var ID : int call ID ( ) { var ID : [ ID ] bool var ID : [ ] int } } ID = bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : 123 { var ID : int call ID ( ) { var ID var [ ID ] bool : ID : [ ] int } } ID = bool } func ID ( ) { }",
  "func ID int ) { var ID : bool var ID : 123 { var ID : int call ID ( ) { var ID var [ ID ] bool : ID : [ ] ( } } ID = bool } func ID ( ) { }",
  "func ID ( ) : int { ) ID : bool print - true * ID / ( ( false ) ) } func ID ( var { }",
  "func ID ( ) : int * ) ID : bool print - true { ID / ( ( false ) ) } func ID ( var { }",
  "func ID ( ) func int * ) ID : bool print - true { ID / ( ( false ) ) } : ID ( var { }",
  "func ID ( ID : bool , ID : int ) { var ID : int var ID : bool { { var } : int var ID : bool } } ID = ID } func ID ( ) { ID",
  "func ID ( ID : bool , { : int ) { var ID : int var ID : bool ID { var } : int var ID : bool } } ID = ID } func ID ( ) { ID",
  "func ID ( ID : bool , { : int ID { var ) : int var ID : bool ID { var } : int var ID : bool } } ID = ID } func ID ( ) { ID",
  "func ID ( ) : int ) { var ID : [ ID != false * 123 / ( - ( true { ) ] int } if ID { } } func ID ( ) { }",
  "func ID ( ) : int ) { var ID : [ ID != false * 123 / ( - } true { ) ] int ( if ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool if ( ( ( ID } ) ) { } )",
  "func ID ( ) { var ID : bool if ( ( ( ID } ) ) { } )",
  "func ID ( ) { var ID ID bool if ( ( ( : } ) ) { } )",
  "func ID ( ID : int , ID ) [ ( false * ID ( ID ) ) ] [ ] int : { } func ID ( ) { }",
  "func , ( ID : int ID ID ) [ ( false * ID ( ID ) ) ] [ ] int : { } func ID ( ) { }",
  "func , ( ID { int ID ID ) [ ( false * ID ( ID ) ) ] [ ] int : : } func ID ( ) { }",
  "func { ( ) : bool { var ID : bool if ( ( false / - - - - ( - - ( ID ) ) * ( ID ) ) ) ID } print ( ( ( ( ( 123 ) ) ) ) ) } func ID ( ) { }",
  "func { ( ) : bool { var ID : bool if ( ( false / - - - ( - - - ( ID ) ) * ( ID ) ) ) ID } print ( ( ( ( ( 123 ) ) ) ) ) } func ID ( ) { }",
  "func { ( ) : bool { var ID : bool if ( ) false / - - - ( - - - ( ID ) ) * ( ID ) ( ) ID } print ( ( ( ( ( 123 ) ) ) ) ) } func ID ( ) { }",
  "func ID ( ) : [ ( - [ ID [ - - - ID 123 ] ] [ - ID ] ) ] [ ] int { }",
  "func ID ( ) : [ ( - [ ID [ - - - ID 123 ] ] [ - ID ] ) ] [ ] int { }",
  "func ID ( ) : [ ( - [ ID [ - - - ID 123 ] ] [ - ID ] ) ] [ ] int { }",
  "func ID ( ID : [ ] [ ( [ ] bool , ID : int , ID : [ ID ( ( - ID ) ) ] int ) { } func ID ] ) { }",
  "func ID ( ID : ) ] [ ( [ ] bool , ID : int , ID : [ ID ( ( - ID ) ) ] int [ { } func ID ] ) { }",
  "func ID ( ID : ) ] [ ( [ ] bool , ID : int , ID : [ ID ( ( - ID ) ) ] int [ { } func ID ] ) { }",
  "func ID ( ) : [ ( - ( ID [ - ( ID ) ] [ ( ID ) ] ) ) ] int { } ID func ( ) { }",
  "func ID ( ) : [ ( - ( ID [ - ( ID ) ] [ ( ID ) ] ) ) ] int { } ID func ( ) { }",
  "func ID ( ) : [ ( - ( ID [ - ( ID ) ] [ ( ID ) ] { ) ] int { } ID func ( ) ) }",
  "func ID ( ) : bool { var ID : bool var ID : int return } func ID ( ID bool : , ID : [ - ID ] bool , ID : bool ) { }",
  "func ID ( ) : bool { var ID : bool var ID : int return } func ID - ID bool : , ID : [ ( ID ] bool , ID : bool ) { }",
  "func ID ( ) : [ ( - ID ( ID true / ID [ - - ( ID ) ] ) ) ] int { } func - ( ) { }",
  "func ID ( ) : [ ( - ID ( ID true / ID [ - - ( ID ) ] ) ) ] int { } func - ( ) { }",
  "func ID ( ) : [ ( - ( ( ID true / ID [ - - ( ID ) ] ) ) ] int { } func - ID ) { }",
  "var ID ( ID : int , ID : bool , ID : int ) { var ID : [ ID ( ( - - ID ) ) ] bool func ID : int } func ID ( ) { }",
  "var ID ( ID : int , ID : bool , ID : int ) { var ID : [ ID ID ( - - ID ) ) ] bool func ( : int } func ID ( ) { }",
  "var ID ( ID , int , ID : bool : ID : int ) { var ID : [ ID ID ( - - ID ) ) ] bool func ( : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int , bool : ID ) { var ID : int var ID : int print - ( ( true ) ) ID = true }",
  "func ID ( ID : bool , ID : [ ] int , bool : ID ) { var ID : int var int : ID print - ( ( true ) ) ID = true }",
  "func ID ( ID : bool , ID : [ ] int , bool : ID ) { var ID : int var int : ID print ID ( ( true ) ) - = true }",
  "ID ID ( func : [ ( - ID * false > - true + ( true ) + 123 ) ] bool ) { } func ID ( ) { }",
  "ID ID ( func : [ 123 - ID * false > - true + ( true ) + ( ) ] bool ) { } func ID ( ) { }",
  "] ID ( func : [ 123 - ID * false > - true + ( true ) + ( ) ID bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int ID [ - ID / ID [ ( ID ) ] [ ID ] / - 123 ] ID ( - 123 ) ID = = }",
  "func ID ( ) { var ID : int ID [ - ID / ID [ ( ID ) ] [ ID ] } - 123 ] ID ( - 123 ) ID = = /",
  "func ID ( ) { var ID : int ID - - ID / ID [ ( ID ) ] [ ID ] } [ 123 ] ID ( - 123 ) ID = = /",
  "func <= ( ) { while ID [ 123 ID ( 123 / ( - ID ) ) ] { } if - false { } }",
  "func <= ( 123 { while ID [ 123 ID ( ) / ( - ID ) ) ] { } if - false { } }",
  "func <= ( 123 { while ID [ 123 ID ( ) / ( - ID ) ) } { ] if - false { } }",
  "func ID ( { : [ ID ( - ( true * ID [ 123 ] ) ) ] bool ) ID }",
  "func ID ( { : [ ID ( - ( true * ID [ 123 ] ) ) ] bool ) ID }",
  "func ID ( { : [ ID ( - ] true * ID [ 123 ] ) ) ( bool ) ID }",
  "func ID ( ID : bool , ID : [ ] bool ) { var ID : ID if int * - true * ( ( ( ( ID ) ) ) ) { } while 123 { } }",
  "func ID ( ID : bool , ID : [ ] bool ) { var ID : ID if int * - true * ( ( ( ( ID ) ) ) ) { } while 123 { } }",
  "func ID ( ID : bool , ID : [ ] bool { { var ID : ID if int * - true * ( ( ( ( ID ) ) ) ) ) } while 123 { } }",
  "func ID ( ID : int ) : [ ] int { var ID : bool var ID : int { var ID : ] var ID : [ - ( true ) bool [ ] [ ] [ ] int } if ID { } }",
  "func ID ( ID : int ) : [ ] int { var ID : bool var ID : int { var ID : ] var ID : [ - ( true ) bool [ ] [ ] [ ] int } if ID { } }",
  "func ID ( ID : int ) : [ ] int { var ID : bool var ID : int { var ID : ] var ID { [ - ( true ) bool [ ] [ ] [ ] int } if ID : } }",
  "func ID ( ) : bool { var ID : int } ID : [ ] int return ID ( ) [ ID ] var",
  "func ID ( ) : bool int var ID : int } ID : [ ] { return ID ( ) [ ID ] var",
  "func ID ( ) : bool { var ID func [ ID [ ID [ ( ID ) ] [ true ] ] [ ID ] ] bool } : ID ( ) { }",
  "func ID ( ) : bool { var ID func [ ID [ ID [ ( ID ] ] [ true ) ] [ ID ] ] bool } : ID ( ) { }",
  "func ID ( ) : bool { var ID func [ ID [ ID [ ( ID ] ] [ true ) ] [ ID ] ] } bool : ID ( ) { }",
  "func ID ( ) { var ID : int { while { / false + ( - ID ) + ID { } print ID } } func ID ( ) false }",
  "func ID ID ) { var ID : int { while { / false + ( - ID ) + ID { } print ID } } func ( ( ) false }",
  "func ID ID ) { var ID : int { while { / false + ( - ID ) + ID { } print } } } func ( ( ) false ID",
  "func ID ( ID : [ ] [ : [ ] [ ] int ) { var ID ] [ ] bool return } func ID ( ID : [ ] bool ) { }",
  "func ID ( ID : [ ] [ : [ ] [ ] int ) { var ID ] [ ID bool return } func ID ( ] : [ ] bool ) { }",
  "func { ( ID : [ ] [ : [ ] [ ] int ) ID var ID ] [ ID bool return } func ID ( ] : [ ] bool ) { }",
  "func ID ( ) : [ ( - 123 * 123 ) ( ( false / ) ) ] int { }",
  "( ID ( ) : [ func - 123 * 123 ) ( ( false / ) ) ] int { }",
  "( ID ( false : [ func - 123 * 123 ) ( ( ) / ) ) ] int { }",
  "func ID ( ID : [ ] [ ] bool , ID : bool , ID ID int ) { var : : int print ID ( ) } func ID ( ) { }",
  "func ID ( ID : ID ] [ ] bool , [ : bool , ID ID int ) { var : : int print ID ( ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ( true * ] [ ( ID ) ID [ - false ] ) ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ( true * ] [ ( ID ) ID [ - false ] ) ID int } func ] ( ) { }",
  "func ID ( ] : [ false >= ID [ ( - ID [ ( false ) ] ) ] [ true ) ] int { }",
  "func ID ( ] : [ false >= ID } ( - ID [ ( false ) ] ) ] [ true ) ] int { [",
  "func ] ( ] : [ false >= ID } ( - ID [ ( false ) ID ) ] [ true ) ] int { [",
  "func ID ( false : [ - 123 and ID / false or true or ID - true ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( false : [ - 123 and ID / false or true or ID - true ] [ ] bool ) ) } func ID ( { { }",
  "func ID ( ID : [ ID ( ) * - ( - [ ID - - ( ID ) ] ) / false ] [ ] int ) { }",
  "func ID ( - : [ ID ( ) * ID ( - [ ID - - ( ID ) ] ) / false ] [ ] int ) { }",
  "func ID ( - : ) ID ( ) * ID ( - [ ID - - ( ID [ ] ) / false ] [ ] int ) { }",
  "func ID ( ) : bool { } func ID ( ID : int , ID : } ) : int { var ID : [ ID ] [ ] int bool",
  "func ID ( ) : bool { } func ID ( int : int , ID : } ) : ID { var ID : [ ID ] [ ] int bool",
  "func ID ( ) : bool { } func ID ( int : int , ID : } int : ID { var ID : [ ID ] [ ] ) bool",
  "func ID int ) { var ID : ( if - true * - ( true and 123 ) { } }",
  "func ID int ) { var ID ) ( if - true * - ( true and 123 : { } }",
  "func ID int ) { var ID ) ( if - true * - 123 true and ( : { } }",
  "func ID ( ID : bool , ID : [ ] bool , ID : int ) : [ ( ID [ ( 123 ) ] [ ( 123 ) ] ] ) [ ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : int ) : [ ( ID [ ( 123 ) ] [ ( 123 ) ] ] ) [ ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : int ) : [ ( ID [ ( 123 ) ] [ ( 123 ) ] ] ) [ ] [ func [ ] bool { } ] ID ( ) { }",
  "func ID ( ID : - ID [ ID + ( true / ( ( [ 123 ) ) * ID ) ] ] int ) { }",
  "func ID ( ID : - ID [ ID + ( ] / ( ( [ 123 ) ) * ID ) ] true int ) { }",
  "func ID ( ID / - ID [ ID + ( ] : ( ( [ 123 ) ) * ID ) ] true int ) { }",
  "func ID ( } : bool ) : int { var ID : bool ID ( ID ( ( - ( ID ) ) ) ) = - ( - false ) ID",
  "func ID ( } : bool ) : int { var - : bool ID ( ID ( ( ID ( ID ) ) ) ) = - ( - false ) ID",
  "func ID ( ) { while ID [ - ( 123 * ( - ( ID ) ID / ID ) ] [ - ( - ) ) ] { } while false { } }",
  "func ID ( ) { while ID [ - ( 123 * ( - ( ID ) ID / ID ) ] [ - ( } ) ) ] { } while false { } -",
  "func ID ( ) { while ID [ - ( 123 * ( - ( ID ) ID / ID ) ] [ - ( } ) ) ] { } while false { } -",
  "func ID ( ID : int , ID : int ) : [ ] [ ] int } while false * false * ID { { print - - - - ID }",
  "func ID ( ID : int , ID : int ) : [ ] [ ] int } while false * false * ID { { print - - - - ID }",
  "func ID ( ID : int , ID : int : ) [ ] [ ] int } while false * false * ID { { print - - - - ID }",
  "func ID ( ID ID bool , ID : int ) { { var : : [ ID + false / 123 / - ID ] [ ] bool } }",
  "func ID ( ID ID bool , ID : int ) { { var : : [ ID + false / 123 / - ID ] [ ] bool } }",
  "func ID ( ID ID bool , ID : int ) { { var : : [ ID bool false / 123 / - ID ] [ ] + } }",
  "func ID ( ID : [ ] bool , ID : bool , ID : int ) { var ID : int return true - - - ( ( - true ( - ID ) ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool , ID : int ) { var ID : int return ( - - - ( ( - true ( - ID ) ) ) } func ID true ) { }",
  "func ID ( ) : [ ] bool , ID : bool , ID : int ID { var ID : int return ( - - - ( ( - true ( - ID ) ) ) } func ID true ) { }",
  "[ ID ( ID : bool , ID : int ) : int { print false / ID func - false ] [ - ( - ID ) ] / ( - 123 ) } func ID ( ) { }",
  "[ ID ( / : bool , ID : int ) : int { print false / ID func - false ] [ - ( - ID ) ] ID ( - 123 ) } func ID ( ) { }",
  "[ ID ( / : bool , ID : ) ) : int { print false / ID func - false ] [ - ( - ID int ] ID ( - 123 ) } func ID ( ) { }",
  "func ID ( ID : [ - [ / ID 123 ID [ ID ( ) ] ] * false ] bool ) { } func ID ( ) { }",
  "func ID ( ID ) [ - [ / ID 123 ID [ ID ( : ] ] * false ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] func , ID : bool ) { var ID : [ ] bool return ID ( ) [ ID ] } bool ID ( ) { }",
  "func ID ( ID : } ] func , ID : bool ) { var ID : [ ] bool return ID ( ) [ ID ] [ bool ID ( ) { }",
  "func ID ( ID : } ] func , ID : bool ) { var ID : [ bool bool return ID ( ) [ ID ] [ ] ID ( ) { }",
  "func ID ( ID : bool , ID : ( ) { var ID : bool var ID : bool { var ID : bool ID ( ) = int ( ID ) ) print - false } }",
  "func ID ( ID : bool , ID : ( ) { var ID : bool var ID : bool ID var ID : bool ID ( ) = int ( { ) ) print - false } }",
  "func var ( ID : bool , ID : ( ) { var ID : bool var ID : bool ID ID ID : bool ID ( ) = int ( { ) ) print - false } }",
  "func ID ( ) { while ID [ - ( ID * - ID ) ] [ ID ] { } ID ) ( ( ID = ) } func ID ( ) { }",
  "func ID ( ) { while ID [ - ( ID * [ ID ) ] - ID ] { } ID ) ( ( ID = ) } func ID ( ) { }",
  "ID ID ( ) { while ID [ - ( func * [ ID ) ] - ID ] { } ID ) ( ( ID = ) } func ID ( ) { }",
  "func ID ( ) : int { } func ID ( ID ] bool ) : int { { var ID : [ false : int } call ID ( ) }",
  "func ID ( ) : int { } func ID ( ID ] bool [ : int { { var ID : ) false : int } call ID ( ) }",
  "func ID ( ) : int { } func { ( ID ] bool [ : int ID { var ID : ) false : int } call ID ( ) }",
  "func ID ( ID ) [ ID [ ( - ID [ false ] [ - false ] : ] [ false ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID ) [ ID [ ( - ID [ false false [ - false ] : ] [ ] ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID ) [ ID [ ( - ID [ false false { - false ] : ] [ ] ] ] bool ) [ } func ID ( ) { }",
  "func ID ( ID : int ) : bool { return 123 == false - - false * - ( 123 ) * ( true ) - - ( 123 ( ) ) }",
  "func ID ( ID : int ) : bool { return 123 == false - - false * - ( 123 ) * ( true ) - - ( 123 ( ) ) }",
  "func ID ( ID : bool , ID : [ false * ( } * false or false ) ] bool , ID : bool ) { 123",
  "func ID ( ID : bool , ID : [ ) * ( } * false or false false ] bool , ID : bool ) { 123",
  "func ID ( ) } var ID : int var ID : [ false * - false / ( ID ) ] [ ] int { func ID ( ) { }",
  "func ID ( ) } var ID : int var ID : [ false * - false / ( ID ) ] ] [ int { func ID ( ) { }",
  "func ID ( ) } var ID ( int var ID : [ false * - false / ( ID ) ] ] [ int { func ID : ) { }",
  "func ID ( ) ID bool { var ID : int var : : int }",
  "func ID ( ) ID bool { var ID : int int : : var }",
  "int ID ( ) ID bool { var ID : int func : : var }",
  "func ID ( ID : bool ) { } func ID ( ID } [ ] int ) : [ ] bool { print 123 :",
  "func ID ( ID : bool ) { } func ID ( print } [ ] int ) : [ ] bool { ID 123 :",
  "func print ( ID : bool ) { } func ID ( ID } [ ] int ) : [ ] bool { ID 123 :",
  "func ID ( ) { call ID ( ID * ID ( ) + - ID [ ID ] [ ( } - - ID ) ) ] - - ID ) while ( - - - - ( false ) ) { ( } func ID ( ) { }",
  "func ID ( ) { call ID ( ID * ID ( ) + - ID [ ID } [ ( ] - - ID ) ) ] - - ID ) while ( - - - - ( false ) ) { ( } func ID ( ) { }",
  "func ID ( ) { call while ( ID * ID ( ) + - ID [ ID } [ ( ] - - ID ) ) ] - - ID ) ID ( - - - - ( false ) ) { ( } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var [ : bool ID [ false / ( ( true ) ) * - ID ] ID ( - ID ) ] = - - ( - ( ( true ) ) ) if ID { } }",
  "func ID ( ) : int { var true : bool var [ : bool ID [ false / ( ( ID ) ) * - ID ] ID ( - ID ) ] = - - ( - ( ( true ) ) ) if ID { } }",
  "func ID ( ) : int { var true : bool var [ : bool ID [ false / ( ( ID ) ) * - ) ] ID ( - ID ) ] = - - ( - ( ( true ) ID ) if ID { } }",
  "func ID ( ID int bool , ID : bool ) : bool { var ID : bool return } func ID ( ID : bool ) { var ID : : }",
  "func ID ( ID int bool , ID : bool ) : bool { var ID : bool return var func ID ( ID : bool ) { } ID : : }",
  "( ID func ID int bool , ID : bool ) : bool { var ID : bool return var func ID ( ID : bool ) { } ID : : }",
  "func ( ID ) { var ID : [ ] bool var ID : [ ID ( ) * ID [ ID ] ] int } func ID ( ) { }",
  "func ID ID ) { var ID : [ ] bool var ID : [ ID ( ) * ID [ ID ] ] int } func ( ( ) { }",
  "func ID ( ID : [ ] [ - ID [ - } ( ( ID ) ) ] [ ID ] ] int ) { } func ID ( ) { ID",
  "func ID ( ID : : ] int ) [ bool { var ID : int }",
  "func ID ( ID : : } int ) [ bool { var ID : int ]",
  "func ID ( ID ID : } int ) [ bool { var : : int ]",
  "{ ID ( ) : int { var ID : bool var ID : bool while ID [ ( ( 123 ) ) ] func } } func ID ( ) { }",
  "{ ID ( ) : int { var ID : bool var ID : bool while ID [ ( ( 123 ) ) ] func } } func ID ( ) { }",
  "{ ID ( ) : 123 { var ID : bool var ID : bool while ID [ ( ( int ) ) ] func } } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ - * ( 123 + - ( ( - 123 true ) ) ) ] bool }",
  "func ID ( ID : bool ) { var ID : [ - * ( 123 + - ( ( - 123 true ) ) ) ] bool }",
  "func ID ( ID : bool ) { var ID : [ ) * ( 123 + - ( ( - 123 true ) ) - ] bool }",
  "func ID ( { ) var ID : [ ID ( ) / ID * ID <= ID ] int }",
  "func ID ( { } var ID : [ ID ( ) / ID * ID <= ID ] int )",
  "func ID ( { : var ID } [ ID ( ) / ID * ID <= ID ] int )",
  "func ID ( ) : [ - false * 123 + 123 * ID ( ) ) - - ID ] [ ( - ( ID [ ) ] * ID - false ] [ ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : } - false * 123 + 123 * ID ( ) ) - - ID ] [ ( - ( ID [ ) ] * ID - false ] [ ] [ ] [ ] bool { [ func ID ( ) { }",
  "func ID ( ) : } - false * 123 + 123 * false ( ) ) - - ID ] [ ( - ( ID [ ) ] * ID - ID ] [ ] [ ] [ ] bool { [ func ID ( ) { }",
  "func ID ( ID : bool ) { call ID ( + - ID - ( - 123 ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool ) { call ID ( + - ID - ( - 123 ) ) call ID ( ) } func ID } ) { (",
  "func ID ( ID : bool ) { call ID ( ) - ID - ( - 123 ) ) call ID ( + } func ID } ) { (",
  "func ID ( ) : bool { var ID : ID } func bool ( ID : [ ] bool , ID : int , ID : int ) : int { var ID : [ ] bool }",
  "func ID ( ) : bool { var ID : ID } func bool ( ID : [ ) bool , ID : int , ID : int ] : int { var ID : [ ] bool }",
  "func ID ( ) : bool { var ID { ID } func bool ( ID : [ ) bool , ID : int , ID : int ] : int : var ID : [ ] bool }",
  "func ID ( ) : [ ID ( ) [ true / ( - ( ( true ) ) ) * false ] false ( [ ) ] ] [ ] bool { }",
  "func ID ( ( : [ ID ( ) [ true / ) - ( ( true ) ) ) * false ] false ( [ ) ] ] [ ] bool { }",
  "func ID ( ( : [ ID ( ) true true / ) - ( ( [ ) ) ) * false ] false ( [ ) ] ] [ ] bool { }",
  "ID ID ( ID : bool , func : bool ) : bool { call ID ( 123 - ( ( - ID ) ) ) { } } func ID ( ) { }",
  "ID ( ID ID : bool , func : bool ) : bool { call ID ( 123 - ( ( - ID ) ) ) { } } func ID ( ) { }",
  "ID ( ID ID : bool , func : bool ) : bool { call ID ( 123 - ( ( - ID ) ) ) { } } func { ( ) ID }",
  "func ID ( ID : [ , ID : bool - ID / ( true - ID * - ( - 123 ) * 123 ) / - ( ID ) ] bool ) { }",
  "func ID ( ID : [ , ID : bool - ID / ( true - ID / - ( - 123 ) * 123 ) * - ( ID ) ] bool ) { }",
  "func ID ( ID : [ , ID / bool - ID : ( true - ID / - ( - 123 ) * 123 ) * - ( ID ) ] bool ) { }",
  "func ID ( ID : [ ( ID [ ( true * ( - ( ( - 123 ) true ) * ) ) ] [ - - - ( ID ) ] ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ( ID [ ( true * ( - ( ( - 123 ) true ) * ) ) ] [ - - - ( { ) ] ) ] [ ] int ) { } func ID ( ) ID }",
  "func ID ( ID : [ ( ID [ ( true * ( - ( ( - 123 ) true ) * ) ) ] [ - - - ( { ) ] ) ( [ ] int ) { } func ID ] ) ID }",
  "ID ID ( ID : int , ID : bool ) : int { return } func func ( ) : [ ] bool { if true { } while ( ( ID ) ) { } }",
  "ID ID ( ID : int , ID : bool } : int { return } func func ( ) : [ ] bool { if true { ) while ( ( ID ) ) { } }",
  "ID ID ( ID ( int , ID : bool } : int { return } func func ( ) : [ ] bool { if true { ) while : ( ID ) ) { } }",
  "func ID ( ID : int , ID : [ ID [ ID ID - - 123 ] [ - - ID ] ] ] int , [ : int ) { }",
  "func ID ] ID : int , ID : [ ID [ ID ID - - 123 ] [ - - ID ( ] ] int , [ : int ) { }",
  "func ID ( ) : bool { var ID : [ { int ] var ID : [ ] [ ] bool var ID : int { } while ID { } } call ID ( ) }",
  "func ID ) ( : bool { var ID : [ { int ] var ID : [ ] [ ] bool var ID : int { } while ID { } } call ID ( ) }",
  "func ID } ( : bool { var ID : [ { int ] var ID : [ ] [ ] bool var ID : int { } while ID { } } call ID ( ) )",
  "func ID ( ID : [ ] [ ] int ) : [ bool bool { var ID : ] if - ID ( ) { } print ( ID ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int ) : [ bool bool { var ID : ] if } ID ( ) { - print ( ID ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ } int ) : [ bool bool { var ID : ] if ] ID ( ) { - print ( ID ) } func ID ( ) { }",
  "func ( ( ID : [ ] [ ] bool ) { return ID ( ( ID ) ) ) }",
  "func ( ( ID : [ ] [ ] bool ID { return ID ( ( ) ) ) ) }",
  "func ( ( ID : [ ID [ ] bool ] { return ID ( ( ) ) ) ) }",
  "func ID ( ID : int { ID : [ ] [ - - - - ( true - ( ID ) ) ] [ ] int , ID : int ) , } func ID ( ) { }",
  "func ID ( ID : int { ID : [ ] [ - - func - ( true - ( ID ) ) ] [ ] int , ID : int ) , } - ID ( ) { }",
  "func ID ( ID : int { ID : [ ] [ - - func - ( ) - ( ID ) true ] [ ] int , ID : int ) , } - ID ( ) { }",
  "false ID ( ID : bool ) : int { var ID : [ ] [ ] [ 123 * ID ( ID ) / - ( ( func ) ) ] int var ID : int }",
  "false ID ( ID : bool ) : - { var ID : [ ] [ ] [ 123 * ID ( ID ) / int ( ( func ) ) ] int var ID : int }",
  "( ID ( ID : bool ) : - { var ID : [ ] [ ] [ 123 * ID ( ID ) / int ( false func ) ) ] int var ID : int }",
  "func ID ( ( : int , ID : bool , ID : bool ) { while ID ( ID ) ) { } while false { } } func ID ( ) { }",
  "func ID ( ( : int , ID : bool , ID : bool ) { while ID } ID ) ) { } while false { } } func ID ( ) { (",
  "func ID ( ( : int , ID : bool , ID : bool while { while ID } ID ) ) { } ) false { } } func ID ( ) { (",
  "func ID ( ) : int { var ID : [ ] bool var ID : [ - ( ] < - - 123 ) ID int }",
  "- ID ( ) : int { var ID : [ ] bool var ID : [ func ( ] < - - 123 ) ID int }",
  "func ID ( ID : bool ) : bool { var ID : ) call ID ( ( ( ID ) int ) ID = ID }",
  "func ID ( ID : bool ) : bool { var ID : ) call ID ( ( ( ID ) int ) ID = ID }",
  "func ID ( ID : bool ) : bool { var ID : ) call ID ( ( } ID ) int ) ID = ID (",
  "func ID : ID : bool ) ( bool { { } { return - 123 / ID ( 123 ) } }",
  "func 123 : ID : bool ) ( bool { { } { return - 123 / ID ( ID ) } }",
  "func 123 : ID : bool ) ( bool ID { } { return - 123 / ID ( { ) } }",
  "func ID ( ) : bool { ] ( - false - ID [ - - - ( ( - ID ) ) ] [ false if ) { } }",
  "func ID ( ) : bool { ] ( - { - ID [ - - - ( ( - ID ) ) ] [ false if ) false } }",
  "func ID ( ) : bool { ] ( - { - ID [ - - - ( ( - ID ) ) if [ false ] ) false } }",
  "func { ( ) { call ID ( - ID [ ID ( ) * ( - ID ) ] [ false ] ) ID = true } func ID ( ) ID }",
  "func { ( ) { call ID ( - ID } ID ( ) * ( - ID ) ] [ false ] ) ID = true } func ID ( ) ID [",
  "func { ( ) { call ID ( - ID } ID ( ) * ( - ID ) ] [ false ] ) ID = true } func ID ( ) ID [",
  "} ID ( ) : int { { var ID : [ ] int var ID : [ true / ( ID ) / ID ] int } print true } func ID ( ) { func",
  "} ID ( ) : int { var var ID : [ ] int { ID : [ true / ( ID ) / ID ] int } print true } func ID ( ) { func",
  "} ID ] ) : int { var var ID : [ ] int { ID : [ true / ( ID ) / ID ( int } print true } func ID ( ) { func",
  "func ID ( ) { var ID : int var ID : [ - ID false ) [ 123 - ( - - ( ( ) ) ] [ ID ] ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : int var - : [ - ID false ) [ 123 - ( - ID ( ( ) ) ] [ ID ] ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : int var - : [ - ID false ( [ 123 - ( - ID ( ) ) ) ] [ ID ] ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) + int { if 123 : - ( 123 ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : + ) bool int { if 123 : - ( 123 ) { } } func ID ( ) { }",
  "ID ID ( ID : int , ID : bool , func : + ) bool int { if 123 : - ( 123 ) { } } func ID ( ) { }",
  "func ID ( ID : [ - - 123 * true / false - ID ( ( ( ( ( false ID ) ) ) ) ) ) + ( ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ - - 123 * true / false - ID ( ( ( ( ( false ID ] ) ) ) ) ) + ( ) bool ) { } func ID ( ) { }",
  "func ID ( ID : [ - - 123 * true / false - ID ( ( ( ( ( false ID ] ) ) ) ) ) + ( ) bool ) { } func ID ( ) { }",
  "func ID ( ) : : { } func ID ( ID : bool , ID : bool , ID : bool ) : [ ] bool { var ID : int var ID bool bool }",
  "func ID ( ) : : { } func ID ( ID : bool , ] : bool , ID : bool ) : [ ID bool { var ID : int var ID bool bool }",
  "func ID ( ) : : { } func ID ( ID : bool } ] : bool , ID : bool ) : [ ID bool { var ID : int var ID bool bool ,",
  "func ID ( ) : [ ( false + ( ( ID ) ) ID ] bool ) { }",
  "ID ID ( ) : [ ( false + ( ( func ) ) ID ] bool ) { }",
  "ID ID { ) : [ ( false + ( ( func ) ) ID ] bool ) ( }",
  "func ID ( ID : int ) int var ID : [ false > false / - ID ( ) [ true ] [ ID ] / ( 123 ) ] { } func ID ( ) { }",
  "func ID ( ID : int ) int var ID : ( false > false / - ID ( ) [ true ] [ ID ] / ( 123 ) ] { } func ID [ ) { }",
  "func ) ( ) : bool { var ID : bool return ID ( ) [ true * ID ( ID ] } func ID ( ) { }",
  "func ) ( ) var bool { : ID : bool return ID ( ) [ true * ID ( ID ] } func ID ( ) { }",
  ": ) ( ) var bool { func ID : bool return ID ( ) [ true * ID ( ID ] } func ID ( ) { }",
  "func ID ( ) { if ID / ( - ID ( ID ) ) * { 123 ) ( } while ID { } } func ID ( ) { }",
  "func ID ( ) { if ID / ( ( ID ( ID ) ) * { 123 ) ( } while ID { } } func ID - ) { }",
  "func : ( ID ID int , ID : [ ] int , ID : [ ] int ) { call ID ( - - ID ) while 123 { } } func ID ( ) { }",
  "func : ( ID ID int , ID : [ ] int , ID : [ ] int ) { call { ( - - ID ) while 123 ID } } func ID ( ) { }",
  "func ) ( ID ID int , ID : [ ] int , ID : [ ] int ) { call { ( - - ID ) while 123 ID } } func ID ( : { }",
  "func ID ( ID : bool , bool : bool , ID : [ ] [ ] ID ) { var ID : [ ] int return - ( 123 ) }",
  "func ID ( ID : bool , bool : bool , ID { [ ] [ ] ID ) : var ID : [ ] int return - ( 123 ) }",
  "func ID ( ID : bool , bool : bool , ID { [ return [ ] ID ) : var ID : [ ] int ] - ( 123 ) }",
  "func ID ( ID : bool ) : bool { var ID : int var ID : ID ] int print - ( ( [ ) ) print - false }",
  "func ID ( ID : bool ) : bool { var ID : int var ID : ID ] int print - false ( [ ) ) print - ( }",
  "func ID ( ( : bool ) : bool { var ID : int var ID : ID ] int print - false ID [ ) ) print - ( }",
  "func ID ( ID : [ ] [ ] bool , ID : [ ] ( ( ( ID ) ) ) ) ] [ ( [ ] [ ] int , ID : [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : [ ] ( ( ( ID ) ) ) ) ] [ ] [ ] [ ( int , ID : [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] ] ] bool , ID : [ ] ( ( ( ID ) ) ) ) ] [ ] [ ] [ ( int , ID : [ ] [ ] [ [ int ) { } func ID ( ) { }",
  "func ID : ID : int ) { var ID ( int }",
  "( ID : ID : int ) { var ID func int }",
  "( ID : var : int ) { ID ID func int }",
  "func ID ( ID : bool , ID : int , ID : [ ] [ - 123 * false - ID ( ID ) ] bool { { } func ID ( ) ) }",
  "func ID ( ID : bool , : : int , ID ID [ ] [ - 123 * false - ID ( ID ) ] bool { { } func ID ( ) ) }",
  "func ID ( ID : bool , : : int , ID ID [ ] [ - 123 * false - ( ID ID ) ] bool { { } func ID ( ) ) }",
  "func ID ( ID ( [ false - ( ID / ID [ ( ( - ( ( 123 ) ) ) ) ] [ ( true ) ] ) + : - ( ID ) ) ] int ) { }",
  "func ID ( ID - [ false - ( ID / ID [ ( ( ( ( ( 123 ) ) ) ) ] [ ( true ) ] ) + : - ( ID ) ) ] int ) { }",
  "func ID ( ID - [ false - ( ID / ID [ ( ( ( ( ( 123 ) ) ) ) ] [ : true ) ] ) + ( - ( ID ) ) ] int ) { }",
  "func ID ( ID : int , ID : int ) : bool { var ID : bool var ID : [ ] bool ID = 123 ] [ 123 print true }",
  "func ID ( ID : int , ID : int ) { bool : var ID : bool var ID : [ ] bool ID = 123 ] [ 123 print true }",
  "func ID ( ID : int , ID : { ) int bool : var ID : bool var ID : [ ] bool ID = 123 ] [ 123 print true }",
  "func ID ( ID : - false / true and ( ( 123 / ( - false ) * [ - ID ) ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : - false / true and ( ( 123 / ( - * ) false [ - ID ) ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : - false / true and { ( 123 / ( - * ) false [ - ID ) ) ] [ ] [ ] bool ) ( } func ID ( ) { }",
  "ID ID ( ID : bool , ID : int ) : [ ] int { var ID : bool if ID ( ) [ ( ( - func ) ) ] { } } func ID ( ) { }",
  "ID ID ( ID { bool , ID : int ) : [ ] int { var ID : bool if ID ( ) [ ( ( - func ) ) ] : } } func ID ( ) { }",
  "ID ID ( ID { bool , ID : int ) : [ ] int { var ID : bool if ) ( ) [ ( ( - func ) ) ] : } } func ID ( ID { }",
  "func ID ( ] : int { var ID : int } func ID ( ID : [ ] int ) : int { var ID : [ true ) bool }",
  "{ ID ( ] : int { var ID : int } func ID ( ID : [ ] int ) : int func var ID : [ true ) bool }",
  "{ ID ( ] : int { var ID int : } func ID ( ID : [ ] int ) : int func var ID : [ true ) bool }",
  "func ID ( ) : bool { while ID [ - ( ID ( - - false ) ) ] [ ( false ) { ] } ID = ( ( ID ) ) }",
  "func ID ( ) : bool { while ID [ - ( ID ( ( - false ) ) ] [ - false ) { ] } ID = ( ( ID ) ) }",
  "ID func ( ) : bool { while ID [ - ( ID ( ( - false ) ) ] [ - false ) { ] } ID = ( ( ID ) ) }",
  "func ID ( ) : bool ( ID { false * true * ( ID [ false ] [ ( 123 ) ] ) ) = false }",
  "func ID ( ) : false ( ID { false * true * ( ID [ bool ] [ ( 123 ) ] ) ) = false }",
  "func ID ( ) : false ( false { false * true * ( ID [ bool ] [ ( 123 ) ] ) ) = ID }",
  ") ID ( ID : [ ] bool ) { var ID : bool return - ID ( func [ false ] [ - ( 123 ) ] } func ID ( ) { }",
  "] ID ( ID : [ ] bool ) { var ID : bool return - ID ( func [ false ) [ - ( 123 ) ] } func ID ( ) { }",
  "] ID ( ID : [ ] bool ) { var ID : bool return - ID ( func [ false ) [ - ( 123 ) ] } func ID ( ) { }",
  "func ID ( ID : bool ) { while - 123 ID ( 123 * false / true ) * / { } print 123 }",
  "func ID ( ID : bool ) { / - 123 ID ( 123 * false / true ) * while { } print 123 }",
  "func ID ( ID : bool , ID : [ true + - ( ) true / - ( ID ) ) ( ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID ) [ true + - ( : true / - ( ID ) ) ( ] bool ) { } func ID ( ) { }",
  "func ID ( ID ( bool , ID ) [ true + - ( : true / - ( ID ) ) : ] bool ) { } func ID ( ) { }",
  "func ID ( ) { print true / >= ( false and true - true ) * ID ID = ID } func ID ( ) { }",
  "func ID { ) { print true / >= ( false and true - true ) * ID ID = ID } func ID ( ) ( }",
  "( ID { ) { print true / >= ( false and true - true ) * ID ID = ID } func ID ( ) func }",
  "func ID ( ID : bool ) : int { var ID : [ ID ( - ID [ - ( ID ) ] ) { [ ] [ ] bool var ID : bool } func ID ( ) ] }",
  "func ID ( ID : bool ) : int { var } : [ ID ( - ID [ - ( ID ) ] ) { [ ] [ ] bool var ID : bool } func ID ( ) ] ID",
  "func ID ( ID : bool ) : int { var } : [ ID ( - ID [ - ( ID ] ] ) { [ ) [ ] bool var ID : bool } func ID ( ) ] ID",
  "func ID ( ) : var ID : [ ID ( ) * ( ID [ ( - - ID ) ] [ ID ] ) ] [ ] [ ] [ ] bool var ID { int }",
  "func ID ( ) : var ID : - ID ( ) * ( ID [ ( - [ ID ) ] [ ID ] ) ] [ ] [ ] [ ] bool var ID { int }",
  "func ID ( ) ] var ID : - ID ( ) * ( ID [ ( - [ ID ) ] [ ID ] ) ] [ : [ ] [ ] bool var ID { int }",
  "func } ( ID : int , ID : [ - ( ( true / ( - ( - 123 ) ) ) ) ] int ) { ID func ID ( ) { }",
  "func } ( ID : int , ID : [ - ( ( true / ( - ( - 123 ) ) ) ) ] int ) { ( func ID ID ) { }",
  "func } ( ID : int , ID : [ - ( ( true / ( - ( - 123 ) ) ) ) ] int ) { ( func ID ID ) { }",
  "func ID ( ID : bool , ID : [ ] [ - ID ( ( ( ) ) ) ) ] [ ] [ ] [ ] bool , ID : [ ] int ID { }",
  "func ID ( ID : bool , ID : [ ] [ - ID ( ( ( ] ) ) ) ] [ ] [ ) [ ] bool , ID : [ ] int ID { }",
  "func ID ( ) ID var ID : bool print ID [ { ( ( ID ) ) ] [ ID ] } func ID ( ) { }",
  "func ID ( ID ID var ID : bool print ID [ { ( ( ID ) ) ] [ ID ] } func ) ( ) { }",
  ") ID ( ID : int , ID : bool ) { var ID : [ 123 / ( ( - true ) ) * - ( false func ] bool } func ID ( ) { }",
  ") ID ( ID : int , ID : bool ) { var ID : [ 123 / ( ( - true ) ) * ( ( false func ] bool } func ID - ) { }",
  ") ID ( ID : int , ) : bool ) { var ID : [ 123 / ( ( - true ) ID * ( ( false func ] bool } func ID - ) { }",
  "func ID ( ) { var ID ] [ - ID ( - ( - - ID ) ) ] [ ] [ : bool } func ID ( ) { }",
  "func ID ( ) { var ID ] [ - ID ( - ( - - ID ) ) ] [ ] [ : bool } func ID ( ) { }",
  "func ID ( ) var { ID ] [ - ID ( - ( - - ID ) ) ] [ ] [ : bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : [ ] ) ] int { } call ID ( ID [ }",
  "func ID ( ID : int , ID : ] , ID : bool ) { var ID : [ bool ) ] int { } call ID ( ID [ }",
  "func ID ( ID : , int ID : ] , ID : bool ) { var ID : [ bool ) ] int { } call ID ( ID [ }",
  "func ID ( ID : bool , ID : bool , ID : [ ] [ ] int ) int var ID : { if ( ID ) { } }",
  "func ID ( ID : bool , ID : bool , ID : [ ] [ ] int ) int var ID : { if ( ID ) { } }",
  "func ID ( , : bool , ID : bool ID ID : [ ] [ ] int ) int var ID : { if ( ID ) { } }",
  "func ID ( ID : [ 123 * - true / true - ( - ( false ) ) + 123 - ] [ ] int ) { }",
  "func ID ( ID : [ 123 * - true / true - ( - ( { ) ) + 123 - ] [ ] int ) false }",
  "func ID ( ID : [ 123 * - true / true - ( - } { ) ) + 123 - ] [ ] int ) false (",
  "call ID ( ID : bool , ID : int , ID : bool ) : [ ] bool { var ID : int func ID ( ID ) }",
  "call ID ( ID : bool , ID : int , ID ) bool : : [ ] bool { var ID : int func ID ( ID ) }",
  "ID ID ( func : [ ( ( ID [ - - 123 ] ) ) ] [ ] bool ) { }",
  "ID ID ( func ] [ ( ( ID [ - - 123 ] ) ) ] [ : bool ) { }",
  "ID ID ( func ] [ ( ) ID [ - - 123 ] ) ( ] [ : bool ) { }",
  "func ID ( ID : bool ) { var ID : [ ) ( ID ( ID ) - ] bool }",
  "func ID ( ID : bool ) ( var ID : [ ) { ID ( ID ) - ] bool }",
  "bool ID ( ID : func ) ( var ID : [ ) { ID ( ID ) - ] bool }",
  "func ID ( ) { var ID : int print ID [ - - ( ID ) ] [ - - } ] ID",
  "func ID ( - { var ID : int print ID [ - - ( ID ) ] [ - ) } ] ID",
  "func - ( - { var ID : int print ID [ ID - ( ID ) ] [ - ) } ] ID",
  "func ID ( var : [ ] bool ) : int { var ID : [ true * - ( 123 ) ] bool ID ID : bool } func ID ( ) { }",
  "func ID ( var : [ ] bool ID : int { var ) : [ true * - ( 123 ) ] bool ID ID : bool } func ID ( ) { }",
  "func ID ( var : [ ] bool : ID int { var ) : [ true * - ( 123 ) ] bool ID ID : bool } func ID ( ) { }",
  "func ID ( ID ID [ - false * ID [ ID * : [ ID ] ] ] int ) { } func ID ( ) { }",
  "false ID ( ID ID [ - func * ID [ ID * : [ ID ] ] ] int ) { } func ID ( ) { }",
  "false ID ( ID [ [ - func * ID ID ID * : [ ID ] ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ - 123 / - ] ID ( ) [ - true / ( ( - ( true ) ) ) - [ - ID ] ] int ) { }",
  "func ID ( ID : [ - 123 / - ] ID ( ) ) - true / ( ( - ( true [ ) ) - [ - ID ] ] int ) { }",
  "func ID ( ID : [ - 123 / - ] ID ( ) ) - true / [ ( - ( true [ ) ) - ( - ID ] ] int ) { }",
  "func ID ( ID : ID ] bool ) : int { var ID : [ - ( ( [ ) ) ] [ ] [ ] int var ID : [ ] [ ] bool }",
  "func ID ] ID : ID ] bool ) : int { var ID : [ - ( ( [ ) ) ] [ ] [ ( int var ID : [ ] [ ] bool }",
  "func ID ] ID { ID ] bool ) : int : var ID : [ - ( ( [ ) ) ] [ ] [ ( int var ID : [ ] [ ] bool }",
  "func ID 123 ) : [ - ( 123 / ( / 123 + 123 / 123 - ( false ) ) ] int { }",
  "123 ID 123 ) : [ - ( func / ( / 123 + 123 / 123 - ( false ) ) ] int { }",
  "123 ID 123 ) : [ - ( func ) ( / 123 + 123 / 123 - ( false / ) ] int { }",
  "func ID ( ID : bool ) var var ID : bool { ID : int call ID ( 123 > - - - true ) call ID ( ) }",
  "func - ( ID : bool ) var var ID : bool { ID : int call ID ( 123 > - - ID true ) call ID ( ) }",
  "func - ( { : bool ) var var ID : bool ID ID : int call ID ( 123 > - - ID true ) call ID ( ) }",
  "func ID ( ID : [ ID ( ) or ) / false or true * ( ( ( - 123 ) ) ) * ID ] int 123 { } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) or ) / false or true * ( 123 ( - ( ) ) ) * ID ] int 123 { } func ID ( ) { }",
  "func ID ( : : bool , ID ID bool ) : bool { var ID : int var ID : bool }",
  "func ID bool : : ( , ID ID bool ) : bool { var ID : int var ID : bool }",
  ": ID bool : : ( , ID ID bool ) : bool { var ID : int var ID func bool }",
  "func ID ( ID : int , int : int ) : [ ] bool { var ID : int var ID : ID call ID ( ) while - ID { } } func ID ( ) { }",
  "func ID ( ID : int , int : int ) : [ ] bool { var ID : int var ID : ID call ID ( ) while - ID { } } func ID ( ) { }",
  "func ID ( ID : int , { : int ) : [ ] bool int var ID : int var ID : ID call ID ( ) while - ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int ID = ( 123 - print - false ) false - ID }",
  "func ID ( [ { var ID : ) ] int ID = ( 123 - print - false ) false - ID }",
  "func ID ( ) ID int { var ID : [ ] bool while ID [ - : ( ) ] { } }",
  "] ID ( ) ID int { var ID : [ func bool while ID [ - : ( ) ] { } }",
  "] ID ( ) ID int ( var ID : [ func bool while ID [ - : { ) ] { } }",
  "func - ( ID : bool , ID : int ) { var ID : int { } print - true * - - - true / - ( ( ID ID ) ) } func ID ( ) { }",
  "func - ( ID : bool , ID : int ) { var ID : ( { } print - true * - - - true / - ( int ID ID ) ) } func ID ( ) { }",
  "func - ( ID : bool , ) : int ) { var ID : ( { } print - true * - - - true / - ( int ID ID ID ) } func ID ( ) { }",
  "func ID ( ) [ var ID : [ ( - 123 * - ( ID ) ) ] [ ] int var ID : { ] int }",
  "func ID ( ) ID var [ : [ ( - 123 * - ( ID ) ) ] [ ] int var ID : { ] int }",
  "func ID ( ) ID var [ : [ ( - ID * - ( ID ) ) ] [ ] int var 123 : { ] int }",
  "func ID ( ) : [ ] bool { while ID [ ID 123 ) [ ( ] [ - - 123 ] ] { } } func ID ( ) { }",
  "func ID ( ) : [ ] bool { ID ID [ ID 123 ) [ ( ] [ - - 123 ] ] { } } func while ( ) { }",
  "func ID ( - : [ ] bool { ID ID [ ID 123 ) [ ( ] [ - ) 123 ] ] { } } func while ( ) { }",
  "func ID ( ID : int , ID : [ ] bool ) true var ID : bool ID ( ) = true / false / { print - ( ID ) }",
  "func ID ( ID : int , ID : [ ] bool ) ( var ID : bool ID true ) = true / false / { print - ( ID ) }",
  "/ ID ( ID : int , ID : [ ] bool ) ( var ID : bool ID true ) = true / false func { print - ( ID ) }",
  "func ID ( ID : int , ID : int , ID : : ] bool ) { var ID : int var ID [ [ ] int }",
  "func ID ( ID : int , ID : int , ID : : ] bool ) { var ID : int var ID [ [ ] int }",
  "func ID ( ID : int , ID : int , ID : : ] bool ) : var ID { int var ID [ [ ] int }",
  "func ID ( ) : int { ] ID : [ - ( true * ( - - false ) ) ] bool var ID : [ var [ ] bool } func ID ( ) { }",
  "func ID ( ) } int { ] ID : [ - ( true * ( - - false ) ) ] bool var ID : [ var [ ] bool } func ID ( ) { :",
  "func ID ( ) } int false ] ID : [ - ( true * ( - - { ) ) ] bool var ID : [ var [ ] bool } func ID ( ) { :",
  "func ID ( ID : [ ( ( ID [ - - } ] [ ( ID ) ] ) ) ] [ ] bool ) { } func ID ( ) { ID",
  "func ID ( ID : [ ( ( ID [ - [ } ] [ ( ID ) ] ) ) ] - ] bool ) { } func ID ( ) { ID",
  "func ID ( ID : [ ( ( ID [ - [ } ] [ ( ID ) ] ) ) ] - { bool ) { } func ID ( ) ] ID",
  "func ID ( ) : bool { var ID ID [ - ( true / - ID ( ) != - : ) ] int }",
  "func / ( ) : bool { var ID ID [ - ( true ID - ID ( ) != - : ) ] int }",
  "func var ( ) : bool { / ID ID [ - ( true ID - ID ( ) != - : ) ] int }",
  "func ID ( ) ( var ID : [ 123 + false + - { ( 123 ) ) ] int } func ID ( ) { }",
  "func ID ( ) ( var [ : ID 123 + false + - { ( 123 ) ) ] int } func ID ( ) { }",
  "func ID ( ) ( var [ : ID 123 + false + - { ( 123 ( ) ] int } func ID ) ) { }",
  "func ID ( ID : [ ] bool , ID : bool , ID : [ ] [ ] int ) } call ID ( true ) print ( - - - 123 ) } func ID ( ) { {",
  "func ID ( ID : [ ] bool , ID : bool , ID : [ ] [ ] int { } call ID ( true ) print ( - - - 123 ) } func ID ( ) { )",
  "func ID ( ID : int ) : bool { var ID : bool while ID ( ) [ ( ID ) ] { } } ( - true ) { } } func ID ( ) { if",
  "func : ( ID : int ) ID bool { var ID : bool while ID ( ) [ ( ID ) ] { } } ( - true ) { } } func ID ( ) { if",
  "func : ( { : int ) ID bool ID var ID : bool while ID ( ) [ ( ID ) ] { } } ( - true ) { } } func ID ( ) { if",
  "func ID ( ) : [ ] ] - false or ( ( ( false ) ) ) or ID [ bool { } func ID ( ) { }",
  "func ID ( ) : [ ] ] ) false or ( ( ( false ) ) ) or ID [ bool { } func ID ( - { }",
  "func ID ( ) : [ ] ] ) false or ( [ ( false ) ) ) or ID ( bool { } func ID ( - { }",
  "func ID ( ) { var ID : [ - ID / - 123 * true < ] 123 ] [ ] [ - [ ] int var ID : bool }",
  "func ID ( ) { var ID : [ - ID / - 123 * true < ] 123 ] int ] [ - [ ] [ var ID : bool }",
  "ID ID ( ) { var ID : [ - func / - 123 * true < ] 123 ] int ] [ - [ ] [ var ID : bool }",
  "func ID ( ) : bool { var ID : bool var ID : } call ID ( ) return int",
  "{ ID ( ) : bool func var ID : bool var ID : } call ID ( ) return int",
  "{ ID ( ) : bool func var return : bool var ID : } call ID ( ) ID int",
  "func ID ( ) { var ( : int var ID : [ true + ID ID ( ) [ ( - ( ID ) ) ] [ - - ( ID ) ] ) ] int }",
  ") ID ( ) { var ( : int var ID : [ true + ID ID ( ) [ ( - ( ID ) ) ] [ - - ( ID ) ] func ] int }",
  ") ID ( ) { ( ( : int var ID : [ true + ID ID ( ) [ var - ( ID ) ) ] [ - - ( ID ) ] func ] int }",
  "func ID ( ) { var ID : bool var bool : [ ] bool { var ID : [ - - true / ID ] [ ] ID var ID : int } }",
  "func ID ( ) { var ID : bool var bool : [ ] bool { var ID : [ - - true ID / ] [ ] ID var ID : int } }",
  "func ID ( ) ] var ID : bool var bool : [ ] bool { var ID : [ - - true ID / ] [ { ID var ID : int } }",
  "func ID ( ) : int { var print : bool { ID ID [ ( ID ) ] [ false ] } ID = 123 } func ID ( ) { }",
  "func ID ( ) : int { var print : bool { { ID [ ( ID ) ] [ false ] } ID = 123 } func ID ( ) ID }",
  "func ID : ) : int { var print ( bool { { ID [ ( ID ) ] [ false ] } ID = 123 } func ID ( ) ID }",
  "func ID ( ID : [ ] bool ) } return ID [ ID / ( - false ) ] {",
  "func ID ( ID : [ ] bool ) } return [ ID ID / ( - false ) ] {",
  "func ID ( ID : [ return bool ) } ] [ ID ID / ( - false ) ] {",
  "func ID ( ID : bool ) } call ID ( - - ID [ 123 / ID ] ) ID = ( - 123 ) } func ID ( ) { {",
  "func ID ( ID : bool ) } call ID ( - - ID [ 123 ID / ] ) ID = ( - 123 ) } func ID ( ) { {",
  "func ID ( ID : bool ) } call ID ( - - ID [ 123 ID / ( ) ID = ] - 123 ) } func ID ( ) { {",
  "func ID ( ID : [ ] bool , ID : [ ] [ ] [ 123 - ( 123 ) + 123 ] [ ] [ ] bool ) { } func ID ) ( { }",
  "func ID ( ID : [ ] bool , ID : [ ] [ ] [ 123 - ( 123 ) + 123 ] [ ] [ ] bool ) { } func ID ) ( { }",
  "func ID ( ID : [ ] bool ] ID : [ ] [ ] [ 123 - ( 123 ) + 123 ] [ ] [ , bool ) { } func ID ) ( { }",
  "func ID ( ID : bool , ID : [ ( 123 / 123 / ID [ ( 123 ) { [ ( ( 123 ) ) ] ) ] bool , ID : bool ) { } func ID ( ) ] }",
  "func ID ( ID : bool , ID : [ ( 123 / 123 / ID [ ( 123 ) { [ ( ( 123 ) ) ] ) ] bool , ID : bool ) { } func ID ( ) ] }",
  "func ID ( ID : bool , ID : [ ( 123 / 123 / ID [ ( 123 ) { [ ( ( 123 ) ) ] ) ] bool , ID : bool ) { } func ID ( ) ] }",
  "func ID ( ) : int { var ID : [ ] int var ID : int while ( ( ( 123 } ) ) { ) if - ( ID ) { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] int var ID : ( while ( int ( 123 } ) ) { ) if - ( ID ) { } } func ID ( ) { }",
  ": ID ( ) : int { var ID : [ ] int var ID func ( while ( int ( 123 } ) ) { ) if - ( ID ) { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : bool return ID [ ( ( ) ID ) - ] [ ID ] }",
  "func ID ( ) : int { var bool : int var ID : ID return ID [ ( ( ) ID ) - ] [ ID ] }",
  "func ID ( : ) int { var bool : int var ID : ID return ID [ ( ( ) ID ) - ] [ ID ] }",
  "func ID ( ID : : ) bool [ ( ( ( - - true ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : : ) bool [ ( ( ( - - true ) func ) ] bool { } ) ID ( ) { }",
  "func ID ( ID ( : ) bool [ ( ( : - - true ) func ) ] bool { } ) ID ( ) { }",
  "func ID ( ) { var ID : int while - - * ( true * ( false ) ID 123 ) { } if ID { } }",
  "{ ID ( ) { var ID : int while - - * ( true * ( false ) ID 123 ) { } if ID func } }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : } print - true + 123 / - ID / true - ( 123 ) int",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : } print - - + 123 / - ID / true true ( 123 ) int",
  "func ID ( ID : int , ID : int , ID : bool var { ) ID : } print - - + 123 / - ID / true true ( 123 ) int",
  "func ID ( ID : [ ID ( ) [ ID [ ) ( ID ] [ ( ID ) ] ] [ - 123 ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ ID [ ) ( ID ] [ ( ID ) ] ] [ - 123 ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ ( [ ) ( ID ] [ ID ID ) ] ] [ - 123 ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) { if ( - - ID ( ID ( 123 true ) ) ) { } print - } func ID ( ) { }",
  "func ID ( ) { if ( - - ID ( } ( 123 true ) ) ) { ID print - } func ID ( ) { }",
  "func ID ( ) - if ( { - ID ( } ( 123 true ) ) ) { ID print - } func ID ( ) { }",
  "func ID ( ID : bool , ID : } ] int ) : [ ] bool { var ID : bool var ID : [ ] int print false [",
  "func ID ID ID : bool , ID : } ] int ) : [ ] bool { var ID : bool var ( : [ ] int print false [",
  "func ID ID ID : bool , ID : } ] int ) ] [ ] bool { var ID : bool var ( : [ : int print false [",
  "func ID ( ) : bool ID : int { var ID : [ ] [ ( ID ( ) / 123 ) ] bool }",
  "func ID ( ) : bool { : int ID var ID : [ ] [ ( ID ( ) / 123 ) ] bool }",
  "func ID ( ID : int , ID : [ ] ) ] [ ] int , ID : int ) : bool { } func ID ( [ { }",
  "func ID ( ID : int , ID : [ ] ) ] [ ] int , ID : int ) : bool { } func ID ( [ { }",
  "func ID ( ID : int , ID : [ ] ) ] [ int int , ID : ] ) : bool { } func ID ( [ { }",
  "func ID ( ) - [ true * ( ( : ( true - true ) ) ) / ID ] [ ] [ ] int { }",
  "func ID ( ) - [ true ) ( ( : ( true - true ) * ) / ID ] [ ] [ ] int { }",
  "func ID ( ) - [ true ) ( ( : [ true - true ) * ) / ID ] [ ] ( ] int { }",
  "func ID ( ) : int { var ID : int var ID : bool while 123 < 123 / 123 / ID { } call ID ( ) } func true ( ) { }",
  "func ID ( ) : int { var func : int var ID : bool while 123 < 123 / 123 / ID { } call ID ( ) } ID true ( ) { }",
  "func ID ( ) : int { var func : int var ID : bool while 123 < 123 ) 123 / ID { } call ID ( ) } ID true ( / { }",
  "func ID ( ) { var ID : int ( ( ID [ ID ] ) ) ] [ }",
  "func ID ( ) { var ID : int ( ( ID [ ID ] ) ] ) [ }",
  "func ID ( ) { var ID : int ( ( ID ) ID ] [ ] ) [ }",
  "func ID ( ID if int , ID : int , ID : bool ) : int { : ID [ ID ] { } ID = - ID }",
  "func ID ( ID if int , ID : int , ID : bool ) : int { : ID [ ID ] { } ID = - ID }",
  "func ID ( ID if int , ID : int , { : bool ) : int { : ID [ ID ] ID } ID = - ID }",
  "func ID ( ) : bool { var ID : bool var ID : bool while true ID true + ( - - - ) { } print ( - - - true ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool while true ID true + ( func - - ) { } print ( - - - true ) } - ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var - : bool while true ID true + ( func - - ) { } print ( ID - - true ) } - ID ( ) { }",
  "func ID ( ID : int ) { ID ( ID ( - - - ID ) ) = = ID ID - ( ( ID ) ) }",
  "func ID ( ) : int { var ) : [ false - ( ID ( ) [ - true ] ID + ( ID ) ] int } func ID ( ) { }",
  "func ID ( ) : int { var ) : [ false - ( } ( ) [ - true ] ID + ( ID ) ] int } func ID ( ) { ID",
  "func ID ( ) : int { var ) : [ false - ( } { ) [ - true ] ID + ( ID ) ] int } func ID ( ) ( ID",
  "func ID ( ) : [ ] int { ID [ ] ( ) [ ID [ true ID [ - ( ( - true ) ) ] ] ] [ - ID ] = ( ( ID ) ) }",
  "func ID ( ) : [ ] int { ID [ ] ( ) [ ID [ true ID [ - ( ( - true ) ) ] ] ] [ ] ID - = ( ( ID ) ) }",
  "func ID ( ) { var ID : [ ] int } func ID ] ) : [ ( bool { ID ( ) [ ( ID ) ] = ID }",
  "func ID ( ) { var ID : [ ] int } func ID ] ) : [ ( bool { ID ( ) [ ( ID ) ] = ID }",
  "func ID ( ) { var ID : [ ] int } func ID ) ) : [ ( bool { ID ( ] [ ( ID ) ] = ID }",
  "func ID ( ID : bool var { ) ID : int var ID : bool return } func ID ( ID : [ ID ( ) ] bool ) { }",
  "func ID ( ID : bool var ] ) ID : int var ID : bool return } func ID ( ID : [ ID ( ) { bool ) { }",
  "func ID ( ID : bool : ] ) ID var int var ID : bool return } func ID ( ID : [ ID ( ) { bool ) { }",
  "func ID ( ) : bool { var and : int var ID : bool print false - 123 / true ID false and ID if ID { } }",
  "func ID ( ) : bool { var and : int var ID : bool false print - 123 / true ID false and ID if ID { } }",
  "func ID ( ) ID var { : [ ] bool var ID : bool }",
  "bool ID ( ) ID var { : [ ] bool var ID : func }",
  "bool ID ( ) ID var { : [ ] bool func ID : var }",
  "func ] ( ) : [ false * ( true / true - - ID ( ) [ 123 ID [ ID ] ) / - - - - ( ID ) ] int { }",
  "func ] ( ) : [ false * ( true / true - - ID ( ) [ 123 ID [ ID ] ) / - - - - ( ID ) ] int { }",
  "func ] ( ) : [ false * ( true / true - - ID ( ) [ 123 ID [ ID ] ) / - - - - ( ID ) ] int { }",
  "bool ID ( ID : [ ] [ ( ID ( ) [ ( true ) ] [ ID ] ) ] func ) { }",
  "bool ID ( ID : ] ] [ ( ID ( ) [ ( true ) ] [ ID ] ) [ func ) { }",
  "bool ID ( ID [ ] ] [ ( ID ( ) [ ( true ) ] : ID ] ) [ func ) { }",
  "func ID ( ) { var ID { [ ] int print 123 / - - - ( ( - ID ) ) * false { } } func ID ( ) : }",
  "func ID ( ) { var ID { [ ] int print 123 / - - - ( ( - ID ) { * false ) } } func ID ( ) : }",
  "func ID ( ) - var ID { [ ] int print 123 / - - - ( ( { ID ) { * false ) } } func ID ( ) : }",
  "func ID ( ID : [ ] [ ( ID [ - ( - - ID ) ] [ ID ] ) ] int { { } func ID ( ) ) }",
  "[ ID ( ID : func ] [ ( ID [ - ( - - ID ) ] [ ID ] ) ] int { { } func ID ( ) ) }",
  "[ ID ( ID : func ] [ ( ID [ - ( - - ID ) ] [ ID ] ) ] ) { { } func ID ( int ) }",
  "func ID ( ID : [ ] bool , ID : [ ] [ ] bool , ID : int ) : [ true / ( false ] ) [ ] int { }",
  ": ID ( ID : [ ] bool , ID func [ ] [ ] bool , ID : int ) : [ true / ( false ] ) [ ] int { }",
  ": ID ( ID : [ ] bool , ID func [ ] [ ] bool , ID : int [ : ) true / ( false ] ) [ ] int { }",
  "func ID ( ) : [ ] int { var ID : bool var ID : ) ID ( - true / ID * ( - ID ) bool = ID print ( true ) }",
  "func ID ( ) : [ ] int bool var ID : { var ID : ) ID ( - true / ID * ( - ID ) bool = ID print ( true ) }",
  "func ID ( ) : [ ] int bool var ID : { var ID : ) ID ( - true / ID * ( - ID ) bool = ID print ( true ) }",
  "func ID ( ID : bool ) { print - true ID ID ( ( - / ) ) ID = false } func ID ( ) { }",
  "func bool ( ID : ID ) { print - true ID ID ( ( - / ) ) ID = false } func ID ( ) { }",
  "func ID ( print : int , ID : [ ] int ) : int { var ID : int var ID : [ ] int ID ID { } } func ID ( ) { }",
  "ID ID ( ID : bool , func : [ ] [ ] [ ] bool ) : int { var ID : bool { var ID : int } ID = ( ID ) }",
  "ID ID ( ID : bool , func : [ ] [ ] [ { bool ) : int ] var ID : bool { var ID : int } ID = ( ID ) }",
  "ID ID ( : : bool , func : [ ] [ ] [ { bool ) : int ] var ID ID bool { var ID : int } ID = ( ID ) }",
  "func ID print ID : [ ] int , ID : int ) { var ID : bool var ID : bool ( ( 123 ) } func ID ( ) { }",
  "func 123 print ID : [ ] int , ID : int ) { var ID : bool var ID : bool ( ( ID ) } func ID ( ) { }",
  "func 123 print ID : [ ] int , ID : int ID { var ) : bool var ID : bool ( ( ID ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : [ ] [ false [ ] [ - false * ID [ ] ] [ false ] ] [ ] [ ] int { }",
  "func ID [ ID : int , ID : int ) : [ ] [ false [ ] [ - false * ID [ ] ] [ false ] ] [ ] ( ] int { }",
  "func ID [ ID : int , ID : int ) : [ ] ] false [ ] [ - false * ID [ [ ] [ false ] ] [ ] ( ] int { }",
  "func ID ( ID : bool ) : bool { var ID : int print false * - ( ( ( - - ( ( ID ) ) ) ) ) ID print } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID print int print false * - ( ( ( - - ( ( ID ) ) ) ) ) ID : } func ID ( ) { }",
  "func ID ( ID : bool ) : false { var ID print int print bool * - ( ( ( - - ( ( ID ) ) ) ) ) ID : } func ID ( ) { }",
  "func ID ( ) : bool { print - ID / false * true true ID [ - ] } func ID ( ) { }",
  "func ID ( ) : bool { print - ID / false * true true ID [ - ] } } ID ( ) { func",
  "func ID ( ) : func { print - ID / false * true true ID [ - ] } } ID ( ) { bool",
  "func ID ( ) { var ( : int if - false - ID ( ( ( ID ( false ) ) ) ) ) { } }",
  "func ID ( ) { var false : int if - ( - ID ( ( ( ID ( false ) ) ) ) ) { } }",
  "func ID ( ) { var ( : int if - false - ID ( ( ( ID ( false ) ) ) ) ) { } }",
  "( ID ( ID : [ 123 / ID [ ( false * 123 / ( 123 ) ) ] * - ID ] bool ) { } func ID func ) { }",
  "( ID ( ID : [ 123 / ID [ ( false * 123 / ( 123 ) ) ] * - ID { bool ) { } func ID func ) ] }",
  "( ID ( ID : [ 123 / { [ ( false * 123 / ( 123 ) ) ] * - ID ID bool ) { } func ID func ) ] }",
  "func ID ( ) : int { var ID : ) print - 123 * ( false * 123 * ( true ) ) if - ID { } } func ID ( int { }",
  "func ID ( ) : int { var ID : ) print - 123 * ( false * 123 * ( true ) ) if - ID { } } func ID ( int { }",
  "123 ID ( ) : int { var ID : ) print - 123 * ( false * func * ( true ) ) if - ID { } } func ID ( int { }",
  "func ID ( + { return ID ( ) * 123 * true ) 123 + ID ( ) }",
  "func ID ( ( { return ID ( ) * 123 * true ) 123 + ID + ) }",
  "func ID ( ( { return ID ( ) * 123 * ) ) 123 + ID + true }",
  "func ID ( ID : int ) false var ID : int ID [ 123 / ID [ - ( false ) ] / { ] = - ( 123 ) print ID } func ID ( ) { }",
  "func ( ( ID : int ) false var ID : int ID [ 123 / ID [ - ID false ) ] / { ] = - ( 123 ) print ID } func ID ( ) { }",
  "func ( ( ID : int ) false var ID : int ID [ 123 / ID [ - ID false ) ] / { ] = - ( 123 ) print ID } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] [ ( ID [ ( ID ID ] [ true ] ) ] bool var ) : [ ] bool }",
  "func ID ( ) : bool { var ID } [ ] [ ( ID [ ( ID ID ] [ true ] ) ] bool var ) : [ ] bool :",
  "func ID ( ) : bool bool var ID } [ ] [ ( ID [ ( ID ID ] [ true ] ) ] bool var ) : [ ] { :",
  "func ID ( ID : [ ] [ ] bool , ID ID [ ] [ false / 123 and - - ID ] [ ] [ ] [ ] int , : : int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] - , ID ID [ ] [ false / 123 and bool - ID ] [ ] [ ] [ ] int , : : int ) { } func ID ( ) { }",
  "func } ( ID : [ ] [ ] - , ID ID [ ] [ false / 123 and bool - ID ] [ ] [ ] [ ] int , : : int ) { ID func ID ( ) { }",
  "func ID ( ) var { ID : int } func ID ( ID : [ ] int , ID : int , ID : [ ] [ 123 ] bool ) { }",
  "func ID ( ) var { ID : int } func ID ( ID ) [ ] int , ID : int , ID : [ ] [ 123 ] bool : { }",
  "func ID ( ) var { ID : int } func ID ( ID ) [ ] int , ID : int , ID : [ ] [ 123 ] bool : { }",
  "func ID ( ) : bool { call ID ( false * false ( - - ID ( <= false ) ) ) call ID ( ) }",
  "false ID ( ) : bool { call ID ( false * func ( - - ID ( <= false ) ) ) call ID ( ) }",
  "false ID ( ) : ( { call ID ( false * func ( - - ID bool <= false ) ) ) call ID ( ) }",
  "func ID ( ) 123 int { var ID : [ ( ( - ID [ : ] ) ) ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) 123 int { var ID : [ ( ( - { [ : ] ) ) ] [ ] [ ] bool } func ID ( ) ID }",
  "func ID ( ) 123 int { var ] : [ ( ( - { [ : ] ) ) ID [ ] [ ] bool } func ID ( ) ID }",
  "func ID ( ID : int ) : bool { var ID : int var ID : [ ] [ ID ( ID ) ] bool ID func } ( ) { }",
  "func ID ( ID bool int ) : bool { var ID : int var ID : [ ] [ ID ( ID ) ] : ID func } ( ) { }",
  "func ID ( ID bool int ) : bool ) var ID : int var ID : [ ] [ ID ( ID { ] : ID func } ( ) { }",
  "func ID ( ID : int ) ID : int , : int { var ID : bool var ID : bool }",
  "func ID ( ID : int ) ID : int , : ID { var int : bool var ID : bool }",
  "func ID ( ID : int : ID : int , : ID { var int ) bool var ID : bool }",
  "func ID ( ) ( var ID : int var ID : int print ID [ - - - { ID ) ] } func ID ( ) { }",
  "func ID ( ) ( var ID : int var ID [ int print ID : - - - { ID ) ] } func ID ( ) { }",
  "func ID ( ) func var ID : int var ID [ int print ID : - - - { ID ) ] } ( ID ( ) { }",
  "( ID ( ) : [ - - ID func true - - false and true and ID ) ] int { }",
  "( ID ( func : [ - - ID ) true - - false and true and ID ) ] int { }",
  "( ID ( func : [ - - ID ID true - - false and true and ) ) ] int { }",
  "func ID ( ID : bool , ID : [ ] [ false * ( false / - true / ) ID / ID ] bool , ID : int ) { }",
  "func ID ( ID : bool , ID : [ ] [ false * ( false / - true / ) ID / ID ] bool , ID : { ) int }",
  "func ID ( ID : bool , ID : [ ] [ false * ( false ID - true / ) ID / / ] bool , ID : { ) int }",
  "func ID ( ID : [ ( false ( - - ( ID [ ID ] ) / ( 123 ) ) ] bool ) { } func ID / ) { }",
  "func ID ( ID : [ ( false ( - ID ( - [ ID ] ) / ( 123 ) ) ] bool ) { } func ID / ) { }",
  "func ID ( ID : [ ( ( ( - ID false - [ ID ] ) / ( 123 ) ) ] bool ) { } func ID / ) { }",
  "func ID ( ID : [ 123 * ID ( ( [ ID ( ( true ) ) ] ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ 123 * ID ( ( [ ID ( ( true ) ) ) ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ 123 * ID ( ( [ ID ( ( true ) ) ) ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) { bool : var ID : bool call ID ( ) }",
  ": ID ( ) { bool func var ID : bool call ID ( ) }",
  ": ID ( { ) bool func var ID : bool call ID ( ) }",
  "func ID ( ) { var ID : int ID = ID [ true and ( ( - ID ) ) and ID ] [ - - - - { ] } func ID ( ) ID }",
  "func ID ( ) { var ID - int ID = ID [ true and ( ( - ID ) ) and ID ] [ : - - - { ] } func ID ( ) ID }",
  "func ID ( ) { var ID func int ID = ID [ true and ( ( - ID ) ) and ID ] [ : - - - { ] } - ID ( ) ID }",
  "func var ( ID : bool , ID : int ) { ID ID : [ ] int return }",
  "func var ( ID : bool , ID : int ) { ID ID : [ ] int return }",
  "func var ( : : bool , ID ID int ) { ID ID : [ ] int return }",
  "func ID ( ) : int { var ID : int if - true / = ( ID ( ) ) { } ID ID ( ( false ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : int if - true / = } ID ( ) ) { } ID ID ( ( false ) ) ( func ID ( ) { }",
  "func int ( ) : int { var ID : ID var ID : [ ] bool return }",
  "func int ( ) : int { var ID : ID var } : [ ] bool return ID",
  "func ID ] ) : bool { var ID : int } func ID ( ID : [ ] [ ( ID ) ( int ) { }",
  "int ID ] ) : bool { var ID : func } func ID ( ID : [ ] [ ( ID ) ( int ) { }",
  "int ID ] ) ID bool { var ID : func } func ID ( : : [ ] [ ( ID ) ( int ) { }",
  "func ID ( ID : [ ] [ false / ) * true - true * - ( ( ( ID true ) ) * ID ] int ) { }",
  "func ID ( ( : [ ] [ false / ) * true - true * - ID ( ( ID true ) ) * ID ] int ) { }",
  "func ID ( ( [ [ ] : false / ) * true - true * - ID ( ( ID true ) ) * ID ] int ) { }",
  "func ID ( ) : int { var ID : [ bool ( ) < - ( ( ID ) ) ] [ ] ID var ID : int }",
  "func ID ( ) : int { var ID : ] bool ( ) < - ( ( ID ) ) ] [ [ ID var ID : int }",
  "func ID ( ) : int { var ID : ] bool ) ) < - ( ( ID ) ( ] [ [ ID var ID : int }",
  "func ID ( ) : [ ] int { } func ID ( ID : bool , ID : int ) { var ID : ] [ [ - ID ] int }",
  "func ID ( ) ] [ : int { } func ID ( ID : bool , ID : int ) { var ID : ] [ [ - ID ] int }",
  "func ID ( ) ] [ : int { } func ID ( ID : bool ] ID : int ) { var ID : ] [ [ - ID , int }",
  "func ) ( ID : bool , ID : int , ID : bool ) { var ID : bool var ID : int } func ID ( ID : int ID { }",
  "func ) ( { : bool , ID : int , ID : bool ) ID var ID : bool var ID : int } func ID ( ID : int ID { }",
  "func ) ( { : bool , ID : int , ID : bool ) ID var ID : bool var } : int } func ID ( ID : int ID { ID",
  "func ID ID ID : bool , ( : int ) { var ID : bool { print 123 * ID ( ID ) } ID = ( - ID ) }",
  "func ID ID ID : bool , ( : int ) { var ID : = { print 123 * ID ( ID ) } ID bool ( - ID ) }",
  "func ID ID ID : bool , ( : int ) { var ID : 123 { print = * ID ( ID ) } ID bool ( - ID ) }",
  "func ID ( ) { var ) : bool var ID : int call ID ( ( ID [ ID ] ) ) while - ( - ( - - ID ID ) { } }",
  "func ID ( ) { var ) : bool var ID : int call ID ( ( ID [ { ] ) ) while - ( - ( - - ID ID ) ID } }",
  "func ID ( ) { var ) : bool var ID : int call ID ( ( ID [ while ] ) ) { - ( - ( - - ID ID ) ID } }",
  "func ID ID ID : int , ID : int , ( : int ) { var ID : bool if ID ( ) - ID { } if - ID { } }",
  "func ID ID ID if int , ID : int , ( : int ) { var ID : bool if ID ( ) - ID { } : - ID { } }",
  "func ID ( ID : [ - 123 + - - ID * int ( ) [ - true ] * ( ID ) + ID ] [ ] ID ) { }",
  "func ID ( ID : [ - 123 + - - ID * int ) ( [ - true ] * ( ID ) + ID ] [ ] ID ) { }",
  "func ID ( ID : } - 123 + - - ID * int ) ( [ - true ] * ( ID ) + ID ] [ ] ID ) { [",
  "func ID ( ID : int , ID : [ , ID : int ] bool ) : bool { var ID : bool var ID : [ ] [ ID ] [ ] int }",
  "func ID ( ID : int , ID : [ , ID : int ] : ) bool bool { var ID : bool var ID : [ ] [ ID ] [ ] int }",
  "func ID ( ID : int , ID [ [ , ID : int ] : ) bool bool { var ID : bool var ID : : ] [ ID ] [ ] int }",
  "func ID ( ID : [ ] bool , ID ID int ) { var : : bool { var ID : int return ( ( - ID ) ) } { } }",
  "func ID ( ID : [ ] bool , ID ID int ) { var : : { bool var ID : int return ( ( - ID ) ) } { } }",
  "func ID ( ID : [ ] bool , ID ID int ) { var - : { bool var ID : int return ( ( : ID ) ) } { } }",
  "func ID ( : : bool ) ID int { var ID : [ - ID [ ID + false ] ] [ ] bool }",
  "func ID ( : bool bool ) ID int { var ID : [ - ID [ ID + false ] ] [ ] : }",
  "func ID [ : bool bool ) ID int { var ID : [ - ID ( ID + false ] ] [ ] : }",
  "{ ID ( ID : [ ] [ ] int , ID : [ true * false * ( false ) ] int , ID : int ) { } func ID ( ) func }",
  "{ ID ( ID : [ } [ ] int , ID : [ true * false * ( false ) ] int , ID : int ) { } func ID ( ) func ]",
  "{ ID ( ID : [ } [ ] int , ID : [ ( * false * ( false ) ] int , ID : int ) { } func ID true ) func ]",
  "func ID ( ) { var ID : int var ID : [ - 123 * ID [ ( ID ) ] ] int } ( ID func ) { }",
  "func ID ( ) { var ID : int var ID : [ - 123 * ID [ ( ID ) ] func int } ( ID ] ) { }",
  "func ID ( ) { var ID : int var ID : [ - 123 ID * [ ( ID ) ] func int } ( ID ] ) { }",
  "func ID ( ) : bool / print 123 { ( - 123 / ( 123 ) / ID ) } func ID ( ) { }",
  "func ID ( ) : bool / print ) { ( - 123 / ( 123 123 / ID ) } func ID ( ) { }",
  "func ID ( ) : bool / print ) { ( - 123 / ( 123 123 ( ID ) } func ID / ) { }",
  "func ID ( ) : bool { if true / ID } ID ( true ) ] [ ( true ) ] * true { } } func ID ( ) { [",
  "func ID ( ) : bool { if true / ID } ID ( true ) ] [ ( * ) ] true true { } } func ID ( ) { [",
  "func ID ( ) : bool { if true / ID ] ID ( true ) } [ ( * ) ] true true { } } func ID ( ) { [",
  "- ID ( ) : [ - func ID ( ( ID [ 123 ] ) ) ] bool { }",
  "- ID ( ) : [ - [ ID ( ( ID func 123 ] ) ) ] bool { }",
  "- ID ( ) : [ - ) ID ( ( ID func 123 ] [ ) ] bool { }",
  "func ID ( ) { var ID : bool 123 - true / ID ( 123 + while + false ) { } call ID ( ) }",
  "func ID ( ) { var ID : bool 123 - true / + ( 123 ID while + false ) { } call ID ( ) }",
  "func ID ( ) { var ID : bool 123 - true ) + ( 123 ID while + false ) { } call ID ( / }",
  "func ID ( ) : int { ID [ ( ( ( - ID ) ) ( ] = true } func ID ) ) { }",
  "func ID ( ] : int { ID [ ( ( ( - ID ) ) ( ) = true } func ID ) ) { }",
  "} ID ( ] : int { ID [ ( ( ( - ID ) ) ( ) = true } func ID ) ) { func",
  "func ID ( ID : int , ID : bool , ID : [ ] int ) : { ] [ ] bool [ print ID }",
  "func ID ( ID : int , ID : bool , ID : [ ] int ) { : ] [ ] bool [ print ID }",
  "func ID ( ID : int , ID : bool , ID : [ [ int ) { : ] ] ] bool [ print ID }",
  "func : ( ID ID [ ] [ ] int ) : bool { var ID : [ ] [ false / false / ( ( - ID ) ) ] [ ] int }",
  "func : ( ID ID [ ] [ ] int ) : [ { var ID : [ ] bool false / false / ( ( - ID ) ) ] [ ] int }",
  "func : ( ID ID [ ] [ ] bool ) : [ { var ID : [ ] int false / false / ( ( - ID ) ) ] [ ] int }",
  "func ID ( ID : int , ID : [ ] } , ID : [ ] bool ) { var ID : int var ID : int while - - false { int print ID } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] } , ID : [ ] bool ) { var ID : int var ID : int while - - false func int print ID } { ID ( ) { }",
  "func ID ( ID : int , ID : [ ] } , ID : [ ] bool ) { var ( : int var ID : int while - - false func int print ID } { ID ID ) { }",
  "func ID ) ) { } func ID ( ID : [ - ID ( ) [ ( - - true ) ] ] int ( { }",
  "func ID ) ) { } func ID ( ID : [ - ID ( ) [ ( - - true ) ] ] { ( int }",
  "func ID ID ) { } func ID ( ) : [ - ID ( ) [ ( - - true ) ] ] { ( int }",
  "func ID ( ID : bool , ID : int , : ID [ ID ( - - - 123 * - false ) ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , [ ID [ ID ( - - - 123 * - false ) ] : ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int [ [ ID , ID ( - - - 123 * - false ) ] : ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] bool { var ID : bool var ID : int print ID [ ID ] ) = ( ID ) } func ID ( ID { }",
  "func ID ( ID : int ) : [ ) bool { var ID : bool var ID : int print ID [ ID ] ] = ( ID ) } func ID ( ID { }",
  "func ID ( ID : [ ( ID [ - 123 / 123 - - 123 - - ( 123 ) ] [ ID ] ) ] [ ] [ ] int ) { } func ID { ) ( }",
  "func ID ( ID : [ ( ID [ - 123 / 123 - - 123 - - ( 123 [ ] [ ID ] ) ] [ ] ) ] int ) { } func ID { ) ( }",
  "func ID ( ID : [ ( ID [ - 123 / 123 - - 123 - - ( 123 [ ] [ ID ] ) ] [ ] ) ] int ) { } func ID { ) ( }",
  "func ID ( ID : int ) { var } : [ 123 * - ID [ 123 / false * true ] * ( - ( ID ) ) ] bool var ID : [ ] int ID",
  "func ID ( ID : int ) { var } : [ 123 * - ID [ 123 / false * ( ] * ( - true ID ) ) ] bool var ID : [ ] int ID",
  "func ID ( ID : int ) { ( } : [ 123 * - ID [ 123 / false * var ] * ( - true ID ) ) ] bool var ID : [ ] int ID",
  "func ID ( ) { var ID : bool var ID : int while false + - ( ID ( ID ) + * - ID ) { } }",
  "func ID ( ) { var ID : bool var ID : int while false + - ) ID ( ID ) + * - ID ( { } }",
  "func ID ( ) { var ID : bool var ID : int while false + - ) ( ( ID ) + * - ID ID { } }",
  "( ID ( ) { var ID : bool var ID : [ ] int ID [ - - - ID ( - - ID ) ] = - true } func ID func ) { }",
  "( ID ) ) { var ID : bool var ID : [ ] int ID [ - - - ID ( - - ID ) ] = - true } func ID func ( { }",
  "( ID ) ) { var ID : bool var ID } [ ] int ID [ - - - ID ( - - ID ) ] = - true : func ID func ( { }",
  "func ID ( ) : { int var ID : bool while - - - false / ID * 123 - true { } }",
  "func ID ( ID : [ ] ) ) : bool { { var ID : [ ] [ ] int var ID : int return ( true ) } } func ID ( int { }",
  "func ID ( ID : int ] ) ) : bool { { var ID : [ ] [ ] [ var ID : int return ( true ) } } func ID ( int { }",
  "func ID ( ID : int ] ) ) : bool { { var ID : [ ] [ ] [ var ID : } return ( true ) int } func ID ( int { }",
  "func ID ( ID : int , ID : int ) : bool { } ID : bool call ID ( ID ( ) [ - ( ID ) ] ) { var } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : bool { } ID : bool call ID ( ID ( ) [ - ( ID ) ] ) { var } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : bool { } ID : bool call ID ( ID ( ) [ - ( ID ) ] { ) var } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool call ID ( ID call ) ( - 123 / ID [ 123 ] [ false ] ) } func ID ( ) { }",
  "func ID ( ) { var [ : ID ] bool call ID ( ID call ) ( - 123 / ID [ 123 ] [ false ] ) } func ID ( ) { }",
  "func ID ( ) { var [ : ID ] bool call ID ( ID call ) / - 123 ( ID [ 123 ] [ false ] ) } func ID ( ) { }",
  "func ID ( ) { var ID : ( ] int while - ID [ [ - ( true ) ) ] [ ( ID ) ] { } }",
  "func ID ( ) { var ID : ( ] ] while - ID [ [ - ( true ) ) int [ ( ID ) ] { } }",
  "func ID ( ) { var ID : ( ] int while - ID [ [ - ( true ) ) ] [ ( ID ) ] { } }",
  "func ID ( ID : [ ] [ ] [ ] [ - 123 + ( true * [ - ( ( false ) ) ) / ( ( - false ) ) ) + ID ] [ ] ( ] bool ) { }",
  "func ID ( ID : [ ] [ ] [ ] [ - 123 + ( true * [ - ( ( false ) ) false / ( ( - ) ) ) ) + ID ] [ ] ( ] bool ) { }",
  "func ID ( ) : bool { var ID : int var ID : int } func ID ( ) : int { var ID : [ ] int - if true { } }",
  "func ID ( ) : bool { var ID : int var ID : int } func ID ( ID : int { var ) : [ ] int - if true { } }",
  "func { ( ) : bool { var ID : int var ID : int } func ID ( ID : int ID var ) : [ ] int - if true { } }",
  "func ID ( ID : bool , int : bool ) : int { var ID : ID }",
  "func ID ( ID : bool , int : bool ) : int { var } : ID ID",
  "func ID ( ID : bool , int : : ) : int { var } bool ID ID",
  "func ID ( ID : - - ID * [ 123 + ID / ( - true ) + - ID ] bool ) { } func ID ( ) { }",
  "func ID ( ID : - - ID * [ 123 + func / ( - true ) + - ID ] bool ) { } ID ID ( ) { }",
  "func ID ( ID ) - - ID * [ 123 + func / ( - true ) + - ID ] bool ) { } ID ID ( : { }",
  "func ID ( - : int , ID : bool ) : [ ] int { var ID : [ false ID ID ( ) ] int var ID : bool } func ID ( ) { }",
  "func ID ( - : int , ID : bool var : [ ] int { ) ID : [ false ID ID ( ) ] int var ID : bool } func ID ( ) { }",
  "func ID ( - : int , [ : bool var : ID ] int { ) ID : [ false ID ID ( ) ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) : [ - ID ( false / ID ( * ID ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) : ID - ID ( false / ID ( * [ ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : ID - ID ( false / ) ( * [ ) ) ] bool { } func ID ( ) { }",
  "func ) ( ) : int { print ID [ ID ( ( ID ) ID ] while - true { } } func ID ( ) { }",
  "func ) ( ) : int { print ID [ ID ( ( ID ) ID ] while - ( { } } func ID true ) { }",
  "func ) ( ) : int { print ID [ ID ( ( ID ) ID ] while - ( { } } func ID true ) { }",
  "func ID ( ID : [ - ( - ID ( ) [ ( * - 123 ] ) ] int ) { } func ID 123 ) { }",
  "func ID ( ID func [ - ( - ID ( ) [ ( * - 123 ] ) ] int ) { } : ID 123 ) { }",
  "func ID ( ID func [ - ( - ID ( ) [ ( * - 123 ] ) ] int ) } } : ID 123 ) { {",
  "func ID ( ) { var ID : int var ID : [ ) int return ( ( ( 123 ) ] ) }",
  "func ID ( ID { var ) : int var ID : [ ) int return ( ( ( 123 ) ] ) }",
  "func ID ( ID { var ) : int 123 ID : [ ) int return ( ( ( var ) ] ) }",
  "func ID ( ) { var ID : int { var ID : bool ID ( ) [ true / - ID * ID ] [ true ] = ( ( ) false ) while ( ID ) { } } }",
  "func ID ( ) { var ID : int { var ID : bool ID ( ) [ true / - ID * ID ] [ true ] = ( ( ) false ) while ( ID ) { } } }",
  "func ID { ) ( var ID : int { var ID : bool ID ( ) [ true / - ID * ID ] [ true ] = ( ( ) false ) while ( ID ) { } } }",
  "func ID ( ) : bool { var ID : [ ] [ - - ID [ - false / ID * - - ( ID ) ] [ ( 123 ) ] ] [ ] [ ] bool var ID : [ [ ] ] [ ] int }",
  "func ID ( ) : bool { true ID : bool var ID : [ ] [ ] [ ] bool while 123 > ( - - true ) { } print var } func ID ( ) { }",
  "func ID ( ) : bool { true ID : bool var ID : [ ] [ ] [ ] bool while 123 > ( - - true ) { } print var } func ID ( ) { }",
  "func ID { ) : bool ( true ID : bool var ID : [ ] [ ] [ ] bool while 123 > ( - - true ) { } print var } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) : bool { var ID : bool if true != ( 123 ) { } ) func ID ( } { }",
  "} ID ( ID : [ ] bool ) : bool { var ID : bool if true != ( 123 ) { } ) func ID ( func { }",
  "} ID ( ID : [ ] bool ) : bool { var ID : bool if true != ( 123 func { } ) func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) : [ - [ - ] true - ID ( ) - 123 ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) : [ - [ - ] true { ID ( ) - 123 ] bool - } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool [ : ) - [ - ] true { ID ( ) - 123 ] bool - } func ID ( ) { }",
  "func ID ( ID : int [ ID : , ID ( ID ( ) [ ( true ) ] [ 123 ] ) ] [ ] int , ID : int ) { }",
  ": ID ( ID func int [ ID : , ID ( ID ( ) [ ( true ) ] [ 123 ] ) ] [ ] int , ID : int ) { }",
  ": ID ( ID func ( [ ID : , ID int ID ( ) [ ( true ) ] [ 123 ] ) ] [ ] int , ID : int ) { }",
  "func ID ( ) { func ID : bool var ID : int return ( ( 123 * - ( 123 ) * ( - - - - ( - ( - false ) ) ) ) ) } var ID ( ) { }",
  "func ID ( ) ( func ID : bool var ID : int return { ( 123 * - ( 123 ) * ( - - - - ( - ( - false ) ) ) ) ) } var ID ( ) { }",
  "func ID ( ) ( func ID : bool 123 ID : int return { ( 123 * - ( var ) * ( - - - - ( - ( - false ) ) ) ) ) } var ID ( ) { }",
  "func ID ( ID : [ ] int ID { { var ID : int var ) : bool } return } func ID ( ) : int { }",
  "func ID ( ID : [ } int ID { { var ID : int var ) : bool } return ] func ID ( ) : int { }",
  "func ID ( ID : [ } int ID { { var ID : int var ) : bool } return ] func : ( ) ID int { }",
  "func ID ( ID : bool ) { var ID : int var ID ID int } func ID ( ID : int , : : bool , ID : [ ] int ) { }",
  "func ID ( ID : bool ) { var ID : int var int ID int } func ID ( ID : int , : : bool , ID : [ ] ID ) { }",
  "func ID ( ID : bool ) ID var ID : int var int ID int } func ID ( ID : int , : : bool , ID : [ ] { ) { }",
  "func ID ( ID ID int ) : [ ] [ ] bool { var ID : int { var : : [ ID ] bool } print - ( ID ) } func ID ( ) { }",
  "func ID ID ( ID int ) : [ ] [ ] bool { var ID : int { var : : [ ID ] bool } print - ( ID ) } func ID ( ) { }",
  "func ID ID ( ID int ) : [ ] - ] bool { var ID : int { var : : [ ID ] bool } print [ ( ID ) } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ ( ID ( ) [ - - ID ] [ ( - } ) ] ) ] [ ID ] ] int ) { ID func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ ( ID ( ) [ - - ID ] [ ) - ID ) ] ) ] [ ID ] ] int ( { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ false * ID ( ID * - ( false ) * int ( - - true ) ) ] bool , ID : - ) { } func ID ( ) { }",
  "func ID ( ID : int , ID ID [ ] [ false * ID ( : * - ( false ) * int ( - - true ) ) ] bool , ID : - ) { } func ID ( ) { }",
  "func ID ( ID : int , ID ID [ ] [ false * ID ( : * - ( false ) * int ( - - true ) } ] bool , ID : - ) { } func ID ( ) { )",
  "func ID ( ) { print ID ( ) / - - - ID ( - ( ID ) print - - - true ) }",
  "func - ( ) { print ID ( ) / - - - ID ( - ( ID ) print - ID - true ) }",
  "func - ( ) { print ID ( - / ) - - ID ( - ( ID ) print - ID - true ) }",
  "func ID ( ) { var * : [ true ID ( ( - - ID ) ) ] int var ID : int }",
  "func ID ( ) { var * : [ ] ID ( ( - - ID ) ) true int var ID : int }",
  "func ID ( ) ) var * : [ ] ID ( ( - - ID { ) true int var ID : int }",
  "func ID ( ID : bool ) : [ ] [ ] bool { var - : [ 123 and ID - ID and ID ] bool var ID : [ ] int }",
  "func ID ( ID : bool ) : [ ] [ ] bool { var - : [ ID and 123 - ID and ID ] bool var ID : [ ] int }",
  "func ID ( ID : bool ) : [ ] [ ] [ { var - : bool ID and 123 - ID and ID ] bool var ID : [ ] int }",
  "func ID ( ) { var ID : bool var ID ID int call ID ( ID [ ID [ 123 ] [ ID ] ] ) print ( ( true ) ) } func : ( ) { }",
  "func ID ( ) { var ID : bool var ID ID int call ID ( ID [ ID [ 123 ] [ ID ] ] ) print ( ( true ) ) } func : ( ) { }",
  "func ID ( ) { var ID : bool ID ID var int call ID ( ID [ ID [ 123 ] [ ID ] ] ) print ( ( true ) ) } func : ( ) { }",
  "func ID ( ) : int { var ID : bool return } func ] ( ID : int , ID : [ ( ( ( - 123 ) ) ) ] [ ] [ ] [ ] [ ID [ ] bool , ID : [ ] bool ) { }",
  "func ID ( ) : int { var ID : bool return ) func ] ( ID : int , ID : [ ( ( ( - 123 ) ) } ] [ ] [ ] [ ] [ ID [ ] bool , ID : [ ] bool ) { }",
  "func ID ( ) : int { var ID : bool return ) func ] ( ID : int , ID : [ ( ( ( - 123 ) ) } ] [ ] [ ] [ ) [ ID [ ] bool , ID : [ ] bool ] { }",
  "func ID ( ID : [ ( ( ID [ ID ) - 123 + ( true ) ] [ - true ] - ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ( ( ID [ ID ) - 123 + ( true ] ] [ - true ] - ) ) bool ) { } func ID ( ) { }",
  "func ( ( ID : [ ( ( ID [ ID ) - 123 + ( true ] ] [ - true ] - ) ) bool ) { } func ID ID ) { }",
  "func ID ( ) { var ID : int var ID } [ ] bool { var ID : [ ( - - - - ( ( ID ) ) ) ] int } while ( false ) { } : func ID ( ) { }",
  "func ID ( ) { var ID : int var ID ( [ ] bool { var ID : [ ( - - - - ( ( ID ) ) ) ] int } while } false ) { } : func ID ( ) { }",
  "func ID ( ) { var ID : int var ID ( [ ( bool { var ID : [ ( - - - - ( ( ID ) ) ) ] int } while } false ) { } : func ID ] ) { }",
  "func ID ( ID : [ false / ID [ - false and - ID [ - bool ] ] / false ] ID ) { }",
  "ID ID ( func : [ false / ID [ - false and - ID [ - bool ] ] / false ] ID ) { }",
  "ID ID ( func : [ false / ID [ - false and - ID [ - bool ] ] / false ] ID ) { }",
  "func ID ( ) { var ID : + ] [ ] int print false / true - ID ( ) [ ID ] [ false { } }",
  "func ID ( ) { var ID : + ] [ ] false print false / true - ID ( ) [ ID ] [ int { } }",
  "func } ( ) { var ID : + ] [ ] false print false / true - ID ( ) [ ID ] [ int { ID }",
  "func ID ( ) : bool { var ID : bool var ID : : return } func ID ( ) int [ ] int { ID ( ) = ( - false ) }",
  "func ID ( ) : bool { var ID : bool var ID : : return } func ID ( ) int [ ] int { ID ( ) = ( - false ) }",
  "func ID ( ) : bool { var ID : bool var ID : : return } func ID ( ) int [ ] int ID { ( ) = ( - false ) }",
  "func ID ID ID : bool ) : [ ID ( ) [ ( ( ( ) ) ] ] int { } func ID ( ) { }",
  "func ID ID ID : bool ) : ( ID ( ) [ [ ( ( ) ) ] ] int { } func ID ( ) { }",
  "func } ID ID : bool ) : ( ID ( ) [ [ ( ( ) ) ] ] int { ID func ID ( ) { }",
  "func ID ( ) : [ ] int { } func ID ( ID : int ) ID var ID : bool call { ( ) return }",
  "func ID ( ) int [ ] : { } func ID ( ID : int ) ID var ID : bool call { ( ) return }",
  "func ID ( ) int [ func : { } ] ID ( ID : int ) ID var ID : bool call { ( ) return }",
  "func ID ( ) { int ID : var print - false / ( 123 / ID ( ) ) call ID ( ) }",
  "func ID ( ) { / ID : var print - false int ( 123 / ID ( ) ) call ID ( ) }",
  "func ID ( ) { / ID : var print - false int ( 123 / ID ( ) ) call ID ( ) }",
  "func ID ( ) : bool { var [ : ID - true / - - false * ID ( false ) ] [ ] int var ID : [ ] int }",
  "func ID ( ) : bool { ( [ : ID - true / - - false * ID var false ) ] [ ] int var ID : [ ] int }",
  "func ID ( ) : bool { ( false : ID - true / - - false * ID var [ ) ] [ ] int var ID : [ ] int }",
  "func ID ( ) { var ID : bool ( ID : bool { while true * - ( var - true ) ) { } ID = - ( - ( false ) ) } } func ID ( ) { }",
  "func ID ( ) { var ID : bool ( ID : bool { while true * ) ( var - true ) - { } ID = - ( - ( false ) ) } } func ID ( ) { }",
  "func ID ( ) { var ID : bool ( ID : bool { while true * ) ( var - true ) - { } ID = - ( - ( false ) ) } } func ID ( ) { }",
  "func false ( ID : [ ( ID ( ) and false / false * ID ) ] int ) { }",
  "func false ) ID : [ ( ID ( ) and false / false * ID ( ] int ) { }",
  "func false ) ID : [ ( ID ( ) and false / ) * ID ( ] int false { }",
  "func ID ( ) : int { var ID : int var ID : [ ID ( ID [ - ( false ) ] } ] bool ) func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID ( [ ID ( ID [ - : false ) ] } ] bool ) func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID [ [ ID ( ID ( - : false ) ] } ] bool ) func ID ( ) { }",
  "func ID ( ID : bool ) ID bool { var ID : bool while ( ( ID ) ) { } call : ( ) }",
  "func ID ( ID : bool ) ID bool { var ID : bool while ( ( ID ) ) { } call : ( ) }",
  ") ID ( ID : bool ) ID bool { var ID : bool while ( ( ID ) ) { } call : ( func }",
  "func func ( ID : int , ID : int ) : int { call ID ( 123 * ( ( - 123 ) ) ) } ID ID ( ) { }",
  "func func ID ID : int , ID : int ) : int { call ID ( 123 * ( ( - 123 ) ) ) } ( ID ( ) { }",
  "func func ID ID : int , ID : int ) : int { call ID ( 123 * ( ( - 123 ) ) ) } ( ID ( ) { }",
  "func - ( ) : [ ( ID ( ) - - true ) * ID ID ] [ ] int { }",
  "( - ( ) : [ ( ID func ) - - true ) * ID ID ] [ ] int { }",
  "( - [ ) : ( ( ID func ) - - true ) * ID ID ] [ ] int { }",
  "func ID ( ID : bool , ID : bool func ID : int ) { var ID : bool var ID : bool return false * ( 123 ) * ( ID ) } , ID ( ) { }",
  "func ID ( ID : bool , ID : bool func ID : int ) { var ID : bool var ID : bool return false * ID 123 ) * ( ID ) } , ( ( ) { }",
  "func ID ( ) { var ID : bool while false - func ( ) [ ( false ) ] - - - - true { } if 123 { } } ID ID ( ) { }",
  "func ID ( ) { var ID : bool while false - func ( ) true ( false ) ] - - - - [ { } if 123 { } } ID ID ( ) { }",
  "func ID ( ) { var ID : bool while false - func ( ) true ( false - ] - ) - - [ { } if 123 { } } ID ID ( ) { }",
  "( ID ( ) : int { if func - ( true * - 123 + - 123 ) ) { } }",
  "( : ( ) ID int { if func - ( true * - 123 + - 123 ) ) { } }",
  "( : func ) ID int { if ( - ( true * - 123 + - 123 ) ) { } }",
  "func ID ( ID : return ) : int { bool } func ID ( ID : bool , ID : [ ] bool , ID : [ ID ] bool ) { }",
  "func ID ( ID : return ) : int { bool } func ID ( ID : bool , ID : ID ] bool , [ : [ ID ] bool ) { }",
  ": ID ( ID func return ) : int { bool } func ID ( ID : bool , ID : ID ] bool , [ : [ ID ] bool ) { }",
  "func ID ( ) : bool { var ) : int return ID * ( - ID / 123 ) / ( true ID }",
  "func ID ( ) : bool { var ) : int return ID * ( - ID / 123 ) / ( true ID }",
  "func ID ( ) : bool { var ) : int return ID * ( ID ID / 123 ) / ( true - }",
  "func ID ( ) : ( ] [ ] [ ( ( [ ID ) ) ) ] int { }",
  "func ID ( ) : ( ] [ ] [ ( ( [ ID ) ) ) ] int { }",
  "func ID ( ID : bool , ID : bool ) : int { var ID : [ ] bool { ID = true } } } } func ID ( ) { {",
  "func ID ( ID : bool , ID : bool ) : int { var ID : [ ] bool { ID = true } } } } func ID ( ) { {",
  "func ID func ID : bool , ID : bool ) : int { var ID : [ ] bool { ID = true } } } } ( ID ( ) { {",
  "func ID ( ID : bool , ID : int , ID : int ) ID while ID ( ( - - { ) ) { } { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) ID while { ( ( - - ID ) ) { } { } } func ID ( ) { }",
  "func ID ( ) : [ ] int ID { var ID : [ ] bool ID ( ( false ) ) = ID }",
  "func ID ( ) : [ ] int ID { var ID : ] [ bool ID ( ( false ) ) = ID }",
  "func ID ( ) bool [ ] int ID { var ID : ] [ : ID ( ( false ) ) = ID }",
  "func ID ( ID : [ - true / - true * ID ( ) - - int / ID ] true ) { }",
  "func ID ( ID : [ - true / - true * ID ( ) - - int / ID ] true ) { }",
  "func ID ( ID : [ - true / - true { ID ( ) - - int / ID ] true ) * }",
  "func ID ( ID : bool , var : bool , ID : bool ) { ID ID : [ false + - - ( ID ) + ( ( ID ) ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : bool , var : ) , ID : bool ) { ID ID : [ false + - - ( ID bool + ( ( ID ) ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : bool , var : ) , ID : bool ) { ID ID : [ + false - - ( ID bool + ( ( ID ) ) ] bool var ID : bool } func ID ( ) { }",
  "func ID , ID : bool , ID : [ ] bool ( ID : int ) { } func ID ( ) { var ID : int var ID : [ ] int }",
  "func ID , ] : bool , ID : [ ] bool ( ID : int ) { } func ID ( ) { var ID : int var ID : [ ID int }",
  "func ID , ] : bool ID ID : [ ] bool ( ID : int ) { } func ID ( ) { var , : int var ID : [ ID int }",
  "func ID ( ID : [ ID ( ) [ true * - - ( false ) { ] [ ] int ) ] }",
  "func ID ( ] : [ ID ( ) [ true * - - ( false ) { ] [ ID int ) ] }",
  "func ID ( ] : [ ID ( ) [ ] * - - ( false ) { ] [ ID int ) true }",
  "func ID ( ) { * ID : int ID ( ) [ true var ( - true * ID ) / - - false ] = - 123 } func ID ( ) { }",
  "func ID ( ) { * ID : int ID ( ) [ true var true - ( * ID ) / - - false ] = - 123 } func ID ( ) { }",
  "func ID ( ) { * ID : int ID ( ) [ ( var true - ( * ID ) / - - false ] = - 123 } func ID true ) { }",
  "func ID ( ) { ID ( ) = - ID ( ) [ ID [ - - ] ] [ - true ID ] ID = - - ID } func ID ( ) { }",
  "func ID ( ) { ID ( ) = - { ( ) [ ID [ - - ] ] [ - true ID ] ID = - - ID } func ID ( ) ID }",
  "func ID ( ) { ID ( ) = - { ( ) [ ID [ - - ] ] [ - true ID ] ID = - - ID } func ID ( ) ID }",
  "func ID ( ) { var ] : int var ID : [ ID int print ID [ true / false ] }",
  "func ID [ ) { var ] : int var ID : [ ID int print ID ( true / false ] }",
  "func ID [ ) { var ] } int var ID : [ ID int print ID ( true / false ] :",
  "func ID ( ID : [ ID * false * - 123 ( ) - - - ID + ID ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( * : [ ID ID false * - 123 ( ) - - - ID + ID ] [ ] bool ) { } func ID ( ) { }",
  "func [ ( * : [ ID ID false * - 123 ( ) - - - ID + ID ] ID ] bool ) { } func ID ( ) { }",
  ": ID ( ID : int , ID : [ ] bool , ID : int ) func int { return ID [ ( ( - ID ) ) ] [ ( true ) ] }",
  ": ID : ID : int , ID ( [ ] bool , ID : int ) func int { return ID [ ( ( - ID ) ) ] [ ( true ) ] }",
  ": [ : ID : int , ID ( [ ] bool , ID : int ) func int { return ID [ ( ( - ID ) ) ] ID ( true ) ] }",
  "func ID ] ) : [ ] [ ( int { while - - ( ( - 123 ) ) { } }",
  "func ID ] ) : [ ] [ - int { while - ( ( ( - 123 ) ) { } }",
  "func ID 123 ) : [ ] [ - int { while - ( ( ( - ] ) ) { } }",
  "func ID ( ) : int { var ID : int var ID : bool print ID - ID ( ) [ ( - call true ) ] - ID ( ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : bool print ID - ID ( ) [ ( - call true ) ] - } ( ) ID func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID ID bool print ID - : ( ) [ ( - call true ) ] - } ( ) ID func ID ( ) { }",
  "func ID ( ) : [ ] int { while ID - ) / ID ( ) [ ( 123 ] [ ID ] / ID { } }",
  "func ID ( ) : [ ] ID { while ID - ) / ID ( ) [ ( 123 ] [ int ] / ID { } }",
  "func ID ( ) : [ ] ID { while ID - ) / ID ( ) [ 123 ( ] [ int ] / ID { } }",
  "func ID ( ID : int , ID : [ ID ( ID int ) / false / ID ) ] bool , ID : ( ) { }",
  "func ID ( ID : int , ID : [ ID ( ID int ) / false / ID ) ] bool , ID : ( ) { }",
  "func ID ( ID ) int , ID : [ ID ( ID int : / false / ID ) ] bool , ID : ( ) { }",
  "func ID ( ID ) bool , ID : bool , ID : [ ] [ ( - - ID ( ) [ true ] ) ] bool ) { } func ID ( : { }",
  "func ID ( ID ) bool , ID : bool , ID : [ ] [ ( - - ID ( ) [ } ] ) ] bool ) { true func ID ( : { }",
  "func ID ( ID ) bool , ID : bool , ID : [ ] ] ( - - ID ( ) [ } [ ) ] bool ) { true func ID ( : { }",
  "func ID ( ID * bool ) : [ true * ( ID ( - ( false ) ) ) : ( false ) ] bool { }",
  "func ID ( ID * bool ) : [ ( * true ID ( - ( false ) ) ) : ( false ) ] bool { }",
  "func ID ( ID * bool ) : [ ( * true ID ( - ( false ) ) ) : ( false ) ] bool { }",
  "func ID { ) : bool { var ID : int var ID : bool ID ( false / ( ( ID ) ) ) = ( ( - 123 ) ) while - ( ( ( ( false ) ) ) ) { } } func ID ( ) ( }",
  "func ID ( ) : bool { var ID : int var ID : bool ID ( false / { ( ID ) ) ) = ( ( - 123 ) ) while - ( ( ( ( false ) ) ) ) { } } func ID ( ) ( }",
  "func ID ( ) : bool { var bool : int var ID : ID ID ( false / { ( ID ) ) ) = ( ( - 123 ) ) while - ( ( ( ( false ) ) ) ) { } } func ID ( ) ( }",
  "func ID ID ID : [ ] bool , ( : bool ) : [ false - false / ( ID ) / 123 ] [ ] [ ] int { }",
  "func ID ID ID : [ ] bool , ( : bool ) : false false - [ / ( ID ) / 123 ] [ ] [ ] int { }",
  "func ID ID ID : , ] bool [ ( : bool ) : false false - [ / ( ID ) / 123 ] [ ] [ ] int { }",
  "bool ID ( ID : int , ID : [ ] int ) : [ ] func { var ID : [ ] bool var ID : int }",
  "bool ID ( ID : int , ID : [ ] int ) : [ ] : { var ID : [ ] bool var ID func int }",
  "bool ID ( ID : int , ID : ID ] int ) : [ ] : { var [ : [ ] bool var ID func int }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : bool var ID : bool ID func ( - ( - - ( ID ) ) ) ] [ false ] = ID ID = - ( ( false ) ) } [ ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) ID var ID : bool var ID : bool ID func ( - ( - - ( { ) ) ) ] [ false ] = ID ID = - ( ( false ) ) } [ ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) ID var ID : bool var ID : bool ID func ( - ( - - ( { ) ) ) ] ) false ] = ID ID = - ( ( false [ ) } [ ID ( ) { }",
  "func ID ( [ { var ID : bool while ID [ ID ) - 123 ] ] [ true ] { } }",
  "func ID ( [ { var ID : bool while ID } ID ) - 123 ] ] [ true ] { [ }",
  "func ID ( [ bool var ID : { while ID } ID ) - 123 ] ] [ true ] { [ }",
  "func ID ( ID : int , ID : int , ID } [ false ] bool ) : int { var ID : [ ] int :",
  "func ID ( ID : int , ID : int , ] } [ false ID bool ) : int { var ID : [ ] int :",
  "func ID ( : : int , ID : int , ] } [ false ID bool ) ID int { var ID : [ ] int :",
  "func ID ( ) : bool { var ID : ) while false / - - ID ( true int * ( ( ID ) ) { } print - ID }",
  "func ID ( ) : true { var ID : ) while false / - - ID ( bool int * ( ( ID ) ) { } print - ID }",
  "func ID ( ) : true { var ID : ) } false / - - ID ( bool int * ( ( ID ) ) { while print - ID }",
  "func ID ( ) : int { var ID : [ ] [ ] [ ( - ( 123 ) [ ] ) ] int var ID : bool }",
  "func ID ( } : int { var ID : [ ] [ ] [ ( - ( 123 ) [ ] ) ] int var ID : bool )",
  "func ID ( } : int { var ID : [ ] [ ] [ ( - ( 123 ) [ ] ) ] int var ID : bool )",
  "func ID ( ) : while ] int { [ 123 / - ( ( ID ) ) { } }",
  "func ID ( ) int while ] : { [ 123 / - ( ( ID ) ) { } }",
  "func ID ( ( int while ] : { [ 123 / - ( ) ID ) ) { } }",
  "func ID ( ID : [ ] bool , = : bool ) { var ID : [ ] bool var ID : int { ID ( ) ID ( - 123 ) if ( ID ) { } } ID = ( true ) }",
  "func ID ( ID : [ ] bool , = : bool ) { var ID : [ ] bool var ID : int { ID ( ) ID ( - 123 ) if ( ID ) { } } ID = ( true ) }",
  "func ID ( ID : [ ] bool = , : bool ) { var ID : [ ] bool var ID : int { ID ( ) ID ( - 123 ) if ( ID ) { } } ID = ( true ) }",
  "func ID ( bool : int { var ID : ) if ID ( ) [ 123 * - 123 * true ] { } }",
  "func ID ) bool : int { var ID : ) if ID ( ( [ 123 * - 123 * true ] { } }",
  "func ID ) bool * int { var ID : ) if ID ( ( [ 123 * - 123 : true ] { } }",
  "func ID ( ) { ID ( - ( ( false / = - ID ) * true ) ) }",
  "func ID ( ) { ID ( - ( ( false / = - ID ) * true ) ) }",
  "func ID ( ) : bool { var ID : [ ] [ ] int while ID ( ( - - - - false ID ) { } while ) { } }",
  "func ID ( ) : bool { var ID : [ ] [ ] int while ID } ( - - - - false ID ) { ( while ) { } }",
  "ID ID ( ) : bool { var ID : [ ] [ ] int while func } ( - - - - false ID ) { ( while ) { } }",
  "func ID ( ) { var ( : bool call ID ( ( true * ( - - ( ( true ) ) ) ) ) } func ID ID ) { }",
  "func ID ( ) { var ( : bool call ID ( ( true * ( - - ( ( } ) ) ) ) ) } func ID ID ) { true",
  "func ID ( ) { var ( : } call ID ( ( true * ( - - ( ( bool ) ) ) ) ) } func ID ID ) { true",
  "func ID ( ) : bool - var ID : bool var ID : bool } func ID ( ) : bool { var ID : [ { ID ] int var ID : bool }",
  "func ID ( ) : bool - var ID : bool ID var : bool } func ID ( ) : bool { var ID : [ { ID ] int var ID : bool }",
  "func ID ( ) : bool - var ID : bool ID var : bool } func ID ( ) : bool { var ID : [ { ID bool int var ID : ] }",
  "func ID ( ) { while - true * - ( false } ID - ( ID ) + ID ) * - ( - - - false ) { } /",
  "func ID ( ) { while - true * - ( false } ID - ( ID ) - ID ) * + ( - - - false ) { } /",
  "func ID ( ) { while - true * - { false } ID - ( ID ) - ID ) * + ( - - - false ) ( } /",
  "func ID ( ) : [ ] bool { var ID : bool var ID : ID ID * ID [ [ ] / - - ( ID ) ] [ ] [ ] bool }",
  "func ID ( ) : [ ] bool { var ID : bool var ID : * ID ID ID [ [ ] / - - ( ID ) ] [ ] [ ] bool }",
  "func ID ( ) : [ ] bool { var ID : bool var ID : * ID ID ID [ [ ] / - ) ( ID - ] [ ] [ ] bool }",
  "func ID ( ID : bool , ID : [ ] bool ) { var ID : int return } } ID ( ) : [ false ] int { func",
  "func ID ( ID : bool , ID } [ ] bool ) { var ID : int return } : ID ( ) : [ false ] int { func",
  "func ID ( ID : bool , bool } [ ] ID ) { var ID : int return } : ID ( ) : [ false ] int { func",
  "func ID ( ID : bool ) ID var ID : [ ID [ ( - ( - - true ) ) ] ] bool var { : [ ] int } func ID ( ) { }",
  "func ID ( ID : bool ] ID var ID : [ ID [ ( - ( - - true ) ) ] ) bool var { : [ ] int } func ID ( ) { }",
  "func ID ( ID : bool ] ID var ID : [ ID [ ( - ( - - true ) ) ] ) bool var { : [ ) int } func ID ( ] { }",
  "func ID ( ID : bool , ID { int ) : var ID : bool ID ( ) = ( true / - 123 ) { } }",
  "func ID ( ID : bool , ID { int ) : var ID : ) ID ( bool = ( true / - 123 ) { } }",
  "func ID ( { : bool , ID ID int ) : var ID : ) ID ( bool = ( true / - 123 ) { } }",
  "func ID ( ) { var ID : bool var ID ) int return } func ID ( ID : [ ] bool , ID : int , ID : int : { }",
  "func ID ( ) { var ID return bool var ID ) int : } func ID ( ID : [ ] bool , ID : int , ID : int : { }",
  "func ID ( ) { var ID return bool var : ) int ID } func ID ( ID : [ ] bool , ID : int , ID : int : { }",
  "func ID ( ID : [ 123 / ] ( ( ID ( ) [ 123 - ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID / ID : [ 123 ( ] ( ( ID ( ) [ 123 - ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ 123 ( ] ( ( ID / ) [ 123 - ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) ID : int , : int { var ID : [ ] int var ID : bool }",
  "func ID ( ID : bool , ID : bool ) } : int , : int { var ID : [ ] int var ID : bool ID",
  "func ID ( ID : bool , ID : bool ) } : ID , : int { var int : [ ] int var ID : bool ID",
  "func ID ( func : int , ID : [ ID [ 123 * ID ( ( false ) ) ] ] [ ] [ ] int , ID : int ) { } ID ID ( ) { }",
  "func ID ( func : int , ID : [ ID [ 123 * } ( ( false ) ) ] ] [ ] [ ] int , ID : int ) { } ID ID ( ) { ID",
  "func ID ( func : int , ID : [ ID [ 123 int } ( ( false ) ) ] ] [ ] [ ] int , ID : * ) { } ID ID ( ) { ID",
  "func ID ( ) : bool { ID ( ) [ 123 * false - ID func ID ) ] [ ID ] = true { } } ( ID ( ) { }",
  "func ID ( ) : bool { ID ( ) [ 123 * false - ID func ID ) ] [ ID ] = true { } ) ( ID ( } { }",
  "func ID ( ) : bool { ID ( ) [ 123 * false - ID func ID ) ] [ ID ] = true { } ) ( ID ( } { }",
  "func ID ( ID : int ) } bool { var ID : bool while false / - ( ( ID ) ) * ( ( false ) ) { : }",
  "func ID ( ID : int ) } bool { var ID : bool while { / - ( ( ID ) ) * ( ( false ) ) false : }",
  "func ID ( false : int ) } bool { var ID : bool while { / - ( ( ID ) ) * ( ( ID ) ) false : }",
  "func ID ( ID : bool , ID : bool { ) { var ID : [ ID ( ) [ ID ] ] int var ID : int } }",
  "func ] ( ID : bool , ID : bool { ) { var ID : [ ID ( ) [ ID ] ID int var ID : int } }",
  "func ] ( ID : bool , ID : bool { ) } var ID : [ ID ( ) [ ID ] ID int var ID : int } {",
  "func ID ( ) { var ID : int var ID : var call ID ( ) { int ID : [ ] int } }",
  "func ID ( ) { var ID : int var ID : var call ID ( ) { int ID } [ ] int : }",
  "func ID ( ) { var ID : var int ID : var call ID ( ) { int ID } [ ] int : }",
  "func ID ( ) : bool { var ID : int var ID : [ ID [ ID / - ID ] [ - } ( 123 ) ] ] int - func ID ( ) { }",
  "func ID ( ) var bool { : ID : int var ID : [ ID [ ID / - ID ] [ - } ( 123 ) ] ] int - func ID ( ) { }",
  "func ID ( ) var bool [ : ID : int var ID : [ ID { ID / - ID ] [ - } ( 123 ) ] ] int - func ID ( ) { }",
  "func ID ( bool : int { var ID : [ ] int var ID : ) return true * true * ( ( false ) ) } func ID ( ) { }",
  "func ID ( bool : int { false ID : [ ] int var ID : ) return true * true * ( ( var ) ) } func ID ( ) { }",
  "func ID ( bool : int { false ID : [ ] int var ID : ) return true * ) * ( ( var ) ) } func ID ( true { }",
  "func ID ( ID : int , ID : return ) { bool ( ( ( true ) ) ) }",
  "func ID ( ID : int , ID : return ) { bool ( ( } true ) ) ) (",
  "func ID ( ID : int , return : ID ) { bool ( ( } true ) ) ) (",
  "func ID ( ID : ( true * ID [ ID ( ) [ ID ] ] [ [ - - ID ) ] ] [ ] bool ) { }",
  "] ID ( ID : ( true * ID [ ID ( ) [ ID ] func [ [ - - ID ) ] ] [ ] bool ) { }",
  "] ID ( ID : ( true * ID [ ID [ ) [ ID ] func ( [ - - ID ) ] ] [ ] bool ) { }",
  "func ID ( ) : ( { var ID : bool var ID : bool return } func ID int ID : bool , ID : bool ) : [ false ] bool { }",
  "func ID ( ) : ( { var ID : bool ID ID : bool return } func ID int ID : bool , var : bool ) : [ false ] bool { }",
  "func } ( ) : ( { var ID : bool ID ID : bool return } func ID int ID : bool , var : bool ) : [ false ] bool { ID",
  "func ID ( ID } int , ID : bool , ID : [ ] int ) : int { var ID : bool :",
  "func ID ( ID } int , ID int bool , ID : [ ] int ) : : { var ID : bool :",
  "func ID ( ID } int [ ID int bool , ID : , ] int ) : : { var ID : bool :",
  "func ID ( ) : ( { var ID : [ ( 123 / 123 + bool 123 ) ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) : ( { var ID : [ ( 123 / 123 + bool 123 ) ) ] bool var ID : bool } func ID ( } { )",
  "func ID ( ( : ) { var ID : [ ( 123 / 123 + bool 123 ) ) ] bool var ID : bool } func ID ( } { )",
  "func ID ( ID : int , ID , int : ID : int ) { var ID : int var ID : [ ( ID ) ] bool } func ID ( ) { }",
  "func ID var ID : int , ID , int : ID : int ) { ( ID : int var ID : [ ( ID ) ] bool } func ID ( ) { }",
  "func ID var ID : int , ID , int : ID : int ) { ( ID : int var ID : [ ( ( ) ] bool } func ID ID ) { }",
  "func ID ( ) : [ ] int { ID ID : bool var ID : [ 123 / - - ( ID ) ] bool } func var ( ) { }",
  "func ID ( ) : [ ] int { ID ID : bool var ID : - 123 / - [ ( ID ) ] bool } func var ( ) { }",
  "func ID ( ) : [ ] int { ID ID : bool var ID ) - 123 / - [ ( ID : ] bool } func var ( ) { }",
  "func ID ( ) ) bool { print false / - - ( ID + ( ( - ( ( ( ID ) : ) ) ) - ( ( ( ID ) ) ) ) print 123 }",
  "func ID ( ) ) bool { print false ( - - ( ID + ( ( - ( ( ( ID ) : ) ) ) - / ( ( ID ) ) ) ) print 123 }",
  "func ID ) ) { var ID : int call ID ( ) { call ID ( ID ( ( [ ( ID ) ] [ ID ] ) while ID { } } } func ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( ) { call ID ( ID ) ( [ ( ID ) ] [ ID ] ) while ID { } } } func ID ( ) { }",
  "func ID ( ) { ID ID : int call ID ( ) { call ID ( ID ) ( [ ( ID ) ] [ var ] ) while ID { } } } func ID ( ) { }",
  "func ID ( ID : : , ID : [ ] bool , ID int int ) : [ ID ( ( ID ) ) ] int { }",
  "func ID ( ID : : , ID : [ ] bool , ID int int ) : [ ) ( ( ID ) ID ] int { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : 123 ] [ - true / ID [ ( [ ) ] / ID ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : 123 ] [ - true / ID [ ( [ ) ] / func ] int ) { } ID ID ( ) { }",
  "func ID ( ID } bool ) { while ( - ( ID * false ) ) { : while ID { } }",
  "func ID ( ID } bool ) { while ( - ( ID } false ) ) { : while ID { } *",
  "func ID ( ID } bool { ) while ( - ( ID } false ) ) { : while ID { } *",
  ") ID ( func { var ID : bool var ID : bool while ID ( ) [ ( ( 123 ) ) ] [ ID ] { } } func ID ( ) { }",
  ") ID ( ( { var ID : bool var ID : bool while ID ( ) [ func ( 123 ) ) ] [ ID ] { } } func ID ( ) { }",
  ") ID ID ( { var ID : bool var ID : bool while ID ( ) [ func ( 123 ) ) ] [ ID ] { } } func ( ( ) { }",
  "func ID ID ( : int ) { print ( ID ( ) [ ID ] [ ( - ( 123 ) ) ] ) } func ID ( ) { }",
  "{ ID ID ( : int ) { print ( ID ( ) [ ID ] [ ( - ( 123 ) ) ] ) } func ID ( ) func }",
  "{ ID ID ) : int ) { print ( ID ( ( [ ID ] [ ( - ( 123 ) ) ] ) } func ID ( ) func }",
  "func ID ( ) : ( { if ID bool ID ( ( - false ) ) ) { } }",
  "func ID ( ) : ( { if ID bool ID ( ( - false ) ) ) { } }",
  "func ( ID ) : ( { if ID bool ID ( ( - false ) ) ) { } }",
  "func ID ( ) { var ID : bool { var ID : [ ID [ - true ] [ ( - - ( ( - - - ( false ) int ) ) ] ] ) var ID : [ ] [ ] [ ] [ ] int } ID = ( - false ) } func ID ( ) { }",
  "func ID ( bool { var ID : ) { var ID : [ ID [ - true ] [ ( - - ( ( - - - ( false ) int ) ) ] ] ) var ID : [ ] [ ] [ ] [ ] int } ID = ( - false ) } func ID ( ) { }",
  "func ID ( bool { var ID : ) { var ID : [ ID [ - true ] [ ( - - ( ( - - - ( false ) int ) ) ] ] ) var ID : [ ] int ] [ ] [ ] [ } ID = ( - false ) } func ID ( ) { }",
  "func ID ( ) { ID ( false - - ID [ ] * ID * ( 123 ) ] [ - - ( - ID ) false - true ) = ( - - 123 ) call ID ( ) }",
  "func ID ( ) { ID ( ID - - ID [ ] * ID * ( 123 ) ] [ - - ( - false ) false - true ) = ( - - 123 ) call ID ( ) }",
  "func ID ( ) { - ( ID ID - ID [ ] * ID * ( 123 ) ] [ - - ( - false ) false - true ) = ( - - 123 ) call ID ( ) }",
  "func ID ( ) : int { var ID : int { ID ( ID [ true ] [ ID ] ) if } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int { ID ( ID [ true ] [ ID ] ) if } } func ID ( ) { }",
  ": ID ( ) func int { var ID : int { ID ( ID [ true ] [ ID ] ) if } } func ID ( ) { }",
  "func ID ( { ) var ID : int return } func ID ( ) : int { if - ID ( 123 ) { } }",
  "func ID ( int ) var ID : { return } func ID ( ) : int { if - ID ( 123 ) { } }",
  "func : ( ID ID [ ( ID [ ( - false * ID ) ] [ ( false ) ] ) ] [ ] bool ) { }",
  "func : ( ID ID [ ( ID [ * - false ( ID ) ] [ ( false ) ] ) ] [ ] bool ) { }",
  "func : ( ID ID [ ( ID [ * - false ( ID ) ] [ ( false ) ] ) ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : [ ] bool var { ID : int if ( 123 ) { } }",
  "func ID ( ID : bool , ID : int , ID : int ) : [ ] bool var { ID : int } ( 123 ) { } if",
  ": ID ( ID : bool , ID func int , ID : int ) : [ ] bool var { ID : int } ( 123 ) { } if",
  "func ID ( ID : [ ] [ ] int , ID : [ ID ( ) [ - true - - ( ID ) ] [ - ( 123 ) ] [ ] ] [ ] [ ] [ ] int ) { }",
  "func int ( ID : [ ] [ ] int , ID : [ ID ( ) [ - true - - ( ID ) ] [ - ( 123 ) ] [ ] ] [ ] [ ] [ ] ID ) { }",
  "func int ( ID : [ ] [ ] true , ID : [ ID ( ) [ - int - - ( ID ) ] [ - ( 123 ) ] [ ] ] [ ] [ ] [ ] ID ) { }",
  "func ID ( ID : bool , ID : int ID , : bool ) { ID ( true / ID [ true ] * ( 123 ) ) = 123 }",
  "func ID ( bool : ID , ID : int ID , : bool ) { ID ( true / ID [ true ] * ( 123 ) ) = 123 }",
  "func ID ( bool : true , ID : int ID , : bool ) { ID ( true / ID [ ID ] * ( 123 ) ) = 123 }",
  "ID ID ( func : [ ] int , ID : int ) : [ ID ( ( ID ) ) ] [ ] bool { }",
  "ID ID ( func : [ int ] , ID : int ) : [ ID ( ( ID ) ) ] [ ] bool { }",
  "ID ID ( func : [ int ] , ID : int ) : [ ID ( ( ID ) ) ] [ ] bool { }",
  "func ID ( ID : int ) : bool { var ID : int ID ( 123 * ( ID } ) = - ID if - ( ID ) { ) } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : int ID ( 123 * ( ID } ) = - ID if - ( ID ) { ) ) func ID ( } { }",
  "func ID } ID : int ) : bool { var ID : int ID ( 123 * ( ID } ) = - ID if - ( ID ) { ) ) func ID ( } { (",
  "func ID ( } : [ ID / ID ( true / ID - - ( ( - - ( - ID ) ) ) ) * ID ] [ ] [ ] [ ] [ ] [ ] bool ) { } func ID ( ) { ID",
  "func ID ( } : [ ID / ID ( true / ID ( - ( ( - - - - ID ) ) ) ) * ID ] [ ] [ ] [ ] [ ] [ ] bool ) { } func ID ( ) { ID",
  "func ID ( } : [ ID / ID ( true / ID ( - ( ( - - - - ID ] ) ) ) * ID ] [ ] [ ] [ ) [ ] [ ] bool ) { } func ID ( ) { ID",
  "func ID ( ID : int , ID : bool ) { var ID : [ ( ID ( ( true ) ) ) ] bool } ID : bool var func ID ( ) { }",
  "func ID ( ) : int , ID : bool ) { var ID : [ ( ID ( ( true ID ) ) ] bool } ID : bool var func ID ( ) { }",
  "func ID ( ) : int , ID : bool ) { var ID : ID ( ID ( ( true ID ) ) ] bool } ID : bool var func [ ( ) { }",
  "func ID ( ID ( bool ) { } func ID : ID : [ ( ID / 123 * ID ) ] int ) { }",
  "func ID ( ID ( ) ) { } func ID : ID : [ ( ID / 123 * ID bool ] int ) { }",
  "func ID ( ID ( ) ) func } { ID : ID : [ ( ID / 123 * ID bool ] int ) { }",
  "func ID ( ) : int { var ID : [ ] [ false - ( - ( ( ( true ) ) ) ) * * ( false ) ] [ ] int var ID : [ ] bool }",
  "func ID ( ) : int { var ID : [ ] [ false - ( - ( ( ( true ) bool ) ) * * ( false ) ] [ ] int var ID : [ ] ) }",
  "func ID ( ) false int { var ID : [ ] [ false - ( - ( ( ( true ) bool ) ) * * ( : ) ] [ ] int var ID : [ ] ) }",
  "func ID ( ID : int , ID : bool ) : int { while - + false / true - true * - ID { } } func ID ( ) { }",
  "func ID int ID : ( , ID : bool ) : int { while - + false / true - true * - ID { } } func ID ( ) { }",
  "func ID int ID : ( , ID : bool - : int { while ) + false / true - true * - ID { } } func ID ( ) { }",
  "func ID ( ID var [ ] int ) { var ID : int : ID : [ - true / - ID ( ) ] int }",
  "func ID ( ID / [ ] int ) { var ID : int : ID : [ - true var - ID ( ) ] int }",
  "func ID ( ID / [ ] int ) { var ID : int : ID : - [ true var - ID ( ) ] int }",
  "func ID ( ID : bool , ID : bool , ID : [ ( - false / true and - ( 123 ) and ( - { ( - false ) ) ) ] int ) - }",
  "func ID ( ID : bool , ID : bool , ID : [ ( ( false / true and - - 123 ) and ( - { ( - false ) ) ) ] int ) - }",
  "func ID ( ID : bool , ID : bool , ID : [ ( ( false / true and - - 123 ) and ( - { ( - false ) ) ) ] int ) - }",
  "func ID ( ID : [ ( ID ( ) [ - - ( - ( - ( false ) ) ) ] ) ] [ ] bool ) { } func ID ( { ) }",
  "func ( ( ID : [ ( ID ID ) [ - - ( - ( - ( false ) ) ) ] ) ] [ ] bool ) { } func ID ( { ) }",
  "func ID ( ID : [ - 123 / } 123 / true * ( false ) ) ] bool ) { (",
  "func ID ( ID : [ - 123 / } 123 / true * ( false ) ) ] { ) bool (",
  "func ID ( ID : [ - 123 / ] 123 / true * ( false ) ) } { ) bool (",
  "func ID ( ) { var ID : [ * ID [ true * 123 - true - - ( - - true ) ] ] [ ] bool }",
  "func ID ( ) { var ID : [ * ID [ true } 123 - true - - ( - - true ) ] ] [ ] bool *",
  "func ID ( ) { var ID - [ * ID [ true } 123 - true - : ( - - true ) ] ] [ ] bool *",
  "func ID ( ID : int , ID : bool ) { var ID : false ] int while true * ID != [ { } print ID }",
  "func ID ( ID : int , ID : : ) { var ID bool false ] int while true * ID != [ { } print ID }",
  ") ID ( ID : int , ID : : func { var ID bool false ] int while true * ID != [ { } print ID }",
  "func ID ( ID : int bool : ) { var ID : [ ID [ true ] [ ( ID ) ] ] int }",
  "func ID ( ID : int bool : ) { var ID : ] ID [ true [ [ ( ID ) ] ] int }",
  "func ID ( [ : int bool : ) { var ID : ] ID [ true [ ID ( ID ) ] ] int }",
  "func ID ( ) : int { var ID : bool return } func ID ( ID : [ ] bool , ID : bool , ID : int ) { if } true { - print true }",
  "func ID ( ) : int { var : ID bool return } func ID ( ID : [ ] bool , ID : bool , ID : int ) { if } true { - print true }",
  "func ID ( ) : int { var : ID bool return } func ID ( , : [ ] bool ID ID : bool , ID : int ) { if } true { - print true }",
  "func ID ( ID : [ ID ( true / true / - - - + ID 123 ) ] [ ] [ ] [ ] [ ] [ ] int ) { }",
  "func ID true ID : [ ID ( ( / true / - - - + ID 123 ) ] [ ] [ ] [ ] [ ] [ ] int ) { }",
  "func ID true ID : [ ID ( ( / true / - - - + ID 123 ) ] [ ] [ ) [ ] [ ] [ ] int ] { }",
  "func ID ( ID : int , ID : [ ] int ) : [ int bool { var ID : ] var ID : [ ID ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int , func : [ ] int ) : [ int bool { var ID : ] var ID : [ ID ] [ ] bool } ID ID ( ) { }",
  "func ID ( ID : int , func : [ ] int ) ( [ int bool { var ID : ] var ID : [ ID ] [ ] bool } ID ID : ) { }",
  "func ID ( ) : [ ] bool { var ID : int call ID ( ID [ 123 / - - ( ID ) * ID ] [ - - - false ] } ) func ID ( ) { }",
  "func ID ( ) call [ ] bool { var ID : int : ID ( ID [ 123 / - - ( ID ) * ID ] [ - - - false ] } ) func ID ( ) { }",
  "func ID ( ) { ID false ) [ true / false == ID * ( - ID ) ] = ( - - ( ( ) ) call ID ( ) }",
  "func ID ( ) { ID false ) [ ) / false == ID * ( - ID true ] = ( - - ( ( ) ) call ID ( ) }",
  "func ID ( ) : int { - [ - ID / ID - - ID [ 123 ] ID ( - ID ) ] [ ( ID ) ] = ID if - ID { } } func ID ( ) { }",
  "func ID ( ) : int { - [ - ID / ID - - ID [ 123 ] ID ( - ID ) ] [ ( ID ) ] = ID if - ID { } } func ID ( ) { }",
  "func ID ( ) : int { - } - ID / ID - - ID [ 123 ] ID ( - ID ) ] [ ( ID ) ] = ID if - ID { } [ func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int } func ID ( ) ID var { : [ ( - ID ) ] int var ID : [ ] [ ] [ ] [ ] bool }",
  "func ID ( ) { var ID : bool - ID : int } func ID ( ) ID var { : [ ( var ID ) ] int var ID : [ ] [ ] [ ] [ ] bool }",
  "func ID ( ID : int , ID : bool ) { var ID : int var ( : [ ] [ - - ID / false * ID ] bool } func ID ID ) { }",
  "func ID ( ID : int , ID : : ) { var ID bool int var ( : [ ] [ - - ID / false * ID ] bool } func ID ID ) { }",
  "func ID { ID : int , ID : : ) ( var ID bool int var ( : [ ] [ - - ID / false * ID ] bool } func ID ID ) { }",
  "func ID ( ID : ( , ID : [ ] [ - - - int - ( - ID ) ) ] int ) { }",
  "func ID ( ID : [ , ID : [ ] ( - - - int - ( - ID ) ) ] int ) { }",
  "func ID ( ID : ) , ID : [ ] ( - - - int - ( - ID ) ) ] int [ { }",
  "func ID ( ID : int , ID : int ) ID : int , : [ true / ( - - ( - 123 ) ) ] int { }",
  "func ID ( ID ID int , ID : int ) : : int , : [ true / ( - - ( - 123 ) ) ] int { }",
  "func ID ( ID ID int , ID : int ) : : int , : [ true - ( - / ( - 123 ) ) ] int { }",
  "func ID print ) { var ID : bool var ID : [ ] bool ( - false / - ( ID ) } func ID ( ) { }",
  "func ID print ID { var ID : bool var ID : [ ] bool ( - false / - ( ) ) } func ID ( ) { }",
  "func ID print ID { var ID : bool var ) : [ ] bool ( - false / - ( ) ) } func ID ( ID { }",
  "func ID ( ) { print ( ID ( ] [ - - true * true * ( true ) ) [ ( ID ) ] ) }",
  "func ID ( print { ) ( ID ( ] [ - - true * true * ( true ) ) [ ( ID ) ] ) }",
  "func ID ( print { ) ( ID ( ] [ - - true * true * ( true ) ) [ ( ID ) ] ) }",
  "func ID ( [ : int { var ID : bool return } func ID ( ) : int { var ID : bool ID ( ) ) ( ID ) ] [ ( - ID ) ] = - false }",
  "func ID ( [ : int { var ID : bool ) } func ID ( ) : int { var ID : bool ID ( ) return ( ID ) ] [ ( - ID ) ] = - false }",
  "} ID ( [ : int { var ID : bool ) } func ID ( ) : int { var ID : bool ID ( ) return ( ID ) ] [ ( - ID ) ] = - false func",
  "func ID ( ID : bool ) : int { } { var ID : [ ID ( ID ) ] bool } } print ( false ) { func ID ( ) { }",
  "} ID ( ID : bool ) : int { } { var ID : [ ID ( ID ) ] bool func } print ( false ) { func ID ( ) { }",
  "} ID ( ID : bool ) : int { } { var ID : [ ID ( ID ) ] bool func } print ( false ) { func ID ( ) { }",
  "func ID ( ) : [ ] [ ( - true or } * - ( ID ) / ( - ( ID ) ) ) ] int { } func ID ( ) { ID",
  "func ID ( ) : [ ] [ - ( true or } * - ( ID ) / ( - ( ID ) ) ) ] int { } func ID ( ) { ID",
  "func ID ( ) : [ ] [ - ( true or } * - ( ID ) / ( - ( ID ) ) ) ] int { } ID func ( ) { ID",
  "func ID ( ) 123 bool { var ID : int print ID ( - : + - - - ID ) { } }",
  "func ID ( ) 123 bool - var ID : int print ID ( - : + - { - ID ) { } }",
  "func ID ( ) 123 - - var ID : int print ID ( - : + - { bool ID ) { } }",
  "func ID ( ) : int [ var ID : [ 123 / ID ( ) { ID ( ) ] ] bool } func ID ( ) { }",
  "func ID ( ) : int [ var ID } [ 123 / ID ( ) { ID ( ) ] ] bool : func ID ( ) { }",
  "func ID ( ) : int [ var ID } [ 123 / ID ( ) { ID ( ) ] ] bool func : ID ( ) { }",
  "func ID ( ID : [ ] bool ) : int { ] ID : [ true / - true / 123 or ( false ) or false ] [ var bool var ID : bool }",
  "func ID ( ID : [ ] bool ) : int ID ] ID : [ true / - true / 123 or ( false ) or false ] [ var bool var { : bool }",
  "func ID ( ID : [ ] bool bool : int ID ] ID : [ true / - true / 123 or ( false ) or false ] [ var ) var { : bool }",
  "func ID ( ) : int { var ID : [ ( ] ( false ) ) ) ] [ ( [ ] bool var ID : bool }",
  "func ID false ) : int { var ID : [ ( ] ( ( ) ) ) ] [ ( [ ] bool var ID : bool }",
  "func ID false ) : int { var ID : [ bool ] ( ( ) ) ) ] [ ( [ ] ( var ID : bool }",
  "( ID func ) : [ ] int { var ID : [ ( ( - ID ) ) ] [ ] int var ID : int } func ID ( ) { }",
  "( ID func ] : [ ) int { var ID : [ ( ( - ID ) ) ] [ ] int var ID : int } func ID ( ) { }",
  "( ID func ] : [ ) int { var ( : [ ( ( - ID ) ) ] [ ] int var ID : int } func ID ID ) { }",
  "func ID ( bool { var ID : ) print ( ( ID + 123 - - - true ) ) { } } func ID ( ) { }",
  "func ID ( bool ID var { : ) print ( ( ID + 123 - - - true ) ) { } } func ID ( ) { }",
  "func ID ( bool ID var { : ) print ( ( ID + - 123 - - true ) ) { } } func ID ( ) { }",
  "func ID ( ID : [ - - ID ( 123 * - - - true / } ) ] [ ] int ) { 123 func ID ( ) { }",
  "func ID ( ID : [ - - ID ( - * - 123 - true / } ) ] [ ] int ) { 123 func ID ( ) { }",
  "func ID ( ID : [ - - ID ( - * - 123 - true / } ) ] [ ] int ) { 123 func ID } ) { (",
  "func ID ( ) : int { return true / 123 * ( - ID * 123 - - - ID - - ID ) } func { ( ) ID }",
  "func ID ( ) : int { return - / 123 * ( - ID * 123 - - - ID - true ID ) } func { ( ) ID }",
  "func ID ( ) : int { return - / 123 * ( - ID * 123 - - - ID - true ID ) } func { ( ) ID }",
  "func ID ( ID : int , ID : bool int : ) { var ID : int }",
  "func ID ( ID : int , ID : bool int : ) { var ID : int }",
  "func ID ( ID : bool , ID : int int : ) { var ID : int }",
  "func ID ( ) : [ ] [ ] [ ] ( - [ ( - 123 ) ) ] int { }",
  "func ID ( ) : [ ] [ ] [ ] ( - [ ( - 123 ) ) ] int } {",
  "func ID ( ) [ [ ] [ ] [ ] ( - : ( - 123 ) ) ] int } {",
  "func ID { ) ( return - ( 123 * - ID [ - true ] [ ID ] / ( - ID ) ) }",
  "func ID { ) ( return - ( 123 * ID ID [ - true ] [ ID ] / ( - - ) ) }",
  "func ID { ) ( return - ( 123 * ID ID [ - true ] [ ID ] / ( - - ) ) }",
  "func ID ( ID : int ) : bool { var ID false int while - ( ( - ( ( - : ) ) ) ) { } call ID ( ) }",
  "func while ( ID : int ) : bool { var ID false int ID - ( ( - ( ( - : ) ) ) ) { } call ID ( ) }",
  "func while ( ID : } ) : bool { var ID false int ID - ( ( - ( ( - : ) ) ) ) { int call ID ( ) }",
  "func ID ( ID : bool ) : int { var ID : [ ID 123 ( false - 123 - - false ) * - / ] bool }",
  "func ID ( ID : bool ) : int { var ID : [ ID 123 ( false - 123 - - false ) * - / ] bool }",
  "func ID } ID : bool ) : int { var ID : [ ID 123 ( false - 123 - - false ) * - / ] bool (",
  "func ID ( ) { var ID : int while - ( 123 / ID ( ID [ 123 ] ) { } ) = ( - - - - ID ) }",
  "func ID ( ) { var ID : int - - ( 123 / ID ( ID [ 123 ] ) { } ) = ( - - - while ID ) }",
  "func ID while ) { var ID : int - - ( 123 / ID ( ID [ 123 ] ) { } ) = ( - - - ( ID ) }",
  "func ID ( ) { var ID : bool while ( ID ( ) [ ( 123 ) ] ) ( } } func ID { ) { }",
  "func ID ( ) { var ID : bool while ( ID ( ) [ ( 123 ) ] ) ( } } func ID { ) { }",
  ") ID ( ) { var ID : bool while ( ID ( ) [ ( 123 ) ] ) ( } } func ID { func { }",
  "func ID ( ) { var ID : [ ] [ - ID ( ID + - ID ] [ ( - [ - 123 ) ) ] ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ - ID ( ID } - ID ] [ ( - [ - 123 ) ) ] ] bool + func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ - ID ( ID } - ID ] [ ( - 123 - [ ) ) ] ] bool + func ID ( ) { }",
  "func ID ( ) : ( ( - - - 123 / 123 / [ - - - ( 123 ) ) ) ] int { }",
  "func ID ( ) : ( ( - - - 123 / 123 / [ - ) - ( 123 ) ) - ] int { }",
  "func ID ( ) : ( ( - - - 123 / 123 / [ - ) - ( 123 ) ) - ] int { }",
  "func ID ( ID : int , ID : bool ) { while 123 * false + false * ID ( ) } { print ID }",
  "func ID ( ID bool int , ID : : ) { while 123 * false + false * ID ( ) } { print ID }",
  "func ID ( ID bool int , ID : : ) { while * 123 false + false * ID ( ) } { print ID }",
  "func ID ( ) : int { } func ID ( ) : [ - [ - ID ( ID ] ) ] [ ] [ ] bool { }",
  "func ID ( ) : int { } func ID ( ) : [ - [ - ] ( ID ] ) ] [ ID [ ] bool { }",
  "func ID ( ) : int ] } func ID ( ) : [ - [ - ] ( ID ] ) { [ ID [ ] bool { }",
  "func ID ( ) { var ID : bool if ID ( ) [ ( ID ID ) ] { } call ID ( ) } func - ( ) { }",
  "func ID ( ) ) var ID : bool if ID ( { [ ( ID ID ) ] { } call ID ( ) } func - ( ) { }",
  "func ID ( ) ) var ID : bool if ID ( { [ ( ID call ) ] { } ID ID ( ) } func - ( ) { }",
  "func ID ( ) { while - ( ) / ID ( true + - - ( ( ID ) ) - ID ( true ) ) { } }",
  "func ID ( ) ( int { var ID : [ - false - false * : ( ID ) ) / ( - ( ( ID ) ) ) + ID ] int } func ID ( ) { }",
  "func ID ( ) ( int { var ID : [ - false - false * : ( ID ) ) / ( - ( ( ( ) ) ) + ID ] int } func ID ID ) { }",
  "func ID ( } { call ID ( - - true / - false + 123 / ( - - ( ( true ) ) ) * ( - ID ) + ( - ID ) ) while ( 123 ) { ) } func ID ( ) { }",
  "func ID ( } { call ID - - ( true / - false + 123 / ( - - ( ( true ) ) ) * ( - ID ) + ( - ID ) ) while ( 123 ) { ) } func ID ( ) { }",
  "func ID ( } { call ID - - ( true / - false + 123 / ( - - ( ( true ( ) ) * ( - ID ) + ( - ID ) ) while ( 123 ) { ) } func ID ) ) { }",
  "func ID { ) : bool ( var ID : int print ( ( ( 123 ) ) ) } func ID ( ) { }",
  "func ID { ) : bool ( var ID 123 int print ( ( ( : ) ) ) } func ID ( ) { }",
  "func bool { ) : ID ( var ID 123 int print ( ( ( : ) ) ) } func ID ( ) { }",
  "{ ID ( ) : [ ID ( ( - 123 / - true + - - ID ) ) ] [ ] int { } func ID ( ) func }",
  "{ ID ( ) : [ ID ( ( - 123 - - true + - / ID ) ) ] [ ] int { } func ID ( ) func }",
  "{ ID ( ) : } ID ( ( - 123 - - true + - / ID ) ) ] [ ] int { [ func ID ( ) func }",
  "func ID ( ID } bool , ID : int , ID : [ true or ID [ ID ] [ ID ] or ( true ) ] int ) { : func ID ( ) { }",
  "func ID ( ID } bool , ID : int ( ID : [ true or ID [ ID ] [ ID ] or , true ) ] int ) { : func ID ( ) { }",
  "func int ( ID } bool , ID : int ( ID : [ true or ID [ ID ] [ ID ] or , true ) ] ID ) { : func ID ( ) { }",
  "func ID ( ) : [ ] int { ) func ID ( } : int { var ID : int }",
  "func ID ( [ : ) ] int { ) func ID ( } : int { var ID : int }",
  "func ID ( [ : ) ] int int ) func ID ( } : int { var ID : { }",
  "func ID bool ) : [ false and 123 == ( ID - ( ID ) ) ] ( { } func ID ( ) { }",
  "func ID ( ) { [ ID : int var ID : int { return ID ( ) var ID ] } }",
  "func ID ( ) { [ ID : int var ID ID int { return ID ( ) var : ] } }",
  "func ID var ) { [ ID : int ( ID ID int { return ID ( ) var : ] } }",
  "func ID ( ) : int { int func ID ( ) : } { var ID : [ ID ( - 123 ) ] bool }",
  "func ID ( ) : int { int func ID ( ) : } bool var ID : [ ID ( - 123 ) ] { }",
  "func ID ( ) : int { int func ID ( ) : } bool var ID : [ ID ( - 123 ) { ] }",
  "ID ID ( ID : bool ) { var func : [ - ID [ ( 123 ) ] ] [ ] int }",
  "ID ) ( ID : bool ) { var func : [ - ID [ ( 123 ID ] ] [ ] int }",
  "ID : ( ID : bool ) { var func ) [ - ID [ ( 123 ID ] ] [ ] int }",
  "func ID ( ID : int , ID : [ / int ) { var ID : bool ID ( true ] ID * true ) = false }",
  "func ID ( ID : int , ID [ : / int ) { var ID : bool ID ( true ] ID * true ) = false }",
  "func ID ( ID : int , ID [ : / int ) { var ID : bool ID ( true ] ID * true ) = false }",
  "func ID ( ID : [ ] [ ] bool , ID [ [ ] bool , ID : [ ] : ID ( - - true ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID [ [ ] bool , ID : [ ] : ID ( - - true ) ] [ ] [ ] int ) { } func ID ( { ) }",
  "func ID ( ID : [ ] [ ] [ , ID bool [ ] bool , ID : [ ] : ID ( - - true ) ] [ ] [ ] int ) { } func ID ( { ) }",
  "func ID ( ID : int ) { { func ID ( ) { var ID : int while ID [ ( ( false ) ) ] } } }",
  "func ID ( ID : int while { { func ID ( ) { var ID : int ) ID [ ( ( false ) ) ] } } }",
  "func ID : ID ( int while { { func ID ( ) { var ID : int ) ID [ ( ( false ) ) ] } } }",
  "func ) ( ID : [ ] [ ] bool { var ID : [ ] int var ID : int print true / ID }",
  "func ) ( ID : [ ] [ ] bool { var ID : [ ] int var ID : int print true / ID }",
  "func ) ( ID : [ ] [ ] bool { var ID : [ ] int var ID : ID print true / int }",
  "func ID ( ) : int { while ID [ } / false * - ( ID ) ] { true } func ID ( ) { }",
  "func ID ( ) : int { while ID [ } func false * - ( ID ) ] { true } / ID ( ) { }",
  "func ID ( ) : int { while ID [ } } false * - ( ID ) ] { true } / ID ( ) { func",
  "func ID ( ) { { } while true * true / ID ( ) } true ] { } } func ID ( ) { [",
  "func ID ( ) { { } while true { true / ID ( ) } true ] * } } func ID ( ) { [",
  "func ID ( { { ) } while true { true / ID ( ) } true ] * } } func ID ( ) { [",
  "func [ ( ID : [ ] ID ( ( ( ID ( ) ) ) ) ] int ) { } func ID ( ) { }",
  "func [ { ID : [ ] ID ( ( ( ID ( ) ) ) ) ] int ) { } func ID ( ) ( }",
  "func [ { ID : [ ] ID ( ( ( ID ( ) ) } ) ] int ) { ) func ID ( ) ( }",
  "func ID ( ID : int , ID : [ ) * ( - true / ( true ) / - - ID ) / ID ] bool , ID : bool true { }",
  "func ID ( ID : int , ID : [ ) * ( - true / ( true ) / - - ID bool / ID ] bool , ID : ) true { }",
  "func ID ( ID : int , ID : [ ) * ( - true / ( true ) / - - ID bool / ID ] bool , ID : ) true { }",
  "func ID ( ) : int { var ID : [ ID / ( ID [ ( - false ) ] [ bool - - ID ) ] ) ] ( }",
  "func ID ( ) : int { / ID : [ ID var ( ID [ ( - false ) ] [ bool - - ID ) ] ) ] ( }",
  "func ID ( ) : int { / ID : [ ID var ( ID [ ( - false ) ] [ bool - - ID ) ] ) ] ( }",
  "func ID ( ) { print - - ID [ ID * } ID ( - - ID ) / ID ] print ID } func ID ( ) { -",
  "func ID ( } { print - - ID [ ID * } ID ( - - ID ) / ID ] print ID ) func ID ( ) { -",
  "func ID } ( { print - - ID [ ID * } ID ( - - ID ) / ID ] print ID ) func ID ( ) { -",
  "func ID ( ID : bool ) : [ ] [ ] int { var ID : [ ] int print ID + ID } } ID ( ) { func",
  "func ID ( ID : bool ) : [ [ ] ] int { var ID : [ ] int print ID + ID } } ID ( ) { func",
  "func ID ( ID : bool ) : [ [ ] ] int { var ID : [ ] int print ID + ID } } ID ( ) { func",
  "func ID ( ) { var ( : bool var ID : [ ID ( ) + - true < ID - - - 123 ) ] int }",
  "func ID ( ) { var ( : bool var ID : [ ID ( 123 + - true < ID - - - ) ) ] int }",
  "func ID ( 123 { var ( : bool var ID : [ ID ( ) + - true < ID - - - ) ) ] int }",
  "func ID ( ID : [ true / ID ( ) < ( - 123 bool ID ) ] == ) { } func ID ( ) { }",
  "func ID ( ID : [ true / ( ID ) < ( - 123 bool ID ) ] == ) { } func ID ( ) { }",
  "func ID ( ID : [ true / ( ID ) < ( - 123 bool ID ) ] == ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var ID int : var ID : [ ( ID ) ] [ ] bool } func ID ( ) { }",
  "func ID { ID : bool , ID : bool , ID : bool ) ( var ID int : var ID : [ ( ID ) ] [ ] bool } func ID ( ) { }",
  "func ID { ID : bool , ID : bool , ID : bool ) ( var ID int : bool ID : [ ( ID ) ] [ ] var } func ID ( ) { }",
  "func ID != ID : [ ( true / ID ( - - ID * ID ) ] bool ) { } func ID ( ) { }",
  "func ID != ID : [ ( true / ID ) - - ID * ID ( ] bool ) { } func ID ( ) { }",
  "func ID != ID : [ ( true / ID ) { - ID * ID ( ] bool ) - } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ false / 123 * 123 - - - ( false } ] bool var ID : int )",
  "func ID ( ) : int { var ID 123 [ false / : * 123 - - - ( false } ] bool var ID : int )",
  "func ID { ) : int ( var ID 123 [ false / : * 123 - - - ( false } ] bool var ID : int )",
  "* ID ( ID : int ) : bool { var ID : [ ID ( ) or false func ID ] [ ] bool var ID : [ ] [ ] [ ] int }",
  "* ID ( ID : int ID : bool { var ID : [ ) ( ) or false func ID ] [ ] bool var ID : [ ] [ ] [ ] int }",
  "* ID ( ID : ID int : bool { var ID : [ ) ( ) or false func ID ] [ ] bool var ID : [ ] [ ] [ ] int }",
  "ID ID ( ) : int { var ID : bool var ID : int ID [ ( func * - false ) ] [ ( - 123 ) ] = ( - ID ) }",
  "func ID ( ID ID bool , ID : bool ) : [ ID [ ID ( ( ID ) ) ] [ - ( - - - ID ) ] ] [ ] bool { } func : ( ) { }",
  "func ID ( ID ID bool , ID : : ) : [ ID [ ID ( ( ID ) ) ] [ - ( - - - ID ) ] ] [ ] bool { } func bool ( ) { }",
  "func ID ( ID ID bool , ID : : ) : [ ID [ ID ( ( ID ) ) ] [ - ( - { - ID ) ] ] [ ] bool - } func bool ( ) { }",
  "func ID ( ) : bool { return - - ID ( ) * ( ( - - ( ID ) ) ) ( func ID } ) { }",
  "func ID ( ) : bool { return - - ID ( ) * ( ( - - ( ID ) ) ) ( func ID } ) { }",
  "func ID ( ) - bool { var ID : int var ID : [ true / ( ( : - 123 ) ) ] bool } func ID ( ) { }",
  "func ID ( ) - bool { var ID : int bool ID : [ true / ( ( : - 123 ) ) ] var } func ID ( ) { }",
  "func ID ( ) - bool { var ID : int bool ID : [ true / ( ( : - 123 ) ) ] var func } ID ( ) { }",
  "func ID ( ) { var ID : int return } func ID ( ) { while 123 ) - 123 * ( ( - - ( - true ) / ) { } { } }",
  "func ID bool ) { var ID : [ ] ( if - - true - false / 123 and ID and ( - 123 ) { } ID = ID }",
  "func ID bool ) { var ID : [ ] ( if - - true - false ID 123 and ID and ( - 123 ) { } / = ID }",
  "func ID ( ) : : { var ID int int if ID [ - ID ( ( ID ) ) ] { } } func ID ( ) { }",
  "func ID ( ) : ID { var ID int int if : [ - ID ( ( ID ) ) ] { } } func ID ( ) { }",
  "func ID ( ) ID ID { var ID int int if : [ - ID ( ( : ) ) ] { } } func ID ( ) { }",
  "func { ( ) : int { print false / ( true + - false * - ID ) * 123 } func ID ( ) ID }",
  "func { ( ) : int { print false / ( true + - * false - ID ) * 123 } func ID ( ) ID }",
  "func { ( ) : int { print false / ( true + - * false - * ) ID 123 } func ID ( ) ID }",
  "func ] ( ) { var ID : [ 123 + - ID ( 123 * ( 123 ) ) - - ID ID int }",
  "func ] ( [ { var ID : ) 123 + - ID ( 123 * ( 123 ) ) - - ID ID int }",
  "func ] ( [ { var ID : ) ID + - 123 ( 123 * ( 123 ) ) - - ID ID int }",
  "func ID while ID : int ) : bool { ( 123 / ID / true + ( - false ) { } }",
  "func ID while ID : int ) : bool { ( 123 / ID / true + ( - false ) { } }",
  "bool ID while ID : int ) : func { ( 123 / ID / true + ( - false ) { } }",
  "func ID ( ) : bool - call ID ( ) return - ( { ( - ID ) ) }",
  "func ID ( ) : bool ) call ID ( - return - ( { ( - ID ) ) }",
  "func ID ( ) : bool ) call ID ( - return - ( { ( - ID ) ) }",
  "func ID ( ) : [ ( 123 / false - ) * true - ID ( 123 ) ] int { }",
  "func ID ( ) : ) ( 123 / false - [ * true - ID ( 123 ) ] int { }",
  "func ID ( false : ) ( 123 / ) - [ * true - ID ( 123 ) ] int { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] bool ) : bool { var ID : [ - ( ( ) ) ) ] [ ] int var ID : int } func ID ( ID { }",
  "func ID ( ID : bool , ID : bool , ID : ID ] bool ) : bool { var ID : [ - ( ( ) ) ) ] [ ] int var ID : int } func ID ( [ { }",
  "func ID ( ID : bool , ID : bool , ID : ID ] bool ) : bool { var ID : [ - ( ( ) ) ) ] int ] [ var ID : int } func ID ( [ { }",
  "func ID ( ID : [ ] bool , ID : bool ) : int ID var ID : bool var ID : [ { ( - ID ) ] int } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) : int ID var ID : bool var ID : [ { ( - ID ) ] int } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) { int ID var ID : bool var ID : [ : ( - ID ) ] int } func ID ( ) { }",
  "func ID ( ID : [ false * ( - ( - false / true + - ID - ID ) ) / - - int ID ] - ) { } func ID ( ) { }",
  "func ) ( ID : [ false * ( - ( - false / true + - ID - ID ) ID / - - int ID ] - ) { } func ID ( ) { }",
  "func ) ( ID : [ false * ( - ( ) false / true + - ID - ID ) ID / - - int ID ] - - { } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] [ ] [ ] bool var ID ID [ ] [ - - : ] [ ] [ ] [ ] [ ] bool }",
  "func ID ( ) : int { var ID : [ ] [ ] ] [ bool var ID ID [ ] [ - - : ] [ ] [ ] [ ] [ ] bool }",
  "func ID ( ) : int { var ID : [ ] [ ] ] [ bool var ID ID [ ] [ - - : ] [ ] [ ] [ ] [ ] bool }",
  "func ID ( ) { var ID : int { print true - - ID ( ) [ true ID [ true ] + ID } print - - - ( ] ) }",
  "- ID ( ) { var ID : int { print true - - ID ( ) [ true ID [ true ] + ID } print func - - ( ] ) }",
  "- ID ( ) { var ID : [ { print true - - ID ( ) [ true ID int true ] + ID } print func - - ( ] ) }",
  "func ID ( ) { var ID : int } true / - - false / false + ( false ) - ID { } while",
  "{ ID ( ) func var ID : int } true / - - false / false + ( false ) - ID { } while",
  "{ ID ( false func var ID : int } true / - - false / false + ( ) ) - ID { } while",
  "func ID ( ) : int { var ID : [ ( ( - ( false ( ) ) ] bool } func ID ) ) { }",
  "func ID ( ) : int { var bool : [ ( ( - ( false ( ) ) ] ID } func ID ) ) { }",
  "func ID ( ) : int { var bool : ) ( ( - ( false ( ) ) ] ID } func ID [ ) { }",
  "func ID ( ) : int { var ID : bool { var ID ID int var : : bool return true / ID ( ) } if ID { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool { var ID ID int ) : : bool return true / ID ( ) } if ID { } } func ID ( var { }",
  "func ID ( ) : int { var ID : bool { var ID ID int ) : : bool return true / ID } ) } if ID { ( } func ID ( var { }",
  "func ID ( ) { ID ID : int var var : [ ] int }",
  "func ID ( ID { ) ID : int var var : [ ] int }",
  "func ID ( ID { ) ID : : var var int [ ] int }",
  "func ID ( ID : bool , ID : bool ) { print ( - } ( ( false ) ) ) ID func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) ) print ( - } ( ( false ) ) { ID func ID ( ) { }",
  "func ID ( ID : bool , ID print bool ) ) : ( - } ( ( false ) ) { ID func ID ( ) { }",
  "func ID ( ID : int , [ : ID 123 * true - true / - 123 != - ( - - - - ( ( false ) ) ) ] [ ] [ ] [ ] int , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : != , [ : ID 123 * true - true / - 123 int - ( - - - - ( ( false ) ) ) ] [ ] [ ] [ ] int , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : != , [ : ID 123 * true - true / - 123 int - ( - - - - ( ( false ) ) ) [ [ ] [ ] [ ] int , ID : ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ - false / ID [ false / true ] ( ( 123 ) ) * [ - true ] * ( ID ) ] [ ] int ) { }",
  "func ID ( ID : int , ID : * ] [ - false / ID [ false / true ] ( ( 123 ) ) [ [ - true ] * ( ID ) ] [ ] int ) { }",
  "func ID ( ID : int , - : * ] [ ID false / ID [ false / true ] ( ( 123 ) ) [ [ - true ] * ( ID ) ] [ ] int ) { }",
  "func ID ( ID : [ ] int , ID : [ ID [ false ] [ ( ID ) ] ] int , ID : [ ] { ) { } func ID ( ) int }",
  "func ID ( ID : [ ] int , ID : [ ) [ false ] [ ( ID ) ] ] int , ID : [ ] { ) { } func ID ( ID int }",
  "func ID ( ID : [ ] int , func : [ ) [ false ] [ ( ID ) ] ] int , ID : [ ] { ) { } ID ID ( ID int }",
  "func ID ( ) { var ID : bool var ID : [ ] bool if ( / ID ID ) * false { } } func ID ( ) { }",
  "func ID ( ) { var bool : ID var ID : [ ] bool if ( / ID ID ) * false { } } func ID ( ) { }",
  "func ID ( ) { var bool : ID var ID : [ ] bool if * / ID ID ) ( false { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : int } func ID ( ID : bool , ID : [ , int ] ID : int ) { }",
  "func int ( ) : bool { var ID : ID var ID : int } func ID ( ID : bool , ID : [ , int ] ID : int ) { }",
  "func int ( ) : bool { var ID : ID var ID : int , func ID ( ID : bool , ID : [ } int ] ID : int ) { }",
  "func ID ( ID ID [ - ( false * false * : - ( ( ( ( ID ) ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID ID [ ( ( false * false * : - ( ( - ( ID ) ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID ID [ ( ( false * false * : - ) ( - ( ID ) ) ) ) ) ] int ) { } func ID ( ( { }",
  "func ID ( ) : [ ] int [ var ID : [ - ( false * ID ( true ) ) ] { ] bool } func ID ( ) { }",
  "} ID ( ) : [ ] int [ var ID : [ - ( false * ID ( true ) ) ] { ] bool func func ID ( ) { }",
  "} ID ( ) ] [ ] int [ var ID : [ - ( false * ID ( true ) ) ] { : bool func func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : int var ID : bool } func ID ( ID : bool , ID { int , ID : [ ] bool ) : }",
  "func ID ( ID : int ) : int { var ID : int var ID : bool } func ID ( ID : bool , ID { int , ID : [ ] bool ) : }",
  "func ID ( ID : int , : int { var ID : int var ID : bool } func ID ( ID : bool , ID { int ) ID : [ ] bool ) : }",
  "func [ ( ID : ID ID ( ( - ID + ( true ) + - - ( ID ) ) ) ] int ) { } func ID ( ) { }",
  "func [ ( ID : ID ID ( ( - ID + ( true ) + - - ( ID ) ) ) ] int ID { } func ) ( ) { }",
  "func ( ( ID : ID ID ( ( - ID + ( true ) + - - ( ID ) ) ) ] int ID { } func ) [ ) { }",
  "func ID ( ) ) while - ( - - - ID ( ( - ID { ) ) { } } func ID ( ) { }",
  "func ID ( ) } while - ( - - - ID ( ( - ID { ) ) { ) } func ID ( ) { }",
  "func ID ( ) } while - ( - - - ID ( ( - { { ) ) ID ) } func ID ( ) { }",
  "func ID ( : : int , ID : [ ] int ) { var ID : [ ] [ - ID ( ) [ 123 ] ] int var ID ID bool }",
  "func ID ( : : int , ID : [ ] int ) { var ID : [ ] [ - ID ID ) [ 123 ] ] int var ID ( bool }",
  "func ID ( ) { var ID : int var ID : ) true / false / ( ( ( ID ) [ ) ] [ ] bool }",
  "func ID ( ) { var ID : var int ID : ) true / false / ( ( ( ID ) [ ) ] [ ] bool }",
  "func ID ( ) [ var ID : var int ID : ) true / false / ( ( ( ID ) { ) ] [ ] bool }",
  "func ID ( ID : bool , ID ID bool ) : int { var : : bool if - - ( ( ( ID ) ) ) { } if ID { } }",
  "func ID ( ID : bool , ID ID bool ) : int { var : : bool if - - { ( ( ID ) ) ) ( } if ID { } }",
  "func ID ( ID : ) , ID ID bool ) : int { var : : bool if - - { ( ( ID ) ) bool ( } if ID { } }",
  "func ID ( ) { print ID ( ( ID ) - ( 123 ) ] [ ) } func ID ( ) { }",
  "func ID ( ( { print ID ( ) ID ) - ( 123 ) ] [ ) } func ID ( ) { }",
  "func ID ( ( { print ID ( ) ID ) - ( ) 123 ] [ ) } func ID ( ) { }",
  ") ID ( ID : bool ) : [ ID ( ID ( ( 123 ) func ) ] bool { }",
  ") ID ( ) : bool ) : [ ID ( ID ( ( 123 ID func ) ] bool { }",
  ") ID ( ) : bool ) : [ ID ( ID ( ( 123 ID func ) ] bool { }",
  "func ID ( ID : int , ID : [ ] bool , ID : bool ) { var ID : bool var ID : int ID = while ( ID ) - ID { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool , ID : bool ) { var ID : bool var ID : int ID = while ( ID ) - ID { } } func ID ( ) { }",
  "func { ( ID : int , ID : [ ] bool , ID : bool ) ID var ID : bool var ID : int ID = while ( ID ) - ID { } } func ID ( ) { }",
  "func ID ( ) : [ ( - ( ( true / - ( ( - - true ) ) * 123 ) ) ) ] bool { } { ID ( ) func }",
  "func ID ( ) : [ ( - { ( true / - ( ( - - true ) ) * 123 ) ) ) ] bool { } ( ID ( ) func }",
  "func ) ( ) { var ID : [ ID ( ID ( ) * ID [ true ] [ 123 ] ID ] bool var ID : [ ] bool }",
  "func ) ( ) { var ID : [ ID ( ID ( ) * ID [ true ] [ 123 ] ID ] bool var ID : [ ] bool }",
  "func ) ID ) { var ID : [ ID ( ID ( ) * ( [ true ] [ 123 ] ID ] bool var ID : [ ] bool }",
  "func ID ( ID : [ - - func * ID [ ( 123 * ID / ID ) ] [ 123 ] ] [ ] [ ] int ) { } 123 ID ( ) { }",
  "func ID ( ID : [ - - func * ID [ ( 123 * ID ] ID ) ] [ 123 / ] [ ] [ ] int ) { } 123 ID ( ) { }",
  "func ID ( ID : [ - - func * ID [ ( [ * ID ] ID ) ] 123 123 / ] [ ] [ ] int ) { } 123 ID ( ) { }",
  "func ID ID ( : bool ) : [ ] bool { var ID : bool var ID : [ ( ID ( ) ) ] int } func ID ( ) { }",
  "func ID ID ( : bool ) : [ ] bool { var ID : bool var ID : [ ( ID ( ) ) ] int } func ID ( ) { }",
  "func ID ID ( : bool ) : [ ] : { var ID bool bool var ID : [ ( ID ( ) ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID ID bool var : : [ ] bool while ID [ 123 * false ] [ ( true ) ] { } print ( ( ( true ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID ID bool var : true [ ] bool while ID [ 123 * false ] [ ( true ) ] { } print ( ( ( : ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID ID bool ] : true [ ] bool while ID [ 123 * false ] [ ( true ) var { } print ( ( ( : ) ) ) } func ID ( ) { }",
  "func ID ( ) { : ID : bool var ID var bool call ID ( 123 / - ID or 123 or - ID ) print ID }",
  "func ID ( ) { : ID : bool var ID var bool ID ID ( 123 / - ID or 123 or - ID ) print call }",
  "func ID ( ) { var ID : int if 123 >= - ID [ ID ( ) ] { } print ( - func ) } true ID ( ) { }",
  "func ID ( ) ID var ID : int if 123 >= - ID [ ID ( ) ] { } print ( - func ) } true { ( ) { }",
  "func ID ( ) ID var ID ] int if 123 >= - ID [ ID ( ) : { } print ( - func ) } true { ( ) { }",
  "func ID ( ID : [ ( ] ( 123 - ID ) ) ) ] [ ( bool ) { }",
  "func ID ( ID : [ ( ] ) 123 - ID ) ) ) ] [ ( bool ( { }",
  "func ID ( ID : bool , ID : int , ID : [ - ID ( ) [ ID [ ( 123 ) ] [ - - bool ] ] ] ID ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ - ID ( ) [ ID [ ( 123 ) ] [ - - bool ] ] ] ID ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ) ID ( ) [ ID [ ( 123 - ] [ - - bool ] ] ] ID ) { } func ID ( ) { }",
  "func ID ( ID : [ / - ( - ID true true - ( - false ) - - ( - - - ID ) ) ] bool ) { }",
  "func ID ( ID : [ / - ( - ID true true - ( - false ) - - ( - - - ID ) ) ] bool ) { }",
  "func ID ( ID : [ / - ( - ID true true - ( - false ) - - ( - - - ID { ) ] bool ) ) }",
  "func : ( ) ID int { var ID : [ ID [ 123 + false * false / 123 ] [ - - 123 ] ] bool var ID : bool }",
  "+ : ( ) ID int { var ID : [ ID [ 123 func false * false / 123 ] [ - - 123 ] ] bool var ID : bool }",
  "func ID ( ) : bool { var ID : bool ID [ ( ID ( ( ID ) ) ) ] = ) ( ( ( ID ) - ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID ID bool : [ ( ID ( ( ID ) ) ) ] = ) ( ( ( ID ) - ) } func ID ( ) { }",
  "func ID ( ) : bool { ) ID ID bool : [ ( ID ( ( ID ) var ) ] = ) ( ( ( ID ) - ) } func ID ( ) { }",
  "func ID var ID : bool ) : [ ] int { ( ID : int while ( true / - ID * false ) { } } func ID ( ) { }",
  "func bool var ID : ID ) : [ ] int { ( ID : int while ( true / - ID * false ) { } } func ID ( ) { }",
  "] bool var ID : ID ) : [ func int { ( ID : int while ( true / - ID * false ) { } } func ID ( ) { }",
  "} ID ( ) : bool { var ID : bool var ID : [ ] bool return } func ID ( ) : int { var ID : int ID = - ( - - ID ) { } func",
  "} ) ( ) : bool { var ID : bool var ID : [ ] bool return } func ID ( ) : int { var ID : int ID = - ( - - ID ID { } func",
  "} ) ( ) : bool { var ID : bool var ID : [ ] bool return : func ID ( ) } int { var ID : int ID = - ( - - ID ID { } func",
  "func ID ( } : int ) { var ID : [ ( true + ID ( ( ID ) ) ) ] int ID",
  "func ID ( } : int ) { ] ID : [ ( true + ID ( ( ID ) ) ) var int ID",
  "func ID ( [ : int ) { ] ID : } ( true + ID ( ( ID ) ) ) var int ID",
  "func ID ( ) { var ID : int var ID : bool return } func ID ( ID : int ID ID : [ false / ID * - true ] [ ] bool , , : bool ) { }",
  "func [ ( ) { var ID : int var ID : bool return } func ID ( ID : int ID ID : [ false / ID * - true ] ID ] bool , , : bool ) { }",
  "func [ ( ) { var ID : int var ID : bool return } func ID ( ID , int ID ID : [ false / ID * - true ] ID ] bool , : : bool ) { }",
  "func ID ( ID : [ ] bool ) : bool ] { return } return ID ( ) [ ID { }",
  "func ID ( ID : [ ] bool ) : bool { ] return } return ID ( ) [ ID { }",
  "func ID ( ID } [ ] bool ) : bool { ] return } return ID ( ) [ ID { :",
  "func false ( ) : int { var ID : [ - 123 + ID ( - - - 123 ) + ID ] bool }",
  "func int ( ) : false { var ID : [ - 123 + ID ( - - - 123 ) + ID ] bool }",
  "func int ( ) : false { var ID : [ 123 123 + ID ( - - - - ) + ID ] bool }",
  "func ID ( ) : 123 ID * false * - - - true != [ - ID - ID ] bool { }",
  "func ID ( ) bool 123 ID * false * - - - true != [ - ID - ID ] : { }",
  "func ID ( ) } 123 ID * false * - - - true != [ - ID - ID ] : { bool",
  "func ID ( ) { var ID : [ - true ] return var ID : int bool - ( ( - - ( true ) ) ) }",
  "func ID ( ) { var ID : [ true true ] return var ID : int bool - ( ( - - ( - ) ) ) }",
  "func ID ( ) { var ID } [ true true ] return var ID : int bool - ( ( - - ( - ) ) ) :",
  "func ID ( ID : int , ID : [ - ( ( - ( ( - ( - - - ) ( false ) ) ) ( ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func { ( ID : int , ID : [ - ( ( - ( ( - ( - - - ) ( false ) ) ) ( ) ) ) ] [ ] bool ) { } func ID ( ) ID }",
  "func { ( ID : int , ID : [ - ( ( - ( ( - ( - - - ) ( false ) ) ) ) ( ) ) ] [ ] bool ) { } func ID ( ) ID }",
  "func ID ( ID : ] , ID : [ - ID [ ID ( ) [ ID bool ] ] bool , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ) ID : ] , ID : [ - ID [ ID ( ( [ ID bool ] ] bool , ID : [ ] int ) { } func ID ( ) { }",
  ", ID ) ID : ] func ID : [ - ID [ ID ( ( [ ID bool ] ] bool , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int bool { var ID : bool var ID : ) return }",
  "func ID ( ID : bool var ID : int , ID : int bool { var ID : bool , ID : ) return }",
  "func ID , ID : bool var ID : int ( ID : int bool { var ID : bool , ID : ) return }",
  "func ID ( ) { var ID : [ 123 ( ( - ( - - - ) ) ) ] int var ID : [ ] int }",
  "func ID ) ) { var ID : [ 123 ( ( - ( - - - ) ( ) ] int var ID : [ ] int }",
  "func ID ) ) { var - : [ 123 ( ( - ( ID - - ) ( ) ] int var ID : [ ] int }",
  "func ID ( ID : [ ] ID ( ID * 123 + ID ( ( [ ) ) ) ] bool ) { } func ID ( ) { }",
  "} ID ( ID : [ ] ID ( ID * 123 + ID ( ( [ ) ) ) ] bool ) { func func ID ( ) { }",
  "} ID ( ID : [ ] ID ( ID ( 123 + ID * ( [ ) ) ) ] bool ) { func func ID ( ) { }",
  "func ID ( ID : ) ID [ false * true + ( true * 123 * ID ) - - ( - ID ) ] [ false ] ] bool [ { } func ID ( ) { }",
  "} ID ( ID : ) ID [ false * true + ( true * 123 * ID ) - - ( - ID ) ] [ false ] ] bool [ { } func ID ( ) { func",
  "] ID ( ID : ) ID [ false * true + ( true * 123 * ID ) - - ( - ID ) } [ false ] ] bool [ { } func ID ( ) { func",
  "func ID ( ID : bool , int : bool , ID : [ ] ID ) { } func ID ( ID : int , ID : int , ID : [ ] int ) { }",
  "func ID ( ID : bool , int : bool , ID : [ ] : ) { } func ID ( ID : int , ID ID int , ID : [ ] int ) { }",
  "func ID ( ID : bool , int : bool , ID : [ ] : ) { } func ID ( ID : int , ID ID int , ID : [ ] int ) { }",
  "func ID ( ID : int ) : [ ] [ true - ( ( ID - ) ) ID ] bool { } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] [ true - ( ( ] - ) ) ID ID bool { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ID [ false * true * ID ( ) [ ID ] [ false ] ] [ ] ] int { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ID [ false * int * ID ( ) [ ID ] [ false ] ] [ ] ] true { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ID [ false * int ID ID ( ) [ ID ] [ false ] ] [ ] ] true { } func * ( ) { }",
  "func ID ( ) { var ID : bool call var ID : [ ] [ ] int while ( ID ) { } { ID ( ) } if 123 { } }",
  "{ ID ( ) { var ID : bool call var ID : [ ] [ ] int while ( ID ) { } func ID ( ) } if 123 { } }",
  "{ : ( ) { var ID ID bool call var ID : [ ] [ ] int while ( ID ) { } func ID ( ) } if 123 { } }",
  "func ID ( ID int [ - - 123 / ( true / ID ( ) [ ID ] [ true ] * - true ) ] : ) { }",
  "func ID ( - int [ - ID 123 / ( true / ID ( ) [ ID ] [ true ] * - true ) ] : ) { }",
  "func ID ( - int [ - ID 123 / ( true / ID ( ) [ ID ] [ true true * - ] ) ] : ) { }",
  "func ID ( ID : [ ] * - false [ - ( true * - ( ( ID ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] * - false [ - ( func * - ( ( ID ) ) ) ] int ) { } true ID ( ) { }",
  "func ID ( ID : [ ] * - false [ - ( func * - ( ( ID ) ) ) ] int ) { } true ID ( ) { }",
  "{ ID ( ) func var ID : int return ID ( ) / true * ID ( false ) }",
  "{ ID ( ) func var ) : int return ID ( ID / true * ID ( false ) }",
  "{ ID ( ) func var ) : int ID ID ( ID / true * return ( false ) }",
  "func ID ( ) : [ * true ( - ID / ( - - ( ID ) ) * - true ) / ID ] int { } func ID ( ) { }",
  "func ID ( ) : [ * true ( - ID / ( - - ( ID ) ) * - true ) / ID ] int func } { ID ( ) { }",
  "func ID ( ) : [ * true ( - ID / ( - - ( ID / ) * - true ) ) ID ] int func } { ID ( ) { }",
  "func ID ( ) : [ - - - / ( 123 >= ID [ ID ] ) / true 123 ] int { } func ID ( ) { }",
  "func ID ( ) : [ - ID - / ( 123 >= ID [ ID ] ) / true 123 ] int { } func - ( ) { }",
  "func ID ( ) : - - ID - / ( 123 >= ID [ ID ] ) / true 123 ] int { } func [ ( ) { }",
  "func ID ( ) : [ 123 - - ID ] true - ID [ ( true ) ] [ ID ] - - - true ] + ( - ( ID ) ) ] [ [ [ ] [ ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : [ 123 - - ID ] true - ID [ ( true ) ] [ ID ] - - - true ] + ( - ( ID ) ) ] [ [ [ ] [ ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : [ 123 - - ID ] true - ID [ ( true ) ] [ ID ] - - - true ] + ( - ( ID ) ) ] [ [ [ ] [ ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : [ ] [ true ) ID ( ID ( + * true ) ] [ ] bool { }",
  "func ID ( ) : [ ID [ true ) ] ( ID ( + * true ) ] [ ] bool { }",
  "func ID ( true : [ ID [ true ) ] ( ID ( + * ) ) ] [ ] bool { }",
  "func ID ( ) { ID ID : int var ID : int { var var : [ ( ID ) ] int } }",
  "func ID ( ) { ID ID : int var ID : int } var var : [ ( ID ) ] int } {",
  "func ID ( ) { ID ID : int var ID : int } var var : [ ( ID ) ] { } int",
  "func ID ( ID : int ) { ( ID : bool ID [ var - - ID ( ) ) ] = ID }",
  "ID ID ( ID : int ) { ( func : bool ID [ var - - ID ( ) ) ] = ID }",
  "ID ID ( ID : int ) { ( func : bool ID ] var - - ID ( ) ) [ = ID }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ ID ( ID ( ( ) ) ) true ] int }",
  "func ID ( ID : bool , ID : bool ID { var ID : [ ID ( ) ( ( ) ) ) true ] int }",
  "func ID ( , : bool ID ID : bool ID { var ID : [ ID ( ) ( ( ) ) ) true ] int }",
  ") ID ( ID : [ ] [ ] int func { var ID : [ ] [ ] [ - - false ] int } func ID ( ) { }",
  ") ID ( ID ] [ : [ ] int func { var ID : [ ] [ ] [ - - false ] int } func ID ( ) { }",
  ") ID ( ID ] [ - [ ] int func { var ID : [ ] [ ] [ : - false ] int } func ID ( ) { }",
  "func ID ( ) { var ID : int ID ] - false + ( 123 * - 123 * true ) [ = 123 }",
  "( ID ( ) { var ID : int ID ] - false + func 123 * - 123 * true ) [ = 123 }",
  "{ ID ( ) ( var ID : int ID ] - false + func 123 * - 123 * true ) [ = 123 }",
  "func ID ( ) : [ ] bool { var ID : int print - ID [ true * [ 123 ) ] ( ( - ID ) ] } func ID ( ) { }",
  "func ID ( ) : [ ] ID { var ID : int print - bool [ true * [ 123 ) ] ( ( - ID ) ] } func ID ( ) { }",
  "func ID ( ) : [ ] ID { var ID : int print - bool [ true * [ 123 ) ] ( ( - ID ) { } func ID ( ) ] }",
  "func ID ) ) { var ID : int return ( ( - - ( ( 123 ) ( ) ) }",
  "func ID ) ) { var ID ) int return ( ( - - ( ( 123 : ( ) ) }",
  "{ ID ) ) func var ID ) int return ( ( - - ( ( 123 : ( ) ) }",
  "func ID ( ( : [ - false / false * - ID [ false / ) - 123 ) ] ] [ ] int { }",
  "func ID ( ( : [ - false / ID * - false [ false / ) - 123 ) ] ] [ ] int { }",
  "func - ( ( : [ - false / ID * - false [ false / ) ID 123 ) ] ] [ ] int { }",
  "[ ID ( ID : bool ) { var ID : bool var ID : int } func ID ( ID : [ - ID ( ) ] func ] [ ] int ) { }",
  "[ ID ( ID : bool ) { var ID : bool var ID : int } func ID ( ID : [ - ID ( ) ] } ] [ ] int ) { func",
  "[ ID ] ID : bool ) { var ID : bool var ID : int } func ID ( ID : [ - ID ( ) ] } ( [ ] int ) { func",
  "func ( ( ) { var ID : [ ] [ ] bool while - - ID - - ( 123 ) ) { } } func ID ( ) { }",
  "func ( : ) { var ID ( [ ] [ ] bool while - - ID - - ( 123 ) ) { } } func ID ( ) { }",
  "func ( : ) { var ID ( [ - [ ] bool while - - ID - ] ( 123 ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : int var ID : [ ] [ ] [ true ( - false ] [ ] int } func ID >= ) { }",
  "func ID ( ID : bool ) : bool { var ID : int var ID : [ ] [ ] [ true ( ) false ] [ ] int } func ID >= - { }",
  "func ID ( ID : bool ) : bool { var ID : int var ID true [ ] [ ] [ : ( ) false ] [ ] int } func ID >= - { }",
  "func ID ( ) { int func ID ( ) : } { var ID : bool if - 123 * ( ID ) / 123 { } }",
  "func ID ( ) { int func ID ( ) : } { var ID ( bool if - 123 * : ID ) / 123 { } }",
  "ID ID ( ) { int func ID ( ) : } { var ID ( bool if - 123 * : func ) / 123 { } }",
  "func ID ( ID : [ ID } ) [ ID ( ) [ ( ( - ( true ) ) ) ] ] [ ID ] ] bool ) { ( func ID ( ) { }",
  "func ID ( ID : [ ID } ) [ ID ( ) ( [ ( - ( true ) ) ) ] ] [ ID ] ] bool ) { ( func ID ( ) { }",
  "func ID ( ) { var ID : int var ID ( int if ID [ - - - ID ] [ : 123 ) ] { } while ID { } }",
  "func ID ( ) { var ID : int var ID ( int if ID [ - - - ID ] while : 123 ) ] { } [ ID { } }",
  "func ID ( ) { var ID : int var ID ( int if ID [ while - - ID ] - : 123 ) ] { } [ ID { } }",
  "func ID ( ID : int ) { } func ID ( ID : int , ID : [ ID ) ID ( ] int ) { }",
  "func ID ( ID : int ) int } func ID ( ID : int , ID : [ ID ) ID ( ] { ) { }",
  "func int ( ID : int ) ID } func ID ( ID : int , ID : [ ID ) ID ( ] { ) { }",
  "func ID ( ) { print ID ( ) [ ( false + ( ( - 123 ) ) ] ] [ - ID ) } func ID ( ) { }",
  "func ID ( ) { print ID ( ) [ ( false + ( ( - 123 ) ) ] ] [ - ID ) } func ID ( ) { }",
  "func ID ( ) { print ID ( ) [ ( false + ( ( - func ) ) ] ] [ - ID ) } 123 ID ( ) { }",
  "func ID ( ID - [ - - - ID [ ( ID ( - : ID ) ) ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID - [ [ - - ID - ( ID ( - : ID ) ) ] ] [ ] bool ) { } func ID ( ) { }",
  "func ( ID ID - [ [ - - ID - ( ID ( - : ID ) ) ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ] : int , ID : [ ] [ true * 123 + ID ( ) / ( ID ) * false - ( ( ( ( false ) ) ) ) ID int , ID : bool ) { }",
  "func ID ( ] ID int , : : [ ] [ true * 123 + ID ( ) / ( ID ) * false - ( ( ( ( false ) ) ) ) ID int , ID : bool ) { }",
  "func ID ( ] ID int , : : [ ] [ true * 123 + ID ) ( / ( ID ) * false - ( ( ( ( false ) ) ) ) ID int , ID : bool ) { }",
  ": ID ( ) func [ ] bool { return }",
  ") ID ( : func [ ] bool { return }",
  ") ID ( : func [ } bool { return ]",
  "func ID ( ] { var ID : [ ID [ ID [ ( - - - - 123 ) ] ) ] int }",
  "func ID ( ] { var ID : [ ID [ ( [ ID - - - - 123 ) ] ) ] int }",
  "func ID ( ] { var ID : [ ID [ ( [ ID - - - - 123 ) ] ) ] int }",
  "func ID ( ID : bool , ID { int , ID : int ) : ID = - false * - 123 >= ( ( true ) ) }",
  "func ID ( ID : bool , true { int , ID : int ) : ID = - false * - 123 >= ( ( ID ) ) }",
  "func ID ID ID : bool , true { int , ID : int ) : ( = - false * - 123 >= ( ( ID ) ) }",
  "func ID ( ) ( [ ] [ ID ( true / 123 > : ID ) ) ] bool { }",
  "[ ID ( ) ( func ] [ ID ( true / 123 > : ID ) ) ] bool { }",
  "[ ID ( ) ( func ] [ ID ( true / 123 > : ID ) ) ] bool { }",
  "func ID ( ) { var ID : : var ID int [ ] bool while false * ID [ 123 ] [ 123 ] / ( ( ID ) ) { } { } } func ID ( ) { }",
  "func ID ( ) { var ID : : var ID int [ ] bool while false * ID [ 123 ] [ 123 func / ( ( ID ) ) { } { } } ] ID ( ) { }",
  "func ID ( ) { var ID : : var ID int [ ] bool while false * ID [ 123 ] [ 123 func / ( ( ID ) ) { } { } } ] ID ( ) { }",
  "( ID func ) : [ false / true ] bool { var ID : int var ID : [ ID ] int }",
  "( ID func ) : [ false / true ] bool { var ID : int var ID : [ ] ID int }",
  "( ID func ) : [ false / true bool ] { var ID : int var ID : [ ] ID int }",
  "func ID ( ID : int , ID : [ ] int ) : [ 123 * ( true * ID * ID ) ] [ ] [ ] ) { } func ID ( bool { }",
  "func ID ( ID : int , ID : [ ] int ) : [ 123 * ( true * ID * ID ) ] [ ] [ ] ) { func } ID ( bool { }",
  "func ID ( ID : int , ID : [ ] int ) ID [ 123 * ( true * ID * : ) ] [ ] [ ] ) { func } ID ( bool { }",
  "func ID ( ID : int ID ID : int ) { var , : [ ID ( ) * - ID * - - ID ] bool }",
  "func ID ( ID : int ID ID : int - { var , : [ ID ( ) * - ID * - ) ID ] bool }",
  "func ID ( ID : int ID ID : ID - { var , : [ ID ( ) * - ID * - ) int ] bool }",
  "func ) ( ID : [ ( - false / ( - true / ID ( ) ) ID ] [ ] [ ] [ ] [ ] bool ) { }",
  "func ) ( ID : [ ( - false / ( ] true / ID ( ) ) ID ] [ ] [ - [ ] [ ] bool ) { }",
  "func ) ( ID : { ( - false / ( ] true / ID ( ) ) ID ] [ ] [ - [ ] [ ] bool ) [ }",
  "func ID : ID : int , ID : int ) { var ID : bool var ID ( [ false / ( ( ID ) ) ] bool }",
  "func ID : ID : : , ID int int ) { var ID : bool var ID ( [ false / ( ( ID ) ) ] bool }",
  "func ID int ID : : , ID int : ) { var ID : bool var ID ( [ false / ( ( ID ) ) ] bool }",
  "func ID ( ID : [ false ] ID ( ) <= ( ( ID ) ) * int ) { } func ID ( ) { }",
  "func ID ( ID : [ false ] ID { ) <= ( ( ID ) ) * int ) ( } func ID ( ) { }",
  "func ID ( ID : [ false ] ID { } <= ( ( ID ) ) * int ) ( ) func ID ( ) { }",
  "func ID ( ) : int { var ID : int ID [ { ( ID ( ) ) ] = ID } func ID ( ) ID }",
  "func ID ( ) : int { var ID : int ID ) { ( ID ( ) ) ] = ID } func ID ( [ ID }",
  "func ID ( ) : int { var ID : ( ID ) { int ID ( ) ) ] = ID } func ID ( [ ID }",
  "func ID ( ID : int , ID : [ - true ] ( ID [ true ] ) ] [ ] int , ID : [ - bool ) { }",
  "func ID ( ID : int , ID : [ - true ] ( ID [ true ] ) int [ ] ] , ID : [ - bool ) { }",
  "func ID ( ID ] int , ID : [ - true : ( ID [ true ] ) int [ ] ] , ID : [ - bool ) { }",
  "func ID ( ID : ) , ID : int , ID : [ ] bool ) { ID [ ( ID bool ] = ID if true { } }",
  "func ID ( ID : ) , ID : int , ID : { ] bool ) [ ID [ ( ID bool ] = ID if true { } }",
  "func ID ( ID : ) , ID : int , ID : { ) bool ] [ ID [ ( ID bool ] = ID if true { } }",
  "func ID ( ID : [ 123 / ID } - - - - - ID ( ) [ ID ] ] bool ) { /",
  "func ID ( ID : [ 123 / ID } - - - - - ID ( ) [ ID ] ] bool ) { /",
  "func ID { ID : [ 123 / ID } - - - - - ID ( ) [ ID ] ] bool ) ( /",
  "func ID ( ID : int : ) [ ( - ( ID [ ID ] [ - ID ] ) ) ] int { } func ID ( ) { }",
  "func ) ( ID : int : ID [ ( - ( ID [ ID ] [ - ID ] ) ) ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int var ID ID int : [ ( false and ( - ID ) ) ] = ID ID = ( ID ) }",
  "func ID ( ) { var ID : [ ] ID var ID ID int : [ ( false and ( - int ) ) ] = ID ID = ( ID ) }",
  "func ID ( ) { var ID : [ ] ID int ID ID int : [ ( false and ( - var ) ) ] = ID ID = ( ID ) }",
  "func ID ( ) : int { var ID ] [ ] [ ID ( ( ( false ) ) ) : bool }",
  "func ID ( ) : int { var ID ] [ ) [ ID ( ( ( false ] ) ) : bool }",
  "func ( ( ) : int { var ID ] [ ) [ ID ID ( ( false ] ) ) : bool }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : [ ] int { var ID : bool return ID : int var 123 } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : ID ) : [ ] int { var ID : bool return ID : int var 123 } func bool ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : ID ) : [ ] int { var ID : bool return ID : int var 123 } func bool ( ) { }",
  "func ID ( ) : [ true - ID [ ( true / false ] ] [ ID ] + ( ( - ( ( true ) ) ) ) ] [ ] [ ] [ ] [ ) int { }",
  "func ID ( ) : [ true - ID [ ( true / true ] ] [ ID ] + ( ( - ( ( false ) ) ) ) ] [ ] [ ] [ ] [ ) int { }",
  "func ID ( ) : [ true - ID [ ( true / true ] ] [ ID ] + ( ( - ) ( false ) ) ) ( ] [ ] [ ] [ ] [ ) int { }",
  "func ID ( ID : [ ] int , ID : [ - - ID [ false * ( - - ( - ID ) ) ] ] int , ID : bool ) ( } func ID { ) { }",
  "func ID ( ID : [ ] int , ID : [ - { ID [ false * ( - - ( - ID ) ) ] ] int , ID : bool ) ( } func ID { ) - }",
  "func ID ( ID : ID ] int , [ : [ - { ID [ false * ( - - ( - ID ) ) ] ] int , ID : bool ) ( } func ID { ) - }",
  "func ID ( ID : [ ID [ ID / - 123 [ - ID ] ] ] int ) { }",
  "[ ID ( ID : [ ID [ ID / - 123 func - ID ] ] ] int ) { }",
  "[ ID ( ID : [ ID [ ID / - ) func - ID ] ] ] int 123 { }",
  "func ID ( ) : int { var ID : bool print ID ( ( ( 123 } ) ) } func ID ( ) { )",
  "func ID ( ) : int { var ID : bool print ID ( ( ( 123 } ) ) } func ID ( ) { )",
  "func ID ( ) : int { ) ID : bool print ID ( ( ( 123 } var ) } func ID ( ) { )",
  "func ID ( ) : [ ( - ( ] [ true * false / - - ( ( 123 ) ) ID ) ) ] int { } func ID ( ) { }",
  "func ID ( ) : [ ( - ( ] [ true * int / - - ( ( 123 ) ) ID ) ) ] false { } func ID ( ) { }",
  "func ID ( ) : [ ( - ( ] [ true * int 123 - - ( ( / ) ) ID ) ) ] false { } func ID ( ) { }",
  "func ID ( ID : int ) { ID var : int var ID : bool print - ( false * - ID / - - ID ) }",
  "func ID ( ID : int ID { ) var : int var ID : bool print - ( false * - ID / - - ID ) }",
  "func ID ( ID : int bool { ) var : int var ID : ID print - ( false * - ID / - - ID ) }",
  "func ID ( ) : [ ( true / ID ( ) [ } ID ( ) ] [ ID ] ) ] bool { - func ID ( ) { }",
  "func ID ( ) : [ ( true / ID ( ) [ } ID ( ) ] [ ID ] ) ] bool { - func ID ( ) { }",
  "func ID ( ] : [ ( true / ID ( ) [ } ID ( ) ] [ ID ] ) ) bool { - func ID ( ) { }",
  "func ID ( ) { ) - - 123 / ID ( return / ( ID ( ) ) }",
  "func ID ( ) { ) - - 123 / ID ( return / ( ID ( ) } )",
  "func ID ( ) { ) - - 123 ID / ( return / ( ID ( ) } )",
  "func ID ( ID : [ - true - [ - - ID false 123 == ( ID ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ - true - [ - - ID false 123 == ( ID ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ - true - [ - - ID false 123 ( == ID ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) { bool : var ID : int if ( ( ( ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ) { ) : var ID : int if ( ( ( ID ) ) ) { } } func ID ( bool { }",
  "func ID ( ) { ) : var ID : int if ) ( ( ID ) ) ( { } } func ID ( bool { }",
  ") ID ( ID : [ ] [ ] [ - ( 123 - ID ( ID ) func ] int ) { }",
  ") ID ( ID : [ ] [ ) [ - ( 123 - ID ( ID ) func ] int ] { }",
  ") ID ( ID : [ ] [ - [ ) ( 123 - ID ( ID ) func ] int ] { }",
  "func ID ( ID : [ - true / ( ( true * ID ( - - ID ) ) ] int ) { } func ID ID ) { }",
  "func ID ( ID : int - true / ( ( true * ID ( - - ID ) ) ] [ ) { } func ID ID ) { }",
  "func ID ( ID : int - true / ( ( true * ID ( - ID ID ) ) ] [ ) { } func ID - ) { }",
  "func ID [ ) { return ID ( ) ( ID [ true / ( true ) / ( - ( ( ( - ID ) ) ) ) ] ] }",
  "func ID [ ) { return ID ( ) ( ID [ true / ( true ) / ( - ( ( ( - ID ) ) ) ) ] ] }",
  "func ID [ ) { return ID ( ) ( ID [ true / ( true ) / ( - ( ( ( - ID ) ) ) ) ] ] }",
  "func ID ( ) : int { return - ID ( ) [ true * ID ( ) [ } ] [ ID ] * ( false ) ] [ true ] ID",
  "func ID ( ) : int { return - ID ( ) [ true * ID ( ] [ } ] [ ID ) * ( false ) ] [ true ] ID",
  "func ID ( ID : bool , ID : [ ] bool , ID : ( ) : int { var ID : [ ] int } func ID int ) : int { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : ( ) : int { var ID : [ ] int } : ID int ) func int { }",
  "func ID ( ID : bool , ID : int ] bool , ID : ( ) : [ { var ID : [ ] int } : ID int ) func int { }",
  "func ID ( ID : [ ID ( false / ( true * false + true - false { * ( ID ) ) ] [ ] int ) ) }",
  "func ID ( ID : - ID ( false / ( true * false + true [ false { * ( ID ) ) ] [ ] int ) ) }",
  ") ID ( ID : [ true * - false and ( 123 / - ID / ID ) ] bool func { }",
  ") ID ( ID : [ func * - false and ( 123 / - ID / ID ) ] bool true { }",
  ") ID ( ID : [ func * - false 123 ( and / - ID / ID ) ] bool true { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : bool false { var ID : int print - ) * - - - false }",
  "false ID ( ID : bool , ID : [ ] bool , ID : bool func { var ID : int print - ) * - - - false }",
  "false ID ( , : bool , ID : [ ] bool ID ID : bool func { var ID : int print - ) * - - - false }",
  "func ID ( ) { var ID : [ ] bool ID } func ID ( return : [ ] int , ID : int ) : [ ] int { }",
  "func ID ( ) { var ID : [ ] bool ID } func ID ( return : [ ] int , ID : int ) : ] [ int { }",
  "( ID func ) { var ID : [ ] bool ID } func ID ( return : [ ] int , ID : int ) : ] [ int { }",
  "func ID ( ) : int ) var ID : bool return } func ID ( { : int { ID = true * - ID * true }",
  "= ID ( ) : int ) var ID : bool return } func ID ( { : int { ID func true * - ID * true }",
  "int ID ( ) : int ) var ID : bool return } func ID ( { : = { ID func true * - ID * true }",
  "func ID ( ID : bool ) : int { int ID : [ ID [ ( ID ) ] ] [ ] var }",
  "func ID ( ID : bool ) : int { int ID : [ ID [ ( ID ) ] ] [ ] } var",
  "func ID ( ID : bool ) : int { int ID : [ ID [ ( ID ) ] ] var ] } [",
  "func ID ( ID : bool , ID : int , ID : int ) { if - ( 123 + ID ) { } ) func ID ( } { }",
  "func ID ( ID : bool , ID : int , ID : int ) { if ID ( 123 + - ) { } ) func ID ( } { }",
  "func ID ( ID : bool , ID : int , ID : int ) { if ID ( - + 123 ) { } ) func ID ( } { }",
  "func ID ( ) : [ - ID ( ] [ - ( ID * ID * ID ) ] [ - 123 ] ) bool { }",
  "func ID ( ) bool [ - ID ( ] [ - ( ID * ID * ID ) ] [ - 123 ] ) : { }",
  "func ID ( ) bool [ - ID ( ] [ - ( ID * ID * ID ) ] [ - ) ] 123 : { }",
  "func ID ( ID : bool ) : [ ] bool false var ID : int if true / { - ( ID ) { } { } }",
  "func ID ( ID : bool ) : [ ] bool false var ID : ( if true / { - int ID ) { } { } }",
  "func ID ( ID : bool ) : [ ] bool false var ID : ( if true / { - int { ) ID } { } }",
  "func ID ( ID : [ ( 123 * ( false * ( true ) * false ) * - } ) ] bool ) { false func ID ( ) { }",
  "func ID ( ID : [ ] 123 * ( false * ( true ) * false ) * - } ) ( bool ) { false func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : 123 true * ( - ID / 123 * ID ) * ( ( ( [ ) ) ) ] bool var ID : bool }",
  "func ID ( ID : bool ) { var ID ( 123 true * ( - ID / 123 * ID ) * ( : ( [ ) ) ) ] bool var ID : bool }",
  "func ID ( ) : bool { - - - false + - true * print ID ( - - - ID ) * ID + ID }",
  "func ID ( ID : bool { - - - false + - true * print ) ( - - - ID ) * ID + ID }",
  "func ID ( ID : bool { - - - false + - true * print ) ( - - - ID ) * ID + ID }",
  ") ID ( ID : [ ID ( ) / 123 * ID ( func < ID [ ID ] [ - false ] ] [ ] bool ) { }",
  "/ ID ( ID : [ ID ( ) ) 123 * ID ( func < ID [ ID ] [ - false ] ] [ ] bool ) { }",
  "/ ID ( ID : [ ID ( ) ) 123 * ID ( func < ID [ ID ] [ ) false ] ] [ ] bool - { }",
  "false ID ( ) { return - ID [ - true + ID [ ( func ) ] [ ID ] ] [ ID ] }",
  "func ID false ) { return - ID [ - true + ID [ ( ( ) ] [ ID ] ] [ ID ] }",
  "func ID ( ) { var ID ID [ ID + true * - - true - ID [ ID ] [ - - - : ] ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID ID [ ID + true * - - true - ID [ ] ID [ - - - : ] ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID ID [ ID + true * - - true - ID [ ] ID [ - - - : ] ] [ ] bool } func } ( ) { ID",
  ") ID ( ID : bool , ID : [ - ID [ ID ( ) or ID or ID ] [ ( ( ( 123 ) func ) ] ] bool , ID : int ) { } func ID ( ) { }",
  ") ID ( ID : bool , ID : [ ( ID [ ID - ) or ID or ID ] [ ( ( ( 123 ) func ) ] ] bool , ID : int ) { } func ID ( ) { }",
  ") ID } ID : bool , ID : [ ( ID [ ID - ) or ID or ID ] [ ( ( ( 123 ) func ) ] ] bool , ID : int ) { } func ID ( ) { (",
  "func ID ( ID : int , ID : bool ) : bool { var ID : int var ID : [ ( - bool ) ] true }",
  "func ID ( ID : int , ID : bool ) ( bool { var ID : int var ID : [ : - bool ) ] true }",
  "func ID ( ID : int , ID : bool ( ) bool { var ID : int var ID : [ : - bool ) ] true }",
  "func ID ( ID : bool [ : ) ] [ ] bool { }",
  "func ID bool ID : bool [ : ) ] [ ] ( { }",
  "func ID ( ID : ) ] int ) { call ID ( [ call ID ( ) } func ID ( ) : [ ] bool { }",
  "func ID ( ID : ) ] int ) { call ID ( [ call } ( ) ID func ID ( ) : [ ] bool { }",
  "func : ( ID ID ) ] int ) { call ID ( [ call } ( ) ID func ID ( ) : [ ] bool { }",
  "int ID ( ) { var ID : int { var ID : int { var ID : func print 123 / false * ( ( ID ) ) } } }",
  "int ID ( ) { var ID : int { ) ID : int { var ID : func print 123 / false * ( ( ID var ) } } }",
  "int ID ( ) : var ID : int { ) ID : int { var ID { func print 123 / false * ( ( ID var ) } } }",
  "func ID ( ID : bool ) : ] true + ID [ 123 - false / - ( false ) / - 123 ] [ true [ ] int { } func ID ( ) { }",
  "func ID - ID : bool ) : ] true + ID [ 123 - false / - ( false ) / ( 123 ] [ true [ ] int { } func ID ( ) { }",
  "func ID ( ID : int , ] : [ ( - - 123 * ( ( - - ID ) ) * 123 ) ID bool , ID : int ) { }",
  ") ID ( ID : int , ] : [ ( - - 123 * ( ( - - ID ) ) * 123 ) ID bool , ID : int func { }",
  ") ID ( ID : int , ] : [ ( - - 123 * ( ( - - ID ) ) * 123 ) ID bool , ID : int func { }",
  "func ID ( ) { ] } func ID ( ) : [ ID [ - 123 * ID * false ] return bool { }",
  "func ID ( ) { ] } func ID [ ) : ( ID [ - 123 * ID * false ] return bool { }",
  "func ( ID ) { ] } func ID [ ) : ( ID [ - 123 * ID * false ] return bool { }",
  "func ID ( ) : [ - ( false / - ID ( ) [ - - ( false } ] [ ( ( ID ) ) ] ) ] int { )",
  "func ID ( ) : [ - ( false / - ID ( ) [ - - ( ) } ] [ ( ( ID ) ) ] false ] int { )",
  "func ID ( ) : [ - ( false / - - ( ) [ - ID ( ) } ] [ ( ( ID ) ) ] false ] int { )",
  "func ID ( ) : bool : var ID : int var ID { [ ] bool return ( ID ( ) [ - ID ] ) } func ID ( ) { }",
  "func ID ( ) : bool : var ID : int var ID ( [ ] bool return ( ID { ) [ - ID ] ) } func ID ( ) { }",
  "func ID ( ) : bool : var ID : int var ID ( [ ] bool } ( ID { ) [ - ID ] ) } func ID ( ) { return",
  "func ID ( ) { if ( - - true + ( ID [ 123 ] [ - ( 123 ) ) ] ) { } print - ID } func ID ( ) { }",
  "func ID ( ) { if ( - - true + ( ID [ 123 ] [ - ( 123 ) ) ] ) } } print - ID } func ID ( ) { {",
  "func ID ( ) { if ( - - ID + ( ID [ 123 ] [ - ( 123 ) ) ] ) } } print - ID } func true ( ) { {",
  "func ID ] ID : [ ID [ ( - ( true / ID / - ID ) ) ] [ - true ] ( [ ] bool ) { }",
  "func ID ] ID : [ ID / ( - ( true [ ID / - ID ) ) ] [ - true ] ( [ ] bool ) { }",
  "func ID ] ID : [ ID / ( - ( true [ ID - - ID ) ) ] [ / true ] ( [ ] bool ) { }",
  "func ID ( ID : bool , ID : bool ) { } func ID ( ID : int , : : bool ) { var ID ID bool var ID : int }",
  "func ID ID ID : bool , ID : bool ) { } func ( ( ID : int , : : bool ) { var ID ID bool var ID : int }",
  "func ID ID ID : bool , ID : bool ) { } func ( ( ID : int , : : bool ) { ID ID var bool var ID : int }",
  "func ID ( ) : bool { var ID : ( var ID : bool call ID ( ) if ( ( ( int ID ) ) ) ) { } }",
  "func ID ( ) ) bool { var ID : ( var ID : bool call ID ( ) if ( ( ( int ID ) ) ) : { } }",
  "func ID ( ) ) bool { var ID : ( var ID : bool call ID ( ) if ( ( ( int ID ) ) ) } { : }",
  "func ID ( ID : bool ) ) var ID : bool if ( ( - - - ( 123 { ) ) { } }",
  "func ID ( ID : bool ) ) var ID : bool if ( ( - - - { 123 { ) ) ( } }",
  "func ) ( ID : bool ) ID var ID : bool if ( ( - - - { 123 { ) ) ( } }",
  "func ID ( ID : [ ] [ - false == ID ( ) [ ID [ ID ] ] [ true ] ] [ ] int ) { } } ID ( ) { func",
  "ID func ( ID : [ ] [ - false == ID ( ) [ ID [ ID ] ] [ true ] ] [ ] int ) { } } ID ( ) { func",
  "func ID ( ) { return } func ID ( ) : int { { } ( 123 ) { print } call ID ( ) }",
  "func { ( ) { return } func ID ( ) : int { ID } ( 123 ) { print } call ID ( ) }",
  "func { ( ) { return } func ( ( ) : int { ID } ID 123 ) { print } call ID ( ) }",
  "func ID ( ID : int , ID : [ ] bool , ID : [ ] int ) : int { var ID : bool ID var : bool if ID { } }",
  "func ID ( ID : int , ) : [ ] bool , ID : [ ] int ID : int { var ID : bool ID var : bool if ID { } }",
  "func ID ( ID : int , ) : [ ] bool , ID : [ ] int ID ID int { var ID : bool : var : bool if ID { } }",
  "func ID ( bool : [ ] ID , ID : bool ) { print false * ID ( - true ) * ID { } }",
  "func ID ( bool : [ ] } , ID : bool ) { print false * ID ( - true ) * ID { ID }",
  "func ID ( bool : [ ] } , ID : bool ) { print false * ID ( ID true ) * - { ID }",
  "func ID ( ) : ] ID ( ) + - true / - false - ( ( ( ID ) ) ) [ bool { } func ID ( ) { }",
  "func ID ( ) : ] ID ID ) + - true / - false - ( ( ( ( ) ) ) [ bool { } func ID ( ) { }",
  "func ID ( - : ] ID ID ) + ) true / - false - ( ( ( ( ) ) ) [ bool { } func ID ( ) { }",
  "func ID ( ) { var ID : - print - ID * ID / int ( 123 ) print ( - ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : - print - ID * ID / int ( 123 } print ( - ID ) } func ID ( ) { )",
  "func ID ( ) { var } : - print - ID * ID / int ( 123 } print ( - ID ) ID func ID ( ) { )",
  "func ID [ ID : int , ID : bool , ID : bool ) { var ID : ( ( ( ( ( ( true ) ) ) ) ) ] int } func ID ( ) { }",
  "func ID [ ID : int , ID : bool , ID : bool ) { var ID : ( ( ( ( ( ( true { ) ) ) ) ] int } func ID ( ) ) }",
  "func ID [ ID : int , ID : bool ) ID : bool ) { var ID : ( ( ( ( ( ( true { ) ) ) ) ] int } func ID ( ) , }",
  "func ID ( ID : [ ID ( 123 < ID / - ID ( ) ) ] ) int { }",
  "func ID - ID : [ ID ( 123 < ID / ( ID ( ) ) ] ) int { }",
  "func ID - ID : [ ID ( 123 < ID / ( ID ) ( ) ] ) int { }",
  "func [ ( ) : ID - ID ( ) * ( ID ( 123 ) ) ] int { } func ID ( ) { }",
  "func [ ( ) : ID - ID ( ) * 123 ID ( ( ) ) ] int { } func ID ( ) { }",
  "func [ ( ) ID ID - ID ( ) * 123 : ( ( ) ) ] int { } func ID ( ) { }",
  "func ID ( ) : int ) { while - ( ( true and ID and false ID ) { } } func ID ( ) { }",
  "func ID ( ) : int ) { while - ( ( true and ID and ( ID ) { } } func ID false ) { }",
  "func ID ( ) : int ) { while - ( ( true and ) and ( ID ) { } } func ID false ID { }",
  "func ID ( ) { var ID func [ ( ID [ - ID / ID * ID ] ) ] [ ] [ ] int } : ID ( ) { }",
  "func ID ( ) { var ID func [ ( ID [ - ID : ID * ID ] ) ] [ ] [ ] int } / ID ( ) { }",
  "func ID ( ID 123 [ false + 123 * true >= : and - ( - - ID ) ] [ ] int ) { }",
  "func ID ( ID 123 [ false + 123 * true - : and - ( >= - ID ) ] [ ] int ) { }",
  "func ID ( >= 123 [ false + 123 * true - : and - ( ID - ID ) ] [ ] int ) { }",
  "func ID ( ID : [ true ] bool ID { var ID : int var ) : [ ] int return ID }",
  "func ID ( ID : ID true ] bool ID { var [ : int var ) : [ ] int return ID }",
  "{ ID ( ID : ID true ] bool ID func var [ : int var ) : [ ] int return ID }",
  "func ID ( ) : bool { while - ID [ - ID ( - ID ) ] [ ) ] { } print - - ( - - false ) } func ID ( ID { }",
  "func ID ( ) : bool { while - ID [ - ID ( - ID ) ] [ } ] { ) print - - ( - - false ) } func ID ( ID { }",
  "func ID ( ) : bool { while - ID [ - } ( - ID ) ] [ } ] { ) print - - ( - - false ) ID func ID ( ID { }",
  "func ID func ) { var ID : [ ] bool var ID : int ID ( - ( ( ( ID ) ) ) ) = ID ID = 123 } ( ID ( ) { }",
  "( ID func ) { var ID : [ ] bool var ID : int ID ( - ( ( ( ID ) ) ) ) = ID ID = 123 } func ID ( ) { }",
  "( ID func ) { var ID : [ ] bool var ID : int ID ( - ( ( ( ID ) ) ) ) = ID ID = ID } func 123 ( ) { }",
  "func false ( ID : int ) : int { while - ID [ ID ( ) [ ID ] ] [ 123 ] { } while ID { } } func ID ( ) { }",
  "func false ( ID : int ) : int { while - ID [ ID ( ) [ [ ] ] ID 123 ] { } while ID { } } func ID ( ) { }",
  "func false ( ID : int ) : int { while - ID [ ID ( ) [ [ ] ] ID 123 ] { } while ID { } } func ID ( ) { }",
  "func ID ( ) : [ ID ( ) - - ( - ID [ ID ] ) ] bool { } func } ( ) { ID",
  "func ID ( ) : [ ID ( ) - - ( - ID [ ID ] ) ] bool { } func } ( ) { ID",
  "func ID ( ) ID [ ID ( ) - - ( - ID [ ID ] ) ] bool { } func } ( ) { :",
  "func ID ( ) : bool { if - ID [ ID [ - - 123 ] ] ( ID ) ] ] [ ID [ { } }",
  "func ID ( ) : bool { if - ID [ ID [ - - 123 ] ] ( ID ) ] ] [ [ ID { } }",
  "] ID ( ) : bool { if - ID [ ID [ - - 123 func ] ( ID ) ] ] [ [ ID { } }",
  "func ID ( ) { { var ID : int print true and true * / 123 ) ( - - false ID = - true } while ( true ) { } }",
  "func ID ( ) { print var ID : int { true and true * / 123 ) ( - - false ID = - true } while ( true ) { } }",
  "func ID ( ) { print var ID : int { true and true * / 123 ) ( - ID false - = - true } while ( true ) { } }",
  "func ID ( ID : [ ] [ ID ( - { false * false ) ) ] [ ] int ) ( } func ID ( ) { }",
  "func { ( ID : [ ] [ ID ( - { false * false ) ) ] [ ] int ) ( } func ID ( ) ID }",
  "func { ( : ID [ ] [ ID ( - { false * false ) ) ] [ ] int ) ( } func ID ( ) ID }",
  "func ID ( ) : [ { var ID : [ ( ( - 123 + - ( ( true ) ) - ( true ) ) ) ] [ ] [ ] [ ] bool var ID : int ] [ ] [ ] int }",
  "func ID ( ) : [ { var ID : [ ( ( - 123 + - ( ( true ) ) : ( true ) ) ) ] [ ] [ ] [ ] bool var ID - int ] [ ] [ ] int }",
  "func ID ( ) : [ { var ID : [ ( ( - 123 + - ( ( true ) ) : ( true ) ) [ ] [ ] [ ] [ ] bool var ID - int ] [ ] ) ] int }",
  "func ID ( ) { var ID : bool var ID : [ ID / ] ( false or false ) * ( ID ) ] [ - int } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ID / ] ( false or false ) * ( ID ) ID [ - int } func ] ( ) { }",
  "func ID ( [ { var ID : bool var ID : [ ID / ] ( false or false ) * ( ID ) ID ) - int } func ] ( ) { }",
  "func ID ( ) { var ID : int var ID int [ ] : if false / ( - true ) * - 123 { } call ID ( ) }",
  "func ID ( ) { var ID : int var ID int [ ] : if false / ( - true ID * - 123 { } call ) ( ) }",
  "func ID [ ) { var ID : int var ID int ( ] : if false / ( - true ID * - 123 { } call ) ( ) }",
  "func ID ( ( { ID ( ) [ - true * 123 + - ID ) ( false ) ) ] [ ID ] = true print ( - ID ) }",
  "func ID ( ( { * ( ) [ - true ID 123 + - ID ) ( false ) ) ] [ ID ] = true print ( - ID ) }",
  "func ID ID ( { * ( ) [ - true ID 123 + - ( ) ( false ) ) ] [ ID ] = true print ( - ID ) }",
  "func ID ( } : int , ID : bool , ID : bool ) { var ID : int return ID",
  "func ID ( } : int , ID : bool , ID : ID ) { var bool : int return ID",
  "func ID ( } : int , ID : bool int ID : ID ) { var bool : , return ID",
  "while ID ( ID : int , ID : bool , ID : int ) : [ ] int { var ID : bool var ID : bool { var ID : bool } func - ( true ) { } } func ID ( ) { }",
  "while ID ( ID var int , ID : bool , ID : int ) : [ ] int { : ID : bool var ID : bool { var ID : bool } func - ( true ) { } } func ID ( ) { }",
  "while ID ( ID var int , ID : bool , ID : int ) : [ ] int { : ID : bool var ID : bool { bool ID : var } func - ( true ) { } } func ID ( ) { }",
  "func ID ( ID : [ ID / ID [ ( - - false ) } [ ( ID ) ] ] bool ) { } func ID ( ) { ]",
  "func ID ( ID : [ ID / ID ) ( - - false [ } [ ( ID ) ] ] bool ) { } func ID ( ) { ]",
  "func ID ( ID : [ ID / ID ] ( - - false [ } [ ( ID ) ) ] bool ) { } func ID ( ) { ]",
  "func ID ( ID { print false / ) [ false / false > - ID ] } func ID ( ) { }",
  "func ID ( ID { print false / ) [ false / false > ID - ] } func ID ( ) { }",
  "func ID ( ID { print ) / false [ false / false > ID - ] } func ID ( ) { }",
  "func ID ( 123 { print - - true / - - ID ( ) [ true / ID / ( - ( true ) ) ] [ ) ] } func ID ( ) { }",
  "func ID ( 123 - print - - true / - - ID ( ) [ true / ID / ( { ( true ) ) ] [ ) ] } func ID ( ) { }",
  "func ID ( 123 - print - [ true / - - ID ( ) [ true / ID / ( { ( true ) ) ] - ) ] } func ID ( ) { }",
  "func ID ( ) : ( { } func ID int ) { var ID : [ ID ( - ID ) ] int var ID : bool }",
  "func ID ( ) : ( { } func ID int ) { var [ : ID ID ( - ID ) ] int var ID : bool }",
  "func ID ( ) : ( { } func ID int ) { var [ : ID ID ( - ID ) ] int var ID : bool }",
  "ID func ( ID : int ) : int { var ID : int }",
  "ID func ( ID : int ) : int : var ID { int }",
  "ID func ( ID : int ) : int : var ID { int }",
  "false ID ( ) { var ID : [ ID ( ) / false / ID ( ( func ) ) ] [ ] [ ] [ ] [ ] bool }",
  "false } ( ) { var ID : [ ID ( ) / false / ID ( ( func ) ) ] [ ] [ ] [ ] [ ] bool ID",
  "false } ( ) { var ID : ] ID ( ) / false / ID ( ( func ) ) ] [ ] [ ] [ [ [ ] bool ID",
  "func ID ( ) : [ ] bool { while true { ID ( - - ID ) { } if true { } } func ID ( ) - }",
  "func ID ( ID : int , ID : [ ] ] - ID [ 123 - ( false ) + - ( false ) ] [ 123 [ ] [ ] bool ) { }",
  "func ID + ID : int , ID : [ ] ] - ID [ 123 - ( false ) ( - ( false ) ] [ 123 [ ] [ ] bool ) { }",
  "func ID + ID : int , ID : [ ] ] - ID [ 123 - ( false ) ( [ ( false ) ] [ 123 [ ] - ] bool ) { }",
  "func ID ( } : int { { var ID : [ ] [ ] int { var ID : int var ID : bool while 123 { } } ) } func ID ( ) { }",
  "func { ( } : int ID { var ID : [ ] [ ] int { var ID : int var ID : bool while 123 { } } ) } func ID ( ) { }",
  "func { ( } : int ID { var ID : [ ID [ ] int { var ] : int var ID : bool while 123 { } } ) } func ID ( ) { }",
  "func ID ( : : int ) : [ ] bool { var ID : bool var ID ID int ID ( ) = ( - ID ) if - ID { } } func ID ( ) { }",
  "func ID ( : : int ) : [ ] bool { var ID : bool var ID ID int ID ( ) if ( - ID ) = - ID { } } func ID ( ) { }",
  "func ID ( : : int ) : [ ] bool { var ID : bool var ID ID int ID ( ) if ( - func ) = - ID { } } ID ID ( ) { }",
  "func ID ( : : int { var ID ) bool ID ( ) [ ( ( ID ) ) ] = - ID print ID }",
  "func ID ( : : int ) var ID ) bool ID ( ) [ ( ( ID { ) ] = - ID print ID }",
  "func ID ( : : int ) var ID ) bool ID ) ) [ ( ( ID { ( ] = - ID print ID }",
  "func ID ( ID : bool ) : [ { var ID : [ false / ( false * 123 ) ] bool ] bool var ID : int }",
  "func ID ( ID : bool ) : [ { var ID : [ false / ( false 123 * ) ] bool ] bool var ID : int }",
  "func ID ( ID : bool ) : [ { var ID : [ false / ( false 123 * ) ] bool ] bool var ID : int }",
  "func ID ( ) : bool { var ID : int var ID : / if - - 123 bool ID [ ID ] [ - 123 ] { } }",
  "func ID ( ) : bool { ID ID : int var ID : / if - - 123 bool ID [ var ] [ - 123 ] { } }",
  "func ID ( ) { bool : ID ID : int var ID : / if - - 123 bool ID [ var ] [ - 123 ] { } }",
  "func ID ( ) { if ID [ 123 * ID ( [ [ ID ] [ ID ] ] ) true ] { } }",
  "func ID ( ) { if ID [ 123 ID ID ( [ [ ID ] [ * ] ] ) true ] { } }",
  "func ID ( ) { if ID [ 123 ID [ ( [ [ ID ] ID * ] ] ) true ] { } }",
  "func ID ( ID : bool ) { var ID : bool var ( : int call ID ID ) return }",
  "func ID ( ID : bool ) { var ID : ID var ( : int call ID bool ) return }",
  "func ID ( ID : int ) { var ID : ) while 123 - - 123 * ID ( bool [ 123 ] [ true ] + 123 { } call ID ( ) } func ID ( ) { }",
  "call ID ( ID : int ) { var ID : ) while 123 - - 123 * ID ( bool [ 123 ] [ true ] + 123 { } func ID ( ) } func ID ( ) { }",
  "call ID ( ID : int ) { var ID : ) while 123 - - 123 * ID ( bool ] 123 ] [ true [ + 123 { } func ID ( ) } func ID ( ) { }",
  "func ID ( ) var int { var ID : [ ] bool : ID : [ - - ID [ ( false ) ] ] bool } func ID ( ) { }",
  "func ID ( ) var int { var ID : [ ] bool : ID : [ - - ID ] ( false ) ] [ bool } func ID ( ) { }",
  "func ID false ) var int { var ID : [ ] bool : ID : [ - - ID ] ( ( ) ] [ bool } func ID ( ) { }",
  "func ID ( ID : : , ID bool bool , ID : [ ] [ ] bool ) : bool { var ID : bool var ID : bool while ID { } }",
  "func ID ( ID : : , ID bool bool , ID : [ : [ ] bool ) : bool { var ID ] bool var ID : bool while ID { } }",
  "func ID ( ) { call ID ( true and - / ID * ID - false ID - 123 ) while ID { } }",
  "func ID ( ) { call ID ID true and false / ID * ID - - ID - 123 ) while ( { } }",
  "func ID ( ID : bool ) : [ ] bool { ID ( ID [ ) ( 123 ) ] [ 123 ] - = true { } }",
  "func ID ( ID : bool ] : [ ] bool { ID ( ID [ ) ( 123 ) ) [ 123 ] - = true { } }",
  "func ID ( ID : bool ] : [ ] bool { ID ( ID [ 123 ( ) ) ) [ 123 ] - = true { } }",
  "func ID ( ) { var ID : { while ( - true - - - ID [ 123 ] ) bool } } func ID ( ) { }",
  "func ID ( ) { var ID : { while ( - true - - - ID [ 123 } ) bool ] } func ID ( ) { }",
  "func ID ( ) ( var ID : { while ( - true - - - ID [ 123 } ) bool ] } func ID { ) { }",
  "func ID ( print : bool ) { var ID : int ID ( true > - ( false ) ) }",
  "func ID ( print : bool ) { var ID : int ID ( true > ( - false ) ) }",
  "func ( ( ) { { var ID : int ID ID ) [ ( ID ( ) ) ] = ID } }",
  "func ( ( ) { { var ID : int ID ID ) [ ( ID ( ) ) ] = } ID }",
  "func ( ( ) ID { var ID : int ID { ) [ ( ID ( ) ) ] = } ID }",
  "func ID ( ) : int { var ID : int ID [ ( 123 ID - ID [ ( ( ID ) ) ] ) ] [ ( - / ) ] = ( false ) { } }",
  "func ) ( ID : int , ID : [ ] [ ( ID ( ( ID ) ) ) ] bool ID { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ( ID ( ( ID ) ) ) ] bool ID { } func ) ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ( ID ( ( ID ) ) ) bool ] ID { } func ) ( ) { }",
  "func ID ( ) : [ ] print { { var ID : int var ID : bool return } int ID ( ) }",
  "func ID } ) : [ ] print { { var ID : int var ID : bool return } int ID ( ) (",
  "func ID } ) : [ ] print { int var ID : { var ID : bool return } int ID ( ) (",
  "func ID ( ID : bool , ID : [ ] [ ] [ , [ ] bool ] ID : bool ) { var ID : [ ID ] int var ID : bool }",
  "func ID ( ID : [ , ID : [ ] bool ] [ , [ ] bool ] ID : bool ) { var ID : [ ID ] int var ID : bool }",
  "func ID ( ID : [ , ID : [ ] bool ] [ , [ ] bool ] ID : bool ) { var ID : [ ID ] int var ID : bool }",
  "func ID ( ID : bool , ID [ : - ( ID ( ) [ true * ID * ID ] [ ( ID ) ] ) ] int ) { }",
  "func ID ( [ : bool , ID ID : - ( ID ( ) [ true * ID * ID ] [ ( ID ) ] ) ] int ) { }",
  "func ID ( [ ( bool , ID ID : - ( ID : ) [ true * ID * ID ] [ ( ID ) ] ) ] int ) { }",
  "} ID ( ID : bool , ID : bool ) : bool { while - 123 != false * ID { func } func ID ( ) { }",
  "} ID ( ID : bool , ID : bool ) : bool { while - func != false * ID { func } 123 ID ( ) { }",
  "} ID ( ID : bool , ID : bool bool : ) { while - func != false * ID { func } 123 ID ( ) { }",
  "func - ( ) { return - true * ( 123 ID true <= - 123 ) } func ID ( ) { }",
  "func - ( ) { return true - * ( 123 ID true <= - 123 ) } func ID ( ) { }",
  "func { ( ) - return true - * ( 123 ID true <= - 123 ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] ) ( ID ( ) [ false ] [ ID ] ) ] int [ { }",
  "func ID ( ID : [ ] [ ] ) ( ID ( ) [ false ] [ ID ] ) ] int [ { }",
  "func ID ( ID : ( ] [ ] ) [ ID ( ) [ false ] [ ID ] ) ] int [ { }",
  "func ID ( ) : [ ] bool { return } func ID ( ID : bool ) : int { if ID } { call ID ( ) }",
  "func ID ( ) : [ ] bool { return } func ID ( ID : bool ) : int { if ID } { call ID ( ) }",
  "func ID ( ) : [ ] bool { return } func ID ( ID bool : ) : int { if ID } { call ID ( ) }",
  "func ID ( ) ID var ID : bool var ID : int ID ( 123 * false and - - { and ( ID ) ) = true } func ID ( ) { }",
  "func ID ( ) ID var ID : bool var ID : int ID ( 123 * and false - - { and ( ID ) ) = true } func ID ( ) { }",
  "func ID ( : ID var ID : bool var ID ) int ID ( 123 * and false - - { and ( ID ) ) = true } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : [ - - ( - ID ( ) [ - - ID ) ] [ - ID ] ] int , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : [ - ) ( - ID ( ) [ - - ID - ] [ - ID ] ] int , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : [ - ) ( - ID ( ) ID - - [ - ] [ - ID ] ] int , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool : var ID { int var ID : [ - - ID ] int }",
  "func ID ( ID : bool , ID : int , ID : int ) - bool : var ID { int var ID : [ - : ID ] int }",
  "func ID ( ID : bool , int : int , ID : int ) - bool : var ID { int var ID : [ - : ID ] ID }",
  "func ID ( ID : bool , ID : int ) { var ID : int call ID ( ID ID ID ) ) print ( ( ID ) ) } func ( ( ) { }",
  "func ID ( ID : bool , ID : int ) ) var ID : int call ID ( ID ID ID ) ) print ( ( ID ) ) } func ( ( { { }",
  "func ID ( ID : bool , ID : int ) ) var ID : int call ID ( ID ID ID ) ) print ( ( ID ) ) } func ( ( { { }",
  "func ID ( ID : [ ] [ ] [ ] int ) { if ( - true ID ) { } if - ( - - - ID ) { } }",
  "func ID ( ID : [ ] [ ] [ ( int ) { if ] - true ID ) { } if - ( - - - ID ) { } }",
  "func ID ( ID : [ ] [ ] [ ( int { ) if ] - true ID ) { } if - ( - - - ID ) { } }",
  "func - ( ) : bool { var ID : int ID = false / true - 123 * ID 123 * ( - ( false ) ) - ID ID = true }",
  "func - ( ) : bool { var ID : int ID = false / true - 123 * ID 123 false ( - ( * ) ) - ID ID = true }",
  "func - ( ) : bool { var ID : int ID = false / true - 123 * ID 123 false - ( ( * ) ) - ID ID = true }",
  "func ID ( ) : [ ] int { ID ID : [ ( false - ( - var ) - true ) ] int var ID : [ ] int }",
  "func ID ( ) : [ ] int { ID ID [ : ( false - ( - var ) - true ) ] int var ID : [ ] int }",
  "func ID ( ) : [ ] int { ID ID [ : ( false - ( - var ) ] true ) - int var ID : [ ] int }",
  "func ID ( ID : bool ) : bool { print false or ) ID * ( - ( - ( - true ) ) - or ( ID ) } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { print false or ) ID - ( * ( - ( - true ) ) - or ( ID ) } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { print false or ) ID - ( * ( - ( - true ) ) - ( ( ID ) } func ID or ) { }",
  "func ID ( ) { while ( - - true + ID ( ) [ { ] [ ID ] ) ID } }",
  "func ID ( ) { while ( - - true + ID ( ) [ { ] [ ID ] ) ID } }",
  "func ID ( ) { while ( - - true + ID ( { [ ) ] [ ID ] ) ID } }",
  "func ID ( ) { var ID : bool var ID func bool { call ID ( 123 / true * - - ( - ID ) ) if ( ( ID ) ) { } } } : ID ( ) { }",
  "func ID ( ) { var ID : bool var ID func bool { call ID ( 123 / true * - - ( - ( ) ) if ( ( ID ) ) { } } } : ID ID ) { }",
  "func ID { ) { var ID : bool var ID func bool ( call ID ( 123 / true * - - ( - ( ) ) if ( ( ID ) ) { } } } : ID ID ) { }",
  "func ID ( ) : bool { var - : bool var ID : int print true - ID ( 123 ) - - 123 } func ID ( ) { }",
  "func ID ( ) : bool { - - : bool var ID : int print true - ID ( 123 ) - var 123 } func ID ( ) { }",
  "func ID ( ) : bool { - - : bool var ID : int print true - ID ( 123 ) - ( 123 } func ID var ) { }",
  "func ID ( ID : bool } ID : bool ) { var ID : [ ] [ ] int ,",
  "func ID ( bool : ID } ID : bool ) { var ID : [ ] [ ] int ,",
  "func ID ( bool : ID } ID : [ ) { var ID : [ ] bool ] int ,",
  "} ID ( ID : bool , ID : [ ID ( ID ( ID ) ) ] int ) { } func ID ( ) { func",
  "} ID ( ) : bool , ID : [ ID ( ID ( ID ) ID ] int ) { } func ID ( ) { func",
  "} ID ( ) : ] , ID : [ ID ( ID ( ID ) ID bool int ) { } func ID ( ) { func",
  "func ID ( ) : bool { var ID : bool var ID : int return } func ID ( ID : int ] ID : [ - ID , bool , ID : [ ] bool ) { }",
  "func ID ( ) : ] { var ID : bool var ID : int return } func ID ( ID : int ] ID : [ - ID , bool , ID : [ bool bool ) { }",
  "func ID ( ) : ] { var ID return bool var ID : int : } func ID ( ID : int ] ID : [ - ID , bool , ID : [ bool bool ) { }",
  "func ID ( ) { ) ID ( ) * ( ID ( ) - ID + ID ) } func ID ( return { }",
  "func ID ( ) { ) ID ( ) * ( ID ( ) - ID + ID ) func } ID ( return { }",
  "func ID ( ID : bool , ID : ( , ID : bool ) : bool { while ( - 123 * - ID * ( int ID ) ) ) { } }",
  "func ID ( ID : bool , ) : ( , ID : bool ) : bool { while ( - 123 * - ID * ( int ID ) ID ) { } }",
  "123 ID ( ID : bool , ) : ( , ID : bool ) : bool { while ( - func * - ID * ( int ID ) ID ) { } }",
  "func ID ( ) { var : ID int call ID ( ID ( ) [ - ID [ 123 ] [ - ID ] ] [ ( ID ) ] ) }",
  "func ID ( ) { var : ID int call ID ( ID ID ) [ - ( [ 123 ] [ - ID ] ] [ ( ID ) ] ) }",
  "func ID ( ) { var ID : ] var ID : [ ( ( ID ( - ID ) ) ) int int }",
  "func ID ( ) { var ID : ] var ID : [ ( ( ID ( - ID ) ) } int int )",
  "func ID ( ) { var ID : ] var ID : ( ( ( ID [ - ID ) ) } int int )",
  "func return ( ) : int { var ID : int call ID ( ) ID } func ID ( ) { while true { } print 123 }",
  "func return ( ) : int { var ID : int call ID ( ) ID } func } ( ) { while true { ID print 123 }",
  "func return ( ) : int { ID var : int call ID ( ) ID } func } ( ) { while true { ID print 123 }",
  "func ID ( ) : bool { var ID : [ ] bool var ID - bool } func ID ( ID : [ : ID ] int ) { }",
  "func ID ( ) : bool { var ( : [ ] bool var ID - bool } func ID ID ID : [ : ID ] int ) { }",
  "func ID ( ) : bool { var ( : ] ] bool var ID - bool } func ID ID ID : [ : ID [ int ) { }",
  "func ID ( ID : int return ID : int , ID : bool ) { , } func ID ( ) { var ID : int ID = ( 123 ) if ID { } }",
  "func ID ( ID : int return ID ( int , ID : bool ) { , } func ID ( ) { var ID : int ID = : 123 ) if ID { } }",
  "func ID ( ID : int return ID ( int , ID : bool ) { , } func ID ( ) { var ID : int ID = : 123 ) } ID { if }",
  "func ID ( ID : int ) : int { call ID ( - 123 / true / ID [ - 123 ] [ false ] ) } func ID { ) ( }",
  "func ID ( ID [ int ) : int { call ID ( - 123 / true / ID : - 123 ] [ false ] ) } func ID { ) ( }",
  "func ID ( ID [ int ) : int { call ID ( - 123 / true ] ID : - 123 / [ false ] ) } func ID { ) ( }",
  "func ID ( ) { var ID : int return } ( ID func ) : int { var ID : int call ID ( ID ) }",
  "func ID ( ) { var ID : int return } ( ID func ) var int { : ID : int call ID ( ID ) }",
  "func ID ( ) { var ID : int return } ( ID func ) var int { : ID : ID call ID ( int ) }",
  "func ID ) ( : int { } func ID ( ) { var ID : int var ID : [ ] [ ID ( ) ] [ ] bool }",
  "func ID ( ID : [ false * false * - ( 123 - ID ( - [ ( false ) ] [ ) ID ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ false * false * - ( 123 - ID ( - [ ( false ) ] [ ) ID ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ false * false * - func 123 - ID ( - [ ( false ) ] [ ) ID ] ) ] int ) { } ( ID ( ) { }",
  "func ID ( ) { ID ( [ = - - - ( ID ) ID ] [ ID ] ) }",
  "func ID ( ) { ] ( [ = - - - ( ID ) ID ] [ ID ID ) }",
  "func ID ( ) { ] ( [ = - - - ( ID ) ID ] [ } ID ) ID",
  "[ ID ( ID : [ ] [ ID ( ) * - ID func ID ( ( ( - 123 ) ) ) ] [ ID ] * - - 123 ] [ ] bool ) { }",
  "[ ID ( ID : [ ] [ ID ( ) * - ID func ID ( ( ( - 123 ) ) ) ] [ ID ] * - - 123 } [ ] bool ) { ]",
  "[ ID ( ID : [ ] [ ) ( ) * - ID func ID ( ( ( - 123 ) ) ) ] [ ID ] * - - 123 } [ ] bool ID { ]",
  "func ID ( ) { if ( ) ( false * true * ( ID ID ) ) { } ID = - ( ( true ) ) }",
  "func ID ( ) { ID ( ) ( false * true * ( if ID ) ) { } ID = - ( ( true ) ) }",
  "func ID ( ( { var ID : [ - 123 / ID ( ( ) true ) ) ) / ID ] int } func ID ( ) { }",
  "( ID ( ( { var ID : [ - 123 / ID ( ( ) true ) ) ) / ID ] int } func ID func ) { }",
  "( ID ( ( { var ID : [ - 123 / ID ( ( ) true ) ) ) / ID ] int } func ID func ) { }",
  "func ID ( } { var ID : bool var ID : [ ( false - ID * ( ( - 123 ) ) - ID ) ] bool ) func ID ( ) { }",
  "func ID ( } { var ID : bool } ID : [ ( false - ID * ( ( - 123 ) ) - ID ) ] bool ) func ID ( ) { var",
  "func ID ( } { var ID 123 bool } ID : [ ( false - ID * ( ( - : ) ) - ID ) ] bool ) func ID ( ) { var",
  "func ID ( ) { while - false 123 ( - ID ( ) / - - - ID ) / ( ( / ) ) { } { } }",
  "func ID ( ) { while - false 123 ( - ID ( ) / - - - ID ) / ( ( / ) } { ) { } }",
  "func ID ( ) { while - false 123 ( - ID ( ) / - - - ID ) / ( ( / ) } ) { { } }",
  "func ID ( ) { print ID [ - ID [ ( ID ) ] [ - ( ] ) ID ] [ false ] while ID { } } func ID ( ) { }",
  "func ID ( ) { print ID [ - ID [ ( ID ) ID [ - ( ] ) ] ] [ false ] while ID { } } func ID ( ) { }",
  "func ID ( ) { var : : int } func ID ( ID : int , ID ID [ - ( true ) ] bool ) { }",
  "func ID ( ) { var : : int } func ID ( ID : int , ( ID [ - ID true ) ] bool ) { }",
  "func ID ( ) { var ) : int } func ID ( ID : int , ( ID [ - ID true : ] bool ) { }",
  "func ID ( ) : [ ( 123 - ( 123 or ID or ID bool + - ID ) ] ) { } func ID ( ) { }",
  "func ID ( ID : [ ( 123 - ( 123 or ) or ID bool + - ID ) ] ) { } func ID ( ) { }",
  "func ID ( ID : [ ( 123 - ( 123 or ) or ID bool + - ) ID ] ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID ( - ID ( ( false ) var ) ] bool ) ID : [ ] [ ] bool }",
  ") ID ( func { var ID : [ ID ( - ID ( ( false ) var ) ] bool ) ID : [ ] [ ] bool }",
  ") ID ( func { var ID : [ ID ( - ) ( ( false ID var ) ] bool ) ID : [ ] [ ] bool }",
  "func ID ( ) : [ true * ( ( - 123 / ( ID ) ( ) * ( ( ( true ) ) ) ] bool { } func ID ) ) { }",
  "func ID ( ) : [ true * ( ( - 123 / ( ID ) ( ) * ( ( ( true ) ) ) ] bool ID } func { ) ) { }",
  "func ID ( * : [ true * ( ( - 123 / ( ID ) ( ) ) ( ( ( true ) ) ) ] bool ID } func { ) ) { }",
  "func ID ( ) { ID ( 123 + - ID ( ) [ ( - - ID ) ] [ ( - ( ) ] ) = ID { } } func ID 123 ) { }",
  "func ID ( ) { ID ( 123 + - ID ( ) [ ] - - ID ) ( [ ( - ( ) ] ) = ID { } } func ID 123 ) { }",
  "func ID ( ID : [ ) bool , ID : [ ( - ( ( ID ) ) ) ] [ ] bool ] { }",
  "func ID ( ID : [ ) bool , ID : [ ( - ( ( ID ) ) ) ] [ ] bool ] { }",
  "func ID ( ID : [ ) bool , ID ( [ : - ( ( ID ) ) ) ] [ ] bool ] { }",
  "func ID ( ID : [ ] int ) : [ ] bool { var ID : bool print ( ID ( ) ) print - ( - } ) ID func ID ( ) { }",
  "func ID ( ID : [ ] int ) ) [ ] bool { var ID : bool print ( ID ( ) ) print - ( - } ) ID func ID ( : { }",
  "func ID ( ID : [ ] int ) ) [ ] bool { var ID : bool print ( ID } ) ) print - ( - ( ) ID func ID ( : { }",
  "func ID ( ID : [ ( false ) true and ( 123 * - - ID / false / and - ID ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ( false ) and true ( 123 * - - ID / false / and - ID ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID } [ ( false ) and true ( 123 * - - ID / false / and - ID ) ] bool ) { : func ID ( ) { }",
  "func ID ( ) : [ ] bool { return } func ID ( ) } while ID ( ) / ( - - true ) * ID { } {",
  "func ID while ) : [ ] bool { return } func ID ( ) } ( ID ( ) / ( - - true ) * ID { } {",
  "func ID while ) : [ ] bool { return } func ID ( ) } ( ID ( ) / ) - - true ( * ID { } {",
  "func ID ( ID : bool ) : [ ] int { var ID : int return 123 + ( ID ) + ( false ) ID func } ( ) { }",
  "func ID ( ID : bool ) : [ ] int { var ID : int return 123 + ( ID ) ID ( false ) + func } ( ) { }",
  "bool ID ( ID : func ) : [ ] int { var ID : int return 123 + ( ID ) ID ( false ) + func } ( ) { }",
  "func ID ( ID : ) ) { var ID : bool while true * ( ID [ ( true bool ] [ ID ] ) / ID { } }",
  "func ) ( ID : ID ) { var ID : bool while true * ( ID [ ( true bool ] [ ID ] ) / ID { } }",
  "func ) ( ID : ID ) { var ID : true while true * ( ID [ ( bool bool ] [ ID ] ) / ID { } }",
  "func ID ( ID : int , ID : bool ID : bool { var ) : [ ( ( - ID ) ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ID : bool { var ) ] [ ( ( - ID ) ) : bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ID : bool { var ) ] [ ( ( - ID ) ) : bool var { : bool } func ID ( ) ID }",
  "func ID ( ) { ID ID : int var ID : bool var [ false + ( - true ) + ID ] [ false ] = ( ( ( false ) ) ) }",
  "func ID ( ) { ID ID : int var ID ( bool var [ false + ( - true ) + ID ] [ false ] = : ( ( false ) ) ) }",
  "func ID ( ) { ID ID : int var ID ( bool var [ false + ( - true : + ID ] [ false ] = ) ( ( false ) ) ) }",
  "true ID ( ) { print ( - false * true - func * ( true ) + false ) }",
  "true ID func ) { print ( - false * true - ( * ( true ) + false ) }",
  "true ID func ) { print ( } false * true - ( * ( true ) + false ) -",
  "func ( ( ID : [ - true * ID ( ID ID - ID ) ) * - ( ID ) ] [ ] bool ) { } func ID ( ) { }",
  ") ( ( ID : [ - true * ID ( ID ID - ID ) ) * - ( ID ) ] [ ] bool func { } func ID ( ) { }",
  ") [ ( ID : [ - true * ID ( ID ID - ID ) ) * - ( ID ) ] ( ] bool func { } func ID ( ) { }",
  "func ID ( ) { var false : [ ] [ ] int ID ( ) [ ( - - ID ) ] [ ( ( ( - ID ) ) ) ] = ID } func ID ( ) { }",
  "func ID ( ) { var false : [ ] [ ] int ID ( ) [ ( - - ID ) ] ] ( ( ( - ID ) ) ) [ = ID } func ID ( ) { }",
  "func ID ( ) { var false ( [ ] [ ] int ID ( ) [ ( - - ID ) ] ] ( ( ( - ID ) ) ) [ = ID } func ID : ) { }",
  "func ID ( ID / bool ) { return false * ID [ ( 123 / - ID ) ] : ID } func ID ( ) { }",
  "func ID ( 123 / bool ) { return false * ID [ ( ID / - ID ) ] : ID } func ID ( ) { }",
  "func ID ( 123 / bool ) { return false * ID / ( ID [ - ID ) ] : ID } func ID ( ) { }",
  "func ID ( ) { ] ID : [ var bool print ( true * ID + 123 - false ) ID = ( true ) } func ID ( ) { }",
  "func ID ( * { ] ID : [ var bool print ( true ) ID + 123 - false ) ID = ( true ) } func ID ( ) { }",
  "func ID ( * { ] ID : [ var bool print ) true ) ID + 123 - false ( ID = ( true ) } func ID ( ) { }",
  ") ID ( ) : bool { var ID : bool ID ( ID ( - false / ( - ID func ) ) = ( 123 ) }",
  ") ID ( ) : bool { var ID : bool ID ( ID ( - false } ( - ID func ) ) = ( 123 ) /",
  ") ID ID ) : bool { var ID : bool ( ( ID ( - false } ( - ID func ) ) = ( 123 ) /",
  "func ID ( ) : int { if - ID ( - true ] ID [ - ( - ( ID ) ) - ) { } { } } func ID ( ) { }",
  "func ID ( ) : int { if - ID ( - true ] ID [ ID ( - ( ID ) ) - ) { } { } } func - ( ) { }",
  ") ID ( ) : int { if - ID ( - true ] ID [ ID ( - ( ID ) ) - ) { } { } } func - ( func { }",
  "func ID ( ID : int ID { var ID : int var ID : int } func ) ( ) : bool { ID ( ) [ false ] = false { } }",
  "func func ( ID : int ID { var ID : int var ID : int } ID ) ( ) : bool { ID ( ) [ false ] = false { } }",
  "func func int ID : ( ID { var ID : int var ID : int } ID ) ( ) : bool { ID ( ) [ false ] = false { } }",
  "func ID ( ) { var bool : bool var ID : [ ( ( - ID [ ( true ) ] [ true ] ) ) ] [ ] ID }",
  "func ID ( ) { var bool : bool var ID : [ ( ( - ID true ( [ ) ] [ true ] ) ) ] [ ] ID }",
  "func ID ( ) { var bool : bool var ID : [ ) ( - ID true ( [ ) ] [ true ] ) ( ] [ ] ID }",
  "func ID ( ) : bool { { var ID : [ ID / - ( - false ) / ( true ) ] } ] int var ID : bool [ { } }",
  "func ID } ) : bool { { var ID : [ ID / - ( - false ) / ( true ) ] } ] int var ID : bool [ { } (",
  "func ID } ) : bool { { var ID : [ ID / - ( - false ) / ( true ) ] } ] var int ID : bool [ { } (",
  "func ID ( ID : int , ID : [ ( - ID [ ( 123 ) ] [ true [ ) ] ] ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : func , ID : [ ( - ID [ ( 123 ) ] [ true [ ) ] ] ] int , ID : int ) { } int ID ( ) { }",
  "func ID ( ID : func ID ID : [ ( - , [ ( 123 ) ] [ true [ ) ] ] ] int , ID : int ) { } int ID ( ) { }",
  "func ID ( ID bool [ ] : ) { var ID : int var ID : bool return - false + ID [ ( ID ) ] + false }",
  "func ID ( ID bool [ ] : ) { var ID return int var ID : bool : - false + ID [ ( ID ) ] + false }",
  "func ID ( ID bool [ ] : ) { var ID return int var ] : bool : - false + ID [ ( ID ) ID + false }",
  "func ID ( ) : [ ] int { ID 123 / true / true + ( - ( ( if ) ) ) - true { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : [ ] int { ID 123 / true / true + ( - ( ( if ) ) ) ( true { } call ID ( ) } func ID - ) { }",
  "func ID ( - : [ ] int { ID 123 / true / true + ( ) ( ( if ) ) ) ( true { } call ID ( ) } func ID - ) { }",
  "func ID ( ID : bool , ID : [ 123 + - - false / ( ID / ( ( ) ) - false ] int ) { } func ID ID ) { }",
  "func ID ( ID : bool , ID : [ 123 + - - false / ( ID / ( ( ) ) - false ] int ) { } func ID ID ) { }",
  "func ) ( ID : bool , ID : [ 123 + - - false / ( ID / ( ( ) ) - false ] int ) { } func ID ID ID { }",
  "func ID ( ID : bool , ID : [ ] int ) : int { var ID : [ - - ( ( ( ID ) ) ) ] ID ] bool var ID : [ ] [ ] bool } func [ ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) : int { var ID : [ - - ( ( ( ID ) ) ) ] ID { bool var ID : [ ] [ ] bool } func [ ( ) ] }",
  "func ID ( ID : bool , ID : [ ] int ) : int { var ID : ID - - ( ( ( ID ) ) ) ] ID { bool var [ : [ ] [ ] bool } func [ ( ) ] }",
  "func ID ( ) { var ID : int return print func ID ( ID : bool ) { var ID : bool } ( - ( true ) ) }",
  "func ID ( ) { var ID : int return print func ID ( ID : bool ) ID var { : bool } ( - ( true ) ) }",
  "func ID ( ) func var ID : int return print { ID ( ID : bool ) ID var { : bool } ( - ( true ) ) }",
  "func : ( ) { var ID ID [ 123 + false * - true * - ( ID ) ] int }",
  "func false ( ) { var ID ID [ 123 + : * - true * - ( ID ) ] int }",
  "func false ( ) { var ID ID [ 123 + : * - true ( - * ID ) ] int }",
  "func ID ( ) { var ID : bool { var ID } int while ( ( ( ( ID ) ) ) ) { } if - ( ID ) { : } ID = 123 }",
  "func ID ( ) { var ID : bool { var ID ) int while ( ( ( ( ID ) ) } ) { } if - ( ID ) { : } ID = 123 }",
  "func ID ( ) { var ID : bool { var ID ) int while ( ( ( ( ID ) ) } ) { } if - ( } ) { : } ID = 123 ID",
  "func ID ( ID : [ ] [ ] bool , ID : bool ) { var ID : [ ID [ ID ] ] bool var ID : [ ] int } ) ID ( func { }",
  "func ID ( ID : [ ] [ ] bool , ID : bool } { var ID : [ ID [ ID ] ] bool var ID : [ ] int ) ) ID ( func { }",
  "func ID ( ID : [ ] [ ] bool , ID : bool } { var ID : [ ID [ ID ] ] bool var ID : [ ] int ) ) ID ( func { }",
  "func : ( ) : int { var ID : int var ID : int } func ID ( ) : int { var ID ID bool print ( false ) ID = - - 123 }",
  "func : ( ) : int { var ID : int var ID : int } func ID ( ) : int { var ID ID bool print ( false = ID ) - - 123 }",
  "func : ( ) : int { var ID : int var ID : int } func ID ( ) : int { var ID ID bool print ( false = ID ) - - 123 }",
  "func ID ( ) : int { var ID : int ( ID : bool return ID / false * ( ( var 123 ) ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : int ( ID : bool return ID / false * ( ( ID 123 ) ) ) } func var ( ) { }",
  "func ID ( ) : int { var ID : int ( ID : bool return ID / false * ( ( ID 123 ) ) ) } } var ( ) { func",
  "func ID ( ID : [ ] ID , bool : [ ] int , ID : [ ] bool ) { var ID : int }",
  "func ID ( : : [ ] ID , bool : [ ] int , ID ID [ ] bool ) { var ID : int }",
  "func ID ( : ID [ ] ID , bool : [ ] int , ID ID [ ] bool ) { var : : int }",
  "func ID ( ID : int ) } if 123 / - ID * ( ID * false / - - ( - ID ) ) { { if ( ( false ) ) { } }",
  "func { ( ID : int ) } if 123 / - ID * ( ID * false / - - ( - ID ) ) ID { if ( ( false ) ) { } }",
  "func { ( ID : ) int } if 123 / - ID * ( ID * false / - - ( - ID ) ) ID { if ( ( false ) ) { } }",
  "func ID ( ) : int { { ID ID : int } call var ( - - ( - ID ) ) } func ID ( ) { }",
  "func ID ( ) : int { call ID ID : int } { var ( - - ( - ID ) ) } func ID ( ) { }",
  "func ID ( ) var int { call ID ID : int } { : ( - - ( - ID ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ( true / ID [ / - ID ) ] ( - ( ( - ( - - - - - 123 ) ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : : , ID bool int , ID : [ ( true / ID [ / - ID ) ] ( - ( ( - ( - - - - - 123 ) ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( - : : , ID bool int , ID : [ ( true / ID [ / - ID ) ] ( - ( ( - ( - - - ID - 123 ) ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { return - ID ( ) + } ( ( true ) ) } func ID ( ) { ID",
  "func ID ( ) true return - ID ( ) + } ( ( { ) ) } func ID ( ) { ID",
  "func ID ( func true return - ID ( ) + } ( ( { ) ) } ) ID ( ) { ID",
  "func ID ( ID : int , int : int , ID : int ) { var ID : [ ] bool var ID : [ ] [ - ID ] [ ] ID } func ID ( ) { }",
  "int ID ( ID : int , func : int , ID : int ) { var ID : [ ] bool var ID : [ ] [ - ID ] [ ] ID } func ID ( ) { }",
  "int ID ( ID : int , func : int , ID : int ) { var ID : [ ] bool var ID : [ ] [ - ID ] [ ] ID } func ID ( ) { }",
  "ID ID ( func : [ ] bool ) : [ ] bool { print - ID ( ) * ID ( ) }",
  "ID ID ] func : [ ] bool ) : [ ( bool { print - ID ( ) * ID ( ) }",
  "ID ID ] func : [ ] bool ) : [ } bool { print - ID ( ) * ID ( ) (",
  "func ID ( ID : [ ID ( bool [ false < false + - ID ] ] [ ] ) ) { }",
  "func ID ( < : [ ID ( bool [ false ID false + - ID ] ] [ ] ) ) { }",
  "func ID ) < : [ ID ( bool [ false ID false + - ID ] ] [ ] ) ( { }",
  "func [ ( ) { var ID : [ - - - - ( ID ID false ] ) ] int } func ID ( ) { }",
  "func [ ( ) { var ID : [ - - - - ( ID ID false ] } ] int } func ID ( ) { )",
  "func [ ( ) { var ID : - - [ - - ( ID ID false ] } ] int } func ID ( ) { )",
  "func ID ( ID ) bool , ID : [ ] int ) { var ID : bool var ID : int while ( - - true ) { } } func ID ( : { }",
  "func ID ( ID ) } , ID : [ ] int ) { var ID : bool var ID : int while ( - - true ) { bool } func ID ( : { }",
  "func ID ( ID ) } , ID : [ ] int ) { var ID : bool var ID : int while - - ( true ) { bool } func ID ( : { }",
  "func } ( ID : int , ID : bool ) { var ID : int var ID : [ ID [ true ] [ ID ] ] [ ] bool ID func ID ( ) { }",
  "func } ( ID : int ] ID : bool ) { var ID : int var ID : [ ID [ true , [ ID ] ] [ ] bool ID func ID ( ) { }",
  "func } ( ID : int ] ID : bool ) { var ID : int var ID ID [ ID [ true , [ ID ] ] [ ] bool : func ID ( ) { }",
  "func : ( ID : int ) { } func ID ( ID : int ) : bool { var ID ID [ ] bool print true }",
  "func : ( ID : int ) { } func : ( ID ID int ) : bool { var ID ID [ ] bool print true }",
  "func : ( print : int ) { } func : ( ID ID int ) : bool { var ID ID [ ] bool ID true }",
  "int ID ( ID : int , ID : int , ID : func ) { }",
  "int : ( ID : int , ID ID int , ID : func ) { }",
  "int : ( ID : int , , ID int ID ID : func ) { }",
  "func ID ( ID : int , ID : [ - ID ( - ID ID * ID * false ) ) ] bool ) { } func ( ( ) { }",
  "func ID ( ID : int , ID : [ - ID ( - ID ID * ID * false } ) ] bool ) { } func ( ( ) { )",
  "func ID ( ID : int - ID : [ , ID ( - ID ID * ID * false } ) ] bool ) { } func ( ( ) { )",
  "ID ID ( ID : int , ID : bool , func : [ ] [ - ID - ID ( 123 ) ] int ) { } func ID ( ) { }",
  "ID ID ( ID : int , ID [ bool , func : : ] [ - ID - ID ( 123 ) ] int ) { } func ID ( ) { }",
  "ID ID ( ID : int , ID [ bool , func : ( ] [ - ID - ID : 123 ) ] int ) { } func ID ( ) { }",
  "func ID ( ID ) [ ] [ ( ID [ ID ( - - - 123 ) ] [ ( ID ) ] : ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ] ) [ ID [ ( ID [ ID ( - - - 123 ) ] [ ( ID ) ] : ] [ ] int ) { } func ID ( ) { }",
  "] ID ( ] ) [ ID [ ( ID [ ID ( - - - 123 ) ] [ ( ID ) ] : func [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ID - ( - true - - ) ] int } func ID ( ) { }",
  "ID ID ( ID : int ) { var func : [ ID - ( - true - - ) ] int } func ID ( ) { }",
  "ID ID ( ID : int ) { var func : [ ID - ( - true - - ) ] int } func ID ( ) { }",
  "func ID ( ) : [ ] int true var ID : int print 123 * false * { + ( ID ) print false }",
  "ID func ( ) : [ ] int true var ID : int print 123 * false * { + ( ID ) print false }",
  "ID func ( ) : [ ] int true var ID : int ID 123 * false * { + ( print ) print false }",
  "func ID ( ) : [ ( - - ( - ID [ ( false ) ] [ - ( true ) ] } ) ] [ ] bool { )",
  "] ID ( ) : [ ( - - ( - ID [ ( false ) ] [ - ( true ) func } ) ] [ ] bool { )",
  "] ID ( ) : [ ( - - true - ID [ ( false ) ] [ - ( ( ) func } ) ] [ ] bool { )",
  "func ID ( ID : int ) : bool { var ID : int ID func ) [ - ( ID ) ] = ( true ) } ( ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : int ID func ) [ - ID ID ) ] = ( true ) } ( ( ( ) { }",
  "func ID ( ID : int ) : bool { var ID : = ID func ) [ - ID ID ) ] int ( true ) } ( ( ( ) { }",
  "[ ID ( ) : func ] bool { var ID : bool var ID : int print ( ( ID ) ) while ( - ( false ) ) { } }",
  "[ ID ( ) : bool ] func { var ID : bool var ID : int print ( ( ID ) ) while ( - ( false ) ) { } }",
  "[ ) ( ) : bool ] func { var ID : bool var ID : int print ( ( ID ) ID while ( - ( false ) ) { } }",
  "( ID ( ) : int { var ID : bool ID ( func ID ( true ) ) ) = - ID } func ID ( ) { }",
  "( ID ( ) : int { var ID : bool ID ( func ID ( true ) ) ) = { ID } func ID ( ) - }",
  "( ID ( ) ID int { var ID : bool ID ( func ID ( true ) ) ) = { : } func ID ( ) - }",
  "( ID func ID : [ ] [ ( ID - ID ( ) [ ID ] ) ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  ") ID func ID : [ ] [ ( ID - ID ( ) [ ID ] ) ] [ ] [ ] [ ] int ( { } func ID ( ) { }",
  ") ID func ID : [ ] - ( ID [ ID ( ) [ ID ] ) ] [ ] [ ] [ ] int ( { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : / true [ ( ( ( true ) ) ) ] [ ] [ ] [ ] bool }",
  "func ID ( ) { var ID : int var ID : / true [ ] ( ( true ) ) ) ( [ ] [ ] [ ] bool }",
  "func ID ( ) { var ID : int var ID : / true [ ] ( ( [ ) ) ) ( true ] [ ] [ ] bool }",
  "func ID ( ID : int print ID : bool , ID : bool ) { , ID ( ) [ false ] [ ID ] if false { } }",
  "func ID ( ID : int print ID : bool , [ : bool ) { , ID ( ) ID false ] [ ID ] if false { } }",
  "func ID ( ID : int print ID : bool ] [ : bool ) { , ID ( ) ID false ] [ ID , if false { } }",
  "func ID ( ) ID print ID ( ID ( { ( ) [ ( 123 ) ] [ ( ( - - - ID ) ) ] ) ) if true { } } func ID ( ) { }",
  "func ID ( ) ID print ID ( } ( { ( ) [ ( 123 ) ] [ ( ( - - - ID ) ) ] ) ) if true { ID } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] ID ] [ ID [ true * ( false ) * ( - - - ID ) ] [ [ ] ] bool var ID : bool }",
  "func ID ( ) ) var ID : [ ] ID ] [ ID [ true * ( false ) * ( - - - ID { ] [ [ ] ] bool var ID : bool }",
  "func ID ( ) ) var ID : [ ] ID ] [ ID [ true * ( false * ) ( - - - ID { ] [ [ ] ] bool var ID : bool }",
  "func ID ( ID : [ - ( 123 * [ ID ( ) - - - ID ] ) ] int ) { }",
  "func ID int ID : [ - ( 123 * [ ID ( ) - - - ID ] ) ] ( ) { }",
  "func ID / ID : bool , ID : [ 123 ( - ( - ( ID ) ) / - 123 ] int ) { }",
  "func ID / ID : bool , ID : [ 123 ( - ( - - ID ) ) / ( 123 ] int ) { }",
  "func ID / ID : bool , ID ) [ 123 ( - ( - - ID ) : / ( 123 ] int ) { }",
  "func ID ( ID : [ ( [ ] [ ( true * true + ] - ( - ID ) ) ) ] [ ] [ ] bool ) { }",
  "func ID ( ID : [ ( [ ] [ ( - * true + ] true ( - ID ) ) ) ] [ ] [ ] bool ) { }",
  "ID func ( ID : [ ( [ ] [ ( - * true + ] true ( - ID ) ) ) ] [ ] [ ] bool ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ] [ - - ID ( false - - false ) ID + ] bool ) { }",
  "bool ID ( ID : int , ID : func , ID : [ ] [ - - ID ( false - - false ) ID + ] bool ) { }",
  "bool ID ( ID : int , ID false func , ID : [ ] [ - - ID ( false - - : ) ID + ] bool ) { }",
  "func ID ( ID ID int , ID : int , : : bool ) : [ 123 * - ( ( - false ) ) * true ] int { }",
  "func ID int ID ID ( , ID : int , : : bool ) : [ 123 * - ( ( - false ) ) * true ] int { }",
  "func ID int ID ID ( , ID : [ , : : bool ) : int 123 * - ( ( - false ) ) * true ] int { }",
  "func ID ( ID : bool ) : bool { var ID : bool var ID : call int ID ( ) }",
  "func ID ( ID : bool ) : ID { var ID : bool var bool : call int ID ( ) }",
  "func ID ( ID : bool ) : ID { var } : bool var bool : call int ID ( ) ID",
  "var ID ( ID : int , ID : int , ID : bool ) : int { func ID : int ID ( ) [ ID ] = ID while ID { } }",
  "var ID ( ID : int , ID : int , ID : bool ) : int { func ID : int ID ( ) [ ID ] = ID while ID { } }",
  "var ID ( ID : int , ID : int , ID : bool ) : int { func ID : int ID ( ) ID ID ] = [ while ID { } }",
  "func ID ( ID : ) , ID : bool ) : int { return } func ID ( ID : [ ] [ ] int bool { ID = - - ID { } }",
  "func ID , ID : ) ( ID : bool ) : int { return } func ID ( ID : [ ] [ ] int bool { ID = - - ID { } }",
  "func ID , ID : ) ( ID : bool ) : int { return } func ID ( ID : [ ] [ ] { bool { ID = - - ID int } }",
  ") ID ( ) : int { var ID : bool call ID ( ( ( ( 123 func ) ) ) { } } func ID ( ) { }",
  ") ID ( ) : int { var ID : bool func ID ( ( ( ( 123 call ) ) ) { } } func ID ( ) { }",
  ") ID ( ) : int { var ID : bool func ID ( ( ( ( 123 call ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ( : [ ID ( ID ( ) ) ) ] int } func ID ( ) { }",
  "func ID ( ( : int ) : int { var ( : [ ID ID ID ( ) ) ) ] int } func ID ( ) { }",
  "func ID ( ( : int ) : int { ( var : [ ID ID ID ( ) ) ) ] int } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) : [ ] bool { var ID : [ ] [ false / - ( ( ( ID ) ) ) / ( 123 var ] bool ) ID : int } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) : { ] bool [ var ID : [ ] [ false / - ( ( ( ID ) ) ) / ( 123 var ] bool ) ID : int } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) : { ] bool [ var { : [ ] [ false / - ( ( ( ID ) ) ) / ( 123 var ] bool ) ID : int } func ID ( ) ID }",
  "] ID ( ID : bool , ID : [ ] int ) : bool { var ID : int if ID [ ID func { } } func ID ( ) { }",
  "] ID ( ID : bool , ID : int ] [ ) : bool { var ID : int if ID [ ID func { } } func ID ( ) { }",
  "] ID ( ID : bool , ID : int ] [ ) : { bool var ID : int if ID [ ID func { } } func ID ( ) { }",
  ": ID ( ID func bool , ID : bool ) { return ID [ ( ID ) ] }",
  "func ID ( ) { var ID : int print ID ( } ( ) [ ( - ID ) ] [ false ] ) while true { ID }",
  "] ID ( ) { var ID : int print ID ( } ( ) [ ( - ID ) ] [ false func ) while true { ID }",
  "] ID ( ) { var ID : int print ] ( } ( ) [ ( - ID ) ID [ false func ) while true { ID }",
  "func ID ( ) { while ID ( ) * ID [ - - ( false ) ] [ - - ID ] print true { } }",
  "func ID ( ) { while ID ( false * ID [ - - ( ) ) ] [ - - ID ] print true { } }",
  "] ID ( ) { while ID ( false * ID [ - - ( ) ) func [ - - ID ] print true { } }",
  "func ID ( ID : ( , ID : bool , ID : [ - ID int ) [ ( - ID ) ] ] [ ] [ ] int ) { }",
  "func ID ( ID : ( , ID : bool , ID : [ - ID int [ [ ( - ID ) ] ] [ ] ) ] int ) { }",
  "func ID ( ID : ( , ID : bool , ID : [ - ID int [ [ ( - ID ) ] ] [ ] ) ] int { ) }",
  "func ID ( ) : [ ( true * ID ( ] [ false / ( true ) ) / ID ) ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ( true * ID ( ] [ false / ( true ) ) ID / ) ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ( ) * ID ( ] [ false / ( true true ) ID / ) ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : [ ] [ 123 ] true / ( - 123 ) ] [ ] [ / int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : ID ] [ 123 ] true / ( - 123 ) ] [ ] [ / int var [ : [ ] int } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : ID ] [ 123 ] true / 123 - ( ) ] [ ] [ / int var [ : [ ] int } func ID ( ) { }",
  "func ID ( ) { { var ID : bool var ID : int { var } : int { var ID : int var ID : bool } ID print ID } } func ID ( ) { }",
  "func ID ( ) { { var ID : bool var ID : int { var } : ) { var ID : int var ID : bool } ID print ID } } func ID ( int { }",
  "func ID ( ) { { var ID : bool var ID : int { var } : ) { var ID : int var ID : bool } ID print ID } } func ID ( int { }",
  "func ID ID ( : [ ID ( ( false / ID ( ( ID ) ) ) ) ] bool ) { } func ID ( ) { }",
  "( ID ID ( : [ ID func ( false / ID ( ( ID ) ) ) ) ] bool ) { } func ID ( ) { }",
  "( ID ID ( : [ ID func ( false / ID ) ( ID ) ) ( ) ] bool ) { } func ID ( ) { }",
  "( ID func ) : int { var ID : [ - false * ID [ - ( false ) ] [ ( false ) ] ] [ ] int } func ID ( ) { }",
  "( ID func ) : int { var ID : [ - func * ID [ - ( false ) ] [ ( false ) ] ] [ ] int } false ID ( ) { }",
  ": ID func ) : int { var ID ( [ - func * ID [ - ( false ) ] [ ( false ) ] ] [ ] int } false ID ( ) { }",
  "func ID ( ID ( bool , ID : bool , ID : [ false != 123 / ID ( ) [ false ] ] bool ) { } func ID : ) { }",
  "func ID ( ID ( bool , ID : bool , ID : [ false != 123 / ID ( ) [ false ] ] { ) { } func ID : ) bool }",
  "func , ( ID ( bool ID ID : bool , ID : [ false != 123 / ID ( ) [ false ] ] { ) { } func ID : ) bool }",
  "func ) ( ID : bool { var ID : int }",
  "func ID ( ) : [ ] bool - var ID : [ ] int var ID : int return - 123 * false - 123 - ( { false ) } func ID ( ) { }",
  "func ) ( ) : [ ] bool - var ID : [ ] int var ID : int return - 123 * false - 123 - ( { false ) } func ID ( ID { }",
  "func ) ( ) : [ ] bool - var ID : [ ] int var 123 : int return - ID * false - 123 - ( { false ) } func ID ( ID { }",
  "func ID ( ) : int { var ID : int var ID : bool print ID ( 123 * - 123 / - false ) - - if true { } }",
  "func } ( ) : int { var ID : int var ID : bool print ID ( 123 * - 123 / - false ) - - if true { } ID",
  "func } ( ) : int { var * : int var ID : bool print ID ( 123 ID - 123 / - false ) - - if true { } ID",
  "func ID ( ID : bool , ID : [ ] [ ] bool , } : [ ( ( ID ) ) ] [ ] bool ) { ID",
  "func ID ( ID : bool , ID : [ ] [ ] bool , } : [ ( ( ID ) ) ] ID ] bool ) { [",
  "func ID ( ID : ) , ID : [ ] [ ] bool , } : [ ( ( ID ) ) ] ID ] bool bool { [",
  "func ID ( ID : int , ID : int , [ : int ) : ID ] int { var ID : [ ( 123 ) ] int var ID : [ ] bool }",
  "func ID ( ID : int , ID : int ) [ : int , : ID ] int { var ID : [ ( 123 ) ] int var ID : [ ] bool }",
  "func ID ( ID : int , ID : int ) [ : int , : ID ] int { var ID : [ ( 123 ) ] int var ID : [ } bool ]",
  "func ID ( ) : int { ID [ 123 ) ( - ( ( - ( - - - - true ) ) ) + + ID ] = ID }",
  "func ID ( ) : int { ID [ 123 ) = - ( ( - ( - - - - true ) ) ) + + ID ] ( ID }",
  "func ID ( ) : int { ID [ 123 ) = - ( ( - ( true - - - - ) ) ) + + ID ] ( ID }",
  "func ID ( ID : [ ID [ ID ( true [ - ID ) ] [ - ID ] ] - ] int ) { } func ID ( ) { }",
  "func int ( ID : [ ID [ ID ( true [ - ID ) ] [ - ID ] ] - ] ID ) { } func ID ( ) { }",
  "func int ( ID : [ ID [ ID ( true [ - ID ) ] [ - ID ] ] - ] } ) { } func ID ( ) { ID",
  "func ID ( ) { var ID : [ ] [ ] [ - true * false - 123 var ( - ( ID ) ) * ID ] bool / ID : int }",
  "func ID ( ) { var ID : [ ] [ ] [ - true * false - 123 var ) - ( ID ) ( * ID ] bool / ID : int }",
  "func ID ( ) { var ID : [ ] [ ] [ - true * false - ID var ) - ( ID ) ( * 123 ] bool / ID : int }",
  "( ID ( ) : [ ] [ ] bool { var ID : int { } return ( - ( ( ( ID ) ) ) ) } func ID func ) { }",
  "( ID ( ) : [ ] [ ] bool { var ID : int { } return ( - ( ( ( ID func ) ) ) } ) ID func ) { }",
  "( ID ( ) : [ ] [ ] bool { var ID : ( { } return ( - ( int ( ID func ) ) ) } ) ID func ) { }",
  "func ID ( ) : [ ] [ ID ( ) * ID [ int ID ( ) ] [ ID ] * ID ] - { } func ID ( ) { }",
  "func ID ( ) ) [ ] [ ID ( : * ID [ int ID ( ) ] [ ID ] * ID ] - { } func ID ( ) { }",
  "func ID ( ) ) [ ] [ ID ( : * ] [ int ID ( ) ] [ ID ID * ID ] - { } func ID ( ) { }",
  "func : ( ID ID bool ) { var ID : [ ] [ ] bool }",
  "func : ( ID ID : ) { var ID bool [ ] [ ] bool }",
  "func : ( : ID ID ) { var ID bool [ ] [ ] bool }",
  "func ID } ID : int , ID : [ ] int ) { var ID : [ ] [ ID ( ( ID ) ) ] int (",
  "func ID } ID : int , ID : [ ] int ) ( var ID : [ ] [ ID ( ( ID ) ) ] int {",
  "func ID } ID : int , ID ] [ ] int ) ( var ID : [ : [ ID ( ( ID ) ) ] int {",
  "func ID ( ) : bool { var ID : int if true >= - - ID { var ID : var bool ID : int } ID = ID }",
  "func ID } ) : bool { var ID : int if true >= - - ID { var ID : var bool ID : int ( ID = ID }",
  "ID ID } ) : bool { var func : int if true >= - - ID { var ID : var bool ID : int ( ID = ID }",
  "func ID ( ) : [ - ID ( - ID [ ID ] [ false ] ) { int ] }",
  "func ID ( ) : ] - ID ( - ID [ ID ] [ false [ ) { int ] }",
  "func { ( ) : ] - ID ( - ID [ ID ] [ false [ ) ID int ] }",
  "func ID ( ID : [ - 123 } ID ( ) / true * ID [ ID ] ] bool ) { <=",
  "func ID ( ID : [ - <= } ID ( ) / true * ID [ ID ] ] bool ) { 123",
  "func ID ( ID : [ - * } ID ( ) / true <= ID [ ID ] ] bool ) { 123",
  "func ID ( bool : [ ] ID ) { var ID : bool return ID ( ) [ true / ( ID ) / ( false ) ] }",
  "true ID ( bool : [ ] ID ) { var ID : bool return ID ( ) [ func / ( ID ) / ( false ) ] }",
  "true ID ( bool : [ ] ID ) { var ID / bool return ID ( ) [ func / ( ID ) : ( false ) ] }",
  "func ID ( ID [ int , ID : [ ( - ID : false and - ID and ID ] [ - - false ] ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID [ int , ID : [ ( - ID : false and - ID and ID ] [ - - false ] func ] [ ] int ) { } ) ID ( ) { }",
  "func ID ( ID [ int , ID ID [ ( - ID : false and - ID and : ] [ - - false ] func ] [ ] int ) { } ) ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) ID [ ] bool { return 123 + false + ( - - ( 123 ) ) } func : ( ) { }",
  "func ) ( ID : bool , ID : bool ) ID [ ] bool { return 123 + false + ( - - ( 123 ) ) } func : ( ID { }",
  "func ) ( ID : bool , ID : bool ) ID [ ] bool { return 123 + false + ( - - ( 123 ) ) } func : ( ID { }",
  "func ID ( ID : int ) { call ID ( ID ( - ID * - ( ( ) ) ) } func ID ID ) { }",
  "func ID ( ID : int ) { call ID ( ID ( - ID * - ( ( ) ) ) } func ID ID ) { }",
  "func ID ( ID : int ) { call ID ( ID ( - ID * ) ( ( - ) ) } func ID ID ) { }",
  "func ID ( ID : bool , ID : int ) : bool { var ID : [ ] int var ID ID bool call ID ( ) return } func : ( ) { }",
  "func ID ( ID : bool , ID : int ) : bool { var ID call [ ] int var ID ID bool : ID ( ) return } func : ( ) { }",
  "func ID ( ID : bool , ID : int ) : bool { var ID call [ ] bool var ID ID int : ID ( ) return } func : ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : bool call ID ( ID ( ) [ 123 ] [ - ( true ) ID ) print ] }",
  "func ID ( ID : int , ID : bool ) { var ID : bool call ID ( ID ID ) [ 123 ] [ - ( true ) ( ) print ] }",
  "func ID ( ID : int , ID : bool ) { var ID : bool call ID ( ID ID ) [ 123 ] [ - ( true ) print ) ( ] }",
  "func ID ( ID : [ 123 / ID ( ) [ - ID ID [ - - ( ( false ) ) ] [ ( ID ) ] ] / ID ] bool ) { } func - ( ) { }",
  "func ID ( ) : [ 123 / ID ( ) [ - ID ID [ - - ( ( false ) ) ] [ ( ID ID ] ] / ID ] bool ) { } func - ( ) { }",
  "func ID ( ) : [ 123 / ID ( ) [ - ID ID [ - - ( ( false ) ) ] [ ( ID ID ] { / ID ] bool ) { } func - ( ) ] }",
  "func ID ( ID : int , ID : bool ) ID var { : int var ID : int print 123 * ID [ true ] [ false ] / - - - ( ID ) print - - ( ID ) }",
  "func ID ( ID : int , ID : bool ) ID var { : int var ID : int print 123 * ID [ true ] - false ] / - [ - ( ID ) print - - ( ID ) }",
  "func ID ( ID : int , ID : bool ) ID - { : int var ID : int print 123 * ID [ true ] - false ] / var [ - ( ID ) print - - ( ID ) }",
  "func ID ( ID : [ false / - - - - true + ID / ( ( - ( ID bool ) ) ] [ ] ) ) { } func ID ( ) { }",
  "func ID ( { : [ false / - - - - true + ID / ( ( - ( ID bool ) ) ] [ ] ) ) ID } func ID ( ) { }",
  "func ID ( } : [ false / - - - - true + ID / ( ( - ( ID bool ) ) ] [ ] ) ) ID } func ID ( ) { {",
  "func ID ( ) { var ID ID [ ] [ ] int var : : [ ( false / 123 ) ] bool }",
  "func ID ) ) { var ID ID [ ] [ ] int var : : [ ( false / 123 ( ] bool }",
  "func ID ) ) { var ID ID [ ] false ] int var : : [ ( [ / 123 ( ] bool }",
  "func ID ( ) { print ID { ID * true or ( ( ( ID ) ) ) if - ( - false ) - } } func ID ( ) { }",
  "func or ( ) { print ID { ID * true ID ( ( ( ID ) ) ) if - ( - false ) - } } func ID ( ) { }",
  "func ID ( ) { var ID call [ ] int var ID : bool : ID ( ) call ID ( ) return } func ID ( ID : int ) { }",
  "func ID ( ) { var ID call [ ] int var ID : bool : return ( ) call ID ( ) ID } func ID ( ID : int ) { }",
  "func ID ( ) { var ID call [ ] int var ID ID bool : return ( ) call : ( ) ID } func ID ( ID : int ) { }",
  "func ID ( ) : int { } ( ( ID ( 123 ) ) ) print",
  "func ( ( ) : int { } ( ( ID ID 123 ) ) ) print",
  "func ID ( ID : [ var [ ] int ) : int { ] ID : int while ( ID ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ var [ ] int while : int { ] ID : int ) ( ID ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ var [ ] int while ID int { ] ID : int ) ( : ) { } call ID ( ) } func ID ( ) { }",
  "func ID ID ) : bool { var ID : bool var ID : int return - true / - ID ( ) [ ( - ID ) ] } func ( ( ) { }",
  "func ID ID ) : bool { var ID : bool var ID : int return - true / - ID ( ) [ ( - ID ) ] } func ( ( ) { }",
  "func ID ID ( : bool { var ID : bool var ID : int return - true / - ID ) ) [ ( - ID ) ] } func ( ( ) { }",
  "func ID ( ) : bool ] while ID [ ( ( ID ) ) { [ ( ID ) ] { } print true }",
  "func ID ( ) : bool ] while ID [ ( ( ID } ) { [ ( ID ) ] { ) print true }",
  "func ID ( while : bool ] ) ID [ ( ( ID } ) { [ ( ID ) ] { ) print true }",
  "func ID ( ) { { var ID : true 123 + ( ID / ( false ) / [ ) ] int } } func ID ( ) { }",
  "func ID ( ) var { { ID : true 123 + ( ID / ( false ) / [ ) ] int } } func ID ( ) { }",
  "func ID ( ) var ( { ID : true 123 + ( ID / ( false ) / [ ) ] int } } func ID { ) { }",
  "ID ID ( ID : bool ) { print false + ( ( false / - func * ID ) ) }",
  "ID ID ( ( : bool ) { print false + ID ( false / - func * ID ) ) }",
  "ID ID ( ( : bool ) { print false false ID ( + / - func * ID ) ) }",
  "func ID ( ) : bool { var ID : int var ID : bool if ( ) / true / - false ID { } if ID { } }",
  "func ID ( ) : bool { var ID : int var ID : if bool ( ) / true / - false ID { } if ID { } }",
  "func ID ( ) : bool { var ID : int var ID : if bool ( ) / true / - false ID { } if ID { } }",
  "func ID ID ID : int , ID : int ) { var ID : [ ] [ ] [ ] [ ] int if ID { } call ( ( ) }",
  "ID ID ID ID : int , func : int ) { var ID : [ ] [ ] [ ] [ ] int if ID { } call ( ( ) }",
  "ID ID : ID : int , func ID int ) { var ID : [ ] [ ] [ ] [ ] int if ID { } call ( ( ) }",
  "func ID ( ID : bool , ID : bool , ID : [ ( 123 / ( ( - true ) ) ) ] ID ) { } func int ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ( 123 / ID ( - true ) ) ) ] ( ) { } func int ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ( 123 / ID ( - true ) ) ) ] ( ) { } func int ( ) { }",
  "func ID ( ) : bool { return true / ID ( ( ID ID ) ) ) * ( ( ( 123 ) ) ) } func ( ( ) { }",
  "func ID ( ) : bool { return true / ID ( ( ID ID ) ) ) * ( ( ( ) ) ) 123 } func ( ( ) { }",
  "func ID ( ) : bool { ( true / ID ( ( ID ID ) ) ) * return ( ( ) ) ) 123 } func ( ( ) { }",
  "func ID ( ID : bool , ID : int call { print ( ID ( ID ) ) ) ID ( ) }",
  "func ID ( ID : ID , bool : int call { print ( ID ( ID ) ) ) ID ( ) }",
  "func ID ( ID : ID ) bool : int call { print ( ID ( ID ) ) , ID ( ) }",
  "func ID ( ) : [ ID ( 123 / - ( ( - ( ) ) ) ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ] : [ ID ( 123 / - ( ( - ( ) ) ) ) ] [ ) int { } func ID ( ) { }",
  "func ID func ] : [ ID ( 123 / - ( ( - ( ) ) ) ) ] [ ) int { } ( ID ( ) { }",
  "func int ( ) { var ID : [ - ID [ - - - ID - - ( ( ( false ) ) ) - true ] [ ID ] ] ID }",
  "func int ( ) ] var ID : [ - ID [ - - - ID - - ( ( ( false ) ) ) - true { [ ID ] ] ID }",
  "func int ( ) ] var ID : [ - ID [ - - - ID - - ( ( ( false ) ) ) - true { [ ID ] ] ID }",
  "func ID [ ID : bool ) : [ ID [ - ID ( ) [ ID ] [ true ] ] ( ID ] ] int { }",
  "func ID [ ID ( bool ) : [ ID [ - ID ( ) [ ID ] [ true ] ] : ID ] ] int { }",
  "func var ( ) { ID ID : bool var ID : bool ID ( - - ( false >= ID ) ) = true if ID { } }",
  "func var : ) { ID ID ( bool var ID : bool ID ( - - ( false >= ID ) ) = true if ID { } }",
  "func var : ) { ID ID ( bool var ID : bool ID ( - - ( false >= ID ) ) { true if ID = } }",
  "func ID ( ID : int } { ID ( ) = true / ( true / ( ID ) ) ) func ID ( ) { }",
  "func ) ( ID : int } { ID ( ) = true / ( true / ( ID ) ) ID func ID ( ) { }",
  "func ) ( ID : int } { ID ( ) true = / ( true / ( ID ) ) ID func ID ( ) { }",
  "func { ( ) { var ID : bool call ID ( ) call ID ( ) return } func ID ( ) { ID } call ID ( ) }",
  "func { ( ) ID var ID : bool call ID ( ) call ID ( ) return } func ID ( ) { ID } call { ( ) }",
  "func { ( ) ID var ID : bool call ID ( ) call ID ( ) return } func ID ( ) { ID } call { ( ) }",
  "func ID ( ) { var ID : int } func ID ( ID : [ ] int : : int { var ID ) bool var ID : int call ID ( ) print ID }",
  "func ID ( ) { var ID : int } func ID ( ID : [ ] int : : int { var ID ) bool var ID : int call ID ( ) print ID }",
  "func ID ( ) ID var ID : int } func { ( ID : [ ] int : : int { var ID ) bool var ID : int call ID ( ) print ID }",
  "func ID ( ) { var ID : } var ID : bool print ID ( - - - ID ( ) ) if ( - 123 ) { bool }",
  "func ID ( ) { var ID : } var ID : bool print ID ( - - { ID ( ) ) if ( - 123 ) - bool }",
  "func ID ( ) - var ID : } var ID : bool print ID ( { - { ID ( ) ) if ( - 123 ) - bool }",
  "func ID ( ID : [ ] [ ] bool ) { var ID : int print ( ( ID ) ) } func ID ) ( { }",
  "ID ID ( ID : [ ] [ ] bool ) { var ID : int print ( ( ID ) ) } func func ) ( { }",
  ": ID ( ID ID [ ] [ ] bool ) { var ID : int print ( ( ID ) ) } func func ) ( { }",
  "func ID ( ) { var ID : true call ID ( 123 * ID ( int + true + false ) ) } func ID ( ) { }",
  "func ID ( ) { var ( : true call ID ID 123 * ID ( int + true + false ) ) } func ID ( ) { }",
  "func ID ( ) var { ( : true call ID ID 123 * ID ( int + true + false ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ID { var ID : bool call ID ( ID ( - ( - 123 ) ) ) ) = ID } func ID ( ) { }",
  "func ID ( var : bool , ID : bool , ID : bool ID { ID ID : bool call ID ( ID ( - ( - 123 ) ) ) ) = ID } func ID ( ) { }",
  "func ) ( var : bool , ID : bool , ID : bool ID { ID ID : bool call ID ( ID ( - ( - 123 ) ) ) ) = ID } func ID ( ID { }",
  "func ID ( ID : [ ] int , ID : int ) : [ - false / ID [ ID ] * - - ( ID ) ] [ { bool { } func ID ( ) ] }",
  "func ID ( ID : [ ] [ , ID : int ) : [ - false / ID int ID ] * - - ( ID ) ] [ { bool { } func ID ( ) ] }",
  "func ID ( ID : [ ] [ , : ID int ) : [ - false / ID int ID ] * - - ( ID ) ] [ { bool { } func ID ( ) ] }",
  "func ID - ID : int , ID : [ ] bool , ID : bool ) { var ID : [ ] [ true ( ( 123 ) - - ( ID ) ] bool var ID : [ ] bool }",
  "func ID - ID : int , ID : [ ] bool , ID : bool ) { var ID : [ ] [ true ( ( 123 ) - - ( ID ) ] bool var ID : [ ] bool }",
  "func ID ( ) { var ID : int var ID : bool { var ID : [ ] while bool ( 123 ) { } } }",
  "func ID ( ) { var ID ] int var ID : bool { var ID : [ : while bool ( 123 ) { } } }",
  "func ID ( ) { var ID ] int var ID : bool { var ID : [ : while bool { 123 ) ( } } }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { ID func ID ( ID : int , } : int , ID : int ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { ID func ID ( ID : int , } : int , ID : int ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool int { ID func ID ( ID : int , } : ) , ID : int ) { }",
  "func ID ( ID : bool , ID : bool , ID - [ ID + : ( ID ( ) ) - - ( ( ( ( 123 ) ) ) ) ] int ) { }",
  "func ID ( ID : bool , ID 123 bool , ID - [ ID + : ( ID ( ) ) - - ( ( ( ( : ) ) ) ) ] int ) { }",
  "func ID ( ID ID bool , ID 123 bool , ID - [ : + : ( ID ( ) ) - - ( ( ( ( : ) ) ) ) ] int ) { }",
  "func ID ( ) { var ID : bool var ID { [ ( - ( 123 * ID ) ) ] bool } func ID ( ) : }",
  "func ID ( ) { var ID : bool var ID { [ ( - ( 123 ) ID ) ) ] bool } func ID ( * : }",
  "func ID ( ) ( var ID : bool var ID { [ ( - { 123 ) ID ) ) ] bool } func ID ( * : }",
  "func ID ( ID : int , : : int , ID : [ ] [ ] bool ) ID [ ] bool { var ID : bool return 123 }",
  "func ID ( ID : int , : : int , ID : [ ] [ ] bool ) ID var ] bool { [ ID : bool return 123 }",
  "func ID ( ID : int , : : int return ID : [ ] [ ] bool ) ID var ] bool { [ ID : bool , 123 }",
  "func ID ( ID : bool { : bool ) var ID : [ ID ( false + ID + ID ) ] bool }",
  ") ID ( ID : bool { : bool func var ID : [ ID ( false + ID + ID ) ] bool }",
  ") ID ( ID : bool { : bool func var ID : [ ID ( false + ID + ID ) ] bool }",
  "func ID ( ID : bool , ID : [ ] [ ( - - false * ID + 123 + 123 { ] [ ] [ ] [ ] bool ) ) }",
  "( ID ( ID : bool , ID : [ ] [ func - - false * ID + 123 + 123 { ] [ ] [ ] [ ] bool ) ) }",
  "func ID ( ) : int return var ID : int var ID : bool { true / ID [ false ] * ( ( ( ID ) ) ) }",
  "func ID ( ) : int return var ID ( int var ID : bool { true / ID [ false ] * ( ( : ID ) ) ) }",
  "func ID ( ) : int return var ID ( int var ID : false { true / ID [ bool ] * ( ( : ID ) ) ) }",
  "func ID ( ) { var ID : [ ] int while false * false + true * ( ( ID ) ) - - - true { } while - - - func { } } 123 ID ( ) { }",
  "func ID ( ) { : ID var [ ] int while false * false + true * ( ( ID ) ) - - - true { } while - - - func { } } 123 ID ( ) { }",
  "func ID ( ID : int [ { print - ID ) - - 123 <= ID ] ID = false }",
  "func ID ( ID : int ID { print - [ ) - - 123 <= ID ] ID = false }",
  "func ID { ID : int ID ( print - [ ) - - 123 <= ID ] ID = false }",
  "func ID ( ) : int { var ID : ] - ID ( ) [ ID [ ID ] [ ] [ ] int }",
  "func ID ( ) : int { var ID ID ] - ID ( ) [ : [ ID ] [ ] [ ] int }",
  "( ID func ) : [ ] [ ] bool { { var ID : int return ( - false ) } }",
  "( ID func ) : [ ] [ ] bool { { var ID : int return false - ( ) } }",
  "( ID func int : [ ] [ ] bool { { var ID : ) return false - ( ) } }",
  "func ID ( ID : int ) { ) 123 - - - ( - ( ( ID while ) ) { } }",
  "func ID ( ID : int ) { ) } - - - ( - ( ( ID while ) ) { 123 }",
  "func ID ( ID : int ) { ) } - - - ( ID ( ( - while ) ) { 123 }",
  "func ID ( ) { call ID ( ID ) - ID ( ) [ false / ( false ) ] ) ID = ID } func ID ( - { }",
  "func ID ( ) { call ID ( ID ) - ID ( ) [ false / ( false ) ] ) ID } ID = func ID ( - { }",
  "func ID ( ) { / ID ( ID ) - ID ( ) [ false call ( false ) ] ) ID } ID = func ID ( - { }",
  "func ) ( ) { var ID : int var ID : bool while ( - ( 123 + ID + ( 123 ) ) ID { } } func ID ( ) { }",
  "func ) ( ) { var ID : int var ID : ID while ( - ( 123 + bool + ( 123 ) ) ID { } } func ID ( ) { }",
  "func ) ( ) { var ID : int 123 ID : ID while ( - ( var + bool + ( 123 ) ) ID { } } func ID ( ) { }",
  "func ID ) ID : [ ID [ - - - 123 / ( false / - ID ( ] ] bool ) { }",
  "func ID ) ID : [ ID { - - - 123 / ( false / - ID ( ] ] bool ) [ }",
  "func ID ( ID ] [ ] [ ] bool , ID : bool , ID : [ : [ ] bool ) : int { var ID : bool var ID : bool }",
  "func ID ( ID ] [ ] [ ] bool , ID : bool , ID : [ : [ ] bool ) : int { var ID : var bool ID : bool }",
  "bool ID ( ID ] [ ] [ ] bool , ID : func , ID : [ : [ ] bool ) : int { var ID : var bool ID : bool }",
  "func ( ID ID : int , ID : int ) : bool { }",
  "func ( ID ID int : , ID : int ) : bool { }",
  "int ( ID ID int : , ID : func ) : bool { }",
  "func ID ( ) : bool { var ID : int } func ID ( ) 123 if ID ( ) [ - { ] { } }",
  "func ID ( ) : bool { var ID : int } func ID ( ) 123 if ID ( ) [ - { ] { } }",
  "func ID ( ) : bool { var ID : int } func ID ( ) 123 if ID ( ) [ - { ] { } }",
  "func ID ( ID : int , ID : int ) func var ID : int print ( ID ) / - ID [ - ( false ) ] / 123 } { ID ( ) { }",
  "func ID ) ID : int , ID : int ( func var ID : int print ( ID ) / - ID [ - ( false ) ] / 123 } { ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ ID [ true / ( ID ) * - - 123 { [ ID ] ] int } func ID ( ) ] }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ ID [ true / ( ID ) * ( - 123 { [ ID ] ] int } func ID - ) ] }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ ID [ true ) ( ID ) * ( - 123 { [ ID ] ] int } func ID - / ] }",
  "func ID ( ID } bool , ID : int , ID : int ) { var ID : int while ( ID ( ) ) { } :",
  "func ID ( ID } bool ) ID : int , ID : int ) { var ID : int while ( ID ( ) , { } :",
  "ID ID ( func } bool ) ID : int , ID : int ) { var ID : int while ( ID ( ) , { } :",
  "func ID : ID ( int , ID : [ ] bool , ID : [ ] int ) : int { var ID : bool var ID : int if ID { } }",
  "func ID : ID int int , ID : [ ] bool , ID : [ ] ( ) : int { var ID : bool var ID : int if ID { } }",
  "func ID : ID int int , ID : [ ] bool , ID : [ ] ( ) : int { var ID : bool ID ID : int if var { } }",
  "[ ID ( ID : func ( ID [ - - ( true ) ] [ true ] ) ] [ ] bool ) { }",
  "[ ID ( ID : func ( ID [ - - ( true ) ] { true ] ) ] [ ] bool ) [ }",
  "[ ID ( ID : func ( ID [ - - ( true ) ] { true ] ) ] [ ] bool ) [ }",
  "func ID ( ID false [ ( : * false / 123 + ID ( true ) + true ) ] bool ) { }",
  "func ID ( true false [ ( : * false / 123 + ID ( true ) + ID ) ] bool ) { }",
  "func ID ( true false [ ( : * false / 123 + ID ( true ) + ID ) ] bool ) { }",
  "func ID ( ) { ID [ ) - ID ( ) / - ( true ) * - ID ) ] [ ID ] = true print true } func ID ( ( { }",
  "func ID ( ) { ID [ ) - ID ( ) / - ( true ) * - ID ) ] [ ID ] = true print true } func ID ( ( { }",
  "func ID ( ) { ID ( ) - ID ( ) / - [ true ) * - ID ) ] [ ID ] = true print true } func ID ( ( { }",
  "+ ID ( ) : [ ( true * false func ID ( ( - ( false ) ) ) + - - - ( ID ) ) ] int { }",
  "+ ID ( ) : ( ( true * false func ID ( ( - ( false ) ) ) + - - - [ ID ) ) ] int { }",
  "func ID ( ID : int , ID : int ) : [ ] [ - - func ( ID ) ) ] int { } ( ID ( ) { }",
  "func ID ( ID : int , ID : int ) { [ ] [ - - func ( ID ) ) ] int : } ( ID ( ) { }",
  "func ID ( ID : int , ID : int ) { [ ] [ - ( func ( ID ) ) ] int : } - ID ( ) { }",
  "func ID ( ID : int ) : [ ] [ ] } { while 123 + - - ID [ ( ID ) ] { } } func ID ( ) { bool",
  "func ID ( ID : int ) : [ ] [ ] } { while 123 + - - ID [ ( ID ] ) { } } func ID ( ) { bool",
  "func ID ( ID : int ) : [ ] [ ] } { while 123 + - - ID [ ( ID ] ) { } } func ID ( ) { bool",
  "func ID ( ID : bool int ID : bool ) : , { }",
  "func ID ( ID : bool int ID : bool ) : { , }",
  ") ID ( ID : bool int ID : bool func : { , }",
  "func ID 123 ) { { print - 123 / ( 123 * - ID [ ( ] ) * ( - ID ) } } func ID ( ) { }",
  "func ID 123 ) ( { print - 123 / ( 123 * - ID [ ( ] ) * ( - ID ) } } func ID { ) { }",
  "func ID 123 ) ( { print - 123 / ( 123 * - ID [ ( ] ) ID ( - * ) } } func ID { ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : bool { var ID : bool ID ( ( ( ( ID ) } ) ) = 123 ) func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : : ) : bool { var ID int bool ID ( ( ( ( ID ) } ) ) = 123 ) func ID ( ) { }",
  ") ID ( ) { var ID : bool var ID : bool call ID ( - 123 - - true / ( false ) / ID func print ( true ) }",
  ") ID ( ) { - ID : bool var ID : bool call ID ( - 123 var - true / ( false ) / ID func print ( true ) }",
  "func ID ( ID : bool ID : int { var ) : bool call ID ( ID ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : bool ID : int { var ) : bool call ID ( ID ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : bool ID : int { var ) : bool call ID ( ID ( ID ) ID } func ) ( ) { }",
  "func ID ( ) ID int { var ID : [ ] int { var ID : [ ( - false ) ] bool var : : [ ] [ ] bool } while false { } }",
  "func ID ( ) ID int { var ID : [ while int { var ID : [ ( - false ) ] bool var : : [ ] [ ] bool } ] false { } }",
  "func ID ( ) ID ID { var int : [ while int { var ID : [ ( - false ) ] bool var : : [ ] [ ] bool } ] false { } }",
  "func ID ( ) : [ ] int { var ID : [ ] int return ) - ( - - false false } func ID ( ) { }",
  "- ID ( ) : [ ] int { var ID : [ ] int return ) - ( func - false false } func ID ( ) { }",
  "- ID ( ) : [ ] int { var ID func [ ] int return ) - ( : - false false } func ID ( ) { }",
  "func ID ( ) { var ID : int while - ( ID [ - ID ] [ ID ] ) } } print ID } func ID ( ) { {",
  "func ID ( ) { print ID : int while - ( ID [ - ID ] [ ID ] ) } } var ID } func ID ( ) { {",
  "func ID ( ) { print ID var int while - ( ID [ - ID ] [ ID ] ) } } : ID } func ID ( ) { {",
  "func ID ( ) ] bool { var ID : int call ID ( ) } func ID ( ) : bool { var ID : [ ] [ : int }",
  "func ID ( ) ] bool { var ID } int call ID ( ) : func ID ( ) : bool { var ID : [ ] [ : int }",
  "func ID ( ) ] bool { var ID ( int call ID } ) : func ID ( ) : bool { var ID : [ ] [ : int }",
  "func ID ( ID : bool , ID : ] ) : [ - - ( ( ( 123 ) ) ) ] [ bool int { }",
  "func ID ( ID : bool , ID : ] ) ( [ - - ( ( : 123 ) ) ) ] [ bool int { }",
  "func ID ( ID : bool , ID : ] ) ( int - - ( ( : 123 ) ) ) ] [ bool [ { }",
  "func ID ( ID : [ ] [ ] int , ID : [ ID : ID [ 123 ] + ( ID ) ] bool , ID + bool ) { }",
  "func ID ( ID : [ bool [ ] int , ID : [ ID : ID [ 123 ] + ( ID ) ] bool , ID + ] ) { }",
  "func ID ( ID : [ bool [ ] int , ID : [ ID : ID [ + ] 123 ( ID ) ] bool , ID + ] ) { }",
  "func ID ( ID : int , - : [ ] int ) : [ ] int { var ID : [ false + ID ID true ] bool var ID : bool }",
  "func ID ( ID : ID , - : [ ] int ) : [ ] int { var int : [ false + ID ID true ] bool var ID : bool }",
  "func ID ( ID var int , ID : bool ) { : ID : int call ID ( ) print - - - - false } func ID ( ) { }",
  "func ID ( ID var int , ID : bool ) { : ID : int call ID ( ) print func - - - false } - ID ( ) { }",
  "func ID ( ID var ) , ID : bool ) { : ID : int call ID ( ) print func - - - false } - ID ( int { }",
  "func ID ( ID : [ ID ( 123 ) false == true + ID - ] [ ] [ ] bool ) { }",
  "func ID ( ID : [ ID ( 123 ) false == true + ID - ] [ ] [ ] bool ) { }",
  "func ID ( ID : [ ID ( false ) 123 == true + ID - ] [ ] [ ] bool ) { }",
  "func ID ( ) { var ID : bool var ID : bool while true * ID ( - ) ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool ) ID : bool while true * ID ( - ) ID { } } func ID ( var { }",
  "* ID ( ID : [ ( true func ID ( ) [ - ID ( ) ] [ ( ( ID ) ) ] ) ] int ) { }",
  "* ID ( ID : [ ( true func ID ( ) [ - ID ( ) ID [ ( ( ] ) ) ] ) ] int ) { }",
  "func ID ( ) { var ID : int if ( { ( 123 ) ) ) { } while - 123 ( } }",
  "func ID : ) { var ID ( int if ( { ( 123 ) ) ) { } while - 123 ( } }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : [ ] { if - true * ( - false ) / - ID { int } } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : [ ] { if - true * ( - } ) / - ID { int } } } func ID ( ) { false",
  "func ID ( ID : [ ] [ ] int , ID : [ ] [ ID ( ID ) ] [ ] ) ] bool , ID : [ ] [ ] int [ { } func ID ( ) { }",
  "func ID ( ID : bool ] [ ] int , ID : [ ] [ ID ( ID ) ] [ ] ) ] [ , ID : [ ] [ ] int [ { } func ID ( ) { }",
  "func ID ( ID : bool ] [ ] int , ID : [ ] [ ID ( ID ) ] [ ] ) ] [ , ID : [ func [ ] int [ { } ] ID ( ) { }",
  "func ID ( ) : int { if 123 * ( - - ID ( 123 ) * ) false { } print - ( ID ) }",
  ") ID ( ) : int { if 123 * ( - - ID ( 123 ) * func false { } print - ( ID ) }",
  "func ID ( ID : ID , ID : bool , ID : [ ( ( int [ 123 ] [ 123 ] ) ) ] bool ) { }",
  "ID ID ( ID : func , ID : bool , ID : [ ( ( int [ 123 ] [ 123 ] ) ) ] bool ) { }",
  "ID ID ( ID : func , ID : bool , ID : [ ] ( int [ 123 ] [ 123 ] ) ) ( bool ) { }",
  "func ID ( ) : int { ID ( 123 * ( - ( - ID { ) ) = ID print true } func ID ( ) ) }",
  "func ID ( ) : int { ID ( 123 * ( - = - ID { ) ) ( ID print true } func ID ( ) ) }",
  "func ID ( ) : int { ID ( 123 * ( - = - } { ) ) ( ID print true } func ID ( ) ) ID",
  "func ID ( ID : int : { var ID : int var ID ) [ ( ( false ) ) ] int }",
  "func ID ( ID : int : { var ID : int ( ID ) [ ( var false ) ) ] int }",
  "func [ ( ID : int : { var ID : int ( ID ) ID ( var false ) ) ] int }",
  "func ID ( ] : [ false <= true and - ( false * ID * ( ( - - ID ) ) ) and ( - - - ( - - true ) ) ID [ ] int ) { }",
  "func ID ( ] : [ false <= true and - ( false * ID * ( ( - - ID ) ) ) and ( - - - ( - - true ) ) ID [ ] int ) { }",
  "func ID ( ] : [ false <= true and - ( false * ID * ( ( - - ID ) ) ) and ( - - - int - - true ) ) ID [ ] ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool } : int { var ID : int var ID : bool return ID ( ) )",
  "func ID ( ID : int , ID : int , ID : bool } : int { var ID : int var ID : bool return ID ( ) )",
  "func ID ( ID : int , ID : int , ID : bool } : int { var ID : int var ID ) bool return ID ( ) :",
  "func ID ] ) { var ID : bool print ( - ID ( ) [ - false ( [ 123 ] ) ID = true } func ID ( ) { }",
  "func ID ] ) { var ID : bool print ( - ID ( ) [ - false ( [ 123 ] ) ID = true } func ID ( ) { }",
  "func ID ( ID : [ - ID / 123 / ID [ - - true / ID / ( false bool ] [ false ] ] ) ) { } func ID ( ) { }",
  "func ID ( ID : [ - false / 123 / ID [ - - true / ID / ( false bool ] [ ID ] ] ) ) { } func ID ( ) { }",
  "func ID ( ID : [ - false / 123 / ID [ - - true / ID / ( false func ] [ ID ] ] ) ) { } bool ID ( ) { }",
  "func ID ( ID : [ ] var , ID : bool , ID : bool ) { var ID : [ ( true ) ] int bool ID : [ ] bool }",
  ": ID ( ID : [ ] var , ID : bool , ID : bool ) { var ID func [ ( true ) ] int bool ID : [ ] bool }",
  ": ID ( ID : [ ] var , true : bool , ID : bool ) { var ID func [ ( ID ) ] int bool ID : [ ] bool }",
  "func ID ( ID : , , ID : int bool ID : bool ) { { var ID : [ ( ID ) ] bool var ID : int } } func ID ( ) { }",
  "func ID ( ID : , , ID : int bool ID : bool ) ) { var ID : [ ( ID ) ] bool var ID : int } } func ID ( { { }",
  "func ID ( ID : , , ID : int bool ID : bool ) ) { var ID : [ ( ID ) ] bool { ID : int } } func ID ( var { }",
  ") ID ( ) : int { var ID : [ ( ( - ID / ( ID func ) ) ] bool var ID : [ ] bool }",
  "[ ID ( ) : int { var ID : [ ( ( - ID / ( ID func ) ) ] bool var ID : ) ] bool }",
  "[ ID ( ) : int { var ID : [ ( ( - ID / ( ID func ) ) ] bool var ID : ) } bool ]",
  "func ID ( ) { var ] : bool var ID : [ ID bool ID [ - false / ( ID ) ] [ ID ] = - 123 } func ID ( ) { }",
  "func ID ( ) { var ] : bool var ID : [ ID bool ID [ - false / ( ID } ] [ ID ] = - 123 } func ID ( ) { )",
  "func ID ( ) { var ] : bool var ID : [ ID bool ID [ - false / ( ID } ] [ ID ] = - 123 } func ID ( ) { )",
  "func ID ( { : bool ) ID call ID ( ( ( ID [ - ID ] [ ID ] ) ) ) }",
  "func ID ( { : bool ) ID call ID ( ( ( ID [ - ID ] [ ] ID ) ) ) }",
  "func ID ( { : bool ) ID call ID ( ( ( ID [ ) ID ] [ ] ID ) ) - }",
  "} ID ( ) { func func ID ( ID : bool ) { call ID ( - ( - true ) ) }",
  "} ID ( ) { func func ID ( ID - bool ) { call ID ( : ( - true ) ) }",
  "} ID ( ) { func func ID ( ID - bool ) { call ID ( : ( - true ) ) }",
  "func ID ( ) : int { var ID ID int if ( : ( false * ID ) ) { } }",
  "func { ( ) : int ID var ID ID int if ( : ( false * ID ) ) { } }",
  "func { ( ) : int ID var ID ID int if ( : ( false * ID ) ) { } }",
  "func ID ( ) : int { var ID : bool ( - ID [ - ( ID ) ] [ ID ] ) ] [ var ID : bool }",
  "func ID ( ) : int ) var ID : bool ( - ID [ - ( ID ) ] [ ID ] { ] [ var ID : bool }",
  "func ID ( ID : int , ID : int ) : [ ] bool { var ID : [ ] bool { func ID ( ) : [ false ] int } }",
  "func ID ( ID : int , ID : : ) : [ ] bool { var ID int [ ] bool { func ID ( ) : [ false ] int } }",
  "func ID [ ID : int , ID : : ) : ( ] bool { var ID int [ ] bool { func ID ( ) : [ false ] int } }",
  "func ID ( ) { while ID * 123 > false * ( ( ID ) ) / false { ( call ID } ) } func ID ( ) { }",
  "func ID ( ) { while ID * 123 > false * ( ( ID ) ) / false { ( call } } ) ID func ID ( ) { }",
  "func ID ( ) { while ID * 123 > false ) ( ( ID ) ) / false { ( call } } * ID func ID ( ) { }",
  "func ID ( ID : ) , ID : int ) { var ID : int call ID ( ) print true * ( true ) } func ID ( int { }",
  "func ID ( ID : ) , ID : int ) { var ID : func call ID ( ) print true * ( true ) } int ID ( int { }",
  "func ID ( ID : ) , ID : int ) { var ID : func call ID ( ) int true * ( true ) } int ID ( print { }",
  "func ID ( ) true int { var ID : int var ID : int { var ID : int var ID : bool print false * ( : ) print - - ID } print - ( true ) }",
  "func ID ( ) true int { var ID : int var ID : int { var ID : int var ID : ( print false * bool : ) print - - ID } print - ( true ) }",
  "func ID ( ) true int { var ID : int var ID : int { var ID : int var ID : ( print false * bool : ) print - - ID } print - ) true ( }",
  "func ID ( ) func [ ] [ ] int { var ID : bool } : ID ( ) { var ID : [ ] int call ID ( ) }",
  "func ID ( bool func [ ] [ ] int { var ID : ) } : ID ( ) { var ID : [ ] int call ID ( ) }",
  "func ID ( bool func [ { [ ] int { var ID : ) } : ID ( ) ] var ID : [ ] int call ID ( ) }",
  "func - ( ) { var ID : [ - true / ID ( - ( ( ID ) ) ) ] int }",
  "func - ( ) { var ID : [ - true / ID ) - ( ( ID ) ( ) ] int }",
  "func - ( ) { var ID : [ - true / ID ) - ( ) ID ) ( ( ] int }",
  "func ) ( ID { var ID : [ ] bool } func ID ( ) : [ ] bool { if ( ID ) { } }",
  "func ) ( ID { var ID : [ ] bool } func ID ( ) : [ ] bool { if ( ID ) { } }",
  "func ) ( ID { var ID : [ ] bool } func ID ( ) : [ } bool { if ( ID ) { } ]",
  "func ID ( ) { var ID : int while 123 * ( ID ( 123 ) ) { } ID = - ID } func ID } ) { (",
  "func ID ( ) { var ID : int while 123 * } ID ( 123 ) ) { } ID = - ID } func ID ( ) { (",
  "ID ID ( ID : [ ID / false / - true + ( ID ( 123 ) ) + func ] [ ] bool ) { }",
  "ID ID ( ID : [ ID / { / - true + ( ID ( 123 ) ) + func ] [ ] bool ) false }",
  "ID - ( ID : [ ID / { / ID true + ( ID ( 123 ) ) + func ] [ ] bool ) false }",
  "func ID ( ) { while 123 / ID ( ) [ ( ID [ - 123 ] [ ID ( ) ] [ false ] { } print ID } func ID ] ) { }",
  "func ID ( ) { while 123 / ID ( ) [ ( ID [ - 123 ] [ ID func ) ] [ false ] { } print ID } ( ID ] ) { }",
  "func ID ( ID : bool ) { var ID : - print - ID [ 123 + - - - int ID ] [ - ( - ID ) ] { } } func ID ( ) { }",
  "func ID ( ID : bool ) { - ID : - print - ID [ 123 + - var - int ID ] [ - ( - ID ) ] { } } func ID ( ) { }",
  "func ID ( ID : bool ) { - ID : - print - ( [ 123 + - var - int ID ] [ - ID - ID ) ] { } } func ID ( ) { }",
  "func ID ( ID : int ( ID : int , ID : int ) : bool { var ID : int var ID : bool return true * , ID ) } func ID ( ) { }",
  "func ID ( ID : int ( ID : int , ID : int ) : bool { return ID : int var ID : bool var true * , ID ) } func ID ( ) { }",
  "func ID bool ID : int ( ID : int , ID : int ) : ( { return ID : int var ID : bool var true * , ID ) } func ID ( ) { }",
  "func ID ( ) : [ - ( - true ) ( false / - - ( ( true ) * ) ) ] bool { }",
  "func ID } ) : [ - ( - true ) ( false / - - ( ( true ) * ) ) ] bool { (",
  "func ID ( ] { var ID : [ - - false / 123 * - ID ( ) - ID ) [ ] bool }",
  "[ ID ( ] { var ID : func - - false / 123 * - ID ( ) - ID ) [ ] bool }",
  "[ ID ( ] / var ID : func - - false { 123 * - ID ( ) - ID ) [ ] bool }",
  "func ID ( ) { var ID : [ ID ( ( - ID ID ) ) ) ] [ ] bool } func ( ( ) { }",
  "func ID ( ) { var ID : [ ID ( ( - ID ID ) ) ) ] [ bool ] } func ( ( ) { }",
  "func } ( ) { var ID : [ ID ( ( - ID ID ) ) ) ] [ bool ] ID func ( ( ) { }",
  "func ID ( ID : int ) { } func ID ( ) { var ID : int var ID : int { var ID : bool var ID : [ ] bool } } false { while }",
  "func ID ( ID : int ) { } func ID ( ) { var ID : int var ID : int { var ID : bool var ID : [ ] bool } } false { while }",
  "func ID ( ID : [ ] bool , ID : } ) { var ID : [ ] [ - 123 / - ID ] int var ID : int bool",
  "func ID ( ] : [ ] bool , ID : } ) { var ID : [ ID [ - 123 / - ID ] int var ID : int bool",
  "[ ID ( ] : [ ] bool , ID : } ) { var ID : [ ID func - 123 / - ID ] int var ID : int bool",
  "func ID ( ID : [ ] int ) { var ID - bool var ID : int print true : ( ( - ( ID ) ) ) + - 123 print ( - ID ) }",
  "func ID ( ID : [ ] int ) ) var ID - bool var ID : int print true : ( ( - ( ID { ) ) + - 123 print ( - ID ) }",
  "func ID ( ID : [ ] int ) ) var ID ) bool var ID : int print true : ( ( - ( ID { - ) + - 123 print ( - ID ) }",
  "func ID ( ID : [ false ] ID [ false / ID and ID / [ ( ID ) ] / ID ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ false ] ID [ false / ID and ID / [ ( ID ) ] / ID func bool ) { } ] ID ( ) { }",
  "func ID ( ) { var ID : [ ] int var ID ) [ - - ( ID ( ( ID ) : ) ] [ ] bool } func ID ( ) { }",
  "func - ( ) { var ID : [ ] int var ID ) [ ID - ( ID ( ( ID ) : ) ] [ ] bool } func ID ( ) { }",
  "func - ( ) { ID ID : [ ] int var ID ) [ ID - ( var ( ( ID ) : ) ] [ ] bool } func ID ( ) { }",
  "func ID ] ID : bool , ID : [ ( bool , ID : bool ) { return } func ID ( ID : [ ] bool ) : bool { }",
  "func ID return ) : int { var ID : bool ( true }",
  "func ID { ) : int return var ID : bool ( true }",
  "func ID var ) : int return { ID : bool ( true }",
  "func ID ( ID : [ , ID : bool , ID : bool ) { ID [ ID [ 123 ] bool - ID ] ] = ( ID ) if ID { } }",
  "func ID ( ID : [ , ID : bool , ID : bool ) { ID [ ID [ 123 ] bool - ID ] ] = ( ID ) if ID { } }",
  "func ] ( ID : bool , ID : bool , ID : [ ID [ ID ( ) / ID / - - ID ] [ ( true ) ] ID [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] [ ID ( ) / ID / - - ID ] [ ( true ) ] ID [ ] bool ) { } func ID ( ) { }",
  "} ID ( ID : bool , ID : bool , ID : [ ] [ ID ( ) / ID / - - ID ] [ ( true ) ] ID [ ] bool ) { } func ID ( ) { func",
  "func ID ( ID : bool ) : [ ( - ( - != ID ( 123 - - - ID ) ) ) ] int { }",
  "func ID ( ID : bool ) : [ ( - 123 - != ID ( ( - - - ID ) ) ) ] int { }",
  "func ID [ ID : bool , ID : int , ID : bool ) : [ ] bool { print ID [ ( - - true ) ] ( true ] { } } func ID ( ) { }",
  "func ID [ ID : bool , ID : int , ID : bool ) : [ ] bool { print ID [ ( - - true ) ] ( true ] { } } func ID ( ) { }",
  "func ID [ ID : bool , ID : int , ID : ( ) : [ ] bool { print ID [ bool - - true ) ] ( true ] { } } func ID ( ) { }",
  "func ID ( ID while int ) : [ ] bool { : ( false * - ID [ - ID ] ) { } }",
  "func ID ( ID while ( ) : [ ] bool { : int false * - ID [ - ID ] ) { } }",
  "func ID ( ID * ( ) : [ ] bool { : int false while - ID [ - ID ] ) { } }",
  "func ID ( ID : / ] int ) : bool { if 123 * ID [ - - ID { } }",
  "func ID ( ID : / ] int bool : ) { if 123 * ID [ - - ID { } }",
  "func ID ( int : / ] ID bool : ) { if 123 * ID [ - - ID { } }",
  "func ID ( ID : bool , ID : int ) : int { var ID ID int { var : : [ - - ID ] int var ID : [ ] int } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { ID ID ID int { var : : [ - - var ] int var ID : [ ] int } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { ID ID ID int { var : : [ - - var ] int var ID : func ] int } } [ ID ( ) { }",
  "func ID ( ) { var ID : bool } func ID ( int : [ ID [ false * ( ID ) * ID ] [ ( - ( ( ( 123 ) ) ) ) ] ] ID ) { }",
  "func ID ( ) { ) ID : bool } func ID ( int : [ ID [ false * ( ID ) * ID ] [ ( - ( ( ( 123 var ) ) ) ] ] ID ) { }",
  "func ID ( ) { ) ID : bool } func ID ( int : [ ID [ false * ( ID ) * ID ] [ ( - ( ( 123 ( var ) ) ) ] ] ID ) { }",
  "bool ID ( ) : func { var ID : int var ID : int } func ID ( ID : int , ID : bool ) : bool { var ID : int var ID : int }",
  "bool ID ( ) : func { var ID : int var ID : int } func ID ( ID : int , ID : bool ) : bool { var ID : int var ID : int }",
  "bool ID ( ) : func ID var ID : int var ID : int } func ID ( ID : int , { : bool ) : bool { var ID : int var ID : int }",
  "func ID ( ) : { { while ID ( ) [ false / ( - ID ) ] int } } func ID ( ) { }",
  "func ID ( ) { : { while ID ( ) [ false / ( - ID ) ] int } } func ID ( ) { }",
  "func ID ( ) { : { while ID ( ) [ false } ( - ID ) ] int / } func ID ( ) { }",
  "func ID ( ID : int ) : } func ID ( ID { [ ] [ ( - ( ID ) ) ] bool ) { }",
  "func ID ( ] : int ) : } func ID ( ID { [ ] [ ( - ( ID ) ) ID bool ) { }",
  "func ID ( ] : int ) : } func ID ( ID { [ ] [ ( - ( ID ) ) ID bool ) { }",
  "func ID ( ID : [ ] int , ID : int ) { return } func ID ( ) { while ID } ) { } ID = - ID (",
  "func ID int ID : [ ] ( , ID : int ) { return } func ID ( ) { while ID } ) { } ID = - ID (",
  "func ID int ID : { ] ( , ID : int ) { return } func ID ( ) { while ID } ) [ } ID = - ID (",
  "func ID ( ID : int , ID : int , ID : int ) : bool } var ID : int return {",
  "func ID ( ID : int , ID : int , ID : int ) : bool } : ID var int return {",
  "func ID ( ID : int , ID : int , ID : int ) : bool } : ID var int return {",
  "func ID ( ) { var ID : int { : ID var [ true * ( ( - ( ID ) ) ) / ID ] int } { } }",
  "func { ( ) ID var ID : int { : ID var [ true * ( ( - ( ID ) ) ) / ID ] int } { } }",
  "func { ( ) ID var ID : int { : ID var [ true * ( ( - ( ) ) ) ID / ID ] int } { } }",
  "func ID ( ) : [ - and true - false * - - ( ( ID ) ) * ( - - false ) and - - ID ] bool { }",
  "func ID false ) : [ - and true - false * - - ( ( ID ) ) * ( - - ( ) and - - ID ] bool { }",
  "func ID false ) : [ - and true - false * - - ( ( ID ) ) * ( - - ( ) and - - ID ] bool { }",
  "func ID ( ) { ID { true + - ( ( - ( ( false ) ) ) ) + - 123 ) = ( true ) } func ID ( ) ( }",
  "func ID ( ) { ID { true + - ( ( - ( ( false ) ) ) ) + - 123 ) = ( } ) } func ID ( ) ( true",
  "func ID ( ) { ID { true ( - ( ( - + ( false ) ) ) ) + - 123 ) = ( } ) } func ID ( ) ( true",
  "[ ID ( ) : func ID ( 123 * ID / ( - true ) ) ] bool { }",
  "[ ID ( ID : func ID ( 123 * ) / ( - true ) ) ] bool { }",
  "func ID ( ) { var ID : bool 123 if - ID * ( ID ( ) ) * ( ( ( ID ) ) ) { } }",
  "func ID ( ) { var ID * bool 123 if - ID : ( ID ( ) ) * ( ( ( ID ) ) ) { } }",
  "func ID ( ) { var ID * if 123 bool - ID : ( ID ( ) ) * ( ( ( ID ) ) ) { } }",
  "func ID [ ID : [ ] bool ) { ID [ - ID [ ( ID ) ] ( 123 ] ] = ID } func ID ( ) { }",
  "func ID { ID : [ ] bool ) [ ID [ - ID [ ( ID ) ] ( 123 ] ] = ID } func ID ( ) { }",
  "func ID { ID : [ ] bool ) [ ID [ - ID [ ( ID ) ] ( 123 ] ] = ID } func ID ( ) { }",
  "func ID ( ID : [ ( true / int - true - ( ( 123 ) ) ) ] - ) { } func ID ( ) { }",
  "func ID ( ID : [ ( true / int - true - ( ( 123 ) ) ) ] - ) { } ID func ( ) { }",
  "func ID ( ID : [ ( true / int ) true - ( ( 123 ) ) ) ] - - { } ID func ( ) { }",
  "func ID ( ID : int ) { var ID : int return - - ( false / false / - true func } ) ID ( ) { }",
  "func ID ( ID : int ) { var ID : int return - - ( false / false / - true ID } ) func ( ) { }",
  "func ID ( ID : int ) ( var ID : int return - - { false / false / - true ID } ) func ( ) { }",
  "func ID ( ID : bool ( { var ID : bool while ID * - ID <= true * ( ( 123 ) ) * ) ID ) { } if - ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : bool } { var ID : bool while ID * - ID <= true * ( ( 123 ) ) * ) ID ) { ( if - ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : bool } { var ID : bool while ID * - ID <= true * ( ( 123 ) ) * ) ID ) { ( if - ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int : { var ID ) [ ( ( - ( ( - true ) ) ) ) ] int }",
  "func ID ( ID : bool , ID : int , ID : int } { var ID ) [ ( ( - ( ( - true ) ) ) ) ] int :",
  "ID ID ( ID : bool , func : int , ID : int } { var ID ) [ ( ( - ( ( - true ) ) ) ) ] int :",
  "] ID ( ) : [ func [ ( ID ( ) [ - 123 * ( ( - 123 ) ) * ( ( - - 123 ) ) ] ) ] int { } func ID ( ) { }",
  "] ID ( ) ) [ func [ ( ID ( ) [ - 123 * ( ( - 123 ) ) * ( ( - - 123 ) ) ] : ] int { } func ID ( ) { }",
  "] ID ( ) ) [ ( [ ( ID ( ) [ - 123 * ( ( - 123 ) ) * ( ( - - 123 ) ) ] : ] int { } func ID func ) { }",
  "func ID ( ID : int , ID : int ) : [ ] bool { var ID : bool print ( - ( ( ID ) ) } func ID - ) { }",
  "func ID ( ID : int , ID : int ) : [ ] bool { var ID : bool print ( - ( ( } ) ) } func ID - ) { ID",
  "func ID ( ID : int , ID : int ) : [ ] bool { var ID ) bool print ( - ( ( } : ) } func ID - ) { ID",
  "ID ID ( ) { var ID : int ID [ ID / - ( false * - ID * ( ( ID ) ) ) ] = - true } func func ( ) { }",
  "ID ID ( ) { ) ID : int ID [ ID / - ( false * - ID * ( ( ID ) var ) ] = - true } func func ( ) { }",
  "ID ID ( ) { ) ID : int ID [ ID / - ( false * - ID * ( ( ID ) var ) ] = - true } func func { ) ( }",
  "func ID ( ) { ID false / ID [ print ( false + ID ) ] / - ID call ID ( ) }",
  "func ID ( ) { ID false / ID [ print ( false + ID ( ] / - ID call ID ) ) }",
  "func ID ( ) { ID false / ID [ print ( false + ID ( ] / - ID call ID ) ) }",
  "func : ( ) : int { var ID : [ ] int var ID ID [ ID ( ID ( ) ) ] [ ] int }",
  "func : ( ) : int { var ID : [ ) int var ID ID [ ID ( ID ( ) ] ] [ ] int }",
  "func ( ( ) : int { var ID : [ ) int var ID ID [ ID ( ID : ) ] ] [ ] int }",
  "func ID ( ID : int ) { ID [ ID ( ) [ false ] ID / 123 ] ] [ ID * = true }",
  "func } ( ID : int ) { ID [ ID ( ) [ false ] ID / 123 ] ] [ ID * = true ID",
  "func } ( ID : int ) { ID [ ID ( ) [ false ] ID / 123 ] ] [ ID * = true ID",
  "func ID ( ( : [ ( true * ( ID ID ( ) ) ) * - ID ) ] bool ) { }",
  "func ID ( ( : [ ( true * ( ID ID ( ) ) ) - * ID ) ] bool ) { }",
  "( ID ( ( : [ ( true * ( ID ID func ) ) ) - * ID ) ] bool ) { }",
  "func ) ( ) : [ - 123 / - ID ( false - - ( ID ID ) / ( ID ) ] int { } func ID ( ) { }",
  "/ ) ( ) : [ - 123 func - ID ( false - - ( ID ID ) / ( ID ) ] int { } func ID ( ) { }",
  "/ ID ( ) : [ - 123 func - ID ( false - - ( ) ID ) / ( ID ) ] int { } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ] bool var ID : bool } func ID ( ID : ) , ID : [ - ( ( ( ID ) ) int ] int , ID : [ ] bool ) { }",
  "func ID ( ID : bool ) { var ID : [ ] bool var ID : bool } func ID ( ID : ) , ID : [ - ( ( ( ID ) ) int ] int , ID : [ ] bool ) { }",
  "func ID ( ID : bool ) { { ID : [ ] bool var ID : bool } func ID ( ID : ) , ID : [ - ( ( ( ID ) ) int ] int , ID : [ ] bool ) var }",
  "func ID ( ID : [ ] [ ] bool , ID : [ ] int , ID : bool print { var ID : int var ID : bool ) ( 123 ) }",
  "func ID ( ID : [ ] [ ] bool , ID : [ ] int , ID bool : print { var ID : int var ID : bool ) ( 123 ) }",
  "func ID ( ID : [ ] [ ] bool , ID : [ ] int , ID bool : print { var ID : int var ID ) bool ) ( 123 : }",
  "func ID ( ID : [ ] int , ID : int , ID : { ) : [ ID ( ) - ( true ) ] int int } func ID ( ) { }",
  ": ID ( ID : [ ] int , ID func int , ID : { ) : [ ID ( ) - ( true ) ] int int } func ID ( ) { }",
  "func ID ( ) : ] { var ID : int print 123 + ID [ ID [ ID int ] [ false ] - - - false ID = ID }",
  "ID ID ( ) : ] { var ID : int print 123 + ID [ ID [ ID int ] [ false ] - - - false func = ID }",
  "ID ID ( ) : ] { var ID : int print 123 - ID [ ID [ ID int ] [ false ] - - + false func = ID }",
  "func ID ( ) ) call ID ( ) print ( ID ( 123 != false ) { }",
  "} ID ( ) ) call ID ( ) print ( ID ( 123 != false ) { func",
  "func { ( ) : [ - - ( true / ( ID ( ) [ - ID ] ) ) ] int ID }",
  "func { ( ) : [ - - ( true / ( ID ( ) ID - [ ] ) ) ] int ID }",
  "func { ( ) : [ - - ( true / ( ID ( ) ID ] [ - ) ) ] int ID }",
  "func ID ( ) : [ - - ( ID + false - ( / ID ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) : [ - - ( ( + false - ID / ID ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) : [ - - ( ( + false - ID / ID ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : bool } ID : bool ) { var ID : bool var ID : [ ] [ ] [ 123 / 123 ] [ ] bool ,",
  "func ID ( ID : bool } ID : bool ) { var ID 123 bool var ID : [ ] [ ] [ 123 / : ] [ ] bool ,",
  "func ID ( ID : bool } ID : bool ) { var ID 123 bool var ID : [ ] [ ] [ 123 / : ] [ ] bool ,",
  "func ID ( ID : bool , ID : int ) : int { var ID false bool var ID : [ : * ID ( ) * - ( true ) ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { var ID false bool var ID : [ : * ID ( } * - ( true ) ] int ) func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { var ID false bool var ID : [ : * ID ( } * - ( true ) ] int ) func ID ( ) { }",
  "func ID ( ) { var ID func [ ] [ ] bool var ID : int } : ID ( ) { var ID : int var ID : [ ] int }",
  "func ID ( ) { var ID func [ ] [ ] bool var ID : int int : ID ( ) { var ID : int var ID : [ ] } }",
  "func ID ( ) { var ID func : ] [ ] bool var ID : int int [ ID ( ) { var ID : int var ID : [ ] } }",
  "func ID ( ID : int int : ) { var ID : bool while false and ID ( - - true ) and - ID { } } func ID ( ) { }",
  "func ID ( ID : ( int : ) { var ID : bool while false and ID int - - true ) and - ID { } } func ID ( ) { }",
  "func ID ( ID : ( and : ) { var ID : bool while false int ID int - - true ) and - ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : { false / ( ID ( false ) ) ] bool ) { } func ID ( ) [ }",
  "func ID ( ID : bool , ID : bool ID ID : { false / ( , ( false ) ) ] bool ) { } func ID ( ) [ }",
  "func ID ( ID : bool ( ID : bool ID ID : { false / ( , , false ) ) ] bool ) { } func ID ( ) [ }",
  "func ID ( ID : bool ) : [ ] [ ( - ID [ false * - ID / true ] ] - ID [ ) ] int { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] [ ID - ID [ false * - ID / true ] ] - ( [ ) ] int { } func ID ( ) { }",
  "func ID ( ID : - ) : [ ] [ ID - ID [ false * - ID / true ] ] bool ( [ ) ] int { } func ID ( ) { }",
  "func ID ( int : int , ID : int , ID : int ) : ID { var ID : bool var ID : int }",
  "func ID ( ID : int , ID : int , int : int ) : ID { var ID : bool var ID : int }",
  "func ID ( ID : int , ID : int , int : int ) : ID { var ID var bool : ID : int }",
  "func ID ( ) { ID ( ) [ true > - 123 * - ID [ ID ] [ 123 ] ] = ( func ID ) ) } ( ID ( ) { }",
  "func ID > ) { ID ( ) [ true ( - 123 * - ID [ ID ] [ 123 ] ] = ( func ID ) ) } ( ID ( ) { }",
  ") ID ( ID : [ true / true + - ( - ( ID ) ) + - - ID ] int func { }",
  ") ID ( ID : [ true / true { - ( - ( ID ) ) + - - ID ] int func + }",
  ") ID ( ID : [ true / true { - ( - ( ID ) ) + + - ID ] int func - }",
  "func ID ( ID : [ - ID [ + false + ID ( ) [ - false ] - - ID ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ - ID [ + false { ID ( ) [ - false ] - - ID ] ] int ) { } func ID ( ) + }",
  "func ID ( ID } [ - ID [ + false { ID ( ) [ - false ] - - ID ] ] int ) { : func ID ( ) + }",
  "func ID ( ) { var ID ) bool var ID : bool if - ( ID [ ( ID : ] ) { } print false }",
  "func ID ( ) { var ID ) bool var ID : bool if - ( ID [ : ID ( ] ) { } print false }",
  "func ID ( ) { var ID ) bool var ID ( bool if - ( ID [ : ID : ] ) { } print false }",
  "func ID ( ) { var ID : int if ID >= { - ID ( ) ) { } } func ID ( ) ( }",
  "func ID ) ) { var ID : int if ID >= { - ID ( ( ) { } } func ID ( ) ( }",
  "func ID ) ) { var ID : int if ID >= - { ID ( ( ) { } } func ID ( ) ( }",
  "func ID ( ID : [ ] [ - true * - ID ) ( ID ) ] int != { } func ID ( ) { }",
  "func ID } ID : [ ] [ - true * - ID ) ( ID ) ] int != { } func ID ( ) { (",
  "func ID } ID : [ ] ID - true * - [ ) ( ID ) ] int != { } func ID ( ) { (",
  "func ID ( ID : [ - false / ) 123 * false / ID > - true ( ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : { ( ID ( ) / ( ID ) ) ] bool } func ID ( ) [ }",
  "func ID ( ) : int { var ID : bool var ID : { ( ID ( ) / ( ID ) ) ] bool } func ID [ ) ( }",
  "func ID ( ) : int { var ID : bool var ) : { ( ID ( ) / ( ID ID ) ] bool } func ID [ ) ( }",
  "func ID ( ) func } { ID ( ID : bool ) { { while true * 123 / - ID { } if true { } } }",
  "func { ( ) func } ID ID ( ID : bool ) { { while true * 123 / - ID { } if true { } } }",
  "func { ( ) func } ID ID ( ID : bool ) { { while true * 123 / - ID { } if true } } { }",
  "func ID ( ) { var ID : bool var ID : bool while ID [ - true / ( ID ) * ID ] { } while ( - ( ( ) ( ID ) ) ) ) ( { } }",
  "func ID ( ) { var ID : bool var ID : bool while ID [ { true / ( ID ) * ID ] { } while ( - ( ( ) ( ID ) ) ) ) ( - } }",
  "func ID ( ) { var ID : bool var ID : bool while ( [ { true / ID ID ) * ID ] { } while ( - ( ( ) ( ID ) ) ) ) ( - } }",
  "func ID ( ) : [ ] bool { } func ID ( ) { var ( : [ ( - ( ( ( ID true ) ) ) ) ) ] bool var ID : bool }",
  "func ID ( ) : [ ] bool { } var ID ( ) { func ( : [ ( - ( ( ( ID true ) ) ) ) ) ] bool var ID : bool }",
  "func ID ( ) : [ ] bool { } var ID ( bool { func ( : [ ( - ( ( ( ID true ) ) ) ) ) ] bool var ID : ) }",
  "func ID ( ) : int { var ID : bool var ID : bool return } { ID ( ) func var ID : [ ID ] int }",
  "func ID ( ) : int { var ID : bool var ID : bool return } { ID ( ) func var ID : [ ID ] int }",
  "func ID ( ) : int { var ID : bool var ID : bool return } { ID var ) func ( ID : [ ID ] int }",
  "func ID ( ID : [ ] bool , ID : [ ] [ ] bool , ID : { ( - ( ID ) ) ] int ) { } func ID ( ) [ }",
  "func ID ( ID : [ ] bool , ID : [ ] [ } bool , ID : { ( - ( ID ) ) ] int ) { ] func ID ( ) [ }",
  "func ID ( ID : [ ] bool , ID : [ ] [ } ( , ID : { bool - ( ID ) ) ] int ) { ] func ID ( ) [ }",
  "func ID ( ) { var ID ( int print : - true / ( - ID ) ) ID = - ID }",
  "func ID ( ) { var ID ID int print : - true / ( - ( ) ) ID = - ID }",
  "123 ID ( ID : int , ID : [ func * - ID / false + true / ID - - - ID ] [ ] int ) { }",
  "123 ID ( ID false int , ID : [ func * - ID / : + true / ID - - - ID ] [ ] int ) { }",
  "123 ID ( ID false ] , ID : [ func * - ID / : + true / ID - - - ID ] [ int int ) { }",
  "func ID ( ID : bool ) return bool { var ID : int var ID : bool : - ID ( ) / ID }",
  "func ID : ID ( bool ) return bool { var ID : int var ID : bool : - ID ( ) / ID }",
  "func ID : ID ( bool int return bool { var ID : ) var ID : bool : - ID ( ) / ID }",
  "func ID ( } : [ ( ( ( false / ( - true ) / false ) ) ) ] int ) { ID",
  "func ID ( } : [ ( ( ( false true ( - / ) / false ) ) ) ] int ) { ID",
  "func ID ( } - [ ( ( ( false true ( : / ) / false ) ) ) ] int ) { ID",
  "func ID ( ) { var ID : [ : [ ] bool var ID ] bool call ID ( - ID ( ID ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ : ( ] bool var ID ] bool call ID ( - ID ( ID ) ) } func ID [ ) { }",
  "func ID ( ) { var ID : [ : ( ] bool var ID ] ) call ID ( - ID ( ID ) bool } func ID [ ) { }",
  "func : ( ID : bool , ID : [ ] bool , ID : [ ] bool ) ID int { var ID : bool print ID ID = ( ID ) }",
  "func : ( ID , bool : ID : [ ] bool , ID : [ ] bool ) ID int { var ID : bool print ID ID = ( ID ) }",
  "func : ( ID , bool : ID : [ ] = , ID : [ ] bool ) ID int { var ID : bool print ID ID bool ( ID ) }",
  "func ID ( ID : bool , ID : [ ( ) / ( false * ( 123 ) 123 ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool ( ID : [ ( ) / , false * ( 123 ) 123 ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool ( ID : [ ( ) / , false * ( 123 ) 123 ) ] bool ) func } { ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ( false * ID ( ) [ false ] [ - ( - ] ) ] * 123 ) ID bool ) { }",
  "func ID ( ID : ] , ID : bool , ID : [ ( false * ID ( ) [ false ] [ - ( - int ) ] * 123 ) ID bool ) { }",
  "func ID ( ID : ] , ID : bool , ID : [ ( false * ID ( ) [ false ] [ - ( - ) int ] * 123 ) ID bool ) { }",
  ": ID ( ) : int { var ID func int }",
  ": ID func ) : int { var ID ( int }",
  ": ID func : ) int { var ID ( int }",
  "ID ID ( ID : bool , ID : [ ] [ false * - ID [ ( 123 ) ] / true ] bool , func : bool ) { } func ID ( ) { }",
  "ID ID ( ID : bool , ID : [ ] { false * - ID [ ( 123 ) ] / true ] bool , func : bool ) [ } func ID ( ) { }",
  "ID ID ( ID : bool , ID : [ ] { true * - ID [ ( 123 ) ] / false ] bool , func : bool ) [ } func ID ( ) { }",
  "func ID ( ) : [ ] bool { call ( ID ) }",
  "func call ( ) : [ ] bool { ID ( ID ) }",
  "func call ( ) : [ ] ( { ID bool ID ) }",
  "func ID bool ID : ( , ID : int , ID : [ false and - - ( ID ) ] int ) { } func ID ( ) { }",
  "func ID bool ID : ( , ID : int , ) : [ false and - - ( ID ) ] int ) { } func ID ( ID { }",
  "func ID bool ID : ( , ID : [ , ) : int false and - - ( ID ) ] int ) { } func ID ( ID { }",
  "func ID ( ) { var ID : int call ID ( ID [ ID ( ) [ - ( ID ) ] [ true ] ] [ { ] ) } func ID ( ) true }",
  "func { ( ) ID var ID : int call ID ( ID [ ID ( ) [ - ( ID ) ] [ true ] ] [ { ] ) } func ID ( ) true }",
  "func { { ) ID var ID : int call ID ( ID [ ID ( ) [ - ( ID ) ] [ true ] ] [ ( ] ) } func ID ( ) true }",
  "func ID ( ) : } { return int func ID ( ) : int { var ID : int var ID : [ ] [ ] [ ID ] [ ] int }",
  "func ID ( ) : } { return int func ID ( ) : int { var ID : int var ID : [ ] [ ] [ ID ] [ ] int }",
  "func { ( ) : } { return int func ID ( ) : int ID var ID : int var ID : [ ] [ ] [ ID ] [ ] int }",
  "func ID ( ) { var [ : [ ] ID ] bool var ID : int }",
  "func ID ( ) { int [ : [ ] ID ] bool var ID : var }",
  "func ID ( ) { int [ } [ ] ID ] bool var ID : var :",
  "func ID ( ID : bool ) { var ID : bool var * : [ 123 / ID - false ID true + ( ( ID ) ) ] int }",
  "func ID ( ID : bool ) { var bool : ID var * : [ 123 / ID - false ID true + ( ( ID ) ) ] int }",
  "func ID ( ID : bool ) { var bool : ID var * : [ 123 / ID - false ( true + ID ( ID ) ) ] int }",
  "func ID ( ) { var ID : [ ] : var ID int bool print false and false * - ID and true }",
  "func ID ( bool { var ID : [ ] : var ID int ) print false and false * - ID and true }",
  "func ID ( bool { var ID : [ ] : ID var int ) print false and false * - ID and true }",
  "func ID ( ID : bool , ID : [ ] + ID * - ID [ ID ] + ID false int ) { }",
  "func ID ( ID : bool , ID : [ ] } ID * - ID [ ID ] + ID false int ) { +",
  "func ID ID ( : bool , ID : [ ] } ID * - ID [ ID ] + ID false int ) { +",
  "func ID ( ID : bool , ID ] int , ID : int ) { var ID : [ : [ ] [ ] bool { var ID : [ ] [ ] int } }",
  "func ID { ID : bool , ID ] int , ID : int ) { var ID : [ : [ ] [ ] bool ( var ID : [ ] [ ] int } }",
  "func ID ( ID : bool , ID : : , ID : int ) { var ID : int var ID bool [ 123 - false ] int }",
  "func ID ( ID : : , ID bool : , ID : int ) { var ID : int var ID bool [ 123 - false ] int }",
  "func ID ( ID : : , ID [ : , ID : int ) { var ID : int var ID bool bool 123 - false ] int }",
  "func ID ( ID : bool , ID : bool ) { var ID : int ] ID : [ ] [ ] [ ] [ ] [ ID var bool }",
  "bool ID ( ID : bool , ID : bool ) { var ID : int ] ID : [ ] [ ] [ ] [ ] [ ID var func }",
  "func ID ( ID { var ID : [ ] [ - - ID [ ID - ( - true ) + false ] [ ) ] ] bool }",
  "func ID ( ID { var ID : [ ] [ - ( ID [ ID - - - true ) + false ] [ ) ] ] bool }",
  "func ID ( ID { var ID : [ ] [ - ( } [ ID - - - true ) + false ] [ ) ] ] bool ID",
  "func ID ( ) : - { call ID ( - 123 int ID * - ( ID ) ) } func ID ( ) { }",
  "func ID ( } : - { call ID ( - 123 int ID * - ( ID ) ) } func ID ( ) { )",
  "func ID ( } : - { call ID { - 123 int ID * - ( ID ) ) } func ID ( ) ( )",
  "func ID ( ID : [ - false * - false + 123 * - - 123 * - ( ] int ) { } func ID ID ) { }",
  "func ID ( ID : [ - false * - false + 123 * - - 123 * - ( ] int ) { ) func ID ID } { }",
  "func ) ( ID : [ - false * - false + 123 * - - 123 * - ( ] int ) { ID func ID ID } { }",
  "func ID ( ) { call ( ( - - ID ID ( ) * true > ID ) ) } func ID ( ) { }",
  "func ID ( ) { call ( ( - - ID ID ( ) * true > ID ) ) ID func } ( ) { }",
  "( ID ( ) { call ( ( - - ID ID func ) * true > ID ) ) ID func } ( ) { }",
  "func / ( ID : int , ID : int ) { var ID : int ID [ 123 ID ( ( ID ) ) ] = - ID call ID ( ) } func ID ( ) { }",
  "func / ( ID : int , ID : int ( { var ID : int ID [ 123 ID ( ) ID ) ) ] = - ID call ID ( ) } func ID ( ) { }",
  "func / ( ID : int , ID : int ( { var ID : ( ID [ 123 ID int ) ID ) ) ] = - ID call ID ( ) } func ID ( ) { }",
  "func ID ( : : bool , ID : bool ) : [ ] int { var ID ID int var ID : int }",
  "func ID ( : : ] , ID : bool ) : [ bool int { var ID ID int var ID : int }",
  "func ID } : : ] , ID : bool ) : [ bool int { var ID ID int var ID : int (",
  "func ID ( ID : int , ID : [ false / true / ( false and false and ( ( - ID ) ) ) ] bool , ID : ID ] [ ] bool ) { } func [ ( ) { }",
  "func ID ( ID : int , ID : [ false / true / ( false and false and bool ( - ID ) ) ) ] bool , ID : ID ] [ ] ( ) { } func [ ( ) { }",
  "func ID ( ID : ( , ID : [ false / true / ( false and false and bool int - ID ) ) ) ] bool , ID : ID ] [ ] ( ) { } func [ ( ) { }",
  "func ID ( ID : bool ] bool , ID : [ ) { var ID : bool var ID : [ ] bool ID ( ) [ 123 ] = - ( ID ) }",
  "func ID ( ID : bool ] bool , ID : [ ) { var ID - bool var ID : [ ] bool ID ( ) [ 123 ] = : ( ID ) }",
  "func ID ( ID : ID ] bool , bool : [ ) { var ID - bool var ID : [ ] bool ID ( ) [ 123 ] = : ( ID ) }",
  "func ID ( ) : [ ( 123 / ID - ( ID + - ( ( false ) ) - ( ( - ID ) ) ) ) ] bool { ID func } ( ) { }",
  "( ID ( ) : [ ( 123 / ID - func ID + - ( ( false ) ) - ( ( - ID ) ) ) ) ] bool { ID func } ( ) { }",
  "( } ( ) : [ ( 123 / ID - func ID + - ( ( false ) ) - ( ( - ID ) ) ) ) ] bool { ID func ID ( ) { }",
  "func ID ) ) : bool { var ID : int } func ID ( ID : int ( { }",
  "func ID ) ) : bool { : ID : int } func ID ( ID var int ( { }",
  "func ID ) ) func bool { : ID : int } : ID ( ID var int ( { }",
  "func ID ( ) : int { var ID : int var ID : int ID [ ( ID ( ( ID ) ) ) ] [ - - ID ] = ( 123 } )",
  "func ) ( ) : int { var ID : int var ID : int ID [ ( ID ( ( ID ) ID ) ] [ - - ID ] = ( 123 } )",
  "func ) ( ) ID int { var : : int var ID : int ID [ ( ID ( ( ID ) ID ) ] [ - - ID ] = ( 123 } )",
  "func ID ( ID : bool int ID : [ ( - ( ID [ ID ] ) ) ] [ ] [ ] , , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : bool int ID : [ ( - ( ID [ ID ] ) ) ] [ ] [ ] , , ID : bool ) { } func ID ( ) { }",
  "func ID ) ID : bool int ID : [ ( - ( ID [ ID ] ( ) ] [ ] [ ] , , ID : bool ) { } func ID ( ) { }",
  "] ID ( ID : bool , ID : int , ID : [ ( 123 + ID [ ID ] ) func bool ) { } func ID ( ) { }",
  "] ID ( ID : bool , ID : int , ID : [ ( 123 + ID [ ID ] ) func bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID } bool ) : bool { } func ID ( ) : [ ] [ ] [ ] int { var ID : bool :",
  "func ID ( ID : bool , ID } bool ) : bool { } func ID ( ) : [ ] [ ] [ ] int { var ID : bool :",
  "func ID ( ID bool bool , ID } bool ) : : { } func ID ( ) : [ ] [ ] [ ] int { var ID : bool :",
  "func ) ( ID : [ - - ID ( ) / false / ID != ID [ - ( - 123 ID ] [ ID ] ] [ ] int ) { }",
  "func ) ( ID : [ - - ID ( ) / false [ ID != ID [ - ( - 123 ID ] / ID ] ] [ ] int ) { }",
  "func ) ( ID : [ - - ID ] ) / false [ ID != ID [ - ( - 123 ID ] / ID ( ] [ ] int ) { }",
  "func ID ( ) { var ID : int { } return - ID ( ) * ] [ ID ] [ ( - ID ) ID } func ID ( ) { }",
  "func ID - ) { var ID : int { } return - ID ( ) * ] [ ID ] [ ( ( ID ) ID } func ID ( ) { }",
  "func ID - ) { var ID : int { } return - ID ( ) * ] [ ID ] [ ( ( ID ( ID } func ID ) ) { }",
  "func ID ID ) { var ID : bool var ID : bool if - true / - - ID / - true { } } func ( ( ) { }",
  "func : ID ) { var ID ID bool var ID : bool if - true / - - ID / - true { } } func ( ( ) { }",
  "func : ID ) { var ID ID bool var ID : bool if - true / - - ID / - true ( } } func { ( ) { }",
  "func { ( ) { var ID : bool } func ID ( ) ID var ID : int return - - - - ( ( ID ) ) }",
  "func { ( ) { var ID : - } func ID ( ) ID var ID : int return - bool - - ( ( ID ) ) }",
  "func { ( ) { ) ID : - } func ID ( ) ID var ID : int return - bool - - ( ( ID var ) }",
  "func ID ( ID : int , ID : int , ID : bool ) : [ ] [ ] bool { var - : int while ID - ( ID ) { } while false { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) : [ ] int ] bool { var - : [ while ID - ( ID ) { } while false { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) : [ ] var ] bool { int - : [ while ID - ( ID ) { } while false { } } func ID ( ) { }",
  "func ID ( var : bool { ) ID : int return true < ( 123 / false ) } func ID ( ) { }",
  "func ID ( var : bool { ) ID : int return true < ( 123 / false ) } func ID ( ) { }",
  "func ID ( var : bool { ) false : int return true < ( 123 / ID ) } func ID ( ) { }",
  "func ID ( ) : [ [ [ ( - false / - - false / false - ID + true ) ] ] ] bool { } func ID ( ) { }",
  "func ID ( ) : [ [ [ ( - false / - - false / false - ID + true ) ] ] { bool ] } func ID ( ) { }",
  "func ID ( ) : [ [ [ ( - false / - ] false / false - ID + true ) ] - { bool ] } func ID ( ) { }",
  "func ID ( ID : [ - ( - / ( - - 123 - 123 ) ) ] [ ] bool ) { }",
  "func ID ( 123 : [ - ( - / ( - - ID - 123 ) ) ] [ ] bool ) { }",
  "func ID ( 123 : [ - ( - / ( - - ID - 123 ) ) ] [ ] bool ) { }",
  "func ID ( ) : int { var ID : ( var ID : bool return ( ID [ ID ] [ bool ID ) ] ) }",
  "func ID ( ) : int { var ID : ( var ID : bool return ( ID [ ) ] [ bool ID ID ] ) }",
  "func ID ( ) : } { var ID : ( var ID : bool return ( ID [ ) ] [ bool ID ID ] ) int",
  "func ID ( ) : } { var ID : bool while - ID ( ID ( - ( ID ) ) ) { } { } int",
  "func ID ( ) ID } { var ID : bool while - ID ( : ( - ( ID ) ) ) { } { } int",
  "func ID ( ) ID } { var ID : bool while - ID - : ( ( ( ID ) ) ) { } { } int",
  "func ID ( ) : bool { var ID : bool } func ID ( ID : int ) : [ } - ( true ) ) ] bool { (",
  "func ID ( ) : bool { var ID : bool } ( ID ( ID : int ) : [ } - func true ) ) ] bool { (",
  "func ID ( ) : bool { var ID : bool } ( ( ( ID : int ) : [ } - func true ) ) ] bool { ID",
  "func ID ( ) : int { var ID : int while - - 123 * ( 123 * - - true * - - { ( 123 ) ) ) * false { } if true ( } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int while - - 123 * ( 123 * - - true * - - { ( 123 ) ) ) * false { } if true ( } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int while - - 123 * ( 123 * - - true * - - { ( 123 ) ) ) } false { } if true ( * } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ( : bool while - false / ID ID ) [ ID ] { } }",
  "[ ID ( ) : int { var ID : int var ( : bool while - false / ID ID ) func ID ] { } }",
  "[ ID ( while : int { var ID : int var ( : bool ) - false / ID ID ) func ID ] { } }",
  "func ID ( ) { false 123 * 123 - true - if / ( - ( ( - ID ) ) ) { } print ( ( ( ( ID ) ) ) ) }",
  "func ID ( ) { false 123 * 123 ( true - if / ( - ( ( - ID ) ) ) { } print ( ( ( - ID ) ) ) ) }",
  "func ID ( ) { false 123 * 123 ) true - if / ( - ( ( - ID ( ) ) { } print ( ( ( - ID ) ) ) ) }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool ID ( - ID - false ) = - - ID ID - while { } }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool ID ( - ID - false ) = - - ID ID - while { } }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool ID ( - - - false ) = - - ID ID ID while { } }",
  "func ID ( ID : int , ID : [ ] [ ( + - ( true ) true 123 ) ] int , ID : bool ) { }",
  "func ID ( ID : int , ID : [ ] [ ( + - ( true ) true 123 ) ] int ) ID : bool , { }",
  "func ID ( ID : int , ID : [ ) [ ( + - ( true ] true 123 ) ] int ) ID : bool , { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { [ ( - true * 123 <= ( ( ( true ) ) ) ) ] int : }",
  ", ID ( ID : int , ID : bool func ID : bool ) { [ ( - true * 123 <= ( ( ( true ) ) ) ) ] int : }",
  ", ID ( ID : int , ID : bool func ID : bool ) { [ ( - true * 123 <= ( ( ( true ) ) ) ) ] int : }",
  "] ID ( ID : [ func int ) { var ID : bool var ID : [ ] [ ( - ( false ) ) ] [ ] [ ] int } func ID ( ) { }",
  "] ID ( ID : [ func { ) int var ID : bool var ID : [ ] [ ( - ( false ) ) ] [ ] [ ] int } func ID ( ) { }",
  "] ID ( ID : [ func { ) int var ID : bool var ID : [ ] [ ( - ( false ) ) ] [ ] [ ] int } ID func ( ) { }",
  "func ID ( ID : [ ( 123 / - true or bool ( ( - ( ID ) ) ) ) ) ] [ ] ( ) { }",
  "func ID ( ID : [ ( 123 / ( true or bool ( ( - ( ID ) ) ) ) ) ] [ ] - ) { }",
  "func ID ( ID : [ ( true / ( 123 or bool ( ( - ( ID ) ) ) ) ) ] [ ] - ) { }",
  ") ID ( ) : int { var ID : [ ( false / ( - ID ) func ] int var ID : int } func ID ( ) { }",
  ") ID ( ) : int { var ID : [ ( false / ( - ID ) func ] int var ID : int } func { ( ) ID }",
  ") ID ( ) : int { ] ID : [ ( false / ( - ID ) func var int var ID : int } func { ( ) ID }",
  "func ID ( ID : int , ID : bool ) { { var ID : ID print ( int ( ) ) { } } { } }",
  "func ID ( ID : int int ID : bool ) { { var ID : ID print ( , ( ) ) { } } { } }",
  "func ID ( ID : int int ID : bool ID { { var ID : ) print ( , ( ) ) { } } { } }",
  "func ID ( ID : [ ( { ID ( ( ID ( ) ) ) ) ] bool ) - } func ID ( ) { }",
  "func ID ( ID : [ ( { ID ( ( ID ( ) ) ) ) ] bool ) - } func ID ( ) { }",
  "func ID ( ID : [ ( { ID ] ( ID ( ) ) ) ) ( bool ) - } func ID ( ) { }",
  "func ID ( ID ID bool , ID : int , ID : [ true + - - 123 * ID [ ID ] [ ID ] - ID ] [ ] int ) { } func : ( ) { }",
  "func ID ( ID ID bool , ID : int , ID : [ true + - - { * ID [ ID ] [ ID ] - ID ] [ ] int ) { } func : ( ) 123 }",
  "func - ( ID ID bool , ID : int , ID : [ true + - ID { * ID [ ID ] [ ID ] - ID ] [ ] int ) { } func : ( ) 123 }",
  "func ID ( ) { var ID : [ ] [ ] ) var ID : bool } func ID ( ID : [ ID ] int bool { }",
  "func ID ( ) { var ID : [ ] [ ] ) var ID : bool } func ID ( ID [ : ID ] int bool { }",
  "func ID ( ) { var ID : bool ] [ ] ) var ID : bool } func ID ( ID [ : ID ] int [ { }",
  "func ID ( ID : [ ] bool ) : [ ID ( true + ( ( - ) ) + ( ID ) ) ] int { }",
  "func ID ( ID : [ ] ) ) : [ ID ( true + ( ( - bool ) + ( ID ) ) ] int { }",
  "func ) ( ID : [ ] ) ) : [ ID ( true + ( ( - bool ) + ( ID ID ) ] int { }",
  "func ID ( ID : [ true + - - ID >= - ( true / ( true ) ] ) int ) { }",
  "func ID ( ID : [ true + ) - ID >= - ( true / ( true ) ] ) int - { }",
  "func ID ( ID : [ true + ) - ID >= - ( true / ( true ) - ) int ] { }",
  "func ID ( ID : int , ID : bool ) { var ID } bool var ID : int while ( ID [ ID ] ) { : }",
  "func ID ( ID : int , ID : bool ) { var ID } bool var ID : int while { ID [ ID ] ) ( : }",
  "func ID ( ID : int , ID : bool ) { var ID : bool var ID : int while { ID [ ID ] ) ( } }",
  "func ID ( ID : [ false / ID ( ) [ ID ( ) [ ID ] ] [ ( true ) ] / ID ] int ) { ) func ID ( } { }",
  "func ID ( ID : [ false / ID ( ) [ ( ( ) [ ID ] ] [ ( true ) ] / ID ] int ) { ) func ID ID } { }",
  "func ID ( ID : [ false / ID ( ) [ ( ( ) [ ID ] ] [ ( true ) ] / ID ] int ) { ) func ID ID } { }",
  "func ID ( ) { var ID : [ 123 / ID / - ( - - ID { ] int var ID : int } func ID ( ) ) }",
  "func ID ( ) { var ID : [ 123 / ID / - ( - - ID { ] int var ID : int } func ID } ) ) (",
  ") ID ( ) { var ID : [ 123 / ID / - ( - - ID { ] int var ID : int } func ID } func ) (",
  "func ID ( ) : bool { var ID : [ ( - 123 * ID ( ] ) ) ID bool } func ID ( ) { }",
  "ID ID ( ) : bool { var ID : [ ( - 123 * ID ( ] ) ) func bool } func ID ( ) { }",
  "ID ] ( ) : bool { var ID : [ ( - 123 * ID ( ID ) ) func bool } func ID ( ) { }",
  "ID ID ( ) { var ID : int var ID : [ ] bool call func ( ) }",
  "ID ID ( ) { var ID : [ var ID : int ] bool call func ( ) }",
  "ID ID ( ) { var ID : call var ID : int ] bool [ func ( ) }",
  "func ID ( : ID [ - ID [ - 123 / false / ( ( ( ( ID ) ) ) ) ] ] [ ] bool ) { }",
  "func ID ( : ID [ - ID [ - 123 / false / ( ] ( ( ID ) ) ) ) ] ] [ ( bool ) { }",
  "func ID ( : ID [ ) ID [ - 123 / false / ( ] ( ( ID ) ) ) ) ] ] [ ( bool - { }",
  "func ID ( ) { print ID / ID [ ID ( func - ( ( false ) ) ) ] call ID ( ) } - ID ( ) { }",
  "func ID ( ) { print ID / ID [ ID ( func - ( ( false ) ) ) ] call ID ( ) } - ID ( ) { }",
  "func ID ( ) { print ID / ID [ ID ( func - ( ) false ) ) ) ] call ID ( ( } - ID ( ) { }",
  "func ID ( ID : [ ] [ ID ] ( - ( - ID ) ) ) ( int ) { }",
  "func ID ( ID : [ ] [ ID ] ( - ( ) ID - ) ) ( int ) { }",
  "func ID ( ID : } ] [ ID ] ( - ( ) ID - ) ) ( int ) { [",
  "func ID ( ID : bool , ID : [ ] int ) { var ID : int var ID : bool call ID ( ( - - ID ) ) ID = ID } func ) ( ID { }",
  "func ID ( ID : call , ID : [ ] int ) { var ID : int var ID : bool bool ID ( ( - - ID ) ) ID = ID } func ) ( ID { }",
  "func ID ( ID : call , ID : ( ] int ) { var ID : int var ID : bool bool ID [ ( - - ID ) ) ID = ID } func ) ( ID { }",
  "func ID ( ) : int { while ( ( ID [ ( true func ] ) ) { } call ID ( ) } ) ID ( ) { }",
  "func ID ( ) : int { while ( ] ID [ ( true func ( ) ) { } call ID ( ) } ) ID ( ) { }",
  "func ID ( ) : int { while ( ] ID [ ( true func { ) ) ( } call ID ( ) } ) ID ( ) { }",
  "- ID ( ) : int { var ID : bool var ID : [ ID [ true ] / - ( ID ) / func ID ] int } func ID ( ) { }",
  "- ID ( ) : int { var ID : bool var ID : [ ID [ true ] / - ( ID ) / func ID ] int } func } ( ) { ID",
  "- ID ( ) : int bool var ID : { var ID : [ ID [ true ] / - ( ID ) / func ID ] int } func } ( ) { ID",
  "func ID ( ) { ID [ - false / ID ( ID ( ( - } ) ) ) ] = ( ID ) if ( ( - ID ) ) { ID }",
  "func ID ( ) { ID [ - false / ID ( ID ( ( - } ) ) ) ] = ( ID ) if ( ( - ID ) ) { ID }",
  "func ID ( ) { ID [ - false / ID ( ID ( ( - } ) ) ) ( = ( ID ) if ] ( - ID ) ) { ID }",
  "func ID ( ID : int ) : bool { ID true + ID ( ( - - - false ) ) - if { } { } } func ID ( ) { }",
  "func ID ( ID : int ) : bool { ID true + ID ( ( - - - false ) ) - if { } { } } } ID ( ) { func",
  "func : ( ID ID int ) : bool { ID true + ID ( ( - - - false ) ) - if { } { } } } ID ( ) { func",
  "func ID ( int : ) { var ID : [ ( - false / false and - ID ) ] int } func ID ( ) { }",
  "func ID ( int : false { var ID : [ ( - ) / false and - ID ) ] int } func ID ( ) { }",
  "func ID ID int : false { var ( : [ ( - ) / false and - ID ) ] int } func ID ( ) { }",
  "func : ( ) { var ID ID bool var ID : [ - ID ( ) [ ID <= ID ] [ ID ] ] [ ] bool } func ID ( ) { }",
  "func : ( ) { var ID ID ) var ID : [ - ID ( bool [ ID <= ID ] [ ID ] ] [ ] bool } func ID ( ) { }",
  "func : ( ) { var ID ID ) var ID : bool - ID ( [ [ ID <= ID ] [ ID ] ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : ID , ID : bool ) { return } func ID ( ID : int , int : bool ) { }",
  "func ID ( ID : ID , ID : bool ) { return } ( ID func ID : int , int : bool ) { }",
  "func ID ( ID : ID , } : bool ) { return ID ( ID func ID : int , int : bool ) { }",
  "func ID ( ID : [ ] bool ) : var ID { int call ID ( true + - 123 <= - - ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) : var ID + int call ID ( true { - 123 <= - - ( ID ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] bool var ID : int while ID ( ) ] ID [ { } ID = 123 }",
  "func ID ( ) { var ID : [ ] [ ] bool var ID : int while ID ( { ] ID [ ) } ID = 123 }",
  "func ID ( ) { ] ID : [ ] [ var bool var ID : int while ID ( { ] ID [ ) } ID = 123 }",
  "func ID ) ID : bool , ID : bool ( { var ID : int print ( - ID [ - ID ] ) } func ID ( ) { }",
  "func ID : ID : bool , ID ) bool ( { var ID : int print ( - ID [ - ID ] ) } func ID ( ) { }",
  "func ID : } : bool , ID ) bool ( { var ID : int print ( - ID [ - ID ] ) } func ID ( ) { ID",
  "func ID ( ID : int ) - [ ] bool { var ID : [ - ID ( - : - ID ) ] int var ID : int }",
  "func ID ( ID : int ) - [ ] [ { var ID : bool - ID ( - : - ID ) ] int var ID : int }",
  "func ID ( ID : int ) - [ ] [ { var ID : bool - ID ( - : - ID ) ] int : ID var int }",
  "123 ID ( ) { var ID : [ ] int var ID : bool ID [ - func * false / ID ] [ false ] = ID while ( true ) { } }",
  "123 ID ( ) { var ID while [ ] int var ID : bool ID [ - func * false / ID ] [ false ] = ID : ( true ) { } }",
  "123 ID ( ) { var ID while [ ] ) var ID : bool ID [ - func * false / ID ] [ false ] = ID : ( true int { } }",
  "func ID ( ) : bool { var ID ID bool var ID : int return } func ID ( ) { var : : int var ID : [ ID ] [ ] int }",
  "func ID ( ) : } { var ID ID bool var ID : int return bool func ID ( ) { var : : int var ID : [ ID ] [ ] int }",
  "func ID bool ) : } { var ID ID bool var ID : int return ( func ID ( ) { var : : int var ID : [ ID ] [ ] int }",
  "func ID ( ] : [ 123 / - ID [ - - ID ( ) [ 123 ] ] ] [ ID [ ] [ ] [ ] [ ] int ) { }",
  "func ID ( ] : [ 123 [ - ID [ - - ID ( ) / 123 ] ] ] [ ID [ ] [ ] [ ] [ ] int ) { }",
  "func ID ( ] : [ 123 [ - ID [ ID - - ( ) / 123 ] ] ] [ ID [ ] [ ] [ ] [ ] int ) { }",
  "func ID ( ) : int { var ID : int } ID : bool while false * ( ID [ true ] ) { } { } } func ID ( ) { var",
  "func var ( ) : int { ID ID : int } ID : bool while false * ( ID [ true ] ) { } { } } func ID ( ) { var",
  "func var ( ) : int { ID ID : int } ID : bool while false * } ID [ true ] ) { ( { } } func ID ( ) { var",
  "func ID ( ) { var ID : [ ID ( ) [ ( ID ( ) ) ] [ - true ] ] [ ] } var ID : [ ] bool } func ID ( ) { int",
  "ID ID ( ) { var func : [ ID ( ) [ ( ID ( ) ) ] [ - true ] ] [ ] } var ID : [ ] bool } func ID ( ) { int",
  "ID ID ( ) : int { } func func ( ) : [ ] int { return ( - ID ) }",
  "ID ID ( : ) int { } func func ( ) : [ ] int { return ( - ID ) }",
  "ID ID ( : ) int { } func func ( ) : [ ] int { - ( return ID ) }",
  "func ID ( [ : bool ) : [ 123 * ID [ ID ( ) * - 123 ] [ - ( ( ( ( ID ) ) ) ) ] * 123 ] [ ] ID ] [ ] [ ] bool { }",
  "func ID ( [ : bool ) : [ 123 * ID [ ID ( ) * - 123 ] [ - ( ( ( ( ID ) ) ) ) ] * 123 ] [ ] ID ] [ ] [ ] bool { }",
  "func ID ( [ : bool ) : [ 123 * ID [ ID ( ( * - 123 ] [ - ( ) ( ( ID ) ) ) ) ] * 123 ] [ ] ID ] [ ] [ ] bool { }",
  "func ID ( ID : [ ] [ ] int , , : [ ] bool ID ID : int ) : int { var ID : int call ID ( ) { } } func ID ( ) { }",
  ": ID ( ID : [ ] [ ] int , , : [ ] bool ID ID : int ) func int { var ID : int call ID ( ) { } } func ID ( ) { }",
  "func ID ( ID : [ ( false + ID - - ( [ ( - ( ID ) ) ) ] [ ( true ) ] + ID ) ] [ ] bool ) { }",
  "func ID ( : ID [ ( false + ID - - ( [ ( - ( ID ) ) ) ] [ ( true ) ] + ID ) ] [ ] bool ) { }",
  "func ID ( : ID [ ( false + ID - - ( [ ( - ( ID ) ) ) ] [ ( true ) ] + ID ) ] [ ] bool ) { }",
  "func ID ( ) : int { var ID : ) return ( - ( ( ID ) bool ) } func ID ( ) { }",
  "func ID ( ) : ID { var int : ) return ( - ( ( ID ) bool ) } func ID ( ) { }",
  "func ID ( ) ) ID { var int : : return ( - ( ( ID ) bool ) } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : int return / false ID ( ) != ( ID ) }",
  "func ID ( ID : int ) : bool { var ID : int return / false ID ( ) != ( ID ) }",
  "func ID ( ID : int ) : bool { var ID : int return / false ID ( ) != ( ID ) }",
  "func ID ( ID : int , ID : bool ) { ID = ( ID ( ) ) ) } func ID ( ID { }",
  "func ID ( ID : } , ID : bool ) { ID = ( ID ( ) ) ) int func ID ( ID { }",
  "func ID ( ID : int , ID : bool ) { ID ( { [ true / ID ( ) [ ID ] [ - - - ( ( false ) ) ] / 123 ] [ ID ] = true ) } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { ID ( { true [ / ID ( ) [ ID ] [ - - - ( ( false ) ) ] / 123 ] [ ID ] = true ) } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { ID ( { true [ / ID ( ) [ ID ] [ - - - ( ( false ) ) ] / 123 ] [ ID ] = true ) } } func ID ( ) { }",
  "func ID ( ID : var ] int ) { [ ID : bool print - ID ( - false ) } func ID ( ) { }",
  "func ID ( print : var ] int ) { [ ID : bool ID - ID ( - false ) } func ID ( ) { }",
  ": ID ( ID : bool ) { var ID func int var ID : bool return }",
  ": ID ( ID : ID ) { var bool func int var ID : bool return }",
  ": ID ( bool : ID ) { var bool func int var ID : ID return }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : bool var ID int : ID ( ( ( - ( ID ) ) ) ) = - true ID = ( ID ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : bool var ID int : ID ( ( ( - ( ID ) ) ) ) = - true ID = ( ID ) } func ID ( ) { }",
  "func ID ( ID : int , ID ID bool , : : bool ) { var ID : bool var ID int : ID ( ( ( - ( ID ) ) ) ) = - true ID = ( ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( - true ) ( - ID ) ) ] bool } func ID ( * { }",
  "func ID ( ) { var ID : [ ( - true ) ( - ID ) ) ] bool ( func ID } * { }",
  "func ID ( ) { var ID : [ ( ) true ) ( - ID ) - ] bool ( func ID } * { }",
  "func ID ( ID : [ ] int { print ) ( ID [ - false ] ) if true { } }",
  "func ID ( ID : [ ] int { print ) ( ID [ ] false - ) if true { } }",
  "func ID ( ID : [ ] int { print ) ( ID [ ] false - ) if true { } }",
  "func ID ( ID ) bool : { var ID : bool var ID : [ ] bool while - ( - true ) { } } func ID ( ) { }",
  "func ID ( ID ) bool : { var ID : bool var ID : - ] bool while - ( [ true ) { } } func ID ( ) { }",
  "func ID ) ID ) bool : { var ID : bool var ID : - ] bool while - ( [ true ) { } } func ID ( ( { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : bool bool : ) { ID [ ( 123 ) ] [ ID ] = ( ( ID ) ) }",
  "func ID ( ID : bool , ID : [ ] bool , ID : bool bool : ) { ID [ ( 123 ) ] [ ID ] = ( ( ID ) ) }",
  "func ID ( ID : ( , ID : [ ] bool , ID : bool bool : ) { ID [ bool 123 ) ] [ ID ] = ( ( ID ) ) }",
  "func ID ID ( : bool ) : int { var ID : int print false + true <= ( true ) { } } func ID ( ) { }",
  "func ID ID ( : bool ) : int { var ID : int } false + true <= ( true ) { } } func ID ( ) { print",
  "func ID ID ( : bool ) : int { var ID ID int } false + true <= ( true ) { } } func : ( ) { print",
  "func ID ( ) : [ - ID / ID { ) * ( - false * false / false ) ] [ ] bool ( }",
  "func ID ( [ : ) - ID / ID { ) * ( - false * false / false ) ] [ ] bool ( }",
  "func false ( [ : ) - ID / ID { ) * ( - false * false / ID ) ] [ ] bool ( }",
  "func : ( ID : bool , ID : int , ID : int ) ID int { var ID : bool }",
  "( : func ID : bool , ID : int , ID : int ) ID int { var ID : bool }",
  "( : func ID : bool , ID : int , ID : int ) int ID { var ID : bool }",
  "func func ( ID : bool ) { var ID : int if ( 123 > ID ( ) ) { } call ID ( ) } ID ID ( ) { }",
  "func func ( ID : bool ) { var ID : int } ( 123 > ID ( ) ) { } call ID ( ) } ID ID ( ) { if",
  "func func ( ID : bool ) { var ID : int } ( 123 > ID ( ) ) { } ID call ( ) } ID ID ( ) { if",
  "func ID ( ) : [ ] bool { var ID : [ true * - false * ) ID + false ] bool } func ID ( - { }",
  "func ID ( ) : [ ] bool { var ID : { true * - false * ) ID + false ] bool } func ID ( - [ }",
  "func ID ( ) : [ ( bool { var ID : { true * - false * ) ID + false ] bool } func ID ] - [ }",
  "func ID ( ID : bool ) { return - ( - ID [ ID [ ] ] ID [ ( ID ) ] ) }",
  "func ID ( ID : bool ) { return - ( - ID [ ] [ ID ] ID [ ( ID ) ] ) }",
  "func ID ( ID [ bool ) { return - ( - ID [ ] [ ID ] ID : ( ID ) ] ) }",
  "func ID ( ID : int int ID : bool , ID : , ) { var ID : int } func ID ( ID : bool , ID : int ) { var ID : int }",
  ": ID ( ID : int int ID func bool , ID : , ) { var ID : int } func ID ( ID : bool , ID : int ) { var ID : int }",
  "ID ID ( : : int int ID func bool , ID : , ) { var ID : int } func ID ( ID : bool , ID : int ) { var ID : int }",
  ") ID ( ) { var ID : int var ID : [ ( ( ( - - - false func ) ) ] bool }",
  ") ID ( ) { var ID : int var ID : [ ( ( ( - - - false func ) ) ] bool }",
  ") ID false ) { var ID : int var ID : [ ( ( ( - - - ( func ) ) ] bool }",
  "func ID ( ID int [ ] int , ID : bool ) { var ID : bool var ID : [ ] : { var ID : bool if ( false ) { } } print true } func ID ( ) { }",
  "func ID ( ID int [ ] ID , ID : bool ) { var ID : bool var ID : [ ] : { var ID : bool if ( false ) { } } print true } func int ( ) { }",
  "func ID ( ID int [ ] ID , ID : bool ) { var ID : bool var ID : [ ] : true var ID : bool if ( false ) { } } print { } func int ( ) { }",
  "func ID ( ) : bool { var ID : int ID ) ( ( false * ID * ID ) ) ( = - - - ID }",
  "func ID ( ) : bool { var ID : int ID ) ( ( false * ID * ID ) } ( = - - - ID )",
  "ID func ( ) : bool { var ID : int ID ) ( ( false * ID * ID ) } ( = - - - ID )",
  "func ID ( ) { var * : bool ID [ ID [ false - 123 / ( - ID ) ID ID ] ] [ ID ] = - true }",
  "func ID ( ) { var * : bool ID [ ID [ false - 123 / ( - ID ) ID ID ] ] [ ID ] = - true }",
  "func ID ( ) { ID * : bool ID [ ID [ false - 123 / ( - ID ) ID var ] ] [ ID ] = - true }",
  "func ID ( ID : int , ID : [ true * ( ID ( ) / false - - ( true ) - ( ( true ) ) ) ID int , ] : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : { true * ( ID ( ) / false - - ( true ) - ( ( true ) ) ) ID int , ] : [ ] int ) { } func ID ( ) [ }",
  "func ID ( ID : int , ID - { true * ( ID ( ) / false : - ( true ) - ( ( true ) ) ) ID int , ] : [ ] int ) { } func ID ( ) [ }",
  "func ID ( ) : bool { call ID ID ) call ( ( ) }",
  "func ID ( ) { var ID : bool if ( ( ID ( ) [ true ] } ) { } print - ID )",
  "func ID ( ) { var ID : bool if ID ( ID ( ) [ true ] } ) { } print - ( )",
  "func ID ( ) { var ID : bool if ID ( ID ( ) [ true ] ) ) { } print - ( }",
  "func ID ( ) : int { var ID : bool var ID ( int ID ( ) [ ( true ) ] [ ( true ) ] = : ( false ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool ID var ( int ID ( ) [ ( true ) ] [ ( true ) ] = : ( false ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool ID var ( int ID ( ) [ ( ( ) ] [ ( true ) ] = : ( false ) ) } func ID true ) { }",
  "func ID ( ) ID bool { var ID : int return } func ID ( ID : int , : : int ) : int { var ID : bool ID = ID print - ID }",
  "func ID ( ID ID bool { var ID : int return } func ID ( ID : int , : : int ) : int { var ID : bool ID = ID print - ) }",
  "func ID ( = ID bool { var ID : int return } func ID ( ID : int , : : int ) : int { var ID : bool ID ID ID print - ) }",
  "func ID ( ID : [ ] bool , ID : bool , ID : [ ID ( - 123 - ( [ ) ) ] [ ] 123 ] int ) { }",
  "func ID ( ID : [ ] bool , ID : bool , ID : [ ID ( - } - ( [ ) ) ] [ ] 123 ] int ) { 123",
  "func ID ( ID : [ ] bool , ID : bool , ID : [ ID ( ] } - ( [ ) ) ] [ - 123 ] int ) { 123",
  "func ID ( ID : [ - ( ID ( ID ( ) * ( true ) / - ( - true ) ) ) ] int ) { } func ID ( { ) }",
  "func ( ( ID : [ - ( ID ( ID ( ) * ID true ) / - ( - true ) ) ) ] int ) { } func ID ( { ) }",
  "func ID ] ) : int { var ID : bool if - ID [ ( ID ) ( { } } func ID ( ) { }",
  "if ID ] ) : int { var ID : bool func - ID [ ( ID ) ( { } } func ID ( ) { }",
  "if ID ] ) : int { var ID : bool func - ID [ ( ID ) ( { } } func ID ( ) { }",
  "func var ( ) { } func ID ( ID : bool , ID : bool ) { ID ID : [ ID ( - - true ) ] int }",
  "func var ( ) { } func ID ( ID : bool , ID : bool ) { ] ID : [ ID ( - - true ) ID int }",
  "func var ( ) { } func ID ( ID : bool , ID : bool ) { ] ID : [ ID ( - - true ) ID int }",
  "func ID ( ) : int { var ID : int var ID : bool { var print : int call ID ( ( ID ) ) ID ( ( ID ) ) } call ID ( ) }",
  "func ID ( ) : int { var ID : int var ID : bool { var ) : int call ID ( ( ID print ) ID ( ( ID ) ) } call ID ( ) }",
  ": ID ( ) func int { var ID : int var ID : bool { var ) : int call ID ( ( ID print ) ID ( ( ID ) ) } call ID ( ) }",
  "func ID ( ID : bool , ID : : - - true / - ( - - ( true ) ) ] [ ] [ ] int , ID [ int ) { }",
  "func ID ( ID : bool , ID : : ( - true / - - - - ( true ) ) ] [ ] [ ] int , ID [ int ) { }",
  "func ID ( ID - bool , ID : : ( - true / : - - - ( true ) ) ] [ ] [ ] int , ID [ int ) { }",
  "func ID ( [ : int , ID : [ ] ID ] bool ) { var ID : int var ID : [ true - - ( ( - ID ) ) - ID ] int }",
  "func ID ( [ : int , ID : [ ] ID ] bool ) { var ID int : var ID : [ true - - ( ( - ID ) ) - ID ] int }",
  "func ID ( [ : int , ID : [ ] ID ] bool ) { var ID ID : var ID : [ true - - ( ( - ID ) ) - int ] int }",
  "func ID ( ID : bool , ID : [ 123 < ID ( ( - ( ) ) ] [ ] int , ID : [ ] int ) { } func ID false ) { }",
  "func ID ( ID : bool , ID : [ 123 < ID ( ( - ( ) ) ] [ ] int , ID : [ ] int ID { } func ) false ) { }",
  "[ ID ( ID : bool , ID : [ 123 < ID ( ( - ( ) ) ] [ ] int , ID : func ] int ID { } func ) false ) { }",
  "func ID ( ) { var ID : { var ID : int return - - - ID ( - ( true ) ) } func ID ( ) bool }",
  "func ID ( var { var ID : { ) ID : int return - - - ID ( - ( true ) ) } func ID ( ) bool }",
  "func ID ( var { var ID : { ) ID : int return - - - ID ( bool ( true ) ) } func ID ( ) - }",
  "func ] ( ID : [ ] [ ( true - - - true > ID ) ID [ ] int ) { }",
  "func ] ( ID : [ ] [ ( true - - - ID > true ) ID [ ] int ) { }",
  "func ] ( ID : [ ] [ ( true - - - ID > true ) ID [ ] int ) { }",
  "func ID ( ) : [ ID ( ) [ - - 123 or false * - ID * ID or ) ( false ) ) ] [ ( - ( ( ID ) ) ) ] ] bool { } func ID ( ( { }",
  "func ID ( ) : [ ID ( ) [ - - ) or false * - ID * ID or ) ( false ) 123 ] [ ( - ( ( ID ) ) ) ] ] bool { } func ID ( ( { }",
  "func ID ( ) : [ ID ( ) [ - - ) or false * - ID * func or ) ( false ) 123 ] [ ( - ( ( ID ) ) ) ] ] bool { } ID ID ( ( { }",
  "func ID ( ID : [ - ( ( false * ID / ( ( true { ) ) ) ] int ) ) } func ID ( ) { }",
  "func ID ( ID : [ - ( ( false * ID / ) ( true { ) ) ) ] int ) ( } func ID ( ) { }",
  "func ] ( ID : [ - ( ( false * ID / ) ( true { ) ) ) ID int ) ( } func ID ( ) { }",
  "func ID ( func : [ ID [ ( ID / - - - ( ID ) ) ] ] bool ) { } ID ID ( ) { }",
  "func ID ( func : ] ID [ ( ID / - - - ( ID ) ) ] [ bool ) { } ID ID ( ) { }",
  "func ID ( func : ] [ [ ( ID / - - - ( ID ) ) ] ID bool ) { } ID ID ( ) { }",
  "func ID ( ) : int { var ID : bool ID ( ID ( ) [ ( ( - ( ) ) ] [ 123 ] ) = ID } func ID ID ) { }",
  "func ID ( ) : int { var ID : bool ID ( ID ID ) [ ( ( - ( ) ) ] [ 123 ] ) = ID } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID ] bool } func ID ( ) : int { var ID : bool var ID : [ ( ID ) ] [ ] [ : [ ] bool }",
  "func ID ( ) { var : : int var ID ] bool } func ID ( ) : int { var ID : bool var ID ID [ ( ID ) ] [ ] [ : [ ] bool }",
  "func ID ( ) { var : : int ] ID var bool } func ID ( ) : int { var ID : bool var ID ID [ ( ID ) ] [ ] [ : [ ] bool }",
  "func ID ( ID : ) ID ( ) [ ID [ ID ( [ [ true ] [ - false ] ] ] [ ID ] ] [ ] bool ) { }",
  "- ID ( ID : ) ID ( ) [ ID [ ID ( [ [ true ] [ func false ] ] ] [ ID ] ] [ ] bool ) { }",
  "- ID ( ID : ) ID ( ) [ ID [ ID ( [ [ true ] [ func false ] ] ] [ ID ] ] [ ] bool ) { }",
  "func ID ( ] : int ) : int { var ID : [ 123 * - false / - ID [ ID ID ] bool var ID : bool }",
  "func ID ( ] : int ) : { int var ID : [ 123 * - false / - ID [ ID ID ] bool var ID : bool }",
  "func int ( ] : int ) : { ID var ID : [ 123 * - false / - ID [ ID ID ] bool var ID : bool }",
  "func ID ( ) : [ ] int { ID ( ) [ - true - ID [ ID ] ID - - ID ] ] [ ( - ID ) ] = - ( false ) call [ ( ) }",
  "func ID ( ) : [ ] int { ID ( ) [ - true - ID [ ID ] ID - - ID ] ] [ ( - ID ) ] = - ( false ) call [ ( ) }",
  "func ID ( ) : [ - int { ID ( ) [ - true - ID [ ID ] ID - - ID ] ] [ ( - ID ) ] = ] ( false ) call [ ( ) }",
  "func ID ( : ID bool , ID : [ ID [ - ( - ( ( - 123 ) ) ) ] ] int ) { }",
  "- ID ( : ID bool , ID : [ ID [ - ( func ( ( - 123 ) ) ) ] ] int ) { }",
  "- ID ( : ID bool , ID : [ ID [ - ( func ( ( - ) ) ) 123 ] ] int ) { }",
  "func ID [ ID : [ ] ( ] bool ) : int { var ID : [ ] bool } func ID ( ) : [ - ID ] bool { }",
  "func ID [ ID : [ var ( ] bool ) : int { ] ID : [ ] bool } func ID ( ) : [ - ID ] bool { }",
  "func ID [ ID : ] var ( ] bool ) : int { [ ID : [ ] bool } func ID ( ) : [ - ID ] bool { }",
  "func ID ( ID : int , ID : int , ID : [ ] [ ( ID ( - - ) 123 ) ) ( ] [ ] [ ] [ ] [ ] [ ] int ) { }",
  "func ID ( ID ID int , ID : int , ID : [ ] [ ( : ( - - ) 123 ) ) ( ] [ ] [ ] [ ] [ ] [ ] int ) { }",
  "func ID ( - ID int , ID : int , ID : [ ] [ ( : ( - ID ) 123 ) ) ( ] [ ] [ ] [ ] [ ] [ ] int ) { }",
  "( ID ( ID : bool , ID : [ - - ID ( ) [ - ( 123 ) ] [ ( ID ) ] ] bool ) { } func ID func ) { }",
  "( ID ( ID : bool , ID ( [ - - ID ( ) [ - ( 123 ) ] [ : ID ) ] ] bool ) { } func ID func ) { }",
  "( ID ( ID : , bool ID ( [ - - ID ( ) [ - ( 123 ) ] [ : ID ) ] ] bool ) { } func ID func ) { }",
  "func ID ( ) : int { ID = ( ( ID [ } ] [ - - 123 ] ) ) { ID }",
  "[ ID ( ) : int { ID = ( ( ID func } ] [ - - 123 ] ) ) { ID }",
  "[ ID ( ) : int { ID = ( ( ID - } ] [ func - 123 ] ) ) { ID }",
  "func int ( ) : ID { return }",
  ") int ( func : ID { return }",
  ") int ( func : { ID return }",
  "func ID ( - { var ID : [ ] int var ID : [ true / ) ID [ - ID ] [ - ID ] ] [ ] int } func ID ( ) { }",
  "func ID ( - { var ID : [ - int var ID : [ true / ) ID [ ] ID ] [ - ID ] ] [ ] int } func ID ( ) { }",
  "} ID ( - { var ID : [ - int var ID : [ true / ) ID [ ] ID ] [ - ID ] ] [ ] int func func ID ( ) { }",
  "func ID ( ID : bool , ID } int ) { var ID : [ ] [ - true - - ID ( ) + - 123 ] bool var ID : bool } func ID ( ) { :",
  "func ID ] ID : bool , ID } int ) { var ID : [ ] [ - true - - ID ( ) + - 123 ( bool var ID : bool } func ID ( ) { :",
  "func ID ] ID : bool , ID } int ) { var ID : [ ] [ - ) - - ID ( ) + - 123 ( bool var ID : bool } func ID ( true { :",
  "func ID ( ID : int ) { var ID : ) ID [ - ID [ ( ID ) ] [ false ] ] [ false ] ] [ ] bool } func ID ( [ { }",
  "func ID ( ID : int ) { var ID : ) ID [ - ID [ ( ID ) ] [ false ] ] [ ID ] ] [ ] bool } func false ( [ { }",
  "func ID ( ID : int ) { var ID : ) ID [ - ID [ ( ID ) ] [ [ ] ] [ ID ] ] false ] bool } func false ( [ { }",
  "func ID ( ID : 123 ] int ) { ID = ID ( - - true / - ( [ ) / 123 ) ID = ID } func ID ( ) { }",
  "func ID ( ID : 123 ID int ) { ] = ID ( - - true / - ( [ ) / 123 ) ID = ID } func ID ( ) { }",
  "func ID ( ID : 123 ID int ) { ] = ID ( - - true ID - ( [ ) / 123 ) / = ID } func ID ( ) { }",
  "{ ID ( ) { { if true / ID ( ) / ID ( true ) func } } { } }",
  "{ ID ( ) { { if true / ID ( ) / ID ( { ) func } } true } }",
  "{ ID ( ) { { if true / ) ( ID / ID ( { ) func } } true } }",
  "func ID ( ) { var ID : [ true and - - - - [ ( ID ) ) ] [ ] ( ] bool }",
  "func ID ( ) { var ] : [ true and - - - - [ ( ID ) ) ID [ ] ( ] bool }",
  "func ID ( ) { ] ] : [ true and - - - - [ ( ID ) ) ID [ var ( ] bool }",
  "func ID ( ID : [ ] [ ] [ - { false * true * true - false * ID ] [ ] bool ) - } func ID ( ) { }",
  ") ID ( ID : [ ] [ ] [ - { false * true * true - false * ID ] [ ] bool func - } func ID ( ) { }",
  ") ID ( ID : [ ] [ ] [ - { false * true func true - false * ID ] [ ] bool * - } func ID ( ) { }",
  "func ID ( ) { int : return false / ( ( - ID ( ) ) ) } func ID ( ) { }",
  "func ID ( ) { int : ( false / ( return - ID ( ) ) ) } func ID ( ) { }",
  "func ID ( ) { int : ( false / ( return - ID ( ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , } : bool ) { var ID : int var ID : [ - false / ( true ) / ID ] [ ] int } func ID ( ) { ID",
  "( ID ( ID : bool , ID : int , } : bool ) { var ID : int var ID : [ - false / func true ) / ID ] [ ] int } func ID ( ) { ID",
  "( ID ( ID : bool , ID : int , } : bool ) { var ID : int var ID : [ - false / func true ) / ID ] [ ] int } func ID ( ) ID {",
  "func ID ( ) : int } while ( ( - true / ( false ) ) ) { { } func ID ( ) { }",
  "func ID ( ) : int } while ( ( - true / ( false ) ) ) ) { } func ID ( { { }",
  "func } ( ) : int ID while ( ( - true / ( false ) ) ) ) { } func ID ( { { }",
  "func ID ( ID : bool , ID : [ - ( true * - - ID [ - ( true ) ] ) ] bool , int : ID ) { }",
  "func ID ( ID : bool ] ID : [ - ( true * - - ID [ - ( true ) ] ) , bool , int : ID ) { }",
  "func ID ( ID : bool ] ID : , - ( true * - - ID [ - ( true ) ] ) [ bool , int : ID ) { }",
  "func ID : ) { var ID : int var ID ( bool { call ID ( ) print ( - true ) } print ID } func ID ( ) { }",
  "func ID : ) { var ID : int var ID ( print { call ID ( ) bool ( - true ) } print ID } func ID ( ) { }",
  "func var : ) { var ID : int ID ID ( print { call ID ( ) bool ( - true ) } print ID } func ID ( ) { }",
  "func ID ( ) { { var ID : int return - ID / 123 } ID ( ( - ( - 123 ) ) ) } { } * func ID ( ) { }",
  "func ID ( ) { { var ID : int return - ID / 123 } } ( ( - ( - 123 ) ) ) } { } * func ID ( ) { ID",
  "func ID - ) { { var ID : int return - ID / 123 } } ( ( ( ( - 123 ) ) ) } { } * func ID ( ) { ID",
  "func ID ( ID : int , ID : int ) { call ID ( ID / ID ( ( - 123 ) ) / ID ID ) while - - ID { } } func - ( ) { }",
  "func ID ( ID func int , ID : int ) { call ID ( ID / ID ( ( - 123 ) ) / ID ID ) while - - ID { } } : - ( ) { }",
  "func ID ( ID func int , ID : int ) { call ID ( ID / ID ( ( - 123 ) ) / ID ID ) while - - ID { } } : - ( ) { }",
  "func ] ( ) { var ID : bool while - ( ID ( ) [ - ID ID [ 123 ] ) { } }",
  "func ] ( ) { var ID : bool while - ( ID ( ) [ - ID } [ 123 ] ) { } ID",
  "func ] ( ) { var ID ID bool while - ( ID ( ) [ - : } [ 123 ] ) { } ID",
  "func ID ( ( : int ) : [ ] int { var ID : bool var ID : int call ID ID ID / 123 ) }",
  "func ID ( ( : int ) : [ ] int int var ID : bool var ID : { call ID ID ID / 123 ) }",
  "func : ( ( : int ) : [ ] int int var ID ID bool var ID : { call ID ID ID / 123 ) }",
  "func ID ( ) { var ID : int var ID : [ ID ( - 123 * ( - ) true * ( 123 ) ) ] [ ] int }",
  "func ID ( ) { var ID : int var ID : [ ID ( - 123 * ( - ) true * ( 123 ) ) ] [ ] int }",
  "func ( ID ) { var ID : int var ID : [ ID ( - 123 * ( - ) true * ( 123 ) ) ] [ ] int }",
  "[ ID ( ) { var ID : int var ID : func ] int print - - ID / ( ( true ) ) * ( - ID ) } func ID ( ) { }",
  "[ ID ( print { var ID : int var ID : func ] int ) - - ID / ( ( true ) ) * ( - ID ) } func ID ( ) { }",
  "[ ID ( print { var ID : int var true : func ] int ) - - ID / ( ( ID ) ) * ( - ID ) } func ID ( ) { }",
  "func ID ( ) : [ ] bool , ID : int , ID : [ ] int ) : int { var ID : [ 123 / ( false ) ] [ ] int var ID : [ ] int } func ID ( ID { }",
  "func ID ] ) : [ ] bool , ID : int , ID : [ ( int ) : int { var ID : [ 123 / ( false ) ] [ ] int var ID : [ ] int } func ID ( ID { }",
  "func ID ] ) : [ ] bool , ID : int , ID : [ ( int { : int { var ID : [ 123 / ( false ) ] [ ] int var ID : [ ] int } func ID ( ID ) }",
  "( ID ( ) { var ID : [ ID ( ) * - ID ( ( false ) ) ] [ ] [ ] bool var ID : int } func ID func ) { }",
  "( ID ( ) { var ID : [ ID ] ) * - ID ( ( false ) ) ( [ ] [ ] bool var ID : int } func ID func ) { }",
  "( ID ( ) { var ID : [ ID ] ) ) - ID ( ( false ) * ( [ ] [ ] bool var ID : int } func ID func ) { }",
  "( ID ( ) { if 123 / - func ID [ ID ( ) ] ) / true { } { } }",
  "( ID ( ) { ID 123 / - func if [ ID ( ) ] ) / true { } { } }",
  "( ID / ) { ID 123 / - func if [ ID ( ) ] ) ( true { } { } }",
  "func ID ID ) { var ID : bool var ID : bool ( = - ( ( false ) ) call ID ( ) }",
  "func ID ID ID { var ID : bool var ) : bool ( = - ( ( false ) ) call ID ( ) }",
  "func ID false ID { var ID : bool var ) : bool ( = - ( ( ID ) ) call ID ( ) }",
  "func ID ( ID : bool ) int : { var ID : int var ID : [ - ID [ - ID ] [ ID ] ] [ ] int }",
  "func ID ( ID : bool ) int : { var ID : int var ID : [ - ID [ - ID ] [ ID ] ] [ ] } int",
  "func ID ( ID : bool ) int : { ] ID : int var ID : [ - ID [ - ID ] [ ID var ] [ ] } int",
  "func ID ( ID : int { var ID : bool print ( ) [ ID ( ) ] [ - ( ID ) ] ) call ID ( ) }",
  "func ID ( ID : : { var ID int bool print ( ) [ ID ( ) ] [ - ( ID ) ] ) call ID ( ) }",
  "func ID ( ID : : { var ID int bool print ( ) [ ( ID ) ] [ - ( ID ) ] ) call ID ( ) }",
  "func ID ( ID : [ ] bool ) { print - - false * - ID ( ) / ID print } - ID ) (",
  "func ID ( ID : [ ] bool ) { print - - ( * - ID ( ) / ID print } - ID ) false",
  "func ID ( ID : [ ] bool ) { print - - ( * - ID ( ) false ID print } - ID ) /",
  "func ID ( ID : [ ) { var ID : [ ID ( true / ID [ false ] ) ] [ ] [ ] [ ] [ ] int var ID : [ ] bool ] bool } func ID ( ) { }",
  "func ID ( ID : [ ) { var ID : [ ID ( true / ID [ false ] ) ] [ ] [ ] [ ] [ ] int var ID : [ ] bool ] bool } func ID ( ) { }",
  "func ID ( ID : [ ) { var ID : [ ID ( true / ID [ false ] ) ] [ [ [ ] [ ] [ ] int var ID : ] ] bool ] bool } func ID ( ) { }",
  "func ID ( ) { call ID ( ) ID [ 123 * ( ID [ - - ( false ) ] = / ( ( ID ) ) ] ) ID } func ID ( ) { }",
  "func ID ( ) { call ID ( ) ID [ 123 * ( ID [ - - ( false ) ] = / ( ( ID ) ) ] ) ID } func ID ( ) { }",
  "func ID ( ) { call ID ( ) ID [ ) * ( ID [ - - ( false ) ] = / ( ( ID ) ) ] 123 ID } func ID ( ) { }",
  "func ID if ) { } func ID ( ) { var ID : int ( true * true / 123 - ID { } print true }",
  "func ID if ) { } func ID ( ) { var ID : int ( true * true / 123 - ID } { print true }",
  "func ID if ) { } func ID ( ) { var ID : int ( true * true / 123 - ID } { print true }",
  "func ID , ID : int ( ID : [ false < false - ID ( - ID ) ] int , ID : [ ] int ) { }",
  "func ID , ID - int ( ID : [ false < false : ID ( - ID ) ] int , ID : [ ] int ) { }",
  "func ID , ID - ] ( ID : [ false < false : ID ( - ID ) int int , ID : [ ] int ) { }",
  "( ID ( ) : int { var ID : [ func false / ID ( - ID ) * ID ) ] bool } func ID ( ) { }",
  "( ID ( ) : - { var ID : [ func false / ID ( int ID ) * ID ) ] bool } func ID ( ) { }",
  "ID ID ( ) : - { var ID : [ func false / ID ( int ( ) * ID ) ] bool } func ID ( ) { }",
  "func ID ( ) - var ID : [ ] [ ( 123 + { 123 / ID / 123 ) ] int } func ID ( ) { }",
  "func ( ID ) - var ID : [ ] [ ( 123 + { 123 / ID / 123 ) ] int } func ID ( ) { }",
  "func ( ID ) 123 var ID : [ ] [ ( - + { 123 / ID / 123 ) ] int } func ID ( ) { }",
  "func ID ID ID : bool , ID : [ ( ( ( ) [ - - ID ] [ ID ] ) ] int ) { }",
  "func ID ID ID : bool , ID : [ ( ( ( ) [ - - ID ] [ ID ] ) ] int ) { }",
  "func ID ID ID - bool , ID : [ ( ( ( ) [ - : ID ] [ ID ] ) ] int ) { }",
  ": ID ( ID : int , ID func bool ) : int { return ID ( ( ID ) ) } func ID ( ) { }",
  ": ID ( ID : int , ID func bool ) : int { return } ( ( ID ) ) ID func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ID [ false * ( - ) ] [ ID ( - - - false ) ] ] [ ] bool , ID : [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID { bool , ID : [ ] [ ID [ false * ( - ) ] [ ID ( - - - false ) ] ] [ ] bool , ID : [ ] [ ] int ) { } func ID ( ) : }",
  "func ID ( ID : [ ] [ ( ID ( [ false ] ) ) ] bool ) { }",
  "func ID ( ID : [ ] [ ( ] ( [ false ID ) ) ] bool ) { }",
  "func ID ( ID : [ ] [ ( ] { [ false ID ) ) ] bool ) ( }",
  "func ID ( ID : int var ID : [ ] bool , ID : int ) : int { var ID : int , ID : bool ID ( 123 ) = ( ID ) call ID ( ) }",
  "func ID ( ID : int var ID : [ : bool , ID : int ) ] int { var ID : int , ID : bool ID ( 123 ) = ( ID ) call ID ( ) }",
  "func ID ( { : int var ID : [ : bool , ID : int ) ] int ID var ID : int , ID : bool ID ( 123 ) = ( ID ) call ID ( ) }",
  "func ID ( ID : int ) : bool { call ID ( ) } func ID ( ID : bool , ID ID bool ) { call ID ( ) : = - false }",
  "func ID ( ID : int ) : bool { call ID ( ) } func ID ( ID : bool , ID ID bool ) { ID call ( ) : = - false }",
  "func ID ( ID : int ) : bool { call ID ( ) } func ID ( ID : bool , ID } bool ) { ID call ( ) : = - false ID",
  "func ID true ID : [ ] [ ( * - - 123 - ID [ - ( ID ) ] ] int ) { }",
  "func ID true ID : [ ] [ ( * - - 123 - ID ] - ( ID ) [ ] int ) { }",
  "func ID true ID : [ ] [ ( * - - 123 - ID ] - ( } ) [ ] int ) { ID",
  "func ID ( ) : - { var ID : int var ID : int { print ( bool ID ) call ID ( ) } } func ID ( ) { }",
  "func ID ( ) : - { var ID : int var ID : int { print ( ID ID ) call ID ( ) } } func bool ( ) { }",
  "func ID ( ) : - ) var ID : int var ID : int { print ( ID ID { call ID ( ) } } func bool ( ) { }",
  "func ID ( ID : int ) { var ID : ] ID [ - - ID [ ( ID ) ] bool = ( - ( - ID ) ) }",
  "func ID ( ID : int ) { var ID : ] ID [ ] - ID [ ( ID ) - bool = ( - ( - ID ) ) }",
  "func ID ( ID : int ) { var ID : ] ID bool ] - ID [ ( ID ) - [ = ( - ( - ID ) ) }",
  "func ID ( ) { var ID : int var ID : int } func ID ( ID : bool , ID : bool , ID : int ) : ID { var ID : int var bool : [ ] int }",
  "func ID ( ) { var ID : int var ID : int } int ID ( ID : bool , ID : bool , ID : int ) : ID { var ID : int var bool : [ ] func }",
  "func ID ( ) { var ID : int var ID : int } int ID ( ID : bool , ID : bool , ID : int ) : ID { func ID : int var bool : [ ] var }",
  ") ID ( ID : [ - ID * 123 and ID [ ( - ( ( false ) ) ) ] and ID ] bool func { }",
  ") ID ( ID : [ - ID * 123 and ( [ ( - ID ( false ) ) ) ] and ID ] bool func { }",
  ") ID ( ID : [ - ID * 123 and ( [ ( - ID ( false ) ) ) ] and ID ] bool func { }",
  "func ID ( ID : [ true / ID <= ID / false / - ID ) ) ] bool ) { } func ID ( ( { }",
  "func ID ( ID : [ / true ID <= ID / false / - ID ) ) ] bool ) { } func ID ( ( { }",
  "func ID ( ID : [ / ( ID <= ID / false / - ID ) ) ] bool ) { } func ID ( true { }",
  "func ID / ) { var ID : int call ID ( ) ID = ( ID ( ( ID ) ) }",
  "func ID / ) { var ID = int call ID ( ) ID : ( ID ( ( ID ) ) }",
  "func ID / ) ( var ID = int call ID { ) ID : ( ID ( ( ID ) ) }",
  "func ID ( ) : [ ID * - - true or ( 123 * ID - ) or 123 ] int { } func ID ( ) { }",
  "func ID ( ) : } ID * - - true or ( 123 * ID - ) or 123 ] int { [ func ID ( ) { }",
  ") ID ( ) : [ - false * - - - 123 / ID ( ID [ - true ] [ ( ( ID func ) ] ) ] bool { } func ID ( ) { }",
  ") ID ( ) : [ - false * - - - 123 / ID - ID [ ( true ] [ ( ( ID func ) ] ) ] bool { } func ID ( ) { }",
  ") ID ( ) { [ - false * - - - 123 / ID - ID [ ( true ] [ ( ( ID func ) ] ) ] bool { } func ID ( ) : }",
  "func ID ( ) : [ - ( [ ( ID / ID ( ) - ID ] ) ) ] int { }",
  "func ID ( ) : [ - ( [ ( ID / ID ( ) - ] ] ) ) ID int { }",
  "func ID ( ) : [ - ID [ ( ID / ID ( ) - ] ] ) ) ( int { }",
  "func ID ( ) : bool { var ID : [ ID [ ] - ( ( ( 123 ) ) ) ) ] [ ( ( ID ) ) ] ( int var ID : bool }",
  "func ID ( ) : ( { var ID : [ ID [ ] - ( ( ( 123 ) ) ) ) ] [ ( bool ID ) ) ] ( int var ID : bool }",
  "func ID ( ) : ( { var ID : [ int [ ] - ( ( ( 123 ) ) ) ) ] [ ( bool ID ) ) ] ( ID var ID : bool }",
  "func ID ( ) : int { var ID : int var ID : ( print - ( false * - ( - false ) * int ( ( ID ) ) ) ) print ID }",
  "func ID ( ) : int { var ID : int var ID : ( print - ) false * - ( - false ) * int ( ( ID ) ) ( ) print ID }",
  "func ID ( ) : int { ( ID : int var ID : ( print - ) false * - ( - false ) * int var ( ID ) ) ( ) print ID }",
  "func ID - ID : [ ( false * - ( ( ( - ( ( - ( - ( ID ) ) ) ) ) ) ) ] bool ) { }",
  "func ID - ID : [ ( false * - ( ( ( - ( ( - ( - ( ID ) ) ) ) ) ) ) ] bool ) { }",
  "func ID - ID : [ ( false * - ( ( ( - ( ( - ( ) ( ID - ) ) ) ) ) ) ] bool ) { }",
  "func ID ( ID : int , ] : [ 123 * ( ID [ ( 123 ) ] ) ID int ) { }",
  "func ID ( ID : int , ] : ] 123 * ( ID [ ( 123 ) [ ) ID int ) { }",
  "func ID ( : : int , ] ID ] 123 * ( ID [ ( 123 ) [ ) ID int ) { }",
  "func ID ( , : bool ID ID : [ - - ( ID ( ID ( ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "[ ID ( , : bool ID ID : [ - - ( ID ( ID ( ) ) ) ] func ] bool ) { } func ID ( ) { }",
  "( ID ( , : bool ID ID : [ - - ( ID ( ID [ ) ) ) ] func ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ID { ID ( ) [ ( - false / ID ( ) / ( - ) ) ) ] = - - ID if ID { } } func ID ( ) { }",
  "func ID ( ID : int ) { ID ( ) [ ( - false / ID ( ID / ( - ) ) ) ] = - - ID if ID { } } func ID ( ) { }",
  "func ID ( ID : int ) { [ ( ) ID ( - false / ID ( ID / ( - ) ) ) ] = - - ID if ID { } } func ID ( ) { }",
  "{ ID ( ) func var ID : int var ID : int call ID ( ( ID [ false ] ) ) }",
  "{ ID ( ) func var ID : int var ID : int call ID ( ( ID [ false ] ) ) }",
  "func ID ( ID : false , ID : bool ) : bool { call ID ( ) while - int * ID - 123 - - true { } } func ID ( ) { }",
  "func ID ( ID : - , ID : bool ) : bool { call ID ( ) while false int * ID - 123 - - true { } } func ID ( ) { }",
  "func ID ( ID : - 123 ID : bool ) : bool { call ID ( ) while false int * ID - , - - true { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : bool var ID : int return true * - - ( 123 ) * - ( 123 ) } func ID ) ( { }",
  "func ID ( ID : bool , ID : int ) { var ID : bool var ID : int return true * - - ( 123 - * ) ( 123 ) } func ID ) ( { }",
  "func ID ( ID : bool , ID : int ) : var ID { bool var ID : int return true * - - ( 123 - * ) ( 123 ) } func ID ) ( { }",
  "func ID ( ID : [ ] bool ) ) int { { var ID : int call ID ( ID [ - - - ID ] [ ID ] ) } call ID ( : } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) ) int { { var ID : int call ID ( ID [ - - - ID ] [ ID ] ) } ( ID call : } func ID ( ) { }",
  "func ID ( ID : [ ] { ) ) int { { var ID : int call ID ( ID [ - - - ID ] [ ID ] ) } ( ID call : } func ID ( ) bool }",
  "func ID ( { : bool ) : [ ] [ ( - - - ID ( - - 123 ) ) ] [ ] int ID }",
  "func ID ( { : bool ) : [ ] [ 123 - - - ID ( - - ( ) ) ] [ ] int ID }",
  "func ID ( { : bool ) : [ ] [ 123 - - - ID ( - - ( ] ) ) [ ] int ID }",
  "func ID ( ID : bool , ID : [ ] [ ] int , ID : [ ] [ ] [ ] [ ] [ } ] int ) { } func ID ( ) { ID",
  "func ID ( ID : bool , ID : [ ] [ ID int , ID : [ ] [ ] [ ] [ ] [ } ] int ) { } func ] ( ) { ID",
  "func ID ( ID , bool : ID : [ ] [ ID int , ID : [ ] [ ] [ ] [ ] [ } ] int ) { } func ] ( ) { ID",
  "func ID ( ID : bool , ID : ] ) : bool { var ID : int { var ID : [ bool bool return true } }",
  "ID func ( ID : bool , ID : ] ) : bool { var ID : int { var ID : [ bool bool return true } }",
  "func ID ( ) : [ ] bool { return } int ID ( ) : bool { var ID : [ ( ID ) ] func }",
  "func ID ( ) : [ ] bool { return int } ID ( ) : bool { var ID : [ ( ID ) ] func }",
  "func ID ( ) : { ] bool [ return int } ID ( ) : bool { var ID : [ ( ID ) ] func }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : int var ID : [ ] bool ID ( ( ID ) ) = - ID while ( ID func { } } ) ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : int var ID : } ] bool ID ( ( ID ) ) = - ID while ( ID func { [ } ) ID ( ) { }",
  "func var ( ID : int , ID : bool , ID : bool ) { var ID : int ID ID : } ] bool ID ( ( ID ) ) = - ID while ( ID func { [ } ) ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool call ID ( { [ - ID ( ) ] [ - ID ] ) while ( ID ) { } } func ID ( ) ID }",
  "( ID ( ) { var ID : [ ] bool call ID ( { [ - ID ( ) ] [ - ID ] ) while ( ID ) { } } func ID func ) ID }",
  "( ID ( ) { var ID : [ ] bool call ID ( { [ ID ID ( ) ] [ - ID ] ) while ( - ) { } } func ID func ) ID }",
  "func ID ( ) : int { var ID : [ ] [ ] ] ( ID ( ) [ ID ] [ ID [ ) ] bool }",
  "func ID ( ) : int { var ID : [ ] [ ] ] ( ID ( ) [ ID ] [ ID [ ) ] bool }",
  "func ID ( ) : int { var ID : [ ] [ ] ] ( ID ( ) bool ID ] [ ID [ ) ] [ }",
  "func ID ( return { var ID : int ) ID ( true / ID [ ID ] * - - ID ) } func ID ( ) { }",
  "func ID ( return { var ID : int ) ID ( true / ID [ ID ] * } - ID ) } func ID ( ) { -",
  "func ID ( return { var - : int ) ID ( true / ID [ ID ] * } - ID ) } func ID ( ) { ID",
  "func ID ( ) : bool { var ID : ID var ID : int { bool ( ) = ID ( ID ) while - ( - - false ) { } } } func ID ( ) { }",
  "func } ( ) : bool { var ID : ID var ID : int { bool ( ) = ID ( ID ) while - ( - - false ) { } ID } func ID ( ) { }",
  "func } ( ) : bool { var ID : ID var ID : int { bool ( ) = ID ( ID ) while - ( - - false ) { } ID } func ID ( ) { }",
  "func ID ( ) { while ( ID - - [ ( ( ( ID ) ) ) ] ) { } } func ID ( ) { }",
  "func ID ( ) { while ( ID - - [ ( ( ( ID ) ) ) ] ID { } } func ) ( ) { }",
  "func ID ( ID : bool ) : int ( var ID : [ ID [ true / ID [ ( - ID ) ] [ - ( ID ) ] ] ] [ ] int var ID : bool } func ID { ) { }",
  "func ID ( ID : bool ) : int ( var ID : [ ID [ true / ID [ ( - bool ) ] [ - ( ID ) ] ] ] [ ] int var ID : ID } func ID { ) { }",
  "func ID ( ID : ) ) : int ( var ID : [ ID [ true / ID [ ( - bool ) ] [ - ( ID ) ] ] ] [ ] int var ID : ID } func ID { bool { }",
  "func ID ( ) { var ID : } return ( ID ( 123 / ( ( - ID ) ) / ID ) ) bool",
  "func ID ( ) { var ID : } return ( ID / 123 ( ( ( - ID ) ) / ID ) ) bool",
  "func ID bool ) { var ID : } return ( ID / 123 ( ( ( - ID ) ) / ID ) ) (",
  "func ID ( ID : bool , ID : bool , ID : bool ) : [ ID ( ID ( - ( - ) ( - - ID - ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID func bool , ID : bool , ID : bool ) : [ ID ( ID ( - ( - ) ( - - ID - ) ) ) ] bool { } : ID ( ) { }",
  "func ID ( ID : int ) { var ID : int call 123 ( true / ( - - 123 ) * ( - ID ) ) } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int call ) ( true / ( - - 123 ) * ( - ID 123 ) } func ID ( ) { }",
  "func ID ( ) : int ID { var ID : int call ) ( true / ( - - 123 ) * ( - ID 123 ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) bool bool { var ID : bool var ID : int } func ID ( ) : int { var ID : [ ] [ ] : }",
  "func ID ( ID : bool , ID : int ) bool bool { var ID : bool var ID : int } func ID ( var : int { ) ID : [ ] [ ] : }",
  "func : ( ID : bool , ID ID int ) bool bool { var ID : bool var ID : int } func ID ( var : int { ) ID : [ ] [ ] : }",
  "func ID ( ) : [ ID [ ( - - ID ( ) [ 123 ] [ ] ID ) ] [ ID ] ] [ ] [ ] [ ] [ ] bool { } func ID ( ) { }",
  "{ ID ( ) : [ ID [ ( - - ID ( ) [ 123 ] [ ] ID ) ] [ ID ] ] [ ] [ ] [ ] [ ] bool { } func ID ( ) func }",
  "{ ID ( ) [ [ ID [ ( - - ID ( ) [ 123 ] [ ] ID ) ] [ ID ] ] [ ] [ ] : ] [ ] bool { } func ID ( ) func }",
  "func ID ( ID : [ ] * ID [ false / ( - ID != false ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : / ] * ID [ false [ ( - ID != false ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : / ] * ID [ false [ ( ) ID != false ) ] int - { } func ID ( ) { }",
  "func ID ( ) : [ 123 / true * ID [ ( bool ( ) ) ] ] ID { }",
  "func ] ( ) : [ 123 / true * ID [ ( bool ( ) ) ] ID ID { }",
  "func ID ( ID : bool , : : [ ] [ ] [ ] bool , ID ID [ ] int ) { var ID : int var ID : int }",
  "func ID ( [ : bool , : : [ ] [ ] ID ] bool , ID ID [ ] int ) { var ID : int var ID : int }",
  "func ID ( [ : bool , : : [ ] [ ] ID ] bool , : ID [ ] int ) { var ID : int var ID ID int }",
  "func ID ( ID : bool ID , : int , ID : int ) { while ( 123 * true / - false ) { } }",
  "func ID ( false : bool ID , : int , ID : int ) { while ( 123 * true / - ID ) { } }",
  "func ) ( false : bool ID , : int , ID : int ) { while ( 123 * true / - ID ID { } }",
  "func ID ( ) [ { var ID : int var ID : { - - ( ID ( ) ) ] int } while - true { } } func ID ( ) { }",
  "func ID ( ) [ { var : ID int var ID : { - - ( ID ( ) ) ] int } while - true { } } func ID ( ) { }",
  "func ID { ) [ { var : ID int var ID : ( - - ( ID ( ) ) ] int } while - true { } } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID ) bool var ID : int while - ( ( ( ID : ) ) { } { } }",
  "func ID ( ID { int ) : bool { var ID ) bool var ID : int while - ( ( ( ID : ) ) : } { } }",
  "func ID ( ID { int ) } bool { var ID ) bool var ID : int while - ( ( ( ID : ) ) : : { } }",
  "func ID ( ID : ) , ID : int int { var ID : int var ID : [ ] int return }",
  "func ID ) ID : ( , ID : int int { var ID : int var ID : [ ] int return }",
  "func ID ) ID : ( , ID : int int ID var ID : int var { : [ ] int return }",
  "func ID ( ID : int ) : [ ( ID [ ID ( ) * true * } ] ) ] int { false",
  "func ID ( : : int ) ID [ ( ID [ ID ( ) * true * } ] ) ] int { false",
  "func [ ( : : int ) ID [ ( ID ID ID ( ) * true * } ] ) ] int { false",
  "func ID ( true : bool , ID : bool , ID : int ) { ID = true == false and ( - - ( ID ) ) and ID while ID { } } func ID ( ) { }",
  "func ID ( true : bool , ID : ) , ID : int ) { ID = true == false and ( - - ( ID bool ) and ID while ID { } } func ID ( ) { }",
  "func ID ( true : bool , ID : ) , ID : int ) { and = true == false and ( - - ( ID bool ) ID ID while ID { } } func ID ( ) { }",
  "ID ID ( ID : int ) { call ID ( - - ID [ func ( true ) ] ) ID = ID }",
  "ID ID ( ID : int ) true call ID ( - - ID [ func ( { ) ] ) ID = ID }",
  "ID ID ( - : int ) true call ID ( ID - ID [ func ( { ) ] ) ID = ID }",
  "func ID ( ) : [ ( int * ID ( ) [ - - - ID ] ) ] 123 { }",
  "func ID ( ) : [ ( int * ID ( ) [ - { - ID ] ) ] 123 - }",
  "func ID ( ) int [ ( : * ID ( ) [ - { - ID ] ) ] 123 - }",
  "func ID ( ID : bool , ID : bool , ID : int ) : bool { var ID : ( [ ( - ID ) ) ] bool }",
  ", ID ( ID : bool , ID : bool func ID : int ) : bool { var ID : ( [ ( - ID ) ) ] bool }",
  "func ID ( ID : int ) { bool ID : var print ( - 123 / ID * ID ) }",
  "func ID ( ID int : ) { bool ID : var print ( - 123 / ID * ID ) }",
  "func { ( ID int : ) ID bool ID : var print ( - 123 / ID * ID ) }",
  "func ID ( ID : [ ] bool , ID : int ] ID : [ ID [ - - true * ID / false ] ] [ ] [ , int ) { } func ID ( ) { }",
  "func } ( ID : [ ] bool , ID : int ] ID : [ ID [ - - true * ID / false ] ] [ ] [ , int ) { } func ID ( ) { ID",
  "func } ( ID : [ ] bool ID , : int ] ID : [ ID [ - - true * ID / false ] ] [ ] [ , int ) { } func ID ( ) { ID",
  "func var ( ) { ID ID : bool return ( ID ( - ID [ - - - ID ] ) ) }",
  "func [ ( ID : int ) : ID ] [ ( - false - ID ( ( - ID ) ) + ID ) ] int { } func ID ( ) { }",
  "func [ ( ID : int ( : ID ] [ ( - false - ID ( ) - ID ) ) + ID ) ] int { } func ID ( ) { }",
  "func [ ( ( : int ID : ID ] [ ( - false - ID ( ) - ID ) ) + ID ) ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : [ true * - 123 / 123 - ID [ - ] true - ID ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : ID true * - 123 / 123 - ID [ - ] true - ID ] [ ] bool } func [ ( ) { }",
  "func ID ( ) { var ID : ID true * - } / 123 - ID [ - ] true - ID ] [ ] bool } func [ ( ) { 123",
  "func ID ( ) : [ ] int { var ID : [ 123 / [ / 123 and 123 ] int var ID : [ ] [ ] false ] bool }",
  "func ID ( ) : [ ] int { var ID : [ 123 / [ / 123 ID 123 ] int var and : [ ] [ ] false ] bool }",
  "func ID ( ) : [ ] int { var ID ] [ 123 / [ / 123 ID 123 ] int var and : [ : [ ] false ] bool }",
  "func ID func ID : [ ( ( ( ID ( ID ) ) ) ) ] bool ) { } ( ID ( ) { }",
  "( ID func ID : [ func ( ( ID ( ID ) ) ) ) ] bool ) { } ( ID ( ) { }",
  "( ID func ID : [ func ( ( ID ( ID ) ) { ) ] bool ) { } ( ID ( ) ) }",
  "func ID ( ) { while ( ID ( ) [ ( - ( ( ( - - - - ID ) ) ) } ] ) { ) ID = - true }",
  "func ID ( ) { while ID ID ( ) [ ( - ( ( ( - - - - ( ) ) ) } ] ) { ) ID = - true }",
  "func ID ( ) - while ID ID ( ) [ ( - ( ( ( - { - - ( ) ) ) } ] ) { ) ID = - true }",
  "func ID ( ) { call ID ( false / ( ( 123 ) ( false ) / ( - - ID * ) ) ) } func ID ( ) { }",
  "func } ( ) { call ID ( false / ( ( 123 ) ( false ) / ( - - ID * ) ) ) ID func ID ( ) { }",
  "func } ( ) { call ID ( false / ( ( 123 ) ( false ) / ( - - ID * ) ) ) ID { ID ( ) func }",
  "func ID ( ID : int bool : [ ] [ ] int { var ID : [ ID [ 123 ] [ - - true ] ] [ ] ) } func ID ( ) { }",
  "func ID ( ID : int bool : [ ] [ func int { var ID : [ ID [ 123 ] [ - - true ] ] [ ] ) } ] ID ( ) { }",
  "func ID ( ID : int bool : [ ] [ func int { var ID : [ ID ] 123 ] [ - - true ] ] [ ] ) } [ ID ( ) { }",
  "func ID int ID : int ) : [ ] int { var ID : ( var ID : bool if 123 or ID or 123 { } call ID ( ) } func ID ( ) { }",
  "func ID int ID : int ) : [ ] int { var ID : ( func ID : bool if 123 or ID or 123 { } call ID ( ) } var ID ( ) { }",
  "func ID int ID : int ) : [ ] int { var ID : ( func ID : bool if 123 or ID or 123 { } call ID ( ) } var ID ( ) { }",
  "func ID [ ) : bool { var ID : ( 123 * 123 / ( false * - ( 123 ) ) ] int }",
  "func ID [ ) : bool { var ID : } 123 * 123 / ( false * - ( 123 ) ) ] int (",
  "func ID [ ) : bool { var ID : * 123 * 123 / ( false } - ( 123 ) ) ] int (",
  "func ID : ) : int { var ID : int var ID ( bool return ID ( ( false ) ) }",
  "func ID : ) int : { var ID : int var ID ( bool return ID ( ( false ) ) }",
  "func ID : ) int : { var ID : int var ID ( bool return ID ) ( false ( ) }",
  "func ID ( ) ) var ID : [ ( ( false / - ( ( false ) { ) ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ) ) var ID : [ ( ( false / - ( ( false ) { ) ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ) ) var ID : [ ) ( false / - ( ( false ) { ) ( ] int var ID : int } func ID ( ) { }",
  "func ID ( ID ID bool , ID : int ) { var ID : int if 123 / ID ( ) [ ID ] [ ID ] { } } func : ( ) { }",
  "func ID ( ID ID bool , ID : int ) { var ID : int if 123 / ID ( ) [ ID { [ ID ] ] } } func : ( ) { }",
  "func ID ( ID ID bool , ID : int ) { var ID : int if ID / ID ( ) [ ID { [ 123 ] ] } } func : ( ) { }",
  "func ID ( ) { var ID : [ ID ( ) [ - - - - ( - - true bool ] [ ID ] ] ) }",
  "func ID ( ) { [ ID : [ ID ( ) [ - - - - ( - - true bool ] var ID ] ] ) }",
  "func ID ( ) { [ ID : [ ID ( ) [ ) - - - ( - - true bool ] var ID ] ] - }",
  "func ID ( ID : bool ) ID : [ ] bool , ID : [ ] [ ID [ - ID ] [ ( ID , ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool ) ID : [ ] bool , ID : [ ] [ ID [ - ID ] [ ( ID , ID ] bool ) { } func ] ( ) { }",
  "func ID ( ID : bool ) ID : [ ] bool , ID : [ ] ( ID [ - ID ] [ [ ID , ID ] bool ) { } func ] ( ) { }",
  "func ID ( } : bool { var ID : int var ID : int while ID ( ( ID ) ) { ) if - true { } }",
  "func ID ( } : bool { var ID : int var ) : int while ID ( ( ID ID ) { ) if - true { } }",
  "func ID ( } : bool { ID var : int var ) : int while ID ( ( ID ID ) { ) if - true { } }",
  "func ID ( ) : bool { { { if - ( ID * - ID / - } - - ( ID ) ) ) { } { } } while ID { ( } } func ID ( ) { }",
  "func ID ( ) : bool { { { if - ( ID * - ID { - } - - ( ID ) ) ) { } / } } while ID { ( } } func ID ( ) { }",
  "func ID ( ) : bool { { } if - ( ID * - ID { - } - - ( ID ) ) ) { { / } } while ID { ( } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] bool } func ID ( ID : bool : : int { var ID : bool var ID ) bool }",
  "func ID ( ) : int { var ID : [ var bool } func ID ( ID : bool : : int { var ID : bool ] ID ) bool }",
  "func ID ( ) : int { var ID : [ var bool } func ID ( ID : bool : : int { var ID : bool ] ID ) bool }",
  "func ID ( ID : ] , ID : [ ] int ) : [ ID ( ID [ ( ( ID ) ) ] ) ] [ int [ ] bool { } func ID ( ) { }",
  "func ID ( ID : ] , ID : [ ] int ) : [ ID ( bool [ ( ( ID ) ) ] ) ] [ int [ ] ID { } func ID ( ) { }",
  "func ID ( ID : ] : ID , [ ] int ) : [ ID ( bool [ ( ( ID ) ) ] ) ] [ int [ ] ID { } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : [ ) - - - - ( - 123 ) ( ] bool } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : [ ) - - - - ( - 123 ) ( ] bool } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : [ bool - - - - ( - 123 ) ( ] ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] bool , ID return bool ) : int { var ID : int var ID : bool : - ID }",
  "func ID ( ID : bool , ID : [ ] [ ] bool , ID return bool ) : int { var ID : bool var ID : int : - ID }",
  "func ID ( ID : : , ID : [ ] [ ] bool , ID return bool ) : int { var ID bool bool var ID : int : - ID }",
  "func ID ( ) : int { var ID : bool var ID : int { var ID : [ ] ] ] [ ] [ ] [ [ int } } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : int { var ID : [ ] ] ] [ ] [ ] [ [ int } } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID ] int { var ID : [ ] ] ] [ ] [ : [ [ int } } func ID ( ) { }",
  "func ( ID ) { var ID : [ ] int var ID : [ ID ( - ( ( ID ) ) ) ] [ ] int } func ID ( ) { }",
  "func ( ID ) { var ID : [ ] int var ID : ] ID ( - ( ( ID ) ) ) ] [ [ int } func ID ( ) { }",
  "func ( ID ) { var ID : ) ] int var ID : ] ID ( - ( ( ID [ ) ) ] [ [ int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : [ 123 } true / - ( ID ) / - - ( ID ) ] bool { } func ID ( ) { ==",
  "func ID ( ID : bool , ID : bool ) : [ { } true / - ( ID ) / - - ( ID ) ] bool 123 } func ID ( ) { ==",
  "func ID ( ID : bool , ID : bool ) : [ { } ( / - ( ID ) / - - ( ID ) ] bool 123 } func ID true ) { ==",
  "func ID ( ID : bool ) ID : int , : int { return - ID ( - - ID ) }",
  "func ID ( ID int bool ) ID : : , : int { return - ID ( - - ID ) }",
  "func ID ( ID - bool ) ID : : , : int { return int ID ( - - ID ) }",
  "func ID ( ) ( var ID : int var ID : [ ] int ID = - - - 123 * ( - - ( ( ID ) ) ) print ( ( ( false ) ) ) } func ID { ) { }",
  "func ID ( ) ( var ID : int var ID : [ ] int ID = - - - 123 * ( - - ( ( ID ( ) ) print ( ) ( false ) ) ) } func ID { ) { }",
  "func ID ( ) ( var ID : int var ID : [ ] int ID = - - - 123 ( ( - - ( ( ID ( ) ) print * ) ( false ) ) ) } func ID { ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { while ID / ( ( ID ) ) / 123 { } print false } func ID ( ) } {",
  "func ID ( : : bool , ID ID bool , ID : int ) { while ID / ( ( ID ) ) / 123 { } print false } func ID ( ) } {",
  "func ID ( false : bool , ID ID bool , ID : int ) { while ID / ( ( ID ) ) / 123 { } print : } func ID ( ) } {",
  "func ID ( ) : bool { var ) : [ - ID and true / ( ID ) * ( - - - - - ( false ID ) ] int } func ID ( ) { }",
  "func ID ( ) : bool { var ) : [ - ID and true / ( ID ) * ( - - - - - ( false ID ) ] int } func ID ( ) { }",
  "func ID ( ) : bool { var ) : [ - ID and ID / ( true ) * ( - - - - - ( false ID ) ] int } func ID ( ) { }",
  "func ID ( ) : bool } { var ID : bool if ( - true * ( false ) / - - true ) { { if 123 { } } } func ID ( ) { }",
  "func ID ( ) : bool } { - ID : bool if ( - true * ( false ) / var - true ) { { if 123 { } } } func ID ( ) { }",
  "func ID ( ) : bool { { - ID : bool if ( - true * ( false ) / var - true ) { { if 123 } } } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int { ID ID : bool var ID : [ ] bool } return ID } func var ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID ID : bool { ID : [ ] bool } return ID } func var ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ ] bool } func ID ( ) : bool { ) ID : int call ID ( var if ( ( 123 ) ) { } }",
  "func ID ( ID : bool , : : bool ) { var ID : [ ] bool } func ID ( ) ID bool { ) ID : int call ID ( var if ( ( 123 ) ) { } }",
  "func ID ( ID , bool : : : bool ) { var ID : [ ] bool } func ID ( ) ID bool { ) ID : int call ID ( var if ( ( 123 ) ) { } }",
  "func - ( ID : int , ID : [ ID ( ID true - ( false ) ) ] [ ] int ) { }",
  "func - ( ID : int , ID : [ ID ( ID true - ( false int ) ] [ ] ) ) { }",
  "func - ( ID : int , ID : [ ID ( ID true - ( false int ) ] [ ] ) ) { }",
  "- ID ( ) : int { { var ID : bool var ID : [ ( 123 + ( func - false ) ) ] [ ] bool } while - true { } }",
  "- ID ( ) : int ID { var { : bool var ID : [ ( 123 + ( func - false ) ) ] [ ] bool } while - true { } }",
  "- ID ( ) : int ID { var { : bool var ID : [ ( 123 + ( func - false { ) ] [ ] bool } while - true ) } }",
  "func ID ( ) : int { var ID : int var ID ( [ ( true * ID ( true ) ) ] [ ] [ ] int } func ID : ) { }",
  "func ID ( ) : int { var ID ID int var ID ( [ ( true * ID ( true ) ) ] [ ] [ ] int } func : : ) { }",
  "func ID ( ) : int { var ID ID int var ID ( [ ( true * ID ( true ) ) ] [ ] [ } int ] func : : ) { }",
  "func ID ) ID : [ - ID [ - ( 123 * - ID * - ID ( ] ] [ ] int ) { } func ID ( ) { }",
  "func ID ) ID : [ ID ID [ - ( 123 * - ID * - ID ( ] ] [ ] int ) { } func - ( ) { }",
  "func ID ) ID : - ID ID [ - ( 123 * - ID * - ID ( ] ] [ ] int ) { } func [ ( ) { }",
  "func ID ( ) ID var ID : bool var ID : int { var ID : bool var ID : int while { ( ) { } call ID ( ) } }",
  "func ID ( ) ID var : : bool var ID ID int { var ID : bool var ID : int while { ( ) { } call ID ( ) } }",
  "func ID ( ) ID var : : bool var ID ID int { var ID : bool ( ID : int while { ( ) { } call ID var ) } }",
  "func ID ( ) { var ID } bool var ID : bool print ID ( ) [ ( ID ) ] :",
  "func bool ( ) { var ID } ID var ID : bool print ID ( ) [ ( ID ) ] :",
  "func bool ( ) { var ID } ID var ID : bool print ID ] ) [ ( ID ) ( :",
  "func ID ( ID : int var ID : bool , ID : int ) : int { , ID : bool }",
  "func ID ( ID : int var ID : bool , ID : int ) : int { , ID : bool }",
  "func ID ( ID : int var ID : bool , ID : int bool : int { , ID : ) }",
  "func ID ( ID : bool , ID ] [ : int ) : [ ID * false - 123 / false ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID ] [ : int ) 123 [ ID * false - : / false ] [ ] int { } func ID ( ) { }",
  "func ID : ID : bool , ID ] [ : int ) 123 [ ID * false - ( / false ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : ID , ID : int , ID : [ false + - - - true / ID [ 123 ] [ ( - ID ) ] / ID ] int ) { } func int ( ) { }",
  "func ID ( ID : ID , ID : int , ID : [ { + - - - true / ID [ 123 ] [ ( - ID ) ] / ID ] int ) false } func int ( ) { }",
  "func ID ( ID : ID , ID : int , ID ID [ { + - - - true / ID [ 123 ] [ ( - ID ) ] / : ] int ) false } func int ( ) { }",
  "func ID ( ) { var ID : int ID ( ( ( ID ( ) ) ) ) = ID func } ID ( ) { }",
  "func ID ( ) { var ID : int ID ( } ( ID ( ) ) ) ) = ID func ( ID ( ) { }",
  "func ID ( ) { var ID : int ID ( } ( ID ( ) ) ) ) = ID func ( ID ( ) { }",
  "func ID ( ) { var ID : : var ID int bool return }",
  "func ( ID ) { var ID : : var ID int bool return }",
  "func ( var ) { ID ID : : var ID int bool return }",
  "func ID ( ) { var ID : bool var ID : int ID ( - - ( } 123 ) ) = ( - true ) -",
  "func ID ( ) { var ID : bool var ID : int ID ( } - ( - 123 ) ) = ( - true ) -",
  "func ID ( ) { var ID - bool var ID : int ID ( } : ( - 123 ) ) = ( - true ) -",
  "func ID ( ID : bool , ID : [ ] ) , ID : bool ) : bool { var ID : int var ID : [ ] bool } func ID ( bool { }",
  "func ID ( func : bool , ID : [ ] ) , ID : bool ) : bool { var ID : int var ID : [ ] bool } ID ID ( bool { }",
  "func ID ID func : bool , ID : [ ] ) , ID : bool ) : bool { var ID : int var ID : [ ] bool } ID ( ( bool { }",
  "func ID ( [ : [ ] int , ID : int ) : [ ] ID ( ID / ID ) ] [ ] [ ] [ ] bool { }",
  "func ID ( , : [ ] int [ ID : int ) : [ ] ID ( ID / ID ) ] [ ] [ ] [ ] bool { }",
  "func ID ( , : [ ] int [ bool : int ) : [ ] ID ( ID / ID ) ] [ ] [ ] [ ] ID { }",
  "func ID ( ID : int , ID : [ ] bool ) : bool { ) ID ( ) ID [ ID [ ( true ) ] [ - ( ID ) ] ] [ ( ID ) ] = ID } func ID ( call { }",
  "func ID ( ID : int { ID : [ ] bool ) : bool { ) ID ( ) ID [ ID [ ( true ) ] [ - ( ID ) ] ] [ ( ID ) ] = ID } func ID ( call , }",
  "func ID ( ID : int { ID : [ ] bool ) : bool { ) ID ( ) ID [ ID [ ( true ) ] [ - ( ID ) ] ] [ ( ID ) ] = ID } func ID ( call , }",
  "func ID ID ) { var ( : [ - true * ID ( ( ID ) ) / ( 123 ) ] int } func ID ( ) { }",
  "func ID ID { { var ( : [ - true * ID ( ( ID ) ) / ( 123 ) ] int } func ID ( ) ) }",
  "func ID ID { { var ( : [ - true * ID ( ( ID ) ) ) ( 123 ) ] int } func ID ( / ) }",
  "func ID ( ) : bool { var ID : bool bool ID : var print ID ( ) * true * ( - ID ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool bool ID ) var print ID ( : * true * ( - ID ) } func ID ( ) { }",
  "func ID ( ) ( bool { var ID : bool bool ID ) var print ID ( : * true * ( - ID ) } func ID : ) { }",
  "func ID ( ID ] int ) { var ID : [ ID ( ) [ 123 + 123 + ( true ) ] [ - - - - ( 123 ) ] : [ ] int } func ID ( ) { }",
  "func ID ( ID ] int ) { var ID : [ ID ( ) [ 123 + 123 + ( true ) ] [ - - - - ( 123 ) ] : [ ] int } func ID ( ) { }",
  "func ID ( ID ] int ) { var ID : [ int ( ) [ 123 + 123 + ( true ) ] [ - - - - ( 123 ) ] : [ ] ID } func ID ( ) { }",
  "func ID ) ID : bool , ID : bool , ID : bool ( { while - 123 - - - false - ID { } call ID ( ) } func ID ( ) { }",
  "func ID ) { : bool , ID : bool , ID : bool ( ID while - 123 - - - false - ID { } call ID ( ) } func ID ( ) { }",
  "func ID ) { ) bool , ID : bool , ID : bool ( ID while - 123 - - - false - ID { } call ID ( : } func ID ( ) { }",
  "func ID ( ) { print 123 >= ( - ID ID [ ] [ ID ] ) }",
  "func ID ( ) { print 123 >= [ - ID ID [ ] ( ID ] ) }",
  "func ID ( print { ) 123 >= [ - ID ID [ ] ( ID ] ) }",
  "func ID ( ) { while - true * - ID ( - false - - true * - / ( 123 ) ) * - 123 { } } func ID ( ) { }",
  "func ID ( ) { * - true * - ID ( - false - - true while - / ( 123 ) ) * - 123 { } } func ID ( ) { }",
  "func ID ( - { * - true * - ID ( ) false - - true while - / ( 123 ) ) * - 123 { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : [ ] int , ID : bool ) : bool { ID [ - true ] = false ID ID - ( ( ( ID ) ) ) } func = ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : [ ] int , ID : bool ) : bool { ID [ - true ] = false ID ID - ( ( ( ID ) ) ) } func = ( ) { }",
  "ID ID ( func : [ ] [ ] bool , ID : [ ] int , ID : bool ) : bool { ID [ - true ] = false ID ID - ( ( ( ID ) ) ) } func = ( ) { }",
  "func ID ( ID : [ ] bool ) { var false : bool ID [ ( ( ID ) ) ] = 123 } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { var false ) bool ID [ ( ( ID : ) ] = 123 } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { var false ) bool ID [ ( ( ID : ) ] = 123 } func ID ( ) { }",
  "func ID ( ID : [ false - true * false * ID ( ) and ( ( ID { ) ] [ ] int ) ) } func ID ( ) { }",
  "func ID ] ID : [ false - true * false * ID ( ) and ( ( ID { ) ( [ ] int ) ) } func ID ( ) { }",
  "func ID ] ID : [ false - true * false * ID ( ) and ( ( ID { ) ( [ ] ( ) ) } func ID int ) { }",
  "func ID ( ) { var ID : int var ID : bool { var ID : [ ) int var ID : [ ( ID ) ] int } ID = - ( ID ] }",
  "func ID ( ) { var ID : : var ID : bool { var ID : [ ) int var ID int [ ( ID ) ] int } ID = - ( ID ] }",
  "func ID ( ) { var ID : : var ID } bool { var ID : [ ) int var ID int [ ( ID ) ] int : ID = - ( ID ] }",
  "func ID ( ID : int , ID : int ) { var ID : int var ID : bool print } - ID ) if - ( - ( false ) ) { ( }",
  "func ID ( ID : int , ID : int ) { var ID : int var ID : bool print } - ID ) if - ( - ( false ) ) { ( }",
  "func ID ( ID : int , ID : int ) { var ID print int var ID : bool : } - ID ) if - ( - ( false ) ) { ( }",
  "func ID ( ) { return 123 / ( ( true / ( ( - ( ID ) ) ) ) { / ID } func ID ( ) ) }",
  "func ID ( ) { return 123 / ( ( true / ( ( - ( ID ) ) ) ) { / ID } func ID ( ) ) }",
  "func ID ( ) { return 123 / ( ( true / ( ( - ( ID ) ) ) ) { / ID } func ID ( ) ) }",
  "func ID ( ) : bool { var ID : [ ] bool return * func ID ( ID : [ ID ( ) } 123 ] bool ) { }",
  "func ID : ) : bool { var ID ( [ ] bool return * func ID ( ID : [ ID ( ) } 123 ] bool ) { }",
  "func ID : ) : bool { var ID ( [ ] bool return * func ID ( { : [ ID ( ) } 123 ] bool ) ID }",
  "func ID ( ID : int , ID : int ) { var ID : bool var ID : int ID ( ) / ( true ) ) = ( true false } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : bool { ID : int ID ( ) / ( true ) ) = ( true false } func ID ( ) var }",
  "func ID ( ID : int , ID : { ) { var ID : bool int ID : int ID ( ) / ( true ) ) = ( true false } func ID ( ) var }",
  "bool ID ( ) { } func ID ( ID : [ false / ID [ false / false ] ] func ) { }",
  "/ ID ( ) { } func ID ( ID : [ false bool ID [ false / false ] ] func ) { }",
  "/ ID ( ) { } func ID ( ID : [ false bool ] [ false / false ] ID func ) { }",
  "func ID ( ) : bool { var ID : [ ] bool { var ID : { ] int call ID ( ID ) } if ( ID ) [ } }",
  "func ID ( ) : ID { var ID : [ ] bool { var ID : { ] int call ID ( bool ) } if ( ID ) [ } }",
  "func ID ( ) : ID { var ID : [ ] bool { var ID : { ] int call ID ( bool ) } if ( [ ) ID } }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID print bool : ( ( - ( ( ( ID ) ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) ( var ID print bool : ( ( - ( ( ( ID ) ) ) ) ) } func ID { ) { }",
  "func ID ( ID : [ ID ( ) [ ID ] false + false ) ] [ true ] ( [ ] int ) { }",
  "func ID ( ID : [ ID ( ) [ ID ] false + false ) ] [ true ] int [ ] ( ) { }",
  "func [ ( ID : [ ID ( ) ID ID ] false + false ) ] [ true ] int [ ] ( ) { }",
  "func ID ( ID : [ ] int ) { var ( : int var ID : bool } func ID ID ID : [ ] bool , ID : int , ID : [ ] int ) { }",
  "func ID ( ID : [ ] int ) { var ( : int var ID : bool } func ID ID ID : [ ] bool , int : int , ID : [ ] ID ) { }",
  "func ID ( ID : [ ] int ) { var ( , int var ID : bool } func ID ID ID : [ ] bool : int : int , ID : [ ] ID ) { }",
  "func ID ( ID : bool , ID : int , ID : bool { { var ID : [ ] int var ID : bool ) var ID : bool var ID : [ ] bool } }",
  "func ID ( ID : bool , ID , int : ID : bool { { var ID : [ ] int var ID : bool ) var ID : bool var ID : [ ] bool } }",
  "func ID ID ID : bool , ID : [ 123 / ID / ID [ ( false ) ] [ ( ] ] bool , ID : [ ] int ) { }",
  "func ID ID ID : bool , ID : [ 123 / ID / ID [ ( false ) ] [ bool ] ] ( , ID : [ ] int ) { }",
  "func ID ID ID : bool , ID : [ 123 / ID / ID [ ( false ) ] [ bool ] ] ( , ID : [ ] int ) { }",
  "func ID ( ) : [ false < ID ( - 123 + 123 * ( false ) ) ] func ] int { } [ ID ( ) { }",
  "func ID ( ) : [ false < ID ( - { + 123 * ( false ) ) ] func ] int { } [ ID ( ) 123 }",
  "func { ( ) : [ false < ID ( - ID + 123 * ( false ) ) ] func ] int { } [ ID ( ) 123 }",
  "func ID ( ) : int { var ID : [ ID [ 123 / - false < ( ( 123 ) ) ] ] bool func ID : int } var ID ( ) { }",
  "func ID ( ) : int int var ID : [ ID [ 123 / - false < ( ( 123 ) ) ] ] bool func ID : { } var ID ( ) { }",
  "func ID [ ) : int int var ID : [ ID ( 123 / - false < ( ( 123 ) ) ] ] bool func ID : { } var ID ( ) { }",
  "func ID ( ) : int int var ID : int var ID : { print - ID ( ( 123 ) ) }",
  "func ID ( ) : int int var ID : int var ID : { print - ID ( ( 123 ) ) }",
  "func ID ( ) : int int var ID : int var ID : { 123 - ID ( ( print ) ) }",
  "func ID ( ) { - - false - return - ID * ID + true and ID }",
  "func ID * ) { - - false - return - ID ( ID + true and ID }",
  "func ID * ) { - - false - return ID ID ( ID + true and - }",
  "func ID ( ID : int , ID : int ) ID : int , { var ID : [ ] bool var ID : [ ] [ - ID ] int } func ID ( ) { }",
  "[ ID ( ID : int , ID : int ) ID : int , { var ID : [ ] bool var ID : func ] [ - ID ] int } func ID ( ) { }",
  "[ ID ( ID : int , ID : int ) ID : int , { var ID : ] ] bool var ID : func ] [ - ID [ int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { [ ID : var ] bool return }",
  "func ID ( ID : bool , ID : int , ID : bool ) { [ ID : var ] bool return }",
  "func ID ( { : bool , ID : int , ID : bool ) ID [ ID : var ] bool return }",
  "func ID ( ID : [ ID [ - false * - - ( ( ) / ID - 123 ) ] ] bool ) { }",
  "func ID ( ID : [ ID [ - false * - ) ( ( - / ID - 123 ) ] ] bool ) { }",
  "func ID ( ID : { ID [ - false * - ) ( ( - / ID - 123 ) ] ] bool ) [ }",
  "func ID ( ) : { { var ID : int return } func ID ( ) : bool { while - - ( ( ( 123 ) ) ) int } }",
  "func ID ( ) : { { var ID : int return } func ID ( } : bool { while - - ( ( ( 123 ) ) ) int ) }",
  "func ID ( ) : { func var ID : int return } { ID ( } : bool { while - - ( ( ( 123 ) ) ) int ) }",
  "func ID ( ID { var ID : bool call ID ( ID [ ID [ ID ] [ - ( ID ) ] ] [ false ] ) call ) ( ) }",
  "func ID ( ID { var ID : bool call ID ( ID [ ID [ ID ] [ - ( ID ) ] ] [ false ] ) ) call ( ) }",
  "func ID ( [ { var ID : bool call ID ( ID ID ID [ ID ] [ - ( ID ) ] ] [ false ] ) ) call ( ) }",
  "} ID ( ) : int { print 123 + 123 > ID ( ( ID ) ) print - - - ( true ) func",
  "} ID ( ) : int { print 123 + 123 > ID ( ( print ) ) ID - - - ( true ) func",
  "} ID ) ) : int { print 123 + 123 > ID ( ( print ) ) ID - - - ( true ( func",
  "func ID ( ) { int : var ID : bool return - - ( ID ( ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ) { int : var ID : ) return - - ( ID ( ( ID ) bool ) } func ID ( ) { }",
  "func ID ( ) { int : var ID : ) return - - ( ) ( ( ID ) bool ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ) [ ] int , ID : [ ] bool ) { call ID ( ] }",
  "func ID ( ID : [ , ID : bool ) [ ] int , ID : [ ] bool ) { call ID ( ] }",
  "ID func ( ID : [ , ID : bool ) [ ] int , ID : [ ] bool ) { call ID ( ] }",
  "func ID ID ( : [ - - ( - - ID ( ) / true * false ) ] int ) { }",
  "func ID ID ( : [ - - ( - - ID ( ) / true false * ) ] int ) { }",
  "func ID ID ( : [ - - ( - - ID ( ) / true ) * false ] int ) { }",
  "func ID ( ID : [ ] bool ) { var ID : ] [ int ID = - ( ID ) }",
  "func ID ( ID : [ ] bool ) { var ID : ] - int ID = [ ( ID ) }",
  "func ID ( ) : int { var ID : bool var ID : bool while - ( } or ID ) { 123 }",
  "func ID ( 123 : int { var ID : bool var ID : bool while - ( } or ID ) { ) }",
  "func ID ( 123 : int { var ID : bool or ID : bool while - ( } var ID ) { ) }",
  ") ID ( ID : int , ID : [ ] bool , ID : int ) : int { return ID ( 123 ) } func ID ( func { }",
  ") ID ( ID : int , ID ) [ ] bool , ID : int : : int { return ID ( 123 ) } func ID ( func { }",
  ") ) ( ID : int , ID ID [ ] bool , ID : int : : int { return ID ( 123 ) } func ID ( func { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : int var ID : bool while true * - - ) ID / - ID { } } func ID ( - { }",
  "func ID ( ID : int , ID : bool ) ID bool { var : : int var ID : bool while true * - - ) ID / - ID { } } func ID ( - { }",
  "func ID ( ID : int ID , : bool ) ID bool { var : : int var ID : bool while true * - - ) ID / - ID { } } func ID ( - { }",
  "func ID ( bool { } func ID ( ID : [ ] [ ] ) , ID : bool , ID : bool ) { var ID : bool var ID : bool }",
  "func ID ( bool { } func ID ( ID : [ ] [ ] ) , ID : bool , ID : bool ) { ID ID : bool var var : bool }",
  "func ID ( bool { } func [ ( ID : ID ] [ ] ) , ID : bool , ID : bool ) { ID ID : bool var var : bool }",
  "func ID bool ID : int ) : ( { if ID [ - - 123 / ID * ID ] { } print ID } func ID ( ) { }",
  "func ID if ID : int ) : ( { bool ID [ - - 123 / ID * ID ] { } print ID } func ID ( ) { }",
  "ID ID if ID : int ) : ( { bool func [ - - 123 / ID * ID ] { } print ID } func ID ( ) { }",
  "func ID ( ID : : , ID int bool , ID : [ ] [ ID [ ID [ ( - 123 ) ] [ false ] ] [ ( - ( - ( true ) ) ) ] ] int ) { }",
  "func ID ( ID : : , [ int bool , ID : [ ] [ ID ID ID [ ( - 123 ) ] [ false ] ] [ ( - ( - ( true ) ) ) ] ] int ) { }",
  "func ID ( ID : : , [ int bool , ID : [ ] [ ID ID ID [ ( - 123 ) ] [ false ] ] [ ( - ( - ( true ) ) ) ] ] int ) { }",
  "func - ( ) { var ID : [ ID ( ID [ ID true ] ) ] bool }",
  "func - ( ) { var ID [ [ ID ( ID : ID true ] ) ] bool }",
  "func - ( ) { var ID [ ID ID ( ID : [ true ] ) ] bool }",
  "func ID ( ) ( call ID ( ID { ) [ ( ( - 123 ) ) ] ) }",
  "func ID ( ) ( call } ( ID { ) [ ( ( - 123 ) ) ] ) ID",
  "func ID ( ) ) call } ( ID { ) [ ( ( - 123 ) ( ] ) ID",
  "func ID ID ) { var ID : int if ID [ ID * - true - - - - ( ID ) + - ( ( - ID ) ) ] [ true ] { } } func ( ( ) { }",
  "func ID ID ) { var ID : int ID if [ ID * - true - - - - ( ID ) + - ( ( - ID ) ) ] [ true ] { } } func ( ( ) { }",
  "func ID ID ) { - ID : int ID if [ ID * - true var - - - ( ID ) + - ( ( - ID ) ) ] [ true ] { } } func ( ( ) { }",
  "[ ID ( ID : int , ID : int , ID : bool ) : func 123 / ID [ ( true ) ] [ ( true ) ] ] [ ] int { } func ID ( ) { }",
  "[ [ ( ID : int , ID : int , ID : bool ) : func 123 / ID [ ( true ) ] ID ( true ) ] ] [ ] int { } func ID ( ) { }",
  "[ [ ( ID : int , ID : int , ID : bool ) : func 123 / ID [ ( true ) ] ID ( true ) ] ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ 123 bool , ID : [ ] * ( ( true ) ) ] bool ) { }",
  "func ID ( ID : int , ID : [ 123 bool , ID : [ ] * ( ( true ) ) ] bool ) { }",
  "func ID ( ID : int , ID : [ 123 bool , ID : [ ] * ( ( true ) } ] bool ) { )",
  ") ID ( ID : [ ] int , ID : bool ) { call ID ( ID / ( ( ( - 123 ) ) ) func { } }",
  ") ID ( ID : [ ] int , ID ) bool ) { call ID ( ID / ( ( ( - 123 ) : ) func { } }",
  ") ID ( ID : [ ] int , ID ) bool ) { call ID ( ID / ( ( ( - 123 ) : ) func { } }",
  "func ID ( ) { } ID ID ( ID : [ ] bool , func : [ ] [ ( ID ) ] bool ) { }",
  "func bool ( ) { } ID ID ( ID : [ ] bool , func : [ ] [ ( ID ) ] ID ) { }",
  "func bool ( ) { } ID ID ID ID : [ ] bool , func : [ ] [ ( ( ) ] ID ) { }",
  "func ID ( ) { var ID ) int var ID : int { } call ID ( : return }",
  "func ID ( ) { var ID int ) var ID : int { } call ID ( : return }",
  "func ID ( ) { var var int ) ID ID : int { } call ID ( : return }",
  "func ID ) ) { var ID : bool var ID : bool if ( ID ( ( [ ID ] ) { } } func ID ( ) { }",
  "func ID ) ) { var ID : bool var ID : bool if ( ID ID ( [ ( ] ) { } } func ID ( ) { }",
  "func ID ) ) { var ID : bool var ID : ) if ( ID ID ( [ ( ] bool { } } func ID ( ) { }",
  "func ID ( ID : [ ( true - 123 / ID [ 123 ] + true ) ] { ) { } func ID ( ) bool }",
  "func ID ( ID : [ ( ) - 123 / ID [ 123 ] + true ) ] { ) { } func ID ( true bool }",
  "func ID ( ID : [ ( ) - 123 ) ID [ 123 ] + true ) ] { / { } func ID ( true bool }",
  "func ID ( ID : int [ ID : int ) : int { var ID : , ID [ false and ( ( ( - - ID ) ) ) ] [ ( 123 ) ] ] bool }",
  "func ID ( ID : ) [ ID : int ) : int { var ID : , ID [ false and ( ( ( - - ID ) int ) ] [ ( 123 ) ] ] bool }",
  "func ID ( ID : ) [ ID : int ) : int { var ID : , ID [ false and ( ( ( - - ID ) int ) ] [ ( 123 ) ] ] bool }",
  "func ID ( ID : [ ID + false * ID [ false - ID + true ID * ID + ( ( ] ) ) ] int ) { }",
  "func ID ( ID : [ ID + false * ID ID false - [ + true ID * ID + ( ( ] ) ) ] int ) { }",
  "func ID ( ID : [ ID } false * ID ID false - [ + true ID * ID + ( ( ] ) ) ] int ) { +",
  ">= ID ( ID : int ) : int { return 123 / ( - true func 123 ) }",
  ">= ID ( ID : int ) : int { return 123 / ( ) true func 123 - }",
  ">= ID ( ID : int ) : int true return 123 / ( ) { func 123 - }",
  "func ID ( ID [ : false - - ( - - - ( - false ) ) ] [ ] bool ) { }",
  "func ID ( ID [ : false - - - - - ( ( - false ) ) ] [ ] bool ) { }",
  "func ID ( ID [ : false - - - - - ( ( { false ) ) ] [ ] bool ) - }",
  "func ID [ ) { var ID : ( ] [ ] bool return }",
  "func ] [ ) { var ID : ( ID [ ] bool return }",
  "func ( [ ) { var ID : ] ID [ ] bool return }",
  "func ID ( <= : [ - false - ID ( ) / ID - - 123 ) - false ] int { }",
  "func ID ( <= : [ - false - ID ( ) / ID - - 123 ) - false ] } { int",
  "[ ID ( ) : [ true / ( ID func false / ( - true ) ] [ ( ( ID ) ) ] ) ] int { } func ID ( ) { }",
  "[ ID ( ) : [ true / ( ID func false / ( - true ) ] [ ( ( ID ) ) ] ) ID int { } func ] ( ) { }",
  "[ ID ( ) : [ true / ( ID func false / ( - true ) ] ) ( ( ID [ ) ] ) ID int { } func ] ( ) { }",
  "func ID ( ( { var ID : int var ID : bool ID [ ID ( ) [ - - - - ID ] [ ) ( ( ID ) ) ) ] ] [ 123 ] = - 123 { } } func ID ( ) { }",
  "func ID ( ( { var ID : int var ID : - ID [ ID ( ) [ - - - - ID ] [ ) ( ( ID ) ) ) ] ] [ 123 ] = bool 123 { } } func ID ( ) { }",
  "int ID ( ( { var ID : func var ID : - ID [ ID ( ) [ - - - - ID ] [ ) ( ( ID ) ) ) ] ] [ 123 ] = bool 123 { } } func ID ( ) { }",
  "func ID ( ID : bool ) : ( { var ID : bool var ID : int { return - ID bool ) [ - ID ] } print false } func ID ( ) { }",
  "func ID ( ID : bool ) : ( { var ID : bool var ID : int ) return - ID bool { [ - ID ] } print false } func ID ( ) { }",
  "func ID ( ID : bool ) : ( { var ID : bool var ID : int ) return - ID bool { [ ID - ] } print false } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ - true ( ) [ ID * ID ] [ ( ID ) ] ] bool }",
  "func ID ( ) { var ID : int var ID : [ - true ( ) [ ID * bool ] [ ( ID ) ] ] ID }",
  "true ID ( ) { if false - false / ( func - - 123 ) * ( ( false ) ) + - false { } if false { } }",
  "true ID ( ) { if false - false / ( ) - - 123 func * ( ( false ) ) + - false { } if false { } }",
  "true ID ( ) { if false - false / ( ) - - 123 func * ( ( false ) ) + - false { } if false { } }",
  "func ID ( ID : bool , ID : int ) : int { var ID : int var ID : bool if 123 * ( ID ) / ID { } call ID ( ) } func ) ( ID { }",
  "func ID ( ID : bool , ID : int ) : int { var ID : * var ID : bool if 123 int ( ID ) / ID { } call ID ( ) } func ) ( ID { }",
  "func ID ( ID ID bool , ID : int ) : int { var ID : * var ID : bool if 123 int ( ID ) / ID { } call : ( ) } func ) ( ID { }",
  "func ID ( ) ID var ID : bool { ( - - ( - ID [ false ] ) ) = ( ID ) print ( ( - ( ( ID ) ) ) ) }",
  "func ID ( ) ID var ID : bool { ( - - ( - ID [ false ] ) ) = ( ID ) print ( ( - ( ( ID ) ) ) ) }",
  "func ID ( ) ID var ID : bool { ( - - ( - ID [ false ] ) ) = ( ID ) print ( ( - ( ( ID ) ) ) ) }",
  "func ID ( ) : [ ] bool { var - : int var ID : bool call ID ( ) print ( ID - 123 ) }",
  "func ID ( ) : [ ] bool { var - : int var ( : bool call ID ( ) print ID ID - 123 ) }",
  "func ID ( ) : [ ] ) { var - : int var ( : bool call ID ( bool print ID ID - 123 ) }",
  "func ID ( ID : int , ID : [ ID / - true - - ID * ID [ ID ] [ false ] ] bool } { )",
  "func ID ( - : int , ID : [ ID / ID true - - ID * ID [ ID ] [ false ] ] bool } { )",
  "func ID ( - ID int , ID : [ ID / : true - - ID * ID [ ID ] [ false ] ] bool } { )",
  "func ID ( ID : bool , ID : bool ) { var ID : [ - - - - 123 * true * bool ( true ) ) ] ( }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ - - - * 123 - true * bool ( true ) ) ] ( }",
  "func ID ( ID : ( , ID : bool ) { var ID : [ - - - * 123 - true * bool bool true ) ) ] ( }",
  "func ID ( ) : int { var ID : int var ID : int call ID ( true } ( ID ) ) call ID ( ) /",
  "func ID ( : : int { var ID : int var ID ) int call ID ( true } ( ID ) ) call ID ( ) /",
  "func ID ( : : int { var ID : int var ID ) int call ID ) true } ( ID ( ) call ID ( ) /",
  "func ID ( ) { var ID : bool if - - 123 + - != ID ID ( ) { } print ( ( 123 ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool if - - 123 + - != ID ID ( ) { } print ( ( 123 ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool != - - 123 + - if ID ID ( ) { } print ( ( 123 ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : int return - ( ] ( ) [ ( ( ( - 123 ) ) ) ] [ ID ID ) }",
  "func ID ID ) { var ID : int return - ( ] ( ) [ ( ( ( - 123 ) ) ) ] [ ( ID ) }",
  "func ID ID ) { var ID : int return - ( ) ( ] [ ( ( ( - 123 ) ) ) ] [ ( ID ) }",
  "func ID ( ) : bool { call ID ( ) while - ( ) [ - ID true + ID - - ID ] { } } func ID ( ) { }",
  "func ID } ) : bool { call ID ( ) while - ( ) [ - ID true + ID - - ID ] { ( } func ID ( ) { }",
  "func ID } ) : bool call { ID ( ) while - ( ) [ - ID true + ID - - ID ] { ( } func ID ( ) { }",
  "bool ID ( ) : [ ] bool { var ID : func var ID : bool return }",
  ": ID ( ) : [ ] bool { var ID bool func var ID : bool return }",
  ": ID ( ) : [ ] bool { bool ID var func var ID : bool return }",
  "func ID ( ] : int , ID : bool , ID : [ 123 / ( ID [ ID ] ) ID [ ] bool ) { }",
  "func ID ( ] : int , ID : bool , ID : [ 123 / ( ID [ ID ] ) ID [ ] bool ) { }",
  "func ID ( ID : : , ID int bool , ID : [ ( ID ( ) [ true ] ) ] bool ) { }",
  "func ID ( ID : : ) ID int bool , ID : [ ( ID ( ) [ true ] ) ] bool , { }",
  "func ID ( ) : : ID ID int bool , ID : [ ( ID ( ) [ true ] ) ] bool , { }",
  "func ID ( ) : bool { var ID : int while - - - 123 and ID [ - 123 } { } ]",
  "func - ( ) : bool { var ID : int while - - - 123 and ID [ ID 123 } { } ]",
  "func - ( ) : bool { var ID : int while - - - 123 and ID [ ID ] } { } 123",
  "func ID ( ID : [ ID 123 - ( ID / ( - - - ( ) ) - ( 123 ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ID 123 - ( ID / ( - - - ( ) ) - ( 123 ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ID 123 - ( ID / ( - - - ( ) ) - ( 123 ) ) ] [ ] int ) { } { ID ( ) func }",
  "} ID ( ) : int { return func func ID ( ID : int ) : bool { }",
  ": ID ( ) } int { return func func ID ( ID : int ) : bool { }",
  ": : ( ) } int { return func func ID ( ID : int ) ID bool { }",
  "func ID ( ID : int ) { var ID : bool var ( : bool print 123 / ID true - ID ) call ID ( ) }",
  "func ID ( ID : int / { var ID : bool var ( : bool print 123 ) ID true - ID ) call ID ( ) }",
  ": ID ( ID func int / { var ID : bool var ( : bool print 123 ) ID true - ID ) call ID ( ) }",
  "func ID ( ) : int { var ID : ID 123 - [ ( ( - - false ) ) + true ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : ID 123 ) [ ( ( - - false ) ) + true ] bool } func ID ( - { }",
  "func ID ( ) : int { var ID : ID 123 bool [ ( ( - - false ) ) + true ] ) } func ID ( - { }",
  "func ID ( ID : bool ) ) ID ( { [ 123 * ID ( ID ) ] [ ID ] = ID }",
  "func ID * ID : bool ) ) ID ( { [ 123 ( ID ( ID ) ] [ ID ] = ID }",
  "func ID * ID : bool ) ) ID ( { [ 123 ( ID ( ID ) ] [ ID ] = ID }",
  "func ID ( ID : bool ] ID : [ ID ( ) [ 123 / ID [ ID ] ] , bool , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ] ID : [ ID ] ) [ 123 / ID [ ID ] ] , bool , ID : [ ( int ) { } func ID ( ) { }",
  "func ID ( ID : bool ] ID : [ ID ] ) [ } / ID [ ID ] ] , bool , ID : [ ( int ) { 123 func ID ( ) { }",
  "func ID ( ID : [ - true / ID ID ( - ID ( ) ) ] * ( - - ( - ( [ ) ) ) ] int ) { }",
  "func ID ( ID : [ - true / ID ID ( - ID ( ) ) ] * ( - - ( - ( [ ) ) ) ] int ) { }",
  "func ID ( ID : [ - true / ID ID ( - ID ) ) ( ] * ( - - ( - ( [ ) ) ) ] int ) { }",
  "func ID ( ) { true ID : int print var < ID ( ) [ ID ( ) ] [ false ] } func ID ( ) { }",
  "func ID ( ) { true ID : int ) var < ID ( ) [ ID ( print ] [ false ] } func ID ( ) { }",
  "func ID ( ) { true ID : int < var ) ID ( ) [ ID ( print ] [ false ] } func ID ( ) { }",
  "func ID ( ID { if true / - ID * ( ID ( true ) ) { } ID = - ) }",
  "func ID ( ID { if true / - ID * ( ID ( true ) ) { } ID = - ) }",
  "func ID ( ID { if ) / - ID * ( ID ( true true ) { } ID = - ) }",
  "func ID ( / { var ID : bool var ID : bool call ID ( ) call ID ( true ) false - - - ( - ( 123 ) ) - true ) }",
  "func ID ( / { var ID : bool var ID : 123 call ID ( ) call ID ( true ) false - - - ( - ( bool ) ) - true ) }",
  ") ID ( / { var ID : bool var ID : 123 call ID ( func call ID ( true ) false - - - ( - ( bool ) ) - true ) }",
  "func ID ) ( { ID = false and - - ( false / ( false ) * true ) if ID { } } func ID ( ) { }",
  "func ID ) ( - ID = false and - { ( false / ( false ) * true ) if ID { } } func ID ( ) { }",
  "func ID ) ( - ID = false and - { ( false / ( false ) * true ) } ID { } if func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool } func ID ( : ID [ false * false != 123 ] [ ] int ) { }",
  "func ID ( ) int bool { var ID : bool } func ID ( : ID [ false * false != 123 ] [ ] : ) { }",
  "func ID ( ) int bool { var ID : bool } : ID ( : ID [ false * false != 123 ] [ ] func ) { }",
  "func ID bool ID : ( ) { var ID : bool while 123 / - 123 - - true * ( 123 ) / - - true { } }",
  "func ID bool 123 : ( ) { var ID : bool while ID / - 123 - - true * ( 123 ) / - - true { } }",
  "func ID bool 123 : ( ) { 123 ID : bool while ID / - 123 - - true * ( var ) / - - true { } }",
  "func ID ( ) { var ID : int ID = ( ( ( - ( - ( ID ) ) ) ) ) { } } func } ( ) { ID",
  "func ID ( ) { var ID : int ID = ( ( ( - ( - ( ID ( ) ) ) ) { } } func } ) ) { ID",
  "func ID ( ) { var ID : int ID = ( ( ( - ( - ( ) ( ) ) ) ID { } } func } ) ) { ID",
  "func ID ( ) { [ ID : var ] int }",
  "func } ( ) { [ ID : var ] int ID",
  "func } ) ( { [ ID : var ] int ID",
  "func ID ( ) { print true - ID / - ( 123 + false * - ID ) while * ( ID ) { } }",
  "func ID ( ) { print true - * / - ( 123 + false ID - ID ) while * ( ID ) { } }",
  "func ID ( ) { print true - * / - ( 123 + false ID - ID ) while * ( ID ) { } }",
  "func ID ( ) : int { false ID : int var ID : bool call ID ( 123 <= ( ( var ) ) ) { } } func ID ( ) { }",
  "func ID ( ) : int { false ID : int var ID : bool call ID ( { <= ( ( var ) ) ) { } } func ID ( ) 123 }",
  "func ID ( ) : : { false ID int int var ID : bool call ID ( { <= ( ( var ) ) ) { } } func ID ( ) 123 }",
  "func ID ( ) : [ ] [ ID ( ( false * ( - ID ) / - ] ( ( ( true ) ) ) ) ) ) ( int { }",
  "func ID ( ) : - ] [ ID ( ( false * ( [ ID ) / - ] ( ( ( true ) ) ) ) ) ) ( int { }",
  "func ID ( ) : - ] [ ID ( ( false * ( [ ID ) / - ] ( ( ( true ) ) } ) ) ) ( int { )",
  "func ID ( ID : bool , ID : bool , ID : int ) { : ID var [ ] [ false <= false ] [ ] [ ] [ ] bool }",
  "bool ID ( ID : bool , ID : bool , ID : int ) { : ID var [ ] [ false <= false ] [ ] [ ] [ ] func }",
  "func ID ( ID : int , ID : int , ID : bool ) : [ - ( ( ID ) { ] [ ] int { } func ID ( ) ) }",
  "func ID ( ID : int , ID : int , ID [ bool ) : : - ( ( ID ) { ] [ ] int { } func ID ( ) ) }",
  "func ID ( ID : int , ID : int , ID [ bool ) : : - ( ] ID ) { ] [ ( int { } func ID ( ) ) }",
  "func ID ( ) : [ - - ( false * ID [ false - ID ] [ false ] / 123 - ) ] bool { } func ID ( ) { }",
  "func ID ( - : [ ) - ( false * ID [ false - ID ] [ false ] / 123 - ) ] bool { } func ID ( ) { }",
  "func ID ( - : [ ) ID ( false * - [ false - ID ] [ false ] / 123 - ) ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : bool var ID : - } func ID ( ID : [ ] bool , ID : [ ( - - - ( - int - true ) ) ] bool , ID : int ) { }",
  "func ID ( ) : [ ] bool { var ID : bool var ID : - int func ID ( ID : [ ] bool , ID : [ ( - - - ( - } - true ) ) ] bool , ID : int ) { }",
  "func ID ( ) : [ ] bool { ) ID : bool var ID : - int func ID ( ID : [ ] bool , ID : [ ( - - - ( - } - true ) var ] bool , ID : int ) { }",
  "func ID ( ) { var ID : bool ID = 123 / ID ( 123 / 123 * ( false ) ] [ ( ID ) ] ID = ( [ - ID ) ) }",
  "func ID ID ) { var ID : bool ID = 123 / ID ( 123 / 123 * ( false ) ] [ ( ID ) ] ID = ( [ - ( ) ) }",
  "func ID ID ) { var ID : bool ID = 123 / ID ( 123 / 123 * ( false ) ] [ ( ) ) ] ID = ( [ - ( ) ID }",
  "func ID ( ID : [ ID [ ID ( ) [ - ( ID ) ] [ 123 ] ] func bool ) { } ] ID ( ) { }",
  "func ID ( ID : [ ( [ ID ( ) [ - ID ID ) ] [ 123 ] ] func bool ) { } ] ID ( ) { }",
  "func ID ( ID : [ ( [ ID ( ) [ - ID ID ) ] [ 123 ] ] } bool ) { func ] ID ( ) { }",
  "func ID ( 123 { return - ID ( ) / ID ( ( 123 ) ) / ( false ) ) } func ID ( ) { }",
  "func ID ( 123 { return - ID ( ) / ID ( ( 123 ) ) / ( false ) ) } func ID ( ) { }",
  "func ID ( 123 { return - / ( ) / ID ( ( 123 ) ) ID ( false ) ) } func ID ( ) { }",
  "func ID ( ) : [ ] [ - ( - [ ID true / false / ID ] [ ( ( ID ) ) ] ) ] int { }",
  "func ID ( ) : [ ] [ - ( - [ ID true / false / ID ] [ ( ( ID ) ) ] ) ] int { }",
  "func ID ( ) : [ ] [ - int - [ ID true / false / ID ] [ ( ( ID ) ) ] ) ] ( { }",
  "func ID ( ) : [ ] bool { var ID ) int ID [ 123 + ( - 123 : ] [ - ( 123 ) ] = - - ( ID ) ID = ( - ID ) }",
  "func ID ( ) : [ ] bool { var ID ) int ID [ 123 + ( - 123 : ] - - ( 123 ) ] = [ - ( ID ) ID = ( - ID ) }",
  "func ID ( ) : [ ] - { var ID ) int ID [ 123 + ( - 123 : ] - bool ( 123 ) ] = [ - ( ID ) ID = ( - ID ) }",
  "func ID ( ) { if ( > ID ( ) * ( ID [ - true ( false ) ) ] ) { } }",
  "func ID ( ) { if ( > ID ( true * ( ID [ - ) ( false ) ) ] ) { } }",
  "func } ( ) { if ( > ID ( true * ( ID [ - ) ( false ) ) ] ) { } ID",
  "func ID ( ) { var ID : int ) } func ID ( return : [ ( ( ( true ) ) ) ] bool { }",
  "func ID ( ID : [ ] bool , ID : bool var { ) ID : int print ( ID ( ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] : , ID : bool var { ) ID bool int print ( ID ( ) ) } func ID ( ) { }",
  ") ID ( ID : [ ] : , ID : bool var { ) ID bool int print ( ID ( func ) } func ID ( ) { }",
  "func bool ( ) : ID { var ID : int } func ID ( ID : bool ) : int { var ID : int var ID : int while ID { } if - ID { } }",
  "func bool ( : : ID { var ID : int } func ID ( ID : bool ) : int { var ID : int var ID ) int while ID { } if - ID { } }",
  "func bool ( : : ID { var ID : int } func ID ( ID : bool ) : int { ID ID : int var var ) int while ID { } if - ID { } }",
  "func ID ( ) { var ID : ID - ID ( ( ( - [ ) ) ) ] int }",
  "func ID ( ) ID var { : ID - ID ( ( ( - [ ) ) ) ] int }",
  "func ID } ) { ID ( - ID ( - ( - ID ) ) ) = ( false ) call ID ( ) (",
  "func ID } ) { ID ( - ID ( - ( - ID ) ) ) = ( false ) call ID ( ) (",
  "func ID } ) { ID ( - ID ( - ( call ID ) ) ) = ( false ) - ID ( ) (",
  "func ID ( ) : bool { var ID : bool var ID : bool int func ID ( ) { var ID : [ ] } return }",
  "func ID ( ) : bool { var ID : bool var ID : bool int func ID ( ) { } ID : [ ] } return var",
  "func ID ( ) : bool { var ID : bool var ID : bool int func ID ( ) { ] ID : [ } } return var",
  "func ID ( ) { var ID : } var ID : int if - - 123 / - ( - - 123 ) / 123 { } print ( - - ID ) } func ID ( ) { bool",
  "func ID ( ) { - ID : } var ID : int if - var 123 / - ( - - 123 ) / 123 { } print ( - - ID ) } func ID ( ) { bool",
  "func ID ( ) { ID ID : } var ID : int if - var 123 / - ( - - 123 ) / 123 { } print ( - - ID ) } func - ( ) { bool",
  "func ID ] ) : [ ( int { call ID ( ) return ID ( ID ( ) ) } func ID ( ) { }",
  "func ID ] ) : [ ( int { call ID ( ) return ID ( ID ( ) ) } func ID ( ) { }",
  "func ID - ) : bool { var ID : bool var ID : int print ID * ( false * - 123 - - true } func ID ( ) { }",
  "func ID - ) : bool { var ID : bool var ID : int print ID * ( false * - 123 - - true } func ID ( ) { }",
  "func ID - ) : bool { var ID : bool var ID : int print ID ) ( false * - 123 - - true } func ID ( * { }",
  "func ID ( ) { ] ID : [ var bool ID = ID ( ID [ 123 ] [ 123 ] ) if ID { } }",
  "func ID ( ) { ] ID : [ ] bool ID = ID ( ID [ 123 var [ 123 ] ) if ID { } }",
  "func ID ( ) { ] ID : [ ] bool ID = ID ( ID [ 123 var [ 123 ] ) if ID { } }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : int ID ( ) [ - ] ID ) ] [ ID ( = - ID ID = 123 }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : int ID ( ) [ - ] ID ) ] [ ID ( = - ID ID = 123 }",
  "ID ID ( ) : bool { var ID : [ ] bool var func : int ID ( ) [ - ] ID ) ] [ ID ( = - ID ID = 123 }",
  "func ID ( ) : [ ] int { var - : int print ID [ ID ( ( ( ID false ) ) ) ] } func ID ( ) { }",
  "func ID ) ) : [ ] int { var - : int print ID [ ID ( ( ( ID false ) ( ) ] } func ID ( ) { }",
  "func ID ) ) : [ ] int { var - : int print ( [ ID ( ( ( ID false ) ID ) ] } func ID ( ) { }",
  "func ID ( ID : int } ID : bool , ID : int ) { var ID : bool var ID : int while ( ( 123 ) ) { } } func ID ( ) { ,",
  "func ID ( ID : int } ID : bool , ID : int ) { var ID : bool var ID : int while ( ( 123 ) ) { } } func ID ( ) { ,",
  "func ID ( ID : int } ID : bool , ID : int ) { var ID : ( var ID : int while ( ( 123 ) ) { } } func ID bool ) { ,",
  "func ID ( ID : [ - ] / - true + - - ( - ( 123 ) ) - - ( true ) ID int ) { }",
  "func ID ( ID : [ - ] / int true + - - ( - ( 123 ) ) - - ( true ) ID - ) { }",
  "func ID ( ID : : , ID : int ) { var ID bool [ ID * ( - ( ID ) ) ] bool }",
  "func ID ( ID : : , ID : int ) { var ID bool [ ID * ( - ( ID ) ) ] } bool",
  "func ID ( ) { var ID : int ID [ - false / - ( 123 ) / ( 123 ) ] [ - - ID ] ] [ ] [ }",
  "func ID ( ) { var ID : int ID false - [ / - ( 123 ) / ( 123 ) ] [ - - ID ] ] [ ] [ }",
  "func ID ( ) { var ID : int } false - [ / - ( 123 ) / ( 123 ) ] [ - - ID ] ] [ ] [ ID",
  "func ID ( ) { var ID : bool var } : int while ( true / ( ID ) ) { ID }",
  "func ID ( ) { var ID : bool var } : int while true ( / ( ID ) ) { ID }",
  ") ID ( ) { var ID : bool var } : int while true ( / ( ID func ) { ID }",
  "func ID ( ) { var ID ) bool var ID : int ID ( ID ( false / false : ) = true print ID } func ID ( ) { }",
  "func ID ( ) { var ID ) ID var ID : int ID ( ID ( false / false : ) = true print bool } func ID ( ) { }",
  "func ID ( ) { return ID * ( false / - } true / false >= ( 123 ) ) / ( ID ) -",
  "func ID ( ) { return ( * ( false / - } true / false >= ID 123 ) ) / ( ID ) -",
  "func ID ( ) / return ( * ( false { - } true / false >= ID 123 ) ) / ( ID ) -",
  "func } ( ID : bool , ID : int ) { while - 123 / false * ID - ID [ ID ] [ - - 123 ] { } ID = - - ID } func ID ( ) { ID",
  "func } ( ID : bool , ID ID int ) { while - 123 / false * ID - ID [ ID ] [ - - 123 ] { } ID = - - ID } func ID ( ) { :",
  "func ID ( ) { call ( ID - ID [ ID ( ) / ( ( ( - ID ) ) ) * ID ] [ false ] ) } func ID ( ) { }",
  "func ID ( ) { call ( ID - ID [ - ( ) / ( ( ( ID ID ) ) ) * ID ] [ false ] ) } func ID ( ) { }",
  "func : ( ) : [ ] bool { var ID : int var ID ID [ ] bool print ID [ ( ID ) ] { } } func ID ( ) { }",
  "func : [ ) : ( ] bool { var ID : int var ID ID [ ] bool print ID [ ( ID ) ] { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - - - 123 ID ( ) [ ( - - ) ] [ 123 ] ] int ) { }",
  "func ID ( ID ID bool , ID : [ - - - 123 : ( ) [ ( - - ) ] [ 123 ] ] int ) { }",
  "func ID ( ID ID bool , ID : [ - - - 123 : ( ) [ ( - - ) ] [ 123 ] ] int ) { }",
  "func ID ( ID : return ) { int - true - ( ID ( ) * - ID / ID ) - ( - - ID ) }",
  "func ID ( ID : return ) { int - true - ( ID ( ) * - ID / ID ) - ( - - ID ) }",
  "func ID ( ) : bool { var ID : int print ( ( } * ( true ) / false ) ) { 123 }",
  "func ID ( ) : bool { var ID : int print ( ( } * ( true ) / false ) ) { 123 }",
  "func ID ( ID : } ) { var ID : [ ] bool { var ID : int var ID : [ ] int if ID { } } } func ID ( ) { int",
  "func ID ( ID : } ) { var ID ] [ ] bool { var ID : int var ID : [ : int if ID { } } } func ID ( ) { int",
  "func ID ( ID : bool , ID : int : ) [ ] bool { var ID : int var ID : bool } func ID ( ) : bool { }",
  "func ID ( ID : bool , ID : int : ) [ ] bool { var ID : int var ID : bool } func ID ( ) : bool { }",
  "func ID ( ID : var , ID : int : ) [ ] bool { bool ID : int var ID : bool } func ID ( ) : bool { }",
  "func ID ( ID : int ) { var ID : int var ID : int } func ID ( ID : [ ] bool [ ID : int , ID : , ] bool ) { }",
  "func ID ( ID : int ) { var ID ID int var ID : int } func ID ( ID : [ ] bool [ : : int , ID : , ] bool ) { }",
  "func ID ( ID : int ) { var ID ID int var ID : int } func ID ( ID : : ] bool [ : [ int , ID : , ] bool ) { }",
  "func ID ( ) } var ID : [ - ( - true / ( true ) ) ] bool } func ID ( ) { {",
  "func ID ( ) } var ID : [ - ( - true bool ( true ) ) ] / } func ID ( ) { {",
  "func ID ( ) } ) ID : [ - ( - true bool ( true ) ) ] / } func ID ( var { {",
  "func ID ( ) : [ ] int { return } func - ( ) { var ID : bool var ID : bool ID ( ( ID ( ( ID ) ) ) ) = ID while false { } }",
  "func ID ( ) : [ ] int { return } func - ( ) { var ID : bool var ID ID bool ID ( ( ID ( ( ID ) ) ) ) = : while false { } }",
  "func ID ( ) : [ ] int { return } func - ( ) { var ID : bool ID ID ID bool var ( ( ID ( ( ID ) ) ) ) = : while false { } }",
  "func ID ( ID : int , ID : [ - - - ( ID [ - ( 123 ) ] [ - ( 123 ) ] { ] [ ] bool ) ) }",
  "func ID ( ID : ID , ID : [ - - - ( int [ - ( 123 ) ] [ - ( 123 ) ] { ] [ ] bool ) ) }",
  "func ID ( ID : ID , ID : [ - - - ( int [ - ( 123 ) ] [ - ( 123 ) ] { ] [ ] bool ) ) }",
  "func ID ( ) : [ ) false * ID ( ( ID ( ) ) - ] int { }",
  "func ID ( ) : [ ) false - ID ( ( ID ( ) ) * ] int { }",
  "func ID ( ) : [ ) { - ID ( ( ID ( ) ) * ] int false }",
  "func ID ( ID : , ] [ ] int [ ID : bool , ID : bool ) { var ID : [ ] [ ID ] [ ] bool }",
  "func ID [ ID : , ] [ ] int [ ID : bool , ID : bool ) { var ID : ( ] [ ID ] [ ] bool }",
  "func ID [ , : , ] [ ] int [ ID : bool ID ID : bool ) { var ID : ( ] [ ID ] [ ] bool }",
  "func ID ( ) { var ID : ) ] int var ID : int { var ID : bool ID ( ) [ - 123 ] = ID } while ( - ( ID ) [ { } } func ID ( ) { }",
  "] ID ( ) { var ID : ) func int var ID : int { var ID : bool ID ( ) [ - 123 ] = ID } while ( - ( ID ) [ { } } func ID ( ) { }",
  "] ID ( ) { var ID : ) func int = ID : int { var ID : bool ID ( ) [ - 123 ] var ID } while ( - ( ID ) [ { } } func ID ( ) { }",
  "func ID ( ID : bool ( ID : int ) { } func ID ( ID : [ - , - ID ) ] int ) { }",
  "func ID ( ID : bool ( ID : int ) { } func ID ( ID : - - , [ ID ) ] int ) { }",
  "func ID ( ID : bool ( ID : int ) { } func ID ( ID : - - , ] ID ) [ int ) { }",
  "func ID ( ID : [ ID [ - ID ( ID ( ) [ - - ( false ) ] ) ] ] bool ) { func } ID ( ) { }",
  "func ID ( ID : [ ID [ - ID ( ID ( ) [ - - ( false ) ] ) ] ] bool ) { func } ID ( ) { }",
  "func ID ( ID : [ ID [ ID ID ( ID ( ) [ - - ( false ) ] ) ] ] bool ) { func } - ( ) { }",
  "func ID ( ID : int , ID : } , ID : bool ) { while - - ID ( 123 ) { } int func ID ( ) { }",
  "func ID ( ID : int , ID : ) , ID : bool ) { while - - ID ( 123 } { } int func ID ( ) { }",
  "func ID ( ID : int , ID : ) , ID : bool ) { while ID - - ( 123 } { } int func ID ( ) { }",
  "func ID ( ) : int [ ID { ( ( ( - ID ) ) ) ] = - ID } func ID ( ) { }",
  "func ID ( ) : int [ ID } ( ( ( - ID ) ) ) ] = - ID } func ID ( ) { {",
  "func ID ( ) : int ( ID } ( [ ( - ID ) ) ) ] = - ID } func ID ( ) { {",
  "func ID ( ) , } func ID ( ID : bool { ID : bool , ID : int ) { while ( ( ID ) ) { } }",
  "func ID ( ) , } func ID ( ID : bool { ID : bool , ID : int ) { while ( ( ID ) ) } { }",
  "bool ID ( ) , } func ID ( ID : func { ID : bool , ID : int ) { while ( ( ID ) ) } { }",
  "func ID ( ) { { } return ( true ID ( ) + ( ) ) }",
  "func ID ( ) { { } return ID true ( ( ) + ( ) ) }",
  ") ID ( func { { } return ID true ( ( ) + ( ) ) }",
  "func ID ( ) { var ID : bool ( ID : bool return } func ID ( ) { var ID : bool call ID ( var ID ) ) }",
  "func ID ( ) { ID ID : bool ( ID : bool return } func var ( ) { var ID : bool call ID ( var ID ) ) }",
  "func ID ( ) { ID ID : bool ( ) : bool return } func var ( ) { var ID : bool call ID ( var ID ) ID }",
  "func ID : ID : bool , ID : int ) { var ID ( int var ID : int ID = - ID ( ID ) }",
  "func ID : ID : ( , ID : int ) { var ID ( int var ID : int ID = - ID bool ID ) }",
  "func : : ID : ( , ID ID int ) { var ID ( int var ID : int ID = - ID bool ID ) }",
  "func ID ( ID : int , ID : int , ID : [ - - - ID [ - ( ( - false ) ) ] ] int ) { } func ID ) ( { }",
  "func ID ( ID : int ) ID : int , ID : [ - - - ID [ - ( ( - false ) ) ] ] int , { } func ID ) ( { }",
  "func ID ( ID : int ) ID : int , ID : [ - - - ID [ - ( ( - false ) ) ] ) int , { } func ID ] ( { }",
  "func ID ( ) : int { { var ID : bool ID ( ) [ ( - ( 123 ) ] [ ID ] = - ( ID ) if - ( - ID ) { } } } func ID - ) { }",
  "func ID ( ) : int { { var ID : bool ID ( ) [ ( - ( 123 ) ] [ ID ] = - ( ID ) if - ( - ID ) ID } } } func { - ) { }",
  "func ) ( ) : int { { var ID : bool ID ( ) [ ( - ( 123 ) ] [ ID ] = - ( ID ) if - ( - ID ) ID } } } func { - ID { }",
  "func ID ( ) { if ID ( ) [ { ID [ 123 / ( ID ) / - ( ID ) ] ] [ ( ( false ) ) ] { } } func ID ( ) - }",
  "func ID ( ) { 123 ID ( ) [ { ID [ if / ( ID ) / - ( ID ) ] ] [ ( ( false ) ) ] { } } func ID ( ) - }",
  "func ID ( ID : int ) { var ID : int var ID : [ - - true * ID [ ( } false ) ] / - - - false ] int } func ID ( ) { -",
  "func ID ( ID : int ) ] var ID : int var ID : [ - - true * ID [ ( } false ) ] / - - - false { int } func ID ( ) { -",
  "func ID ( ID : int ) ] var ID : int var ID : [ - - true * ID [ ( } false ) ] / func - - false { int } - ID ( ) { -",
  "func ID ( ID : int ) : [ ] bool { return false + false * true / ( ID ) - ( ( - - ( - } ) ) ) 123 func ID ( ) { }",
  "func ID ( ID : int ) : [ ] / { return false + false * true bool ( ID ) - ( ( - - ( - } ) ) ) 123 func ID ( ) { }",
  "return ID ( ID : int ) : [ ] / { func false + false * true bool ( ID ) - ( ( - - ( - } ) ) ) 123 func ID ( ) { }",
  "func ID ( ) : int { var ID : int } func ID ( ) { var ID while int var ID : int if ( ID ) { } : - - false { } }",
  "func ID ( ) : int { var ID : int } func ID ( ) { var ID while int var ID : int if ( : ) { } ID - - false { } }",
  "func ID ( ) : int { var ID : int } func ID ID ) { var ID while int var ID : int if ( : ) { } ( - - false { } }",
  "func ID ( ) { print ) ID [ ( ( ID ) ) ] ) ID = ( ( - - false ) ( }",
  "func ) ( ) { print ) ID [ ( ( ID ) ID ] ) ID = ( ( - - false ) ( }",
  ") ) ( ) { print ) ID [ ( ( ID ) ID ] ) ID = ( ( - - false func ( }",
  "func ID : ID : int , ID : [ ] [ ( ( ID ( ) + ID + 123 ) ) ] [ ] [ ] int , ID ( int ) { }",
  "func ID : ID : int , ID : [ ] [ ( ( ID ( ) + ID + 123 { ) ] [ ] [ ] int , ID ( int ) ) }",
  "func ID ) ID : int , ID : [ ] [ ( ( ID ( ) + ID + 123 { : ] [ ] [ ] int , ID ( int ) ) }",
  "( ID ( ) : bool { ID ( ) = - ( ID ( ) / false * true ) call ID ( ) } func ID func ) { }",
  "( ID ( ) : bool { ID ( ) = - ( ID ( ) / false * true ) call ID ( ) } func ID func ) { }",
  "( ID ( ) : bool { ID ( ) = - ( ID ( ) / false * true ID call ) ( ) } func ID func ) { }",
  "func ID ( ) : bool { var ID - int while - ( true + ( ( - : ( ( ID ) ) ) ) + ID ) { } }",
  "func ID ( ) : ( { var ID - int while - ( true + ( bool - : ( ( ID ) ) ) ) + ID ) { } }",
  "func ID ( ) : ( { var ID - int while - ( true + ( bool - : ( ( ID ) ) ) ) { ID ) + } }",
  "func ID ( ) { ID [ - ID ( ( - ID ) ) ] [ ( ( ( ID ) ) ) ] = - 123 ID func } ( ) { }",
  "123 ID ( ) { ID [ - ID ( ( - ID ) ) ] [ ( ( ( ID ) ) ) ] = - func ID func } ( ) { }",
  "123 ID ( ) { ID [ - ID ( ( - ID ) ) { [ ( ( ( ID ) ) ) ] = - func ID func } ( ) ] }",
  "func { ( ) { return } func ID ( ID : [ ] int ) ID print ID ( ( ID ) ) while ID { } }",
  "func { ( [ { return } func ID ( ID : ) ] int ) ID print ID ( ( ID ) ) while ID { } }",
  "func { ( [ { return } func ID ( ID : ) ] int ) ID ( ID print ( ID ) ) while ID { } }",
  "func ID ( ) { { var ID : ID var int : int } }",
  "{ ID ( ) { func var ID : ID var int : int } }",
  "{ ID ( ) { func var ID : ID var int : int } }",
  "func ID ( ) : int { var ID : int if ( - ID ( ) [ ( ID ) ] [ - true ] ) { } call ID ) ) } func ID ( ( { }",
  "func ID ( ) : int { var ID : int if ( - ID ( ) [ ( ID ) ] [ - true ] ) { } call { ) ) } func ID ( ( ID }",
  "func ID ( ) : int { var ID : int if ( - ID ( } [ ( ID ) ] [ - true ] ) { ) call { ) ) } func ID ( ( ID }",
  "func ( ID ID : bool , ID : [ - ( ID * - false + ID ( ) - ID ) ] int ) { } func ID ( ) { }",
  "func ( ID ID : ( , ID : [ - ( ID * - false + ID ( ) - ID ) ] int ) { } func ID bool ) { }",
  "func ( ID ID : ( , ID : [ - ( + * - false ID ID ( ) - ID ) ] int ) { } func ID bool ) { }",
  "func ID ( ID : int ) : int { var ID : [ ] bool if func - ( - ( ( ID ) ) ) ) { } print ( 123 ) } ( ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : [ ] 123 if func - ( - ( ( ID ) ) ) ) { } print ( bool ) } ( ID ( ) { }",
  "func ID ( ID : int ) : int { [ ID : var ] 123 if func - ( - ( ( ID ) ) ) ) { } print ( bool ) } ( ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int , ID : int ) { bool ID : var while ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int , ID : int ( { bool ID : var while ) ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int , ID : int ( { bool } : var while ) ID ) { ID } func ID ( ) { }",
  "func ( ( ) : int { var ID : [ ] [ ( ID ID [ false ] ) ) ] bool } func ID ( ) { }",
  "func ( ( ) : int { var ID : [ ] [ ( ID ] [ false ] ) ) ID bool } func ID ( ) { }",
  "func ( : ) : int { var ID ( [ ] [ ( ID ] [ false ] ) ) ID bool } func ID ( ) { }",
  "func ID ID ID : [ ID ( ) + true - ID * ID [ ( ] [ ID ] / ID ] int ) { }",
  "func ID ID ] : [ ID ( ) + true - ID * ID [ ( ] [ ID ID / ID ] int ) { }",
  "func ID ID ] : [ ID ( ) + true - ID * ID [ ( ] [ ID ID / ID ] int ) { }",
  "func ID ( ) { return } func ID ( ) : int { var ID : int { var ID : int var ID : int call ( ID ) while ID { } } }",
  "func ID ( ) { return } call ID ( ) : int { var ID : int { var ID : int var ID : int func ( ID ) while ID { } } }",
  "{ ID ( ) { return } call ID ( ) : int func var ID : int { var ID : int var ID : int func ( ID ) while ID { } } }",
  "func ID ( ID : [ ] [ ID ( ID ( 123 * false ) ) ] [ ] bool ) { } func - ( ) { }",
  "func ID ( ID : [ ] [ ID ( ID ( 123 * false ) ) ] [ ] bool ) { } func - ( ) { }",
  "func ID ( ID : [ ] [ ID ( ID ( 123 ) false ) ) ] [ ] bool ) { } func - ( * { }",
  "func ID ( ) : int { var ID : [ ] [ ] bool { return ID return true and } }",
  "func ID ( ) : bool { var ID : [ ] [ ] int { return ID return true and } }",
  "func ID ( ) : bool : var ID { [ ] [ ] int { return ID return true and } }",
  "func ID ( ) : [ ID ( - - 123 * 123 - ( - 123 ) - ( + ( ( 123 ) ) ) ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : [ ID ( - - 123 * ) - ( - 123 ) - ( + ( ( 123 ) ) ) 123 ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : [ ID ( - - 123 * ) - ( - 123 ) - ( ) ( ( 123 + ) ) 123 ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int ) { - ( print 123 - ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID ) int : { - ( print 123 - ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) ID , int : { - ( print 123 - ID ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) : [ true [ ] [ ] bool { var ID : [ ] bool while 123 { } print ( ] ) }",
  "func : ( ID ID bool , ID : [ ] int ) : [ true [ ] [ ] bool { var ID : [ ] bool while 123 { } print ( ] ) }",
  "func : ( ID ID bool ) ID : [ ] int , : [ true [ ] [ ] bool { var ID : [ ] bool while 123 { } print ( ] ) }",
  "[ ID ( ID : [ ID func - 123 * true and 123 * 123 * ( ID ) and 123 ] ] int ) { }",
  "[ ID ( ID ] [ ID func - 123 * true and 123 * 123 * ( ID ) and 123 ] : int ) { }",
  "ID ID ( [ ] [ ID func - 123 * true and 123 * 123 * ( ID ) and 123 ] : int ) { }",
  "{ ID ( ) : [ ] [ ] bool { var ID : [ ID ( false / true ) ] bool } func ID ( ) func }",
  "{ : ( ) : [ ] [ ] bool { var ID ID [ ID ( false / true ) ] bool } func ID ( ) func }",
  "{ : ( ) : [ ] [ ] bool { var ID ID [ ID ) false / true ( ] bool } func ID ( ) func }",
  "func ID ( ) [ : ( ( - ID [ ( ( 123 ) ) ] ) ) ] int { }",
  "func ID int ) [ : ( ( - ID [ ( ( 123 ) ) ] ) ) ] ( { }",
  "func ID int ) [ : ( ( - ID [ ( ( 123 ) ) ( ) ) ] ] { }",
  "func ID ( ) { var ID : [ ( false and - - true ( - true ) ] bool var ID : bool } func ID / ) { }",
  "func ID ( true { var ID : [ ( false and - - ) ( - true ) ] bool var ID : bool } func ID / ) { }",
  "func ID ( true { var ID - [ ( false and : - ) ( - true ) ] bool var ID : bool } func ID / ) { }",
  "func ID ( ID : int { var ID : bool var ID : int { var ID : bool ID ( ) [ ID ] = - true } } func ) ( ) { }",
  "func ID ( ID : int { var ID : bool var ID : int { var [ : bool ID ( ) ID ID ] = - true } } func ) ( ) { }",
  "func ID ( ID : int { var ID : bool var ID : int { var [ : bool ID ( ) ID ID ] = ) true } } func - ( ) { }",
  "func ID bool ) { var ID : bool var ID : ( return ( ID ( ID ) ) }",
  "func ID bool ) { var ID ( bool var ID : ( return ( ID : ID ) ) }",
  "func ID bool ) { var ID ( bool var ID : ( return ( ID : ID ) ) }",
  "func ID ( ID : [ ] * ID [ true + ID + true ID / ID ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] * ID [ true + ID + true ID / ID ] [ ] bool ) { } func ID ( ) { }",
  "func ID ) ID : [ ] * ID [ true + ID + true ID / ID ] [ ] bool ( { } func ID ( ) { }",
  "func ID ( { : bool , ID : bool , ID : bool ) : int { var ID : bool while ID [ - - ID ] ID } { } }",
  "func ID ( { : bool , ID : bool , while : bool ) : int { var ID : bool ID ID [ - - ID ] ID } { } }",
  "func ID ( { : bool , ID : bool , while : bool ) : int { var ID : bool ID ID [ - - ID ] ID } { } }",
  "func ID ID ) { while - ID ( ( ( - 123 * ID / ID ) ) { } while ( true ) { } }",
  "func ID ID ) { while - { ( ( ( - 123 * ID / ID ) ) ID } while ( true ) { } }",
  "func ID ID ) / while - { ( ( ( - 123 * ID { ID ) ) ID } while ( true ) { } }",
  "func ID ( ID : bool , ID : bool ) { ID = 123 ( + 123 / ( ID ) ) - ID }",
  "func ID ( ID : ( , ID : bool ) { ID = 123 bool + 123 / ( ID ) ) - ID }",
  "func ID ( ID : bool , ID : bool ) { ID = 123 ( + 123 / ( ID ) ) - ID }",
  "func ID ( ID ID [ 123 / ( - - ( ID ( ) * 123 / : ) ) * ( ( ID ) ) ] bool ) { }",
  "func ID ( ID [ ID 123 / ( - - ( ID ( ) * 123 / : ) ) * ( ( ID ) ) ] bool ) { }",
  "func ID ( ID [ ID 123 / ( - - ( ID ( ) * 123 } : ) ) * ( ( ID ) ) ] bool ) { /",
  "func ID ( ID : [ ] int , ID : bool ) ( call ID ( ID { ID ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool ) call ( ID ( ID { ID ) ) } func ID ( ) { }",
  "func ID ( : : [ ] int , ID ID bool ) call ( ID ( ID { ID ) ) } func ID ( ) { }",
  "func ID ( ) { int ID : var var ID : bool { return } }",
  "func ID ( ) { int ID : var var ID : bool } return { }",
  "func ID ( ) { var ID : [ 123 func ( ( ( ( 123 ) ) ) ) ] [ ] [ ] bool var ID : bool } * ID ( ) { }",
  "func ID ( ) { var ID : [ 123 func ( ID ( ( 123 ) ) ) ) ] [ ] [ ] bool var ID : bool } * ( ( ) { }",
  "func ID ( ) { var ID : [ 123 func ( ID ( ( ] ) ) ) ) ] [ 123 [ ] bool var ID : bool } * ( ( ) { }",
  "int ID ( ID : bool ) { var ID : func while ( true + true * - 123 ) { } } func ID ( ) { }",
  "int ( ( ID : bool ) { var ID : func while ID true + true * - 123 ) { } } func ID ( ) { }",
  "int ( ( ID ID bool ) { var ID : func while ID true + true * - 123 ) { } } func : ( ) { }",
  "func ID ( ) { var ID ) int var ID : int ID ( ID ( ID [ ( ID ) ] ) ) = - false } func ID ( : { }",
  "func ID ( ) { var ID ) int var ID : int ID ( ID ( ID [ ( ID ) ] ) ) = - false } func ID ( : { }",
  "func ID ( ) { var ID ) int var ID : int ID ( ID ( ID [ ( ID ) ] ) ) = - false } func ID ( : { }",
  "func ID ( ID : ) int : int { var ID : [ ] int print true call ID ( ) return true }",
  "func ID ( ID : ) int : ] { var ID : [ int int print true call ID ( ) return true }",
  "func ID ( int : ) ID : ] { var ID : [ int int print true call ID ( ) return true }",
  "func ID ( ) ( bool { var ID : bool print ID [ ID / : true ) * ID ] [ 123 ] } func ID ( ) { }",
  "func ( ID ) ( bool { var ID : bool print ID [ ID / : true ) * ID ] [ 123 ] } func ID ( ) { }",
  "func ( ID ) ( bool { var ID : bool print ID [ ID / : true ) * ID ] [ 123 ] } func ID ( ) { }",
  "func ID ( ) : bool { var ID : - while ( true / false / - ID [ ID ] [ ( int ID ) ] ) { } }",
  "func ID ( ) : ID { var ID : - while ( true / false / - ID [ ID ] [ ( int bool ) ] ) { } }",
  "func ID ( true : ID { var ID : - while ( ) / false / - ID [ ID ] [ ( int bool ) ] ) { } }",
  "func ID ( ID , int , ID : bool , ID : int ) : bool { var ID : int } func ID ( ID : bool : ID : int ) : bool { }",
  "func ID ( ID , int , ID : bool , ID : int ) : bool { var ID : int } func ID ( ID : bool : ID : int ) : } { bool",
  "func ID ( ID , int , ID : bool , ID ID int ) : bool { var ID : int } func ID ( ID : bool : : : int ) : } { bool",
  "func ID ( ID : bool , ID : bool , ID : bool 123 { var ID : [ ID ( ) ) ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool 123 { var ID : [ ] ( ) ) ID int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool 123 { var ID : [ ] ( ID ) ID int } func ) ( ) { }",
  "func ID ( ) : int { var ID : bool while - ID ( ( ID ) ( { } while ) - - false ) { } }",
  "func ID var ) : int { ( ID : bool while - ID ( ( ID ) ( { } while ) - - false ) { } }",
  "func ID var ) : int { ( ID : bool while - ID ( ( ID ) ( { } while ) - - false ) { } }",
  "ID ID ( ) : bool { var func : int return ID ( - false < - ( ( - - ( ( - true ) ) ) ) ) }",
  "ID ID ( ) : bool { var func : int return ID ( - - < false ( ( - - ( ( - true ) ) ) ) ) }",
  "ID ID ( ) : bool { var func : int ID return ( - - < false ( ( - - ( ( - true ) ) ) ) ) }",
  "func ID ( ) : var ID { int call ID ( 123 / ( - ( - ( ( - ( ID ) ) ) ) ) / false ) } func ID ( ) { }",
  "func ID ( ) : var ( { int call ID ( 123 / ( - ( - ID ( - ( ID ) ) ) ) ) / false ) } func ID ( ) { }",
  "func ( ( ) : var ( { int call ID ( 123 / ID - ( - ID ( - ( ID ) ) ) ) ) / false ) } func ID ( ) { }",
  "func ID ( ID : bool ID ID : [ ID [ , ( ID ( ) ) ] ] bool , ID : [ ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ID : bool ID ID : [ ID [ , ( ID ( ) ) ] ] bool , ID : [ ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ID : int , ID : [ ] bool ) { var ID : bool if 123 / ID [ - - ( ID ) ] [ - ( ( - - ( ( ( ( 123 ) ) ) ) { ) ] { } if false { } } func ID ( ) ) }",
  "func ID ( ID : int , ID : [ ] bool ) { var ID : bool if 123 / ID ( - - [ ID ) ] [ - ( ( - - ( ( ( ( 123 ) ) ) ) { ) ] { } if false { } } func ID ( ) ) }",
  "func ) ( ID : int , ID : [ ] bool ) { var ID : bool if 123 / ID ( - - [ ID ) ] [ - ( ( - - ( ( ( ( 123 ID ) ) ) { ) ] { } if false { } } func ID ( ) ) }",
  "func ID ( ) : [ ] bool { var bool : int var ID : int { var ID : ID ID ( ) = 123 while true { } } }",
  "func ID ( ) : [ ] bool { var bool : var var ID : int { int ID : ID ID ( ) = 123 while true { } } }",
  "func ID ( ) : [ ] bool { var bool : var var ID : int { int ID : ID ID } ) = 123 while true { } } (",
  "func ID } ID : int , ID : int ) { var ID : bool var ID : bool ID ( ) [ ID ( ) ] = ID print - ID (",
  "func ID } int : int , ID : ID ) { var ID : bool var ID : bool ID ( ) [ ID ( ) ] = ID print - ID (",
  "func ID } int : int , ID : ID ) { var ID : bool var ID : bool ID ( ) [ ID ( ) ] = ID print - ID (",
  "( ID ( ID : int ) : bool { var ID : bool ID = false * ( func ID ) ) * ID } func ID ( ) { }",
  "( ID ( ID : int ) : bool { var ID false bool ID = : * ( func ID ) ) * ID } func ID ( ) { }",
  "( ID ( ID : int ) : bool { var ID false bool ID = : ) ( func ID * ) * ID } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : [ false * bool ( ) [ true ] [ - false ] / - ID ] bool var ID : ID }",
  "func ID ( ) : [ ] bool { var ID : [ false * bool ( ) [ true ] [ - false ] / - bool ] ID var ID : ID }",
  "func ID ( ) bool [ ] : { var ID : [ false * bool ( ) [ true ] [ - false ] / - bool ] ID var ID : ID }",
  "func ID ( ) : int { call ID ( ID ( ( ID [ 123 ] } ID ] ) ) ) [",
  "func ID ( ) : int { call 123 ( ID ( ( ID [ ID ] } ID ] ) ) ) [",
  "func ID ( ) : int { call 123 ( ID ) ( ID [ ID ] } ID ] ) ) ( [",
  "func ID ( ID : int , ID : int , ID ( bool ) { var ID : int var ID : [ ] bool while 123 / - : false ) * - ID { } ID = true } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID ( bool ) { var ID : int var ID : [ ] bool while } / - : false ) * - ID { } ID = true 123 func ID ( ) { }",
  "func ID ( ID : 123 , ID : int , ID ( bool ) { var ID : int var ID : [ ] bool while } / - : false ) * - ID { } ID = true int func ID ( ) { }",
  "func ID ( ] { if ID [ ID [ - ( false ) ] [ false ] ) [ ( ID ) ] { } }",
  "func if ( ] { ID ID [ ID [ - ( false ) ] [ false ] ) [ ( ID ) ] { } }",
  "func if ( ] { ID ID [ ID false - ( false ) ] [ [ ] ) [ ( ID ) ] { } }",
  "func ID ( ID : [ true + ( - ID ( ) * true and ID and ID ) - ] ] [ false bool ) { } func ID ( ) { }",
  "func ID ( ID : [ true + ( - ID ( ) * true and ID and ID ) { ] ] [ false bool ) - } func ID ( ) { }",
  "func ID ( ID : [ true + ( - ID ( ) * true and ID and ID ) { ] { [ false bool ) - } func ID ( ) ] }",
  "func ID ( ID : int , ID : bool ) ( var ID : [ ] [ ] bool var ID : int return ID ( ) } func ID { ) { }",
  "func ID ( ID : int , ID ) bool : ( var ID : [ ] [ ] bool var ID : int return ID ( ) } func ID { ) { }",
  "func ID ( ID : int , ID ) bool : ( ) ID : [ ] [ ] bool var ID : int return ID ( var } func ID { ) { }",
  "func ID ID ) { var ( : int } func ID ( ID : int , ID : bool ) { }",
  "func ID ID ) { ID ( : int } func var ( ID : int , ID : bool ) { }",
  "func : ID ) { ID ( : int } func var ( ID : int , ID ID bool ) { }",
  "func ID ( ) : bool { var ID : [ : [ ] int { var ID ] [ ( ( ID ) ) ] [ ] bool var ID : [ ] [ ] int } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ : [ ] int { var ID ] ( ( [ ID ) ) ] [ ] bool var ID : [ ] [ ] int } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ int [ ] int { var ID ] ( ( [ ID ) ) ] [ ] bool var ID : [ ] [ ] : } } func ID ( ) { }",
  "func ID ( ) ( ID { ) = - ID + ( ID ( ) ) }",
  "func ID ( ) ( + { ) = - ID ID ( ID ( ) ) }",
  "func ID ( ) ( + { ) ( - ID ID ( ID = ) ) }",
  "] ID ( ) { while true / - - 123 * ID ( ) [ false * - ID func [ false ] { } ID = 123 }",
  "] - ( ) { while true / ID - 123 * ID ( ) [ false * - ID func [ false ] { } ID = 123 }",
  "func ID [ ) { var ID : bool return true * ( - true + ID [ ID ] ( - true ] ) }",
  "func ID [ [ { var ID : bool return true * ( - true + ID ) ID ] ( - true ] ) }",
  "func ID [ [ * var ID : bool return true { ( - true + ID ) ID ] ( - true ] ) }",
  "func ID ( ID : [ ] bool , ID : [ 123 * ( - - 123 - ( 123 ) + ( true ) ) ] [ ] bool , ID : bool ID { } func ) ( ) { }",
  "func ID ( ID : [ ] bool , ID ( [ 123 * ( - - 123 - ( 123 ) + : true ) ) ] [ ] bool , ID : bool ID { } func ) ( ) { }",
  "func ID ( ID : [ ] bool , ID ( [ 123 ( * - - 123 - ( 123 ) + : true ) ) ] [ ] bool , ID : bool ID { } func ) ( ) { }",
  "func ID ( ID : : ] bool , ID [ int ) : int { print 123 + ( - ( ID ) ) if - true { } } func ID ( ) { }",
  "func ID ID ( : : ] bool , ID [ int ) : int { print 123 + ( - ( ID ) ) if - true { } } func ID ( ) { }",
  "func ID ID ( : : ] bool - ID [ int ) : int { print 123 + ( - ( ID ) ) if , true { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID ( [ ] [ ] bool while ID : ) - ID - - true { } }",
  "func ID ( ID : int ) while var ID ( [ ] [ ] bool { ID : ) - ID - - true { } }",
  "func ] ( ID : bool ) : int { if ID [ 123 + 123 * 123 ID { } { } }",
  "func ] ( ID : bool ) : int { ID ID [ 123 + 123 * 123 if { } { } }",
  "func ] ( ID : bool ) : int { ID ID [ 123 + 123 * 123 if { } } { }",
  "func ID ( ) { var ID : bool ID ID : [ var ( ID [ ID ] ) ] int } func ID ( ) { }",
  "func ID ( ) { [ ID : bool ID ID : [ var ( ID var ID ] ) ] int } func ID ( ) { }",
  "func ID ( } { [ ID : bool ID ID : [ var ( ID var ID ] ) ] int } func ID ( ) { )",
  "func ID ( ID : bool , ID : bool , ID : [ ( ( ( ID ) ) ) ] ( ) { } func ID int ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ( ( { ID ) ) ) ] ( ) ( } func ID int ) { }",
  "func , ( ID : bool ID ID : bool , ID : [ ( ( { ID ) ) ) ] ( ) ( } func ID int ) { }",
  "func ID ( ID : int ) : int var var ID : bool { ID : [ 123 + - ID ( ) ] bool } func ID ( ) { }",
  "func ID ( ID : : ) : int var var ID int bool { ID : [ 123 + - ID ( ) ] bool } func ID ( ) { }",
  "func ID ( ID : : ) : int var var ID int func { ID : [ 123 + - ID ( ) ] bool } bool ID ( ) { }",
  "func ID ( ID : [ ) ( true * false * true + true / ( ID ID ) ] bool ) { }",
  "func ID ( ID : [ ) ( true * false * true + true / ( ID ID ) } bool ) { ]",
  "func ID ( ID : [ ) ( true * false * true + true bool ( ID ID ) } / ) { ]",
  "func ID ( ) bool bool { var ID : : var ID : bool return 123 / ID [ false ] [ false ] }",
  "func ID ( ) bool bool { var [ : : var ID : bool return 123 / ID ID false ] [ false ] }",
  "func ID ) ID : bool , ID : [ - 123 - ( ( false - - ( ( true ) ) - 123 ) ) ] bool ( { } func ID ( ) { }",
  "[ ID ) ID : bool , ID : func - 123 - ( ( false - - ( ( true ) ) - 123 ) ) ] bool ( { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : func { var ID : bool return } bool ID ( ID : bool ) : int { }",
  "func ID ( ID : bool , ID : { ) : func int var ID : bool return } bool ID ( ID : bool ) : int { }",
  "func ID ( ID : bool , ID : { ) : func int var ID int bool return } bool ID ( ID : bool ) : : { }",
  "func ID ( ID : bool ) { print 123 ] - ID [ - ID [ - ID ] [ ( ( ID ) ) ] ] [ ( ID ) + }",
  "func ID ( ID : bool ) { print 123 ] - ID [ - ID [ - ID ] ( [ ( ID ) ) ] ] [ ( ID ) + }",
  ") ID ( ID : bool func { print 123 ] - ID [ - ID [ - ID ] ( [ ( ID ) ) ] ] [ ( ID ) + }",
  "func ID ( ) : bool { var ID : bool var ID : bool if ( - false * ( ID ) / ID ) { } call true ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var - : bool var ID : bool if ( ID false * ( ID ) / ID ) { } call true ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var - : bool var ID : bool ID ( ID false * ( if ) / ID ) { } call true ( ) } func ID ( ) { }",
  "func - ( ID : bool , ID : [ ( false ID ( - ID ( ) ) ) ] int , ID : [ ] [ ] [ ] int ) { }",
  "func - ( ID : bool , ID : [ ( false ID ( - ID ( ) ) ) ] int , ID : [ ] { ] [ ] int ) [ }",
  "func - ( ID : bool , ID : [ ( false ID ( - ID ( ) ) ) ] int , ID : [ ] { ] [ ] int ) [ }",
  "func ID ( ) : int { var ID : [ - ID [ - } ( - - - - ( ID ) ) ] [ ID ] ] [ ] int var ID : bool - func ID ( ) { }",
  "func ID ( ) : int { var ID : [ - ID [ - } ( - - - - ID ID ) ) ] [ ( ] ] [ ] int var ID : bool - func ID ( ) { }",
  "func ID ( ) : int { var ID : [ - ID [ - } ( - - - - ID ID ) ) ] [ ( ] ] [ ] int var ID : bool { func ID ( ) - }",
  "func ID ( ID : ID , ID : int ) { var int : bool var ID : int while ( - 123 ) { } { } } func ID ( ) { }",
  "func ID ( ID : ID , ID : int ) { var int ( bool var ID : int while : - 123 ) { } { } } func ID ( ) { }",
  "func ID ( ID : ID , ID : } ) { var int ( bool var ID : int while : - 123 ) { } { int } func ID ( ) { }",
  "func ID ( ) : bool { var ID ( int var ID : int call ID ( ) return ( - : ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID ( int var ID : int call ID ( ) return ( - : ( ID ) ) ) } func ID ( ) } {",
  "func ID ID ) : bool { var ID ( int var ID : int call ID ( ) return ( - : ( ID ) ) ) } func ( ( ) } {",
  "func ID ( ) { var ID : [ ] bool var ID : bool ID ( ( [ ID ( ID ) ] ) ) = ID ID = - ID } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : bool ) ( ( [ ID ( ID ) ] ) ) = ID ID = - ID } func ID ( ID { }",
  "func ID ( ) { var ID : ] [ bool var ID : bool ) ( ( [ ID ( ID ) ] ) ) = ID ID = - ID } func ID ( ID { }",
  "func ID ( ) : bool { var ID : [ } bool var ID : int if false / ID [ ( false ) ] { ] print 123 }",
  "func ID ( ) : bool { var ID ( [ } bool var ID : int if false / ID [ : false ) ] { ] print 123 }",
  "func ID ( ) : bool { var ID ( [ false bool var ID : int if } / ID [ : false ) ] { ] print 123 }",
  "func ID ( ) } bool { var ID : [ ] [ ] bool var ID : bool while true + ( true ) { } } func ID ( ) { :",
  "[ ID ( ) } bool { var ID : [ ] func ] bool var ID : bool while true + ( true ) { } } func ID ( ) { :",
  "[ ( ID ) } bool { var ID : [ ] func ] bool var ID : bool while true + ( true ) { } } func ID ( ) { :",
  "func ID ( ) : int { var ID : int var ID : } ] bool if - ID ( ) [ true ] { [ if ( true ) { } } func ID ( ) { }",
  "func ID ( ID : int { var ID : int var ID : } ] bool if - ID ( ) [ true ] { [ if ( true ) { } } func ) ( ) { }",
  "func ID ( ID : int { var ID : : var ID int } ] bool if - ID ( ) [ true ] { [ if ( true ) { } } func ) ( ) { }",
  "func ID ( ) : int { ID ( ) [ false / true + ID ( ID ) ] ID ( - false ) } func = ( ) { }",
  "func ID ( ) : int { ID ( ) [ false / true + ID ( ID ) ] ID ( - false ) } func = ( ) { }",
  "ID ID ( ) : int { ID ( ) [ false / true + func ( ID ) ] ID ( - false ) } func = ( ) { }",
  "func ID [ ID : [ ] ( ] bool , ID : [ ] int , ID : bool ) { } func ID ( ID : int ) : int { }",
  "func ID [ ID : [ ] ( ] bool , func : [ ] int , ID : bool ) { } ID ID ( ID : int ) : int { }",
  "func ID [ ID : [ ] ( ] bool , func : [ ] int , ID : bool ) { } ID ID ( ID : int ) : int { }",
  "func ID ( ID : bool ) { var ID : [ 123 / - ID [ ID / ID / ] ] [ true ] ID [ ] [ ] bool var ID : [ ] bool }",
  "func ID ( ID [ bool ) { var ID : : 123 / - ID [ ID / ID / ] ] [ true ] ID [ ] [ ] bool var ID : [ ] bool }",
  "func ID ( ) { var ID : int var ID : bool print ID ( ) [ ] ID ( ) - } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool print ID ( ) [ ] ID ( ) ) } func ID ( - { }",
  "func ID ( ) { var ID : int bool ID : var print ID ( ) [ ] ID ( ) ) } func ID ( - { }",
  "func ID ( ) { var ID : bool if ID ( ) [ func false * ID ) ] { } print ( ID ) } ( ID ( ) { }",
  "func ID ( : { var ID ) bool if ID ( ) [ func false * ID ) ] { } print ( ID ) } ( ID ( ) { }",
  "func ID ( bool { var ID ) : if ID ( ) [ func false * ID ) ] { } print ( ID ) } ( ID ( ) { }",
  "func ID ( ) { ID [ ( - - true / - true ) ) ] [ ( - ( 123 ) ] = false if - ( ID ) { } }",
  "func ID ( ) { ID [ ( - ) true / - true - ) ] [ ( - ( 123 ) ] = false if - ( ID ) { } }",
  "func ID ( ) { ID [ ( - ) true / - true - if ] [ ( - ( 123 ) ] = false ) - ( ID ) { } }",
  "int ID ( ) { var ID : func var ID : bool call ID ( ) } func ID ( ) : bool { var ID : [ ( false ) ] int }",
  "int ID ( ) : var ID : func var ID : bool call ID ( ) } func ID ( ) { bool { var ID : [ ( false ) ] int }",
  "int : ( ) ID var ID : func var ID : bool call ID ( ) } func ID ( ) { bool { var ID : [ ( false ) ] int }",
  "func ID : ID ( [ ] [ ] [ ID ( ) [ ( - ( - ID ) ) ] [ ID ] ] int ) { }",
  "func ID : ID ( [ ] [ ] [ ID ( ) [ ( - ( - ID ) ) ] [ ID ] ] int ) { }",
  "func ID : ID ( [ ] [ ] [ ID ) ) [ ( - ( - ID ) ( ] [ ID ] ] int ) { }",
  "( ID ( ID : [ false * - - true / ID [ ( func 123 ) ) ] [ 123 ] ] int ) { }",
  "( ID ( ID : [ false * - - true / ID [ ( func 123 ) ) ] [ 123 ] ] int ) { }",
  "( ID ( ID : [ false * - - true 123 ID [ ( func 123 ) ) ] [ / ] ] int ) { }",
  "func ID ( ) { print - ID ( ID [ ( true ) if [ ( ID ) ] ) ] - - - 123 { } } func ID ( ) { }",
  "func ID ( ) { print - ID ( ID [ ( true ) if [ ( ID ) ] ) ] - - - 123 { } } func ID ( ) { }",
  "func ID ( ) : bool { ID ID : bool var var : [ ] [ ] int while ID [ - - - - ( ( false ) ) ] { } } func ID ( ) { }",
  "func ID ( ) : bool { ID ID : bool var var : } ] [ ] int while ID [ - - - - ( ( false ) ) ] { } [ func ID ( ) { }",
  "func ID ( ) : - { ID ID : bool var var : } ] [ ] int while ID [ - bool - - ( ( false ) ) ] { } [ func ID ( ) { }",
  "func ID ( ID * [ ( ( - true * false : ( ID ) ) ) ] bool ) { }",
  "func ID ( ID * [ ( ( ) true * false : ( ID ) ) ) ] bool - { }",
  "func ID ( ( * [ ID ( ) true * false : ( ID ) ) ) ] bool - { }",
  "func ID ( { : int { if ID ( ( ( ID ) ) ) ) } while ( ( ID ) ) { } } func ID ( ) { }",
  "func ID ( { : int { if ID ( ( ( ID ) ) ) ) } while ( ( ) ) ) { } } func ID ( ID { }",
  "func ID ( ID : bool , * : [ ] [ ] [ 123 ID ( false * ID ) ] bool ) { }",
  "func ID ( ID : bool , * : [ ] [ ] [ 123 ) ( false * ID ) ] bool ID { }",
  "func ID ( ID { bool , * : [ ] [ ] [ 123 ) ( false * ID ) ] bool ID : }",
  "func ID ( ID : [ ( ID ( ) [ ( - ( ( ( - ) - - ID ) ) ) ) ) ] [ ( - ( ( true ) ) ) ] ( ] int ) { }",
  "func ID ( - : [ ( ID ( ) [ ( - ( ( ( - ) - - ID ) ) ) ) ) ] [ ( ID ( ( true ) ) ) ] ( ] int ) { }",
  "func ID ( - : [ ( ID ( ) ( ( - ( ( ( - ) - - ID ) ) ) ) ) ] [ ( ID [ ( true ) ) ) ] ( ] int ) { }",
  "func ID ( ID : bool ) : int { var ID : 123 { var ID : int var ID : int call ID ( ID ) while bool { } } ID = - ID }",
  "func ID ( ID : bool ) : int ( var ID : 123 { var ID : int var ID : int call ID { ID ) while bool { } } ID = - ID }",
  "func ID ( ID : bool ) : int ( var ID : 123 { var ID : int var ID : int call ID { ID ) while bool { } } ID - = ID }",
  "func ID ( ) { var ID : [ ] [ ID ( ) [ } ( 123 ) ) ] ] bool (",
  "func ID ( ) { var ID : [ ] } ID ( ) [ [ ( 123 ) ) ] ] bool (",
  "func ID ( ) { var ID : [ ] } [ ( ) ID [ ( 123 ) ) ] ] bool (",
  "func ID ( ) : [ ] bool { var ID : [ ( ID ( ) * ( - 123 ) / 123 ) func [ ] [ ] [ ] int var ID : [ ] int } ] ID ( ) { }",
  "func ID ( ) : [ ] bool { var ] : [ ( ID ( ) * ( - 123 ) / 123 ) func [ ID [ ] [ ] int var ID : [ ] int } ] ID ( ) { }",
  "func ID ( ID : int , ID true [ - ID [ - - : == 123 ] ] int ) { }",
  "func int ( ID : int , ID true [ - ID [ - - : == 123 ] ] ID ) { }",
  "func int ( ID : int , 123 true [ - ID [ - - : == ID ] ] ID ) { }",
  "func ID ( ) { return ID ( ) [ ) ( ID ( ) ] }",
  "func ID ( ) } return ID ( ) [ ) ( ID ( ) ] {",
  "func ID ( ) ) return ID ( ) [ } ( ID ( ) ] {",
  "false ID ( ID : bool , ID : bool , ID : bool ) : [ func * ID and ID ( ) ] bool { }",
  "false ID ( ID : bool , ID ID bool , ID : bool ) : [ func * : and ID ( ) ] bool { }",
  "false ID ( ID and bool , ID ID bool , ID : bool ) : [ func * : : ID ( ) ] bool { }",
  "func ID ( ID : int , ID : bool , ID : int ) : [ ID - bool [ - ID ] [ ID ] ] ID { }",
  "func ID ( ID : int , ID : bool : ID : int ) , [ ID - bool [ - ID ] [ ID ] ] ID { }",
  "func : ( ID ID int , ID : bool : ID : int ) , [ ID - bool [ - ID ] [ ID ] ] ID { }",
  "func ID ( ) { var ID : [ ] int : ID : bool return } func ID ( ID : bool , ID var [ ID ] bool ) { }",
  "func ID ( ) { var ID : [ ] : : ID int bool return } func ID ( ID : bool , ID var [ ID ] bool ) { }",
  "func ID ( ) { } ID : [ ] : : ID int bool return var func ID ( ID : bool , ID var [ ID ] bool ) { }",
  "func ID ( ) : int { while ( - - ID ( ) [ ID ] [ true ] ID ) { } }",
  "func ID ( ) : int { while ( - } ID ( ) [ ID ] [ true ] ID ) { } -",
  "func ID ( ) : int { while ( ID } ID ( ) [ - ] [ true ] ID ) { } -",
  "func ID ( ) var bool { var ID : [ ID [ true * 123 / ID [ - 123 ] ] [ true ] ] [ ] [ ] [ ] [ ] bool : ID : int } func ID ( ) { }",
  "func ID ( ) var bool { var ID : [ ID [ * true 123 / ID [ - 123 ] ] [ true ] ] [ ] [ ] [ ] [ ] bool : ID : int } func ID ( ) { }",
  "func ID ( ) var bool { var ID : [ ID [ * true 123 / ID [ - ) ] ] [ true ] ] [ ] [ ] [ ] [ ] bool : ID : int } func ID ( 123 { }",
  "func ID ( ) : bool { var ID : int ( = - ID [ true * - ID ( 123 ) ) ] [ ID ] }",
  "func ID ( ) : bool { var ID : ( int = - ID [ true * - ID ( 123 ) ) ] [ ID ] }",
  "( ID ( ID : [ func - ( ID [ ( true ) ] ) ) ] int ) { }",
  "( ID ( ID { [ func - ( ID [ ( true ) ] ) ) ] int ) : }",
  "( ID ( ID { [ func - ( ID [ ( true ) ] ) ) ] int ) : }",
  "func ID ( ) : [ false - ( ID ( ID [ ( 123 ) ] [ false ( ) ) ] [ ] int { } func ID ] ) { }",
  "func ID 123 ) : [ false - ( ID ( ID [ ( ( ) ] [ false ( ) ) ] [ ] int { } func ID ] ) { }",
  "func ID 123 ) false [ : - ( ID ( ID [ ( ( ) ] [ false ( ) ) ] [ ] int { } func ID ] ) { }",
  "func ID ( ID : bool , ID : var ) : int { int ID : bool if 123 * - - ID ( ) { } } func ID ( ) { }",
  "- ID ( ID : bool , ID : var ) : int { int ID : bool if 123 * - func ID ( ) { } } func ID ( ) { }",
  "- ID ( ID : bool , ID : var ) : int { int ID : ) if 123 * - func ID ( ) { } } func ID ( bool { }",
  "func ) ( ID : bool { var ID : [ ( ( ID ( ID ) ) ) ] int var ID : bool }",
  "func ) ( ( : bool { var ID : [ ID ( ID ( ID ) ) ) ] int var ID : bool }",
  ") ) ( ( : bool { var ID : [ ID ( ID ( ID ) ) func ] int var ID : bool }",
  "func ID ( ) : bool { var ID : [ - - - ( ID ] ( ID ) ) and int }",
  "func ID ( ) : bool ( var ID : [ - - - ( ID ] { ID ) ) and int }",
  "func ID ( ) : ) ( var ID : [ - - - ( ID ] { ID bool ) and int }",
  "func ID ( ID : bool , ID : [ ] int , ID : bool { : bool ) var ID : bool print - true * ID { } }",
  "true ID ( ID : bool , ID : [ ] int , ID : bool { : bool ) var ID : bool print - func * ID { } }",
  ": ID ( ID : bool , ID : [ ] int , ID true bool { : bool ) var ID : bool print - func * ID { } }",
  "func ID ( ) : int { var ID : [ - ID ( true / ] [ - ( false ) ] [ - - ID ] ) ID int }",
  "func ID ] ) : int { var ID : [ - ID ( true / ( [ - ( false ) ] [ - - ID ] ) ID int }",
  "func ID ] ) : int { ( ID : [ - ID ( true / ( [ - var false ) ] [ - - ID ] ) ID int }",
  "} ID ( ID : int ) { var ID : [ ] int return 123 * - false / ( true ) func",
  "} ID int ID : ( ) { var ID : [ ] int return 123 * - false / ( true ) func",
  "} ID int ID : ( ] { var ID : [ ) int return 123 * - false / ( true ) func",
  "func ID ( ) { int ID : [ ID ( - ( true * true / false ) ) ] int var ID : var }",
  "func ID ( ) { int ID : [ ID ( - ( true * true / ID ) ) ] int var false : var }",
  "func ID ( ) ( int ID : [ ID ( - { true * true / ID ) ) ] int var false : var }",
  "func ID ( bool : bool , ID : [ ] int , ID : ID ) { var ID : int var ID : bool return }",
  "func ID ( bool : bool , ID : [ ] int , ID : ID ) { var ID bool int var ID : : return }",
  "func ID ( bool : bool , ID : var ] int , ID : ID ) { var ID bool int [ ID : : return }",
  "func ID ( ) and var ID : bool var ID : [ 123 { ( ( true ) ) ] bool }",
  "func ID ( ) and var ID : bool var ID : true 123 { ( ( [ ) ) ] bool }",
  "func and ( ) ID var ID : bool var ID : true 123 { ( ( [ ) ) ] bool }",
  "func ID ( ID : bool , ID : bool ) : bool ] bool { } func ID ( ) : [ { var ID : [ ] [ ] bool }",
  "func ID ( ID : bool , ID : bool ) : bool bool ] { } func ID ( ) : [ { var ID : [ ] [ ] bool }",
  "func ID ( ID : , bool ID : bool ) : bool bool ] { } func ID ( ) : [ { var ID : [ ] [ ] bool }",
  "func ID ( ) { var ID : int var ID : [ ] int if ID ( 123 + ( } ) ) { ID call ID ( ) }",
  "func ID ( ) { var ID : int var ID : [ ] int if ID ( ID + ( } ) ) { 123 call ID ( ) }",
  "func ID ( ) { var ID : int call ID : [ ] int if ID ( ID + ( } ) ) { 123 var ID ( ) }",
  "func ID ( ) { ID = ( - ( - - 123 / false / } ) ) } func ID ( ) { false",
  "func ID ( ) { } = ( - ( - - 123 / false / ID ) ) } func ID ( ) { false",
  "func ID / ) { } = ( - ( - - 123 ( false / ID ) ) } func ID ( ) { false",
  "func ID ( ) : var ID : bool var ID { int return }",
  "func ID ( ) : var ID : bool var return { int ID }",
  "func ID ( ) } var ID : bool var return { int ID :",
  "func ID ( ) { var ID : int var ID : [ ) [ ] int if - false * ( true ) { } } func ID ( ] { }",
  "func ID ( ) { var ID : int var ID : func ) [ ] int if - false * ( true ) { } } [ ID ( ] { }",
  "func ID ( ) { var int : ID var ID : func ) [ ] int if - false * ( true ) { } } [ ID ( ] { }",
  "func ID ( ) { var - : bool var ID : int while ( ( false ID - ( ID ) ) ) { } { } }",
  "func ID ( ) { var - : bool var ID : int while ( ) false ID - ( ID ( ) ) { } { } }",
  "func ID ( ) { var - : ) var ID : int while ( ) false ID - ( ID ( ) bool { } { } }",
  "func ID ( ID } bool , ID : bool ) : int { ID [ 123 / - ( ( - ID ) ) * ( ( ID ) ) ] = - ( false ) :",
  "func ID ( ID } bool , ID ID bool ) : int { : [ 123 / - ( ( - ID ) ) * ( ( ID ) ) ] = - ( false ) :",
  "func ID ( ID } bool : ID ID bool ) : int { , [ 123 / - ( ( - ID ) ) * ( ( ID ) ) ] = - ( false ) :",
  "func ID ( ) { var ID : [ ] var int ID : bool }",
  "func ID ( ) { var ID : [ ] var int ID : bool }",
  "func ID ( ID : [ ] [ ] ( , ID : bool , ID : bool ) : bool { print ID ( - 123 ) } func ID bool ) { }",
  "func ID ( ID : [ ] [ ] ( , ID : bool , ID : bool ) : bool { print ID ( - 123 ) } func ID bool ) { }",
  "func ID ( ID : [ ] ] [ ( , ID : bool , ID : bool ) : bool { print ID ( - 123 ) } func ID bool ) { }",
  "func ID ( ID : bool , ID : [ ID and - - ID ( ) and 123 ( - ID ) ] int ) { }",
  "func ID } ID : bool , ID : [ ID and - - ID ( ) and 123 ( - ID ) ] int ) { (",
  "func } ID ID : bool , ID : [ ID and - - ID ( ) and 123 ( - ID ) ] int ) { (",
  "func ID ( ) : int { var ID : bool var ID : [ ] [ ID [ true and ( false ) and - ] ID ] [ ] bool }",
  "func ID ( ) : [ { var ID : bool var ID : [ ] int ID [ true and ( false ) and - ] ID ] [ ] bool }",
  "func ID ( ) : [ { var ID : bool var ID : [ ] int ID [ true and ( false ) and - ] ID ] [ ] bool }",
  "func ID ( ) : [ ] [ ] bool { var ID : [ ] int { var ID : } { if ID { } } if false { } } { } bool func ID ( ) { }",
  "func ID ( ) : [ ] [ ] bool { var ID : { ] int { var ID : } { if ID [ } } if false { } } { } bool func ID ( ) { }",
  "func ID func ) : [ ] [ ] bool { var ID : { ] int { var ID : } { if ID [ } } if false { } } { } bool ( ID ( ) { }",
  "func ID ( ID : [ ( ) - ID [ false / ID * false ] [ ( - - ID ) ] ( ) ] [ ] bool ) { }",
  "func ID ( ID : [ ( ) ) ID [ false / ID * false ] [ ( - - ID - ] ( ) ] [ ] bool ) { }",
  "func ID ( ID : [ ( ) ) ID [ false / ID - false ] [ ( - * ID - ] ( ) ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] bool ) { [ true / ID [ ID ] return false ] }",
  "func ID } ID : bool , ID : bool , ID : [ ] bool ) { [ true / ID [ ID ] return false ] (",
  "] ID } ID : bool , ID : bool , ID : [ ] bool ) { [ true / ID [ ID func return false ] (",
  "[ ID ( ID : [ - ( ID [ ID func ID ] [ false ] ] ) ] int ) { }",
  "false ID ( ID : [ - ( ID [ ID func ID ] [ [ ] ] ) ] int ) { }",
  "false ID ( ID : [ - ( ID [ ID func ID ] ) [ ] ] [ ] int ) { }",
  "func ID ( ) : int { var ID ) int var ID : bool if - ( ID ( ID : ) { } }",
  "func ID ( ) ID int { var ID ) int var : : bool if - ( ID ( ID : ) { } }",
  "- ID ( ) ID int { var ID ) int var : : bool if func ( ID ( ID : ) { } }",
  "func ID ( [ { var ID : bool { var ID : int return } ID ) ID ( ) [ - ( ID ) ] ] = false }",
  "func ID ( [ { var ID : bool { var ID : int } return ID ) ID ( ) [ - ( ID ) ] ] = false }",
  "} ID ( [ { var ID : bool { var ID : int func return ID ) ID ( ) [ - ( ID ) ] ] = false }",
  "func ID ( ) { var ID ) int var ID : [ ( - ID ( ) [ ( ( - 123 ) ) ] : ] [ ] bool }",
  "func ( ( ) { var ID ) int var ID : [ ( - ID ( ) [ ( ID - 123 ) ) ] : ] [ ] bool }",
  "func ( ( ) { var ID ) int var ID ( [ : - ID ( ) [ ( ID - 123 ) ) ] : ] [ ] bool }",
  "func ID ( ID : [ [ * ID ( ) [ true ] false true ] / - ID ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ [ * ID ( ) [ true ] false } ] / - ID ] [ ] int ) { true func ID ( ) { }",
  "func ID ( ID : [ [ * ID ( ) [ true ] false } ] / - ID ] [ ] int ) { true func ID } ) { (",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : int var ID : [ ] int ID call ( ) if ( 123 ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : int { ID : [ ] int ID call ( ) if ( 123 ) var } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : int { ID : ID ] int [ call ( ) if ( 123 ) var } } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { ID ID : bool var ID : int if var ( 123 ) { } { } }",
  "func ID ( ID : [ ] bool ) { ID ID : bool var ID ( int if var : 123 ) { } { } }",
  "func ID ( ID ID [ ] bool ) { ID : : bool var ID ( int if var : 123 ) { } { } }",
  "func ID ( ID : [ ID ( ) [ - ID ( - ( ( true ) ) ) ] [ ] ] [ ] bool ) { }",
  "func ID ( ID : bool ID ( ) [ - ID ( - ( ( true ) ) ) ] [ ] ] [ ] [ ) { }",
  "func ID ( ID : bool ) ( ) [ - ID ( - ( ( true ID ) ) ] [ ] ] [ ] [ ) { }",
  "func ID ( ID ID bool , ID : bool , ID : bool ) : [ false and ID [ : ] ] int { }",
  "func and ( ID ID bool , ID : bool , ID : bool ) : [ false ID ID [ : ] ] int { }",
  "ID and ( ID ID bool , ID : bool , func : bool ) : [ false ID ID [ : ] ] int { }",
  "func ID ( ) : bool { print - ID + false / 123 * - ID } ) - ( ID ) { } (",
  "func ID ( ) : bool { print - ID + false / 123 * ) ID } ) - ( ID - { } (",
  "func ID ( ) : print { bool - ID + false / 123 * ) ID } ) - ( ID - { } (",
  "func ID ( ID : bool ) bool [ ] bool { var ID : : var ID : [ ] [ ] [ ] bool call ID ( ) }",
  "func ID ( ID : bool ) bool ID ] bool { var ID : : var [ : [ ] [ ] [ ] bool call ID ( ) }",
  "func ID ( ID : bool ) bool ID ] bool { var ID : : var [ : ] ] [ [ [ ] bool call ID ( ) }",
  "func ID ( ID : [ ( ID ( [ ) 123 * 123 / - ID ] [ ( ( ID ) ) ] ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ( func ( [ ) 123 * 123 / - ID ] [ ( ( ID ) ) ] ) ] [ ] bool ) { } ID ID ( ) { }",
  "func ID ( ID : [ ( func ( [ ) 123 * 123 / - ID ] [ ( ( ID ) bool ] ) ] [ ] ) ) { } ID ID ( ) { }",
  "ID func ( ID : int , ID : bool , ID : int ) { var ID : bool var ID : int ID [ false ] = ( - - ID ) }",
  "ID func ( ID : int , : ID bool , ID : int ) { var ID : bool var ID : int ID [ false ] = ( - - ID ) }",
  "ID int ( ID : func , : ID bool , ID : int ) { var ID : bool var ID : int ID [ false ] = ( - - ID ) }",
  "func ID ( ID : [ ] [ ID ( ) / ( - true - ID + - false ) ] bool ) { } func ID ( { ) }",
  "func ID ( ID { [ ] [ ID ( ) / ( - true - ID + - false ) ] bool ) : } func ID ( { ) }",
  "func ID ( ID { [ ] [ ID ( ) / ( - true - ID + func false ) ] bool ) : } - ID ( { ) }",
  "ID ID ( ) : int { ID ( ) [ ID [ ID - func ] ] = ID }",
  "ID ID ( - : int { ID ( ) [ ID [ ID ) func ] ] = ID }",
  "func ID ( ID : [ 123 * ( false ) true + ( ( - ( ( ( true ) ) ) + ) ) / - true ] [ ] int ) { }",
  "func ID ( ID : [ 123 * ( false ) true + ( ( - ( ( ( true ) ) ) + ) ) / - true ] [ ] int ) { }",
  "func ID ( ID : ( 123 * ( false ) true + [ ( - ( ( ( true ) ) ) + ) ) / - true ] [ ] int ) { }",
  "func ID ( ) { ( ID : bool var ID : [ ] [ - ( ( var 123 ) ) ) ] int }",
  "func ID ( ) { ( : : bool var ID ID [ ] [ - ( ( var 123 ) ) ) ] int }",
  "func ID ( ) { ( : : bool var ID ID [ ] [ - ( ( var 123 ) ) ) ] int }",
  "func ID ( return { var ID : [ ] int ) }",
  "func ID ( return { var ID } [ ] int ) :",
  "var ID ( return { func ID } [ ] int ) :",
  "func ID ( ID : bool , ID : int ) { ID call { ( ) if ID [ false ] { } } print true }",
  "func ID ( ID : bool , ID : int ) ( ID call { { ) if ID [ false ] { } } print true }",
  "func ID ( ) { ID ID : int var ID : int return 123 / - ID * 123 - ( false ) - ID } func var ( ) { }",
  "func ID ( } { ID ID : int var ID : int return 123 / - ID * 123 - ( false ) - ID ) func var ( ) { }",
  "func ID ( } { ID ID : int var ID : return int 123 / - ID * 123 - ( false ) - ID ) func var ( ) { }",
  "func ID ( ) { var ID : } ] bool [",
  "func ID ( ) { ] ID : } var bool [",
  "func ID ) ( { ] ID : } var bool [",
  "func ID ( ID : [ ] int , ID : bool ) { ID ( true - 123 * ID + - - ( ( ID ) ) ) = ID call ID ( ) } func { ( ) ID }",
  "func ID ( ID : [ ] int , ID : bool ) { ID ( true - 123 * ID + { - ( ( ID ) ) ) = ID call ID ( ) } func - ( ) ID }",
  "func ID ( ID : [ ] int , ID : bool = { ID ( true - 123 * ID + { - ( ( ID ) ) ) ) ID call ID ( ) } func - ( ) ID }",
  "func ID ( ) : bool , ID : bool , ID : [ ] [ ] int ) { var ID : [ ] [ ] [ ] int var ID : bool } func ID ( ID { }",
  "func ID ( ) ] bool , ID : bool , ID : [ ] [ ] int ) { var ID : [ : [ ] [ ] int var ID : bool } func ID ( ID { }",
  "func ID ( ) ] bool , ID : bool , ID : [ ] [ ] int ) { [ ID : [ : var ] [ ] int var ID : bool } func ID ( ID { }",
  "func { ( ) : bool ID var ID : bool return ID [ ID [ 123 ] ] [ ID ] }",
  "func { ( ) : bool ID var : ID bool return ID [ ID [ 123 ] ] [ ID ] }",
  "func ID ( ) : bool { var : ID bool return ID [ ID [ 123 ] ] [ ID ] }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var ID : [ true * ID == false ID [ ] bool var ] : [ ] [ ] bool }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var ID : [ : * ID == false ID [ ] bool var ] true [ ] [ ] bool }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { ] ID : [ : * ID == false ID [ ] bool var ] true [ var [ ] bool }",
  "func ID ( ID : [ ] bool , ID : int ) { ID ID : int var ( ) [ false / 123 / true ] = true if - - - true { } }",
  "func ID ( { : [ ] bool , ID : int ) { ID ID : int var ( ) [ false / 123 / true ] = true if - - - true ID } }",
  "func ID ( { : [ ] bool , ID : int ) { ID ID : int var ( ) [ false / 123 / true ] = true if - - - true ID } }",
  "func ID ( ) : bool { } func ID ( ID [ [ ID ( ( false ) ) ] : ] bool ) { }",
  "func ID ( ) : ID { } func ID ( ID [ [ bool ( ( false ) ) ] : ] bool ) { }",
  "func ID ( ) : ID { } func ID ( ID [ [ bool ( ( : ) ) ] false ] bool ) { }",
  "func ID * ID : int ) : [ ( true * false ( ID [ ( ( - ID ) ) ] ) ] bool { }",
  "func ID ) ID : int * : [ ( true * false ( ID [ ( ( - ID ) ) ] ) ] bool { }",
  "func ID ) ID : int * : [ ( [ * false ( ID true ( ( - ID ) ) ] ) ] bool { }",
  "func ID ( ) { var ID : [ ] [ ] - ( false [ true / true + ( ( - - ID ) ) ) ] int }",
  "func ID ( true { var ID : [ ] [ ] - ( false [ true / ) + ( ( - - ID ) ) ) ] int }",
  "func ID ( true { ( ID : [ ] [ ] - ( false [ true / ) + var ( - - ID ) ) ) ] int }",
  "func ID ( ID : bool ) : [ ( 123 / ID ID [ 123 * 123 / - ID ] [ ID ] ) ] bool { } func - ( ) { }",
  "func ID ( ID : bool ) : [ ( 123 / ID ID [ 123 * 123 / - ID ] [ ID ] ) ] bool { } func - ( ) { }",
  "func ID ( ID : bool ) : [ ( 123 / ID ID [ 123 * 123 ID - ID ] [ / ] ) ] bool { } func - ( ) { }",
  "func ID ( ) true while ID ( ID [ ID / ( ( - ( ( - ID ) ) ) ) * ID ] [ 123 ] ) { } if { { } }",
  "func ID ( ) true while ID ( ID [ ID / ( ( - ( ( - ID ) ) { ) * ID ] [ 123 ] ) { } if ) { } }",
  "func ID ( ID : int ] [ ) : int { var ID : bool while true / ( ( 123 ) ) { } }",
  "func ID ( ID : int ] [ ) : int { var ID : bool while true } ( ( 123 ) ) { } /",
  "func ID ( ID : int ] [ ) ) int { var ID : bool while true } ( ( 123 ) : { } /",
  "func ID ( ) : call { bool ID ( ( - ID ( - - 123 ) ) ) }",
  "- ID ( ) : call { bool ID ( ( - ID ( func - 123 ) ) ) }",
  "- ) ( ID : call { bool ID ( ( - ID ( func - 123 ) ) ) }",
  "func ID ( ) { print ( - 123 false - true / ID and and ) }",
  "func ID ( ) { print ( - 123 false - true / ID and } ) and",
  "func ID ( ) { print ( - 123 false - and / ID true } ) and",
  "func ID ( ) { return ( false * - ID ) - ( ( } ) ) ID func ID ( ) { }",
  "func ID ( ) { return ( false ID - ID ) - ( ( } ) ) * func ID ( ) { }",
  "func ID ( ) { return ( false ID - ID ) - ( func } ) ) * ( ID ( ) { }",
  "func ID ( ID : int , ID - int ) : bool { call ID ( ID * - true + : ( true ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID - int ) : } { call ID ( ID * - true + : ( true ) ) bool func ID ( ) { }",
  "func ID ( ID : int , ID - int ) : } { call ID ( ID * - true + : ( true ) ) bool func ID ( ) { }",
  "func ID ( ) { var ID + [ - 123 - - true : ( ( ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID 123 [ - + - - true : ( ( ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID 123 + - [ - - true : ( ( ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ) bool var ID : bool } func ID ( ID : int ) : [ ( ID / true ) ] { { }",
  "func ID ( ) bool var ID : bool } func ID ( ID : int ) : [ ( ID / ] ) true { { }",
  "func ID ] ) bool var ID : bool } func ID ( ID : int ) : [ ( ID / ( ) true { { }",
  "func ID ( ID : int , ID : bool , true : bool ) : bool { var ID : bool print ID * ID ( ) * - ( - true ) } func ID ( ) { }",
  "func ID ( ID : int , ( : bool , true : bool ) : bool { var ID : bool print ID * ID ( ) * - ID - true ) } func ID ( ) { }",
  "func ID ( ID : int , ( : bool , true : bool ) : bool { var ID : bool print - * ID ( ) * - ID ID true ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool return - / ID - ( - ID ) false ID }",
  "func ID ( ) { ID ID : bool var var : bool return - / ID - ( - ID ) false ID }",
  "func ID ( ) { ID var : bool ID var : bool return - / ID - ( - ID ) false ID }",
  "func ID ( ID : int , ] : [ ] [ ] [ - ID [ 123 and ID ] ] [ ID bool ) { }",
  "func ID ( ID : int , ] : [ ] [ ] [ - ID [ 123 and ID ] ] [ ID bool ) { }",
  "func ID ( ID : int , ] : [ ] [ ] [ - ID [ 123 and ID ) ] [ ID bool ] { }",
  "func ID ( ID : [ ] { , ID : [ true and ID ( ) [ - - ID ] [ ( 123 ) ] and ( 123 ) ] [ ] int , ID : bool ) bool }",
  "func ID ( ID : ID ] { , [ : [ true and ID ( ) [ - - ID ] [ ( 123 ) ] and ( 123 ) ] [ ] int , ID : bool ) bool }",
  "func bool ( ID : ID ] { , [ : [ true and ID ( ) [ - - ID ] [ ( 123 ) ] and ( 123 ) ] [ ] int , ID : ID ) bool }",
  "func ID ID ) : bool { var ID : [ ] [ ] int var ( : [ ] bool }",
  "func ID ID ) : bool { var ID : [ ] [ ] int var ( : [ ] bool }",
  "func ID ID ) : bool { var ID : : ] [ ] int var ( [ [ ] bool }",
  "func : ( ) : int { var ID : [ ] [ ( ID ( 123 ) ) ] int var ID ID int } func ID ( ) { }",
  "func : ( ) : int { var ID : [ ] [ ( ID ( 123 ) ) ] int var ID ID int } func ID ( ) { }",
  "func : ( ) : int { var ID : [ ] [ ( ID ( 123 ) ) ] int var ID ID int } func ID ( ) { }",
  "func ID ( ) : [ - ID ( ) [ ID * / ID true and ID ] ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) bool [ - ID ( ) [ ID * / ID true and ID ] ] [ ] : { } func ID ( ) { }",
  "func ID ( ) bool [ - func ( ) [ ID * / ID true and ID ] ] [ ] : { } ID ID ( ) { }",
  "func ID ( ) : bool { var ID : int var { : [ ] int if 123 and ( true ) { } while ID ID } }",
  "func ID } ) : bool { var ID : int var { : [ ] int if 123 and ( true ) { ( while ID ID } }",
  "func ID } ) : bool { var ID : int var { : [ ] int if 123 and ( true ) { ( while ID } } ID",
  "func ID ( ) { { if ( - ID ( - } ) ) { } while true { } } { } ID",
  "func ID ( ) { { if ( - ID ( - } ) ) { { while true { } } } } ID",
  "{ ID ( ) func { if ( - ID ( - } ) ) { { while true { } } } } ID",
  "func ID ( ) : bool { 123 - true * ID [ 123 + ID ( ) ] [ false ] * return } func ID ( ) { }",
  "func ID - ) : bool { 123 ( true * ID [ 123 + ID ( ) ] [ false ] * return } func ID ( ) { }",
  "func ID - ) : { bool 123 ( true * ID [ 123 + ID ( ) ] [ false ] * return } func ID ( ) { }",
  "func ( ( ID : int , ID : [ true - - - ID - - ( - ID ) ) + - ID ] int ) { }",
  "func ( ( ID : int , ID : [ true - - - ID - - ( - ID ) ) + - ID ] int ) { }",
  "func ( ( ID : int , ID : [ true - - - ID - - ( - ID ) ) + - ID ] int ) { }",
  "func ID ( ID : [ ID ] false * 123 + ( ( ( ID ) ) ) / int ) { } func ID ( ) { }",
  "func ID ( ID : [ ID ] false * 123 + ( ( ( ID ) ) ) / int ) { } ID func ( ) { }",
  "func ID ( ID : [ ID ] false * 123 + ) ( ( ID ) ) ( / int ) { } ID func ( ) { }",
  "func ID ( 123 : int ) { var ID : bool var ID : [ ID and false - ID - ID and 123 ] bool } func ID ( ) { }",
  "func ID ( 123 : int ) ) var ID : bool var ID : [ ID and false - ID - ID and 123 ] bool } func ID ( { { }",
  "func ID ( 123 : int ) ) [ ID : bool var ID : var ID and false - ID - ID and 123 ] bool } func ID ( { { }",
  "func ID ( ) { var ID : int var ID : bool ID if [ 123 != ID ] { } { } } func ID ( ) { }",
  "func ID ( ) { var ID : int ] ID : bool ID if [ 123 != ID var { } { } } func ID ( ) { }",
  "func ID ( ) { var ID : int ] ID : bool ID if { 123 != ID var { } [ } } func ID ( ) { }",
  "func : ( ) ID [ ( ( 123 > ( ID ) ) ) ] bool { } func ID ( ) { }",
  "func : ( ) ID [ ( ( 123 > ( ( ) ) ) ] bool { } func ID ID ) { }",
  "func : ( ) ID [ ( ( 123 > ( ( ) ) ) ] bool { } func ID ID ) { }",
  "func ID ( ) : var ] bool { [ ID : int var ID : bool if - ( - ( ( - ( ID ) ) ) ) { } }",
  "( ID ( ) : var ] bool { [ ID : int var ID : bool if - ( - ( ( - func ID ) ) ) ) { } }",
  "( ID ( ) : var ] bool { [ ID ) int var ID : bool if - ( - ( ( - func ID ) : ) ) { } }",
  "func ID ( ) { return ( ID [ ID + true * true - ( - ID } ] [ - ( ID ) ] ) } func ID ( ) { )",
  "func ID ( ) { return ( ID [ ID { true * true - ( - ID } ] [ - ( ID ) ] ) } func ID ( ) + )",
  "func ID ( ) { return * ID [ ID { true ( true - ( - ID } ] [ - ( ID ) ] ) } func ID ( ) + )",
  "func ID ( ) : bool { } func ID ] ID : int ) { if ID [ 123 ( [ ( false ) ] { } }",
  "123 ID ( ) : bool { } func ID ] ID : int ) { if ID [ func ( [ ( false ) ] { } }",
  "123 ID int ) : bool { } func ID ] ID : ( ) { if ID [ func ( [ ( false ) ] { } }",
  "func ID ( ID : [ ] [ ] [ ] [ - - ID ] ) [ - ID ] [ - true ] ( int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ ] [ - - ID ] ) [ - ID ] [ - true ] ( int ) { } { ID ( ) func }",
  "func ID ( ) : ) ] [ ] int { var ID : bool return ID [ ( ID [ ] [ ID ] }",
  "return ID ( ) : ) ] [ ] int { var ID : bool func ID [ ( ID [ ] [ ID ] }",
  "func ID ( ) ) bool { { return ( ( ( ( ( true ) ) ) ) : } if - false { } } func ID ( ) { }",
  "func ID ( bool ) ) { { return ( ( ( ( ( true ) ) ) ) : } if - false { } } func ID ( ) { }",
  "func ID ( bool ) ) { { return ( ( ( ( ( true ) ) ) ) : } if - false { ID } func } ( ) { }",
  "func ID ( ) { if - - ( - false * ID ( ( } ( ( ( ID ) ) ) ) ) ) ) { } ( func ID ( ) { }",
  "func ID ( ) { if - { ( - false * ID ( ( } ( ( ( ID ) ) ) ) ) ) ) - } ( func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) ID if false / - - ( ( false ) ) { } } func { ( ) { }",
  "func ID ( ID : ( , ID : [ ] int ) ID if false / - - bool ( false ) ) { } } func { ( ) { }",
  "func ( ID ID : ( , ID : [ ] int ) ID if false / - - bool ( false ) ) { } } func { ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ID [ ] ID ( ) [ ID ] ] - int }",
  "func ID ( ) { var ID : int var ID : [ ID [ } ID ( ) [ ID ] ] - int ]",
  "func ID ( ) { var ID : int var ID : [ int [ } ID ( ) [ ID ] ] - ID ]",
  "func ID ( ) { var ID [ [ ] [ ] int var ID : : ] [ ( - ID ) ] bool } func ID ( ) { }",
  "func ID ( func { var ID [ [ ] [ ] int var ID : : ] [ ( - ID ) ] bool } ) ID ( ) { }",
  "func ID ( func { var ID [ [ ] [ ] int var ID : : ] [ ( - ID ) ] bool ID ) } ( ) { }",
  "func ID ( ) : [ 123 123 - * + 123 * ( ( true ) ) * 123 ] int { }",
  "func ID ( ) : [ 123 123 - * + 123 } ( ( true ) ) * 123 ] int { *",
  "func ID ( 123 : [ ) 123 - * + 123 } ( ( true ) ) * 123 ] int { *",
  "func ID ( ID : bool , ID : int , ID : int ) : [ false * false / false - ( - ( ) ) ) + ( ID true ] bool { } func ID ( ) { }",
  "func ID ( ID : false , ID : int , ID : int ) : [ false * false / bool - ( - ( ) ) ) + ( ID true ] bool { } func ID ( ) { }",
  "func ID ( ID : false , ID : int , ID : int ) : [ false * false / bool - ( - ( } ) ) + ( ID true ] bool { } func ID ( ) { )",
  "func ID ( ID false [ true * ( false / ID / ID [ : ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID false [ true * ( false / ID / ID [ : func ) ] bool ) { } ] ID ( ) { }",
  "func ID ( ID false [ true * ( false [ ID / ID / : func ) ] bool ) { } ] ID ( ) { }",
  "func ID ( ) : [ ID ( ID [ ( false * ( - ID ) / ( false ) ) ] [ 123 ] ] ) int { }",
  "false ID ( ) : [ ID ( ID [ ( false * ( - ID ) / ( func ) ) ] [ 123 ] ] ) int { }",
  "false ] ( ) : [ ID ( ID [ ( false * ( - ID ) / ( func ) ) ID [ 123 ] ] ) int { }",
  "func ID ( ID : int , ID bool [ ID ( - ID ( ) [ ID ] ) ] : , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID bool [ ID ( - ID ( ) [ ID ] ( ] : , ID : bool ) { } func ID ) ) { }",
  "func ID ( ID : int , ID bool [ ID ( - ID ( ) [ ID ] ( ] : , ID : bool ) { } func ID ) ) { }",
  "func ID ( ID : int , ID [ bool , ID : int ) : : true / ( ID ( - ( ID ) ) ) * ID ] int { }",
  "func ID ( ID : int , ID [ bool , ID : int ) : : true / ( ID ( ] ( ID ) ) ) * ID - int { }",
  "func ID ( ID : int , ID : int func ID : [ ] bool ) { var ID : int var ID : bool } , ID ( ) : int { }",
  "func ID ( ID : int , ID : int func ID : [ ] bool ) ) var ID : int var ID : bool } , ID ( { : int { }",
  "func int ( ID : int , ID : int func ID : [ ] bool ) ) var ID : ID var ID : bool } , ID ( { : int { }",
  "func ID ID ID : int ) : bool { if ( ( ) [ ID [ false ] ] { } print - - ( - ID ) }",
  "func ID ID ID : int ) : bool { if ( ( ) [ ID [ false ] ] { } print - - ( - ID ) }",
  "func ID ID ID [ int ) : bool { if ( ( ) : ID [ false ] ] { } print - - ( - ID ) }",
  "func ID ( ID : int , ID : bool , { : [ - - true / ( true * true * ( false ) ) / 123 ] [ ] bool ) ID }",
  "func ID ( ID / int , ID : bool , { : [ - - true / ( true * true * ( false ) ) : 123 ] [ ] bool ) ID }",
  "func { ( ID / int , ID : bool , ID : [ - - true / ( true * true * ( false ) ) : 123 ] [ ] bool ) ID }",
  "func ID ( - : bool , ID : [ - - ID ( ) [ false ID - ID + false ] ] bool ) { } func ID ( ) { }",
  "func ID : - : bool , ID ( [ - - ID ( ) [ false ID - ID + false ] ] bool ) { } func ID ( ) { }",
  "func ID : - : bool , ID ( [ - - ID ( ) [ false ID - ID + false ] ] bool ID { } func ) ( ) { }",
  "func ID ( ID : int ) ID bool { return ID / ID and : / ID and - - true } func ID ( ) { }",
  "func ID true ID : int ) ID bool { return ID / ID and : / ID and - - ( } func ID ( ) { }",
  "func ID { ID : int ) ID bool true return ID / ID and : / ID and - - ( } func ID ( ) { }",
  "func ID ( { : bool , ID : [ 123 * ID [ ID ( ) [ ( false ) ] [ ( ( ( - ID ) ) ) ] ] ] bool , ID : [ ] int ) ID }",
  "func ID ( { : bool , ID : [ 123 * ID [ ID ( ) [ ( false ) ] [ ( ( ) - ID ) ) ) ] ] ] bool , ID : [ ] int ( ID }",
  "func ID ( { : bool , ID : [ ) * ID [ ID ( ) [ ( false ) ] [ ( ( 123 - ID ) ) ) ] ] ] bool , ID : [ ] int ( ID }",
  "func ID ( ID : int , ID : [ ID / false * - ) + ID [ ( false ) ] ] [ ] [ ] [ ] [ ] bool 123 { }",
  "func ID ( ID : int , ID : [ ID / false * - ) + } [ ( false ) ] ] [ ] [ ] [ ] [ ] bool 123 { ID",
  "func ID ( ID : int , ID : [ ID false false * - ) + } [ ( / ) ] ] [ ] [ ] [ ] [ ] bool 123 { ID",
  "func ID ( ID : bool } ID : int ) : bool { while true - ID [ true ] - ID { } { } ,",
  "func ID ( ID : bool } ID : int { : bool ) while true - ID [ true ] - ID { } { } ,",
  "func ID ID ID : bool } ID : int { : bool ) while true - ( [ true ] - ID { } { } ,",
  "func ID } ID : [ ( false / - - 123 or ( - - ID ) or ( ( false ) ) ) ] int ) { } func ID ( ) { (",
  "func ID } ID func [ ( false / - - 123 or ( - - ID ) or ( ( false ) ) ) ] int ) { } : ID ( ) { (",
  "func ID ( ID : int , ID : int , ID : int ) { call ID ( } return ( - 123 ) )",
  "func ID ( ID 123 int , ID : int , ID : int ) { call ID ( } return ( - : ) )",
  "func ID call ID 123 int , ID : int , ID : int ) { ( ID ( } return ( - : ) )",
  "func ID ( ) : [ 123 / ID [ ( false * 123 * ( ID ) ) ] [ ) ( ( - 123 - ) ] / - false ] int { } func ID ( ) { }",
  "func ID ( ) : [ 123 / ID [ ( false * func * ( ID ) ) ] [ ) ( ( - 123 - ) ] / - false ] int { } 123 ID ( ) { }",
  "func ID ( ) * [ 123 / ID [ ( false : func * ( ID ) ) ] [ ) ( ( - 123 - ) ] / - false ] int { } 123 ID ( ) { }",
  "func ID ( ) : int , ID : [ ] [ ( - ( ID [ - false ] [ ( true ) ] ID ) ] bool , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : int , ID : [ ] [ ( - ( ID [ - false ] [ ( true ) [ ID ) ] bool , ID : ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) : int { ID = ( } false - ( - ID ) + ID ) while - ( true ) { } - func ID ( ) { }",
  "func ID ( ID : int ID : int { ) = ( } false - ( - ID ) + ID ) while - ( true ) { } - func ID ( ) { }",
  "func ID ( ID : int ID : int { ) = ( } false - ( - ID ) + ID ) while - ( true func { } - ) ID ( ) { }",
  "func ID ( ) { int { var ID : int return } func ID ( ID : [ ] int ) : while ( - ( - - ID ) ) { } while ( true ) { } }",
  "func ID ( ) { int { var ID : int return } func ID ( ID : [ ] int ) : while ( - ( - - ID ) ) { } while ( true ) { } }",
  "func ID ( ) { int { var ID : int return } func ID ( ID : [ ] : ) int while ( - ( - - ID ) ) { } while ( true ) { } }",
  "func ID ( ID : ) ( ( 123 * - ID [ - true ] ) ) ] int ) { } func ID ( [ { }",
  "123 ID ( ID : ) ( ( func * - ID [ - true ] ) ) ] int ) { } func ID ( [ { }",
  "123 ID ( ID : ) ( ( func * - ID [ - true ] ) ) ] int ) { } func { ( [ ID }",
  "func ID { ID : [ ] int ) : [ - - - ( ( ID * ( - - true ) / ( - ( true ) ) ) ) ] int { } func ID ( ) ( }",
  "func ID { ID : [ ] int ) : [ - - - ( ( ID / ( - - true ) * ( - ( true ) ) ) ) ] int { } func ID ( ) ( }",
  "func ID ( ID : [ ] int ) { } func ID ( { : [ 123 + ID ( ) ] int ) ID }",
  "func ID ( ID : [ ] int ) { } func 123 ( { : [ ID + ID ( ) ] int ) ID }",
  "func ID ( ID : [ ] int ) { } func 123 ( { : [ ID + ID ( ) ] } ) ID int",
  "123 ID ( ID : bool , ID : [ ] int ) : [ - ( ID / 123 + func + true ) ] int { }",
  "123 ID ( ID : bool , ID : [ ] int ) : [ - ( ID / 123 + func } true ) ] int { +",
  "123 ID ( ID : bool , ID : [ ] int ) : [ - ( ID / true + func } 123 ) ] int { +",
  "func ID ( ID : int ) { { ID : [ ID [ ( ID ) ] ] [ ] bool var ID : bool } func ID ( ) var }",
  "func ID ( ID : int ) { { ID : [ ID [ ( ID ) ] ] [ ] bool var ID : bool } func ID ( ) var }",
  "func ID ( ID ) int ) { { ID : [ ID [ ( ID ) ] ] [ ] bool var ID : bool } func ID ( : var }",
  "func ID ( ID : int ( ID : [ ] [ 123 != ( ID , 123 ) ) ] bool , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ( ID 123 [ ] [ : != ( ID , 123 ) ) ] bool , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ( ID 123 [ ] [ : != ( ID , 123 ) ) ] bool , ID : [ ] bool ) { } ) ID ( func { }",
  "func ID ( ID : [ 123 ID ( ( ( ID [ 123 ] [ 123 ] ) ) ) / ID ] [ ] bool ) { } func * ( ) { }",
  "func ID func ID : [ 123 ID ( ( ( ID [ 123 ] [ 123 ] ) ) ) / ID ] [ ] bool ) { } ( * ( ) { }",
  "func ID func ID : [ { ID ( ( ( ID [ 123 ] [ 123 ] ) ) ) / ID ] [ ] bool ) { } ( * ( ) 123 }",
  "func ID ( ) : int { if - - * ID [ - - 123 * true false / - true ] [ false ] { } }",
  "func ID ( ) : int { if * - * ID [ - - 123 - true false / - true ] [ false ] { } }",
  "func ID ( ) : int { if * - * ID [ - - 123 - true true / - false ] [ false ] { } }",
  "func ID ( ID : bool ) : [ ID ( ) [ 123 * ID ( ) [ 123 ] / - - ) ( - false ) ( ] ] bool { }",
  "func ID ( ID : bool ) : [ ID [ ) [ 123 * ID ( ) ( 123 ] / - - ) ( - false ) ( ] ] bool { }",
  "func ID ( ID : bool ) : [ ID [ ) [ 123 * ID ( ) ( 123 ] / - - ) ( - false ) ( ] ] bool { }",
  "func ID ID ID : int , ID : int ) { var ( : int return ( - ID ( ) * false ) } func ID ( ) { }",
  "func ID ID ID : int , ID ( int ) { var ( : int return ( - ID ( ) * false ) } func ID : ) { }",
  "func ID ID ID : return , ID ( int ) { var ( : int int ( - ID ( ) * false ) } func ID : ) { }",
  "func ID ( ID : bool : ID , bool ) : int { var ID : bool var ID : [ ] bool while true / ( - - ID ) { } }",
  "func ID ( ID : bool ID ID , bool ) : int { var : : bool var ID : [ ] bool while true / ( - - ID ) { } }",
  "func ID ( ID : bool ID ID , bool ID : int { var : : bool var ID : [ ] bool while true / ( - - ) ) { } }",
  "func ID ( ) : bool var return } func ID ( ID : bool , ID : int , ID : bool ) { var ID : bool { ID : [ ] bool }",
  "func ID ( ) : bool var return ID func ID ( ID : bool , ID : int , } : bool ) { var ID : bool { ID : [ ] bool }",
  "func var ( ) : bool var return ID func ID ( ID : bool , ID : int , } : bool ) { ID ID : bool { ID : [ ] bool }",
  "func ID ( ID : [ , ID : int , ID : int ) : bool ] bool { var ID : int } func ID ( ID : [ ID ] int ) { }",
  "func ID ( ID : [ ID ID : int , ID : int ) : bool ] bool { var ID : int } func , ( ID : [ ID ] int ) { }",
  "func ID ( - { print ( ( - - ( ) - 123 ) ) ) } func ID ( ) { }",
  "func ID ( - { print ( ( - - ) ) - 123 ) ( ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] [ ] [ true / false * ID ( ID and ID ] [ ] [ ] [ ] int } func ID and ) { }",
  "func ID ( ) : int { var ID : [ ] [ ] [ true / false * } ( ID and ID ] [ ] [ ] [ ] int ID func ID and ) { }",
  "func ID ( ) : int { var ID : [ ] [ ] [ true / false * } ( ID [ ID ] [ ] [ ] and ] int ID func ID and ) { }",
  "func ID ( ) : int { var ID : int } func ID ( } : [ ] int { ID = ( false ) { ) }",
  "func ID ( ) : { { var ID : int } func ID ( } : [ ] int int ID = ( false ) { ) }",
  "func ID ( ) : { { ) ID : int } func ID ( } : [ ] int int ID = ( false ) { var }",
  "func , ( ID : bool ID ID : int ) { { var ID : [ ] [ ] bool print ( true ) { } } } func ID ( ) { }",
  "func , ( ID : bool ID ID : int ) { { var ID : [ ] [ ] bool ID ( true ) { } } } func print ( ) { }",
  "func , ( ID : bool ID : : int ) { { var ID ID [ ] [ ] bool ID ( true ) { } } } func print ( ) { }",
  "func ID ( ) { var ID : int var ID : int call ID ( ) } func ID ( ID : ) ) { if - ID { } call ID ( int }",
  "func ID ( ) { var ID ID int var ID : int call ID ( ) } func ID ( : : ) ) { if - ID { } call ID ( int }",
  "func ID : ) { var ID ID int var ID : int call ID ( ) } func ID ( ( : ) ) { if - ID { } call ID ( int }",
  "func ID ( ) : bool { ) ID [ - ( ( - ( true print ) ) ] }",
  "func ID ( ) ) bool { : ID [ - ( ( - ( true print ) ) ] }",
  "func ID ] ) ) bool { : ID [ - ( ( - ( true print ) ) ( }",
  "func ) ( ID : [ ( ( false * - ID ( true ) * ( ID ID ) ) ] bool ) { }",
  "func ) ( ID : [ ( ( false { - ID ( true ) * ( ID ID ) ) ] bool ) * }",
  "func ID ( ) : [ ( ( false { - ID ( true ) * ( ID ID ) ) ] bool ) * }",
  "func ID ( : : int { var ID ) [ ] bool call ID ( ) if - ( ( ID ) ) { } }",
  "func ID ( ) : bool { while ID / - - ( true [ ID ] [ true ] ) / ID { } { } } func ID ( ) { }",
  "func ID ( ) : bool { while ID / - ] ( true [ ID - [ true ] ) / ID { } { } } func ID ( ) { }",
  "func ID : ) ( bool { while ID / - ] ( true [ ID - [ true ] ) / ID { } { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : ] ) : [ int [ false < ( ( ID ) ) ] int { }",
  "func ID ( ) : int , ID : bool , ID : ] ) : [ int [ false < ( ( ID ) ID ] int { }",
  "func ID ( ) : int , ID : bool , < : ] ) : [ int [ false ID ( ( ID ) ID ] int { }",
  "func ID ( ) { return ( ) * ID [ ( 123 ) ] [ ( ( ( ID ) ) false ] / ( ID ) ) }",
  "func ID ( ) ID bool { while ( - - ( false + : ) ) { } print - ( ( ID ) ) }",
  "func ) ( ID ID bool { while ( - - ( false + : ) ) { } print - ( ( ID ) ) }",
  "func ) ( ID ID bool { while ( - - ( false + : ) ) { } ) - ( ( ID ) print }",
  "func ID ( ) { var - : bool ID = ID ( ) * ID - - false - ID }",
  "func false ( ) { var - : bool ID = ID ( ) * ID - - ID - ID }",
  "func ID { ) { call ID ( ID * 123 - false != ID + - - - ( 123 ) + ID ) } func ID ( ) ( }",
  "func ID { ) call { ID ( ID * 123 - false != ID + - - - ( 123 ) + ID ) } func ID ( ) ( }",
  "func ID { ) call { ID ( ID * 123 - false != ID + - } - ( 123 ) + ID ) } func ID ( ) ( -",
  "func ID ( ID : bool , ID : [ false - - ) [ - ( ( false ) ) ] - ( ( true ) ) ] bool ) { } func ID ( ID { }",
  "func bool ( ID : bool , ID : [ false - - ) [ - ( ( false ) ) ] - ( ( true ) ) ] ID ) { } func ID ( ID { }",
  "func ID ( ID : int ID { while - true / false / ID ( ) [ true ] [ ) ] { } } func ID ( ) { }",
  "func ID ( ID : while ID { int - true / false / ID ( ) [ true ] [ ) ] { } } func ID ( ) { }",
  "func ID ( ID : while ID { int - true / ( / ID false ) [ true ] [ ) ] { } } func ID ( ) { }",
  "func ID ( int : ID , ID : int , ID : [ ID ( ( - ( true ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( int : ID , ID : int , ID : [ ID ( ( - ( true } ) ) ] [ ] bool ) { ) func ID ( ) { }",
  "func ID ( int : ID , ID : int , ID : [ ID ( ] - ( true } ) ) ( [ ] bool ) { ) func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int var ID : [ ] [ ] int { var ID : bool print ID : [ ] [ ] [ ] [ ] [ ] [ ] [ ] bool } var ( ( false ) ) }",
  "func ID ( ID : bool ) { var ID : int var ID : [ ] [ ] int { var ID : bool print ID : [ ] [ ] [ ] [ ] [ ] [ ] [ ] bool } var ( ( ) ) false }",
  "func ID ( ID : bool ) { var ID : int var ID : [ ] [ ] int { var ID bool bool print ID : [ ] [ ] [ ] [ ] [ ] [ ] [ ] : } var ( ( ) ) false }",
  "func ID ( ) : [ ] bool { var ID : [ ] bool var ID : int return } * false / - false } func ID ( ) { false",
  "func ID ( ) : [ ] { bool var ID : [ ] bool var ID : int return } * false / - false } func ID ( ) { false",
  "func ID ( ) : [ ] { bool var ID : [ ] bool var ID false int return } * false / - false } func ID ( ) { :",
  "func ID ( ID : [ ] [ ] bool , ID : var , ID : int ) : int { var ID : [ ] bool bool ID : int if ID { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool { ID : var , ID : int ) : int { var ID : [ ] bool bool ID : int if ID , } } func ID ( ) { }",
  "( ID func ID : [ ] [ ] bool { ID : var , ID : int ) : int { var ID : [ ] bool bool ID : int if ID , } } func ID ( ) { }",
  "func ID ( ID * [ ID - ID ( ) : ID ( ) [ - ( 123 ) ] [ 123 ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID * [ - - ID ( ) : ID ( ) [ ID ( 123 ) ] [ 123 ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID * [ - - ID ( ) : ID ( ) [ ID ( ] ) ] [ 123 123 ] bool ) { } func ID ( ) { }",
  "func ID ( func { var ID : int var ID : bool } ) ID ( ) { }",
  "func } ( func { var ID : int var ID : bool } ) ID ( ) { ID",
  "func } ( ) { var ID : int var ID : bool } ) ID ( func { ID",
  "func ID var ) : bool { call ID ( ) return } func ID ( ) : int { ( ID : [ ] bool var ID : [ ] int }",
  "func ID var ) : bool { call ID ( ) return } func ID ( ) : int { ( ID : [ ] bool var ID : [ ] int }",
  "func ID ( ID : [ ID ( ID func - ID [ 123 ] ] [ ID ] ) ] [ ] bool ) { } [ ID ( ) { }",
  "func ID ( ID : [ ID ( ID func - ID [ 123 ] } [ ID ] ) ] [ ] bool ) { ] [ ID ( ) { }",
  "func ID ( ID : [ ID ( ID func - ID [ 123 ] ID [ ID ] ) ] [ ] bool ) { ] [ } ( ) { }",
  "func ID ( int : int , ID : int ) { var ID : ID call ID ( ) ID [ true / ID ] [ 123 ] = - ID }",
  "func ID ( int : int , ID : int ) { var ID : ID call ID [ ) ID [ true / ID ] ( 123 ] = - ID }",
  "func ID ( int : int , true : int ) { var ID : ID call ID [ ) ID [ ID / ID ] ( 123 ] = - ID }",
  "func ID ( ) { var ID : int var ID : ) while ( ( ID ( bool ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : ) } ( ( ID ( bool ) ) { } while func ID ( ) { }",
  "func ID ( { { var ID : int var ID : ) } ( ( ID ( bool ) ) { } while func ID ( ) ) }",
  "func ID ( ID : [ false - - - ( false != ID ( false ) ) ) int ] { }",
  "func ID ( ID : false false - - - ( [ != ID ( false ) ) ) int ] { }",
  "func ID ( ) { var ID true int var ID : bool print ( - : ) / ID } func ID ( ) { }",
  "func ID ( ) { var ID true int var ID : bool print ( - : ) / ID } func ID ( ) { }",
  "func ID ( ) { var ID true int var ID : bool print ( - } ) / ID : func ID ( ) { }",
  "func ID ( ) : int { var ID : bool if [ ID / ID ( true ] ) { } }",
  "func var ( ) : int { ID ID : bool if [ ID / ID ( true ] ) { } }",
  "func var ( / : int { ID ID : bool if [ ID ) ID ( true ] ) { } }",
  "} ID ( ) : int { var ID : bool var ID : [ ] int call ID ( ID ( ) [ ( ( - ( false ) ) ) ] [ true ] ) call ID ( ) func",
  "} ID ( ) : int { var ID : bool var ID : [ ] true call ID ( ID ( ) [ ( ( - ( false ) ) ) ] [ int ] ) call ID ( ) func",
  "} ID ( ) : int { var ID : bool var ID : [ ] true call ID func ID ( ) [ ( ( - ( false ) ) ) ] [ int ] ) call ID ( ) (",
  "func ID ( ) { var 123 : [ ] [ ] int var ID : bool { call ID ( ID * ID ) } } func ID ( ) { }",
  "func ID ( ) { var 123 : [ ] [ ] int var ID : bool { call ID } ID * ID ) } } func ID ( ) { (",
  "func ID ( ) { var 123 : [ ] [ ] int var ID : bool { call ID } ID * ID ) } } func ID ( ) { (",
  "func ID ( ID : bool ) : bool { var ID } [ ] bool var ID : [ - false * - ( ID ) ] bool } func ID ( ) { :",
  "func ID ( ID : bool ) : bool { var ID } [ ] bool var ID : [ - false * ID ( ID ) ] bool } func - ( ) { :",
  "func ID ( false : bool ) : bool { var ID } [ ] bool var ID : [ - ID * ID ( ID ) ] bool } func - ( ) { :",
  "func ID ( ID : int , ID : int ) : bool { var ID : [ - ID [ false ] [ true ] ] bool var ID int [ ] : }",
  "func ID ( ID : ID , ID : int ) : bool { var ID : [ - int [ false ] [ true ] ] bool var ID int [ ] : }",
  "func ID ( ID : ID , ID ) int : : bool { var ID : [ - int [ false ] [ true ] ] bool var ID int [ ] : }",
  "func ID ( ) bool [ ] : { var ID : int call ID ( - - - ID ( ID ) ) { } }",
  "func ID ( ) bool [ ] ) { var ID : int call ID ( - - - ID ( ID : ) { } }",
  "func ] ( ) bool [ ID ) { var ID : int call ID ( - - - ID ( ID : ) { } }",
  "func ID ( ID : ID , ID : bool , ID : int ) : int { ID ( - ID [ ( ID ) ] [ ( ( true ) ) ] ) = int call ID ( ) }",
  "func ID ( ID : ID , ID : bool , ID : int ) : int { ID ( - } [ ( ID ) ] [ ( ( true ) ) ] ) = int call ID ( ) ID",
  "func ID ( ID : ID , ID : bool , ID : int ) : int { ID ( - } [ ( int ) ] [ ( ( true ) ) ] ) = ID call ID ( ) ID",
  "func ID ( ) { var ID : ) call ID ( ) } func ID ( int : [ ID ( - ( 123 ) ) ] int { }",
  "func ID ( ) { var ] : ) call ID ( ) } func ID ( int : [ ID ( - ( 123 ) ) ID int { }",
  "func ID int ) { var ] : ) call ID ( ) } func ID ( int : [ ID ( - ( 123 ) ) ID ( { }",
  "func ID ( ) { var ID : bool if ( ( - ) ID + ( ID ) - ) { } ID = false } func ID ( ) { }",
  "func ID ( ) { var ID : bool if ( ( - ) ID + ( ID { - ) { } ID = false } func ID ( ) ) }",
  "func ID ( ) { var ID : bool if ( ( - ) ID + ID ID { - ) { } ID = false } func ( ( ) ) }",
  "func ID ( ID : bool , ID : int ) { var ID : [ ] int if false - func [ ( ( 123 ) ) ] [ ID ] { } { } } ID ID ( ) { }",
  "func ) ( ID : bool , ID : int ) { var ID : [ ] int if false - func [ ( ( 123 ) ID ] [ ID ] { } { } } ID ID ( ) { }",
  "func ) ( ID : bool , ( : int ) { var ID : [ ] int if false - func [ ID ( 123 ) ID ] [ ID ] { } { } } ID ID ( ) { }",
  "func ID ( ID : bool ) { if ID [ { ID [ - ( ID ) ] ) ] { } call ID ( ) } func ID ( ) ( }",
  "func ( ID ID : bool ) { if ID [ { ID [ - ( ID ) ] ) ] { } call ID ( ) } func ID ( ) ( }",
  "func ID ( : : bool { var ID ) [ 123 * ( - false + ID ) ] bool var ID : [ ] bool } func ID ( ) { }",
  "func ID ( : : bool { var ID ) [ 123 * ( - false ID ID ) ] bool var + : [ ] bool } func ID ( ) { }",
  "func ID ( : : bool { var ID ) [ 123 * ( - false ID ID ) bool bool var + : [ ] ] } func ID ( ) { }",
  "func ID ( ) { var ID : - ID [ - ID ( ( ID ) ) ] [ - ( - int - 123 ) ] = ( true ) }",
  "func ID ( ) { var ID : - ID [ - ID ( ( ( ) ) ] [ - ( - int - 123 ) ] = ID true ) }",
  "func ID ( ) { var ID : - ID [ - ID ( ID ( ) ) ] [ - ( - int - 123 ) ] = ( true ) }",
  "func ID ( ID : int , ID : int , ID } bool ) { if - ( ID ( false ) ) { : }",
  "func ID ( ID ( int , ID : int , ID } bool ) { if - : ID ( false ) ) { : }",
  "func ID ( ID ( int , ID : int { ID } bool ) { if - : ID ( false ) ) , : }",
  "func ID ( ) : bool ] if ( ( ID [ ID ] [ - ID { ) ) { } } func ID ( ) { }",
  "func ID ( ) : bool ] if ( ( ID [ ID ] [ - ID { ) ) { } func } ID ( ) { }",
  "func ID ( bool : ) ] if ( ( ID [ ID ] [ - ID { ) ) { } func } ID ( ) { }",
  "func ID ( ) { print ( ID [ } / ID [ true ] ] ) true func ID ( ) { }",
  "func ID ( ( { print ) ID [ } / ID [ true ] ] ) true func ID ( ) { }",
  "func ID ( ( { print ) ID true } / ID [ true ] ] ) [ func ID ( ) { }",
  "func ID ( true : [ - ID * - true + ( ID [ 123 ] ) - 123 ] int ) { } func ID ( ) { }",
  "func ID ( true : [ - ID * - true + ( ID [ 123 ] ) - 123 ] } ) { } func ID ( ) { int",
  "func ID ( int : [ - ID * - true + ( ID [ 123 ] ) - 123 ] } ) { } func ID ( ) { true",
  "func ID ( ) { var ID : ( var ID : int call ID bool ) while ID ( ) [ ( ( ID ) ) ] [ ID ] { } }",
  "func ID ( ID { var ) : ( var ID : int call ID bool ) while ID ( ) [ ( ( ID ) ) ] [ ID ] { } }",
  "func ID ( ID { var ) : while var ID : int call ID bool ) ( ID ( ) [ ( ( ID ) ) ] [ ID ] { } }",
  "func ID ( ID : bool } : int { var ID : int print 123 <= - false and ID while ID { } ) func ID ( ) { }",
  "func ID print ID : bool } : int { var ID : int ( 123 <= - false and ID while ID { } ) func ID ( ) { }",
  "func ID print ID : bool } : int { var ID : int ( 123 <= - false and ID while ID { } ) func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ - ( / ID [ false ] ] [ ( ID ) ] ] bool ) { } func ID ID ) { }",
  "func ID ( ID : [ ID ( ) [ - ( / ID [ false ] ] [ ( ID ) ] ] bool ) { } ID func ID ) { }",
  "func ID ( ID : [ ID ( ) [ - ( / ID [ false ] ] ID ( ID ) ] ] bool ) { } [ func ID ) { }",
  "func ID ( ID : bool , ID : [ ( true ) - ( ( - ID * ) ) ] int ) { }",
  "func ID ( ID : bool , ID ( [ : true ) - ( ( - ID * ) ) ] int ) { }",
  "func ID ( ID : - , ID : int ) : int { if ( bool ( - ID ) ) { } { } }",
  "func ID ( ID : - , ID } int ) : int { if ( bool ( - ID ) ) { } { : }",
  "func ID ( ID : - , ID } if ) : int { int ( bool ( - ID ) ) { } { : }",
  "func ID ( ID : [ true - ( ( - ( true ) ) ) ] [ ] [ ] bool { { } func ID ( ) ) }",
  "func ID ( ID : [ true - ( ( - ( true ) ) ) ] [ ] } ] bool { { [ func ID ( ) ) }",
  "func ID ( ID : [ true - ( ( - ( true ) ) ) ] [ ] } ] bool { { [ func ID ( ) ) }",
  "func ID ( ) { while true < ( ( false ) ( ID and and ID ) ) { } }",
  "func ID ( ID { while true < ( ( false ) ( ID and and ) ) ) { } }",
  "func ID ( ) : bool { var ID : bool ID ( ) 123 - true * [ / ( 123 ) ] = true } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool ) ( ) 123 - true * [ / ( 123 ID ] = true } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool ) ( ) 123 - { * [ / ( 123 ID ] = true } func ID ( ) true }",
  "func ID ( / : [ ( ID ( ID * ( ID ) ID ID ) ) ] [ ] bool ) { }",
  "func ID ( [ : [ ( ID ( ID * ( ID ) ID ID ) ) ] / ] bool ) { }",
  "func ID ( [ : [ ( ID ] ID * ( ID ) ID ID ) ) ( / ] bool ) { }",
  "func ID ( ID : bool ) { var ID : [ ] bool if - false * ( ( true ) ) { ( ID ) { } } func ID ( ) / }",
  "func ID ( ID : bool ) { var ID : [ ] if bool - false * ( ( true ) ) { ( ID ) { } } func ID ( ) / }",
  "func ID ( ( : bool ) { var ID : [ ] if bool - false * ( ID true ) ) { ( ID ) { } } func ID ( ) / }",
  "func and ( ) : [ 123 / - true ID - - ID ( ) [ - ID ] [ ID ] and ( - ID ) ] bool { }",
  "func and ( ) : [ 123 / - true ID - ] ID ( ) [ - ID ] [ ID ] and ( - ID ) - bool { }",
  "func and ( ) : [ 123 / - - ID - ] ID ( ) [ - ID ] [ ID ] and ( - ID ) true bool { }",
  "func ID ( ID : bool , ID ] [ ] int , ID : [ ( ID ( ) [ - ( 123 ) ] ) : bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID ] [ ] int , ) : [ ( ID ( ) [ - ( 123 ) ] ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : bool bool ID ] [ ] int , ) : [ ( ID ( ) [ - ( 123 ) ] ID : , ) { } func ID ( ) { }",
  "func ID ( ID : int ID { var ) : [ ID ( ( true * ( ID ) * ( ( ( - ( ID ) ) ) ) ) ) ] [ ] int var ID : [ ] [ ] int }",
  "func ID ( ID : [ ] int ) { bool func ID ( ) : int { var ID : [ ] [ - 123 ] } var ID : [ ] bool }",
  "func ID ( ID : [ ] int ) { bool func ID ( ) : int { var ID : [ ] [ - 123 ] } var ID : [ ] bool }",
  "func ID ( ID : [ ] bool , ID : int , ID : [ ] [ int ] ) { var ID : int } func ID ( ID : [ ] [ ] int ) { }",
  "int ID ( ID : [ ] bool , ID : int , ID : [ ] [ int ] ) { var ID : func } func ID ( ID : [ ] [ ] int ) { }",
  "int ID ( ID : [ ] bool , ID : int , ID : [ ] [ int ] ) { var ID : func } func ID ( ID : [ ] [ ] int ) { }",
  "func ID ( ID : bool ) : bool { 123 ID : int print var * ( ID [ ( false ) ] ) }",
  "func ID ( ID : bool ) : bool ID 123 ID : int print var * ( { [ ( false ) ] ) }",
  "func ID ( ID : bool ) : bool ID 123 ID : int ( var * print { [ ( false ) ] ) }",
  "func ID ( ) ( [ : true * ID ( ( - false ) ) ) ] int { }",
  "func ID ( ) * [ : true ( ID ( ( - false ) ) ) ] int { }",
  "func ID ( ) ( [ : true ( ID * ( - false ) ) ) ] int { }",
  "func ID ( ID : [ ] bool ) int var ID : bool var ID : { ID = ID ( ) [ ( true ) ] call ID ( ) }",
  "func ID ( ID : [ ] bool ) int var ID : bool var ID : ( ID = ID ( ) [ ( true ) ] call ID { ) }",
  "func ID ( ID : [ ] bool ) int var ID : bool var ID ) ( ID = ID ( : [ ( true ) ] call ID { ) }",
  "func ID ( ID : int ] ID : [ ID [ ( - - true / 123 ) ] , int ) { }",
  "func ID ( ID : int ] { : [ ID [ ( - - true / 123 ) ] , int ) ID }",
  "func ID ( ID : int ] { : [ ID [ ( - - true / 123 ) ] , int ) ID }",
  "func ID ( ID : int ) { var ID : bool var ID : int call ID ( ) ID [ ( func ( 123 ) ) ] = false } - ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool var ID : int call ID ( ) ID [ ( func ( 123 ) ) ] = false { - ID ( ) } }",
  "func ID ( ID : int ) { var ID : bool var ID } int call ID ( ) ID [ ( func ( 123 ) ) ] = false { - ID ( ) } :",
  "func ID ( ID : int , ID : [ ] bool ) : [ ] bool { var ID : int var ID : [ ] bool call ID ( ) ( false { } } func ID if ) { }",
  "func ID ( ID ] int , ID : [ ] bool ) : [ ] bool { var ID : int var ID : [ : bool call ID ( ) ( false { } } func ID if ) { }",
  "func ID ( ID ] int , ) : [ ] bool ID : [ ] bool { var ID : int var ID : [ : bool call ID ( ) ( false { } } func ID if ) { }",
  "func ID ( ) { var ID : [ ] [ ] [ ] bool while ( false / false * true ) func } while ( true ) { } } { ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] [ ] bool while ( { / false * true ) func } while ( true ) false } } { ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] [ ] bool while ( { / false * false ) func } while ( true ) true } } { ID ( ) { }",
  "] ID ( ID : [ false + - ID ( ) + ID ( true / ( true ) ) ] [ func bool ) { }",
  "] ID ( ID : [ false + - ( ID ) + ID ( true / ( true ) ) ] [ func bool ) { }",
  "func ) ( ) : [ ] int { var ID : [ ] bool while true / - - false - false + ID { } } func ID ( ID { }",
  "func ) ( ) : [ ] int { var ID : [ ] ID while true / - - false - false + ID { } } func ID ( bool { }",
  "func ) ( ) : [ ] int { var ID : [ ] ID while true / - - false - false + ID { } } func ID ( bool { }",
  "func ID ( ID : int , ID : bool , ) : bool ) { var ID : [ ] bool } func ID ( ID { var ID : [ ] int }",
  "func ID ( ID : int , ID : bool , ) : bool ) { var ID : [ ] bool } func ID ( ID { var ID : [ ] int }",
  "func ID ( ID : int , ID : var , ) : bool ) { bool ID : [ ] bool } func ID ( ID { var ID : [ ] int }",
  "func ID ( ) { var ID : bool var ID : int call ID ( ( - 123 false - - * ) ) }",
  "func ID ( ) { var ID : bool var ID : int call ID ( ( - 123 ) - - * ) false }",
  "func ID ( ) { var false : bool var ID : int call ID ( ( - 123 ) - - * ) ID }",
  "func ID ( ID : int } ID : bool , ID : bool ) : int { print 123 * - true + ID ,",
  "func ID ( ID : int } ID : bool , ID , bool ) : int { print 123 * - true + ID :",
  "func ID ( ID : int } ID ID bool , : , bool ) : int { print 123 * - true + ID :",
  "func ID ( ID : [ ( ( - ID [ { - - ( ID ) + true ] [ - ID ] ) ) ] int ) { } func ID ( ) true }",
  "func ID ( } : [ ( ( - ID [ { - - ( ID ) + true ] [ - ID ] ) ) ] int ) { } func ID ( ) true ID",
  "func ID ID ) { var ( : bool while ID ( ( false / - - ID ) ) { } }",
  "func ID ID ) { var ( : bool while ID ( ( false / - - { ) ) ID } }",
  "func ID ID ) { var ( : bool while ID ( ( false / - - { ) ) ID } }",
  "func ID ( ID : - , ID : int , ID : [ ] bool ) { var ID : [ ] [ - - - int false ] bool var ID : bool }",
  "func ID ( ID : - , ID : int , ] : [ ] bool ) { var ID : [ ID [ - - - int false ] bool var ID : bool }",
  "func ID ( ID : - , ID , int : ] : [ ] bool ) { var ID : [ ID [ - - - int false ] bool var ID : bool }",
  "func ID ( ID bool [ - ( - ID / - 123 * ID [ true ] ) ] : ) { }",
  "func ID ( ID bool : - ( - ID / - 123 * ID [ true ] ) ] [ ) { }",
  "func ID ( ID bool : - ( - ID / - 123 * true [ ID ] ) ] [ ) { }",
  "func ID ( ) { { call ID ( ) } ID ( false * ID ID ) [ ID ] [ ( false ) ] / ID ) = ( ( ) } func ID ( ) { }",
  "func ID ( ( { { call ID ( ) } ID ( false * ID ID ) [ ID ] [ ) false ) ] / ID ) = ( ( ) } func ID ( ) { }",
  "func false ( ( { { call ID ( ) } ID ( false * ID ID ) [ ID ] [ ) ID ) ] / ID ) = ( ( ) } func ID ( ) { }",
  "func } ( ) : int { ID = ID ( ID ( ) + false - ID ) if true { ID } func ID ( ) { }",
  "func } ( ) : int { ID = ID ( ID ( ) + false - ID ) if true { ID ) func ID ( } { }",
  "func } ( ) : int { ID = ID ( ID ( ) + false - ID ID if true { ID ) func ) ( } { }",
  "func ID ] ID : int , ID : int ) : bool { var ID : [ ] [ ( bool var ID : [ ] int if false { } } func ID ( ) { }",
  "func ID ] ID var int , ID : int ) : bool { : ID : [ ] [ ( bool var ID : [ ] int if false { } } func ID ( ) { }",
  "func ID ] ID var int , ID : int ) : false { : ID : [ ] [ ( bool var ID : [ ] int if bool { } } func ID ( ) { }",
  ") ID ( ID : [ - ID ( true * ID [ ( ID ) ] [ ID ] * - ( false ) ) ] [ ] int func { }",
  ") ID ( ID : [ - ID ( true * ID [ ( ID ) ] [ ID [ * - ( false ) ) ] ] ] int func { }",
  ") ID ( ID : [ - ID ( true * ID [ ] ID ) ] [ ID [ * - ( false ) ) ( ] ] int func { }",
  "func ID ( ) : [ ] [ 123 - ( ( ID [ } ] [ ID ] ) ) + - ID ] int { ID",
  "123 ID ( ) : [ ] [ func - ( ( ID [ } ] [ ID ] ) ) + - ID ] int { ID",
  "123 ID ( ) : [ ] [ func - ( ( ID ) } ] [ ID ] [ ) + - ID ] int { ID",
  "func ID ( ) : [ ] [ ] bool { var / : int var ID : [ ] int return 123 / ID ID false } func ID ( ) { }",
  "func ID ( ) : [ ] [ { bool ] var / : int var ID : [ ] int return 123 / ID ID false } func ID ( ) { }",
  "func ID { ) : [ ] [ ( bool ] var / : int var ID : [ ] int return 123 / ID ID false } func ID ( ) { }",
  "func false ( ) { ID ( ( ID + true >= - ID ) ) = ID { } }",
  "func false ( ) } ID ( ( ID + true >= - ID ) ) = ID { } {",
  "func ID ( bool : int , ID : [ ] [ ] ID , ID : int ) { var ID : bool print ID ( ) }",
  "func ID ( bool : ID , int : [ ] [ ] ID , ID : int ) { var ID : bool print ID ( ) }",
  "func ID ( bool : ID , , : [ ] [ ] ID int ID : int ) { var ID : bool print ID ( ) }",
  "func ID ( ID : int , ID : bool , ID : [ ID [ true - ) - 123 ) + ( 123 ) ] ] bool ) { } func ID ( ( { }",
  "func ID ( ID : int , ID : bool , ID : [ ID [ true - ) - 123 ) + ( 123 ) ] ] bool ) { } func ID ( ( { }",
  "func ID ( ID : int , ID : bool , ID : [ ID [ true - ) - 123 ) + ( 123 ) ] ] bool ) { } func ID ( ( { }",
  ") ID ( func { } func ID ( ID : [ ID ( ) [ ID ( ( - true ) ) ] [ ( ID ) ] ] [ ] int ) { }",
  ") ID ( func { } func ID ( ID : [ ID ( ) [ ID ( ( - true ) ) ] [ ( ID ) ] ] [ ] int ) { }",
  "func ID ( ID : [ 123 * - - 123 + ( ( true ) ) + 123 ] [ ] [ ] bool ) ( } func ID { ) { }",
  "func ID } ID : [ 123 * - - 123 + ( ( true ) ) + 123 ] [ ] [ ] bool ) ( } func ID { ) { (",
  "func ID } ID : [ 123 * - - 123 + 123 ( true ) ) + ( ] [ ] [ ] bool ) ( } func ID { ) { (",
  "func ID ( ID : bool ) { var ID : [ ID ID 123 * - false - ( 123 ) ] ] [ ] bool var [ : int } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ] ID 123 * - false - ( 123 ) ] ID [ ] bool var [ : int } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ] ID 123 * - false - ( 123 ) ] ID [ ] bool var [ : int } func ID ( ) { }",
  "func ID ( ID : [ - ID ( ) [ 123 } ID ( ) [ ( 123 ) ] / - ( ( - ID ) ) ] ] [ ] bool ) { /",
  "func ID ( ID : [ - ID ( ) [ 123 } ID ( ) [ ( 123 - ] / ) ( ( - ID ) ) ] ] [ ] bool ) { /",
  "func ID ( ID : [ 123 ID ( ) [ - } ID ( ) [ ( 123 - ] / ) ( ( - ID ) ) ] ] [ ] bool ) { /",
  "func ID ( ) { while ID [ true * - - ( - ID ) ] [ ID ] } } {",
  "func ID ( ) { while ID [ true * - - ( - ID ) ] [ ID } ] } {",
  "func ID ( ) { while ID [ true * - - ( - ID { ] [ ID } ] } )",
  "func ID ( ) { { var ID : ] ( ( true * ID ) ) [ int var ID : [ ] [ ] bool } print - 123 } func ID ( ) { }",
  "func ID ( ) { { var ID : ] ( ( true * ID ) ) [ int var ID : [ ] [ ] bool } print - 123 } func ID ( ) { }",
  "func ID ( ) { { var ID : ] ( ( true * ID ) ) [ int var ID : [ } [ ] bool } print - 123 } func ID ( ) { ]",
  "func ID ( ID : [ - ( 123 or 123 + - false ) ( - - - ( ( ( ID ) ) ) - or false ) ] int ) { }",
  "func ID ( ID : [ - ( 123 or 123 + - false ) ( - - ( ( - ( ID ) ) ) - or false ) ] int ) { }",
  "func ID ( ID : [ - ( 123 or 123 + - false ) ( - - ( ( - ( ID ) ) ) - or false ) ] int ) { }",
  "func ID ( ID : int ) : [ ID [ - ( - ID ( - ( false ) ] ) ] [ - [ true ) ] ] int { } func ID ( ) { }",
  "func ID ( ID : int ) : ID ID [ - ( - ID ( - ( false ) ] ) ] [ - [ true ) ] ] int { } func [ ( ) { }",
  "func ID ( ID : int ) : ID ID [ - ( - ID ( - ( false ) ] ) ] [ - ) true [ ] ] int { } func [ ( ) { }",
  "func ID ( ID : bool , ID : ID ( ( true * ID or - ID or [ ) ) ] [ ] bool , ID : int ) { }",
  "func ID ( ID : bool , ID : ID ( ( true * ID or - ID or [ ) ) ] [ ] ) , ID : int bool { }",
  "func ID ( ID : bool , ID : ID ) ( true * ID or - ID or [ ) ( ] [ ] ) , ID : int bool { }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ID ( - - ( ( ( - false ) ) ) ) ] [ ] int var func : [ ] int } ID ID ( ) { }",
  "func ID ( ID : int , ID int bool ) { var ID : [ ID ( - - ( ( ( - false ) ) ) ) ] [ ] : var func : [ ] int } ID ID ( ) { }",
  "func ID ( ID : int , ID int bool ) { var ID : } ID ( - - ( ( ( - false ) ) ) ) ] [ ] : var func : [ ] int [ ID ID ( ) { }",
  "func ID ( ) [ [ ID ( ) : ID ( ) [ ID * - - - true / ( - ID ) ] [ true ] ] ] bool { }",
  "- ID ( ) [ [ ID ( ) : ID ( ) [ ID * - - - true / ( func ID ) ] [ true ] ] ] bool { }",
  "- ID ( ) [ [ } ( ) : ID ( ) [ ID * - - - true / ( func ID ) ] [ true ] ] ] bool { ID",
  "func ID ( ID : int ) : int { var ID : bool { ) ID : [ ] bool while false - - ( ( ID var ) { } } if 123 { } }",
  "func ID ( ID : int ) : int { var ID : bool { ) ID : [ ] bool while } - - ( ( ID var ) { } false if 123 { } }",
  "func ID ( ID : int ) : int { var ID : bool { ) ID : [ ] bool while } - - ( ( ID var ) { } false if 123 { } }",
  "func ID ( ID : int , ID : : , ID bool [ ( ID ( false + - ID ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : : , ID bool [ ( ID ( false + - ID ) ) ] [ ] bool ID { } func ) ( ) { }",
  "func ID ( ID : int , ID : : , ID bool [ ( ID ( false + - ID ) ) ] [ ] bool ID { } { ) ( ) func }",
  "func ID ( ) { while } [ true / ID * - ( 123 ) ] { } print ( false ) ID",
  "func ID ( ) { while } [ true / ID * - ( 123 ) ID { } print ( false ) ]",
  "func ID ( ) { while } [ true / ID * - ( 123 ) ID { } print ( false ) ]",
  "call ID ( ) { var ID : bool func ID ( - ( ID == ID ) ) } func ID ( ) { }",
  "call ID ( ) { var ID : bool func ID - ( ( ID == ID ) ) } func ID ( ) { }",
  "call ID ( ) { var ID : bool func ID - ( ( ID == ID ) ) } func ID ( ) { }",
  "func ID ( ) { call ID ( ) return ID ( ) and true [ ID ] } func ID ( ) { }",
  "func ID ( ) { call ID ( ) return ID ( ) and true [ ID ] } func ID ( ) { }",
  "func ID ( ) { call ID return ) ( ID ( ) and true [ ID ] } func ID ( ) { }",
  "func ID ( ) : [ ] bool true call ID ( ) call ID ( { , true , - - false ) }",
  "func ID ( ) : [ ] bool true call ID ( ) call ID ( { - true , - , false ) }",
  "func ID ( ) : [ ] bool true call ID ( ) call ID ( { - true , - , false ) }",
  "func ID ( ) { var ID : ID var ID : int if ( ( - ( - ID ) ) ) { } } func int ( ) { }",
  "func ID ) ) { var ID : ID var ID : int if ( ( - ( - ID ) ) ) { } } func int ( ( { }",
  "func ID ) int { var ID : ID var ID : ) if ( ( - ( - ID ) ) ) { } } func int ( ( { }",
  "func ID ( ID : int , ID : bool , ID : [ ] int } { var ID : bool var ID : [ ] bool ID ( ) = ID { ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ] int } { var ID : bool var ID : [ ] bool ID ( ) = ID { ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID } [ ] int } { var ID : bool var ID : [ ] bool ID ( ) = ID { ) : func ID ( ) { }",
  "func ID ] ID : [ ] [ - ( - ( ( ( true ) ) ) ) ( int ) { } func ID ( ) { }",
  "func ID ] ID ) [ ] [ - ( - ( ( ( true ) ) ) : ( int ) { } func ID ( ) { }",
  "func ( ] ID ) [ ] [ - ( - ( ( ( true ) ) ) : ID int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ID - ( ( [ ID ] ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : ID , ID : int , bool : [ ID - ( ( [ ID ] ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( bool : ID , ID : int , ID : [ ID - ( ( [ ID ] ) ) ] [ ] int ) { } func ID ( ) { }",
  "ID func ( ID : int , ID : int ) : int { var ID : int var ID : int } func ID ( ) : [ ] int { }",
  "ID func ( ID : { , ID : int ) : int { var ID : int var ID : int } func ID ( ) : [ ] int int }",
  "ID func ( ID : { , ID : int ) : int func var ID : int var ID : int } { ID ( ) : [ ] int int }",
  "func ID ( ) { return } func ID ( ID : int , ID : int ) : [ ] int { while 123 { } } ID ( ) call",
  "func ID ( ) { return } func ID { ID : int , ID : int ) : [ ] int { while 123 ( } } ID ( ) call",
  "func ID ( ) { int } func ID { ID : int , ID : int ) : [ ] return { while 123 ( } } ID ( ) call",
  "func ID ( ID : int , ID : int , ID : [ ( true * - - true * - - ( false ) ) ] [ ] int ) { } func } ( ) { ID",
  "func ID ( ID : int , ID : int , ID : [ ( true ) - - true * - - ( false ) ) ] [ ] int ) { } func } ( * { ID",
  "func ID ( { : int , ID : int , ID : [ ( true ) - - true * - - ( false ) ) ] [ ] int ) ID } func } ( * { ID",
  "func ID ( ID : [ ] [ ] [ ] int , ID : int ) { int : var ID : bool return ID }",
  "func ID ( ID : [ ] [ [ ] ] int , ID : int ) { int : var ID : bool return ID }",
  "func return ( ID : [ ] [ [ ] ] int , ID : int ) { int : var ID : bool ID ID }",
  "func int ( ID : [ ] int , ID : bool , ID : [ - 123 * ( 123 / ID ) ] ID ) { }",
  "func int ( ID : [ int ] , ID : bool , ID : [ - 123 * ( 123 / ID ) ] ID ) { }",
  "func int ( ID ID [ int ] , ID : bool , ID : [ - 123 * ( 123 / ID ) ] : ) { }",
  "func ID ( ) : int { var ID : [ ] bool ID return } if 123 * - ( - ID ) { } } func { ( ) { }",
  "func ID ( ) : int { var ID : [ ] bool ID return } if 123 * - ( - ID ) { } } func { ( ) } {",
  "func ID ( ) : int { var ID : [ ] bool ID return } if 123 * - ) - ID ( { } } func { ( ) } {",
  "func ID ( ) { var ID [ [ ] int } func ID ( ID : bool ) { var ID : : - false ] bool }",
  "func ID ( ) { var ID [ [ ] int } func ID ( ID : bool ) { var ID : : - false ] bool }",
  "func ID ( ) { var ID : ] { { var ID : [ - 123 / ( - - ( ( - false ) ) ) ] [ bool int } } }",
  "} ID ( ) { var ID : ] { { var ID : [ - 123 / ( - - ( ( - false ) ) ) ] [ bool int } func }",
  "} ID func ) { var ID : ] { { var ID : [ - 123 / ( - - ( ( - false ) ) ) ] [ bool int } ( }",
  "func ID ( ID ) int , ID : bool ) { ID ( : [ - - - 123 and ID ] = false }",
  "func ID ( ID : int , ID ) bool ) { ID ( : [ - - - 123 and ID ] = false }",
  "- ID ( ID : int , ID ) bool ) { ID ( : [ func - - 123 and ID ] = false }",
  "while ID ( ) { ID ( - true - ID [ true * false ] [ - ID ] + - 123 ) = 123 func ( false ) { } }",
  "while ID ( ) { = ( - true - ID [ true * false ] [ - ID ] + - 123 ) ID 123 func ( false ) { } }",
  "while ID ( ) { = ( - true - ID [ true * false ] [ - ID ] + - 123 ) ID 123 func ( false ) { } }",
  "func ID ( ) > int { var ID : [ - ( ( false : ID ) ) ] [ ] [ ] int var ID : [ ] bool }",
  "func ID ( ) > int { var ID : [ - ( ( false : ID ) ) ] [ ] [ ] int var [ : ID ] bool }",
  "func ID ( ) > var { int ID : [ - ( ( false : ID ) ) ] [ ] [ ] int var [ : ID ] bool }",
  "func ID ( ) : [ ] int { var ID : [ ] ) { } call ID ( ( false ) int } func ID ( ) { }",
  "int ID ( ) : [ ] int { var ID : [ ] ) { } call ID ( ( false ) func } func ID ( ) { }",
  "int ID ( ) : [ ] int { var ID : [ ] ) { } false ID ( ( call ) func } func ID ( ) { }",
  "func ID ( ) { [ ID ( true / - - 123 / - ( ID [ ID ] call ID ] ) ) } func ID ( ) { }",
  "func ID ( ) { [ ID ( true / - - 123 / - ( ID [ ( ] call ID ] ) ) } func ID ID ) { }",
  "} ID ( ) { [ ID ( true / - - 123 / - ( ID [ ( ] call ID ] ) ) } func ID ID ) { func",
  "( ID ( ) { var ID : int var ID : bool while ID ( ) [ false * ( false ) / ( ( ID ) ) ] [ false ] { } if - ( func ID ) ) { } } func ID ( ) { }",
  "( ID ( ) { var ID : int var ID : bool while ID ( ) [ false * ( ID ) / ( ( ID ) ) ] [ false ] { } if - ( func ID ) ) { } } func false ( ) { }",
  "( ID ( ) { var [ : int var ID : bool while ID ( ) ID false * ( ID ) / ( ( ID ) ) ] [ false ] { } if - ( func ID ) ) { } } func false ( ) { }",
  "ID ID ( ID : bool ) : bool { var func : bool var ID : [ 123 / ( - - - ( 123 ) ) * ( true ) ] int } func ID ( ) { }",
  "ID ID ( ID : bool ) : bool { var func : bool var ID : [ 123 / ( - - - ( 123 ) ) * ( true ) int ] } func ID ( ) { }",
  "func ID ( ) ] int { var ID : bool var ID : [ : bool }",
  "func ID ( ) ] int { var bool : ID var ID : [ : bool }",
  "func ID ( ) ] int { var bool : ID var ID : [ bool : }",
  "func , ( ID : int ID ID : [ ] [ - - - - 123 / false and false and - ( ( 123 ) ) ] [ ] int , ID : [ ] bool ) { } func ID ( ) { }",
  "func , ( ID : int ID ID : [ ] [ / - - - 123 - false and false and - ( ( 123 ) ) ] [ ] int , ID : [ ] bool ) { } func ID ( ) { }",
  "func , ( ID : int ID ID : [ ] [ / - - - 123 - false [ false and - ( ( 123 ) ) ] [ ] int , ID : and ] bool ) { } func ID ( ) { }",
  "( ID ( ) { var ID : int call ID func ) if true - false <= true or - - ( ( ( false ) ) ) { } }",
  "( ID ( ) { var or : int call ID func ) if true - false <= true ID - - ( ( ( false ) ) ) { } }",
  "( ID ( ) { var or : int call ID func ) if true - false <= ( ID - - ( ( true false ) ) ) { } }",
  "func ID ( ID : int , ID : int , ID : int { { call ID ( ) } func ID ( ) ) var ID : int var ID : bool }",
  "func ID ( ID : : , ID : int , ID : int { { call ID ( ) } func ID ( ) ) var ID : int var ID int bool }",
  "func ( ( ID : : , ID : int , ID : int { { call ID ID ) } func ID ( ) ) var ID : int var ID int bool }",
  "func ID bool ID : ( , ID : [ ID ( ID ( ) / - ID ( ) * - ( ID ) ) ] int , ID : [ ] int ) { }",
  "func ID bool ID : ( ] ID : [ ID ( ID ( ) / - ID ( ) * - ( ID ) ) ] int , ID : [ , int ) { }",
  "func ID bool ID : ( ] ID : [ ID ( ID ( ) / - ID ( ) : - ( ID ) ) ] int , ID * [ , int ) { }",
  "func ID ( ID : int , ( : [ ] [ ] bool , ID : [ false - - ID ID - ID ) + true ] [ ] int ) { }",
  "func ID ( ID : int , ( : [ ] [ ] bool , [ : [ false - - ID ID - ID ) + true ] ID ] int ) { }",
  "func ID ( ID : int , ( : [ ] [ ] bool , [ : [ false - - ID ID ) ID - + true ] ID ] int ) { }",
  "* ID ( ) : int { while ID [ - 123 func ID [ - 123 ] / ID ] { } }",
  "* ID ( { : int ) while ID [ - 123 func ID [ - 123 ] / ID ] { } }",
  "* ID ( { : int } while ID [ - 123 func ID [ - 123 ] / ID ] { ) }",
  ": ID ( ) func [ ] bool { return ID ( ) [ - ( ID ) ] [ ( ( ID ) ) ] } func ID ( ) { }",
  ": ( ( ) func [ ] bool { return ID ( ) [ - ( ID ) ] [ ID ( ID ) ) ] } func ID ( ) { }",
  ": ( ( ) ( [ ] bool { return ID ( ) [ - ( ID ) ] [ ID ( ID ) ) ] } func ID func ) { }",
  "func ID ( ID : [ ( - - ID ( ID ( ) ( ( [ false ) ) ] ) ) ] int ) { }",
  "func ID ( ID : [ ( - - ID ( ] ( ) ( ( [ false ) ) ] ) ) ID int ) { }",
  "false ID ( ID : [ ( - - ID ( ] ( ) ( ( [ func ) ) ] ) ) ID int ) { }",
  "func ID ( return : bool ) : int { var ID : bool ID ( 123 / false / ( true ) ) }",
  "func ID ( return : bool ) : ID { var ID : bool int ( 123 / false / ( true ) ) }",
  "func ID ( return : bool ) : ID { ID var : bool int ( 123 / false / ( true ) ) }",
  "func int ( ) { var ID : [ ] ID var ID : [ ] bool if ID [ ( - ( ( - ID ) ) ) ] { } } func ID ( ) { }",
  "func int ( ) { var ID : [ ] ID var ID : [ ] bool if ID [ ( - ( ( - ID ) ) ) ] { } } func ID ( ) { }",
  "func int ( ) { var ID : [ ] ID var ID : [ ] bool if ID [ ( - ( ( - ID ) ) ) ] { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int [ : ) false > - true / false and ( ID ) and ID ] [ ] int { }",
  "func ID ( ID : ID , int : int , ID : int [ : ) false > - true / false and ( ID ) and ID ] [ ] int { }",
  "func ID ( ID : ID , int : int [ ID : int , : ) false > - true / false and ( ID ) and ID ] [ ] int { }",
  "func ID ( ID : [ , ID : int ] bool , ID : int ) : [ ] int { while true * ID { } ID = ID }",
  "func ID ( ID : [ , ID : int ] bool , ID : int int : [ ] ) { while true * ID { } ID = ID }",
  "func ID ( ID : [ , ID : int ] bool , ID : int int : [ ] ) { while ID * ID { } ID = true }",
  "func ID ) ID : [ ] int , ID : int ( { var ID : int var ID : [ ( false ) ] [ ] bool } func ID ( ) { }",
  "func ID ) ID : [ ] int , ID { int ( { var ID : int var ID : [ ( false ) ] [ ] bool } func ID ( ) : }",
  "func ID ) ID : [ ] int , ID { int ( ( var ID : int var ID : [ { false ) ] [ ] bool } func ID ( ) : }",
  "{ ID ( ID : bool ) : int { while 123 - ID ( - - ( ( ( false ) ) ) ) { } } func ID ( ) func }",
  "{ ID ( ID : int ) : bool { while 123 - ID ( - - ( ( ( false ) ) ) ) { } } func ID ( ) func }",
  "{ ID ( ID } int ) : bool { while 123 - ID ( - - ( ( ( false ) ) ) ) { : } func ID ( ) func }",
  "func ID ( ) { if ( ( ID ) ) [ 123 ] ) ( { } ID = false }",
  "func ID ( ) [ if ( ( ID ) ) { 123 ] ) ( { } ID = false }",
  "if ID ( ) [ func ( ( ID ) ) { 123 ] ) ( { } ID = false }",
  "func ID ( ) : [ } int { var ID : int var ID : bool ]",
  "func : ( ) : [ } int { var ID : int var ID ID bool ]",
  "func : ( ) : [ } int ID var ID : int var { ID bool ]",
  "func ID ( ) : bool { var ID : [ ( ( 123 / - [ * ID ) ) ] [ ] [ ] ID ] bool var ID : [ ] [ ] [ ] int }",
  "[ ID ( ) : bool { var ID : func ( ( 123 / - [ * ID ) ) ] [ ] [ ] ID ] bool var ID : [ ] [ ] [ ] int }",
  "[ ID ( ) : bool { var ID : func ( ( 123 / - [ * ID ) ] ] [ ) [ ] ID ] bool var ID : [ ] [ ] [ ] int }",
  "func ID ( ) { var ID : [ ( 123 * 123 - ( ( - ( [ ID ) ) ) ) ] [ ] [ ] [ ] - ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( 123 * [ - ( ( - ( 123 ID ) ) ) ) ] [ ] [ ] [ ] - ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( 123 * [ - ( ( - { 123 ID ) ) ) ) ] [ ] [ ] [ ] - ] int } func ID ( ) ( }",
  "func ID ( [ { ID ) - ID * ID [ false / ( false ) ] [ - true ] ] = 123 }",
  "func ID ( [ { ID ) - ID * ID [ false / ( false ] ] [ - true ) ] = 123 }",
  "func ID ] ) : [ ( [ ID [ ID ( ( - false ) ) ] ] bool { } func ID ( ) { }",
  "func ID ] ) : [ ( [ bool [ ID ( ( - false ) ) ] ] ID { } func ID ( ) { }",
  "func ID ] ) } [ ( [ bool [ ID ( ( - false ) ) ] ] ID { : func ID ( ) { }",
  "func ID ( ID : int , ID : [ - - false and 123 * ID ] - true and true * int ) { }",
  "func ) ( ID : int , ID : [ - - false and 123 * ID ] - true and true * int ID { }",
  "func ) ( ID : int , ID : [ - - false and * 123 ID ] - true and true * int ID { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : } int",
  "func ID ( ID : int , ID : int , ID : int ID { var ) : } int",
  "func ID ( ID : int , ID : ID , ID : int int { var ) : } int",
  "func ID ( ID : bool , ID : int ) { var : : int var ID ID bool } func ID ( ) : int { }",
  "func ID : ID : bool , ID : int ) { var : : int var ID ID bool } func ID ( ) ( int { }",
  ": ID : ID : bool , ID : int ) { var func : int var ID ID bool } func ID ( ) ( int { }",
  "func : ( ID ID int ) : int { var ID : bool { var ID : bool return ID ( ( false ) ) } } func ID ( ) { }",
  "func : ( ID ID int ) { int { var ID : bool : var ID : bool return ID ( ( false ) ) } } func ID ( ) { }",
  "func : } ID ID int ) { int { var ID : bool : var ID : bool return ID ( ( false ) ) } ( func ID ( ) { }",
  ": ID ( ) { } func ID ( ) { var ID func bool return - true / 123 / - - - ID }",
  ": ID ( ) { } func ID ( var { ) ID func bool return - true / 123 / - - - ID }",
  ": bool ( ) { } func ID ( var { ) ID func ID return - true / 123 / - - - ID }",
  "func ID ( ID : int , ID : bool ) : int { var ID : int { } ID : int } } func ID ( ) { var",
  "func ID ( ID : int , ID : bool ) : int { var ID : ID { } int : int } } func ID ( ) { var",
  "func ID ( ID : int , ID int bool ) : int { var ID : ID { } : : int } } func ID ( ) { var",
  "func ID ( ) : bool { { var { : bool var ID : int return - - 123 / - ID } } func ID ( ) ID }",
  "func ID ( ) : bool } { var { : bool var ID : int return - - 123 / - ID } } func ID ( ) ID {",
  "func ID ( ) : bool } { var { : bool ( ID : int return - - 123 / - ID } } func ID var ) ID {",
  "func ID - ) { call ID ( ID * - ( - - ( - - - ID ) * ID ) { } }",
  "func ID - ) { call ID ( ID * - ( - - ( - } - ID ) * ID ) { - }",
  "func ID ( ID : int , { : bool ) { var ID : bool { var ID : bool while false / - false { } ID = ( ID ) } ID } } func ID ( ) { }",
  "func ID ( ID : int , { : bool ) { var ID : bool { var ID : bool while false / - false { } ID = ) ID ) } ID } } func ID ( ( { }",
  "func ID ( ID : int , { : bool ) { var ID : bool { var ID : bool while false / - false { } ID = ) ID ) } ID } } func ID ( ( { }",
  "func ID ( ID : int ) { ID } ( 123 == 123 * - ID / - ID ) ) = ( ID ) { ( } func ID ( ) { }",
  "func ID ( / : int ) { ID } ( 123 == 123 * - ID ID - ID ) ) = ( ID ) { ( } func ID ( ) { }",
  "func ID ( / : - ) { ID } ( 123 == 123 * - ID ID int ID ) ) = ( ID ) { ( } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : bool , ID : bool ( : [ - ) ( - true ) ) ] [ ] bool { }",
  "func ID ( ID : [ ] [ ] bool , true : bool , ID : bool ( : [ - ) ( - ID ) ) ] [ ] bool { }",
  "func ID ( ID : [ ] bool ] bool , true : [ , ID : bool ( : [ - ) ( - ID ) ) ] [ ] bool { }",
  "func ID ( ) ID var ID : bool { return ID [ { [ ID ] [ true ] ] [ ID ] } }",
  "func ID ( ) ID var ID : bool { return ID true { [ ID ] [ [ ] ] [ ID ] } }",
  "func ID ( ) ID var ID : bool { return ID true { [ ID ] } [ ] ] [ ID ] } [",
  "func ID ( ) : : { var ID : int { var ID bool [ ] int return } return ( ( - ID ) ) }",
  "func { ( ) : : { var ID : int ID var ID bool [ ] int return } return ( ( - ID ) ) }",
  "func { ( ) : : } var ID : int ID var ID bool [ ] int return { return ( ( - ID ) ) }",
  "func ID ( ID : bool ) : int { int ID : bool var ID : int { var ID : [ ] var call ID ( ) call ID ( ) } } func ID ( ) { }",
  "func ID ( ID : bool ) : int { int ID : bool var ID : int { var ID : [ ] var call ID } ) call ID ( ) } } func ID ( ) { (",
  "func ID ( ID : bool ) : int { int } : bool var ID : int { var ID : [ ] var call ID } ) call ID ( ) } ID func ID ( ) { (",
  "func ID ( ) : int { var ID : int print - true / - ID ] ) [ ( ( - - ID ) ) ( * 123 }",
  "func ID int ) : ( { var ID : int print - true / - ID ] ) [ ( ( - - ID ) ) ( * 123 }",
  "func ID int ) } ( { var ID : int print - true / - ID ] ) [ ( ( - - ID ) ) ( * 123 :",
  "func ID ( [ : ) ] [ 123 + true / false / - false - - ( - ( ID ) ) ] bool { }",
  "func ID ( [ : ) ] [ 123 + - / false / - false - true ( - ( ID ) ) ] bool { }",
  "func ID ( [ : ) ] [ 123 + - / false / - false - true ( - ( ID ) ) ] bool { }",
  "func ID ( ) : bool { : ID var [ ] [ ] bool return - - false - - - false } func ID ( ) { }",
  "func ID ( ) : bool { : ID var [ ] [ } bool return - - false - - - false } func ID ( ) { ]",
  "func ID ( ) : bool { [ ID var [ ] : } bool return - - false - - - false } func ID ( ) { ]",
  ": ID ( ID func bool ) { var ID : int call ID ( false != ( - ID ) ) print true }",
  ": ID ( ID func bool ) { var ID : int call ID ( false != ( - ID ) ) } true print",
  "func ID ( ID : int , ID : int , ID : bool ID { var ID : [ ( ( false + ID + - ID ) ) ] bool } func ) ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ID { var ID : [ ( ( false + ID ) - ID ) ) ] bool } func ) ( + { }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ID : bool { ID [ - ID ] = ID ID = ( ( false ) } } func ID - ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) { ] ID : bool { ID [ - ID var = ID ID = ( ( false ) } } func ID - ) { }",
  "func ID ( ID : [ ID - ID ( ) [ ( { false ) ] [ false ] ] int ) { } func ID ( ) - }",
  "func ID ( ID : [ ID - ID ( ) [ ( { false ) ] [ false ] ] int ) { - func ID ( ) } }",
  "func ID ( ID : [ ID - ID ( ) [ ( { false [ ] ) false ] ] int ) { - func ID ( ) } }",
  "func ID ( { : [ ID ( ) [ ( ( 123 / true * true ) ) ] ] int ) } func ID ( ) { }",
  "func ID ( { : [ ID ( ) [ ( ( 123 / true * true ) ) ] ] int ) } func ID ( ) { }",
  "func ID ( { : [ ID ( ) [ / ( 123 ( true * true ) ) ] ] int ) } func ID ( ) { }",
  "func ID ( ID : bool ) : [ { var ID : int return ID bool - ID [ ID ] [ ( ( - - ( - ID ) ) ) ] ] [ ( - - ( false ) ) ] } func ID ( ) { }",
  "func var ( ID : bool ) : [ { ID ID : int return ID bool - ID [ ID ] [ ( ( - - ( - ID ) ) ) ] ] [ ( - - ( false ) ) ] } func ID ( ) { }",
  "func var ( ID : bool ) : [ { ID ID : func return ID bool - ID [ ID ] [ ( ( - - ( - ID ) ) ) ] ] [ ( - - ( false ) ) ] } int ID ( ) { }",
  "func ID ( ID ( bool , ID : bool , ID : [ ] int ) : int { var ID : [ : true ) ] bool var ID : [ ] int }",
  "func ID ( ID ( bool , ID : bool , ID : [ ] int ) : int { var ID : [ : true ) ] bool var ID : [ ] int }",
  "func ID ( ID ( bool , ID : bool , ID : [ ] int ) [ int { var ID : [ : true ) ] bool var ID : : ] int }",
  "func ID ( ID : [ ID ( 123 / - ID [ - ( } true ) ) ] ) ] bool ) { } func ID ( ) { (",
  "func ID ( ID : [ ID ( 123 / - ID [ - ( } true ) ) ] ) ] bool ) { } func ID ( ) { (",
  "func ID ( ID : [ ID ( 123 ( - ID [ - ( } true ) ) ] ) ] bool ) { } func ID ( ) { /",
  "func ID ( ) { if ID / - 123 ( / ID [ 123 ] ) { } { } }",
  "func ID ( ) { if ID / - 123 ( / ID [ 123 } ) { } { } ]",
  "func ID ( ) { if ID / - 123 ( / ID [ 123 } ) { } { } ]",
  "func ID ( } : [ - 123 * ID ] [ ] bool , ID : int ) { return true ID func ID ( ) { }",
  "func ID ( } : [ - 123 * ID ] [ int bool , ID : ] ) { return true ID func ID ( ) { }",
  "func ID ( } : [ - ) * ID ] [ int bool , ID : ] 123 { return true ID func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : ] return } func ID ( ) { var ID : [ - ( 123 ) int [ ] bool var ID : [ ] bool }",
  ") ID ( func { var ID : bool var ID : ] return } func ID ( ) { var ID : [ - ( 123 ) int [ ] bool var ID : [ ] bool }",
  ") ID ( func { var ID : : var ID : ] return } func ID ( ) { var ID : [ - ( 123 ) int [ ] bool var ID bool [ ] bool }",
  "func ID ( ) { return false * ID - [ 123 - ID ( ) ] }",
  "func ID ( ) ID return false * { - [ 123 - ID ( ) ] }",
  "func ID ( ID ) int , ID : int : : bool { { if ( ID ( ) ) { } } }",
  "func ID ( ID ) int , ID : int : : bool { { if ( ID ( ) { ) } } }",
  "func ID ( ID ) int ) ID : int : : bool { { if ( ID ( , { ) } } }",
  "func ID ( ) : [ ] [ ( - true / - true / ] ID ) ) ( int { } func ID ( ) { }",
  "func ID ( ) : [ ] [ ( - true / - true / ] ID ) } ( int { } func ID ( ) { )",
  "func - ( ) : [ ] [ ( ID true / - true / ] ID ) } ( int { } func ID ( ) { )",
  "func ID ( ) { var ID : bool var ID : [ { ( ) * ID ( ( ID ) ) / ID ] int } func ID ( ) ID }",
  "func ID ( ) { var / : bool var ID : [ { ( ) * ID ( ( ID ) ) ID ID ] int } func ID ( ) ID }",
  "func ID ( ) { var ID ) bool return ( true / - false / - 123 <= ( ( ( true ) : ) ) } func ID ( ) { }",
  "func ID ( ) { var ID ) bool return ( true / - false / - 123 <= ( ( ( true ) : ) } ) func ID ( ) { }",
  "( ID ( ) { var ID ) bool return ( true / - false / - 123 <= ( func ( true ) : ) } ) func ID ( ) { }",
  "func ID ( ID ) [ - 123 / - ( 123 * ( ID : / true ) ] bool ) { }",
  "bool ID ( ID ) [ - 123 / - ( 123 * ( ID : / true ) ] func ) { }",
  "bool ID ( ) ) [ - 123 / - ( 123 * ( ID : / true ) ] func ID { }",
  "func ID ( ) ID int { var : : int var ID : bool print ( ID ( - ( - - ( - - true ) ) ) ) print - - ID }",
  "func ID ( ) ID int { ) : : int var ID : bool print ( ID ( - ( - - ( - - true ) var ) ) print - - ID }",
  "func ID ( ) ID int { ) : : int var ID : bool print ( ID ( ( ( - - - - - true ) var ) ) print - - ID }",
  "func ID ( ID : [ ] bool , ID : [ ( ID * ID ( ( true ) ) / false ) ] bool , 123 : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ( ID * ID ( ( / ) ) true false ) ] bool , 123 : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ( ID * ID ( ( / ) ) true false ) ] bool , 123 : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID ) [ ID ( ID ( : or true or - 123 ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID ) [ ID ( ID ( : or true or - bool ) ] 123 } func ID ( ) { }",
  "func { ( ) ID var ID ) [ ID ( ID ( : or true or - bool ) ] 123 } func ID ( ) { }",
  "func ID ( true : bool , ID : int ) : bool { call ID ( 123 + ID ( ( ID ) ) ) while false { } } func ID ( ) { }",
  "func ID ( true : bool , ID : int ) : bool { call ID ( 123 + ID ( ( ID ) ) ) while false { } } func ID ( ) { }",
  "func ID ( true : bool , ID : int ) : bool { while ID ( 123 + ID ( ( ID ) ) ) call false { } } func ID ( ) { }",
  "] ID ( ) : [ - ID ( true / ( - ID ( ) ) / 123 ) ] [ func bool { } func ID ( ) { }",
  "] ID ( ) : [ - ID ( true / ( - ID [ ) ) / 123 ) ] ( func bool { } func ID ( ) { }",
  "func ID ( ID : int ) : bool { ( ID : bool return true / ID ( - - var false ) ) / - - ( ( ID ) ) }",
  "func ID ( ID : int ) : ) { ( ID : bool return true / ID ( - - var false ) ) / - - ( ( ID bool ) }",
  "func ID ) ID : int ) : ) { ( ID : bool return true / ID ( - - var false ( ) / - - ( ( ID bool ) }",
  "func ID ( ) - var ID : int ID = - false + false > false or - - - ( ( ( { ID ) ) ) or true call ID ( ) } func ID ( ) { }",
  "func ID ( ) - var ID : int ID = - false + false > false or - - - ( ( ( { ID ) ) ) or true call ID ( ) } func ID ( ) { }",
  "func ID ( ) - var ID : int ID = - false + - > false or false - - ( ( ( { ID ) ) ) or true call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool var ID : int print - - true / ( ID ) while ( ( ( ( ( - - ID { ) ) ) ) { } } func ID ( ) ) }",
  "func ID ( ID : int ) { var ID : bool var ID : int print - - true / ( ID ) while ( ( ( ( ( - - ID { ) ) ) ) { ID } func } ( ) ) }",
  "func ID ( ID : int ) { var ID : bool var ID : ) print - - true / ( ID ) while ( ( ( ( ( - - ID { ) int ) ) { ID } func } ( ) ) }",
  "{ ID ( ) : [ - true / ID [ ( true + - true ) ] [ ID ] ] int func }",
  "{ ID ( ) : [ - ) / ID [ ( true + - true true ] [ ID ] ] int func }",
  "{ ID ( ) : [ - ) / ID [ ( true + - true true ] [ ] ] ID int func }",
  "func ID ( ) { var ID : int var ID : { ] [ ] [ false * - - ( 123 ) ] bool } func ID ( ) [ }",
  "func bool ( ) { var ID : int var ID : { ] [ ] [ false * - - ( 123 ) ] ID } func ID ( ) [ }",
  "func bool ( ) { var ID : int var ID : { ] [ ] [ false * } - ( 123 ) ] ID - func ID ( ) [ }",
  "func ID ( ID : [ ] bool , ID : [ true / 123 ) ( ID ( / ) ] int , ID : int ) { }",
  "func ID ( ID : [ ] bool , ID : [ true / 123 ) ( ID ( / ) ] int , ID : int ) { }",
  "func ID ( ID : [ ] bool , ID : [ true / 123 ) ( ID ( ) / ] int , ID : int ) { }",
  "func ID ( ID : [ } true * ID - 123 + ID [ true ] ) ] [ ] [ ] [ ] [ ] int ) { } func ID ( ) { (",
  "func ID ( ID : [ } true * ID - 123 [ ID + true ] ) ] [ ] [ ] [ ] [ ] int ) { } func ID ( ) { (",
  "func ID ( ID : [ } true * ID - 123 [ ID + true ] ) ] [ ] [ ] [ ] [ ] int ( { } func ID ( ) { )",
  "func ID ( ID * [ true * ID [ 123 : ( ( - - false ) ) ] ] int ) { }",
  "func ( ( ID * [ true * ID [ 123 : ( ID - - false ) ) ] ] int ) { }",
  "func ( ( ID * [ true * ID [ ] : ( ID - - false ) ) 123 ] int ) { }",
  "func ID ( ) { } func ID ( ID : bool , ID : int , ID : [ ] int ) { ] ID : [ true ] [ var int var ID : bool }",
  "func ID ( ) { } func ID ( ID : bool , : ID int , ID : [ ] int ) { ] ID : [ true ] [ var int var ID : bool }",
  "func ID ( ) { } func ID ( ID : bool , : ID int , ID : [ ] int ) { ] ID : [ true ] [ var int var ID : bool }",
  "func ID ( ) : [ ] [ ] [ - ) ( - - 123 * false ID ] [ ] int { }",
  "func ID ( ) : [ ] [ ] [ - ) ( - - 123 * false ID ] [ ] int { }",
  "func ID ( ) : [ ] [ ] [ - ) ( - - 123 * false ID ] [ ] int { }",
  "func ID ( ID : [ ] [ [ false / ( ID ( ) - ( ID ) ] ) ] int ) { } func ID ( ) { }",
  ": ID ( ID func [ ] [ [ false / ( ID ( ) - ( ID ) ] ) ] int ) { } func ID ( ) { }",
  ": ID ( ID func [ ] [ [ false / ( ID ( ) - ( ID ) ] ) ] int ) { } func ID ( ) { }",
  "] ID ( ID : bool ) { var ID : [ func int var ID : [ ] bool while ID ( ) - - ( ID ) { } }",
  "] ID ( ID : bool ) { var ID : [ func int var ID : [ ] bool while ID ( ) - - ( ID ) { } }",
  "] ID ( ID : bool ) { var ID : [ func int var ID : [ ] bool while ID ( ) - - ( ID { ) } }",
  "func ID ( ID : int , ID : ] false + ID [ ( - false ) ] - - ( - ( ( ID ) ) ) [ [ ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ID : int , ID : ] false + ID [ ( - false ) ] - { ( - ( ( ID ) ) ) [ [ ] [ ] [ ] [ ] bool ) - }",
  "func ID ( ID : bool , ID : int ) { while - - ( false * ID ( ) ) } } {",
  "func ID ( ID : bool , ID : int ) { while - - ID false * ( ( ) ) } } {",
  "func ID ( ID : bool , ID : int ) { while - } ID false * ( ( ) ) - } {",
  "func ID ( ) { var ID : [ ID ( - [ - - - - false / ID ] [ - ) - ( true ) ] ] [ ] [ ] int var ID : int } func ID ( ) { }",
  "int ID ( ) { var ID : [ ID ( - [ - - - - false / ID ] [ - ) - ( true ) ] ] [ ] [ ] int var ID : func } func ID ( ) { }",
  "[ ID ( ) { var ID : int ID ( - [ - - - - false / ID ] [ - ) - ( true ) ] ] [ ] [ ] int var ID : func } func ID ( ) { }",
  "func bool ( ID : ID , ID : [ ] bool , ID : int ) { }",
  "func ID ( ID : ID , ID : [ ] bool , bool : int ) { }",
  ": ID ( ID : ID , ID : [ ] bool , bool func int ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ] int ) { } func bool ( ) : ID { ID = - - ID if ( ID ) { } }",
  "func ID ( ID : bool , ID : int , ID : [ ] int ) { } func bool ( ) : ID { ID = - - ID if ( ID ) { } }",
  "func ID ( ID : bool , ID : int , ID : [ ] int ) { } func bool ( ) : ( { ID = - - ID if ID ID ) { } }",
  "func ID ( ) { while ) * ID ( ID ( - - true ) ) { } print ( false true }",
  "func ID ( ) { while ) ID ID ( * ( - - true ) ) { } print ( false true }",
  "func ID - ) { while ) ID ID ( * ( - ( true ) ) { } print ( false true }",
  "func ID ( ID : [ ] [ ] [ ] [ 123 - 123 + ( ( ) - 123 ) - ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] ) ] [ 123 - 123 + ( ( ) - 123 ) - ] int [ { } func ID ( ) { }",
  "func ID ( ID ( [ ] [ ] ) ] [ 123 - 123 + ( : ) - 123 ) - ] int [ { } func ID ( ) { }",
  "func ID ( ID ) [ ] bool , ID : [ ID ( ID ( ID : ) ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ID ) [ ] bool ID ID : [ ID ( , ( ID : ) ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ID ) [ ] bool ID ID int [ ID ( , ( ID : ) ] bool , ID : : ) { } func ID ( ) { }",
  "func { ( ID : int ) { var ID : int { var ID : int while ID ( ID ) { } while true ID } } } func ID ( ) { }",
  "func { ( ID : int ) { ) ID : int { var ID : int while ID ( ID ) { } while true ID } } } func ID ( var { }",
  "func ID ( ID : bool ) : int { var ID : bool var ID : ) true + ( ( - true ) [ ] bool }",
  "func ID ( ID : bool ) : int { var ID : bool var ID : ) true + ( ( - true ) [ ] bool }",
  "func ID ( var : bool ) : int { var ID : bool ID ID : ) true + ( ( - true ) [ ] bool }",
  "func ID ( ) : [ ] [ - - ID ( ID [ - } ] ) ] int { true",
  "func ID ( ) : - ] [ [ - ID ( ID [ - } ] ) ] int { true",
  "func ID ( ) : - ] [ [ - ID ( ID [ - } ] ) ] int { true",
  "func ID ( ID : [ ] int , ID : int , ID : bool ) } var ID : int ID [ ID ] = ( - ( ( ( ( false ) ) ) ) ) { func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : bool ) } var ID : int ID [ ID ] = ( - ( ( ( ( false ) ) ) ) ) { func ID ( ) { }",
  "func ID ( ID : [ ] int , int : int , ID : bool ) } var ID : ID ID [ ID ] = ( - ( ( ( ( false ) ) ) ) ) { func ID ( ) { }",
  "func ID ( ) { var ID : bool call ID ( ) } ) ID ( ) : [ 123 / ( - ID func ] int { }",
  "func ID ( ) { var ID : bool call ID ( ) } ) ID ( ) : [ 123 / ( - ID func } int { ]",
  "func ID ( ) { var ID : bool call ID ( ) } [ ID ( ) : ) 123 / ( - ID func } int { ]",
  "func ID ( ID : bool ) ID : int , ID : [ ] bool ) { var ID : int return ( ID , }",
  "func ID ( ID : bool ) int : ID , ID : [ ] bool ) { var ID : int return ( ID , }",
  "func ID ( ID : bool ) int : ID , ID : [ ] bool ) { var ID : int return ( ID , }",
  "func ID ( ) { if ID ( ] / - 123 * - ID [ 123 123 [ true ] ) { } }",
  "func ID ( ) - if ID ( ] / { 123 * - ID [ 123 123 [ true ] ) { } }",
  "func ID ( ) - if ID ( ] / { 123 * - ID [ 123 123 [ } ] ) { true }",
  "func ID ( ) { ( false <= ID print ) [ - true * - ID ] }",
  "func ID ( ) { ( false <= ID print ) [ - true * - ID ] }",
  "func ID ( ) - ( false <= ID print ) [ { true * - ID ] }",
  "func ) ( ID { var ID : int var ID : int if - - 123 + ID ( ) [ ( ( ( ( - 123 ) ) ) ) ] + ID { } ID = 123 }",
  "func ) ( ID { var ID : + var ID : int if - - 123 + ID ( ) [ ( ( ( ( - 123 ) ) ) ) ] int ID { } ID = 123 }",
  "func ) ( ID { var ID { + var ID : int if - - 123 + ID ( ) [ ( ( ( ( - 123 ) ) ) ) ] int ID : } ID = 123 }",
  "func ID ( ) { var ID : bool call ID ( ) ID [ - ( ( ID ) ) ] [ false } = - - ID ]",
  "- ID ( ) { var ID : bool call ID ( ) ID [ - ( ( ID ) ) ] [ false } = func - ID ]",
  "- ID ( ) { func ID : bool call ID ( ) ID [ - ( ( ID ) ) ] [ false } = var - ID ]",
  "func ID ( ID : int , ID : [ - ( false + ID ( true func - - - 123 ) ] int , ID : bool ) { } ) ID ( ) { }",
  "func ID ( ID : int , ID : [ - ( false + ID ( true func - - - 123 ) } int , ID : bool ) { } ) ID ( ) { ]",
  "func ID ( ID : int , ID : [ - ( false - ID ( true func - + - 123 ) } int , ID : bool ) { } ) ID ( ) { ]",
  "func ID ( ) : int { var ID : bool var ID : ( while 123 * - ( - false ) / int - ( false ) ) { } call ID ( ) }",
  "func ID ( ) : int { var ID : bool var ID : ( while 123 * int ( - false ) / - - ( false ) ) { } call ID ( ) }",
  "func ID ( ) { if ) * ID ( - - ID ( ( ID false ) ) * - ID { } } func ID ( ) { }",
  "func ID ( ) { if ) * ID ( - - ID ( ( ID false ) ) * - ID { } } func ID ( ) { }",
  "func ID ( ) { if ) * ID ( - - ID ( ( ID false } ) * - ID { ) } func ID ( ) { }",
  "func ID ( ID : int ) { while - ( ( true * false and - - ( 123 ) and - } - 123 ) ) { } } func ID ( ) { -",
  "func ID ( ID : int ) ( while - ( ( true * false and - - { 123 ) and - } - 123 ) ) { } } func ID ( ) { -",
  "func ID ( ID : int ) ( while - ( ( true * false and - - { 123 ) and ) } - 123 ) - { } } func ID ( ) { -",
  "func ID ( ) : [ ] int { var ID : bool var ID : int ID [ false ID - + + ID ] = ID ID = ID }",
  "func ID ( ) : [ ] int { var ID : bool var ID : int ID [ false ID - + + ID ] = ID ID = ID }",
  "func ID ( ) : [ ] int { var ID : bool var ID = int ID [ false ID - + + ID ] : ID ID = ID }",
  "func ID ( ) { var ID : [ { int if ID ( ) [ - 123 + 123 ] [ - ( ID ) ] ] } ID = - - - 123 }",
  "func ) ( ID { var ID : [ { int if ID ( ) [ - 123 + 123 ] [ - ( ID ) ] ] } ID = - - - 123 }",
  "func ) ( ID { var ID : [ { int if ID } ) [ - 123 + 123 ] [ - ( ID ) ] ] } ID = - - - 123 (",
  "func ID ( ID : int ) { var ID : bool } func ID ( ) : int false while true / - - ( { ) * ( ID ) { } if ( ( - ( false ) ) ) { } }",
  "func ID ( ID : int ) { var ID : bool } func ID ( ) : int false while true / - - ( { ) * ( ID ) { } if ( ( - ( false ) { ) ) } }",
  "func / ( ID : int ) { var ID : bool } func ID ( ) : int false while true ID - - ( { ) * ( ID ) { } if ( ( - ( false ) { ) ) } }",
  "func ID ( ) : bool { var ID : [ ] bool ID ID : [ ( var ( - true ) ) ] [ ] bool }",
  "var ID ( ) : bool { var ID : [ ] bool ID ID : [ ( func ( - true ) ) ] [ ] bool }",
  "var ID ( ) : bool { ) ID : [ ] bool ID ID : [ ( func ( - true ) var ] [ ] bool }",
  "func ID ( } : [ ] [ 123 - - ID / ( false * ID ) / true + true ] int ) { ID func ID ( ) { }",
  "func ID ( } : [ ] [ 123 - - ID / ( false * ID ) / true + true ] int ) { ID func ID ( { ) }",
  "func ID ( } : [ ] [ 123 - - ID / ( false * ID ) / func + true ] int ) { ID true ID ( { ) }",
  "func ID ( ) { int { var ID : bool while 123 * - true / false + ( - - - - ID ) - false { } while - 123 { } } func ID ( ) : }",
  "func ID ( ) { int { var ID : bool while 123 * - true / false + ( : - - - ID ) - false { } while - 123 { } } func ID ( ) - }",
  "func ID ( ) { int { : ID var bool while 123 * - true / false + ( : - - - ID ) - false { } while - 123 { } } func ID ( ) - }",
  "func ID ( ) { var ID : int { var ID : { { call ID ( true / false ) while - ID { } } } while 123 int } }",
  "func ID ( ) ID var { : int { var ID : { { call ID ( true / false ) while - ID { } } } while 123 int } }",
  "func ID ( ) ID var { : int { var ID : { { call ID } true / false ) while - ID { } } } while 123 int } (",
  "func ID ( ID : bool ) { var ID : [ - true / ID ( ID ( true ) ) ) * - ( - ID ) ] int var ( : int } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ - } / ID ( ID ( true ) ) ) * - ( - ID ) ] int var ( : int true func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ - } / ID ( ID ( true ) ) ) * - ( - ID ) ] int var ( : int true func ID ( ) { }",
  "func ID ( ID int [ ] int , ID : : , ID : bool ) { var ID : int var ID : int if ( ID ) { } } func ID ( ) { }",
  "func ID ( { int [ ] int , ID : : , ID : bool ) { var ID : int var ID : int if ( ID ) { } } func ID ( ) ID }",
  "func ID ( { int [ ] int , ID : : , ID : bool ) { var ID : int var ID : int if ( ID ) { } } func ID } ) ID (",
  "ID ID ( ID : bool ) { var func : int var ID : [ ID [ ( ID ) ] [ - ( ( ID ) ) ] ] [ ] [ ] bool } func ID ( ) { }",
  "[ ID ( ID : bool ) { var func : int var ID : [ ID [ ( ID ) ] [ - ( ( ID ) ) ] ] ID ] [ ] bool } func ID ( ) { }",
  "[ ID ( ID : bool ) { ( func : int var ID : [ ID [ var ID ) ] [ - ( ( ID ) ) ] ] ID ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID < ID ( and true ID ) ] int , ID : [ ] int ) { }",
  "func ID ( ID : int , ID : [ ID < ID ( and true ID ) ] int , ID : [ ] int ) { }",
  "func ID ( ID : int , ID : [ ID < ID ( and true ID ) ] int , ID : [ ] int ) { }",
  "func ID ( ) { var ID : bool } func ID ( ID : int ) : int { var ID : ] ID ( ) [ bool }",
  "func ID ( ) { var ID : bool } func ID ID ( : int ) : int { var ID : ] ID ( ) [ bool }",
  "func ID ( ) { var ID : bool } func ID ID ( : int ) : int { ) ID : ] ID ( var [ bool }",
  "func ID } ) : [ - ID [ ( false / - ( ( true ) ) ) ] [ - - ( ID ) ] ] [ ] bool { ( func ID ( ) { }",
  "func ID } ) : ID - ID [ ( false / - ( ( true ) ) ) ] [ - - ( [ ) ] ] [ ] bool { ( func ID ( ) { }",
  "func ID } ) : ID - ID ] ( false / - ( ( true ) ) ) ] [ - - ( [ ) [ ] [ ] bool { ( func ID ( ) { }",
  "func ID ( ID : [ ] int { : bool { var ID : bool var ID : int print ( - false ) if 123 { } } func ID ( ) ) }",
  "func ID ( / : [ ] int , ID : bool ) { { print true ID - false * - ID } while ( false ) { } } func ID ( ) { }",
  "func ID ( / : [ ] int , ID : bool ) { { true print ID - false * - ID } while ( false ) { } } func ID ( ) { }",
  "func ID ( / : [ ] int , ID : bool ) { { true print ID - false * - ID } while ( false ) { } } func } ( ) { ID",
  "func ID ( ID : [ false * false < { true / ( - 123 * ID ) ] bool ) - }",
  "func ID ( ID : [ false / false < { true * ( - 123 * ID ) ] bool ) - }",
  "func ID ( ID : [ false / false ) { true * ( - 123 * ID < ] bool ) - }",
  "func ID ( ID : int , ID : bool , ID : bool ) : [ ] bool { var ID : bool var ID : } { var ID : int var ID : bool bool { } }",
  "func ID ( ID : int , ID : bool , ID : bool ) : [ ] bool { var ID : } var ID : bool { var ID : int var ID : bool bool { } }",
  "- ID ( ) : [ ] int { var ID : bool return } func ID ( ID : int ) : int { var ID : [ ( func true ) ] [ ] bool }",
  "- ID ( ) : [ : int { var ID : bool return } func ID ( ID : int ) ] int { var ID : [ ( func true ) ] [ ] bool }",
  "- ID ( ) ( [ : int { var ID : bool return } func ID : ID : int ) ] int { var ID : [ ( func true ) ] [ ] bool }",
  "func ID ( ) : int { var ID : int } func ID ( ) { var ] : [ ] [ false / - true * false ID int }",
  "func ID ( ) : int { var ID : false } func ID ( ) { var ] : [ ] [ int / - true * false ID int }",
  "func ID ( ) : int { int ID : false } func ID ( ) { var ] : [ ] [ var / - true * false ID int }",
  "func ID ( ) : [ ] int { var ID : int - - 123 / true - ( ( ID ) ) + true print print true } func ID ( ) { }",
  "func ID ( - : [ ] int { var ID : int - ) 123 / true - ( ( ID ) ) + true print print true } func ID ( ) { }",
  ": ID ( - func [ ] int { var ID : int - ) 123 / true - ( ( ID ) ) + true print print true } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool call ID ( ) { var ID : bool { var ID : [ ] int if ( 123 ) { } if ( ( ) ID ) { } } } }",
  "func ID ( ) : bool { var ID : bool call ID ( ) { } ID : bool { var ID : [ ] int if ( 123 ) { } if ( ( ) ID ) { } } var }",
  "func ID ( ) : bool { var ID : bool call ID ( ) { } ( : bool { var ID : [ ] int if ID 123 ) { } if ( ( ) ID ) { } } var }",
  "func ID } ) : int { var ID : int var ID : bool return - - - - - - - ID [ ID ] ( func ID ( ) { }",
  "func ID } ) : int { var ID : int var ID : bool return - - - - - - - ID } ID ] ( func ID ( ) { [",
  "func ID } ) : int { - ID : int var ID : bool return var - - - - - - ID } ID ] ( func ID ( ) { [",
  "func ID ( ) : [ ID ( ) [ - - ID ( ) bool - - ( - ID ) ] ] ] [ { } func ID ( ) { }",
  "func ID ( ) : [ ID ( func [ - - ID ( ) bool - - ( - ID ) ] ] ] [ { } ) ID ( ) { }",
  "func ID ( ) : [ ID ( func [ - - ID ( ) } - - ( - ID ) ] ] ] [ { bool ) ID ( ) { }",
  "func ID : ) ( [ ] int { while - - ( false / - ( false ) * ID ) { } } func ID ( ) { }",
  "func ID : int ( [ ] ) { while - - ( false / - ( false ) * ID ) { } } func ID ( ) { }",
  "func ID : int ( [ ] ) { while ) - ( false / - ( false ) * ID - { } } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ ID [ ( ID ( ) ) ] [ - 123 } ] bool , ID : bool ) { } func ID ( ) { ]",
  "func ID ( ID { [ ] int , ID : [ ID [ ( ID ( ) ) ] [ - 123 } ] bool , ID : bool ) { } func ID ( ) : ]",
  "func ID ( ID { [ ] int , ID : [ bool [ ( ID ( ) ) ] [ - 123 } ] ID , ID : bool ) { } func ID ( ) : ]",
  "func ID ( ) : : { } func ID ( ID : int , ID bool bool , ID : bool ) : bool { var ID : int var ID : [ ] [ ] int }",
  "func ID ( ) : : { } func bool ( ID : int , ID bool ID , ID : bool ) : bool { var ID : int var ID : [ ] [ ] int }",
  "func ID ( ) : : { } func bool ( ID : int , ID bool ID , ID : bool ) : bool { var ID : int var ID : [ ] [ ] int }",
  "func ID ( ID : int , 123 : [ ( ID ( ) and ID / 123 ) ] bool , ID : bool ) { }",
  "func ID ( ID : int , 123 : ) ( ID ( ) and ID / 123 ) ] bool , ID : bool [ { }",
  "func ID ID ID : int , 123 : ) ( ID ( ) and ID / 123 ) ] bool , ( : bool [ { }",
  "func ID ( ) { if - ID [ ( - ID ( [ [ ID ] ) ID ] ) ] [ ID ] { } call ID ( ) }",
  "func ID ( ) { if - ID [ ( - ID ( [ [ ID ] ) ID ] ) ] [ ID ] { } call ID ( ) }",
  "func ID ( ) { if - ID [ ( - ID ( [ ( ID ] ) ID ] ) ] [ ID ] { } call ID [ ) }",
  "func ID ( ) [ bool { var ID : [ true * - ( ( false ) ) * ( - 123 ) ] [ ] [ ] [ ] : ] [ ] bool var ID : bool }",
  "func ID ( ) [ bool { var ID : [ true * - ( ( false ) ) * ( - 123 ) ] [ ] [ ] [ ] : ] bool ] [ var ID : bool }",
  "func ID ( ) [ bool { var ID : [ true * - ( ( false ) ) * ( - 123 } ] [ ] [ ] [ ] : ] bool ] [ var ID : bool )",
  "func ID ( ) : [ ( 123 * true and ( true / - ( ID ) ] ) ] [ ) bool { }",
  "func ID ( ) : ] ( 123 * true and ( true / - ( ID ) [ ) ] [ ) bool { }",
  "func ID ( ) : ] ( 123 * true and ( true / - ( [ ) ID ) ] [ ) bool { }",
  "func ID ( ID : bool , ID : [ , ID : [ ] int ) : bool { ID ( ) int 123 ] = 123 if ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ , ID : [ ) int ) : bool { ID ( ) int 123 ] = 123 if ID { } } func ID ( ] { }",
  "func ID ( ID : bool , ID : [ , ID : [ ) int ) : bool ] ID ( ) int 123 ] = 123 if ID { } } func ID ( { { }",
  "func ID ( ) { var ID false int while ( ( - : * ( ID ) * true ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID false int while ( ( - : * ( ID ) * true ) ) { } } func ID ( ) { }",
  "func ID ( ) { var while false int ID ( ( - : * ( ID ) * true ) ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : call ) { { var ID : [ ] bool int ID ( ) call ID ( ID ) } }",
  "func ID ( ID : int , ID : call ) { { var ID : [ ] bool ID ID ( ) call int ( ID ) } }",
  "func ID ) ID : int , ID : call ( { { var ID : [ ] bool ID ID ( ) call int ( ID ) } }",
  "func ID ( ID : int , ID : bool ) { ID [ - ( 123 - 123 - - 123 ) ] } true ] = ID } func ID ( ) { [",
  "func ID ( ID : int , ID : bool ) { ID [ - ( - 123 123 - - 123 ) ] } true ] = ID } func ID ( ) { [",
  "func - ( ID : int , ID : bool ) { ID [ - ( - 123 123 ID - 123 ) ] } true ] = ID } func ID ( ) { [",
  "[ ID ( ID : [ - - - ID * ( - ID func ( ( - - 123 ) ) ] [ ID ] ) ] int ) { }",
  "[ ID ( ID : [ 123 - - ID * ( - ID func ( ( - - - ) ) ] [ ID ] ) ] int ) { }",
  "[ ID ( ID : [ 123 - - ID * ( - ID func ( ( - - - ) ) ] [ ID ] ) ] int ) { }",
  "func ID ( ID : int , ID int : ) : [ ID [ 123 * true + false - ( true ) ] ] int { }",
  "func ID ( int : ID , ID int : ) : [ ID [ 123 * true + false - ( true ) ] ] int { }",
  "func ID ( ) { - ID : int ID ( 123 * true + - var true and ( false ) ) = ID if false { } }",
  "func ID ( ) { - ID true int ID ( 123 * : + - var true and ( false ) ) = ID if false { } }",
  "func ID 123 ) { - ID true int ID ( ( * : + - var true and ( false ) ) = ID if false { } }",
  "func ID ( ) var } func ID ( ) { { ID : bool while ID [ ID ] { } }",
  "func ID ( ) var } func ID ( ) { } ID : bool while ID [ ID ] { } {",
  "func ID ( ) var ( func ID } ) { } ID : bool while ID [ ID ] { } {",
  "func ID ( ) : int { { var ID : [ ID [ / 123 ID ] ] int } { } }",
  "] ID ( ) : int { { var ID : [ ID [ / 123 ID ] func int } { } }",
  "] ID ( ) : int { / var ID : [ ID [ { 123 ID ] func int } { } }",
  "func ID ( ID ( int , ID : [ ] int ) : int { var ID : [ ID [ ( ( : false ) ) ) ] [ - false ] ] int var ID : int }",
  "func ID ( ID ( int , ID : [ ] int ) : int { var ID : [ ID [ ( ( : - ) ) ) ] [ false false ] ] int var ID : int }",
  "func ID ( ID : bool ) ] int { var ID : bool var ID : [ ] [ : bool { var ID : [ ] [ ] int var ID : [ ] bool } { } } func ID ( ) { }",
  "func ID ( ID : bool ) ] int { var ID : ] var ID : [ bool [ : bool { var ID : [ ] [ ] int var ID : [ ] bool } { } } func ID ( ) { }",
  "func ID ( ) : [ [ [ - true / ( ( - true / - ID ) ) * ID ] [ ] ] ] [ ] [ ] int { } func ID ( ) { }",
  "func true ( ) : [ [ [ - true / ( ( - ID / - ID ) ) * ID ] [ ] ] ] [ ] [ ] int { } func ID ( ) { }",
  "func true ( ) : [ [ [ - true / ] ( - ID / - ID ) ) * ID ] [ ] ( ] [ ] [ ] int { } func ID ( ) { }",
  "func ] ( ) : [ ] [ ID [ ( - - 123 * false / - - - ( ID ) ) ] int { }",
  "func ] ( ) : [ ] [ ID [ ( - - 123 * false / - int - ( ID ) ) ] - { }",
  "func ] ( 123 : [ ] [ ID [ ( - - ) * false / - int - ( ID ) ) ] - { }",
  "func ID ( ID : bool ) { var ID : bool return } func ( ID ID : int ) { var ID : bool var ID : [ ] bool }",
  "func ID ( ID : bool ) { var ID : bool return } func ( ID ID : int ) { var ID : bool var ID : [ ] bool }",
  "func ID ( ID : bool ) { var ID : bool func } return ( ID ID : int ) { var ID : bool var ID : [ ] bool }",
  "( ID ( ID : bool , ID : int ) : int { var ID : int call ID ( ) if 123 / ( - - ID ) * - - - false { } } func ID func ) { }",
  "( ID ( ID : bool ) ID : int ) : int { var ID : int call ID ( ) if 123 / ( - - ID , * - - - false { } } func ID func ) { }",
  "( ID ( ID : bool ) ID : int ) : int { : ID var int call ID ( ) if 123 / ( - - ID , * - - - false { } } func ID func ) { }",
  "func ID ( ID : int ) : [ ( ID ( - ) == - ( ( ID ) 123 ) ) ] bool { }",
  "func ID ( ID int : ) : [ ( ID ( - ) == - ( ( ID ) 123 ) ) ] bool { }",
  "func ID ( ID int : ) : [ ( ID ( - ) == - ( ( ID ) 123 ) ) bool ] { }",
  "func ID ( ) : [ - - true } ID [ 123 / ( true ) / ID ] * - true ] [ ] [ ] bool { } func ID ( ) { *",
  "func ID ( ) : [ - - true ID } [ 123 / ( true ) / ID ] * - true ] [ ] [ ] bool { } func ID ( ) { *",
  "func ID ( ) : [ - - true ID } [ 123 / ( true ) / ID ] * - true ] [ ] [ ] ID { } func bool ( ) { *",
  "func ID ( * : [ ID * - ( - ( ID ( ( - ( ID ) ) ) ) ) ID ( - false ) ] bool ) { }",
  ") ID ( * : [ ID * - ( - ( ID ( ( - ( ID ) func ) ) ) ID ( - false ) ] bool ) { }",
  "func ID bool ID : bool , ID : ( , ID : [ - ID ( - ( false ) ) ] int ) { } func ID ( ) { }",
  "func ID bool ID : bool , ID : ( , ID : [ - ID ( - ( false ) ) ] int ) { } func ID ( ) { }",
  "func ID bool ID : bool , ID : ( , ID : [ - ID ( } ( false ) ) ] int ) { } func ID ( ) { -",
  "func ) ( ID : [ ( true / true * ID [ 123 + ID ] ) ] bool ) { } func ID ( ID { }",
  "func ) ( ID : func ( true / true * ID [ 123 + ID ] ) ] bool ) { } [ ID ( ID { }",
  "func ) ( ID ) func ( true / true * ID [ 123 + ID ] ) ] bool : { } [ ID ( ID { }",
  "func ID ( ) : int { } func ID ( ID : int ) { var var : [ - ID [ - false ] ] int ID ID : [ ] [ ] int }",
  "func ID ( ) : int : } func ID ( ID { int ) { var var : [ - ID [ - false ] ] int ID ID : [ ] [ ] int }",
  "func ID ( ) : int : } func ID ( ID { int ) [ var var : [ - ID [ - false ] ] int ID ID : { ] [ ] int }",
  "func ID ( ) : bool { } func ID ( ID : bool , ID : bool , ID : int ) : int : { var ID : int var ID { bool } if false { } }",
  "func ID ( ) : bool { } func ID ( ID : bool , ID : bool if ID : int ) : int : { var ID : int var ID { bool } , false { } }",
  "func ID ( ) : bool { } func ID ( ID : bool , ID : bool if ID : int ) : : int { var ID : int var ID { bool } , false { } }",
  "func ID ( ID : bool , ID : [ ] [ ( ID [ ID ( ) ] [ - - ( ( - - ( ( - - ( ) ) ) ) ) ) ] ) ] int ID { } func ID ( ) { }",
  "func ID ( - : bool , ID : [ ] [ ( ID [ ID ( ) ] [ ID - ( ( - - ( ( - - ( ) ) ) ) ) ) ] ) ] int ID { } func ID ( ) { }",
  "func ID ( - : bool , ID : [ ] [ ( ID [ ID ( ) ] [ { - ( ( - - ( ( - - ( ) ) ) ) ) ) ] ) ] int ID ID } func ID ( ) { }",
  "func ID ( ID : bool ID { var ID : bool var ) : bool print 123 / ( true * 123 * ( - - - true ) ) if ( ID ) { } }",
  "func ID ( ID : bool ID { var ID : bool var ) : bool print 123 / ( true * 123 * ( - - - true ) ) ( if ID ) { } }",
  "func ID ( ID : * ID { var ID : bool var ) : bool print 123 / ( true * 123 bool ( - - - true ) ) ( if ID ) { } }",
  "func ID ( ) { while true - ID ( ID ( - - true ) ) - ( - ID ) { } while - - ID - { } } func ID ( ) { }",
  "func ID ( ) { while true - ID ( ID ( { - true ) ) - ( - ID ) - } while - - ID - { } } func ID ( ) { }",
  "func ID ( true { while ) - ID ( ID ( { - true ) ) - ( - ID ) - } while - - ID - { } } func ID ( ) { }",
  "func ID ( ) + bool { print 123 : false - ( true * ID ) if true { } }",
  "func ID ( ) + ID { print 123 : false - ( true * bool ) if true { } }",
  "func ID ( ) + ID { print 123 : false - ( true * bool ) if true { } }",
  "func ID ( ID : [ ] bool ) : bool { var ID : bool false ID : int while 123 + var / ID * ID { } if - ( false ) { } } func ID ( ) { }",
  "ID ID ( ID : [ ] bool ) : bool { var func : bool false ID : int while 123 + var / ID * ID { } if - ( false ) { } } func ID ( ) { }",
  "ID ID ( ID : [ ] bool ) : bool { var func : if false ID : int while 123 + var / ID * ID { } bool - ( false ) { } } func ID ( ) { }",
  "func ID ( ) { return ID ( ( - - - 123 ) ( ( ID ) ) ) / }",
  "func ID ( ) { return ID ( ( - - - 123 ) ( ( ) ) ID ) / }",
  "func ID ( ID call [ ] bool ) { var ID : bool : ID ( ) if 123 / 123 + ( ( 123 ) ) { } }",
  "func ID ( ID ID [ ] bool ) { var ID : bool : call ( ) if 123 / 123 + ( ( 123 ) ) { } }",
  "func ID ( ID ID [ ] bool ) { var ID : bool : ) ( ) if 123 / 123 + ( ( 123 ) call { } }",
  "func ID ( ID : int , ID : bool ) : [ ] int { var ID : [ ] int bool ID : var call ID ( true ) call ID ( ) } func ID ( ) { }",
  "] ID ( ID : int , ID : bool ) : [ func int { var ID : [ ] int bool ID : var call ID ( true ) call ID ( ) } func ID ( ) { }",
  "] ID ( ID : int , ID : bool ) : [ func int { var ID : [ ] int bool ID : var call ID ( true ) call ID ( ( } func ID ) ) { }",
  "func ID ( ) : bool { var ID : { int var ID : bool while - ID ( ) [ true ] [ ID ] { } } { } }",
  "func ID ( ) : bool { var ID : { true var ID : bool while - ID ( ) [ int ] [ ID ] { } } { } }",
  "func ID bool ) : bool { var ID : { true var ID : ( while - ID ( ) [ int ] [ ID ] { } } { } }",
  "func ID ( ID : bool ) : [ - false * true / ( - ( ) - - ( ( - ( - ID ) ( ) ) ) ) ] bool { }",
  "func ID ( ID : bool ) : [ - false * true / ( - ( ) - ( ( - - ( - ID ) ( ) ) ) ) ] bool { }",
  "func ID ( ID ) bool ) : [ - false * true / ( - ( : - ( ( - - ( - ID ) ( ) ) ) ) ] bool { }",
  "func { ( ID : int , ID : [ ] [ ID / - 123 and - - - ( false ) and true ] bool ) ID } func ID ( ) { }",
  "func { ( ID : int , ID : [ / [ ID ] - 123 and - - - ( false ) and true ] bool ) ID } func ID ( ) { }",
  "func { ( ID : int , ID : [ / [ ID ] - 123 and - - - ( false ) and true ] bool ) ID } func ID ( ) { }",
  "( ID ( ID : [ true * false / - ID func ( false ) ) ] [ ] bool ) { } func ID ( ) { }",
  "( ID ( ID : [ true * false / ) ID func ( false ) ) ] [ ] bool - { } func ID ( ) { }",
  "( ID ( ID : [ true * false / ) ID func ( false ) ) ] [ ] bool - { } func ID ( ) { }",
  "func ID ( ID : [ , ID : int ] [ ID ( ) / - 123 / - 123 - - ( ID ) + ( ( ID ) ) ] bool , ID : [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ , ID ) int ] [ ID ( ) / - 123 / - 123 - - ( ID : + ( ( ID ) ) ] bool , ID : [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ , ID ) ID ] [ ID ( ) / - 123 / - 123 - - ( ID : + ( ( ID ) ) ] bool , ID : [ ] [ ] int ) { } func int ( ) { }",
  "func ID ( ) : bool { var ID ( [ ] bool ID : ) [ ( ( ( ID ) ) ) ] [ ID ] = true }",
  "func ID ( ) : bool { var ID ] [ ( bool ID : ) [ ( ( ( ID ) ) ) ] [ ID ] = true }",
  "func ID ( ) : bool { var ID ] [ ( bool ID ) ) [ ( ( ( ID ) ) : ] [ ID ] = true }",
  "func ID ( ) : int { * true while - ( ( ID * 123 * - - - false ) ) * ( 123 ) { } if ID { } }",
  "func ID ( ID : int ) : int { var ID : * var ID : [ ID [ false int ID ] ] bool } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : * var ID : [ ID [ false ID ID ] ] bool } func int ( ) { }",
  "func ID ( ID : int ) : int { ] ID : * var ID : [ ID [ false ID ID var ] bool } func int ( ) { }",
  "func ID ( ID : [ ID / ( int true - false / ID / ID ) ) * - false ] ( ) { }",
  "func ID ( ID : [ ( / ID int true - false / ID / ID ) ) * - false ] ( ) { }",
  "func ID ( ID : [ ( / ID int true - false / ID / ( ) ) * - false ] ID ) { }",
  "func ID ( ID : * ] [ ( 123 and - true [ ID == 123 ) ] bool ) { }",
  "func ID ( ID : * ] [ ( 123 and - true [ ID == 123 ) ] bool ) { }",
  "func ID ( ID : * ] [ ( 123 and - true [ ID == 123 ) { bool ) ] }",
  "func ID ( ID : [ - ID ( ID - ID ( ) [ ID ] [ ( ID ) ] ) ] bool ) { } ( ID func ) { }",
  "func ID ( ID : [ - ID ( ID - ID ( ) [ ID ) [ ( ID ) ] ] ] bool ) { } ( ID func ) { }",
  "func ID ( ID : [ - ID ( ID - ID ( ) [ ID ) [ ( ID ) ] ] ] ID ) { } ( bool func ) { }",
  "{ ID ( ) : int func return ID [ ID [ ( true ) ] ] }",
  "func ID ( ) : int { return ID [ ] [ ( true ) ] ID }",
  "func ID ( ID : int , ID , [ ] int : ID : [ ( - ID ( ) [ 123 ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID , [ ] int : ID : [ ( } ID ( ) [ 123 ] ) ] bool ) { } func ID ( ) { -",
  "func ID ( ID : } , ID , [ ] int : ID : [ ( int ID ( ) [ 123 ] ) ] bool ) { } func ID ( ) { -",
  "func ID func ID : int , ID : bool ) { var ID : bool } ( ID ( ) : int { var ID : int var ID : [ ] bool }",
  "func ID func ID : int , ID : bool ) { var ID : bool ID ( ID ( ) : int { var } : int var ID : [ ] bool }",
  "func ID func ID : int , ID : bool ) { var ID : bool ID ( ID ( ) : int { var } : int var ID : [ } bool ]",
  "func ID ( ID : ID , ID : bool ) { var ID : int var ID : bool while - - ( ( ID ) ) { } { } } func int ( ) { }",
  "func ID ( ID : ID , ID : bool ) { var ID : int : ID var bool while - - ( ( ID ) ) { } { } } func int ( ) { }",
  "func ID ( ID : ID , ID : bool ) { var ID : int : ID var bool while - - ( ( ID ) int { } { } } func ) ( ) { }",
  "func ID ( ) { var ID ] bool print ( ID ( ) [ ( ( - ID ) ) : ) call ID ( ) }",
  "func ID ( ) { var ID ] bool print ( ID ( ) [ ( ( - ID ) ) : ) call ID ( ) }",
  "func ID ( ) { var ID ] bool print ( ID ( ) [ ( ( - ID call ) : ) ) ID ( ) }",
  "func ID } ) { if ( false + - ID / true / ( ( ( ID ) ) ) ) { } if - false { } } func ID ( ) { (",
  "func ID } ) { if ( false + false ID / true / ( ( ( ID ) ) ) ) { } if - - { } } func ID ( ) { (",
  "func ID } ) ) if ( false + false ID / true / ( ( ( ID ) ) ) ) { } if - - { } } func ID ( { { (",
  "func ID ( ) { return - - false ) - ( - ( ID * ) } func ID ( ) { }",
  "func ID ( ) - return { - false ) - ( - ( ID * ) } func ID ( ) { }",
  "func ID ( ) - return { - false ) - ( - func ID * ) } ( ID ( ) { }",
  "func ID ( ) { print } true / ( ID ( ) [ ( ( ( 123 ) ) ) ] ) - func ID ( ) { }",
  "func ID ( ) { print } true ) ( ID ( ) [ ( ( ( 123 ) ) ) ] ) - func ID ( / { }",
  "func ID ( ) { print } true ) ( ID ( ) [ ( ( ( { ) ) ) ] ) - func ID ( / 123 }",
  "func ID [ ID : ( ( false * - ( 123 * ( - ID ) * ID ) / false ) ] bool ) { } func ID ( ) { }",
  "func ) [ ID : ( ( false * - ( 123 * ( - ID ) * ID ) / false ) ] bool ) { } func ID ( ID { }",
  "( ) [ ID : ( func false * - ( 123 * ( - ID ) * ID ) / false ) ] bool ) { } func ID ( ID { }",
  "func ID ( ID : int , ID : bool ) 123 while ( 123 / - ( ( - false ) ) / - { ) { } }",
  "func ID ( ID : int , ID : bool ) 123 while ( 123 / - ( ( - false ) ) / - { ) { } }",
  "func / ( ID : int , ID : bool ) 123 while ( 123 ID - ( ( - false ) ) / - { ) { } }",
  "func ID ( ID : [ ] [ ( ] ID [ - ID ] ) ) ( [ ] bool ) { }",
  "[ ID ( ID : [ ] [ ( ] ID [ - ID ] ) ) ( func ] bool ) { }",
  "[ ID ( ID : [ ] [ ( ] ID [ - ID ) ) ] ( func ] bool ) { }",
  "func * ( ) : int { var ID : [ - - true * false * true < 123 ID false ] bool var ID : int } func ID ( ) { }",
  "func * ( ) : int { var ID : * - - true [ false * true < 123 ID false ] bool var ID : int } func ID ( ) { }",
  "func * ( ) : int { var ID : * - - true ] false * true < 123 ID false [ bool var ID : int } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID { bool ) : int : var ID : int }",
  "bool ID ( ID : int , ID : bool , ID { func ) : int : var ID : int }",
  "bool ID ID ID : int , ID : bool , ID { func ) : int : var ( : int }",
  "func ID ( ) { var ID int bool var ID : bool } func ID ( ) : int { var ID : : return }",
  ": ID ( ) { var ID int bool var ID : bool } func ID ( ) : int { var ID func : return }",
  ": ID ( ) { var ID int bool var ID : bool } func ID ( ) : int { var func ID : return }",
  "func ID ( ID : [ true / ( - false / ID [ ID ] ) ] [ ] bool ( { } func ID ) ) { }",
  "{ ID ( ID : [ true / ( - false / ID [ ID ] ) ] [ ] bool ( { } func ID ) ) func }",
  "{ ID ( ID : [ func / ( - false / ID [ ID ] ) ] [ ] bool ( { } true ID ) ) func }",
  "func ID ( ) { [ ( false + true ) * ( - ID ) / true ] int { } func ID ( ) : }",
  "func ID ( ) { [ ( false + true ) * ( - } ) / true ] int { ID func ID ( ) : }",
  "func ID ( ) { [ ( false + true ) * ( - } ) / true ] int { ID } ID ( ) : func",
  "func ID ( ID : ) , ID : [ ( ( - ( ( true int ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : ) , ID : [ ( ( { ( ( true int ) ) ) ] bool ) - } func ID ( ) { }",
  "func ID ( ) : ) , ID : [ ( ( { ( ( true int ) ) ) ] bool ID - } func ID ( ) { }",
  "func ID ( ) : ) { var ID : bool var ID : bool if - false * ( ID int { } }",
  "func ID ( ) : ) { var ID : bool var ID : bool * - false if ( ID int { } }",
  "func ID ( ) : ) { bool ID : var var ID : bool * - false if ( ID int { } }",
  "func ID ( ) { var ID : bool call ID ( ( ( - } ( - ID ) ) ) ) ) ID = ( ID ) (",
  "func ID ( = { var ID : bool call ID ( ( ( - } ( - ID ) ) ) ) ) ID ) ( ID ) (",
  "func ID ( = { var ID : bool call ID ( ( ( - } ( - ID ) ) ) ) ) ID ) ( ID ) (",
  "func ID ( ) { if ID [ ID ( ) ( 123 ) - ] [ true ] { } call ID ( ) }",
  "func ID ( ) { if ID [ ID ( ) ( 123 ) - ] true [ ] { } call ID ( ) }",
  "func ] ( ) { if ID [ ID ( ) ( 123 ) - ] true [ ID { } call ID ( ) }",
  "func ID ( ID : [ ] [ ] int , ID : ( , ID : [ ID bool ID ) ] [ ] int ) { }",
  "func ID ( ID : [ ] [ ] int , ID : ( , ID : [ ID bool ID { ] [ ] int ) ) }",
  "[ ID ( ID : func ] [ ] int , ID : ( , ID : [ ID bool ID { ] [ ] int ) ) }",
  "func ID ( ID : [ ] bool ) : int { var ID : bool var ID : [ ( ID - ) [ 123 ] [ ( ID ) ] ] [ ] bool }",
  "func ID ( ID ] [ ] bool ) : int { var ID : bool var ID : [ ( ID - ) [ 123 ] [ ( ID ) ] : [ ] bool }",
  "func ID ( ID ] [ ] bool ) : int { var ID : bool var ID : [ ( ID - ) [ 123 ] [ bool ID ) ] : [ ] ( }",
  "func ID ( ) { return } func ID ( ) : bool { var ID : int ID ( ID = ) }",
  "func ID ( ) { return } func ID ( ) : bool { ID var : int ID ( ID = ) }",
  "( ID ( ) { return } func ID ( ) : bool { ID var : int ID func ID = ) }",
  "func ID ( ) : bool { } func ID ( ) : [ ] [ - - 123 + - bool + ID ] false { }",
  "func ID ( ) : bool } } func ID ( ) : [ ] [ - - 123 + - bool + ID ] false { {",
  "- ID ( ) : bool } } func ID ( ) : [ ] [ - - 123 + func bool + ID ] false { {",
  "func ID ( ID : bool ) : bool { ID ID : [ var / 123 and true * - ( - - ( ( - ( - ( - - ( - ID ) ) ) ) ) ) * ( true ) ] bool }",
  "func ID ( ID : bool ) : bool { ID ID : [ var / 123 ( true * - and - - ( ( - ( - ( - - ( - ID ) ) ) ) ) ) * ( true ) ] bool }",
  "func ID ( ) { - ID : bool var ID : int call ID ( - var false / ( ID ) * - ( ( ( true ) ) ) ) if ID { } }",
  "func ID ( ) { - ID : bool var ID : int call ID ( - var false / ( ID ) * - ( ( ( true ) ) ) ) if ID { } }",
  "func ID ( ) { - ID : bool var ID : int call ID ( - var false / * ID ) ( - ( ( ( true ) ) ) ) if ID { } }",
  "func ID ( { : bool , ID : int ) ID { print - 123 / - false < 123 } if ( ( ID ) ) { } }",
  "func ID ( print : bool , ID : int ) ID { { - 123 / - false < 123 } if ( ( ID ) ) { } }",
  "func ID ( print : bool , ID : int ( ID { { - 123 / - false < 123 } if ( ) ID ) ) { } }",
  "func ID ( ) { var ID : bool call ID ( - ID / - 123 ( - ID * 123 ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool call ID ( - ID / - 123 ( ( ID * 123 ) ) } func ID - ) { }",
  "func ID ( ) { var ID : bool call ID ( - ID / - 123 ( ( ID * 123 ) ) } ) ID - func { }",
  "func ID - ID : [ true / ID [ ( true * - ( - true ) ] ] [ ] bool ) { }",
  "func ID - ID ) [ true / ID [ ( true * - ( - true ) ] ] [ ] bool : { }",
  "func ID - true ) [ ID / ID [ ( true * - ( - true ) ] ] [ ] bool : { }",
  "func ID ( ID : [ ] bool ) { var ID } bool call ID ( ( - ID [ 123 ] [ - ( 123 ) ] ) ) { } : func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { var ID } bool call ID ( ( ] ID [ 123 - [ - ( 123 ) ] ) ) { } : func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { var ID } bool call ID } ( ] ID [ 123 - [ - ( 123 ) ] ) ) { ( : func ID ( ) { }",
  "func [ ( ) { var ID : ID ] [ ] bool var ID : [ ] int return }",
  "func : ( ) { var ID [ ID ] [ ] bool var ID : [ ] int return }",
  "func ID ( ) { var ID [ : ] [ ] bool var ID : [ ] int return }",
  "( ID func ) : [ ( - 123 and ( - true * ID * ID ) ) ] int { }",
  "( ID func 123 : [ ( - ) and ( - true * ID * ID ) ) ] int { }",
  "( ID func 123 : [ ( - ) and } - true * ID * ID ) ) ] int { (",
  "func ID ( ) { var ID : bool { var ID : int var ID : [ ) int } return } func ID ( ID : int ] { }",
  "func ID ( ) { var ID : bool { var ID : int var ID : [ ) ID } return } func int ( ID : int ] { }",
  "func ID ( ) { var ID : bool { var ID : ) var ID : [ int ID } return } func int ( ID : int ] { }",
  "func ID ( ID : [ ] } , ID : int , ID : int ) { var ID : [ ID ( - 123 ) ] int int",
  "func ID ( ID : ) ] } , ID : int , ID : int ) { var ID : [ ID ( - 123 [ ] int int",
  "func ID ( ID : ) ] } , ID - int , ID : int ) { var ID : [ ID ( : 123 [ ] int int",
  "func ID ( ID bool int , ID : [ ( ID ( 123 + ID - ID ) ) ] : ) { }",
  "func ID ( ID bool int , ID : [ ( ID ( 123 ) ID - ID ) + ] : ) { }",
  "func ID ( } bool int , ID : [ ( ID ( 123 ) ID - ID ) + ] : ) { ID",
  "ID ID ( ID : bool ) : bool { var ID : [ - ID [ ( - ID ) ] ] bool var func : bool } func ID ( ) { }",
  "ID ID ( ID { bool ) : bool : var ID : [ - ID [ ( - ID ) ] ] bool var func : bool } func ID ( ) { }",
  "ID ID ( ID : bool ) : bool : var ID { [ - ID [ ( - ID ) ] ] bool var func : bool } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : int , ID : bool ) { var ID : bool var ID : } while ID { bool } func ID ( ) { }",
  "func ID ( ID var [ ] [ ] bool , ID : int , ID : bool ) { var ID : bool : ID : } while ID { bool } func ID ( ) { }",
  "func ID ( bool var [ ] [ ] bool , ID : int , ID : ID ) { var ID : bool : ID : } while ID { bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ - int false * ( ( ID ) ) ) ] ( }",
  "func ID ( ) { var int : [ - ID false * ( ( ID ) ) ) ] ( }",
  "func ID ( ) { var int : [ - ID false * ) ( ID ( ) ) ] ( }",
  "func ID ( ID : int [ : ) ] int { var ID : bool var ID : bool call ID ( true / - ( ( - ( - - true ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : int [ : ) ] int { var ID : bool : ID var bool call ID ( true / - ( ( - ( - - true ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : int [ : ) ] int { var ID : bool : ID var bool call ID ( true / - ( ( - ( - - true ) ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool { var ID : [ ] bool var - : bool call ID ( ) if - ID 123 { } } ID = - ( - ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool { var ID : [ ] bool var - : bool call ID ( ) if - ID 123 { } = ID } - ( - ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool { var ID : - ] bool var [ : bool call ID ( ) if - ID 123 { } = ID } - ( - ID ) } func ID ( ) { }",
  "func ID ( ID : [ ] , , ID : int int ID : bool ) : bool { print - - ( ( true ) ) if true { } } func ID ( ) { }",
  "func ID ( ID : [ ] , , ID : int int ID : ( ) : bool { print - - ( bool true ) ) if true { } } func ID ( ) { }",
  "func ID ( ID { [ ] , , ID : int int ID : ( ) : bool { print - - ( bool true ) ) if true { } } func ID ( ) : }",
  "func ID ( ID : [ ] int , ID : bool , ID : [ ID ( - 123 / true / ( ( - ID ) { ) ] int ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool , ID : [ ID ( - 123 / true / ( ( - ID ) { ) ] int ) ) } func ( ID ) { }",
  "func ID ( ID : int bool ID : , ) { var ID : int ID [ ( ID ( ) ) ] = false } func ID ( ) { }",
  "func ID ( ID : int bool ID : , ) { var ID : int ID [ ( ID ( ) ) ] = false } func ID ( ) { }",
  "func ID ( ID : ( bool ID : , ) { var ID : int ID [ ( ID int ) ) ] = false } func ID ( ) { }",
  "func ID ( ) : [ - true * ( true * true [ - ID ] / ID ) * ( ( 123 ) ) ] int { }",
  "func ) ( ) : [ - true * ( true * true [ - ID ] / ID ) * ( ( 123 ) ID ] int { }",
  "func ) ( ) : [ - true * ( true * true [ - ID ] ID / ) * ( ( 123 ) ID ] int { }",
  "func ID ( ID : - ] bool , ID : [ ] int ) : int { var ID : bool if true * true * ( [ ID ) { } }",
  "func ID ( ID : - ] bool , ID : [ ] true ) : int { var ID : bool if int * true * ( [ ID ) { } }",
  ": ID ( ID : - ] bool , ID : [ ] true ) : int { var ID func bool if int * true * ( [ ID ) { } }",
  "func ID ( ID : bool , ID : [ ) [ ] [ ] int ) { var ID : int } func ID ( ID : [ ] int ] { }",
  "func ID ( ID : bool , ID : ] ) [ ] [ ] int ) { var ID : int } func ID ( ID : [ [ int ] { }",
  "func ID ( ID : func , ID : ] ) [ ] [ ] int ) { var ID : int } bool ID ( ID : [ [ int ] { }",
  "func ID ( ) : int { var ID : [ - false * 123 * ( ( ID ) ] [ ] int var ID : int } func ID - ) { }",
  "func ID ( ) : int { var ID : [ - false * 123 * ( ( ID ) ] [ ] int var ID func int } : ID - ) { }",
  "func ID ( ) { var ID : [ ] int func ID : [ ] int return 123 - ID ( ID ) } var ID ( ) { }",
  "func ID ( ) { var ID : [ ] int func ID : [ ] int return ( - ID 123 ID ) } var ID ( ) { }",
  "func ID ( ) { var ID : [ ] int func ID : [ ] int return ( - ID 123 { ) } var ID ( ) ID }",
  "func ID ( ID : [ - false * ID / - 123 int 123 and - ID and ( ID ) ] + ) { }",
  "func ID ( ID : [ - false { ID / - 123 int 123 and - ID and ( ID ) ] + ) * }",
  "func ID ( ID : bool ) { [ ID [ - ID - ID * ID / - - ( ID ) - true ] [ - - - 123 ] ] [ ] [ ] [ ] [ ] [ ] bool : } func ID ( ) { }",
  "func ID ( ID : bool ) { [ ID [ - ID - ID * ID [ - - ( ID ) - true ] [ - - - 123 ] ] [ ] [ ] [ ] [ ] / ] bool : } func ID ( ) { }",
  "func ID ( ID : bool ) { [ ID true - ID - ID * ID [ - - ( ID ) - [ ] [ - - - 123 ] ] [ ] [ ] [ ] [ ] / ] bool : } func ID ( ) { }",
  "func ID ( ) { var ID : ] var ID : [ false * ID [ ( true ) int [ ( - false ) ] ] [ ] bool }",
  "func ID ( ) { var ID : ] : ID var [ false * ID [ ( true ) int [ ( - false ) ] ] [ ] bool }",
  "func ID ( ) { var ID : ] : ID var [ false * ID [ ( true ) int [ ( - false ) ] ] [ ] bool }",
  ": ID ( ID func bool , ID : [ ] [ ] int ) { var ID : int var ID : [ ID [ ( 123 ) ] [ ID ] ] int } func ID ( ) { }",
  ": ID ( ID func bool , ID : [ ] [ ] int ) { var ID : int var ID : [ ID ) ( 123 [ ] [ ID ] ] int } func ID ( ) { }",
  ": ID ( ID func bool ID , : [ ] [ ] int ) { var ID : int var ID : [ ID ) ( 123 [ ] [ ID ] ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : bool { while ( true ( - ) ) { } if - ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : while ) : bool { int ( true ( - ) ) { } if - ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : while ) : bool { int ( true ( - ) ) { } if - ID { } } func ID ( ) { }",
  "func ID ( ID : [ true and 123 * - 123 - ] ID [ true ] [ ID - - ID ] [ ] bool ) { }",
  "func ID ( : ID [ true and 123 * - 123 - ] ID [ true ] [ ID - - ID ] [ ] bool ) { }",
  "func ID ( : ID [ true and 123 * - 123 - ] ID [ [ ] [ ID - - ID ] true ] bool ) { }",
  "func ID ( ID : [ ] bool ) : bool { var ID : int var ID : call { var ID : bool } int ID ( ) }",
  "func var ( ID : [ ] bool ) : bool { var ID : int ID ID : call { var ID : bool } int ID ( ) }",
  "func var ( ID : [ ] bool ) : bool { var ID : int ID ID : call ) var ID : bool } int ID ( { }",
  "func ID ( ID : [ ID [ ID ( ) [ ( false ) ] ] [ ( - 123 ) ) ] [ ] bool ) { } func ID ( ] { }",
  "func ID ( ID : [ ID [ ID ( ) false ( [ ) ] ] [ ( - 123 ) ) ] [ ] bool ) { } func ID ( ] { }",
  "func ID ( ID : [ ID [ ID ( ) false ( [ ) ] ] [ ( - 123 ) ) ] [ ] bool ) { } func ID ( ] { }",
  "func ID ( ) : bool { ) ( ( - true / true - ( false return - ID ) ) } func ID ( ) { }",
  "func ID ( ) : bool { ) ( ( - true / true - ( false ) - ID return ) } func ID ( ) { }",
  "func ID ( ) : bool { ) ( ( - true / true - ( false ) - ID return { } func ID ( ) ) }",
  "func ID ( : : int , ID ID int , ID : int ) : int { }",
  "func ID ( : : int } ID ID int , ID : int ) : int { ,",
  "func ID ( : : int } ID ID int , ID : int ) : int { ,",
  "func ID ( ID : int , ID : [ ] [ - ID - false * ( ( ID ) ) false * ] bool , ID : bool ) { }",
  "func ID ( ID : int , ID : [ ] [ ID ID - false * ( ( - ) ) false * ] bool , ID : bool ) { }",
  "func ID ( ID : int , ID : [ ] [ ID ) - false * ( ( - ) ) false * ] bool , ID : bool ID { }",
  "func ID [ ) : ( ] bool { var ID : bool var ID : int { var ID : int { var ID : bool } if - ID { } } { } } func ID ( ) { }",
  "func ID [ ) : ( ] bool { var ID ID bool var ID : int { var ID : int { var ID : bool } if - : { } } { } } func ID ( ) { }",
  "func ID [ ) : ( ] bool { var ID ID bool var ID : int { var ID : int { var ID : bool } if - : { } } { } } func ID ( ) { }",
  "func ID ( ID : [ ) ID ( ID [ ID ] [ ( true ) ] ) ( ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ) ID ( ID [ ID true [ ( ] ) ] ) ( ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ) ID ( ID [ ID true [ ( ] ) } ) ( ] bool ) { } func ID ( ) { ]",
  "func ID ( ID - [ - : - ID [ ( ID ( ( - ID ) ) ) ] ] int ) { }",
  "func } ( ID - [ - : - ID [ ( ID ( ( - ID ) ) ) ] ] int ) { ID",
  "func } ( ID - [ - : - { [ ( ID ( ( - ID ) ) ) ] ] int ) ID ID",
  "func ID ( ) : [ ( ID * ID - [ ID / - - - ( false ) ] [ ( - true ) ] ) ] int { } func ID ( ) { }",
  "] ID ( ) : [ ( ID * ID - [ ID / - - - ( false ) ] [ ( - true ) ] ) func int { } func ID ( ) { }",
  "func ID ( ID : int , ID ID bool , : : bool ) : int { ID ( ) [ 123 * - ( false ) ] [ true ] = ID print ID }",
  "func ID ( ID : int , ID ID bool , : ID bool ) : int { : ( ) [ 123 * - ( false ) ] [ true ] = ID print ID }",
  "func ID ( ID : int , ID ID bool - : ID bool ) : int { : ( ) [ 123 * , ( false ) ] [ true ] = ID print ID }",
  "func ID ( ) { ID ( ) [ true * ( true - ( true ] ) / ID ) [ true ] = - - - ( ( ID ) ) }",
  "func ID ( ) * ID ( ) [ true { ( true - ( true ] ) / ID ) [ true ] = - - - ( ( ID ) ) }",
  "func ID ( ) * ID ( ) [ true { ( true - true ( ] ) / ID ) [ true ] = - - - ( ( ID ) ) }",
  "func ID ( ) { var ID : bool while ID / ( ID ( ) [ ID ] [ - 123 ] ) func } ID = ID } { ID ( ) { }",
  "func ID ( ) { var ID : bool while ID / ( ID ( ) [ ID ] [ - 123 ] ) ID } ID = ID } { func ( ) { }",
  "func ID ( ) { var ID : bool while ID [ ( ID ( ) / ID ] [ - 123 ] ) ID } ID = ID } { func ( ) { }",
  "func : ( ID ID [ false - - true / ID ( ) * - false <= - 123 ] bool ) { }",
  "func : ( ID ID [ false - - true / ID ( ) * - false <= bool 123 ] - ) { }",
  "func : ( ID ID [ false - - true / - ( ) * ID false <= bool 123 ] - ) { }",
  "func ID ( ID : ID , ID : [ ID ( 123 * bool ( ) [ - ( ( - ( - - 123 ) ) ) ] / ID ) ] [ ] [ ] int , ID : [ ] bool ) { }",
  "func ID ( ID : ID , - : [ ID ( 123 * bool ( ) [ - ( ( - ( - ID 123 ) ) ) ] / ID ) ] [ ] [ ] int , ID : [ ] bool ) { }",
  "func ID ( ID : ID , - : [ ID ( 123 * bool ( ) [ - ( ( - ( - ID 123 ) ) ) ] / ] ) ] [ ] [ ID int , ID : [ ] bool ) { }",
  "func ID ( ) { var ID : ID ID ( - bool ( false * ( false ) / - ID ) ) = ID call ID ( ) }",
  "func ID var ) { ( ID : ID ID ( - bool ( false * ( false ) / - ID ) ) = ID call ID ( ) }",
  "func ID var ) { ( ID : ID ID ( ID bool ( false * ( false ) / - ID ) ) = ID call - ( ) }",
  "func ID ( - : bool , ID : [ ID false + ID + ( true - ID ) ] int ) { }",
  "func : ( - ID bool , ID : [ ID false + ID + ( true - ID ) ] int ) { }",
  "func : ( - ID bool ID ID : [ , false + ID + ( true - ID ) ] int ) { }",
  "func ID ( ) : int { var ID : bool if true * true / ID } - ID ( ) { } if ID { } +",
  "func ID ( ) : int } var ID : bool if true * true / ID } - ID ( ) { } if ID { { +",
  "func ) ( ID : int } var ID : bool if true * true / ID } - ID ( ) { } if ID { { +",
  "func ID ( ID : int , ID : int , ID : int ) true print ( { / ( ID ) ) }",
  "func ID ( ID : int , ID : int print ID : int ) true , ( { / ( ID ) ) }",
  "func { ( ID : int , ID : int print ID : int ) true , ( ID / ( ID ) ) }",
  "func ID ( int : [ ID ( ID [ ID [ ID ] ] ) ] ) { }",
  "func ID ( int { [ ID ( ID [ ID [ ID ] ] ) ] ) : }",
  "func ID ( int { [ ID ( ID [ : [ ID ] ] ) ] ) ID }",
  "func ID ( ) : int { var ID : int var ID ) [ ID ( : [ - ID ] [ - ( ID ) ] ] int }",
  "func ID ( ) : int { var ID : int var ID ] [ ID ( : [ - ID ] [ - ( ID ) ] ) int }",
  "func ID ( ) : int { var ID : int var ID ] [ ID ( : [ - ID ] int - ( ID ) ] ) [ }",
  "func ID ( ID : bool , ID : bool , ID true int ) : int { print - : * ID [ - ( false ) ] print ( ( false ) ) }",
  "func ID ( ID : bool , ID : bool , : true int ) ID int { print - : * ID [ - ( false ) ] print ( ( false ) ) }",
  "func ID ( ID : bool , ID : bool , : true int ) ID int { print - false * ID [ - ( false ) ] print ( ( : ) ) }",
  "func ID ( ) { var ] : [ ( false - ID [ ID ] [ true ID ) ] bool var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ] : [ ( false - ID [ ID ] [ true ) ) ] bool var ID : [ ] bool } func ID ( ID { }",
  "func ID ( ) { var ] ) [ ( false - ID [ ID ] [ true : ) ] bool var ID : [ ] bool } func ID ( ID { }",
  "func ID ( ) : [ ] [ ] int : var ID { int var ID : bool { var ID : [ - - false ] [ ] [ ] [ ] [ ] [ ] bool var ID : int } { } }",
  "func ID ( ) : [ ] [ ] int : var ID { int var ID : bool { var ID : } - - false ] [ ] [ ] [ ] [ ] [ ] bool var ID : int [ { } }",
  "func ID ( ) : [ ] [ ] int : var ID { int var ID : bool ] var ID : } - - false ] [ ] [ { [ ] [ ] [ ] bool var ID : int [ { } }",
  "func ID ( ) : [ } - ( false * ID ( ) / - ID ) ) ] [ ] [ ] [ ] int { } func ID ( ) { (",
  "func ID ( ) : [ } - ( false * ID ( ) / - ID ) ) ] [ ] [ ] [ ] int { } func ID ( ( { )",
  "func ID ( ) : [ } - ( false * ID ( [ / - ID ) ) ] ) ] [ ] [ ] int { } func ID ( ( { )",
  "func ID ( ID : [ ( true / true / ] != ( ID ) ) ] [ false bool ) { }",
  "func ID ( ID : [ / true / true ( ] != ( ID ) ) ] [ false bool ) { }",
  "func ID ( ID : [ / true / true bool ] != ( ID ) ) ] [ false ( ) { }",
  "func ID ( ID : int , ID : [ false - - * 123 * - ( ( 123 ) ) ID ID ] [ ] int , ID : bool ) { }",
  "func ID ( ID : int , ID : [ false - - * 123 * - ( ( 123 ) ) ID ID ] [ ] int , ID : bool ) { }",
  "func ID ( ID : int , ID : ) false - - * 123 * - ( ( 123 ) ) ID ID ] [ ] int , ID : bool [ { }",
  "func ID ( ID : [ ] [ - false / ( ID / - true ( ) [ true ] [ false ] / ( 123 ) ) ] [ ] [ ] int ) { }",
  "- ID ( ID : [ ] [ - false / ( ID / func true ( ) [ true ] [ false ] / ( 123 ) ) ] [ ] [ ] int ) { }",
  "- ID ( ID : [ ] [ - false / ( ID / func true ( ) int true ] [ false ] / ( 123 ) ) ] [ ] [ ] [ ) { }",
  "func ID ( ID : [ ID [ ( ( - ID ( ) ) ) ID ] [ ] int ) { } func ] ( ) { }",
  "func ID ) ) { while - ID ( - ( ( ( ID ) ( ) ) { } call ID ( ) } func ID ( ) { }",
  "func ID ) ) { while - ID ) - ( ( ( ID ) ( ( ) { } call ID ( ) } func ID ( ) { }",
  "func ID ) ) { while - } ) - ( ( ( ID ) ( ( ) { ID call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) : { { var ID : int while true / - 123 bool } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) : { { var ID : int while true } - 123 bool / } func ID ( ) { }",
  "func ID ( ID : [ false / true / true - - ( * true * true ) ] bool ) { }",
  "func ID ( ID : [ - / true / true false - ( * true * true ) ] bool ) { }",
  "func ID ( ID : [ - / true true true false - ( * / * true ) ] bool ) { }",
  "func ID ( ID : ) , ID : int ) : [ ID ( ID [ ( ID ) ] [ false ] ) ] bool { } func ID ( int { }",
  ") ID ( ID : ) , ID : int func : [ ID ( ID [ ( ID ) ] [ false ] ) ] bool { } func ID ( int { }",
  "func ID ( ) : bool { var ID : bool var ID : bool while - true and ID / - false / - - - - - ID { } print ( - 123 ) } { ID ( ) func }",
  "func ID ( ) : bool { var ID : bool / ID : bool while - true and ID var - false / - - - - - ID { } print ( - 123 ) } { ID ( ) func }",
  "func ID ( ) ID bool { var ID : bool / ID : bool while - true and ID var - false / - - - - - : { } print ( - 123 ) } { ID ( ) func }",
  "func ID ( ID : int , ID : [ ] int , ID : [ ID [ 123 * ( - ( ] ) ) * true true [ true ] ] [ ] [ ] int ) { }",
  "ID ID ( ID : int , ID : [ ] int , ID : [ func [ 123 * ( - ( ] ) ) * true true [ true ] ] [ ] [ ] int ) { }",
  "ID ID ( ID : int , ID : [ ] int , ID : [ func [ 123 ] ( - ( * ) ) * true true [ true ] ] [ ] [ ] int ) { }",
  "func ID ( ID : [ ] int , ID : ID ( - false and [ ( ) ) ] [ ] [ ] int ) { }",
  "func ID ( ID : [ ID int , ID : ] ( - false and [ ( ) ) ] [ ] [ ] int ) { }",
  "func ID ( ID - [ ID int , ID : ] ( : false and [ ( ) ) ] [ ] [ ] int ) { }",
  "( ID ( ) { call ID func ) return ID ( ID + ( false ) + ID ) }",
  "( ID ( ) { call ID func ) return ID ( ID + ( + ) false ID ) }",
  "( ID ( ) { call ID func ) return ID ( ID + ( + ) false ID ) }",
  "func ID ( ) : bool { var ID : int var ID : ) ID * ( ( - ( - - ( ( - ID ) ) [ ) ) * 123 ] bool }",
  "func ID ( ) : bool { var ID : int var ID : ) ID * ( ( - ( - - ( ( - ID bool ) [ ) ) * 123 ] ) }",
  "func ID ( ) : bool { var ID : int var ID : ) ID * ( ( - ( - } ( ( - ID bool ) [ ) ) * 123 ] ) -",
  "func ID ( ) { var ID while int : ( - - false / ( ID ) ) { } while 123 { } } func ID ( ) { }",
  "func ID ( ( { var ID while int : ( - - false / ) ID ) ) { } while 123 { } } func ID ( ) { }",
  "func ID ( ) { var ID while int : ( - - false / ) ID ( ) { } while 123 { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool ID , : [ ] [ ] [ ID ( ) [ ID ] ] bool ) { }",
  "func ID ( ID : int , ID : [ ] bool ID , : [ ] [ ] [ ID ( ) [ ID ] ] bool ) { }",
  "func ID ( ID : int , ID : [ ] bool ID , : } ] [ ] [ ID ( ) [ ID ] ] bool ) { [",
  "func ID ( ) { var ID : [ ] bool var ID : int if true = - - 123 * ID { } ID / 123 } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : int if true = - - 123 * ID { } ID / 123 } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool ID ID : int if true = - - 123 * ID { } ID / 123 } func var ( ) { }",
  "func ID ID ) { var ID : bool return ( - ID ( ID * - ( ( ) / ( - true ) ) ) }",
  "func ID * ) { var ID : bool return ( - ID ( ID ID - ( ( ) / ( - true ) ) ) }",
  "func ID * ) { var ID : bool return ( - ID ( ID - - ( ( ) / ( ID true ) ) ) }",
  "func ID ( ID : [ ] [ ] [ ] int , ID : int , ID : [ ] int ) { var ID : [ ( ( - - { ) ) ] int } func ID ( ) 123 }",
  "func ID ( ID : [ ] [ ] [ ] int , ID : int , ID [ : ] int ) { var ID : [ ( ( - - { ) ) ] int } func ID ( ) 123 }",
  "func ID ( ID : [ ] [ ] [ ] int , ID : int , func [ : ] int ) { var ID : [ ( ( - - { ) ) ] int } ID ID ( ) 123 }",
  "func ID ID ) { var ID : int var ID : bool call ID ( ) } func ( ( ) { var ID : [ ] bool ID = false ID = ID }",
  "func ID ID ) } var ID : int var ID : bool call ID ( ) { func ( ( ) { var ID : [ ] bool ID = false ID = ID }",
  "func ID ID ID } var ID : int var ID : bool call ) ( ) { func ( ( ) { var ID : [ ] bool ID = false ID = ID }",
  "func ID ( ID : [ ] bool , ID : [ ( ( ID ( ) [ 123 ] [ ( ( - ( ( ( - - ) ) ) ) ) ID ] ) ) ] int ) { }",
  "func ID ( ID : bool ] [ , ID : [ ( ( ID ( ) [ 123 ] [ ( ( - ( ( ( - - ) ) ) ) ) ID ] ) ) ] int ) { }",
  "func ID ( ID : bool ] [ ID , : [ ( ( ID ( ) [ 123 ] [ ( ( - ( ( ( - - ) ) ) ) ) ID ] ) ) ] int ) { }",
  "func ID ( ) { var ID } bool { var ID : int var ID : bool print true print ( 123 ) : }",
  "func ID ( : { var ID } bool { var ID : int var ID : bool print true print ( 123 ) ) }",
  "ID ID ( : { var ID } bool { var func : int var ID : bool print true print ( 123 ) ) }",
  "func ID ( ) { var ID 123 [ : / 123 ] [ ] bool var ID : [ ID ] bool }",
  "123 ID ( ) { var ID 123 [ : / func ] [ ] bool var ID : [ ID ] bool }",
  "123 ID ( ) { bool ID 123 [ : / func ] [ ] bool var ID : [ ID ] var }",
  "func ID ( ID : : , ID : int ) int bool { ID = - - - ( true ) }",
  "func ID ( ID : : { ID : int ) int bool , ID = - - - ( true ) }",
  "func ID ( ID : ID , int : int ) { var ID : int var ID : bool }",
  "func ID ( ID : ID , } : int ) { var ID : int var ID : bool int",
  "func var ( ID : ID , } : int ) { var ID : int ID ID : bool int",
  "func ID ( ) { while ( ( false * ID [ ( ( ID ID ) ] [ ID ] * - 123 ) ) { } ID = ) } func ID ( ) { }",
  "func ID ( ) { while ( ( false * ID } ( ( ID ID ) ] [ ID ] * - 123 ) ) { [ ID = ) } func ID ( ) { }",
  "func ID ( ) { while ( ( false * ID } ( ( ID [ ) ] [ ID ] * - 123 ) ) { ID ID = ) } func ID ( ) { }",
  "func ID ( ID bool int , ID : [ 123 + false - false ] [ ID ] : ) { }",
  "func ID ( ID bool int , ID : [ 123 + false - false ] [ ID ] : ) { }",
  "func ID ( ID bool int , ID : [ ) + false - false ] [ ID ] : 123 { }",
  "func ID ( ) : bool { var ID : int var ( : int { var ID : bool var ID : [ ] int call ID ( ID ) call ID ID ) } { } }",
  "func ID ( ) : bool { ID ID : int var ( : int { var ID : bool var ID : [ ] int call ID ( var ) call ID ID ) } { } }",
  "[ ID ( ) : bool { ID ID : int var ( : int { var ID : bool var ID : func ] int call ID ( var ) call ID ID ) } { } }",
  "func ID ( print : [ ] bool { var ID : [ ] bool while true / ID ( ) * true { } ) ID }",
  "func ID ( print : [ ] bool { var ID : [ ] bool } true / ID ( ) * true { while ) ID }",
  "func ID ( print : [ ] { { var ID : [ ] bool } true / ID ( ) * true bool while ) ID }",
  "func ID ( ) : [ ] bool { var ID : [ ) [ 123 * - - ( ID ] / ID ] int } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : ] ) [ 123 * - - ( ID [ / ID ] int } func ID ( ) { }",
  "( ID func ) : [ ] bool { var ID : ] ) [ 123 * - - ( ID [ / ID ] int } func ID ( ) { }",
  "func ID ( ID : [ ID ( ID [ ID + false + ( - 123 ) ] [ ( ID ) ] ) ] { ] bool ) [ } func ID ( ) { }",
  "func ID ( ID : [ ID ( ID [ ID + false + ( - 123 ) ] [ ( ID ) ] ) ] { ] bool ) [ ID func } ( ) { }",
  "func ID ( ID : ] ID ( ID [ ID + false + ( - 123 ) [ [ ( ID ) ] ) ] { ] bool ) [ ID func } ( ) { }",
  "func ID ] ID : [ ] int ) { var ID : [ ] int var ID : [ ( ID ) ] [ ( [ ] [ ] bool } func ID ( ) { }",
  "func [ ] ID : [ ] int ) { var ID : [ ] int var ID : ID ( ID ) ] [ ( [ ] [ ] bool } func ID ( ) { }",
  "func [ ] ID : [ ] int ) { func ID : [ ] int var ID : ID ( ID ) ] [ ( [ ] [ ] bool } var ID ( ) { }",
  "func ( ID ) { var ID : bool var ID : int call ID ( ID [ ID [ false ] [ ID ] ] [ ( ( - - ( true ) ) ) ] ) }",
  "func ( ID ) { var ID : bool var ID : int call ID ( ID [ ID [ false } [ ID ] ] [ ( ( - - ( true ) ) ) ] ) ]",
  "func func ( ID : [ ] bool , ID : int , ID : int ) { var ID : int var ID : [ ] [ ( ( false ) ) ] int } ID ID ( ) { }",
  "func func ( ID : [ ] bool , ID : int , ID : int ) { var ID : int var ID : ID ] [ ( ( false ) ) ] int } ID [ ( ) { }",
  "func func ( ID : [ ] bool , ID : int , ID : int ) { var ID : int var ID : ID ) [ ( ( false ) ) ] int } ID [ ( ] { }",
  "func ID ( ID : int ) : int { * ID : int return false / ( - ID var true / true ) }",
  "func ID ( ID : int * : int { ) ID : int return false / ( - ID var true / true ) }",
  "func ID ( ID : int * : int { ) ID : int return false / ( - ID var true / true ) }",
  "func ID ( ) { ) ID : int var ID : int call ID ( ) } func ID ( ID : int , ID : int , ID : bool var : bool { }",
  "func ID ( ) { ) ID : int var ID : int call ID ( ) } func ID ( ID : int , ID : int , ID : bool var : bool { }",
  "func ID ( ) { ) ID : int ( ID : int call ID var ) } func ID ( ID : int , ID : int , ID : bool var : bool { }",
  "func : ( ID : [ ] int , ID : int ) ID [ ] bool { var ID : [ ID / ID * ( ( - false ) ) ] [ ] [ ] [ ] bool }",
  "func : ( ID : [ ] int ( ID : int ) ID [ ] bool { var ID : [ ID / ID * , ( - false ) ) ] [ ] [ ] [ ] bool }",
  "func : ( ID : [ ] int ( ID : int ) ID [ , bool { var ID : [ ID / ID * ] ( - false ) ) ] [ ] [ ] [ ] bool }",
  "func ID ( ) : bool : var ID { int ID ( - - - ( ID ( ) ) ) = ( false ) }",
  "func ID ( ) : bool : var ID { int ID ( - - - ( ID ( ) ) ) = ( false ) }",
  "func ID ( ) : ( : var ID { int ID ( - - - ( ID ( ) ) ) = bool false ) }",
  "func ID ( ) { var ID : int ID [ - false * ( ( false ) ) * ( 123 ) ] = func - ( - true ) ) } ( ID ( ) { }",
  "func - ( ) { var ID : int ID [ - false * ( ( false ) ) * ( 123 ) ] = func - ( ID true ) ) } ( ID ( ) { }",
  "func - * ) { var ID : int ID [ - false ( ( ( false ) ) * ( 123 ) ] = func - ( ID true ) ) } ( ID ( ) { }",
  "func ID ( ) : [ ] int { { var ID : [ ] [ ( ID ( ) ) ] ] [ int } { } }",
  "func ID ( ) : [ ] int { { ] ID : [ var [ ( ID ( ) ) ] ] [ int } { } }",
  "func ID ( ) : [ ] int { { ] ID : [ var [ ( ID ( ) ) ] ] int [ } { } }",
  "func ID ( ) : int { var ID : [ ] int if ( true / - ( ID ) * ID } { } ID = true )",
  "func ID ( ) : int ID var ID : [ ] int if ( true / - ( { ) * ID } { } ID = true )",
  "func ID ( ) { int ID var ID : [ ] int if ( true / - ( { ) * ID } : } ID = true )",
  "func ID ( ID : int ) { call ID ( ID ( ID ID - - ( / ) * ID ) ) call ID ( ) }",
  "func ID ( ID : ID ) { call int ( ID ( ID ID - - ( / ) * ID ) ) call ID ( ) }",
  "func ID ( ID : ID call { ) int ( ID ( ID ID - - ( / ) * ID ) ) call ID ( ) }",
  "func ID ( ID : ( , ID : [ ] [ ID [ - ( int ID ) ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID } ( , ID : [ ] [ ID [ - ( int ID ) ) ] ] bool ) { } func ID ( ) { :",
  "func ID ( ID } ( , ID : ] ] [ ID [ - ( int ID ) ) ] [ bool ) { } func ID ( ) { :",
  "func ID ( ID : int , ID : int bool ID : int ) : , { }",
  "func ID } ID : int , ID : int , ID : int ) : bool { (",
  "func ID ( ) : [ ] [ ] int { : func ID ( ) : int { var ID : bool var ID } int call ID ( ) ID = ID }",
  "func ID ( ) : [ ] [ ] int { : func ID ( ) : int { bool ID : var var ID } int call ID ( ) ID = ID }",
  "func ID ( ) : [ ] [ ] int ( : func ID ( ) : int { bool ID : var var ID } int call ID { ) ID = ID }",
  "func ID ( ID : [ ] var ) { { var ID : int { int ID : int var ID : int ID = - 123 } } while - ID { } } func ID ( ) { }",
  "func ID ( ID : [ ] var ) { { var ID : int { int ID : int var ID : int ID = - 123 } } while - ID { } } func ID ( ) { }",
  "func ID ( ID : [ ] var ) { { var ID : int { int ID : = var ID : int ID int - 123 } } while - ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool while * / - - ID ( ID ) false ( ( - true ) ) { } if ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool while * / - - ID ( ID ) false ( ( - true ) ) ) } if ID { } } func ID ( { { }",
  "func ID ( ) { var ID : int var ID : bool ) * / - - ID ( ID ) false ( ( - true while ) ) } if ID { } } func ID ( { { }",
  "func ID ( ) : int { var ID : bool while ID ID 123 / false or ID or ID { } ID = - ( * ) } func ID ( ) { }",
  "func ID ( bool : int { var ID : ) while ID ID 123 / false or ID or ID { } ID = - ( * ) } func ID ( ) { }",
  "func ID ( bool : int { var ID : ) while ID ID 123 / false or ID or ID { } ID = - ( * ) } ID func ( ) { }",
  "func ID ( ID : bool ) { var ID : int var true : int if - ID [ - ID ] { } } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int var true : int if - ID [ - ID } { } } func ID ( ) { ]",
  "func ID ( ID : bool ) ID var ID : int var true : int if - ID [ - ID } { } } func { ( ) { ]",
  "func ID ( ) : bool { var ID : bool var ID : bool ID ( - true * - true > - ID ) = ( - ID ) ( ID call ) }",
  "func ID ( } : bool { var ID : bool var ID : bool ID ( - true * - true > - ID ) = ( - ID ) ( ID call ) )",
  "func ID ( } : bool { var ID : bool var ID : bool ID ( - true * - true > - ID ) = ( - ID ) ( ID call ) )",
  "func ID ( ) : int { call ID ( ) return } func ID ( ) { var ID : bool if - - { ID } }",
  "func ID ( ) : int { call ID { ) return } func ID ( ) { var ID : bool if - - ( ID } }",
  "func ID ( ) : int ID call ID { ) return } func ID ( ) { var { : bool if - - ( ID } }",
  "func ID ( ) : { ] [ ID [ ID * - - - ( ID ) * ( ( ID ) ) ] ] int [ }",
  "* ID ( ) : { ] [ ID [ ID * - - - ( ID ) func ( ( ID ) ) ] ] int [ }",
  "func ID - ) : [ ID ( ) [ 123 / ( ( ID ( ) ) ] ] int { }",
  "func ID - ) : [ ID ( ) [ 123 / ( ( ID ( ) ) ] ] int { }",
  "func ID - ) : [ ID ( ) [ ] / ( ( ID ( ) ) ] 123 int { }",
  "func ID ( ID : [ - true * ID [ ID * false - 123 ] ] ID ] int ) { } func [ ( ) { }",
  "func ID ( ID : [ - true * ID ] ID * false - 123 ] [ ID ] int ) { } func [ ( ) { }",
  "func ID ( ID : [ - true * ID ] ID * false - 123 ] [ [ ] int ) { } func ID ( ) { }",
  "func ID ( } : [ ID [ false / ID + - false * - ID / false ] [ ( ID ) ] ] int { )",
  "func ID ( } : [ ID [ false / - + - false * ID ID / false ] [ ( ID ) ] ] int { )",
  "func ID ( } : [ ID [ false / * + - false - ID ID / false ] [ ( ID ) ] ] int { )",
  "func ID ( ID : int - ID : bool , ID : int ) : bool { var ID : bool while , ( ( false ) ) { } }",
  "func ID var ID : int - ID : bool , ID : int ) : bool { ( ID : bool while , ( ( false ) ) { } }",
  "func ID var ID : int - ID : bool , ID : int ID : bool { ( ) : bool while , ( ( false ) ) { } }",
  "] ID ( ID : bool , ID : int ) { var ID : bool print ( - ID [ ID func [ 123 ] ) while - ( - false ) { } } func ID ( ) { }",
  "] ID ( ID : bool func ID : int ) { var ID : bool print ( - ID [ ID , [ 123 ] ) while - ( - false ) { } } func ID ( ) { }",
  "] ID ( ID : bool func ) : int ) { var ID : bool print ( - ID [ ID , [ 123 ] ) while - ( - false ) { } } func ID ( ID { }",
  "func ID ( ) { var ID : * var ID : bool print - 123 bool false and ( ( ID ) ) while true { } } func ID ( ) { }",
  "func ID ( ) { var and : * var ID : bool print - 123 bool false ID ( ( ID ) ) while true { } } func ID ( ) { }",
  "func ID ( ) { var and : * var ID ID bool print - 123 bool false ID ( ( : ) ) while true { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : ( print ID ( ( int false ) ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : ( print ( ID ( int false ) ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : ( print ( ID ( int false ) ) } } func ID ( ) { )",
  "func ID ( ID : bool ) { ID ( 123 * - false or } / - ID ) = ( ( ( ID ) ) ) print false 123",
  "func ID ( ID : bool ) { ID ( 123 * - ( or } / - ID ) = ( ( false ID ) ) ) print false 123",
  "func ID ( ID : bool ) { ID ( 123 * - ( or } / - false ) = ( ( false ID ) ) ) print ID 123",
  "func ID ( func : int , ID : int ) { call ID ( ID ( 123 / ( ID ) ) ) } ID ID ( ) { }",
  "func ID ( func : int , ID : int ) { call ID ( ID ( 123 / ( ) ) ) ) } ID ID ( ID { }",
  "func ID ) func : int , ID : int ) { call ID ( ID ( 123 / ( ) ) ) ( } ID ID ( ID { }",
  "func ID ( ) ID var { : [ ] int call ID ( - ID ( ( ( ( ( ( ( true ) ) ) ) ) ) ) ) }",
  "func ID ( ID { [ ] [ - ( true * ID ( ) [ true ] ) ] [ ] bool ) : } func ID ( ) { }",
  "func ID ( ID { [ ] [ - ( true * ID ( ) [ true ] ) ] [ ] bool ) { } func ID ( ) : }",
  "func ID ( ID : bool , ID : int , ID : { ) : bool int var ID : int var ID : int call ID ( ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : { , ID : int ) : bool int var ID : int var ID : int call ID ( ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : int return } func ID ( : ID bool , ID : bool ) { var ID : int { } { } }",
  "func ID : ) : int { var ID : int return } func ID ( : ID bool , ID : bool ) { var ID ( int { } { } }",
  "func ID : ) : int { var ID : int return } func ID ( : ID bool , ID bool : ) { var ID ( int { } { } }",
  "func ID ( ) : int { var ID : [ ] int } func ID ( var { var ID : bool ) ID : [ ( - ID ) ] int }",
  ") ID ( func : int { var ID : [ ] int } func ID ( var { var ID : bool ) ID : [ ( - ID ) ] int }",
  ") ID ( func : ] { var ID : [ int int } func ID ( var { var ID : bool ) ID : [ ( - ID ) ] int }",
  "func ID ( ) { var ID : { if ( false / ID [ ( 123 ) ] * ID ) { } if ID bool } } func ID ( ) { }",
  "func ID ( ) { var ID : { if ( ID / ID [ ( 123 ) ] * false ) { } if ID bool } } func ID ( ) { }",
  "func ID ( ) : { { } func ID ( ) int var ID : int var ID : bool while - ID ( ) { } print false }",
  "func ID ( ) : ID { } func ID ( ) int var { : int var ID : bool while - ID ( ) { } print false }",
  "func ID ( ) : ID { } func ID ( ) int var { : int var ID : bool while - ) ( ID { } print false }",
  "func ID ( ID : [ 123 + false / ( ID ( true ) ) / - - ( - 123 ) + ID ] bool ID { } func ) ( ) { }",
  "func ID ( ID : [ 123 + false / ID ID ( true ) ) / - - ( - 123 ) + ID ] bool ( { } func ) ( ) { }",
  "func ID ( ID : [ 123 + false / ID ID ( true - ) / ) - ( - 123 ) + ID ] bool ( { } func ) ( ) { }",
  "func ID ( ) { ID ( ) [ ] false / ( ID ) ) ] [ true ( = - ID while ID { } }",
  "func ID ( ) { ID ( ) [ ] false / ( ID ) ) ] [ true ( = - ID while ID { } }",
  "func ID ( ) { ID ( ( [ ] false / ( ID ) ) ] [ true ) = - ID while ID { } }",
  "func ID ( ) { ID ID : [ ] int if - - true / - var ( false ) * false { } }",
  "func ID ( ) { ID ID : [ ] int if - ( true / - var - false ) * false { } }",
  "func ID ( int { ID ID : [ ] ) if - ( true / - var - false ) * false { } }",
  "func ID ( ID : int ) { - ID : [ ID [ ( var ( true ) ) ] ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) : int ) { - ID : [ ID [ ( var ( true ID ) ] ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) : int ) { - ID : [ ID [ ( var ( true ID ) } ] int var ID : bool } func ID ( ) { ]",
  "func ID ( ) : bool ( print ( ( 123 / { true ) ) ) }",
  "func ) ( ) : bool ( print ( ( 123 / { true ) ) ID }",
  "func ) ( ) : bool ( print ( ( ) / { true ) 123 ID }",
  "func ID ( ) : int { var ID : bool ( true * ( ID [ - - false ] ) / - false { } call ID if ) }",
  "func ID ( ) : int { var ID : bool ( true * } ID [ - - false ] ) / - false { ( call ID if ) }",
  "func ID ( ) : int { var ID / bool ( true * } ID [ - - false ] ) : - false { ( call ID if ) }",
  "func ID ( ) { var ID : [ false / - false / false and - ( 123 ) and ( - ID ) } int var ID : int ]",
  "and ID ( ) { var ID : [ false / - false / false func - ( 123 ) and ( - ID ) } int var ID : int ]",
  "and ID ( ) { var ID : [ false / - false / false func var ( 123 ) and ( - ID ) } int - ID : int ]",
  "func ID ( ) : [ ( true * - true + ) or - ( 123 ) or ( ( ( ID ) ) false ) ] int { }",
  "func - ( ) : [ ( true * ID true + ) or - ( 123 ) or ( ( ( ID ) ) false ) ] int { }",
  "func - ( ) + [ ( true * ID true : ) or - ( 123 ) or ( ( ( ID ) ) false ) ] int { }",
  "func ID ( ) : [ ] [ ] [ ] [ ] ( { while ID [ ( true ) ] { } } func ID bool ) { }",
  "func ID ( ) : [ ] [ ] [ ] [ ] ( { while ID [ ( true ) } { ] } func ID bool ) { }",
  "func ID ( ) : [ ] } ] [ ] [ ] ( { while ID [ ( true ) [ { ] } func ID bool ) { }",
  "func ID ( ) : - 123 == true * - true - - true * ( ID ) / ( [ ID ) ] int { } func ID ( ) { }",
  "func ( ( ) : - 123 == true * - true - - true * ( ID ) / ID [ ID ) ] int { } func ID ( ) { }",
  "func ( ( ) : - 123 == true * - true - - true * ( ID ) / ID [ ID ) ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : ) ] int , ID : int ) : [ - ID [ - ID ] [ ( false [ ] ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : ) ] int , ID : int ) : [ ID ID [ - ID ] [ ( false [ ] ] [ ] bool { } func - ( ) { }",
  "func ID ( ID : bool , ID : ) ] int , ID : int ) : [ ID ID [ - ID ] [ ( false ] ] [ [ ] bool { } func - ( ) { }",
  "func ID ( ID : bool , ID : bool ) { if true ID false - false * 123 / and and false { } }",
  "func ID ( ID : bool , ID : bool ) { if true ID and - false * 123 / and false false { } }",
  "func ID ( ID : int , [ : ID ] [ ( - ( ( - - ID ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , [ : ID ] [ ( - { ( - - ID ) ) ) ] bool ) ( } func ID ( ) { }",
  "func ID ( ID : int , [ : ID ] [ - - { ( ( - ID ) ) ) ] bool ) ( } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool ID ( ) [ - ID [ ( - ( - ID ) ) ) ] = - - ( true ] if - - ID { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool ID ( ) [ - ID [ ( - ( - ID ) ) ) ] = - - ( true ] if - - ID { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID } bool ID ( ) [ - ID [ ( - ( - ID ) ) ) ] = - - ( true ] if - - ID { : } func ID ( ) { }",
  "func ID ( <= : [ false - true > ID ( ) [ false ID false ] [ - ID ] ] bool ) { }",
  "func ID ( <= : [ false - true > ID ( ) [ false ID false ] [ - ID } ] bool ) { ]",
  "func ID ( <= : [ false - true > ID ( ) [ false ID false ] [ - ID ] ] bool ) { }",
  "func ID ( ID : int , ID : [ ] [ ] int : { var ID ) int var ID : bool print ID ( ) }",
  ": ID ( ID : int , ID func [ ] [ ] int : { var ID ) int var ID : bool print ID ( ) }",
  ": ID ( ID : int , ID func [ ] [ ] int : { var ID ) int ( ID : bool print ID var ) }",
  "func ID ( ) : [ ( [ ID - ID ( ID ) ] [ - - false ] ) ] int { }",
  "func ID ( ) : [ ( [ ID - ID ( ID [ ] ) - - false ] ) ] int { }",
  "func ID ( ) : ID ( [ ID - ID ( [ [ ] ) - - false ] ) ] int { }",
  "func ID ( ID : [ ] bool , ID { bool ) : bool { } func ID ( ID : int ) : var ID : int var ID : int }",
  "func ID ( ID : [ ] bool , ID { bool ) : bool { } func ID ( ID : int int : var ID : ) var ID : int }",
  "func ID ( ID : [ ] bool , ID { bool ) : bool { : func ID ( ID : int int : var ID } ) var ID : int }",
  "func ID ( ID ID int , : : int ) { var ID : int if - ID [ - - ID ] [ false ] { } }",
  "func ID ( ID ID : , int : int ) { var ID : int if - ID [ - - ID ] [ false ] { } }",
  "func ID ( ID ID int , int : int ) { var ID : : if - ID [ - - ID ] [ false ] { } }",
  "func ID ( ) : int { return ( true + 123 - ) ( 123 ) ID }",
  "func ID ) ) : int { return ( true + 123 - ) ( 123 ( ID }",
  "func ID ) ( : int { return ( true + 123 - ) ( 123 ) ID }",
  "func ID ( ID : [ ] [ ] [ ] int , ID : int , ID : int ID : bool { var ) : int } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ : int , ID : int , ID : int ID ] bool { var ) : int } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ : int , ID : int , ID : int ID ] bool { var ) : int { func ID ( ) } }",
  "func ID ( ID : [ 123 - > ID ( ID ( ) + 123 ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ 123 - > ID ( ID ( ) + 123 ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) [ [ ] bool { var ID : [ ] int var ID : : ID [ ID ] [ false ] ] bool }",
  "func ID ( ) [ [ ] bool { var } : [ ] int var ID : : ID [ ID ] [ false ] ] bool ID",
  "func ID ] ) [ [ ] bool { var } : [ ] int var ID : : ID [ ID ] [ false ] ( bool ID",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : int var ID : int while ID ( ) } } print ID { func ID ( ) { }",
  "int ID ( ID : bool , ID : bool , ID : int ) { var ID : int var ID : func while ID ( ) } } print ID { func ID ( ) { }",
  "func ID ( } : int { while ID ( - ID [ ( ( ID ) ) ] [ ( ID ) ] ) { } { } )",
  "func ID ( } ID int { while : ( - ID [ ( ( ID ) ) ] [ ( ID ) ] ) { } { } )",
  "func ID ( } ID int { while : ( ID ID [ ( ( - ) ) ] [ ( ID ) ] ) { } { } )",
  "func ID ( ID { var ID : bool call ID ( - false / - - true / ( ( ) ) ) ) print 123 }",
  "false ID ( ID { var ID : bool call ID ( - func / - - true / ( ( ) ) ) ) print 123 }",
  "false ID ( ID { var ID : bool call true ( - func / - - ID / ( ( ) ) ) ) print 123 }",
  "func } ( ID : [ ID > ID ( ) [ ID ( 123 ) ] ] bool ) { ID",
  "func } ( ( : [ ID > ID ID ) [ ID ( 123 ) ] ] bool ) { ID",
  "func ID ( ) { ID - ( - - ( false + return - - ID ) ) }",
  "func ID ( ) { ID - ( - - - false + return - ( ID ) ) }",
  "func ID ( ID : bool ) : } ] int { var ID : int { var ID : int var ID : [ ] [ ( ID ) ] int [ print ID } func ID ( ) { }",
  "func ID ( ID : bool ) : } ] int { var ID : int { ID ID : int var ID : [ ] [ ( ID ) ] int [ print ID } func var ( ) { }",
  "func ID ( ID : bool ) : } ] int var { ID : int { ID ID : int var ID : [ ] [ ( ID ) ] int [ print ID } func var ( ) { }",
  "func ID ( ) { var ID : [ ID [ [ ID ( - ID ] ) ] [ ( ID ) ] ] [ ] int var ID : [ ] bool } func ID ( ) { }",
  "func ID ( var { ) ID : [ ID [ [ ID ( - ID ] ) ] [ ( ID ) ] ] [ ] int var ID : [ ] bool } func ID ( ) { }",
  "func ID ( var { ) ID : [ ID [ - ID ( [ ID ] ) ] [ ( ID ) ] ] [ ] int var ID : [ ] bool } func ID ( ) { }",
  ": ID ( ID : [ ] int ) func [ - ( - false / ( ( - - ( ID ) ) ) ) ] [ ] [ ] [ ] [ ] [ ] int { } func ID ( ) { }",
  ": ID ( ID : [ ] int ) func [ - ( - false / ( ( - - ( ID ) ) ) ) ] [ ] int ] [ ] [ ] [ ] [ { } func ID ( ) { }",
  ": ID ( ID : ) ] int ) func [ - ( - false / ( ( - - ( ID ) ) ) [ ] [ ] int ] [ ] [ ] [ ] [ { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : [ ( ID true - [ ] [ ID ] ) ] int }",
  "func ID : ID : bool , ID : int ) { var ID ( [ ( ID true - [ ] [ ID ] ) ] int }",
  "func ID : ID : bool , ID : int ) { var ID ( [ ( ID true - ID ] [ [ ] ) ] int }",
  "func ID ( ) { var ID : bool var ID : int call - ( ID ID - - false / - - ( true ) - false ) } func ID ( ) { }",
  "ID func ( ) { var ID : bool var ID : int call - ( ID ID - - false / - - ( true ) - false ) } func ID ( ) { }",
  "ID func ( ) { var ID : bool var ID : int call - ( - ID ID - false / - - ( true ) - false ) } func ID ( ) { }",
  "func ID ( ) { var ID : { ] bool call ID ( ) } func ID ( ID : [ ] [ ( 123 ) ] int ) [ }",
  "func ID ( ) { var ID : { ] ( call ID ( ) } func ID ( ID : [ ] [ bool 123 ) ] int ) [ }",
  "func ID ( ) [ var ID : { ] ( call ID ( ) } func ID ( ID : [ ] { bool 123 ) ] int ) [ }",
  "func ) ( ) : bool { ID ( ) [ ID ( - - ( ( false ) ) ) ] [ ( ( - true ID ) ] = false } func ID ( ) { }",
  "func ) ( ) : bool { ID ( ) [ ID ( - - ( ( false ) { ) ] [ ( ( - true ID ) ] = false } func ID ( ) ) }",
  "func ) ( ) : bool { ID ( ) [ ID ( - - ( ( false ) ] ) ] [ ( ( - true ID ) { = false } func ID ( ) ) }",
  "func ID ( ID : [ ID ( ) [ ID [ ID ( ) * ID * ] ( ( ID ) ) ] - ] bool ) { }",
  "func ID ( ID : [ ID ( ) - ID [ ID ( ) * ID * ] ( ( ID ) ) ] [ ] bool ) { }",
  "func ID ( ID : [ ] int , ID : [ ] [ ] bool , ID : bool ) { var ] : bool var ID : [ ID [ ] [ ] [ ] int }",
  "func ID ( ID : [ ] int , ID : [ ] [ ] bool , ID : bool ) { var ] : bool var ID : [ ID ] ] [ [ [ ] int }",
  "func ID ( ID : [ ] int , ID : [ ] [ ] bool , ID : bool ) { ] var : bool var ID : [ ID ] ] [ [ [ ] int }",
  "func ID ( ) : int { var ID : bool var ID : } ] [ ] int if - ( 123 ) { } ID = ID } func ID ( ) { [",
  "func ID } ) : int { var ID : bool var ID : } ] [ ] int if - ( 123 ) { } ID = ID ( func ID ( ) { [",
  "func ID } ) : int { var ID : bool if ID : } ] [ ] int var - ( 123 ) { } ID = ID ( func ID ( ) { [",
  "func ID ( ) { var ID : [ ID [ ID ( - - bool ) ] [ ID ] ] ID }",
  "func ID ( ) { var ID : [ ID ] ID ( - - bool ) [ [ ID ] ] ID }",
  "func ID ( ) { var ID : [ ID ] ID ( - - bool ID [ [ ID ] ] ) }",
  "func ID ( ID : [ ] int , ID : [ } [ ( ID ( ) ) ] ] bool , ID : [ ] bool ) { ID",
  "func ID ( ID : [ ] int , ID : [ } ) ( ID ( ) [ ] ] bool , ID : [ ] bool ) { ID",
  "func ] ( ID : [ ] int , ID : [ } ) ( ID ( ) [ ] ] bool , ID : [ ID bool ) { ID",
  "func ID ( ) : int { ID = ( 123 / - - - ] ID [ 123 - / false ) }",
  "func ID ( ) : int { ID = ( 123 / - - 123 ] ID [ - - / false ) }",
  "func ID ( ) : int { ID = ( 123 / - - ] 123 ID [ - - / false ) }",
  "func ID ( ) : int { ID ( - 123 * ID ( ( false ) ) * ID ) = } while - true { ID } func ID ( ) { }",
  "func ID ( ) : int { ID ( - 123 * ( ( ID false ) ) * ID ) = } while - true { ID } func ID ( ) { }",
  "func ID ( ) : int { ID ( - 123 * ( ( ID false ) ) * ID ) = } ID - true { ID } func while ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : int 123 return * ID + ( ID ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : int 123 return ( ID + ( ID ) } func ID * ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : ) 123 return ( ID + ( ID ) } func ID * int { }",
  "func ID < ID : int , ID : [ ] int ) : bool { ID ( true / ID ( ID ) = ID }",
  "func ID < ID : int , ID : ( ] int ) : bool { ID [ true / ID ( ID ) = ID }",
  "func ID < ID : int , ID : ( ] int ) : ID { ID [ true / ID ( bool ) = ID }",
  "func ID ( ) { var ID : ( return } func ID ( ) { ID = int ( ID ) ) while 123 { } }",
  "func ID ( ) { var ID : ( return } func ID ( ) { ID = ( int ID ) ) while 123 { } }",
  "func ID ( ) { var ID : ( return } ID ID ( ) { ID = ( int func ) ) while 123 { } }",
  "func ID ( ID : int ) : [ true - ( ID [ - ) ( - ID ) ( ] [ true ] ) ] bool { }",
  "func ID ( ID : int ) : - true - ( ID [ - ) ( [ ID ) ( ] [ true ] ) ] bool { }",
  "func ID true ID : int ) : - true - ( ID [ - ) ( [ ID ) ( ] [ ( ] ) ] bool { }",
  "func ID ( ID : bool , ID : int , : : bool ) { } func ID ( ) : bool { call ID ( ) { var ID ID [ ] bool var ID : bool } }",
  "func ID ( ID : bool , ID : : , : int bool ) { } func ID ( ) : bool { call ID ( ) { var ID ID [ ] bool var ID : bool } }",
  "func ID ( ) : bool { var ID : ) while ID ( - - - true * 123 / ( ID ) bool { } }",
  "func ID ( ) : bool { var ID : ) while ID ( - - - true * bool / ( ID ) 123 { } }",
  "func ID ( ) : bool { var ID : ) while ID ) - - - true * bool / ( ID ( 123 { } }",
  "func { ( ID : [ ] int , ID : int ) : bool ID var ID : int var ID : bool }",
  "func { ( ID : [ ] int , ID : int ) : bool ID var ID : int var ID : bool }",
  "func { ( ID : [ ] int ) ID : int , : bool ID var ID : int var ID : bool }",
  "func ID ( ID : [ 123 * } - ( ID ( - false ) ) ] bool ) { 123",
  "func ID ( ID : [ 123 * } - ( ID ( - false ) ) ] bool ) { 123",
  "func ID ( ID : [ 123 * - - ( ID ( } false ) ) ] bool ) { 123",
  "func ID ( ID : int , ID : bool ) : bool { print ID ( true [ - ) ] }",
  "func ID ( ID : int , ID : bool } : bool { print ID ( true [ - ) ] )",
  "func ID ( ID : int [ ID : bool } : bool { print ID ( true , - ) ] )",
  "func ID ( ID int int , ID : int ) { var ID : : if - false / - ( - 123 ) { } } func ID ( ) { }",
  "func ID ( ID int ) , ID : int ) { var ID : : if - false / - ( - 123 int { } } func ID ( ) { }",
  "func ID ( ID int ) , ID : int ) { var ID : : } - false / - ( - 123 int { if } func ID ( ) { }",
  "func : ( ID ID bool , ID : int ) { return - ( false + true / ID / ( ( 123 ) ) ) }",
  "func : / ID ID bool , ID : int ) { return - ( false + true ( ID / ( ( 123 ) ) ) }",
  "func : / ID ID bool , ID : int ) { return - ( false + ID ( true / ( ( 123 ) ) ) }",
  "func ID ( ID : bool , ID : } false * ID ( ID ( ID ) ) * 123 ] bool ) { } func ID ( ) { [",
  "func ID ( ID : bool , ID : } false ( ID ( ID ( ID ) ) * 123 ] bool ) { } func ID * ) { [",
  "func ID ( ID : bool , ID : } false ( ID ( ID ( ID ) ) { 123 ] bool ) { } func ID * ) * [",
  "func ID ( ID : int , ID : bool ) : [ } int { var ID : [ - true * - ( - ID ) ] [ ] [ ] bool var ID : [ ] bool } func ID ( ) { ]",
  "{ ID ( ) : int func while false + true { var ID : int var ID : [ ] int } } func ID ( ) { }",
  "{ ID ( ) : int func while false + true { var ID : int var ID : [ ] int { } func ID ( ) } }",
  "{ ID ( ) : int func while false + true { var ID : int ] ID : [ var int { } func ID ( ) } }",
  "func ID ( ) { ID [ ID [ - ( ( ID ) ) { ] = ID ] } } func ID ( ) { }",
  "func ID ( ) { ID [ ID [ - ( ( ID ) ) { ] = ID ] } } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) ( var ID : [ ( 123 / - ( - ( { - - ID ) ) ) * ( ( ID ) ) ) ] [ ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) ( var ID : [ ( 123 / - ( - ( ) - - ID ) { ) * ( ( ID ) ) ) ] [ ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : int , ID : int ( ( var ID : [ ( 123 / - ) - ( ) - - ID ) { ) * ( ( ID ) ) ) ] [ ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : [ ] int { print ( ID ( ) ) while ID { } } func ) ( ID { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : [ ] int { print ( ID ( ) ) while ID { } } ( ) func ID { }",
  "func ID ( ID ] bool , ID : bool , ID : int ) : [ : int { print ( ID ( ) ) while ID { } } ( ) func ID { }",
  "func ID ( : : [ ] int , ID ID int ) { var ID : int }",
  "func ID ( : : [ ID int , ID ] int ) { var ID : int }",
  "func ID ( : : [ ID int , ID : int ) { var ID ] int }",
  "func ID ( ) : bool { ID var : int var ID : bool }",
  "func ID ID ) : bool { ID var : int var ( : bool }",
  "func ID ID var : bool { ID ) : int var ( : bool }",
  "ID ID ( ID : bool , ID : [ - ( false / ( 123 / ( - ( true ) ) ) ) ] int , func : [ ] bool ) { } func ID ( ) { }",
  "ID ID ( ID : bool , ( : [ - ( false / ID 123 / ( - ( true ) ) ) ) ] int , func : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID bool bool , ID : : , ID : bool ) : [ ( - ( ID ) ) ] int { }",
  "func ID ( ID bool bool , ID : ) , ID : bool ) : [ ( - ( ID ) : ] int { }",
  "func ID ( { bool bool , ID : ) , ID : bool ) : [ ( - ( ID ) : ] int ID }",
  "func ID ( ) print { false and ( ( ID ( ( ( ID ) ) ) ) ) and ID } func ID ( ) { }",
  "func ID ( ) print { false and ID ( ( ( ( ( ID ) ) ) ) ) and ID } func ID ( ) { }",
  "func ID ( ) print { false and ID ( ( ( ( ( ID ) ) ) and ) ) ID } func ID ( ) { }",
  "func ID ( ) * bool { var ID : bool print ( - ID : 123 / ( ID ) ) }",
  "func ID ( ) * bool ) var ID : bool print ( - ID : 123 / ( ID ) { }",
  "func ID ( ) * bool ) var ID : bool print ( - ID : 123 / ( ID ) { }",
  "func ID ( ) : bool { var ID : [ ] [ ( - ) ( ID ) - ] bool }",
  "func - ( ) : bool { var ID : [ ] [ ( - ) ( ID ) ID ] bool }",
  "func - ( ) : bool { var ID : [ ] [ ( - ] ( ID ) ID ) bool }",
  "func ID ( ) : - false - 123 * false / - ID ( - - ( ( [ false ) ) ) ] int { }",
  "- ID ( ) : - false - 123 * false / - ID ( - func ( ( [ false ) ) ) ] int { }",
  "- ID ( [ : - false - 123 * false / - ID ( - func ( ( ) false ) ) ) ] int { }",
  "func 123 ( ) { } func ID ( ID : [ ] [ ( - ( - ID ) ) ] [ ] bool ) { }",
  "func 123 ( ) { } func ID ( ID : [ ] [ ( - ( ID - ) ) ] [ ] bool ) { }",
  "func ID ( ) { var ID : ( var ID : bool ID = ( ( ( 123 ) ) ) } func ID int ) { }",
  "func ID ( ) { var ID : ( var ID : } ID = ( ( ( 123 ) ) ) } func ID int ) { bool",
  "func ID ( ) { var ID : ( ) ID : } ID = ( ( ( 123 ) ) ) } func ID int var { bool",
  "func ID - ) : [ - ( ( ( ID ( ID ) ) ) ] int { }",
  "func ID - ) : [ - ( ( ( ID ( ID ) ) ) ] int { }",
  "func ID - ) : [ - ( ( ( ID ( ID ) ) ) ] int { }",
  "ID ID ( ) : bool { var ID : int if func ( ( - ( - true ) ) ) { } ID = - true } func ID ( ) { }",
  "ID ID ( ) : bool { var ID : int if func ( { - ( - true ) ) ) ( } ID = - true } func ID ( ) { }",
  "ID true ( ) : bool { var ID : int if func ( { - ( - ID ) ) ) ( } ID = - true } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ID ( ) [ - 123 * { ID ) ] [ - 123 ] ] bool , ID : int ) { } func ID ( ) ( }",
  "func ID ( ID : int , ID : [ ] [ ID ( ) [ - 123 * { ID ) ] func - 123 ] ] bool , ID : int ) { } [ ID ( ) ( }",
  "func ID ( ID : int , ID : [ ] [ ID ( ) [ - 123 * { ID ) ] func - 123 ] ] bool , ID ( int ) { } [ ID : ) ( }",
  "func func ( ) { var ID : int ID ( ( true / - - ID ( ) ) ) = - ID if false { } } ID ID ( ) { }",
  "func func ( ) { var ID : int ID ( ( true / - - ID ( ) { ) = - ID if false ) } } ID ID ( ) { }",
  "func ( ( ) { var ID : int ID ( ( true / - - ID ( ) { ) = - ID if false ) } } ID ID func ) { }",
  "func ID ( ) : int { var ID : [ ] bool { { ID ID : bool return ( - - - var ) } print ID } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] bool { { ID ID func bool return ( - - - var ) } print ID } } : ID ( ) { }",
  "int ID ( ) : func { var ID : [ ] bool { { ID ID func bool return ( - - - var ) } print ID } } : ID ( ) { }",
  "func ID { ID : [ ] bool ) : int ( var ID : int var ID : [ ] [ ( ID ) ] bool } func ID ( ) { }",
  "func int { ID : [ ] bool ) : int ( var ID : ID var ID : [ ] [ ( ID ) ] bool } func ID ( ) { }",
  "func int { ID : [ ] bool ) : int ( var ID : ID var ) : [ ] [ ( ID ) ] bool } func ID ( ID { }",
  "func ID } ) : int { var ID : bool while - ( ( ( ID ) ) ) { ( } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool while - ( ( ( ID ) ) ) { ( } func ID } ) { }",
  "func ID ( ) : int { var ID : bool while - ( ( ( ID ) ) ) { ( } func ID } ) { }",
  "func ID ( ) : int { var ID : bool var ID : [ ID [ ( - - - ( 123 bool ) ] ] ) }",
  "func ID ( ID : int , ID : [ false * - ( - ID [ ( false ) ] ) ] , ] [ ] bool [ ID : [ ] [ ] bool ) { }",
  "func ID ( ID : int , ID : [ false * - ( : ID [ ( false ) ] ) ] , ] [ ] bool [ ID - [ ] [ ] bool ) { }",
  "func ID ( ID : int , ID : [ false * - ( : ID [ ( false ) ] ) ] , [ [ ] bool [ ID - ] ] [ ] bool ) { }",
  "func ID ( ) : bool { var ID 123 int var ID : [ ] bool print - - ( : ) if - - ID { } }",
  "func ID ( ) : bool { var ID ID int var 123 : [ ] bool print - - ( : ) if - - ID { } }",
  "func ID ( ) : bool { var ID ID int var 123 : [ ] bool print - - ( : ) if - - ID { } }",
  "func ID ) ( : int { var ID : int print - ID ( ID ( ( - - ( ID ) ) ) ) } func ID ( ) { }",
  ") ID ) ( : int { var ID : int print - ID ( ID ( ( - - ( ID ) ) func ) } func ID ( ) { }",
  ") ID ) ( ( int { var ID : int print - ID : ID ( ( - - ( ID ) ) func ) } func ID ( ) { }",
  "func ID ( - : [ ] int , ID : int ) { return true / ( ID ( ) ) / ID - ID }",
  "func ( ( - : [ ] int , ID : int ) { return true / ID ID ( ) ) / ID - ID }",
  "func ( ( - : [ ] int , ID : int ) { return true / ID ID ( } ) / ID - ID )",
  "func ID ( ) : int { if ID * true * ID ( ID [ - ( ( false ) ) ) ) { } } func ID ( ] { }",
  "func ID ( ) { int : if ID * true * ID ( ID [ - ( ( false ) ) ) ) { } } func ID ( ] { }",
  "func ID ( ) { int : if ID * } * ID ( ID [ - ( ( false ) ) ) ) { } } func ID ( ] { true",
  "func ID ( ) : } { var ID : [ ] [ - 123 * - true and 123 ] [ ] [ ] [ ] int var ID : bool } func ID ( ) { bool",
  "func ID ( ) : } { var } : [ ] [ - 123 * - true and 123 ] [ ] [ ] [ ] int var ID : bool ID func ID ( ) { bool",
  ") ID ( func : } { var } : [ ] [ - 123 * - true and 123 ] [ ] [ ] [ ] int var ID : bool ID func ID ( ) { bool",
  "func ID ( ) : int { var ID : [ - - ID ( ) * - false + - ( - true ) - true ] var int ID : [ ] [ ] [ ] int }",
  "func ( ( ) : int { var ID : [ - - ID ( ) * - false + - ID - true ) - true ] var int ID : [ ] [ ] [ ] int }",
  "func ( ( ) : int { var ID : [ - - ID ( ) * - ID + - false - true ) - true ] var int ID : [ ] [ ] [ ] int }",
  "func ID ( ) { var ID : bool if - ( true * ( ID ) ) { } call ( ( ) } func ID ID ) { }",
  "func ID ( ) { var ID : bool if - ( true * ( ID ) ) { } call { ( ) } func ID ID ) ( }",
  "func ID ( : { var ID ) bool if - ( true * ( ID ) ) { } call { ( ) } func ID ID ) ( }",
  "func ID ID ID : int ) : [ ] int { var ( : bool var ID : bool if ID [ ID ] { } }",
  "func ID ID ID : int ) : [ ] ] { var ( : bool var ID : bool if ID [ ID int { } }",
  "func ID ID ID : int ) [ : ] ] { var ( : bool var ID : bool if ID [ ID int { } }",
  "func ID / ) : bool { var ID : bool print true - ( 123 ( true * 123 ) }",
  "( ID / ) : bool { var ID : bool print true - func 123 ( true * 123 ) }",
  "( ID / ) : bool { var ID : bool print true - func true ( 123 * 123 ) }",
  "( ID ( ID : int ) : bool { var ID : int var ID : [ ] int { var ID : int var ID : [ 123 ] bool } call ID ( ) } func ID func ) { }",
  "( ID ( ID : int ) : bool { var ID : int var ID call [ ] int { var ID : int var ID : [ 123 ] bool } : ID ( ) } func ID func ) { }",
  "( ID ( ID : int ) : bool { var : : int var ID call [ ] int { var ID : int var ID ID [ 123 ] bool } : ID ( ) } func ID func ) { }",
  "func ID ( ID : bool bool { var ID : ) return } func ID ( ID : [ ID ( ) + true ] bool ) { }",
  "func ID ( ID : ) bool { var ID : ) return } func ID ( ID : [ ID ( bool + true ] bool ) { }",
  "func ID ( ID : ] bool { var ID : ) return } func ID ( ID : [ ID ( bool + true ) bool ) { }",
  "func ID ( ID : int , - : int ) : bool { var ID : [ 123 / - ID [ ID - 123 ] * ID ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : int , - : int ) : bool { var : : [ 123 / - ID [ ID - 123 ] * ID ] bool var ID ID bool } func ID ( ) { }",
  "func ID ( ID : int , - * int ) : bool { var : : [ 123 / - ID [ ID - 123 ] : ID ] bool var ID ID bool } func ID ( ) { }",
  "func ID ( ) : [ ( - ID [ - func ID ) ] [ ( ID ) ] ) ] [ ] [ ] int { } ( ID ( ) { }",
  "func ( ( ) : [ ( - ID [ - func ID ) ] [ ID ID ) ] ) ] [ ] [ ] int { } ( ID ( ) { }",
  "func ( ( ) : [ ( - ID ID - func ID ) ] [ ID [ ) ] ) ] [ ] [ ] int { } ( ID ( ) { }",
  "func ID ( ) { return true / ID * 123 [ - - true / true ] } func ID ( ) { }",
  "func ID ( ) { return true / ID * 123 [ - - ) / true ] } func ID ( true { }",
  "func / ( ) { return true / ID * 123 [ - - ) ID true ] } func ID ( true { }",
  "func ID ( ) { var ) : bool var ID : bool while - - ID + ( ( - - ID ID ) { } while ID { } }",
  "func ID ( ) { var ) : bool var ID : bool ID - - ID + ( ( - - ID while ) { } while ID { } }",
  "func ID ( ) { var bool : ) var ID : bool ID - - ID + ( ( - - ID while ) { } while ID { } }",
  "func ID ( : ) [ - ( false - true / true - - - - false ) ] int { }",
  "- ID ( : ) [ - ( false - true / true - - func - false ) ] int { }",
  "- ID ( : ) [ - ( false - { / true - - func - false ) ] int true }",
  "func ID ( ID : bool ID ( ( ( false / 123 ) ) ) ] [ ) { } func ID ( ) { }",
  "func ID ( ID : bool ID ( ( ( false / 123 ) ) ) ] [ ) { } func ID ( ) { }",
  "func ID ( ID : bool ID ( ( { false / 123 ) ) ) ] [ ) ( } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ID - - [ ID ( - ID ) ] ] [ ] int , ID : [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ID - - [ ID ( - ID ) ] ] [ ] int , ID : [ ] [ ] ) int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ID - - [ ID ( - ID ) ] ] [ ] int func ID : [ ] [ ] ) int { } , ID ( ) { }",
  "func ID ( ) : int ( var ID : bool var ID : int print true * - ( { ( ( ( ( - true ) ) ) ) ) ) * - ( - ID ) } func ID ( ) { }",
  "func ID ( ) : int ( var ID : bool var ID : int print true * - ( { ( ( ( - - true ) ) ) ) ) ) * - ( ( ID ) } func ID ( ) { }",
  "func ID ( ) : int ( var ID : bool var ID : int print true * - { { ( ( ( - - true ) ) ) ) ) ) * - ( ( ID ) } func ID ( ) ( }",
  "ID func ( ID : int ) { call ID ( ID ( - ( ID ) ) ) if ID { } }",
  "ID func ( ID : ) int { call ID ( ID ( - ( ID ) ) ) if ID { } }",
  "ID func ( ID : ) int { call ID ( ID ( - ( ID ) ) ) if ID { } }",
  "func ID func ) : [ ] [ ] [ - ID ( - ( false ) ) ] int { } ( ID ( ) { }",
  "func ID func ) : [ ] [ ] [ - ID ( - ( false ) ) ] int { } ( ID ( ) { }",
  "func ID - ) : [ ] [ ] [ func ID ( - ( false ) ) ] int { } ( ID ( ) { }",
  "func ID ( ID : [ ( ID [ == false - true / false / ID ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ( ID [ == { - true / false / ID ] ) ] bool ) { } func ID ( ) false }",
  "func ID ( ID : [ ( } [ == { - true / false / ID ] ) ] bool ) { } func ID ( ) false ID",
  "func ID ( ID : [ ] : ) bool [ ] bool { }",
  "func ID ( ID : } ] : ) bool [ ] bool { [",
  "func ID ( ID : } ] : { bool [ ] bool ) [",
  "func ID ( ID : [ ] int , ID : int while { var ID : int var ID : bool ) ( - ( ID ) ) { } }",
  "func ID ( ID : [ ] int , ID : ( while { var ID : int var ID : bool ) int - ( ID ) ) { } }",
  "func ID ( ) { return ID / - true * - ID [ 123 * - - - } ] [ ID ] false",
  "func ID ( ) { return ID / - - * - ID [ 123 * - - true } ] [ ID ] false",
  "func ID ( * { return ID / - - * - ID [ 123 ) - - true } ] [ ID ] false",
  "func ( ID ID : [ ID [ 123 + ( - false * ID / ( ( ID ) ) ) - false ] [ ID ] ] int ) { }",
  "func ( ID ID : [ ID { 123 + ( - false * ID / ( ( ID ) ) ) - false ] [ ID ] ] int ) [ }",
  "func ID ( ID : [ ] bool , ID : [ ID ( 123 / - { ID ) ] bool ) - }",
  "func ID ( ID : [ ] bool , ID : [ ID ID 123 / - { ( ) ] bool ) - }",
  "func ID ( ID : [ ] bool , ID 123 [ ID ID : / - { ( ) ] bool ) - }",
  "func bool ( ID : [ ] int ) { var ID : [ - - ID ( ) [ - ID ] ] ID var ID : bool }",
  "func bool ( - : [ ] int ) { var ID : [ - ID ID ( ) [ - ID ] ] ID var ID : bool }",
  "func ID ( ) { var ID ID [ ] [ ( - - ID [ : ] [ false ] ) ] [ ] int }",
  "func ID ( ) { var ID ID [ ] [ ( - ] ID [ : - [ false ] ) ] [ ] int }",
  "func ID ( ) ( var ID ID [ ] [ { - ] ID [ : - [ false ] ) ] [ ] int }",
  "func ID ( ID ) int , ID : int ) : bool { ID ( ) [ ( ID ) ] [ false ] = - ID } func ID ( : { }",
  "func ID ( ID ) int , ID : int ) : bool { ID ( ) [ ( ID ) ] [ false : = - ID } func ID ( ] { }",
  "func ID ( ID ) int , { : int ) : bool ID ID ( ) [ ( ID ) ] [ false : = - ID } func ID ( ] { }",
  "func ID ( ) : ] { var ID : [ ] [ ] bool var ID : [ ] bool } func ID ( ID : int , ID : [ bool bool ) { }",
  "func ID ID ) : ] { var ( : [ ] [ ] bool var ID : [ ] bool } func ID ( ID : int , ID : [ bool bool ) { }",
  "func ID ID ) : ] { bool ( : [ ] [ ] bool var ID : [ ] bool } func ID ( ID : int , ID : [ var bool ) { }",
  "func ID ( ID : bool , ID : bool ) { { var ID : bool var call : int call ID ( ) call ID ( ( - 123 ) ) } ID ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ( { { var ID : bool var call : int call ID ( ) call ID ( ( - 123 ) ) } ID ID ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ( { { var ID : bool var call : int call ID ( ) call ID ( ( - ) ) 123 } ID ID ) ) } func ID ( ) { }",
  "func ID ( ) : int { print ( ( 123 + false * false * true ( ) } func ID ) ) { }",
  "func ID ( ) : int { print ( ( 123 + * false false * true ( ) } func ID ) ) { }",
  "func ID ( ) : int { print ( ( 123 + * false false * true ( ) } func ID ) ) { }",
  "func ID ( ) ( [ ] [ - ( ID * 123 / true - ( ( : ( true ) ) ) ) - - true ) ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) ( [ ] [ - ( ID * 123 ] true - ( ( : ( true ) ) ) ) - - true ) ] [ / [ ] bool { } func ID ( ) { }",
  "func ID ( * ( [ ] [ - ( ID ) 123 ] true - ( ( : ( true ) ) ) ) - - true ) ] [ / [ ] bool { } func ID ( ) { }",
  "func ID ( ( { var ID : [ ] int return ( ID * - - - ID * ID ) } func ID ) ) { }",
  "func ID ( ( { var ID : [ ] int return ( ID * - - - ID * ID ) } func ID ) ) { }",
  "var ID ( ( { func ID : [ ] int return ( ID * - - - ID * ID ) } func ID ) ) { }",
  "func ID ( ) { var ID : ] [ bool var ID : int }",
  "func ID ( ) { var ID : int [ bool var ID : ] }",
  "func : ( ) { var ID : int [ bool var ID ID ] }",
  "func ID ( ID : [ ] int , ID : [ ] ) ) : bool { var ID : int if ( ( true ) bool { } if ID { } }",
  "func ID ( ID : [ ] int , if : [ ] ) ) : bool { var ID : int ID ( ( true ) bool { } if ID { } }",
  "func ID ( } : [ ] int , if : [ ] ) ) : bool { var ID : int ID ( ( true ) bool { } if ID { ID }",
  "func ID ( ) : int { var ID : [ ] int var ID : bool return true / true - ( ID ) + - } true ) ( func ID ( ) { }",
  "func ID ( true : int { var ID : [ ] int var ID : bool return true / true - ( ID ) + - } ) ) ( func ID ( ) { }",
  "func ID ( true : int { var ID : [ ] int var ID : bool return true ) true - ( ID ) + - } ) / ( func ID ( ) { }",
  "func ID ( ) : int { var ID : bool print ( false <= - ( true ) print ) - false } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool ( print false <= - ( true ) print ) - false } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool ( ID false <= - ( true ) print ) - false } func print ( ) { }",
  "func ID ( ) { while ID / 123 - ( - - 123 / ID * - - ( true ) ) + true { } ) - ( ( ID ) ) { } } func ID ( if { }",
  "func ID ( ) { while ID / 123 - ( - - 123 / ID * - - ( true ) ) + true { } ) { ( ( ID ) ) - } } func ID ( if { }",
  "func ID ( ) { var ID : int { var ID : [ ) bool print - - - ( ( ID ) ] } }",
  "func ID ( ) { var ID : int { var print : [ ) bool ID - - - ( ( ID ) ] } }",
  "func ID ( ) { var ID : int { var print : [ ) bool ID ( - - - ( ID ) ] } }",
  "func ] ( ID : int ) : int { var ID : [ ( ( ID [ false ] ) ) ID bool } func ID ( ) { }",
  "func ] ( ID : int ) { int { var ID : [ ( ( ID [ false ] ) ) ID bool } func ID ( ) : }",
  "func ] ( ID : int ) { int { var ID : [ ( ( ID [ false ] ) ) ID bool } } ID ( ) : func",
  "func ID ( ID : bool + : [ - 123 / - 123 - - - ID * - 123 * false ) ID ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : bool ID : [ - 123 / - 123 - - - + * - 123 * false ) ID ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : { ID : [ - 123 / - 123 - - - + * - 123 * false ) ID ] [ ] bool { } func ID ( ) bool }",
  "func : ( ID ID [ ] int ) { var ID : int { var ID : int call ID ( - false ) } print - 123 } func ID ( ) { }",
  "func : ( ID ID [ ] int ) { var ID : ( { var ID : int call ID ( - false ) } print - 123 } func ID int ) { }",
  "func : ( { ID [ ] int ) { var ID : ( { var ID : int call ID ( - false ) } print - 123 } func ID int ) ID }",
  "func ID ( ID : int ) { { var ID : bool print - ( ( 123 ID ) ) ) ID = ( } while - 123 { } }",
  "func ID ( ID : int ) { { var ) : bool print - ( ( 123 ID ) ID ) ID = ( } while - 123 { } }",
  "func ID ( ID : int , / : int ) : [ ] [ ID [ true * - - false ID 123 ] ] [ ] int { }",
  "func ID ( ID : int , / : int [ : [ ] ) ID [ true * - - false ID 123 ] ] [ ] int { }",
  "func ID ( ID : int , / : int [ : [ ] ) ID [ true * ] - false ID 123 ] - [ ] int { }",
  ") ID ( ) { var ID : int call ID ( ) print ( ( ( ID ) ) func } func ID ( ) { }",
  ") ID ( ) { var ID : int call ID ( ) print ( ( ( ID ) ) func } func ID ( ) { }",
  ") ID ( ) ) var ID : int call ID ( ) print ( ( ( ID ) { func } func ID ( ) { }",
  "func ID ( ) : int { var ID : func ] bool var ID : [ true / false - 123 <= ID ] [ ] [ ] [ ] [ ] [ ] int } [ ID ( ) { }",
  "func ID ( ) : int { var ID : func ] { var ID : [ true / false - 123 <= ID ] [ ] [ ] [ ] [ ] [ ] int } [ ID ( ) bool }",
  "func ID ( ) : int { var ID : func ] { var ID : [ true / false - 123 <= ID ] [ ] [ ] [ ] } ] [ ] int [ [ ID ( ) bool }",
  "func ID ( ID : bool ) : 123 ( false * 123 * [ < - - ID ) ] [ ] bool { }",
  "func ID ( ID : ( ) : 123 bool false * 123 * [ < - - ID ) ] [ ] bool { }",
  "func ID ( ID : ( - : 123 bool false * 123 * [ < ) - ID ) ] [ ] bool { }",
  "func ] ( ) : [ - ID [ ID [ ID ( ) [ ( ID ) ID ] [ ID ] ] [ ID ] ] int { }",
  "func ] ( ) : [ - ID [ ID [ ID ( ) [ ( ID ) ID ] [ ID ] ] [ ID ] ] int { }",
  "func ] ( ) : [ - ID [ ID [ ID ( ) [ ( ID ) ID ] [ ID ] ] [ ID ] ] int { }",
  "func ID ( ID : [ ] int , ID : [ ( ( ( ( 123 ) ) ) ) ] bool , { : [ ] bool ) ID }",
  "func ID ( : : [ ] int , ID ID [ ( ( ( ( 123 ) ) ) ) ] bool , { : [ ] bool ) ID }",
  "func ID ( : [ : ] int , ID ID [ ( ( ( ( 123 ) ) ) ) ] bool , { : [ ] bool ) ID }",
  "func ID ( ) : [ - ( false / 123 * ID ( ) ID ( ( [ ) ) ] ) ] bool { } func ID ( ) { }",
  "func ID ID ) : [ - ( false / 123 * ( ( ) ID ( ( [ ) ) ] ) ] bool { } func ID ( ) { }",
  "func ID ID ) : [ - ( false / 123 * ( ( ) ID ( ] [ ) ) ( ) ] bool { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] [ true / true != - ) ( ID [ - false ] ] bool { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] [ true / true != - ) ( ID [ - false ] ] bool { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] [ true [ true != - ) ( ID / - false ] ] bool { } func ID ( ) { }",
  "func ID ( : { var ID ) bool call ID ( ( ID [ false / true ] ) ) } func ID ( ) { }",
  "func ID ( : { var ID ) bool call ID ( ( ID [ false / true ] ) ) } func ID ( ) { }",
  "func ID ( } { var ID ) bool call ID ( ( ID [ false / true ] ) ) : func ID ( ) { }",
  "func ID ( ) : [ ( - ( ID [ ( ID ( - ( ( ) ) ) ) ] ) ) ] bool { } func ID ( ) { }",
  "func ID ( ( : [ ( - ) ID [ ( ID ( - ( ( ) ) ) ) ] ) ) ] bool { } func ID ( ) { }",
  "func ID ( ( ] [ ( - ) ID [ ( ID ( - ( ( ) ) ) ) : ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) - var ID : [ 123 == ID ( { true + ( - ( - - ID ) ) - 123 ) ] bool var ID : [ ] int } func ID ( ) { }",
  "func ID ( ) - var ID : [ 123 == ID ( { true + ( - ( - - ID ) ) - 123 ) ] ID var ID : [ ] int } func bool ( ) { }",
  ") ID ( ) - var ID : [ 123 == ID ( { true + ( - ( - - ID ) ) - 123 func ] ID var ID : [ ] int } func bool ( ) { }",
  "func ID func ) : bool { var ID : bool call ID ( ) return ( ( ID ) ) } ( ID ( ) { }",
  "func ID func ) : bool { ( ID : bool call ID var ) return ( ( ID ) ) } ( ID ( ) { }",
  "func ID func ) : bool { ( ID : bool ( ID var ) return call ( ID ) ) } ( ID ( ) { }",
  "func ID ( ID : bool ) { ID [ ( ( ID ) ( ( ( ID ) ) ) ] [ - ID ] ) [ ] [ false ] = - - false } func ID ( ) { }",
  "( ID ( ID : bool ) { ID [ ( ( ID ) func ( ( ID ) ) ) ] [ - ID ] ) [ ] [ false ] = - - false } func ID ( ) { }",
  "( ID ( ID : bool ) { ID [ ( ( ID ) func ( } ID ) ) ) ] [ - ID ] ) [ ] [ false ] = - - false ( func ID ( ) { }",
  "func ID - ID : [ ( ID ( false * - false + true / - ( ( true ) ) / true + true ) ] [ ] bool ) { }",
  "func ID - ID : [ ( ID ( false * - false + true / - ( ( true ) ) / true + true ) ] [ ] bool ) { }",
  "func ID - ID : [ ( ID ( ) * - false + true / - ( ( true ) false / true + true ) ] [ ] bool ) { }",
  "func ID ( ID ) [ false or ( ( - ( ( ID ) ) ) ) ] [ ] int : { } func ID ( ) { }",
  "func ID ( ID ) [ ] or ( ( - ( ( ID ) ) ) ) false [ ] int : { } func ID ( ) { }",
  "func ] ( ID ) [ ID or ( ( - ( ( ID ) ) ) ) false [ ] int : { } func ID ( ) { }",
  "func ID ( ) if [ ] int { var ID : bool var ID : [ ] int : ID ( ) / ( - false ) { } if ( - false ) { } } func ID ( ) { }",
  "ID ID ( ) if [ ] int { var func : bool var ID : [ ] int : ID ( ) / ( - false ) { } if ( - false ) { } } func ID ( ) { }",
  "ID ID ( ) if [ ] int { var func { bool var ID : [ ] int : ID ( ) / ( - false ) { } if ( - false ) : } } func ID ( ) { }",
  "func ID ( ) { print - true { ID * 123 * ID [ ( - true ) ] + ( ID ) } func ID ( ) - }",
  "func - ( ) { print ID true { ID * 123 * ID [ ( - true ) ] + ( ID ) } func ID ( ) - }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { if true + ( ID ) - - - ID { = ID } 123 } func ID ( ) { }",
  "func ( ( ID : bool , ID : int , ID : int ) : bool { if true + ( ID ) - - - ID { = ID } 123 } func ID ID ) { }",
  "func ID : ) { var ID ( [ - ID / true / false + 123 * ( ( ID ) ) - - true ] bool var ID : int }",
  "false ID : ) { var ID ( [ - ID / true / func + 123 * ( ( ID ) ) - - true ] bool var ID : int }",
  "false ID : ) { var ID ( [ ) ID / true / func + 123 * ( ( ID ) - - - true ] bool var ID : int }",
  "func ID ( ) : bool { var ID : bool print ID ( ( ID } ) ) ) ( func ID ( ) { }",
  "bool ID ( ) : bool { var ID : func print ID ( ( ID } ) ) ) ( func ID ( ) { }",
  "bool ID ( ) : bool ) var ID : func print ID ( ( ID } { ) ) ( func ID ( ) { }",
  "func ID ( ) { var ID 123 [ ] [ ] int print ( - false - ID - - ( ( : ) ) ) print ( ID ) } func ID ( ) { }",
  "func ID ( ) { var ID 123 [ ] [ ] int print ( - ) - ID - - ( ( : ) ) ) print ( ID ) } func ID ( false { }",
  "func ID ( ) { var ID 123 [ ] ( ] int print ( - ) - ID - - ( ( : ) ) ) print ( ID ) } func ID [ false { }",
  "[ ID ( ) : int { var ID : func - ( ( - - - ( - ID ) ) ) ] bool } func ID ( ) { }",
  "[ ID ( ) : int ] var ID : func - ( ( - - - ( - ID ) ) ) { bool } func ID ( ) { }",
  "[ ID ( ) : int ] var ) : func - ( ( - - - ( - ID ) ) ) { bool } func ID ( ID { }",
  "func ID ( ID : int , ID : [ ] int , ID : [ var int ) { var ID : int ] ID : bool return }",
  "func ] ( ID : int , ID : [ ] int , ID : [ var int ) { var ID : int ID ID : bool return }",
  "func ] ( ID : int , var : [ ] int , ID : [ var int ) { ID ID : int ID ID : bool return }",
  "func ID ( ID : bool ) : [ { var ID : int ( ID ( ID ) ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : bool ) : [ { var ID : int ( ID ( ID ) ) ] bool var ID : int } func ID ( ) { }",
  "func { ( ID : bool ) : [ { var ID : int ( ID ( ID ) ) ] bool var ID : int } func ID ( ) ID }",
  "func ID ( ID : int , ID : bool , ID : int ) : [ ID + ) ( - ID ID + false ] int { }",
  "func ID ( ID : int , ID : bool , ID : int ) : [ ID + ) ( - ID ID + false ] int { }",
  "func ID ( ID : int , ID : bool , ID : int ) : [ ID + ) ( - ID + ID false ] int { }",
  "( ID ( ) : [ true + - true * - ID ( ) [ func ID ) ] ] int { }",
  "( ID ( ) : [ true + - true ID - ID ( ) [ func * ) ] ] int { }",
  "( { ( ) : [ true + - true ID - ID ( ) [ func * ) ] ] int ID }",
  "func ID ( ) ] [ : int { var ID : [ false * ID ( ) [ ID ] ] int var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) ] [ : int { var ID : [ false * ID ( ) [ ID ] ] int var ID : [ ] bool } func ID ( } { )",
  "func ID ( ) ] [ [ int { var ID : [ false * ID ( ) : ID ] ] int var ID : [ ] bool } func ID ( } { )",
  "func ID ( ID : int ) : bool { { var ID : bool var ID : bool call ID ( ( true ) ) ID ID ID } while = { } } func ID ( ) { }",
  "func ID ( ID : int ) : bool { { var ID : bool var ID : bool call ID ( ( true ) ) ID ID ID ID while = { } } func } ( ) { }",
  "func ID ( ID : int ) : bool { { var ID : bool var ID : bool call } ( ( true ) ) ID ID ID ID while = { } ID func } ( ) { }",
  "func ID ( ID : int , ID bool bool , ID : bool ) : int { var ID : int var ID : : if false / - true { } if ID { } }",
  "ID ID ( ID : int , ID bool bool , func : bool ) : int { var ID : int var ID : : if false / - true { } if ID { } }",
  "ID ID ( ID : int , ID bool bool , func : bool ) : int { var ID : int var ID : : if false / - true { } if ID { } }",
  "func ID ( ID : bool ) : [ ( true + ID ( ) * - - ( false } * ( - ID ) + ID ) ] [ ] bool { )",
  "func ID ( ID : bool ) : [ ( true + ID ( ) * - ID ( false } * ( - - ) + ID ) ] [ ] bool { )",
  "func ID ( ) : [ ( ( ( true int false + true ) ) ) ] * { }",
  "func ID ( ) : [ ( ) ( true int false + true ) ) ( ] * { }",
  "func ID ( ) : [ ( ) ( true int false * true ) ) ( ] + { }",
  "func ID ( ID : int , ID : [ - - ( ID ( ) [ false ] [ true ] ) ] [ ] [ ] ( ) { } func ID bool ) { }",
  "func ID ( ID : int , ID : [ - - ( ID ( ) [ } ] [ true ] ) ] [ ] [ ] ( ) { false func ID bool ) { }",
  "func ID ( ID : int , ID : [ - - ( ID ( ) [ } ] [ true ] ) ] [ ] [ ] ( ) { false func ID bool ) { }",
  "func ID ( ) { var ID ID [ : / ( ( - ( false ) ) ) / 123 ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID ID [ : ) ( ( - ( false / ) ) / 123 ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID ID ( : ) ( ( - [ false / ) ) / 123 ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : bool ( ID print ) [ true * - ( 123 ) ] ID = ID }",
  "func ID ( ) : int var var ID : int { ID : bool ( ID print ) [ true * - ( 123 ) ] ID = ID }",
  "func ID ( ) = int var var ID : int { ID : bool ( ID print ) [ true * - ( 123 ) ] ID : ID }",
  "func ID ( ) { while ( ID [ ID ( ) - - ID - ID ] ) { } while - - - ID { ) } func ID ( } { }",
  "func ID ( ) { while ( ID [ ID ( ] - - ID - ID ) ) { } while - - - ID { ) } func ID ( } { }",
  "func ID ( ) { while ( ID [ ) ( ] - - ID - ID ) ) { } while - - - ID { ID } func ID ( } { }",
  "func ID int ID : int , ID : [ ID ( ( ID ( ( ID ) ) ) ) ] bool , ID : ( ) { }",
  "func ID int ID : int , ID ( [ ID ( : ID ( ( ID ) ) ) ) ] bool , ID : ( ) { }",
  ": ID int ID : int , ID ( [ ID ( func ID ( ( ID ) ) ) ) ] bool , ID : ( ) { }",
  "func ID ( ID : [ ID * ID >= ID [ ( ) ID ) ( ] [ ( ID ) ] ] int ) { }",
  "func ID ( ID : [ ID * ID >= ID [ ( ) ID ) ( ] [ ( ID ) ] ] int ) { }",
  "func ID ( : ID [ ID * ID >= ID [ ( ) ID ) ( ] [ ( ID ) ] ] int ) { }",
  "func ID ( ID : int ) { call ID ( ) false - - ( return / - 123 ) } func ID ( ) { }",
  "func ID ( ID : int ) { call ID ( ) false - - ( return / - 123 ) } func } ( ) { ID",
  "func ID ( ID : int ) { call ID ( ) false - - ( return / - 123 ) } func } ( ) { ID",
  "func ID ( ) [ bool { var ID : [ ID ( ) [ ID ( true ) ] [ ID ] ] : ] bool }",
  "func ID [ ) ( bool { var ID : [ ID ( ) [ ID ( true ) ] [ ID ] ] : ] bool }",
  "func ] [ ) ( bool { var ID : [ ID ( ) [ ID ( true ) ID [ ID ] ] : ] bool }",
  "func ID ) ID : [ ( - ( 123 - - ID [ - - 123 ] [ ID ] + ID ) ) ] int ) { } func ID ( ( { }",
  "func ID ) ID : [ ( - ( 123 + - ID [ - - 123 ] [ ID ] - ID ) ) ] int ) { } func ID ( ( { }",
  "func ID ) ID : [ ( - 123 ( + - ID [ - - 123 ] [ ID ] - ID ) ) ] int ) { } func ID ( ( { }",
  "func print ( ) { ID true / ( ( - ID ( - ( 123 ) ) ) ) / - - ( true ) }",
  "func print ( ) { ID true / ( ( - ID ( - ( 123 ) ) ) ) / - - ( } ) true",
  "func print ( ) { ID true / ( ( - ID ( - ( 123 ) ) ) ) / true - ( } ) -",
  "func ID ( ) : bool { } func ID 123 ID : [ - - ( ID [ ID ] [ - - ( ( ( ) ) ] ) ] int ) { }",
  "func ID ( ) : bool 123 } func ID { ID : [ - - ( ID [ ID ] [ - - ( ( ( ) ) ] ) ] int ) { }",
  "func ID ( ) : bool 123 } func ID { ID : [ - - ) ID [ ID ] [ - - ( ( ( ) ) ] ) ] int ( { }",
  "func ID ( ) : [ ID ( ) [ ( - ID [ ID ] ) ] ] [ int ] { }",
  "func ID ( ] : [ ID ( ) [ ( - ID [ ID ] ) ] ) [ int ] { }",
  "func ID ( ] : [ ID } ) [ ( - ID [ ID ] ) ] ) [ int ] { (",
  "func ID ( ) : int { return 123 == - ID [ ) [ ID ] [ - ( ( ID ) ID ] ] [ - ID ] }",
  "func ID ( ) : int { return 123 - == ID [ ) [ ID ] [ - ( ( ID ) ID ] ] [ - ID ] }",
  "func ID ( ) : int { return 123 - ] ID [ ) [ ID == [ - ( ( ID ) ID ] ] [ - ID ] }",
  "func ID ( ID : bool , ID : int ) : int { var ID : bool if ( ID [ ( - 123 ) ] [ - false ] ) { } ID = - ) ( ID ) ( }",
  "func ID ( ID : bool , ID : int ) : int { var ID : bool if ( ID [ ( - 123 ) ] [ - false ] ) { } ID ) - = ( ID ) ( }",
  "func ] ( ID : bool , ID : int ) : int { var ID : bool if ( ID [ ( - 123 ) ] [ - false ID ) { } ID ) - = ( ID ) ( }",
  "func ID ( - { ID [ - - ID [ - true / - - - - true ] [ ( ( - ID ) ) ] ] [ - 123 ] = ( ( ) ( ( ID ) ) ) ) print 123 } func ID ( ) { }",
  "func ID ( - { ID [ - - ID [ - true / ) - - - true ] [ ( ( - ID ) ) ] ] [ - 123 ] = ( ( ) ( ( ID ) ) - ) print 123 } func ID ( ) { }",
  "func ID ( ID : int func ID : bool , ID : int ) { var ID : bool print ID ( ID ) } , ID ( ) { }",
  "func ID ( int : int func ID : bool , ID : ID ) { var ID : bool print ID ( ID ) } , ID ( ) { }",
  "func ID int ( : int func ID : bool , ID : ID ) { var ID : bool print ID ( ID ) } , ID ( ) { }",
  "func ID ( ID : [ ( - ( - ( ( 123 ) ) ID ) ] bool ) { } func ) ( ) { }",
  ") ID ( ID : [ ( - ( - ( ( 123 ) ) ID ) ] bool ) { } func func ( ) { }",
  "func ID ( ) { } ID : int while true * - - - ID [ - 123 ] { } if true { var }",
  "func ID ( ) { } ID : int while true ] - - - ID [ - 123 * { } if true { var }",
  "func ID ( ) { } ID : int while true ] var - - ID [ - 123 * { } if true { - }",
  "/ ID ( ID : [ ( true func ID [ ID / - ( ( true ) ) / ID ] ) ] [ ] bool ) { }",
  "/ ID ( ( : [ ( true func ID [ ID / - ID ( true ) ) / ID ] ) ] [ ] bool ) { }",
  "/ ID ( ( : [ ( true func ID [ ID / - ID ( ) ) true / ID ] ) ] [ ] bool ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : bool call ID ( ) if - ID ( ( ( ID ) ) ) ) } } func ID ( { { }",
  "func ID ( ) { var ID : [ ] bool var ID : bool call ID ( ) if - ID ( ( ( ID ) ) ) ) } } func ID ( { { }",
  "func ID ( ) { var ID : [ { bool var ID : bool call ID ( ) if - ID ( ( ( ID ) ) ) ) } } func ID ( { ] }",
  "func ID ( { : int , ID : bool ) ID if ID ( ) [ - ( ID ) ] { } { } } func ID ( ) { }",
  "func ID ( { : int : ID , bool ) ID if ID ( ) [ - ( ID ) ] { } { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID ( ) * ( ( false ) ) / false ] int { ID : int } func ID ( ) var }",
  "func ID ( ) { var ID : [ ID ( ) * ( ( false ) ) / false ID int { ] : int } func ID ( ) var }",
  "func ID ( ) { var ID : [ ID ( ) * ( ( false ) ) / false ID int { ] : int } func ID ( ) var }",
  "func ID ( ID : bool , ID : int ) : bool { while ID ID ( ( ) [ ID ] ) { } }",
  "func ID ( ID : bool ) ID : int , : bool { while ID ID ( ( ) [ ID ] ) { } }",
  "func ID ID ID : bool ) ID : int , : bool { while ID ID ( ( ) [ ( ] ) { } }",
  "func ID ( ( { ID [ ( true ) / true + ( ( ( true ) ) ) + ID ] [ - ( 123 ) ] = ) 123 ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) { ID [ ( true ) / true + ( ( ( true ) ) ( + ID ] [ - ( 123 ) ] = ) 123 ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) { ID [ ( true ) / true + ( ( ( true ) ) ( + ID ] [ { ( 123 ) ] = ) 123 ) call ID ( ) } func ID ( ) - }",
  "func ID ( ) { call ID ( ) ) ( - - ID ( false ) ) } func ID ( return { }",
  "func ID ( } { call ID ( ) ) ( - - ID ( false ) ) ) func ID ( return { }",
  "func ID ( } { call ID ( ID ) ( - - ID ( false ) ) ) func ) ( return { }",
  "func ID ( ID : [ ) bool , ID : [ true * - - 123 + - 123 + ( - - - ID ) and - ( - - - ID ] ] [ ] int ) { }",
  "func ID ( ID : [ ) bool , ID * [ true : - - 123 + - 123 + ( - - - ID ) and - ( - - - ID ] ] [ ] int ) { }",
  "func ID ( ID : [ ] bool ) { var ID : int print ( - ( true ) ) call ID ( ) } func ID } ) { (",
  "func ID ( ID : [ ] ID ) { var bool : int print ( - ( true ) ) call ID ( ) } func ID } ) { (",
  "func ID ( ID : [ ] ID ) { var bool : int ID ( - ( true ) ) call print ( ) } func ID } ) { (",
  "func ID ( ) : int { var ID : bool func [ - - ID [ ID ] ] [ ( ( ID ) ) ] = ( ID ) if false { } } ID ID ( ) { }",
  "func ID ( ) : int { var ID : bool func ID - - ID [ [ ] ] [ ( ( ID ) ) ] = ( ID ) if false { } } ID ID ( ) { }",
  "func ID ( ) : int ) var ID : bool func ID - - ID [ [ ] ] [ ( ( ID { ) ] = ( ID ) if false { } } ID ID ( ) { }",
  "func ID ( ID : bool ) : [ ] bool { while ( ( ( } ( ( ID ) ) ) ) ) { } while - ID { - } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] bool { while ( ( ( } ( ( ID ) ) ) ) ) { } while - ID { - } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] bool { while ( ( ( } ( ( ID ) ) ) ) ) { } while - ID { - } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] [ ] bool { ( ID : bool var ID : [ ( - ( var - ID ) ) ) ] [ ] int } print 123 } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] [ ] } { ( ID : bool var ID : [ ( - ( var - ID ) ) ) ] [ ] int bool print 123 } func ID ( ) { }",
  "func ID ( ) { var ] : [ ID int var ID : bool call ID ( ) return ID [ ID ] } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID int var ID : bool call ID ( ) return ] [ ID ] } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID int var ID : bool call ID ( ) return ] [ ID ] ( func ID } ) { }",
  "func ID ( ) ] [ ] [ ( ID ( ) [ ID [ ( ( ( ID ) ) ) : ] ) ] [ ] int { }",
  "func ID ( ) ] [ ] [ ( ID ( ) [ ] [ ( ( ( ID ) ) ) : ] ) ID [ ] int { }",
  "func ID ( ) ] [ ID [ ( ID ( ) [ ] [ ( ( ( ] ) ) ) : ] ) ID [ ] int { }",
  "func ID ( ) { var ID : bool } func ID ( ID : int , ID : [ ] bool , ID : int ) { { var ID : var ] int [ ID : [ ] bool } }",
  "func ID ( ) { var ID : bool } func ID ( ID : int [ ID : , ] bool , ID : int ) { { var ID : var ] int [ ID : [ ] bool } }",
  "func { ( ) { var ID : bool } func ID ( ID : int [ ID : , ] bool , ID : int ) { ID var ID : var ] int [ ID : [ ] bool } }",
  "func ID ( ID : [ ] int , ID ( bool ) { call ID ( ( ( : ( ID ) ) ) ) ) }",
  "func ID ( ID : [ ] int , ID ( bool ) { call ID ( ( ( ) ( ID ) ) : ) ) }",
  "func ID ( ID : [ ] int , ( ( bool ) { call ID ( ( ( ) ID ID ) ) : ) ) }",
  "func ID ( ) { var ( : [ - false + ID ID ( ) [ - ID ] ) - ID ] bool } func ID ( ) { }",
  "func ID ( ) } var ( : [ - false + ID ID ( ) [ - ID ] ) - ID ] bool } func ID ( ) { {",
  "func ID ( ) } var ( : [ - false + ID ID ( ) [ - ID ] ) { ID ] bool } func ID ( ) - {",
  "func ID ( ) { var ID : [ 123 * false * ID [ ID int ) ] ] ( var ID : [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ 123 false * * ID [ ID int ) ] ] ( var ID : [ ] [ ] bool } func ID ( ) { }",
  "func ID ID ) { var ID : [ 123 false * * ID [ ID int ) ] ] ( var ( : [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ - - - ID [ ( 123 * ID ] ) ] bool ) { }",
  "func ID ( ID : [ - - - [ ID ( 123 * ID ] ) ] bool ) { }",
  "func ID bool ID : int ) : ( { var ID : bool { var ID : bool var ID : bool if false / ( 123 ) { } } } func ID ( ) { }",
  "func ID bool ID : int ) : ( { var ID : bool { var ID : { var ID : bool if false / ( 123 ) bool } } } func ID ( ) { }",
  "func ID bool ID : int ) : ( { var ID : bool { var ID : ) var ID : bool if false / ( 123 ) bool } } } func ID ( { { }",
  "func ID ( ID : int , ID : int ( : [ ] [ - - ( ID ( ) [ - - true ] ) ] int { } func ID ) ) { }",
  "func ID ( ID : int , ID : int ( : [ ] [ - - ( ID ( ) - [ - true ] ) ] int { } func ID ) ) { }",
  "func ID ( ID : int , ID : } ( : [ ] [ - - ( ID ( ) - [ - true ] ) ] int { } func ID ) ) { int",
  "func ID ( ) : [ ( - ) ( 123 * false * ( ( ( ( ( - ( ( - ID ID ) ) ) ) ) ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ( - ) ( 123 * false * ( ( ( ( ( - ( ( - ID ID ) ) ) ) ) ) } ) ] bool { } func ID ( ) { )",
  "func ID ( ) : [ ( - ) ( 123 * false * ( ( ( ( ( ) ( ( - ID ID ) ) ) ) ) ) } ) ] bool { } func ID ( ) { -",
  "func ID ( ) : [ ID ( ) - 123 * / ID ( true - - 123 ) * 123 - - ID ] bool { }",
  "func ID ( ) : [ ID ( ) - 123 * / ID ( true - - 123 ) * 123 - - ] ID bool { }",
  "func ID ( ) : [ ID { ) - 123 * / ID ( true - - 123 ) * 123 - - ] ID bool ( }",
  "func ID ( ID : int , ID : int ) : [ ( - ( ID } ID / ID ) ) ] [ ] int { *",
  "func ID ( ID : int - ID : int ) : [ ( , ( ID } ID / ID ) ) ] [ ] int { *",
  "func ID ( ID : int - ID : int ) : [ ( , ( ID } ID / ID ) ) { [ ] int ] *",
  "func ) ( ) { print ID [ - - ID / - ( ( ( 123 ) ) ID ] print false }",
  "func ] ( ) { print ID [ - - ID / - ( ( ( 123 ) ) ID ) print false }",
  "func ] ( print { ) ID [ - - ID / - ( ( ( 123 ) ) ID ) print false }",
  "func ID ( ) { ID = - ) ( ID ( false / ID * - true - ) } func ID ( ) { }",
  "func ID ( ) { ID = - ) ( ID ( false / true * - ID - ) } func ID ( ) { }",
  ") ID ( ) { ID = - ) ( ID ( false / true * - ID - func } func ID ( ) { }",
  "func ID ( ) { var ID : bool - } func ID ( ID : int , ID : [ false / return - ID ] [ ] bool ) { }",
  "func ID ( ) { var ID : bool - } func ID ( ID : int , ID : [ false / ID - return ] [ ] bool ) { }",
  "func ID ( ) { ID ID : bool - } func ID ( var : int , ID : [ false / ID - return ] [ ] bool ) { }",
  "func ID ( ID ID bool , ID : bool ) : [ ] bool { var ID : bool if true * ID ( ) { } : = true } func ID ( ) { }",
  "func ID ( ID ID bool , ID : bool ) : [ ] bool { var func : bool if true * ID ( ) { } : = true } ID ID ( ) { }",
  "func ID ( ID ID bool , ID : bool ) : [ ] bool { var func : bool if true * ID ID ) { } : = true } ( ID ( ) { }",
  "func ID ( ID : false 123 * ID ( - ( - [ / ( - ( ( ID ) ) ) ) ) / 123 ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : false 123 * ID ( - ( - [ / ( bool ( ( ID ) ) ) ) ) / 123 ] [ ] - ) { } func ID ( ) { }",
  "func ID ( ID : false 123 * ID ( - ( - [ / ( bool ( ( } ) ) ) ) ) / 123 ] [ ] - ) { ID func ID ( ) { }",
  "func ID ( ) { var ID : bool ( ( ) [ ID 123 * ( 123 ) ) ] = - - false }",
  "func ID ( - { var ID : bool ( ( ) [ ID 123 * ( 123 ) ) ] = ) - false }",
  "func ID ( - { var ID : bool ( 123 ) [ ID 123 * ( ( ) ) ] = ) - false }",
  "( ID ( ) : [ func ID ( ) [ 123 - false * ID - - ID ] ) ] [ ] [ ] [ ] int { }",
  "( ID ( ) : [ func ID ( ) [ 123 - false * ID - - ID ] ) ] [ ] int ] [ ] [ { }",
  "( ID ( ) : [ ] ID ( ) [ 123 - false * ID - - ID ] ) ] [ func int ] [ ] [ { }",
  "func ID false ) : [ ] int { var ID : bool var ID : bool if ( ( - true + ID ) { } } func ID ( ) { }",
  "func ID false ) : [ ] int { } ID : bool var ID : bool if ( ( - true + ID ) { } var func ID ( ) { }",
  "func ID true ) : [ ] int { } ID : bool var ID : bool if ( ( - false + ID ) { } var func ID ( ) { }",
  "func ID ( : : int { var ID : bool var ID ) bool }",
  "func ID ID : : int { var ID : bool var ( ) bool }",
  "func var ID : : int { var ID : bool ID ( ) bool }",
  "func ID ( ID : int , ID : bool , ID : int ) : int { { ID : int var ID : int print - ( - false ) } func ID ( ) var }",
  "func ID ( ID : int , ID : bool , ID : int ) : var { { ID : int int ID : int print - ( - false ) } func ID ( ) var }",
  "func ID ( ID : int ) ID : bool , ID : int ) : var { { ID : int int ID : int print - ( - false , } func ID ( ) var }",
  "func ID ( ID : int ) : int { var : ID int return 123 - 123 + ( ( false ) ) } func ID ( ) { }",
  "func ID ( ID : int ) : return { var : ID int int 123 - 123 + ( ( false ) ) } func ID ( ) { }",
  "func ID ( ID : int ) : return { + : ID int int 123 - 123 var ( ( false ) ) } func ID ( ) { }",
  "func ID ( ) : [ true / 123 { ID [ ( ID ( ) ) ] - - false ] int + }",
  "func ID ) ) : [ true / 123 { ID [ ( ID ( ( ) ] - - false ] int + }",
  "func ID ) ID : [ ID ( - - - - ( ( ID ( ) ) ] int ) { }",
  "func ID ) ID : [ ] ( - - - - ( ( ID ( ) ) ID int ) { }",
  "func ID ) ID : [ ] ( - - - - ( ( ID ( } ) ID int ) { )",
  "func ID [ ID : [ ] bool , ID : ( ] [ ] [ ID [ true - ID ] ] bool ) { }",
  "func ID [ ID : [ ] bool , ID : ( ] [ ] [ ID [ true - ID ] ] bool } { )",
  "[ ID func ID : [ ] bool , ID : ( ] [ ] [ ID [ true - ID ] ] bool } { )",
  "func ID ( ID : int , ID : bool ) : [ true * ID [ ID ( ID ) ] [ ID ] * ( ( true ) ) ] bool ID } func { ( ) { }",
  "func ID ( ID : int , ID : bool ) : [ true * ID ID ID ( ID ) ] [ [ ] * ( ( true ) ) ] bool ID } func { ( ) { }",
  "func ID ( ID : int , ID : bool ) : [ true * ID ID ID ( ID ) ] [ [ ] * ) ( true ( ) ] bool ID } func { ( ) { }",
  "func ID ( func : bool ) : bool { return } ID ID ( ID : [ - - ( ID ) ] bool ) { }",
  "func ID ( func : bool ) : bool { return } ID ID ( ID : ) - - ( ID ) ] bool [ { }",
  "func ID ( func : bool ) - bool { return } ID ID ( ID : ) - : ( ID ) ] bool [ { }",
  "func ID ( ID : bool ) [ bool { } func ID ( ) : : ] int { var ID : int return - ( ID ) }",
  "func ID ( ID : bool ] [ bool { } func ID ( ) : : ) int { var ID : int return - ( ID ) }",
  "func : ( ID : bool ] [ bool { } func ID ( ) : ID ) int { var ID : int return - ( ID ) }",
  "[ ID ( ID : int ) { while ID func ( false / ID ) ] [ ( false ) ] { } } func ID ( ) { }",
  "[ ID ( ID : int ) { while ID func ( false / ID ) ] [ ( false ) ] { } } func ID ( ) { }",
  "[ ID ( ID : int ) { while ] func ( false / ID ) ID [ ( false ) ] { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int { var ID : [ ] int while ( - ID - ) { } { } } }",
  "func ID ( ) ID bool { var ID : int { var : : [ ] int while ( - ID - ) { } { } } }",
  "func ID ( ) ID bool { var ) : int { var : : [ ] int while ( - ID - ID { } { } } }",
  "func ID ( ID : int , ID : [ ] int , ID : bool ] { } func ID ( ) : int { var ID : [ ) int var ID : int }",
  "func ID ( ID : int , ID : [ ] int , ID : bool ] { } func ID ( ) : int { var ID : var ) int [ ID : int }",
  "func ID ( ID : int ID ID : [ ] int , , : bool ] { } func ID ( ) : int { var ID : var ) int [ ID : int }",
  "} ID ( ) { return } func ID ( ) : [ ] bool { var ID : bool var ID : [ false ] bool func",
  "} ID bool ) { return } func ID ( ) : [ ] ( { var ID : bool var ID : [ false ] bool func",
  "} ID bool ) { bool } func ID ( ) : [ ] ( { var ID : return var ID : [ false ] bool func",
  "func ID ( ) { { ID = true / ID [ ID / - ( ID ) * - - ( while ) ] [ ( - true ) ] * ID } ID ( true ) { } }",
  "func ID ( ) { { ID = true / ID [ ID / - ( ID ) * - ( ( while ) ] [ ( - true ) ] * ID } ID - true ) { } }",
  "func ID ( ) { { ID = true / ID [ ID / - ( ID ) * - ( ( while ) ] [ ( - true ) ] * ID } ID - true ) { } }",
  "func ID ( ID : [ ] bool ) : [ ] bool { var ID : [ false / - int ( ( ID ) ) ) ] bool var ID : ( }",
  "func ID ( ID : [ ] bool ) : [ ] bool { var ID : [ false - / int ( ( ID ) ) ) ] bool var ID : ( }",
  "func ID ( ID : [ ] bool ) : [ ] bool { var ID : [ false - / ( ( int ID ) ) ) ] bool var ID : ( }",
  "func ID ( ) { var - : int ID = ID ( ( ( ( ( ID ) ) ) ) ) }",
  "func ID ( ) { var - : int ID = ID ) ( ( ( ( ID ) ) ( ) ) }",
  "func ID ID ) { var - : int ID = ID ) ( ( ( ( ( ) ) ( ) ) }",
  "} ID ( ) : bool { var ID : int { var ID : bool { var ID : bool ID [ ( true ) ] [ ( 123 ) ] = ( - - 123 ) func ID = ID } } func ID ( ) { }",
  "bool ID ( ) : bool { var ID : int { var ID : bool { var ID : } ID [ ( true ) ] [ ( 123 ) ] = ( - - 123 ) func ID = ID } } func ID ( ) { }",
  "bool ID ( ) : bool { var ID : int { var ID : bool { var ID : } ID [ ( ) true ] [ ( 123 ) ] = ( - - 123 ) func ID = ID } } func ID ( ) { }",
  "func ID ( ) { var ID : int - ID : [ ] int if false + ( - ID ) var - ID { } }",
  "func ID ( ) { - ID : int - ID : [ ] int if false + ( - ID ) var var ID { } }",
  "func ID ( ) { - ID : int - ID : [ ] int if false + ( - ID var var ) ID { } }",
  "func ID ( ) { var ID ID int var ID : int { var ID : int var ID : [ ] [ - ID ] bool } call : ( ) } func ID ( ) { }",
  "int ID ( ) { var ID ID int var ID : int { var ID : func var ID : [ ] [ - ID ] bool } call : ( ) } func ID ( ) { }",
  "int ID ( ) { var ID ID int var ID : int { var ID : func var ID : [ ] [ - ID ] bool } call : ( ) } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ ID ) ) [ - ID ] ] ] [ ] int ( { }",
  "func ID ( } : [ ID ( ) [ ID ) ) [ - ID ] ] ] [ ] int ( { ID",
  "func int ( } : [ ID ( ) [ ID ) ) [ - ID ] ] ] [ ] ID ( { ID",
  "func ID ( ) : int { var ID : [ ] bool var ID : int return } func ID ( ) : ID ( [ ) ] [ ] [ ] bool { }",
  "func ID ( ) : int { var ID : [ ] bool var ID : int return } func ID ( ) : ID ( { ) ] [ ] [ ] bool [ }",
  "func ID ( ) : int { var ID : [ ] bool var ID : int ) } func ID ( return : ID ( { ) ] [ ] [ ] bool [ }",
  "func ID ( ) : int { var ID : [ ] int var ID : bool * 123 print - ( 123 ) }",
  "func ID ( ) : int { var ID : [ ] int var 123 : bool * 123 print - ( ID ) }",
  "func ID ( ) { int : var ID : [ ] int var 123 : bool * 123 print - ( ID ) }",
  ": ID ( ) : [ ] int { var ID func int ID ( ) [ ( ID ) ] [ ID ] = true while ( true ) { } } func ID ( ) { }",
  ": ID ( ) : [ ] int { var ID func true ID ( ) [ ( ID ) ] [ ID ] = int while ( true ) { } } func ID ( ) { }",
  ": ID ( ) : [ ] int { var ID func true ID ( ) [ ( ID ) ] [ ID ] = int while ( true ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : ) ID ( ID ( - ID ( ) [ ID ] bool ) = ID ID = - true } func ID ( ) { }",
  "func ID ( ) { var ID - ) ID ( ID ( : ID ( ) [ ID ] bool ) = ID ID = - true } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ true false and ] int var ID : [ ] int }",
  "func ID ( ID : bool , ID : bool ) { var ID var [ true false and ] int : ID : [ ] int }",
  ": ID ( ID func bool , ID : bool ) { var ID var [ true false and ] int : ID : [ ] int }",
  "func ID ( ID ] [ ] int , ID : [ ] int , ID : bool ) : [ ] [ : int { call ID ( - 123 ) } func ID ( ) { }",
  "func ID ( ID ] [ ] int ( ID : [ ] int , ID : bool ) : [ ] [ : int { call ID , - 123 ) } func ID ( ) { }",
  "func ID ( ID ] : ] int ( ID : [ ] int , ID : bool ) : [ ] [ [ int { call ID , - 123 ) } func ID ( ) { }",
  "func ) ( ID : int ) { return ID ( ( ID [ 123 ] [ 123 ] ID ) } func ID ( ) { }",
  "func ) ( ID : int ) { return ID ( ( ID [ 123 ] [ 123 ] ID ) } func ) ( ID { }",
  "func ) ( ID : int ) { return ID ( ) ID [ 123 ] [ 123 ] ID ( } func ) ( ID { }",
  "func ID ( ) : [ - ID [ ID [ true * - false * ID ] [ - - 123 [ ] ] false ] ] bool { }",
  "func ID ( ) : [ - ID [ ID [ true ] - false * ID * [ - - 123 [ ] ] false ] ] bool { }",
  "func * ( ) : [ - ID [ ID [ true ] - false ID ID * [ - - 123 [ ] ] false ] ] bool { }",
  "func ID ( ) : [ ] [ - true / 123 and ( - 123 / - ID ) ] ] ] [ [ bool { } func ID ( ) { }",
  "func ID ( ) : [ true [ - ] / 123 and ( - 123 / - ID ) ] ] ] [ [ bool { } func ID ( ) { }",
  "func ID ( ) : [ true [ - ] / 123 ( ( - 123 / - ID ) ] ] ] [ [ bool { } func ID and ) { }",
  "func ID ( ID : [ ID ] - ID / ( 123 + - - ( - ( ( false ) ) ) + - - ID ) * true [ ] bool ) { } func ID ( ) { }",
  "func : ( ID : int , ID : int , ID : int ) { var ID ID int var ID : bool }",
  "func : ( ID : int , ID : int , ID : int ) { var ID ID ID var int : bool }",
  "func : ( ID ID int , ID : int , ID : int ) { var ID : ID var int : bool }",
  "func ID ( ) : = { ID int ( ID ( ID ( ) ) ) }",
  "func ID ( ) : = { ID int ( ID ( ID ) ( ) ) }",
  "func ID ( ID : bool , bool : bool ) : [ ID / false + - ( - ID ) ] ID { } func ID ( ) { }",
  "func ID ( ID : bool , bool : bool ) : [ ID / false func - ( - ID ) ] ID { } + ID ( ) { }",
  "func ID ( ID : bool , bool { bool ) : [ ID / false func - ( - ID ) ] ID { } + ID ( ) : }",
  "func ID ( ) : var ID : [ ] int var ID { [ ] [ ID ( ) [ - true ] [ - true ] ] bool }",
  "func ID ( ) : var ID : [ ] ) var ID { [ ] [ ID ( int [ - true ] [ - true ] ] bool }",
  "func ID ( ) : var ID : [ ] ) - ID { [ ] [ ID ( int [ var true ] [ - true ] ] bool }",
  "func ID ( ) : bool { { var ID : int var ID : int if } ID ( ) ) { } print - ( ID ) } print - - - ( true ) (",
  "func ID ) ) : bool { { var ID : int var ID : int if } ID ( ) ) { } print - ( ID ( } print - - - ( true ) (",
  "func ID ) ) : bool : { var ID : int var ID { int if } ID ( ) ) { } print - ( ID ( } print - - - ( true ) (",
  "func ID ( ) : var ID : [ ( - ID ( ID ( 123 ) ) ) ] bool var ID { int }",
  "func ID ( ) : var ID : [ ( - ID ( ID ( 123 ) ) ) ] bool var { ID int }",
  "func ID ( ) : var ID : [ ( bool ID ( ID ( 123 ) ) ) ] - var { ID int }",
  "func ID ( ID : bool , ID : int int : [ ] [ ] [ ] bool { var ID : [ false * - ( ID ) ] ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int int : [ ] [ ] [ ] bool { var ID : [ false * - ( ID ) ] ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int : : [ ] [ ] [ ] bool { var ID int [ false * - ( ID ) ] ) } func ID ( ) { }",
  "func ( ( ID : bool ) : int { print - ID ID - - ( ID ) ) }",
  "func ( ( ID : bool ) : ID { print - int ID - - ( ID ) ) }",
  ": ( ( ID func bool ) : ID { print - int ID - - ( ID ) ) }",
  "func ID ( ) : int { { var ID : [ ID int ( ( ID ) ) ] and } }",
  "{ ID ( ID : bool ) : bool func var ID : int }",
  "{ ID } ID : bool ) : bool func var ID : int (",
  "{ ID } ID : bool ) : bool func ID var : int (",
  "func ID ( ) : [ [ ] ] [ ] bool { var ID : bool var ID : bool } func ID ( ) { if - ( - ( ( false ) ) ) { } }",
  "func ID ( ] : [ [ ] ) [ ] bool { var ID : bool var ID : bool } func ID ( ) { if - ( - ( ( false ) ) ) { } }",
  "func ID ( ] : func [ ] ) [ ] bool { var ID : bool var ID : bool } [ ID ( ) { if - ( - ( ( false ) ) ) { } }",
  "func ID ( ID : bool , , : [ ] int ID ID : int ) : [ ID / true and - ( ID ) ] bool { }",
  "func ID ( ID : bool , , : [ ] int ID ID : int ) : [ ID / true and } ( ID ) ] bool { -",
  "func ID ( ID : bool , , : [ ] true ID ID : int ) : [ ID / int and } ( ID ) ] bool { -",
  "func ID ( call { call ID ( ) ) ID ( ) }",
  "func ID ( call { ) ID ( call ) ID ( ) }",
  "func ID ( call } ) ID ( call ) ID ( ) {",
  "while ID ( ) { call ID ( - false * - ( ID + false ) / 123 ) func - ID { } }",
  "while ID ( ) { call ID ( - false * - ( func + false ) / 123 ) ID - ID { } }",
  "while ID ( ) { call ID ( - false * - + func ( false ) / 123 ) ID - ID { } }",
  "func ID ] ID : bool ) { var ID : [ ] [ ( [ ] [ ID [ ( 123 ) ] [ true ] ] [ ] [ ] [ ] bool }",
  "] ID ] ID : bool ) { var ID : [ ] [ ( [ ] [ ID [ ( 123 ) ] [ true ] func [ ] [ ] [ ] bool }",
  "] ID ] ID [ bool ) { var ID : [ ] [ ( : ] [ ID [ ( 123 ) ] [ true ] func [ ] [ ] [ ] bool }",
  ") ID ( ID : [ ( - true / ID / ID ( ID ) func ] bool ) { }",
  ") ID ( ID : [ ( - true / ID / ID func ID ) ( ] bool ) { }",
  "ID ) ( ID : [ ( - true / ID / ID func ID ) ( ] bool ) { }",
  "func ID ( : ID bool , ID : [ ] bool ) : bool { var ID : [ ( ( - ID ) ) ] int } func ID ( ) { }",
  "func ID ( : ID bool , ID : [ ] } ) : bool { var ID : [ ( ( - ID ) ) ] int } func ID ( ) { bool",
  "func ID ( : ID bool , ID : [ : } ) ] bool { var ID : [ ( ( - ID ) ) ] int } func ID ( ) { bool",
  "func ID ( ID : bool ) : bool { } ID func ( ) { }",
  "func ID ( ID ID bool ) : bool { } : func ( ) { }",
  "func ID ( ID ID bool ) : bool { } : func ( ) { }",
  "func ID ( ) { - ID : int print ID ( ) [ ID ( var - - - - ( ID ) ) ] print true }",
  "func ID ( ) { - ID - int print ID ( ) [ ID ( var - : - - ( ID ) ) ] print true }",
  "func ID ( ) - - ID - int print ID ( ) [ ID ( var - : { - ( ID ) ) ] print true }",
  "func ) ( ) : [ ] bool { var ID : int var ID : int call ID ( ) call ID ( ) } func ID ( ID : [ ] [ ] bool ID { }",
  "func ) ( ) : [ ] ID { var bool : int var ID : int call ID ( ) call ID ( ) } func ID ( ID : [ ] [ ] bool ID { }",
  "func ) ( ) [ [ ] ID { var bool : int var ID : int call ID ( ) call ID ( ) } func ID ( ID : [ ] : ] bool ID { }",
  "func ID ( ) { print ] + ID ( ) [ ID ( ) [ 123 ] [ ( ( ID ) ) ] true - ID } func ID ( ) { }",
  "func ID ( ) { ID ] + ID ( ) [ ID ( ) [ 123 ] [ ( ( ID ) ) ] true - print } func ID ( ) { }",
  "func ID ( ) { ID ] + ID ( ) [ ID ( ) [ 123 ] [ ( ( ID ) ) ] true - print } func ID ( ) { }",
  ": ID ( ) { var ID func int var ID : int print ( - ID ( false ) ) } func ID ( ) { }",
  "{ ID ( ) : var ID func int var ID : int print ( - ID ( false ) ) } func ID ( ) { }",
  "func ) ( ) : [ ] int { var ID : [ false * ( ( ( - ( false ) ) ) ID ] int } func ID ( ) { }",
  "func ) ( * : [ ] int { var ID : [ false ) ( ( ( - ( false ) ) ) ID ] int } func ID ( ) { }",
  "func { ( * : [ ] int { var ID : [ false ) ( ( ( - ( false ) ) ) ID ] int } func ID ( ) ) }",
  "func ID ( ) { ID = ( ID ( ID ] ID ] [ ( 123 ) [ ) ) { } }",
  "func ID ( ) { ID = ( ] ( ID ID ID ] [ ( 123 ) [ ) ) { } }",
  "func ID ( ) { while ID ( ) [ ID [ true * 123 ] ] 123 [ ] [ ( ( - ( true ) ) ) ] { } } func ID ( ) { }",
  "func ID ( ) { while ID ( ) ) ID [ true * 123 ] ] 123 [ ] [ ( ( - ( true ) ) [ ] { } } func ID ( ) { }",
  "func { ( ) ID while ID ( ) ) ID [ true * 123 ] ] 123 [ ] [ ( ( - ( true ) ) [ ] { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID : false ID [ ( [ ) ] [ ( ID ) ] ] int } func ID ( ) { }",
  "func ID ( ID : int ID { var ) : int var ID : false ID [ ( [ ) ] [ ( ID ) ] ] int } func ID ( ) { }",
  "func ID ( ID : int ID { var ) : int var ID : false ID [ ( [ ) ] [ ( ID ) ] ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ true / ID ( { ID ( ) / - ( ( - false ) ) ) ] bool , ID : bool ) - } func ID ( ) { }",
  "func ID ( ID ID bool , : : [ true / ID ( { ID ( ) / - ( ( - false ) ) ) ] bool , ID : bool ) - } func ID ( ) { }",
  "func ID ( ID ID bool , : : [ true / ID ( { ID ( ) / - ( ( - false ) bool ) ] ) , ID : bool ) - } func ID ( ) { }",
  "func ID } ) { } func ID ( ID : bool ) { var ID : int var ID : bool print - ID if true { } (",
  "func ID } ) { } func ID ( ID : bool ) { var ID : int var true : bool print - ID if ID { } (",
  "func ID } ) { } func bool ( ID : ID ) { var ID : int var true : bool print - ID if ID { } (",
  "func ID ( ] : bool { var ID : [ ) int var ID : [ ] [ - ID ( ID ) ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ] : bool { var ID : [ ) int var ID : [ ] [ - ID ( ID ) ] [ ] [ ] bool } ( ID func ) { }",
  "func ID ( ] : bool { var ID : [ ) int var ID : [ ] [ - ID ( ID ) ] [ ] [ ] bool } ( ID func ) { }",
  "func ID ( ID : bool , ID : [ ( ) 123 <= ( false ( ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : { , ID : [ ( ) 123 <= ( false ( ) ) ] [ ] int ) { } func ID ( ) bool }",
  "ID func ( ID : { , ID : [ ( ) 123 <= ( false ( ) ) ] [ ] int ) { } func ID ( ) bool }",
  "func ID ( ) : int { var ID : [ ] [ - ID ( - [ 123 ) ] ] bool }",
  "ID func ( ) : int { var ID : [ ] [ - ID ( - [ 123 ) ] ] bool }",
  "ID func ( ) : } { var ID : [ ] [ - ID ( - [ 123 ) ] ] bool int",
  "func ( ID ) : [ ] [ ] bool { print ID + ID ( true ) } func ID ( ) { }",
  "func ( ID ) : [ ] [ ] bool { print ID + ID ( true ) func } ID ( ) { }",
  "func ( ID ) : [ ] [ ] ) { print ID + ID ( true bool func } ID ( ) { }",
  "func ID ( ) { var ID : [ ID ( ( ( - ( ID ) ) ID ) ] [ ] [ ] [ ] [ ] [ ] bool var ) : int }",
  "func ID ( ) { var ID : [ ID ( ( ( - ( ID ) ) ID ) ] [ ] [ ] [ ] [ ] [ ] bool var ) : int }",
  "var ID ( ) { func ID : [ ID ( ( ( - ( ID ) ) ID ) ] [ ] [ ] [ ] [ ] [ ] bool var ) : int }",
  "func ID : ID : bool ) { var ID ( int return }",
  ": ID : ID func bool ) { var ID ( int return }",
  ": ID : ID func bool var { ) ID ( int return }",
  "- ID ( ) { var ID : [ ID ( ) or - func - - ( - - - true ) or ( - ( ID ) ) ] int } func ID ( ) { }",
  "- ID ( ) { var ID : [ ID ( ) or - func - - ( - - - true ) or ( - ( ID ) ) ] } } func ID ( ) { int",
  "func ID ( ) { var ID } int while - ( true * - ID * ID ) { } { : }",
  "func ID ( ) { var ID * int while - ( true } - ID * ID ) { } { : }",
  "{ ID ( ) { var ID * int while - ( true } - ID * ID ) func } { : }",
  "func ID ( ) { var * : int call ID ( ID * - ID [ ( false ) ] [ ( ID ) ] ID ID ) } func ID ( ) { }",
  "func ID ( ) { var * : int call ID ( ID * - ID [ ( false ) ] [ ( ID ) ] ID ID ) } func ID ( ) { }",
  "func - ( ) { var * : int call ID ( ID * ID ID [ ( false ) ] [ ( ID ) ] ID ID ) } func ID ( ) { }",
  "func : ( ID : bool ) { var ID ID bool var ID : [ ] int return }",
  "var : ( ID : bool ) { func ID ID bool var ID : [ ] int return }",
  "var : ( ID : bool ) { func ID ID bool } ID : [ ] int return var",
  "func ID ( ID : bool ) false var ID : [ - { - false / ID ( ) [ ID ] [ ( ID ) ] - ID ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : bool ) false var ID : [ - { - false / ID ( ) [ ID ] [ ( ID ) ] - ID ] [ ] bool } func ID ( ) { }",
  "func ID ( ] : bool ) false var ID : [ - { - false / ID ( ) [ ID ID [ ( ID ) ] - ID ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : [ ] bool { var ID : int var ID : bool return 123 * ( ( - - ( ID false ) ) / ) }",
  "func ID ( ID : { , ID : int ) : [ ] bool bool var ID : int var ID : bool return 123 * ( ( - - ( ID false ) ) / ) }",
  "func ID ( ID : { , ID : int ) : [ ] bool bool var ID : int var ID : bool return 123 * ( ( - - ( ID false ) ) / ) }",
  "func ID ( ID : int ) { var [ : bool var ID : [ ( ID ( ) ID - ( - ( ID ) ) ] ) ] bool } func ID ( ) { }",
  "func ID ( ID : int ) { var [ : bool var ID : ( ( ID ( ) ID - ( - [ ID ) ) ] ) ] bool } func ID ( ) { }",
  "func ID ( ID : int ) ( var [ : bool var ID : ( { ID ( ) ID - ( - [ ID ) ) ] ) ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ) [ ( - ( ID ) ) ] [ ( ( ID ) ) ] ] [ ] int , ID : int ID { } func ID ( ) { }",
  "func ID ( ID : int , ID ) [ ) [ ( - ( ID ) ) ] [ ( ( ID : ) ] ] [ ] int , ID : int ID { } func ID ( ) { }",
  "func ID ( ID : int , ID ) [ ) [ ( - ( ID ) ) ] [ ( ( ID : ) ] ] [ ] int , ID { int ID : } func ID ( ) { }",
  "func ID ( ID : [ ( bool , ID : [ true / - ( 123 * - - false * - ( - - ID ) ) / false ] int , ID : [ ] int ) { } func ID ] ) { }",
  "func ID ( ID : [ ( bool , ID : [ true / - ( 123 * - - false * - ( - - ID ) ) / ) ] int , ID : [ ] int ) { } func ID ] false { }",
  "func ID ( ID : [ ( bool , - : [ true / - ( 123 * - - false * - ( ID - ID ) ) / ) ] int , ID : [ ] int ) { } func ID ] false { }",
  "bool ID ( ID : int , ID : func ) : bool { }",
  "ID bool ( ID : int , ID : func ) : bool { }",
  "ID bool ( ID : int , ID : { ) : bool func }",
  "func ID ( ID : int ) { var ID : int var ( : int while - - ID - ID ) { } }",
  "func ID ( ID : int ) : var ID { int var ( : int while - - ID - ID ) { } }",
  "func ID ( ID : int ) : ( ID { int var var : int while - - ID - ID ) { } }",
  "func ID ( ID : [ ] ) - - - - ( - ( ( - - ( - false ) ) ) ) ] [ ] bool [ { }",
  "func ID ( ID : ) ] ) - - - - ( - ( ( - - ( - false ) ) ) [ ] [ ] bool [ { }",
  "func ID ( ID : ) ) ) - - - - ( - ( ( - - ( - false ) ) ] [ ] [ ] bool [ { }",
  "func ID ( ID : bool , ID / bool ) { while ( - - true : - - ID * ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID } bool , ID / bool ) { while ( - - true : - - ID * ( ID ) ) { } : func ID ( ) { }",
  "func ID ( ID } bool , true / bool ) { while ( - - ID : - - ID * ( ID ) ) { } : func ID ( ) { }",
  "func ID ) ) : bool { var ID : [ ] [ ID [ ( ( ( 123 ) ) ( ] [ ID ] ] [ ] int var ID : int }",
  "func ID ) ) : bool { var ID : [ ] [ ID [ ( ( ( 123 ) ) ( ] [ ID ] ] [ ] int var ID : int }",
  "func ID ) ) : bool { var ID : [ ] [ ID [ ( ( ( 123 ) } ( ] [ ID ] ] [ ] int var ID : int )",
  ": ID ( ID : int , ID func bool ) : int { var ID : [ - - ( - true ) ] [ ] [ ] int var ID : [ ] [ ] bool } func ID ( ) { }",
  ": ) ( ID : int , ID func bool ) : int { var ID : [ - - ( - true ID ] [ ] [ ] int var ID : [ ] [ ] bool } func ID ( ) { }",
  ": ) ( ID : bool , ID func bool ) : int { var ID : [ - - ( - true ID ] [ ] [ ] int var ID : [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ] bool ) : return ] bool { [ true - ID + 123 } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : true ] bool ) : return ] bool { [ [ - ID + 123 } func ID ( ) { }",
  "true ID ( ID : bool , ID : int , ID : func ] bool ) : return ] bool { [ [ - ID + 123 } func ID ( ) { }",
  "func ID ( ) { ID ( 123 / - ID / ( ID [ true ] ) call = 123 ) ID ( ) } func ID ( ) { }",
  "func ID ( ) { ID ( 123 / - ID / ( ID [ true ] ) call = } ) ID ( ) } func ID ( ) { 123",
  "func ID ( ) { ID ( 123 / - ID / } ID [ true ] ) call = } ) ID ( ) ( func ID ( ) { 123",
  "func ID ( ID : - ) { call ID ( ) return true * - - ( ID ( ) ) / bool - - true }",
  "func ID ( ID : - ) { call ID ( ) - true * - return ( ID ( ) ) / bool - - true }",
  "func ID ( ID : - ) { call ID / ) - true * - return ( ID ( ) ) ( bool - - true }",
  ") ID ( ID : [ ] bool ) { if ID [ ID / ( 123 func ] { } call ID ( ) }",
  ") ID ( ID : [ ] bool ) { if ID [ ID ID ( 123 func ] { } call / ( ) }",
  ") ID ( ID : func ] bool ) { if ID [ ID ID ( 123 [ ] { } call / ( ) }",
  "func ID ( ID : int , ID : [ ID [ ( - - ( ( ( false ) ) ) ) ] ] bool , ID : int ) func } { ID ( ) { }",
  "func ID ( ID bool int , ID : [ ID [ ( - - ( ( ( false ) ) ) ) ] ] : , ID : int ) func } { ID ( ) { }",
  "func ID ) ID bool int , ID : [ ID [ ( - - ( ( ( false ) ) ) ) ] ] : , ID : int ( func } { ID ( ) { }",
  "func ID ( ID : bool , ID : bool [ ID : int ) : int { var ID : , ] int var ID : bool } func ID ( ID : int ) { }",
  "ID ID ( func : bool , ID : bool [ ID : int ) : int { var ID : , ] int var ID : bool } func ID ( ID : int ) { }",
  "ID ID ( func : bool , ID : ID [ ID : int ) : int { var ID : , ] int var ID : bool } func ID ( bool : int ) { }",
  "func ID : ) : int { var ID ( bool ID ( ) [ false * false / ( - true ) ] = true } func ID ( ) { }",
  "func ID : ) : int { var ID ( bool ID ( ) [ false false * / ( - true ) ] = true } func ID ( ) { }",
  "func ID : ) : int { var ID ( / ID ( ) [ false false * bool ( - true ) ] = true } func ID ( ) { }",
  "func ID ( ) : [ ] int { if } ( ( ( - - ID ) ) ) { } print true } func ID ( ) { -",
  "func ID ( ) : [ ] int ) if } ( ( ( - - ID ) ) ) { } print true } func ID ( { { -",
  ") ID ( func : [ ] int ) if } ( ( ( - - ID ) ) ) { } print true } func ID ( { { -",
  "func ID ( ) : int func print false - ID [ ( 123 / ( ID ) / - ID ) ] [ false ] + ID { } } { ID ( ) { }",
  "func ID ( ) : int func print false - ID [ ( 123 / ( ID ) / - ID ) } [ false ] + ID { ] } { ID ( ) { }",
  "func ID ( ) : int func print false - ID [ ( 123 / ( ID ) / - ID ) } [ { ] + ID false ] } { ID ( ) { }",
  "func ) ( ) { while 123 / - true != - true and ID [ ID ] { } } func ID ( ID { }",
  "func ) ( ) { while 123 / - true != - ID and ID [ ID ] { } } func ID ( true { }",
  "func ) ( ) { while 123 / - true ID - ID and ID [ != ] { } } func ID ( true { }",
  "func ID ( ID ID bool ) { var ID : int var : : [ ID [ ( - ID ) ] [ ID ] ] bool }",
  "func ID [ ID ID bool ) { var ID : int var : : ( ID [ ( - ID ) ] [ ID ] ] bool }",
  "func ( [ ID ID bool ) { var ID : int var : : ( ID [ ID - ID ) ] [ ID ] ] bool }",
  "} ID ( ) { var ID : [ ] int } func ID ( ID : [ ID [ ( ID ) ] [ ID ] ] bool ) { func",
  "ID ID ( ) { var ID : [ ] int } func ID ( ID : [ ID [ ( } ) ] [ ID ] ] bool ) { func",
  ") ID ( ) { var ID : [ ] int } func ID ( ID : [ ID [ ( } ID ] [ ID ] ] bool ) { func",
  "func ID ( ID : [ ] int , ID : bool ) : int { var ID : int return ( ( - false ) } ) func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool ) : int { var ( : int return ( ID - false ) } ) func ID ( ) { }",
  "func ID ( ID : [ ] int var ID : bool ) : int { , ( : int return ( ID - false ) } ) func ID ( ) { }",
  "func ID * ) { return - true * ( ( - ( - 123 ) ) ) ( false } func ID ( ) { }",
  "func ID * ) { ) - true * ( ( - ( - 123 ) return ) ( false } func ID ( ) { }",
  "func ID * ) { ) - true return ( ( - ( - 123 ) * ) ( false } func ID ( ) { }",
  "func ID ( ) { var ID func bool var ID : bool return - ID [ 123 * ( ID ) ] } : ID ( ) { }",
  "func ID ( ) { var ID func bool var ID : bool return - ID [ 123 * ( ID ) ] } : ID ( ) { }",
  ") ID ( func { var ID func bool var ID : bool return - ID [ 123 * ( ID ) ] } : ID ( ) { }",
  "func ID ( ) { ] ID : [ var [ - ( ( - ID ( ) ) ) ] int var ID : [ ] bool }",
  "func ID ( ID { ] ID : [ var [ - ( ( - ID ( ) ) ) ] int var ) : [ ] bool }",
  "func ID bool ID { ] ID : [ var [ - ( ( - ID ( ) ) ) ] int var ) : [ ] ( }",
  "func ID , ID : int ( ID : bool ) : [ - ( ( ( false ) ) ) ] [ ] [ ] [ ] bool { }",
  "func ID , ID : int ( ID : bool ) ) [ - ( ( ( false ) : ) ] [ ] [ ] [ ] bool { }",
  "func ID ( ) { : ID var int }",
  "func ID ( ) { : ID } int var",
  "} ID ( ) { : ID func int var",
  "func ID ( ) : [ ] [ ] bool { while false / - ( false * - ( ID ) / - ( - - } ) ) { } { false }",
  "func ID ID ) : [ ] [ ] bool { while false / - ( false * - ( ( ) / - ( - - } ) ) { } { false }",
  "func ID ID ) : [ ] [ ] bool { while false / - ( false * - } ( ) / - ( - - ( ) ) { } { false }",
  "func ID ( ID : [ ( false * ( / - ID ( ) [ ID ] ) ] [ ] int ) { } func ID ID ) { }",
  "func ID ( ID : [ ( false * ( / [ ID ( ) [ ID ] ) ] - ] int ) { } func ID ID ) { }",
  ": ID ( ID func [ ( false * ( / [ ID ( ) [ ID ] ) ] - ] int ) { } func ID ID ) { }",
  "func ID ( ) { var ID : int 123 ID : bool while ID [ ID ( ) [ var ] ] { } print - ( ID ) } func ID ( ) { }",
  "func ID ( ) { var ID - int 123 ID : bool while ID [ ID ( ) [ var ] ] { } print : ( ID ) } func ID ( ) { }",
  "func ID ( ) { var ID ) int 123 ID : bool while ID [ ID ( - [ var ] ] { } print : ( ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool while ID ( ) ) 123 / - ( ( ( 123 [ ) ) / false ] { } }",
  "func ID ( ) { var ID : int var ID : bool [ ID ( ) ) 123 / - ( ( ( 123 while ) ) / false ] { } }",
  "func ID ( ) { var ID : ) var ID : bool [ ID ( ) int 123 / - ( ( ( 123 while ) ) / false ] { } }",
  "func ID ( ID : [ ] [ true and - ( - false / ( ( - - 123 { ) ) ] int ) { } func ID ( ) ) }",
  "func ID ( ID : [ ] [ true and - ( - false / ( ( } - 123 { ) ) ] int ) { - func ID ( ) ) }",
  "func ID ( ID int [ ] [ true and - ( - false / ( ( } - 123 { ) ) ] : ) { - func ID ( ) ) }",
  "func ID ( ) : [ ] [ ] [ ] int { ID ( false - - { true - ( false ) ) = - false } func ID ( ) - }",
  "[ ID ( ) : [ ] func ] [ ] int { ID ( false - - { true - ( false ) ) = - false } func ID ( ) - }",
  "func ID ( ) : [ ] [ ] [ ] int { ID ( false - - { true - ( false ) ) = - false } func ID ( ) - }",
  "func ID ( ID : [ - ID ( ID ( ) [ func ( ) ] [ ID ] ) ] int ) { } ID ID ( ) { }",
  "func ID ( ID : [ - ID ( ID ( ) [ func ( ) } [ ID ] ) ] int ) { ] ID ID ( ) { }",
  "func ) ( ID : [ - ID ( ID ( ) [ func ( ) } [ ID ] ID ] int ) { ] ID ID ( ) { }",
  "func ID ( ID : int , ID : ID ) { var int : int }",
  "func ID ( ID : int , ID : int ) { var int : ID }",
  "func ID ( ID : int , ID : int ) { var int : ID }",
  "func ID ( ID : int , ID : int ) : [ ID ( ) { ID ( - false ) ] int / }",
  "func ID ( ID : int , ID : int ) ( [ ID ( ) { ID : - false ) ] int / }",
  "func ID ( ID : int , ID : int ID ( [ ) ( ) { ID : - false ) ] int / }",
  "( ID ( ) { call ID ( func ( ID [ false ] ) ) ) }",
  "( ( ID ) { call ID ( func ( ID [ false ] ) ) ) }",
  "func ID ( ID : , bool ID : [ ] int ) : int { var ID : int var ID : bool return }",
  "func ID ( ID : , bool ID : [ ] int ) : { int var ID : int var ID : bool return }",
  "func ID ( ID : , bool ID : ID ] int ) : { int var ID : int var [ : bool return }",
  "func ID ( ID : int , ID : [ ( - - ( ID [ ID ] [ false ] ) ) ] bool { { } func ID ( ) ) }",
  "func ID ( ID : int , ID : [ ] - - ( ID [ ID ] [ false ( ) ) ] bool { { } func ID ( ) ) }",
  "func ID ( ID : int , ID ) [ ] - - ( ID [ ID ] [ false ( ) : ] bool { { } func ID ( ) ) }",
  "func ID ( ID : bool , ID : int , ID : [ ] [ ] [ bool ] ) { var ID : int }",
  "[ ID ( ID : bool , ID : int , ID : func ] [ ] [ bool ] ) { var ID : int }",
  "[ ID ( ID : bool int ID : int , ID : func ] [ ] [ bool ] ) { var ID : , }",
  "func ID ( ) { ID ( ) [ ID ID [ ( - ID ) ] [ ( ( ( ID ) ) ) ] ) ] = ( - false ) } func ( ( ) { }",
  "func ID ( ( { ID ( ) [ ID ID [ ( - ID ) ] [ ( ( ( ID ) ) ) ] ) ] = ( - false ) } func ) ( ) { }",
  "func [ ( ID : int ) : [ ] bool { var ID : [ - ID ( ) [ ID ] [ true ] ] ID ] int } func ID ( ) { }",
  "func [ ( ID : int ) : [ ] bool func var ID : [ - ID ( ) [ ID ] [ true ] ] ID ] int } { ID ( ) { }",
  "func [ ( [ : int ) : [ ] bool func var ID : ID - ID ( ) [ ID ] [ true ] ] ID ] int } { ID ( ) { }",
  "func ID ( ID : int , ID { int ) : int : var ID : bool call ID ( ) return - ( 123 ) }",
  "func ID ( call : int , ID { int ) : int : var ID : bool ID ID ( ) return - ( 123 ) }",
  "func ID ( call : int , ID { int ) : int : var ID : bool ID ID ( ) return - ( 123 ) }",
  "func ID ( ) : [ true / ( ID [ ( ( - ( ( - - ID ) ) ) ] [ ID ] ) / ID ID ) ] int { } func ID ( ) { }",
  "func ID ( ) : [ true / ( ID [ ( ( - ( ( - - ID ) [ ) ] ) ID ] ) / ID ID ) ] int { } func ID ( ) { }",
  "func ID ( ) : [ true / ( ID [ ( ( - ( ( int - ID ) [ ) ] ) ID ] ) / ID ID ) ] - { } func ID ( ) { }",
  "func ID ( ) : bool { ID ID : [ false / var [ - true / ( - ID ) * - false ] [ ( ( ID ) ) ] ] [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : bool { ID ID [ [ false / var [ - true / ( - ID ) * - false ] [ ( ( ID ) ) ] ] [ ] [ ] : ] bool } func ID ( ) { }",
  "func ID ( ) : bool } ID ID [ [ false / var [ - true / ( - ID ) * - false ] [ ( ( ID ) ) ] ] [ ] [ ] : ] bool } func ID ( ) { {",
  "func ID ( bool : [ ID [ ID ( ( ID ) ) ] [ - ( ( ( 123 ) ) ) ] ] ID ) { } func ID ( ) { }",
  "func ID ( bool ) [ ID [ ID ( ( ID ) ) ] [ - ( ( ( 123 ) ) : ] ] ID ) { } func ID ( ) { }",
  "func ID ( bool ) [ ID [ ID ( ( ID ) ) } [ - ( ( ( 123 ) ) : ] ] ID ) { ] func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ ] int int { var ID : ) if - - - - - 123 { } } func ID ( ) { }",
  "func ID ] ID : [ ( [ ] [ ] int int { var ID : ) if - - - - - 123 { } } func ID ( ) { }",
  "func ID ] ID : [ ( [ ] [ ] int int { var ID : ) if ID - - - - 123 { } } func - ( ) { }",
  "func ID ( ) : [ true / true / ( - - ( true - - ) - ID ) + - ( ( ID ) ( ) ) ] int { }",
  "func ID ( ) : [ true - true / ( - / ( true - - ) - ID ) + - ( ( ID ) ( ) ) ] int { }",
  "func ID ( ) - [ true - true / ( - / ( true - : ) - ID ) + - ( ( ID ) ( ) ) ] int { }",
  "func ID ( ) { ( ( - - ( ID ( ) [ ID ] ) ) print ID } func ID print ) { }",
  "func ID ( ) { ( ( ( - - ID ( ) [ ID ] ) ) print ID } func ID print ) { }",
  "func ID ( ) { ( ( ( - - ID ( ) [ ) ] ID ) print ID } func ID print ) { }",
  "func var ( ID : bool ) : int { ID ID : [ - ( ( ID ) ) ] [ ] int var ID : int }",
  "func var ( ID : bool ) : int { ID ID ] [ - ( ( ID ) ) ] [ : int var ID : int }",
  "func var ( ID : bool ) : int { ID ID ] [ - ] ( ID ) ) ( [ : int var ID : int }",
  "func ID ( ) : bool 123 var ID : bool ID [ { - true - true * - ID * - 123 ] = - true }",
  "func ID var ) : bool 123 ( ID : bool ID [ { - true - true * - ID * - 123 ] = - true }",
  "func ID var ) : bool 123 ( ID : bool ID [ { - true - true * - ID * - - ] = 123 true }",
  ") ID ( ID : bool , ID : int func : int { var ID : int { var ID : bool var ID : [ ( ( ( ID ) ) ) ] int } }",
  ") ID ( ID : bool , ID : int func : int { var ID : int { : ID var bool var ID : [ ( ( ( ID ) ) ) ] int } }",
  ") ID ( ID : bool , ID : int func : int { var ID : int ) : ID var bool var ID : [ ( ( ( ID { ) ) ] int } }",
  "func ID ( ) : bool { 123 ID : [ ] int var ID : bool ID ( var + ( ( ID ) ) + ID ) = - ID { } } func ID ( ) { }",
  "func ) ( ) : bool { 123 ID : [ ] int var ID : bool ID ( var + ( ( ID ) ID + ID ) = - ID { } } func ID ( ) { }",
  "func ) ( ) : bool { 123 ID : [ ] int var ID : bool ID ( var + ( ( ID ) ID + { ) = - ID ID } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool * : [ ( ( true * 123 ) true ) ) ] bool { }",
  "func ID ( ) : bool , ID : [ ] bool * : [ ( ( true * 123 ) true ) ID ] bool { }",
  "func ID ( ) : [ ] [ ( ( false ) - ( - - ( ( ( ( - - - - - ( ID ) * ) ) ) ) * ( - - ID ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ] [ ( ( false ) - ( - - ( ( * ( - - - - - ( ID ) * ) ) ) ) ( ( - - ID ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ] [ ( ( false - - ( - - ( ( * ( - - - ) - ( ID ) * ) ) ) ) ( ( - - ID ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : int ) : ) { var ID : [ ] int var ID : bool print ID ( ( - - ID int ) if - - - ID { } } func ID ( ) { }",
  "func ID if ID : int ) : ) { var ID : [ ] int var ID : bool print ID ( ( - - ID int ) ( - - - ID { } } func ID ( ) { }",
  "func ID if ID : int ) : ) { var ID : [ ] int var ID : bool print ID ( ( - - ID int ) ( - - - ID { } } func ID ( { ) }",
  "func ID ( ID : [ ] bool , ID : bool , ID { int ) { var ID : [ ] bool } func ID ( ID : bool , ID : [ ] bool ) : }",
  "func } ( ID : [ ] bool , ID : bool , ID { int ) { var ID : [ ] bool } func ID ( ID : bool , ID : [ ] bool ) : ID",
  "func } ( ID : [ ] bool , ID : bool , ID { int ) { var ID : [ ] bool } func ID ( ID : bool , ID bool [ ] : ) : ID",
  "false ID ( ID : bool ) { var ID : int print - ID * func * - ( ( ID ) ) } func ID ( ) { }",
  "false ID ( ID : bool ) { var ) : int print - ID * func * - ( ( ID ) ) } func ID ( ID { }",
  "func ID ( ID : bool , ID : bool ) : bool { var ID : int var ID : int return ID ( func ) } 123 ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : bool { var ID : int ) ID : int return ID ( func ) } 123 ID ( var { }",
  "func ID ( ID : bool , ID : bool ) : bool { var ID : : ) ID int int return ID ( func ) } 123 ID ( var { }",
  "{ ID ( ) : [ ID ( 123 - - true / - true * ( 123 ) ) ] int func } func ID ( ) { }",
  "{ ID ( ) : [ ID ( 123 - - true / - true * ( 123 } ) ] int func ) func ID ( ) { }",
  "{ ID ( ) : [ ID ( 123 - - true / ) true * ( 123 } ) ] int func - func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ ID ( - ( ( false ) ) ) ] [ 123 ] ] int ) } { func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ ID ( - ( ( false ) ) ) ] [ 123 ] { int ) } { func ID ( ) ] }",
  "func ID ( ID : [ ID ( ) [ ID int - ( ( false ) ) ) ] [ 123 ] { ( ) } { func ID ( ) ] }",
  "func ID : ) { var ID ( [ false - ID [ true ] [ - ID ] ] int var ID : bool } func ID ( ) { }",
  "func ID : ) { var ID ( [ false - ID [ true ] [ - ID ] ] int var ID : bool } func ID ( ) { }",
  "func ID : ) { var ID ) [ false - ID [ true ] [ - ID ] ] int var ID : bool } func ID ( ( { }",
  "{ ID ( ID : int , ID : [ ] int , ID : bool ) { call ID ( ID ( ID ) ) } func ID ( ) func }",
  "{ ID ( ID : int , ID : [ ( int , ID : bool ) { call ID ( ID ( ID ) ) } func ID ] ) func }",
  "{ ID ( ID ] int , ID : [ ( int , ID : bool ) { call ID ( ID ( ID ) ) } func ID : ) func }",
  "func ID ( ) : bool { var ID : int var / : int call ID ( ID - - 123 ID - ID ) while ID { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID ID int var / : int call : ( ID - - 123 ID - ID ) while ID { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID ID int var / : int call : ( ID - - 123 ID - ID ) while ID ) } } func ID ( { { }",
  "func ID ( ) : int { var ID : [ ( - ID * ID ( ) / : ) ] int var ID ID [ ] [ ] bool } func ID ( ) { }",
  "func ) ( ) : int { var ID : [ ( - ID * ID ( ID / : ) ] int var ID ID [ ] [ ] bool } func ID ( ) { }",
  "func ) ( ) : int { var ID : [ ( { ID * ID ( ID / : ) ] int var ID ID [ ] [ ] bool } func ID ( ) - }",
  "func ID ( ID ] [ true / 123 * false - - - ID [ ID : ] bool ) { } func ID ( ) { }",
  "func ID ( ID ] [ true / 123 * false - - - ID [ ID : ] bool ) { } { ID ( ) func }",
  "func - ( ID ] [ true / 123 * false - - ID ID [ ID : ] bool ) { } { ID ( ) func }",
  "func ID ( ) { while true and - ID ] ID [ true [ [ - - ID ] ] and false { } } func ID ( ) { }",
  "func ID ( ) { while true and - ID ] ID [ true [ [ ) - ID ] ] and false { } } func ID ( - { }",
  "func ID ( ) { while true [ - ID ] ID and true [ [ ) - ID ] ] and false { } } func ID ( - { }",
  "func print ( ID : int , ID : bool ) : int { ID true / - - 123 and ID } func ID ( ) { }",
  "func print ( ID : int , ID : ) ) : int { ID true / - - 123 and ID } func ID ( bool { }",
  "func print ( ID : int , ID : ) ) : int { ID ID / - - 123 and ID } func true ( bool { }",
  "func * ( ID : [ ] [ 123 ID ( true * 123 + ( 123 ) ) * ID ] int ) { }",
  "func * ( ID : [ ] [ 123 ID ( true * 123 123 ( + ) ) * ID ] int ) { }",
  "func * ( ID : [ ] [ 123 ID ( true * 123 123 ( + ) ) * ID ] int ) { }",
  "func ID - ID : int , ID : [ - ( ( false * true / ( ID ) ) ] bool ) { } func ID ( ) { }",
  "func ID } ID : int , ID : [ - ( ( false * true / ( ID ) ) ] bool ) { - func ID ( ) { }",
  "func ID } ID : int , ID : [ - ( ( false * true { ( ID ) ) ] bool ) { - func ID ( ) / }",
  "func ID ( ) : bool { var ID : int return ( false + 123 != ( - true ) ) } func ID } ) { (",
  "func ID ( ) : bool { var ID : int return ( false + 123 != ( - true ) ) } func ID { ) } (",
  "func ID ( ) : bool { var ID : ( return int false + 123 != ( - true ) ) } func ID { ) } (",
  "func ID ( ID : { ) { var ID : [ ] [ ] [ ] bool if ID [ false ] int } } func ID ( ) { }",
  "func ID ( ID : { ) { var ID : [ ] func ] [ ] bool if ID [ false ] int } } [ ID ( ) { }",
  "func ID ( ID : { ) { var ID : [ ] func ] [ ] bool if ID [ false ] int ID } [ } ( ) { }",
  "func ID ( ID : [ ] bool , ID : ID , ID : bool ) : bool { var ID : [ ] [ 123 ] int } func bool ( ) { }",
  "func ID ( ID , [ ] bool , ID : ID : ID : bool ) : bool { var ID : [ ] [ 123 ] int } func bool ( ) { }",
  "func ID ( ID , [ ] bool , ID : ID : ID : bool ) : bool { var ID : [ ] [ 123 ] int } func bool ( ) { }",
  "func ID ( ID : bool , ID : bool ) : [ ] int { var ID : [ ID [ } ] [ 123 ] ] bool false",
  "func ID ( ID : bool , ID : bool ) : [ ] int { var [ : ID ID [ } ] [ 123 ] ] bool false",
  "func ID ] ID : bool , ID : bool ) : [ ] int { var [ : ID ID [ } ( [ 123 ] ] bool false",
  "func ID ( ID : int , ID : int , ID : [ 123 - ( { ( - ID ) ) ) + - ID ] [ ] [ ] [ ] bool ) ( }",
  "func [ ( ID : int , ID : int , ID : ID 123 - ( { ( - ID ) ) ) + - ID ] [ ] [ ] [ ] bool ) ( }",
  "func [ ( ID : int , ID : } , ID : ID 123 - ( { ( - ID ) ) ) + - ID ] [ ] [ ] [ ] bool ) ( int",
  "func ID ( ID : bool , ID ID int ) : bool { var ID : [ - ( ( : ) ) ] [ ] bool }",
  "func ID ( ID : bool , ) ID int ID : bool { var ID : [ - ( ( : ) ) ] [ ] bool }",
  "func ( ( ID : bool , ) ID int ID : bool { var ID : [ - ( ID : ) ) ] [ ] bool }",
  "func ID ) ) { return ( true * 123 ) + ID [ - - ID ] [ ( ( ID ( ) ] + false }",
  "func ID + ) { return ( true * 123 ) + ID [ - - ID ] [ ( ( ID ( ) ] ) false }",
  "func ID + ] { return ( true * 123 ) + ID [ - - ID ) [ ( ( ID ( ) ] ) false }",
  "func ID ( : : bool , ID ID [ ] bool , ID : bool ) : bool { var ID : int var ID : int if - 123 { } ID = true }",
  "func ID } : : bool , ID ID [ ] bool , ID : bool ) : bool { var ID : int var ID : int if - 123 { ( ID = true }",
  "func ID } : bool bool , ID ID [ ] bool , ID : bool ) : : { var ID : int var ID : int if - 123 { ( ID = true }",
  "func ID ( ) { var ID : bool var ID ) bool print ( - ( - ID ) : print true } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID ) ( print ( - bool - ID ) : print true } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID ) ( print ( - bool - ID ) : print true ID func } ( ) { }",
  "func ID ( ID : bool , ID : int ) { ) ID : int call ID ( ) ID ( ) [ ID ] [ ( - false ) ] = - ( ID var }",
  "func ID ( ID : bool , : : int ) { ) ID ID int call ID ( ) ID ( ) [ ID ] [ ( - false ) ] = - ( ID var }",
  "func ID ( ID : bool , : : int ) { ) ID ID int call ID ( false ID ( ) [ ID ] [ ( - ) ) ] = - ( ID var }",
  "func ID ( ID : int , ID : int , ID int bool ) { var ID : : call ID ( true / false ) { } }",
  "func ID ( ID bool int , ID : int , ID int : ) { var ID : : call ID ( true / false ) { } }",
  "func ID ( ID bool ( , ID : int , ID int : ) { var ID : : call ID int true / false ) { } }",
  "func ID ( ID : [ ] int ) { var ID : [ - ] true and ID - - ( ID ) + ID - bool }",
  "func ID ( ID : [ ] int ) { var ID : [ - ] true and - ID - ( ID ) + ID - bool }",
  "func ID ( ID : [ ] int ) { var ID : [ - bool true and - ID - ( ID ) + ID - ] }",
  "func ID ( ID : bool ) ID : [ ( ( ID ( ) + - - ID ) , ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool ) ID : [ ( ( ID ( ) + - - ID ) , ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool ) ID : [ ( ( ID ( ) + - - ID ) , ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) int var ID : [ ID ( ) * true * - - - ID ] { }",
  "func ID ( ID : int ) int var ID : [ ID ( ) * true * - - - ID ] { }",
  "func ID : ID : int ) int var ID ( [ ID ( ) * true * - - - ID ] { }",
  "func ID ( ID : int } ID : int ) : int { ID [ - 123 == ID ( ) ] = - 123 { } ,",
  "func ID ( ID : int } ID : int ) : int { ID [ - 123 == ID ( ) ] = - 123 , } {",
  "func ID ( { : int } ID : int ) : int { ID [ - 123 == ID ( ) ] = - 123 , } ID",
  "func ID ( ID : int , ID : int ) { var ID : ID var bool : [ ( ID * ( true ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : true , ID : int ) { var ID : ID var bool : [ ( ID * ( int ) ) ] bool } func ID ( ) { }",
  "func ID ( ) : true , ID : int ) { var ID : ID var bool : [ ( ID * ( int ) ID ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ID ( ) * ( - - ( - - 123 123 ) ) ] [ ] [ ] bool }",
  "func ID ( ) { var ID : [ - ID ( ) ] ( - - ( - - 123 123 ) ) ] [ ] [ * bool }",
  "func ID ( ) 123 var ID : [ - ID ( ) ] ( - - ( - - 123 { ) ) ] [ ] [ * bool }",
  "func ID { ) : bool ( var ID : [ - ID [ 123 * - ( ID ) ] [ - - ( - ( 123 ) ) ] ] bool } func ID ( ) { }",
  "func ID { ) * bool ( var ID : [ - ID [ 123 : - ( ID ) ] [ - - ( - ( 123 ) ) ] ] bool } func ID ( ) { }",
  "func ID { [ * bool ( var ID : [ - ID ) 123 : - ( ID ) ] [ - - ( - ( 123 ) ) ] ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ID bool , ] : int ) { var ID : [ ] bool if ID { } }",
  "func ] ( ID : bool , ID : [ ID [ ID bool , ] : int ) { var ID : [ ] bool if ID { } }",
  "func ] { ID : bool , ID : [ ID [ ID bool , ] : int ) ( var ID : [ ] bool if ID { } }",
  "func ID ( ) { while 123 + true * false - 123 ID - - - - ( ID ) * - - ( - ( * ) ) { } } func ID ( ) { }",
  "func ID ( ) { while 123 + 123 * false - true ID - - - - ( ID ) * - - ( - ( * ) ) { } } func ID ( ) { }",
  "func ID ( ) { while false + 123 * 123 - true ID - - - - ( ID ) * - - ( - ( * ) ) { } } func ID ( ) { }",
  "func ID ( [ : [ ] int ) { var ID : [ ] [ ] ID ] int var ID : bool }",
  "func ID ID [ : [ ] int ) { var ( : [ ] [ ] ID ] int var ID : bool }",
  "func ID ( ) { { } } func ID ( ) { var ID : int var ID } int while ID { } :",
  "func ID ( ) { { } ) func ID ( } { var ID : int var ID } int while ID { } :",
  "func ID ( ) { { } ) } ID ( } { var ID : int var ID } int while ID { func :",
  "func ID ( ) : [ ] bool { if ID ( ) [ } ( - ( ID ) ) ) ] { ( }",
  "func ID ) ) : [ ] bool { if ID ( ) [ } ( - ( ID ) ) ( ] { ( }",
  "func ID ) ) : [ ] bool { if ID ( ) [ } ( - ( ID ) ( ( ] { ) }",
  "func ID : ID : int , ID : int , ID : [ ] int ) { } func ID ( ID : int , ID : [ ] bool , ID ( bool ) { }",
  ", ID : ID : int , ID : int , ID : [ ] int ) { } func ID ( ID : int func ID : [ ] bool , ID ( bool ) { }",
  ", ID : ID : int , ID : int , ID : [ ] int ) { } ID ID ( func : int func ID : [ ] bool , ID ( bool ) { }",
  "int ID ( ) { var ID : bool var ID : func call ID ( ID ( ) * ID [ ( 123 ) ] [ 123 ] * ID ) while ( ID ) { } }",
  "int ID ( ) { var ID : bool var ID : func call ID ( ID ( ) * } [ ( 123 ) ] [ 123 ] * ID ) while ( ID ) { } ID",
  "int ID ( ) { var ID : bool var ID : func call ID ( ID ( ) * } [ ( 123 ) ] [ 123 ] ID ID ) while ( ID ) { } *",
  "func ID : ID : [ ] bool , ID ( bool ) : bool { var ID : bool return - false / ID }",
  "func ID : ID : [ ] bool , ID ( bool ) : bool { var ID : bool return - false / ID }",
  "func ID ( ) { ID true / false + true >= return * - ( true ) * ID }",
  "func ID ( ) { ID true / false + true >= return * - ( true ) * ID }",
  "func ID ( ) { ID true / false ) true >= return * - ( true + * ID }",
  "func ID ) ID : [ ] int , ID : bool , ID : bool ( : int { var ID : [ ] [ ] int return } func ID ( ) { }",
  "func ID ) ID : [ ] int , ID : bool , ID : bool ( : int { var ID : [ ] [ ] int return } func ) ( ID { }",
  "int ID ) ID : [ ] int , ID : bool , ID : bool ( : int { var ID : [ ] [ ] func return } func ) ( ID { }",
  "func ID ( ) : [ ] [ ] bool { var ID : ] var ID : int return } func ID ( ID : int , ID : [ bool bool ) { }",
  "func ID ( ) : [ ] [ ] bool { var ID : ] var ID : int return } func ID ( ID : int , ID [ : bool bool ) { }",
  "func ID ( ) : [ ] [ ] bool { var ID : ] var ID : int return } func ID ( ID : int , ID : [ bool bool ) { }",
  "func ID ( ) : [ 123 - ID ( ) - false * - ID and true ] bool { } func ID ) ( { }",
  "func ID ( ) : [ 123 - ID ( - ) false * - ID and true ] bool { } func ID ) ( { }",
  "func ID ( ) : ( 123 - ID [ - ) false * - ID and true ] bool { } func ID ) ( { }",
  "func ID ( ID : int , ID : bool , ID func bool ) { var ID : bool var ID : int ID [ ID ] = ( ( - false ) ) } : ID ( ) { }",
  "func ID ( = : int , ID : bool , ID func bool ) { var ID : bool var ID : int ID [ ID ] ID ( ( - false ) ) } : ID ( ) { }",
  "func ID ( = : int , ID : ) , ID func bool ) { var ID : bool var ID : int ID [ ID ] ID ( ( - false bool ) } : ID ( ) { }",
  "func ID ( ) ) int { var ID : bool var ID : int while ID ( : { var ID : bool var ID : bool } ID = ( false ) } func ID ( ) { }",
  "func ID ( ) ) int { var ID : bool } ID : int while ID ( : { var ID : bool var ID : bool } ID = ( false ) } func ID ( ) { var",
  "func ID ( ) : bool { } func ID : ) : int { var ID : bool var ID ( int }",
  "func ID ( ) : bool { } func ID : ) : int { var ID : bool var ID ( int }",
  "func ID } ) : bool { } func ID : ) : int { var ID : bool var ID ( int (",
  "func ID ( ) { var ID : bool var ID : int { var ID : [ ] [ var ID : int ( ( false ) ) ] [ ] [ ] bool } }",
  "func ID ( ) { var ID : bool var ID : int { var ] : [ ] [ var ID : int ( ( false ) ) ] [ ] [ ID bool } }",
  "func ID ( ) ( var ID : bool var ID : int { var ] : [ ] [ var ID : int { ( false ) ) ] [ ] [ ID bool } }",
  "func ID ) ID : bool , ID : [ ] bool , ID : [ ( ( true * - ( - ( ID ) ) ( ) ] [ ] bool ) { }",
  "func ID ) ID : bool , ID : [ ] bool , ID : [ ( ( true * - ( - ( ID ) ) ] ) ( [ ] bool ) { }",
  "} ID ) ID : bool , ID : [ ] bool , ID : [ ( ( true * - ( - ( ID ) ) ] ) ( [ ] bool ) { func",
  "func ( ( ID : bool , ID : bool ) : int { call ID ( ) print ( ( true ) ) } func ID ID ) { }",
  "func ( ( ID : bool , ID : bool ) : int { ) ID ( call print ( ( true ) ) } func ID ID ) { }",
  "func ( ( ID : bool , ID : bool ( : int { ) ID ) call print ( ( true ) ) } func ID ID ) { }",
  "func ID ( ID ID bool , ID : int ) : [ ] int { print : [ ( true ) ] [ ID ] }",
  "func ID ( ID ID bool , ID : int ) : [ ] int { print : [ ) true ( ] [ ID ] }",
  "func ID ( ID ID bool [ ID : int ) : [ ] int { print : , ) true ( ] [ ID ] }",
  "func ID ( ID : int , ID : int ) { var ] : [ ID [ false / ( 123 ) ] int var ID : bool }",
  "func ID ( ID : int , ID : int ) [ var ] : { ID [ false / ( 123 ) ] int var ID : bool }",
  "func ID ( ID : int , ID : int ) [ var ] : { ID [ false / ( 123 ) ] int var ID : bool }",
  "func ID ( ID : var ) { var ID : [ ] int bool ID : [ ID ( ( true ) ) ] int }",
  "func : ( ID ID var ) { var ID : [ ] int bool ID : [ ID ( ( true ) ) ] int }",
  "func : ( ID ID var ) { var ID : [ ] int bool ID : [ ID ( ( true ) ) ] int }",
  "func ID ( ID : bool , ID : bool ) : [ ] int { var ID ID int var : : bool ID ( - ID ) = false }",
  "func ID ( ID : bool , ID : bool ) : [ ] bool { var ID ID int var : : int ID ( - ID ) = false }",
  "func ID ( ID : bool , ID : bool ) : [ ] bool { var ID ID int var : : int ID ( - ID ) = false }",
  "func ID ( ) : [ ] bool { var ID : bool var ID : bool ) ( ID * ( ID ) / ID if { } { } } func ID ( ) { }",
  "{ ID ( ) : [ ] bool func var ID : bool var ID : bool ) ( ID * ( ID ) / ID if { } { } } func ID ( ) { }",
  "{ ID ( ) : [ ) bool func var ID : bool var ID : bool ] ( ID * ( ID ) / ID if { } { } } func ID ( ) { }",
  "func ID ( ID : bool ) { return } func ID ( ) { var ID ( [ ID : ) [ ( true ) ] [ ID ] ] [ ] int var ID : bool }",
  "func ID ( ID : bool ) { return } func ID ( ) { var ID ( [ ID : ) [ ( true ID ] [ ID ] ] [ ] int var ) : bool }",
  "func ID ( ID : bool var { return } func ID ( ) { ) ID ( [ ID : ) [ ( true ID ] [ ID ] ] [ ] int var ) : bool }",
  "func ID ( ID : [ ] [ true + 123 * - ( - ( - ( ID ) ) ) / ( false ) ] int ) { } func ID { ) ( }",
  "func ID ( ID : [ ] [ true + 123 * - ( - ( - ( ID ) ) ) / ( false ) ] int ( { } func ID { ) ) }",
  "func ID ( ID : [ ] [ true + 123 * - ( - ( - ( ID ) ) ) / ( false ) ] int ( { } func ID { ) ) }",
  "func ID ( ID : bool ) : bool { var ID : bool } ID : bool while false * ID [ true ] { } } func ID ( ) { var",
  "func ID ( var : bool ) : bool { var ID : bool } ID : bool while false * ID [ true ] { } } func ID ( ) { ID",
  "func ID ( var : bool ) : bool { var ID : bool } ID : bool while false * ID ) true ] { } } func ID ( [ { ID",
  "func ID ( ) : bool { var ID : int var ID : int if - - - false / ( false ( ID ) ) { } while - { } }",
  "func ID ( ) : bool { var ID : int var ID : int if - - { false / ( - ( ID ) ) { } while false - } }",
  "func ID ( ) : [ true + 123 and ID ( ) [ 123 + ( { ID ) ] [ - 123 ] ] int - }",
  "func ID ( true : [ ) + 123 and ID ( ) [ 123 + ( { ID ) ] [ - 123 ] ] int - }",
  "func ID ( true : [ ) + 123 and ID ( ) [ 123 ) ( { ID + ] [ - 123 ] ] int - }",
  "func ID ( ( { var ID : [ ( ( ID ( ) ( - ID ) ) ) ) ) ] [ ] bool }",
  "func = ( ) { var ID : int ID ID - - ( ID ( ) + ID ) { } }",
  "func = ( ) { { ID : int ID ID - - ( ID ( ) + ID ) var } }",
  "int = ( ) { { ID : func ID ID - - ( ID ( ) + ID ) var } }",
  "func ID ( ) { var ID : [ ID ( false [ ( ( ID ) ) ] [ - ( ) ) ] ] [ ] int var ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID ( false [ ( ( ID ) ) ) [ - ( ] ) ] ] [ ] int var ID : int } func ID ( ) { }",
  "func ID ( ) ( var ID : [ ID ( false [ ( { ID ) ) ) [ - ( ] ) ] ] [ ] int var ID : int } func ID ( ) { }",
  "func [ ( ID : int ) : [ ] ID ] [ 123 - ID [ ( - false ) ] [ ID ] - false ] [ ] int { }",
  "] [ ( ID : int ) : [ ] ID ] [ 123 - ID [ ( - false ) ] [ ID func - false ] [ ] int { }",
  "] ( [ ID : int ) : [ ] ID ] [ 123 - ID [ ( - false ) ] [ ID func - false ] [ ] int { }",
  "func ID ( ID : false [ * ( - 123 <= ( true ) ) ] bool ) { } func ID ( ) { }",
  "func ) ( ID : false [ * ( - 123 <= ( true ) ID ] bool ) { } func ID ( ) { }",
  "func ID ( ID : false [ * ( - 123 <= ( true ) ) ] bool ) { } func ID ( ) { }",
  "func ID ] ) : bool { return ( - - ( - ID [ ID ( [ ( true ) ] ) ) }",
  "func ID ] ) : bool { return ( ] - ( - ID [ ID ( [ ( true ) - ) ) }",
  "func ID ] ) : bool { return ( ] - ( - ID [ ID ( [ ( true ) - ) ) }",
  "func ID ( ) { var ID : [ ] bool } func ID ( ) } int { while ID ( ) [ ID ] [ ID ] { : }",
  "func ID ( ) { var ID : [ { bool } func ID ( ) } int { while ID ( ) [ ID ] [ ID ] ] : }",
  "func ID ( ) { var } : [ { bool } func ID ( ) } int { while ID ( ) [ ID ] [ ID ] ] : ID",
  "func ID ( ) { var ID : int ID [ - - ( 123 / [ ID - ID ] [ ( true ) ] * - ID ) ] = true } func ID ( ) { }",
  "func ID ( ) { var ID : int ( [ - - ( 123 / [ ID - ID ] [ ID true ) ] * - ID ) ] = true } func ID ( ) { }",
  "func ID ( ) { var ID : int ( [ - - ( 123 / [ ID ID ID ] [ ID true ) ] * - - ) ] = true } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool ) : - { var ID : [ bool ( - ID ) ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ID var [ ] [ ] bool ) : - { var ID : [ bool ( - ID ) ] [ ] int : ID : bool } func ID ( ) { }",
  "func ID ( ID var [ ] [ ] bool ) : - { var ID : [ bool ( - ID ) ] [ ] int : ID : bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : [ - true * - false * ID ] ) ( int } func ID ( ) { }",
  "func ID ( ) : int [ var ID : int var ID : { - true * - false * ID ] ) ( int } func ID ( ) { }",
  "func ID ( ) : int [ var ID { int var ID : : - true * - false * ID ] ) ( int } func ID ( ) { }",
  "func ID ( ID : [ - 123 / ( 123 * } - ( true ) / - ID ) ] [ ] [ ] bool ) { - func ID ( ) { }",
  "func ID ( ID : [ - 123 / ( 123 * } - ( true ) / - ID ) ] [ ] [ ] bool ( { - func ID ) ) { }",
  "func ID ( ID : [ - 123 / ( 123 * } - ( true ) / - ID ) ] [ ] { ] bool ( { - func ID ) ) [ }",
  "func ID ( ) { var ID : int { var ID : [ 123 and ( - - ID ) and ( ( - true ) ) ] bool print ID : [ ] int } var ID }",
  "func ID ( ) { ) ID : int { var ID : [ 123 and ( - - ID ) and ( ( - true var ) ] bool print ID : [ ] int } var ID }",
  "func ID ( ) { ) ID ( int { var ID : [ 123 and ( - - ID ) and : ( - true var ) ] bool print ID : [ ] int } var ID }",
  "func ID ) ID : int ( { var ID : int return true / ( ( false ) ) } func ID ( ) { }",
  "func ID ) ID : int ( { var ID : int return true / ( ( false ) ) } func ID ( ) { }",
  "func ID ) ID : int ( { var ID : int return true ) ( ( false / ) } func ID ( ) { }",
  "func ID ( ) { var ID false bool { print ID ( ) [ : / 123 * false ] } { } }",
  "func ID ( ) { var ID false bool print { ID ( ) [ : / 123 * false ] } { } }",
  "func ID ( ) { var ID false bool print { ] ( ) [ : / 123 * false ID } { } }",
  "func ID ( ID : [ true + true / * 123 - true ( - ( false ) / ( ( ID ) ) ) * ID ] bool ) { }",
  "func ID ( ID : [ true + true / * 123 - true ( - ( false ) / ( ( ID ) ) ) * ID ] bool ) { }",
  "func ID ( ID : [ true + true / * 123 ( true ( - - false ) / ( ( ID ) ) ) * ID ] bool ) { }",
  "func ID ( ID : bool bool { var ID : ) call ID ( ID [ ( - ID ) ] [ ( ID ) ] ) }",
  "func ID ( ID : bool bool { var ID : ) call ID ( ID [ ] - ID ) ] [ ( ID ) ( ) }",
  "- ID ( ID : [ - - ID [ func - - ( - ( ( ( ID ) ) ) ) ] [ ( true ) ] ] int ) { }",
  "- ( ( ID : [ - - ID [ func - - ( - ID ( ( ID ) ) ) ) ] [ ( true ) ] ] int ) { }",
  "- ( ( ID : [ - - ID [ int - - ( - ID ( ( ID ) ) ) ) ] [ ( true ) ] ] func ) { }",
  "func ID ( ) { - ID : int var ID : [ ] int if var ( - true - - - - - ID + ID ) { } print false } func ID ( ) { }",
  "func ID ( ) { - ID : int var ID : [ ] int if var ( - true - - - - - ID ( ID ) { } print false } func ID + ) { }",
  "func ID ( ) { - int : int var ID : [ ] ID if var ( - true - - - - - ID ( ID ) { } print false } func ID + ) { }",
  "func ID ( ) { ID [ false * - - ( ID ID ( ) ) ] [ ID ] = ( - - true ) if ( true ) { } }",
  "func ID ( ) { ID [ } * - - ( ID ID ( ) ) ] [ ID ] = ( - - true ) if ( true ) { false }",
  "func ID ( ) { ID [ } * - - ( ID ID ( ) ) ] [ ID ] = ( - - true ) if ( true ) { false }",
  "func ID 123 ) : int { while 123 / - - ID [ ID ( ( ) ] [ - true ] { } if 123 { } }",
  "func ID 123 ) : int { while 123 / - - ID [ ID 123 ( ) ] [ - true ] { } if ( { } }",
  "func ID 123 ) : int - while 123 / { - ID [ ID 123 ( ) ] [ - true ] { } if ( { } }",
  "func ID ( ID : int , ID : int ) { } func ID ( ) : [ [ ( - ( ID ) ) ] ID ] [ ] bool { }",
  "func ID ( ID : int , ID : int ) { } func - ( ) : [ [ ( ID ( ID ) ) ] ID ] [ ] bool { }",
  "func ID ( ID : int , ID : int ) { } func - ( ) : [ [ ( ID ( ] ) ) ] ID ] [ ID bool { }",
  "func ID ( ) : [ - ( true * false / ID 123 and ( ( ID ) ) ) ] bool { } func - ( ) { }",
  "func ID ( ) : [ - ( true ] false / ID 123 and ( ( ID ) ) ) * bool { } func - ( ) { }",
  "func ( ( ) : [ - ( true ] false / ID 123 and ( ID ID ) ) ) * bool { } func - ( ) { }",
  "func ID ( ) { var ID : [ 123 * ID [ ID * true ID true ] [ - - / ] / ( - - true ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) { { ID : [ 123 * ID [ ID * true ID true ] [ - - / ] / ( - - true ) ] bool var ID : int } func ID ( ) var }",
  "func ID ) ) { { ID : [ 123 * ID [ ID * true ID true ] [ - - / ] / ( - - true ( ] bool var ID : int } func ID ( ) var }",
  "func ID ( ID : [ ID ( ) [ 123 != ID ( ) + true ] ] false ] [ [ ] [ ] bool ) { }",
  "func ID ( ID : [ ID ( ) [ [ != ID ( ) + true ] ] false ] [ [ ] 123 ] bool ) { }",
  "func ID ( ID : [ ID { ) [ [ != ID ( ) + true ] ] false ] [ [ ] 123 ] bool ) ( }",
  "func ID ( ) { var ID : [ ] int var ID : [ ] [ - - true { ID ( ) ] [ ] bool } func ID ( ) * }",
  "func ID ( ) { var ID : [ ] int var ID : [ ] [ - - ] { ID ( ) true [ ] bool } func ID ( ) * }",
  "func ID ( ) { var ID : [ ] int var ID ) [ ] [ - - ] { ID ( : true [ ] bool } func ID ( ) * }",
  "func ID ( ) { while true * ( * ID [ ( ID ) ] [ - ( ID ) ] { } call ID 123 ) } func ID ( ) { }",
  "func ID ( 123 { while true * ( * ID [ ( ID ) ] [ - ( ID ) ] { } call ID ) ) } func ID ( ) { }",
  "func ID ( 123 { while true * ( ID ID [ ( * ) ] [ - ( ID ) ] { } call ID ) ) } func ID ( ) { }",
  "func ID ( ID : [ ID ( / + ( ( 123 ) - 123 / - ( - ID ) ) ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ID func / + ( ( 123 ) - 123 / - ( - ID ) ) ) ] [ ] [ ] bool ) { } ( ID ( ) { }",
  "func ID ( ID : [ ID func / + ( ( 123 ) ( 123 / - ( - ID ) ) ) ] [ ] [ ] bool ) { } ( ID - ) { }",
  "func ID ( : ID [ - false / 123 * ID ( - ( 123 ) ) ] bool ) { }",
  "func ID ( : ID [ - false / 123 * ID ( - ( 123 ) ) ] bool ) { }",
  "func ID ( : ID [ ID false / 123 * - ( - ( 123 ) ) ] bool ) { }",
  "func ID ( 123 : int ) { var ID : int if ( false / ID [ ID ] [ - false ] / ( ( - ( ID ) ) ) ) { } }",
  "( ID ( 123 : int ) { var ID : int if ( false / ID [ ID ] [ - false ] / ( func - ( ID ) ) ) ) { } }",
  "( ID ( 123 : int ) { var ID : int if ( false / ID [ ID ] [ ) false ] / ( func - ( ID ) ) - ) { } }",
  "func ID ( ID : : ] [ ] [ ] bool , ID : bool , ID : [ ] int ) : int { var ID : int var ID [ int }",
  "func ID ( ID : : ] [ ] [ ] bool , ID : int , ID : [ ] int ) : int { var ID : int var ID [ bool }",
  "func , ( ID : : ] [ ] [ ] bool , ID : int ID ID : [ ] int ) : int { var ID : int var ID [ bool }",
  "func ID : ) : int { var ID : int var ID ( bool return }",
  "func ID : ) : int { var ID : int var ID ( bool return }",
  "func ID : var : int { var ID : int ) ID ( bool return }",
  "func ID ( ) : [ - - - ID ( - false { ( false ) / true ) ] int / } func ID ( ) { }",
  "func ID ( ) : [ - - - ID false - false { ( ( ) / true ) ] int / } func ID ( ) { }",
  "func ID ( : ) [ - - - ID false - false { ( ( ) / true ) ] int / } func ID ( ) { }",
  "func ( ( ID : [ ] int , ID : bool , ID : bool ) : bool { var ID : bool while 123 / ID 123 ) * true { } { } } func ID ( ) { }",
  "func ( ( ID : [ ] int , ID : bool , var : bool ) : bool { ID ID : bool while 123 / ID 123 ) * true { } { } } func ID ( ) { }",
  "func ( ( ID : [ ] int , ID : bool , var : bool ) : bool { ID ID : bool while 123 / ID 123 ) { true { } { } } func ID ( ) * }",
  "func ID ( bool : ID ) { return ID * 123 and 123 }",
  "func ID ( bool : 123 ) { return ID * ID and 123 }",
  "func ID ( ID : bool , { : int ) : [ ( ( ID ( true ) ) ) ] int ID } func ID ( ) { }",
  "func ID ( ID : bool , { : int ) : [ ( } ID ( true ) ) ) ] int ID ( func ID ( ) { }",
  "func ID ( ID : bool , { : int ) : [ ( } ID ( true ) ) ) ] int ID ( func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ - - ( ID ( ) false ) ] int , ID : bool ) { }",
  "func ID ( ID : ) ] bool , ID : [ - - ( ID ( ) false ) ] int , ID : bool [ { }",
  "func ID ( ID : ) ] bool , ID : [ - - ( ID ( ) false [ ] int , ID : bool ) { }",
  "- ID ( ID : bool , ID : [ ( ( ( ( func - ID ) ) ) ) ] [ ] int , ID : bool ) { } func ID ( ) { }",
  "- ID ( ID [ bool , ID : [ ( ( ( ( func - ID ) ) ) ) ] : ] int , ID : bool ) { } func ID ( ) { }",
  "- ID ( ID [ bool , ID ) [ ( ( ( ( func - ID ) ) ) ) ] : ] int , ID : bool : { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : : } func ID ( ) bool int { var ID : bool var ID : [ ] int }",
  "func ID ( ID : int ) { var ID : : } func ID ( ) bool int { var ID : bool var ID : int ] [ }",
  "func ID ( ID : var ) { var ID : : } func ID ( ) bool int { var ID : bool int ID : int ] [ }",
  "ID ID ( ID : int ) { call func ( ) }",
  "ID ID ( ID : int ) { call func ( ) }",
  "func : ( ID : bool ) { var ID : bool var ID ID [ ID ( ) * - ( - false ) / false ] int }",
  "func : ( ID : bool ) { var ID - bool var ID ID [ ID ( ) * - ( : false ) / false ] int }",
  "func : ( ID : bool ) { var ID - bool ) ID ID [ ID ( var * - ( : false ) / false ] int }",
  "func ID ( - : [ ( ID ( 123 and ( ID ) ) ) ] int ) { }",
  "func ID ( - : [ ( ID ( 123 and ( ID ) ) ) ] int ) { }",
  "func ID 123 - : [ ( ID ( ( and ( ID ) ) ) ] int ) { }",
  "func ID ( ID ID int , ID : [ ] int , : : bool ) { while false * - ( ID ) { } { } }",
  "func ID ( ID ID int , ID : [ ] int , : : bool ) { while false - * ( ID ) { } { } }",
  "func ID ( ID ID int , ID : [ ] int , : : bool ) { while false - * ( ID ) { } { } }",
  "func ID ( ID : [ ] bool , ID : bool , ID : bool false : bool { var ID : [ true / ) ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool , ID [ bool false : bool { var ID : : true / ) ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID } bool , ID [ bool false : bool { var ID : : true / ) ] int var ID : [ ] int : func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { [ ID : int var ID : [ ] [ ] [ ] [ ( ID ) ] var ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : ID , bool : int ) { [ ID : int var ID : [ ] [ ] [ ] [ ( ID ) ] var ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : ID , ] : int ) { [ ID : int var ID : [ ] [ ] [ ] [ ( ID ) ] var ] [ bool bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ID * false ID true + - - true ] [ ] [ ] int } func * ( ) { }",
  "func ID ( ) : bool { var ID : [ ID * false ID true + - - true ] func ] [ ] int } [ * ( ) { }",
  "func ID ( ) : bool { var ID : [ [ * false ID true + - - true ] func ] [ ] int } ID * ( ) { }",
  "123 ID ( ) : [ ID ( true * ( func / false * ( ( ( 123 ) ) ) ) ) ] int { }",
  "123 ID ( ) : [ ID ( true * ( func / false * ( ( ( 123 ) ) ) ) ) ] int { }",
  "func ID ( ID : [ ] bool , , : int ID ID : bool ) { var ID : bool } func ID ( ) { var ID : int }",
  ": ID ( ID : [ ] bool , , : int ID ID : bool ) { var ID func bool } func ID ( ) { var ID : int }",
  ": ID ( ID : [ ] bool , , : int ID ID : bool ) { var ID func bool } func ID ( ) { var ID : int }",
  "func ID ( ID : bool ) : ] { { ID ( ) = false * ID ( ) [ true ] [ ID bool * ID } { } }",
  "func ID ( ID : bool ) : ] { { ) ( ) = false * ID ( ID [ true ] [ ID bool * ID } { } }",
  "func ID ( * : bool ) : ] { { ) ( ) = false * ID ( ID [ true ] [ ID bool ID ID } { } }",
  "func ID ( ) : [ false / ( false / - false ( ID ( ) [ ( 123 ) ] [ * ( ID ) ) ] ) / ID ] [ ] bool { }",
  "func ID ( ) : [ false / ( false / - false ( ID ( } [ ( 123 ) ] [ * ( ID ) ) ] ) / ID ] [ ] bool { )",
  ") ID ( func : [ false / ( false / - false ( ID ( } [ ( 123 ) ] [ * ( ID ) ) ] ) / ID ] [ ] bool { )",
  "func ID ( ) : [ ] int { var ID : bool var ID : int print - false * - ( ) ( ( ID ) ) ( ) }",
  "func ID ( int : [ ] ) { var ID : bool var ID : int print - false * - ( ) ( ( ID ) ) ( ) }",
  "func ID ( int : [ ] ) { var ID : bool var ID : int print - false * - ( ) ( ( ( ) ) ID ) }",
  "func ID ( ID : ID , bool : [ false / ( ( ( ( true ) ) ) ) / false ] bool , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : ID , bool : [ false / ( ( ( ( true ) ) ) ) / false ] bool , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : ID , bool : [ false / ( ( ( ( true ) ) ) ) / false ] bool , ID : [ func int ) { } ] ID ( ) { }",
  "func ID - ID : bool ) : [ ID ( ) [ - ( true - ( ( - ( - - ( true ) ) ) ) ( - - ( ID ) ) ] ] bool { } func ID ( ) { }",
  "func ID - ID : bool ) : [ ) ( ) [ - ( true - ( ( - ( - - ( true ) ) ID ) ( - - ( ID ) ) ] ] bool { } func ID ( ) { }",
  "func ID - ID : bool ) : ( ) ( ) [ - ( true - ( ( - [ - - ( true ) ) ID ) ( - - ( ID ) ) ] ] bool { } func ID ( ) { }",
  "func ID : ) { var ID ( bool { print - ( ( - - ID ) ) print ( - true ) } print - ID }",
  "func ID : - { var ID ( bool { print - ( ( - - ID ) ) print ( ) true ) } print - ID }",
  "func ID : - { var ID ( ID { print - ( ( - - ID ) ) print ( ) true ) } print - bool }",
  "func ID ( ID : [ , [ ] bool ] ID : bool ) { var ID : int var ID : int ID ( ) [ ( ( ( - ID ) ) ) ] = - ( ID ) } func ID ( ) { }",
  "func ID ( ID : [ , [ ] bool ] ID : bool ) { var ID : int var ID : int ID ( ) ( ( ( ( - ID ) ) ) ] = - ( ID ) } func ID [ ) { }",
  "func ID ( ID : [ , [ ] bool ] ID : bool ) { var ID : int var ID : int [ ( ) ( ( ( ( - ID ) ) ) ] = - ( ID ) } func ID ID ) { }",
  "func ID ( ) : bool { return } func ID ( ) { var : ID bool print ( false ) }",
  "func ID ( ) : bool { return } func ID ( ) { ID : var bool print ( false ) }",
  "func ID ( ) { bool : return } func ID ( ) { ID : var bool print ( false ) }",
  ": ID ( ID func int ) { var ID : bool var ID : [ - - - 123 * ID - ( false ) ] bool } func ID ( ) { }",
  ": ID ( ID func int ) { var * : bool var ID : [ - - - 123 ID ID - ( false ) ] bool } func ID ( ) { }",
  "* ID ( ID func int ) { var : : bool var ID : [ - - - 123 ID ID - ( false ) ] bool } func ID ( ) { }",
  "func ID ( ) : int { var [ : ID ID * - - 123 and ( ID ) ] bool }",
  "func ID ( ) : int { var [ : ID ID } - - 123 and ( ID ) ] bool *",
  ") ID ( ) : int { var [ : ID ID } - - 123 and ( ID func ] bool *",
  "func ID ( ID : int ) : bool ( { print ID [ - ID * { ID ) * false ] } } func ID ( ) { }",
  "func ID ( ID : int ) : bool ( { print ID [ - ID * * ID ) { false ] } } func ID ( ) { }",
  "{ ID ( ID : int ) : bool ( { print ID [ - ID * * ID ) func false ] } } func ID ( ) { }",
  "func ID ( ID : ID ] [ ] bool , ID : int ) { var ID : [ true * ( 123 ) / ( [ ) ] bool }",
  "func ID ( : : ID ] [ ] bool , ID ID int ) { var ID : [ true * ( 123 ) / ( [ ) ] bool }",
  "func ID ( : : ID ] [ ] bool , ID ID int true { var ID : [ ) * ( 123 ) / ( [ ) ] bool }",
  "func ID ( ID : [ ( { ( false / true * - - - ID ) ) ] bool ) ID }",
  "func bool ( ID : [ ( { ( false / true * - - - ID ) ) ] ID ) ID }",
  "func bool * ID : [ ( { ( false / true ( - - - ID ) ) ] ID ) ID }",
  "func ID ( ID : bool ID : bool { var ID : bool var ID : [ ] bool call ) ( ID ( ID ) ) } func ID ( ) { }",
  "func ID ( ID bool bool ID : : { var ID : bool var ID : [ ] bool call ) ( ID ( ID ) ) } func ID ( ) { }",
  "func ID ( ID bool bool ID : : { var ID : bool var ID : [ ] ID call ) ( ID ( ID ) ) } func bool ( ) { }",
  "func ID ( ID : [ ] int , ID : [ false / ID / ID [ ) ] [ ( false ) ] ] bool ID { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : false [ / ID / ID [ ) ] [ ( false ) ] ] bool ID { } func ID ( ) { }",
  "func ID ( ID : false ] int , ID : false [ / ID / ID [ ) ] [ ( [ ) ] ] bool ID { } func ID ( ) { }",
  "func ID ( ID : int ) { ] ID / ID ( ) [ ( ID ) ] [ ID print }",
  "func ID ( ] : int ) { ID ID / ID ( ) [ ( ID ) ] [ ID print }",
  "func ID ( ] : int ) { ID ID / ID ) ) [ ( ID ( ] [ ID print }",
  "func ID ( ) : true { var ID : [ ID [ int and - - - ID ] ] [ ] [ ] int }",
  "] ID ( ) : true { var ID : [ ID [ int and - - - ID ] func [ ] [ ] int }",
  "] ID ( ) : true { var ID : [ - [ int and - ID - ID ] func [ ] [ ] int }",
  "func ID ( ) { } func ID ( ) : [ ID [ { 123 * ID ] [ false ] ] int - }",
  "func ID ( ) { } func ID ( ) : [ ID [ { [ * ID ] 123 false ] ] int - }",
  "func ID ] ) { } func ID ( ) : [ ID [ { [ * ID ( 123 false ] ] int - }",
  "func ID ( ) { var ID : bool var bool : [ ] [ ] ID while false / 123 + ( false ) { } ID = ( ID ) }",
  "func ID ( ID ID bool , ID : int , ID : bool ) : int { var ID : bool var : : [ false * false ] [ ] int } func ID ( ) { }",
  "func ID ( ID ID bool , ID : int , var : bool ) : int { ID ID : bool var : : [ false * false ] [ ] int } func ID ( ) { }",
  "func ID ( ID ID bool , ID : int , var : func ) : int { ID ID : bool var : : [ false * false ] [ ] int } bool ID ( ) { }",
  "func true ( ) : bool { var ID : int } func ID ( ) { var ID : bool var ID : int print ID ID = ( ( ID ) ) }",
  "func true ( ) : bool ID var ID : int } func ID ( ) { var ID : bool var ID : int print { ID = ( ( ID ) ) }",
  "func ID ( ) { } ID : bool { print 123 * false * - true != false ID = - ( - false ) var } func ID ( ) { }",
  "func ID ( ) { } ID : bool { print 123 * false * - false != true ID = - ( - false ) var } func ID ( ) { }",
  "func ID ( ) { } ID : bool { print 123 * false * - false != true ) = - ( - false ID var } func ID ( ) { }",
  "func ID ( ID : int ) int [ ] : { var ID : bool ID = ( ( ( ID ) ) ) if 123 { } }",
  "func ID ( bool : int ) int [ ] : { var ID : ID ID = ( ( ( ID ) ) ) if 123 { } }",
  "func ID ( bool : int ) int [ ] : { var ID : ID ID ( ( = ( ID ) ) ) if 123 { } }",
  "func ID ( ) : int { var ID ( bool if ID : ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ) : int { : ID ( bool if ID var ( ID ) ) { } } func ID ( ) { }",
  "func { ( ) : int { : ID ( bool if ID var ( ID ) ) ID } } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int ) : [ ] bool { var ID ( int ID ( ( ( 123 ) ) ) = : ( ( true ) ) ) }",
  "func ID ( ID : [ ] [ ] int ) ] [ : bool { var ID ( int ID ( ( ( 123 ) ) ) = : ( ( true ) ) ) }",
  "func ID ( ID : [ ] [ ] int ) ] ID : bool { var ID ( int [ ( ( ( 123 ) ) ) = : ( ( true ) ) ) }",
  "func ID ( ) { var ID : int call ID ( 123 ) ( - true * ( - ( false + ) ) - false ) }",
  "func ID ( ) { var ID : ) call ID ( 123 ) ( - true * ( - ( false + ) int - false ) }",
  "func ID ( ) { var ID : ) call ID ( 123 ) ( - true * - - ( false + ) int ( false ) }",
  "func ID ( ID : bool , ID : int , ID : [ ] [ ID [ ID ( ) ] [ - false ) ] bool ] { }",
  "[ ID ( ID : bool , ID : int , ID : [ ] [ ID [ ID ( ) ] func - false ) ] bool ] { }",
  "[ ID ( ID : bool , ID : int , ID : [ ] [ ] [ ID ( ) ] func - false ) ID bool ] { }",
  "func ID ( ID : bool ) { } ID : bool var ID : [ ( ID ( 123 ) ) ] [ ] bool var",
  "bool ID ( ID : bool ) { } ID : func var ID : [ ( ID ( 123 ) ) ] [ ] bool var",
  "func ID ( ID : bool ) { } ID : bool var ID : [ ( ID ( 123 ) ) ] [ ] bool var",
  "func ID { ID : bool ) ( call ID ( ) print - ( ID [ 123 ] [ - ID ] ) } func ID ( ) { }",
  "func ID { ID : bool ) ( call print ( ) ID - ( ID [ 123 ] [ - ID ] ) } func ID ( ) { }",
  "func ID { ( : bool ) ( call print ( ) ID - ( ID [ 123 ] [ - ID ] ) } func ID ID ) { }",
  ": ID ( ID func int , ID : [ true * 123 / - ( - - - ( ( ID ) ) ) ] bool ) { }",
  ": ID ( ID func 123 , ID : [ true * int / - ( - - - ( ( ID ) ) ) ] bool ) { }",
  ": ID ( ID func ( , ID : [ true * int / - ( - - - 123 ( ID ) ) ) ] bool ) { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : [ - ( ( ( ( true ) ) ) ) ] } var ID : int bool",
  ") ID ( ID : int , ID : bool ) : bool { var ID : [ - ( ( ( ( true ) func ) ) ] } var ID : int bool",
  ") ID ( ID : int , - : bool ) : bool { var ID : [ ID ( ( ( ( true ) func ) ) ] } var ID : int bool",
  "func ID ( ) [ : ] int { var ID : bool return }",
  "func ID ( ) [ : ] int { : ID var bool return }",
  "func ID ( ) [ : ] int { : ID return bool var }",
  "func ID ( ID : [ - - ) * 123 + ( ( false ) ) + ( 123 true ] int ) { }",
  "func ID ( ID : [ - - ) * 123 + ( ( true ) ) + ( 123 false ] int ) { }",
  "func ID ( ID : [ - - ) * 123 + ( ( true ) ) int ( 123 false ] + ) { }",
  "func ID ( ) : bool { var ID : bool call ID ( ) - ( - ( 123 ) ) - } func ID ( ) { }",
  "func ID ( ) : : { var ID bool bool call ID ( ) - ( - ( 123 ) ) - } func ID ( ) { }",
  "func ID ( ) : : { var ID call bool bool ID ( ) - ( - ( 123 ) ) - } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ID * false * true bool ( ( - ( ( ( - ( - ID ) ) ) ) ) ) ] + ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ID * false * ] bool ( ( - ( ( ( - ( - ID ) ) ) ) ) ) true + ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ID * false * ( bool ( ( - ( ] ( - ( - ID ) ) ) ) ) ) true + ) { }",
  "func ID ( ) : bool { func ID : int { var ID : [ ] bool print ( ( ID ) ) call ID ( ) } } var ID ( ) { }",
  "func ID } ) : bool { func ID : int { var ID : [ ] bool print ( ( ID ) ) call ID ( ) } } var ID ( ) { (",
  "func ( } ) : bool { func ID : int { var ID : [ ] bool print ( ( ID ) ) call ID ID ) } } var ID ( ) { (",
  "func ID ( ) { var ID : bool ID [ 123 * ( - - true * ( ) / true - - true ) ] [ ID ] = true }",
  "func ID ( 123 { var ID : bool ID [ ) * ( - - true * ( ) / true - - true ) ] [ ID ] = true }",
  "func ID ( 123 { var ID : bool ID [ ) * ( - - ) * ( true / true - - true ) ] [ ID ] = true }",
  "func ID ( ( { var ID : bool var ID : int if ( true * ID [ - true ] [ ( ) true ) ) ] * ID ) { } while false { } } func ID ( ) { }",
  "if ID ( ( { var ID : bool var ID : int func ( true * ID [ - true ] [ ( ) true ) ) ] * ID ) { } while false { } } func ID ( ) { }",
  "if ID ( ( { var ID : bool var ID : int func ( true * ID [ ( true ] [ - ) true ) ) ] * ID ) { } while false { } } func ID ( ) { }",
  "func ID ] ) : [ - - ID [ - 123 * ( ( true ) ) * - 123 ] [ ( ID ) ] ( [ ] int { } func ID ( ) { }",
  "func ID ] ) : [ ID - ID [ - 123 * ( ( true ) ) * - 123 ] [ ( - ) ] ( [ ] int { } func ID ( ) { }",
  "func ID ] ) : [ ID - ID [ ) 123 * ( ( true ) ) * - 123 ] [ ( - ) ] ( [ ] int { } func ID ( - { }",
  "func ID ( ID [ bool ) : bool { var ID : : ( - ( ( 123 ) ) ) ] [ ] int var ID : [ ] bool }",
  "func ID ( ID [ bool ) : bool { var ( : : ID - ( ( 123 ) ) ) ] [ ] int var ID : [ ] bool }",
  "func ID ( ID [ bool ) : bool 123 var ( : : ID - ( ( { ) ) ) ] [ ] int var ID : [ ] bool }",
  "func ID ( = : bool { ID ( ID * - ID ( - 123 ) ) ) ID ID = 123 }",
  "func ID ( = : bool { ID ( ID * - ID ( ) 123 - ) ) ID ID = 123 }",
  "func ID ) = : bool { ID ( ID * - ID ( ) 123 - ( ) ID ID = 123 }",
  "func ID ( ID : bool ) [ bool { var ID : [ ] bool if ID : 123 ] { } }",
  "func if ( ID : bool ) [ bool { var ID : [ ] bool ID ID : 123 ] { } }",
  "func ID ( ) : int { while ID [ - ID * ( ID ) * ] ID [ - - false ] { } }",
  "func ID ( ) : int { while ID [ - ID * ( ID ) * ] ID false - - [ ] { } }",
  "func ID ( ) : int { while ID [ * ID - ( ID ) * ] ID false - - [ ] { } }",
  "func false ( ID : [ - - ID [ ID ( ) [ false + ID + - - - - ID ] ] [ true ] ] int ) { }",
  "func false ( ID : [ - - ID [ ID ( ) [ false [ ID + - - - - ID ] ] + true ] ] int ) { }",
  "func false ( ID : [ { - ID [ ID ( ) [ false [ ID + - - - - ID ] ] + true ] ] int ) - }",
  "func ID ( ID : [ 123 { ( ID [ false + ID ] [ ( ID ) ] ) ] [ ] [ ] int ) / }",
  "func ID / ID : [ 123 { ( ID [ false + ID ] [ ( ID ) ] ) ] [ ] [ ] int ) ( }",
  "func ID / int : [ 123 { ( ID [ false + ID ] [ ( ID ) ] ) ] [ ] [ ] ID ) ( }",
  "func return ( ) { ID ( false * ( 123 * ( ID ) ) / ID ) } func ID ( ) { }",
  "func return ( ) { ID } false * ( 123 * ( ID ) ) / ID ) ( func ID ( ) { }",
  "func return ( ) { ID } false * ( 123 * ( ID ) ) / } ) ( func ID ( ) { ID",
  "func ID ( ) { var ID : false if - - - bool * false + ( false ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : false if - - - bool * false + ( false ) { } call ID ( ) } func ) ( ID { }",
  "func ID ( ) { var ID : false if - - - bool * false + ( false ) { } call } ( ) } func ) ( ID { ID",
  "func ID ( ) : bool { ID ID : bool { var var : bool var ID : int } call ID ( ) }",
  "func ID : ) : bool { ID ID : bool { var var ( bool var ID : int } call ID ( ) }",
  "func ID : bool : bool { ID ID : bool { var var ( ) var ID : int } call ID ( ) }",
  "func ID ( ID : [ - ( ( - ID ( - true ) ) int ] ) ) { } func ID ( ) { }",
  "func ID ( ) : [ - ( ( - ID ( - true ID ) int ] ) ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int while ID [ - 123 / ID / ID } [ false ] { } if ID { ] }",
  "func ID ( ) { var ] : bool var ID : int while ID [ - 123 / ID / ID } [ false ] { } if ID { ID }",
  "func ID ( ) { var ] : bool var ID : int while ID [ - 123 / ID / ID } [ false ] { } if ID { ID }",
  "func ID ( ) { var ID : int var ID : [ ( [ ] int call ID ] true * ( ID ) / ( 123 ) ) }",
  "func ID ( ) { var ID : int var ID : [ ( [ ] int call ID true ] * ( ID ) / ( 123 ) ) }",
  "func ID ( ID : bool , ID : int ) { : ID : bool var ID var bool while ( - ID ) { } } func ID ( ) { }",
  "func ID ( ID : bool , { : int ) { : ID : bool var ID var bool while ( - ID ) { } } func ID ( ) ID }",
  "func ID ( ID : bool , ( : int ) { : ID : bool var ID var bool while { - ID ) { } } func ID ( ) ID }",
  "func ID ( ) { ID ( ) [ true * } + true * ID [ ID ] * true + ID ] [ ID ] = true print ( - false ) } func ID ( ) { true",
  "func [ ( ) { ID ( ) [ true * } + true * ID ID ID ] * true + ID ] [ ID ] = true print ( - false ) } func ID ( ) { true",
  "func [ ( ) { ID ( ) [ true * } + true * ID ID ID ] * true + ID ] [ ID ] = true print ( ) false ) } func ID ( - { true",
  "func ID ( ) : int { print - ID false ( - ID [ >= ] [ 123 ] ) }",
  "func ID ( ) : int { print - ID false ( - ID [ >= ] [ ] 123 ) }",
  "func ID ( ID : int , ID : int , ID : [ ] int ) : [ ] bool { var ID : bool - false ] [ ] [ }",
  "( ID func ID : int , ID : int , ID : [ ] int ) : [ ] bool { var ID : bool - false ] [ ] [ }",
  "( ID ID ID : int , func : int , ID : [ ] int ) : [ ] bool { var ID : bool - false ] [ ] [ }",
  "func ID ( ) : int 123 while true <= - true / ID [ { ] { } print ( false ) }",
  "( ID ( ) : int 123 while true <= - true / ID [ { ] { } print func false ) }",
  "( ID true ) : int 123 while ( <= - true / ID [ { ] { } print func false ) }",
  "func ID ( ) { if { true / - ( ID ( ( ( ( - - ( - ID ) ) ) ) ) ) / true ) ( } } func ID ( ) { }",
  "func ( ID ) { if { true / - ( ID ( ( ( ( - - ( - ID ) ) ) ) ) ) / true ) ( } } func ID ( ) { }",
  "func ID ( ) { ) ( false * - ( false + ID print ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) { ) ( false * - ( false + ID print ) call ID ( ) ID func } ( ) { }",
  "func ID ( ) { ) ( false * - ( false + ID print ) call ID ( ) ID } func ( ) { }",
  "func ID ( ID : [ ] [ - false / ID [ - ID ( ) } ( ( true ) ) ] ] ] [ ] bool ) { [",
  "func ] ( ID : [ ] [ - false / ID [ - ID ( ) } ( ( true ) ) ] ID ] [ ] bool ) { [",
  "func ID { ) : [ - ID [ true * true * ( ( - - ID ) ) ] [ ID ] ] int ( } func ID ( ) { }",
  "func ID { ) : [ - ID [ true * true * ( ( ] - ID ) ) ] [ ID ] - int ( } func ID ( ) { }",
  "ID ID { ) : [ - ID [ true * true * ( ( ] - ID ) ) ] [ ID ] - int ( } func func ( ) { }",
  "func ID ( ) { var ID : int var ID : int { var ID : int var ID : int return - 123 while ID } * ( ( ( false ) ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int { var ID : int var ID } int return - 123 while ID } * ( ( ( false ) ) ) { : } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int { var ID : int 123 ID } int return - var while ID } * ( ( ( false ) ) ) { : } func ID ( ) { }",
  "func ID ( ) : { { int var ID : [ ] int } }",
  "func ID int ) : { { int var ID : [ ] ( } }",
  "func ID ID ) : { { int var int : [ ] ( } }",
  "func ID ( ) ] [ : bool { var ID : bool var ID : int print true / 123 * ID [ ID ] [ 123 ] }",
  "func ID ( ) ] [ : bool { var ID : bool var ID : int print true / 123 ] ID [ ID * [ 123 ] }",
  "func { ( ) ] [ : bool ID var ID : bool var ID : int print true / 123 ] ID [ ID * [ 123 ] }",
  "func ID ( ID : int , ID : bool ) : bool ID return { ( ) * - - - ID ( ) }",
  "func ID ( ID : int , ID : bool ) : bool ID return { ( ) * ( - - ID - ) }",
  "ID func ( ID : int , ID : bool ) : bool ID return { ( ) * ( - - ID - ) }",
  "func ID ( ) : [ ID int { return ( ] ( ) * 123 - ID + - ID ) }",
  "func ID ( ) : [ ID int { return ( ] ( ) * 123 - ID + - } ) ID",
  "func ID 123 ) : [ ID int { return ( ] ( ) * ( - ID + - } ) ID",
  "func ID ( ) : bool { var var : [ false / - false + 123 > ( - - - ID ) ] bool ID ID : bool } func ID ( ) { }",
  "ID ID ( ) : bool { var var : [ false / - false + 123 > ( - - - ID ) ] bool ID func : bool } func ID ( ) { }",
  "ID ID ( ) : bool { var var : ) false / - false + 123 > ( - - - ID ) ] bool ID func : bool } func ID ( [ { }",
  "func ID ( ) { var ID : [ - - true - - ID ( false * ( ( 123 ) ) ID / ) ] int }",
  "] ID ( ) { var ID : [ - - true - - ID ( false * ( ( 123 ) ) ID / ) func int }",
  "] ID true ) { var ID : [ - - ( - - ID ( false * ( ( 123 ) ) ID / ) func int }",
  "func ID ( ID : int , ID : [ ] bool , } : int ) : int { var ID : int var ID : int while ID { ID }",
  "func ID ( : : int , ID : [ ] bool , } : int ) : int { var ID ID int var ID : int while ID { ID }",
  "func ID ( : : int , ID : [ ] bool , } : int ) : int var var ID ID int { ID : int while ID { ID }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] bool { var ID : [ ] int var ID : bool if true { } if - ID { } } ID = - ( ID ) func } ID ( ) { }",
  "func ID ( ) : bool { var ID : bool } ID : [ ] bool { var ID : [ ] int var ID : bool if true { } if - ID { } var ID = - ( ID ) func } ID ( ) { }",
  "func ID ( ) : bool { var ID : bool } ID : [ ] bool { var ID : [ ] int var ID : bool if true { } if - ID { } var ID = - ) ID ( func } ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) : bool { var ID : [ ID ( ( ID ) ) ] bool var ] : [ ID [ ] bool }",
  "func ID ( : ID [ ] bool , ID : bool ) : bool { var ID : [ ID ( ( ID ) ) ] bool var ] : [ ID [ ] bool }",
  "func ID ( : ID [ ] bool , ID : bool ) : bool { var ID : [ ID ( ( ID ) ) [ bool var ] : ] ID [ ] bool }",
  "func ID ( ID : bool ) : int { return 123 - / true - 123 * ID ( ) - ( - ( - - ( ( ( ID ) ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool ( : int { return 123 - / true - 123 * ID ( ) - ( - ) - - ( ( ( ID ) ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool ( : int { return 123 - / true - 123 * ID ( ) ) ( - ) - - ( ( ( ID ) ) ) ) ) } func ID ( - { }",
  "func ID ( ID / bool , ID : bool ) { if 123 : true + - ID [ ID ] { } while ID { } }",
  "func ID ( ID / bool , ID : bool ) { if 123 : true + - ID [ ID ] { } while ID { } }",
  "func ID ( ID / bool , ID : bool ) { if 123 : true + - ID [ { ] ID } while ID { } }",
  "func ID ( ID : [ ] [ ] int , ID : bool , int : [ ] ID ) { while 123 * ( ( ( true ) ) ) * - true { } { } }",
  "func ID ( ID : [ ] [ ] int , ] : bool , int : [ ID ID ) { while 123 * ( ( ( true ) ) ) * - true { } { } }",
  "func ID ( ID : [ ] [ ) int , ] : bool , int : [ ID ID ) { while 123 * ( ( ( true ) ] ) * - true { } { } }",
  "func ID ( ID and int , ID : bool ) : bool { call ID ( ID : ID ( ) and ( 123 ) ) }",
  "ID ID ( ID and int , ID : bool ) : bool { call func ( ID : ID ( ) and ( 123 ) ) }",
  "ID ID ( ID and int , ID : bool ) : bool { call func ) ID : ID ( ) and ( 123 ) ( }",
  "func ID ( ) : [ ] [ { [ ] [ ] bool ] }",
  "func ID ( : ) [ ] [ { [ ] [ ] bool ] }",
  "func ID ( : ) [ ] [ } [ ] [ ] bool ] {",
  "func ID ( ) { var ID : bool var ID : [ ( ( ( ( ( false ) ) } ) ) ] int ) func ID ( ) { }",
  "func ID ( ) { var ID : ) var ID : [ ( ( ( ( ( false ) bool } ) ) ] int ) func ID ( ) { }",
  "func ID ( ) { var ID : ) var ID ] [ ( ( ( ( ( false ) bool } ) ) : int ) func ID ( ) { }",
  "func ID ( ) ( [ - false / ( false / ( true * true ) ) ] bool { } func ID : ) { }",
  "func ID ( ) ( [ - false / ( false / ( true * true ) ) ] bool { } ID func : ) { }",
  ") ID ( ) ( [ - false / ( false / ( true * true ) ) ] bool { } ID func : func { }",
  "func ID ( ) : bool { call ID ( ID ) ID ( ) [ true ] [ - true ] ) ( ID = ( - ID ) }",
  "func ID ( ( : bool { call ID ) ID ) ID ( ) [ true ] [ - true ] ) ( ID = ( - ID ) }",
  "func ID ( ( : bool { call ID ) ID ) ID ( ) [ true ( [ - true ] ) ] ID = ( - ID ) }",
  "func ID ID ID : bool ) : bool { } func ( ( ) { var ID : int print ID [ 123 ] ID = - false }",
  "func ID ID ID : bool ) : bool { } func ( = ) { var ID : int print ID [ 123 ] ID ( - false }",
  "func ID ID ID : bool ) : bool { } func int = ) { var ID : ( print ID [ 123 ] ID ( - false }",
  ": ID ( ) func [ false and ID [ - - - ( ID ) ] and - false ] bool { } func ID ( ) { }",
  ": ID ( ) func [ false and ID [ ID - - ( - ) ] and - false ] bool { } func ID ( ) { }",
  ": ID ( false func [ ) and ID [ ID - - ( - ) ] and - false ] bool { } func ID ( ) { }",
  "func ID ( ) func bool { var ID : [ ] bool var ID : [ ID ( 123 * false * - - ( true ) ) ] [ ] [ ] int } : ID ( ) { }",
  "func ID ( ) func bool ] var ID : [ ] bool var ID : [ ID ( 123 * false * - - ( true ) ) ] [ ] [ { int } : ID ( ) { }",
  "func ] ( ) func bool ] var ID : [ ] bool var ID : [ ID ( 123 * false * - - ( true ) ) ] [ ID [ { int } : ID ( ) { }",
  "func ID ( ) : bool { var ID : int ) ID : [ ( - false * false * ID var ] bool }",
  "func ID ( ) : bool { var ID : int ) ID : [ ( - false * false * ID var ] bool }",
  "func ID ( ) : bool { ( ID : int ) ID : [ var - false * false * ID var ] bool }",
  "func ID ) ID : int , ID : [ ] bool , ID : int ) { if ( - ( ( false ) ( ) { } call ID ( ) }",
  "func ID ) ID : int , ID : [ ] bool , { : int ) ID if ( - ( ( false ) ( ) { } call ID ( ) }",
  "func ID ) ID : int , ID : [ ] bool , { : int ) ID if ( - ( ( false ) ( ) { } call ID ( ) }",
  "func ID ( ) : bool { return ( ( - ID [ - false } ) ) ] func ID ( ) { }",
  "func ID ( ) : bool { return ( ( - ID [ - false } ) ) ] func ID ) ( { }",
  "func ID ( ) : bool { return ( ( ) ID [ - false } ) ) ] func ID - ( { }",
  "func ID ( ) { var ID : [ ( 123 <= - ID func - ( ID ) ) ) ] [ ] bool } ( ID ( ) { }",
  "func ID ( ) { var ID : [ ( 123 <= - ID [ - ( ID ) ) ) ] func ] bool } ( ID ( ) { }",
  "func ID ( ) { var ID : [ ( 123 <= - ID } - ( ID ) ) ) ] func ] bool } ( ID ( ) { [",
  "func ID ( ) { print ID [ - ( true * - ( / ( ( ID ) ) ) ] [ - true ] ID = false } func ID false ) { }",
  "func ID ( ) { print ID [ - ( true [ - ( / ( ( ID ) ) ) ] * - true ] ID = false } func ID false ) { }",
  "func ID ( ) { print ID [ - ( true [ - ( / ( ( ID ) ) ) ] * - true ] ID = false } func ID false ) { }",
  "func ID ( ) : [ - false * - false * 123 + - ID [ - ] false ) ( [ false ] - true ] bool { }",
  "func ID ( ) : [ - false * - false * 123 + false ID [ - ] - ) ( [ false ] - true ] bool { }",
  "func ID ( ) : [ - false * - false * 123 + false ID [ - ] - ) ( [ false ] - true ] bool { }",
  "func ID ( ID : int ] [ ] [ ] [ , ID : [ ] bool ) : [ ID ( ) / - ID / ID ] [ ] int { }",
  "func ID ( ID : int ] [ ] [ ] { , ID : [ ] bool ) : [ ID ( ) / - ID / ID ] [ ] int [ }",
  "func ID ( ID : int ] [ ] [ ] { , ID : [ ] bool ) int [ ID ( ) / - ID / ID ] [ ] : [ }",
  "func ID ( ID : ID ] [ ] [ ( ( ID ( - false ) ) ) ] int ) { } func [ ( ) { }",
  "func ID ( ID { ID ] [ ] [ ( ( ID ( - false ) ) ) ] int ) : } func [ ( ) { }",
  "func ID ( ID { ID ] [ ] [ ( ( ID ( ) false ) ) - ] int ) : } func [ ( ) { }",
  "func ID ( ) { var ID : bool call ID ( - ( ( ID ) ) ) ) if ( ( - ( ID ) ) { } }",
  "func ID ( ) { ) ID : bool call ID ( - ( ( ID var ) ) ) if ( ( - ( ID ) ) { } }",
  "func ID ( ) ) ) ID : bool call ID ( - ( ( ID var ) ) { if ( ( - ( ID ) ) { } }",
  "func ID ( ) { { var ID : int call ID ( ) return ( ID [ - ID ] [ ID ) ] } } func ID ( ) { }",
  "func ID ( ) { { var ID : int call ID ( ) return ( ID [ - ID ] [ ID ) ] } } func ID ( ) { }",
  "func ID ( ) { { var ID : int call ID ( ( return ( ID [ - ID ] [ ID ) ] } } func ID ) ) { }",
  "func ID ( ID : [ ID { ID ( false < - false ) ) ] [ ] bool ) { } func ID ( ) ( }",
  "func ID ( ID : [ ID { ID ( false < - false ) ) ] [ ] bool ) { } func ID ( ) ( }",
  "func ID ( ID ( [ ID { ID ( false < - false ) ) ] [ ] bool ) { } func ID : ) ( }",
  "( ID ( ) { var ID : [ ( true / ( ID func ) [ - ( - ( - - - ID ) ) ] ) / - ( false ) ) ] int } func ID ( ) { }",
  "( ID ( ) { var ID : [ ( true / ( ID func ) [ - ( - ( - - - ID ) ) ] ) / - ( false ) ) ] int } func ID ( ) { }",
  "func ID ( ID : int } ID : [ ( false * ( ( 123 ) ) / ( ID ) ) ] bool ) { ,",
  "func ID ( ID : int } bool : [ ( false * ( ( 123 ) ) / ( ID ) ) ] ID ) { ,",
  "func ID ( ID : int } bool : [ { false * ( ( 123 ) ) / ( ID ) ) ] ID ) ( ,",
  "func ID ( ID : [ ] bool , ID : int ) { var ID : int func } ID ( ID : int , ID : int ) : int { }",
  "func ID ( ID : [ ] bool , ID : int ) { var ID : int func , ID ( ID : int } ID : int ) : int { }",
  "func ID ( ID : [ ] bool ID , : int ) { var ID : int func , ID ( ID : int } ID : int ) : int { }",
  "func ID ( ID int int , ID : [ ] int , ID : [ ] [ ] [ ] : ) { ID [ ( ( ID ) ) ] = true }",
  "func ID ( ID int [ , ID : [ ] int , ID : [ ] [ ] int ] : ) { ID [ ( ( ID ) ) ] = true }",
  "func ID ( ID int [ , ID : [ ] int , ID : [ ] ( ] int ] : ) { ID [ [ ( ID ) ) ] = true }",
  "func ( ( ) : int { var ID : [ ] bool ID = ID [ - false / ID ID ) / ( - ( ID ) ) ] [ ( false ) ] } func ID ( ) { }",
  "func ( ( ) : int { var ID : [ ] bool ID = [ ID - false / ID ID ) / ( - ( ID ) ) ] [ ( false ) ] } func ID ( ) { }",
  "func ( ( ) : ) { var ID : [ ] bool ID = [ ID - false / ID ID ) / ( - ( ID ) ) ] [ ( false int ] } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ID ( 123 + ( func ) - ID ) ] [ ] int ) { } ID ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ID ( 123 + ( func ) - ID ] ] [ ) int ) { } ID ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ID ( 123 + ( func ) - ID ] ] [ ) int ) { } ID ID ( ) { }",
  "func ID ( ) : int { ID ID : int var var : [ ] [ ] [ ID ( true ) ] [ ] [ ] [ ] bool }",
  "func ID ( ) : int { ID ID : int var ] : [ ] [ ] [ ID ( true ) ] [ ] [ ] [ var bool }",
  "func ID ( ) : int { ID ID : int var ( : [ ] [ ] [ ID ] true ) ] [ ] [ ] [ var bool }",
  "func ID - ) { var ID : int var ID : int return } func ID ( ID : [ ] int ) : bool { ID = ( ID }",
  "func ID - : { var ID : int var ID : int return } func ID ( ID : [ ] int ) ) bool { ID = ( ID }",
  "func ID - : { var ID : int var ID ] int return } func ID ( ID : [ : int ) ) bool { ID = ( ID }",
  "func ID ( ) { ID = { ID * ID ( false / ID / false ) / - - - true - } }",
  "func ID ( ) { ID = { ID * ID ( false / - / false ) / - ID - true - } }",
  "func ID ( ) { ID = { ID * } ( false / - / false ) / - ID - true - } ID",
  "func ID ( ID : int , ID : int , ID : int ) : bool { var ID : int print true [ ( ( ID ) ) ] }",
  "func ID ( ID : int , ID : int , ID : int } : bool { var ID : int print true [ ( ( ID ) ) ] )",
  "func ID ( ID : int ( ID : int , ID : int } : bool { var ID : int print true [ ( , ID ) ) ] )",
  "func ID - ) { var ID : int var ID : int while ( - false / ID [ ( ID ) ] { } { } }",
  "func ID - ) { var ID : int var ID : int while ID - false / ( [ ( ID ) ] { } { } }",
  "func ID - ) { var ID : int var ID : int while ID - false / { [ ( ID ) ] { } ( } }",
  "func ID ( ID ( int , ID : [ 123 / ( ( ( : 123 ) ) ) ) ] int , ID : int ) { } func ID ( ) { }",
  "ID func ( ID ( int , ID : [ 123 / ( ( ( : 123 ) ) ) ) ] int , ID : int ) { } func ID ( ) { }",
  "ID func ( ID ( int , ID : [ 123 / ( ( ( : 123 ) ) ) ) ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] bool { while ID ( ID * true / ( ( - ID ) ) ) { if } true { } } func ID ( ) { }",
  "func ID ( - : [ ] bool { while ID ( ID * true / ( ( ) ID ) ) ) { if } true { } } func ID ( ) { }",
  "func ID ( - : [ ] } { while ID ( ID * true / ( ( ) ID ) ) ) { if } true { bool } func ID ( ) { }",
  "func ID ( ) : bool { while ID / - ID + 123 / ( - false ) * ( ID ID { } } func ) ( ) { }",
  "func ID ( ) : bool { while ID / - } + 123 / ( - false ) * ( ID ID { } ID func ) ( ) { }",
  "func ID ( ) : bool { while ID / - - + 123 / ( } false ) * ( ID ID { } ID func ) ( ) { }",
  "func ID ( ID : [ - ( { * true * ( ( - ID ) ) ) ] bool ) { } func ID ( ) false }",
  "func ID ( ID ( [ - : { * true * ( ( - ID ) ) ) ] bool ) { } func ID ( ) false }",
  "func ID ( ID ( [ - : { * true * ( ( ID ID ) ) ) ] bool ) { } func - ( ) false }",
  "func ID ( ) : [ ] int { ( ID : [ - - true >= ID ( ID ) ] bool var ID : bool } func ID var ) { }",
  "func ID ( ) : [ - int { ( ID : [ ] - true >= ID ( ID ) ] bool var ID : bool } func ID var ) { }",
  "func ID ( ) : [ - int { ( ID : [ ] - true >= ID ( ID ) ] bool var ID : bool } func ID var ) { }",
  "func ID ( ID : bool , ID : int ) { ( ID : int return ( false / - - true / ID ) } func ID var ) { }",
  "- ID ( ID : bool , ID : int ) { ( ID : int return ( false / func - true / ID ) } func ID var ) { }",
  "- ID ( ID : bool } ID : int ) { ( ID : int return ( false / func - true / ID ) } func ID var ) { ,",
  "func ID ( ID : int , ID : bool , ID : bool ) var int { : ID : int var ID : bool return } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , bool : bool ) var int { : ID : int var ID : ID return } func ID ( ) { }",
  "func ID ( ID : int , ID : { , bool : bool ) var int bool : ID : int var ID : ID return } func ID ( ) { }",
  "func ID ( ) : int { var ID : ] [ int }",
  "func ID ( ) : int { ID var : ] [ int }",
  "func ID ( ) : int ] ID var : { [ int }",
  "ID func ( ) : [ ] [ ] int { call ID ( ) }",
  "ID func ( ) : [ ] [ ] int { call ID ( ) }",
  "ID func ( ) : [ ] [ ] int { ( ID call ) }",
  "func ID ( ) { ) - ( - ( - 123 / ( - true ) / false ) ) { } call ID ( while } func ID ( ) { }",
  "func ID ( ) { ) - ( - ( - 123 / ( - true ) / false ) ) ) } call ID ( while } func ID ( { { }",
  "func ID ( ) { ) - ( - ( - 123 / ) - true ( / false ) ) ) } call ID ( while } func ID ( { { }",
  "func ID ( ID ] [ ] [ : [ ] [ ] [ ( - ID ( - ID ) ) ] bool ) { }",
  "func ID ( ID ( [ ] [ : [ ] [ ] [ ] - ID ( - ID ) ) ] bool ) { }",
  "func ID ID ID ( [ ] [ : [ ] [ ] [ ] - ID ( - ( ) ) ] bool ) { }",
  "func ID ( ID : int , ID : ID ] bool ) { var [ : [ ( ID + - true ) ] int var ID : bool }",
  "func ID ( ID : int : ID : ID ] bool ) { var [ : [ ( ID + - true ) ] int var ID , bool }",
  "func ID ( ID : int : ID : ID ] bool ) , var [ : [ ( ID + - true ) ] int var ID { bool }",
  "func ID ( ID : ( , ID : int ) : bool { while - int - - ID ( ) ) { } }",
  "( ID func ID : ( , ID : int ) : bool { while - int - - ID ( ) ) { } }",
  "( ID - ID : ( , ID : int ) : bool { while - int - func ID ( ) ) { } }",
  "func ID ( ) - bool { var ID : bool var ID : [ ] int return false * - ( true ) / : ( true ) }",
  "func ID ( ) - bool { var ID : bool var ID : [ ] int true false * - ( return ) / : ( true ) }",
  "func { ( ) - bool ID var ID : bool var ID : [ ] int true false * - ( return ) / : ( true ) }",
  "func ID ( ) { var ID : int call ID ( ) } func ID ( ID bool [ ] int , ID : bool , ID : : ) { }",
  "func ID ( ) { var ID : int call ID ( ) } func ID ( ID bool : ] int , ID : bool , ID [ : ) { }",
  "func ID ( ) { var ID : int call ID ( ) } func ID ( ID bool : ] int , ID : bool , ID [ : ) { }",
  "func ID ( ID : , ] bool [ ID : int , ID : bool ) : bool { call ID ( ) call ID ( ) return } func ID ( ) { }",
  "func ID ( ID : , ] bool [ ID : int , ID : bool ) : bool { call ID ID ) call ID ( ) return } func ( ( ) { }",
  "func ID ( ) { { var ID : [ - ID [ - ID [ ID ] [ ( ] ID ) ] - [ ID ] ] bool } if - - ( ( - true ) ) { } }",
  "func ID ( ) { { var ID : [ - ID [ - ID [ ID ] [ ( ] ID ) ] - ( ID ] ] bool } if - - [ ( - true ) ) { } }",
  "func ID ( ) { { } ID : [ - ID [ - ID [ ID ] [ ( ] ID ) ] - ( ID ] ] bool } if - - [ ( - true ) ) { var }",
  "func ID ( ) : int { var ID : [ ] [ ] bool if true * ( ( ) - - ID ) ) ) / ( ( ( ( 123 ) ) ) ( { } ID = ( - ( - ID ) ) } func ID ( ) { }",
  "func ID ( ) : func { var ID : [ ] [ ] bool if true * ( ( ) - - ID ) ) ) / ( ( ( ( 123 ) ) ) ( { } ID = ( - ( - ID ) ) } int ID ( ) { }",
  "func ID ( ) : var { var ID : int return } func ID ( ) : [ ] bool { var ID : int { int ID : [ ] int var ID : bool } }",
  "func ID ( ) : var { [ ID : int return } func ID ( ) : [ ] bool { var ID : int { int ID : var ] int var ID : bool } }",
  "func ID ( ) { var { [ ID : int return } func ID ( ) : [ ] bool { var ID : int : int ID : var ] int var ID : bool } }",
  "func * ( ID : bool , ID : int ) : bool { var ID : int var ID : [ false + 123 ID - ID * 123 ] bool }",
  "func int ( ID : bool , ID : * ) : bool { var ID : int var ID : [ false + 123 ID - ID * 123 ] bool }",
  "func int ( ID : bool , ID : * ) : bool { var ID int : var ID : [ false + 123 ID - ID * 123 ] bool }",
  "func ID ( ) : bool { var ID ) [ ] [ false != - ID ( ) [ - ID ] [ ( - false : ] ] [ ] [ ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ) : bool { var ID ) [ ] [ false != ] ID ( ) [ - ID ] [ ( - false : ] ] [ ] [ ] int var ID : [ - int } func ID ( ) { }",
  "func ID ( ) : bool { var ID ) [ ] [ false != ] ID : ) [ - ID ] [ ( - false : ] ] [ ] [ ] int var ID ( [ - int } func ID ( ) { }",
  "func ID ( ) : [ ( - ( ID ( ) bool ( ( ( false ) ) ) ] ) ) ] [ { } func ID ( ) { }",
  "func ID ( ) : [ ( - ( ID ( ) bool ( ( ( false ) ) ) ] } ) ] [ { } func ID ( ) { )",
  "func ID ( ) : [ ( - ( ID ( ) bool ( ( ) false ) ) ) ] } ( ] [ { } func ID ( ) { )",
  "func ID ( ID ( bool ) { call ID : ) call ID ( ) }",
  ") ID ( ID ( bool ) { call ID : func call ID ( ) }",
  ") ID ( ID ( bool ) } call ID : func call ID ( ) {",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : [ ] [ ) ( ( true ID ) ] bool } func ID ( ) { }",
  "func ID ( ID ) bool , ID : bool , ID : int ) { var ID : [ ] [ ) ( ( true ID ) ] bool } func ID ( : { }",
  "func ID ( ID ) bool , ID : bool , ID : int ) { var [ : [ ] ID ) ( ( true ID ) ] bool } func ID ( : { }",
  "func ID ( ID : int , ID : bool ) { - ID : int var ID : int if var - ( ( 123 ) ) { } { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { - ID : int var ID : int if ( - ( ( 123 ) ) { } { } } func ID var ) { }",
  "func ) ( ID : int , ID : bool ) { - ID : int var ID : int if ( - ( ( 123 ) ID { } { } } func ID var ) { }",
  "func ID ( ) : int { var ID : bool var ID : [ ] int { } ID : int var return }",
  "func ID ( ) : int { var ID : bool var ID : [ ] int int } ID : { var return }",
  "func ID ( ) : int { var ID : bool var return : [ ] int int } ID : { var ID }",
  "func ID ( ) { var ID : bool call ID ( * true - true / ( ID ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ 123 / true - ( ID ( ) [ false ] [ - ] ) ] bool , ID : int ) { }",
  "func bool ( ID : int , ID : [ 123 / true - ( ID ( ) [ false ] [ - ] ) ] ID , ID : int ) { }",
  "func bool ( ID : int , ID : [ 123 / true - ( ID ( ) ) false ] [ - ] [ ] ID , ID : int ) { }",
  "func ID ( ) : [ ] [ ] int { var ID : bool var ID : bool return - 123 ) ( ( - ( ID * ) ) }",
  "func ID - ) : [ ] [ ] int { var ID : bool var ID : bool return ( 123 ) ( ( - ( ID * ) ) }",
  "func ID - ) : [ ] [ ] int { var ID : bool var ID : bool return * 123 ) ( ( - ( ID ( ) ) }",
  "func ID ( ID { int , ID : [ ] [ true / ID [ ID [ - false ] ] [ ID ] / 123 ] int ) : } func ID ( ) { }",
  "func ID ( ID false int , ID : [ ] [ true / ID [ ID [ - { ] ] [ ID ] / 123 ] int ) : } func ID ( ) { }",
  "func 123 ( ID false int , ID : [ ] [ true / ID [ ID [ - { ] ] [ ID ] / ID ] int ) : } func ID ( ) { }",
  "func ID ( ID : int ) : bool { } func ID ( ID : bool , ID : [ ] : , ID : int ) bool [ ID ] bool { }",
  "func ID ( ID : [ ) : bool { } func ID ( ID : bool , ID : [ ] : , ID : int ) bool int ID ] bool { }",
  "func ID ( ID : [ ) : bool { } ID ID ( ID : bool , ID : [ ] : , func : int ) bool int ID ] bool { }",
  "func ID ( ID : int , ID while bool ) { return } func ID ( ID : int ) { while - ( ID ) { } : true { } }",
  "func ID ( ID : int , ID while bool ) { return } func ID } ID : int ) { while - ( ID ) { } : true { ( }",
  "while ID ( ID : int , ID func bool ) { return } func ID } ID : int ) { while - ( ID ) { } : true { ( }",
  "func ID ( ) : bool { var ID : bool 123 ID : [ - true / var - true / - 123 / ID + ID ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool 123 ID : [ bool true / var - true / - 123 / ID + ID ] [ ] [ ] - } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool 123 ID : [ bool true / var ) true / - 123 / ID + ID ] [ ] [ ] - } func ID ( - { }",
  "func ID ( ID : bool , { : [ ( - ID ( - ID ( ) ) ) ] bool , ID : bool ) ID } func ID ( ) { }",
  "func ID ( ID : bool , } : [ ( - ID ( - ID ( ) ) ) ] bool , ID : bool ) ID { func ID ( ) { }",
  "func ID ( ID : bool , } : [ ( - ID ( - ID ( ) ) ) ] bool , ID : func ) ID { bool ID ( ) { }",
  "func ID ) ) : [ ] int { ID [ 123 - - - - false and true ] = ( ( - - - ( ID ) ) ( }",
  "func ( ) ) : [ ] int { ID [ 123 - - - - false and true ] = ( ( - - - ID ID ) ) ( }",
  "func ( ) ) : [ ] int { ID [ 123 - - - - false and true ] ID ( ( - - - ID = ) ) ( }",
  "func ID ( ) : [ - ( ID [ ID / - - ( ID ) / - true ] [ ( false ) ] ) ] [ ] bool { } func true ( ) { }",
  "func ID ( ) : ) - ( ID [ ID / - - ( ID ) / - true ] [ ( false [ ] ) ] [ ] bool { } func true ( ) { }",
  "func ID ( ) : ) - ( ID [ ID / - - ( ID ) / - true ] [ ( false [ ] ) ] [ ] bool { } func true ( ) { }",
  "func ID ( ) { var ID : bool var ID : ID ] [ ] [ ] int call ID ( ) } func [ ( ) { }",
  "func ID ( ) { var ID : bool var ID : ID ] [ ] [ } int call ID ( ) } func [ ( ) { ]",
  "func ID ( ) { var ID : bool var ID : ID ] [ [ ] } int call ID ( ) } func [ ( ) { ]",
  "func ID ( ) : bool { int ID : [ ] int var ID : [ ] [ ] [ ( false ) ] var } func ID ( ) { }",
  "func ID ( ) : bool { int ID : } ] int var ID : [ ] [ ] [ ( false ) ] var [ func ID ( ) { }",
  "func ID ( ) ] bool { int ID : } ] int var ID : [ : [ ] [ ( false ) ] var [ func ID ( ) { }",
  "func ID ( ) ] var ID : [ true + - ID [ ( ( - - ( 123 ) ) ) ] + false { int }",
  "func ID ( ) ] var ID : [ true + - ID [ ( ( - - ( 123 ) ) } ] + false { int )",
  "func ID ( ) ] var ID : [ true + - ( [ ( ( - - ID 123 ) ) } ] + false { int )",
  "func ID ID ID : bool , ( : [ ] int ) : int { var ID : int var ID : int return } func ID ( ID : bool , ID : int , ID : bool ) { }",
  "func ID ID ID : bool , ( : [ ] int ) : int { var ID : int var ID : int return } func ID ( ID : bool , ID : int , ID : bool ) { }",
  "func ID ID ID : bool , ( : [ ] int ) : int func var ID : int var ID : int return } { ID ( ID : bool , ID : int , ID : bool ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) : int print { - ID ( ID ) while 123 { } }",
  "func ID ( ID : bool , ID : int , ID : bool ) : int print { - } ( ID ) while 123 { ID }",
  "ID ID ( func : bool , ID : int , ID : bool ) : int print { - } ( ID ) while 123 { ID }",
  "func ID ( ) { var ID : [ ] bool print ID [ ( false * ID } ] if ( - ( true ) ) { ) } func ID ( ) { }",
  "func ID ( ) { { ID : [ ] bool print ID [ ( false * ID } ] if ( - ( true ) ) var ) } func ID ( ) { }",
  "func ID ( - : [ - false / - 123 / - true + ( ID ) ID ( ( ID ) ) ] int ) { }",
  "func ID ( - : [ - false / - { / - true + ( ID ) ID ( ( ID ) ) ] int ) 123 }",
  "func ID false - : [ - ( / - { / - true + ( ID ) ID ( ( ID ) ) ] int ) 123 }",
  "func ID / ) { var ID : int return ( ID ( ID ( ID ) ) } func ID ( ) { }",
  "func ID / ) { var ID : int return ( ID ( ID ( ID ) ) } func ID ( ) { }",
  "func ID / ) { var ID : int return ( ID ( ) ( ID ) ) } func ID ( ID { }",
  "func ID ( ) { var ID : int while false <= ( true / ( true ) * false { ) } } func ID ( ) { }",
  "func ID ( ) { var ID : int while false <= ( true / ( true ) * false { ) } } func ID ( ) { }",
  "func ID ( ) { var ID : int while false <= ( true / ( true ) * false { ) } } func ID ( } { )",
  "func ID ( ID : int ) { call ] ( ) } func ID ( ID : int ) { var ID : [ ID int var ID : [ ] bool }",
  "func ID ( ID : int call { ) ] ( ) } func ID ( ID : int ) { var ID : [ ID int var ID : [ ] bool }",
  "func ID ( ID : int call { ) ] ( ) } func ID ( ID : int ) { var ID : [ ID int var ID : [ ] bool }",
  "func ID ( ID : [ ] bool , ID : int , ID : bool ) { } ID : [ ( ID ) ] [ ] bool var ID : bool } func ID ( ) { var",
  "func ID ( ID : [ ] bool , ID : int , ID : bool ) { } ID : [ ( ID bool ] [ ] bool var ID : ) } func ID ( ) { var",
  "func ) ( ID : [ ] bool , ID : int , ID : bool ) { } ID : [ ( ID bool ] [ ] bool var ID : ID } func ID ( ) { var",
  "func ID ( ID : int int ID : int ) { { var ID : , var ID : [ ( - ( true ) ) ] int } } func ID ( ) { }",
  "var ID ( ID : int int ID : int ) { { var ID : , func ID : [ ( - ( true ) ) ] int } } func ID ( ) { }",
  "var ID ( ID : int int ID : int ) { { var ID : , func ( : [ ( - ( true ) ) ] int } } func ID ID ) { }",
  "func ID ( ) : int { var ID : [ ] bool var { : [ 123 <= true + ( ( ( ID ) ) ) ] int } func ID ( ) ID }",
  "func ID ( ) : int { var ID ) [ ] bool var { : [ 123 <= true + ( ( ( ID : ) ) ] int } func ID ( ) ID }",
  "func ID ( ) : int { var ID ) [ [ bool var { : ] 123 <= true + ( ( ( ID : ) ) ] int } func ID ( ) ID }",
  "func ID ( ID : [ ( ID ( ) [ ) ID ( ) ) ] ) ] [ ] [ ] int ( { } func ID ( ) { }",
  "func ( ( ID : [ ( ID ( ) [ ) ID ( ) ) ] ) ] [ ] [ ] int ( { } func ID ID ) { }",
  "func ( ( ID : [ ( ID ( ) [ ) ID ( ) ) ] ) ] [ ] [ ] int ( { } func ID ID ) { }",
  "] ID ( ID : bool , ID : [ ] [ ID ( ) / ID ( ) * true - ( 123 ) ] [ func [ ] [ ] bool ) { }",
  "] ID ( ID : bool , ID : [ ] [ ID ( ) / ID ( ) * true - ( 123 ) ] [ func [ ] [ ] { ) bool }",
  "] ID ( ID : bool , ID : [ ] [ ID ( ) / ID ( ) * true - ( 123 ) ] [ func [ ] [ ] { ) bool }",
  "func ID ( ID : [ ] int , ID : int ID : bool { var ID : int var ID : [ ] bool } func ID ( ) : bool ) { }",
  "func ID ( ID : [ ] int , ID : int ID : bool { var ID : int var ID : [ ] bool } func ID ( ) : ) bool { }",
  "func ID ( ID : [ ] int , ID : int ID : bool { var ID : int var ID : ] [ bool } func ID ( ) : ) bool { }",
  "func ID ( ) : int { var ID : [ ] int var ID : [ ] [ ] [ ID bool ID ( ] ) = - ID }",
  "func ID ( ) : int { var ID : [ ] int var ID bool [ ] [ ] [ ID : ID ( ] ) = - ID }",
  "func ID ( ) : int { var ID : [ ] int var ID bool ID ] [ ] [ ID : ID ( ] ) = - [ }",
  "bool ID ( ID : func ) : bool { var ID : int while ( ID ( ) [ false ] ) { } { } }",
  "bool ID ( ID : func ) : bool { var ID : int while ( ID ( ) [ false ] ) { } { } }",
  "bool ID ( ID : func ) : : { var ID bool int while ( ID ( ) [ false ] ) { } { } }",
  ": ID ( ) func bool { var ID : [ - ( ID ( ID ( ) ) ) ] bool var ID : int } func ID ( ) { }",
  ": ID ( ) func ID { var bool : [ - ( ID ( ID ( ) ) ) ] bool var ID : int } func ID ( ) { }",
  ": ID ( ) func ID [ var bool : { - ( ID ( ID ( ) ) ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) { var ] : [ - - - ID ( ) [ false ] ID bool var ID : [ ] [ ] int } func ID ( ) { }",
  "func [ ( ID : bool , ID : [ ] int ) { var ] : [ - - - ID ( ) [ false ] ID bool var ID : [ ] ID ] int } func ID ( ) { }",
  "func [ ( ID : bool , ID : [ : int ) { var ] ] [ - - - ID ( ) [ false ] ID bool var ID : [ ] ID ] int } func ID ( ) { }",
  "func ID ( ID : bool ) : int { return ( ID [ ID [ - ( ( - ) ID - ) ] ] [ false ] ) }",
  "func ID ( ID : bool ) : int { ID ( return [ ID [ - ( ( - ) ID - ) ] ] [ false ] ) }",
  "func ID ( ID : bool ] : int { ID ( return [ ID [ - ( ( - ) ID - ) ] ] [ false ) ) }",
  "func ID { ) ( var ID : int var ID : [ ] [ ( - - ( ( - ID ) ) ) ] int } func ID ( ) { }",
  "func ID { ) ( var ID : int var ID : [ ] [ ( - - ( ( - ID ) ) ) ] int } { ID ( ) func }",
  "func ID { ) ( var ID : int var ID : [ ] [ ( - - ( ( - ID ) ) ) ] int } { ID } ) func (",
  "func ID ( ID : [ ] [ 123 [ ID ( ) [ true * - ID / ( ID ) ] * - ( 123 ) ] / true ] int ) { } func ID ( ) { }",
  "func ID ( ID : / ] [ 123 [ ID ( ) [ true * - ID / ( ID ) ] * - ( 123 ) ] [ true ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID ID [ ( ( - - - ID [ ID ] ) ) ] bool var ID : bool } func : ( ) { }",
  "func ID ( ) { var } ID [ ( ( - - - ID [ ID ] ) ) ] bool var ID : bool } func : ( ) { ID",
  "func ID ( ) { var } ID [ ( ( - - - ID [ ID ] ) ) ] bool var ID : bool } func : ( ) { ID",
  "func ID ( ) { var ID : int var ID : bool } bool ID ( ) { var ID : func ID [ ( ( - true ) ) ] [ ID ] = ID print 123 }",
  "func ID ( ) { var ID : int var ID : bool } bool ID ( ) { var ID : func ID [ ( ] - true ) ) ] [ ID ( = ID print 123 }",
  "var ID ( ) { var ID : int func ID : bool } bool ID ( ) { var ID : func ID [ ( ] - true ) ) ] [ ID ( = ID print 123 }",
  "func ID ( ) : int { while ( ( ( false / ( } ( ( 123 ) ) ) ) ) ) ) { ( }",
  "func ID ( ) : int { while ( ( ( false / ( } ( ( 123 ) ) ) ) ) ) ) { ( }",
  "func ID ( ( : int { while ( ( ) false / ( } ( ( 123 ) ) ) ) ) ) ) { ( }",
  "func ID ( ) : bool { print - - ID [ true - ID ( ) [ - + 123 ] ] [ - true ] } func ID ( ) { }",
  "func ID ( ) : bool { print - - ID [ true - ID ( ) [ - + 123 ] ] [ - true ] } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int ) ID : bool print ( ( ( - ( - ID var ) ) ) { } }",
  "func ID ( ID : bool ) { var ID : int ) ID ( bool print ( ( : - ( - ID var ) ) ) { } }",
  "func ID ( ID : var ) { bool ID : int ) ID ( bool print ( ( : - ( - ID var ) ) ) { } }",
  "func ID ( ) { ID [ ( 123 / } + - ID ( ) ) ] = ID { } true",
  "func ID ( ) { ID [ ( / 123 } + - ID ( ) ) ] = ID { } true",
  "func ID ( ) { ID ( ( / 123 } + - ID [ ) ) ] = ID { } true",
  "func ID ( ) { while false * true + false * true ID ( true ) - - { } ID = ID }",
  "ID ID ( ) { while false * true + false * true func ( true ) - - { } ID = ID }",
  "ID ( ID ) { while false * true + false * true func ( true ) - - { } ID = ID }",
  "func ID ( ID : [ - - - ( == ( ID + - ( false false ) ) ) ] int ) { }",
  "func ID ( ID : [ - + - ( == ( ID - - ( false false ) ) ) ] int ) { }",
  "func ID ( ID - [ ] bool , ID : bool ) : [ true / ( 123 / - ( ( true ) ) * : ( - ID ) ) ] int { }",
  "func ] ( ID - [ ] bool , ID : bool ) : [ true / ( 123 / - ( ( true ) ) * : ( - ID ) ) ID int { }",
  "func ] ( ID - [ ] bool , ID : bool ) : [ true / ( 123 ) - ( ( true ) ) * : ( - ID ) / ID int { }",
  "func ID ( ID : bool ) { var ID : [ ( ( ID ] - ID ] [ ID ] ) ) ] int var ID : [ ] [ [ int } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ( ID ID ] - ID ] [ ID ] ) ) ] int var ( : [ ] [ [ int } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ( ID ID ] - ID ] [ ID ] ) ) ] ( var int : [ ] [ [ int } func ID ( ) { }",
  "func ID ( ) : int { while - ( ] ( ) [ false / ( - ( false ) ) / ID ID [ - - - ( false ) ] ) { } if - ID { } } func ID ( ) { }",
  "func ID ( ) : int { while - ( ] ( ) [ false / ( - ( false ) ) / ID ID [ - - - ( false ) ] ) { } if - ID { } } func ID ( ) { }",
  "func ID ( ) : int { while - ( ] false ) [ ( / ( - ( false ) ) / ID ID [ - - - ( false ) ] ) { } if - ID { } } func ID ( ) { }",
  "func ID ( ID : [ ( false + - ( ID * true * ID ) ) ] ID ) { } func bool ( ) { }",
  "func ID ( ID : [ ( false + - } ID * true * ID ) ) ] ID ) { ( func bool ( ) { }",
  "func ( ( ) { var ID : int ID = ID [ ID ( ( ID ) ) ] [ ID ] } func ID ID ) { }",
  "func ( ( ) { var ID : int ID = ID [ ID ( ( ID ) ) ] [ ID ] } func ID ID ) { }",
  "func ( ( ) { var ID : int ID = ID [ ID ( ( ID ) ) ] [ ID ] } func ID ID ) { }",
  "func ID ( ) { var ID : [ ] bool ( ID : int while ID ( ) [ 123 ] [ - 123 ] { } while ( ( true ) ) { } } func ID var ) { }",
  "func ID ( ) { var ID : [ ] bool ( ID : int while ID ( ) ) 123 ] [ - 123 ] { } while ( ( true ) ) { } } func ID var [ { }",
  "func ( ID ) { var ID : [ ] bool ( ID : int while ID ( ) ) 123 ] [ - 123 ] { } while ( ( true ) ) { } } func ID var [ { }",
  "func ID ( ID : bool , ID : bool ) : ) false / ID [ ( ( ID [ ) ] ] bool { }",
  "func ID ( ID : bool , ID : bool ) : ) false ] ID [ ( ( ID [ ) ] / bool { }",
  "func ID ( ID : ) , ID : bool ) : bool false ] ID [ ( ( ID [ ) ] / bool { }",
  "func ID } ID : bool ) : [ - ( - true * ID ( ) [ ( true ) ] * false ) ] [ ] [ ] int { ( func ID ( ) { }",
  "func ID } ( : bool ) : [ - ( - true * ID ID ) [ ( true ) ] * false ) ] [ ] [ ] int { ( func ID ( ) { }",
  ": ID } ( func bool ) : [ - ( - true * ID ID ) [ ( true ) ] * false ) ] [ ] [ ] int { ( func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool { var ID : bool var ID : int call ID ( } ( ID ) ) ) } } func ID ( ) { (",
  "func ID ( ) : bool { var ID : bool var ID : bool { var ( : bool var ID : int call ID ID } ( ID ) ) ) } } func ID ( ) { (",
  "func ID ( ) : bool { var ID : bool var ID : bool { var ( : bool var ID ) int call ID ID } ( ID ) ) : } } func ID ( ) { (",
  "func ID ( ) : bool int var ID : bool var ID : [ ] int } func ID ( ID : int ) { var ID : { var ID : [ ] bool }",
  "func ID ( ) : bool int var ID : bool var var : [ ] int } func ID ( ID : int ) { ID ID : { var ID : [ ] bool }",
  "func ID ( ) : bool int var ID : bool var var : [ ] int } func ID ( ID : int { ) ID ID : { var ID : [ ] bool }",
  "func ID - ) { var ID : [ true * ID [ 123 * ( ID ( ) * ( 123 ) ] [ true ] * false ] int }",
  "func true - ) { var ID : [ true * ID [ 123 * ( ID ( ) * ( 123 ) ] [ ID ] * false ] int }",
  "func true ) - { var ID : [ true * ID [ 123 * ( ID ( ) * ( 123 ) ] [ ID ] * false ] int }",
  "func ID ( ID : [ ] [ ( ID [ ID ( ) [ ID ] [ ( - ( - ID ) ) ] { ) ] int ) { } func ID ( ) ] }",
  "func ID ( ID : [ ] [ ( ID [ ID ( ) [ ID ] [ ( - ( - ID ) ) ] { ) int ] ) { } func ID ( ) ] }",
  "func ID ( ID : [ ] [ ( ID [ ID ( ) [ ID ] [ ( { ( - ID ) ) ] - ) int ] ) { } func ID ( ) ] }",
  "func ID ( ) : bool { var ID : int var ] : [ ] [ ID int while false * ( - 123 ) / ( - true ) { } }",
  "func ID ( ) : bool { var ID : int ] var : [ ] [ ID int while false * ( - 123 ) / ( - true ) { } }",
  "func ID ( ID : int , ID : [ false / ( ( ( ID ) ) ) ( - - - / 123 ) ] [ ] [ ] bool , ID : [ ] bool ) { }",
  "func ID ( ID : int , ID : [ false / ( ( ( ID ) ) ) ( - - - / 123 ) ] [ ] [ ] bool , ID : [ ] bool ) { }",
  "func ID ( ID - int , ID : [ false / ( ( ( ID ) ) ) ( - - : / 123 ) ] [ ] [ ] bool , ID : [ ] bool ) { }",
  "func ID ( ) : { ( ID [ ( - ID ( ) ) ] [ ( false ) ] ) ] int [ }",
  "func ID ( ) ) { ( ID [ ( - ID ( ) : ] [ ( false ) ] ) ] int [ }",
  "func ID ( ) ) ] ( ID [ ( - ID ( ) : ] [ ( false ) { ) ] int [ }",
  "func ID ( ID : bool ) : [ ] [ ] bool { var ID : - } func ID ( ) : int { { var ID : int var ID : bool } ID = ( bool true ) }",
  "func ID ( ID : bool ) : [ ] [ ( bool { var ID : - } func ID ] ) : int { { var ID : int var ID : bool } ID = ( bool true ) }",
  "func ID ( ID : bool ) : [ ( [ ( bool { var ID : - } func ID ] ) : int { { var ID : int var ID : bool } ID = ] bool true ) }",
  "func ID ( ) : bool { var ID : [ ] / false false [ ID ( ) ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) : ID { var ID : [ ] / false false [ bool ( ) ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) : ID { var ID : [ ] / false false [ bool ( ) ] [ ] int var ID : { } func ID ( ) bool }",
  "func ID ( ] : bool , ID : int , ID : [ ] int ) { var ID : [ ID [ ( ID ) ] int }",
  "func ID ( var : bool , ID : int , ID : [ ] int ) { ] ID : [ ID [ ( ID ) ] int }",
  "func ID ( var : bool , ID : int , ID : [ ] int ) ] ] ID : [ ID [ ( ID ) { int }",
  "func ID ( ) { ID ( ID ( } [ false * false * ID ] [ ID ] ) = ( ID ) while - ID { } )",
  "func ID ( ) { ID ( ID ( } [ false * false - ID ] [ ID ] ) = ( ID ) while * ID { } )",
  "func ID ( ) { ID ( ID ( } [ false * false - ID ] [ ID ] ) } ( ID ) while * ID { = )",
  "func ID ( ID : int , ID : [ ] [ - ID [ ( true ) ] [ ID ] ID bool , ] : [ ] int ) { }",
  "func ID ( ID : int , ID : [ ] [ - ID [ ( true ) ) [ ID ] ID bool , ] : [ ] int ] { }",
  "ID ID ( ID : int , ID : [ ] [ - ID [ ( true ) ) [ func ] ID bool , ] : [ ] int ] { }",
  "func ID ( ID : bool , ID : bool ) { if ( false / ID [ ( ] ) ID [ - ID ] ) { } ID = true }",
  "func ID ( ID : bool , ID : ID ) { if ( false / bool [ ( ] ) ID [ - ID ] ) { } ID = true }",
  "func ID ( ID : bool , ID : ID ) { if ( false / bool [ ( ] ) ID { - ID ] ) [ } ID = true }",
  "func ID ( ) { var ID : bool var ID : ] [ bool return 123 - - - ( - - ID ) - ( false ) }",
  "func ID ( ) { var ID : bool var ID : ] [ bool return 123 ( - - ( - - ID ) - - false ) }",
  "func ID ( ) { var ID : bool var ID : ] [ bool return - ( - - ( - - ID ) - 123 false ) }",
  "func ID ( ) { var ID : [ ] 123 * - ID ( true ) / - ( ( ( - ( ID ) ) ) ) ) ( bool var ID : bool } func ID ( ) { }",
  "func ID ( ID { var ID : [ ] 123 * - ID ( true ) / - ( ( ( - ( ID ) ) ) ) ) ( bool var ID : bool } func ) ( ) { }",
  "func ID ( ID { var ID : [ ] ( * - ID ( true ) / - ( 123 ( - ( ID ) ) ) ) ) ( bool var ID : bool } func ) ( ) { }",
  "func ID ( ) : int { var ID : int var ID : bool if - ( 123 ID ID + true ) { } print 123 } func + ( ) { }",
  "func ID ( ) : 123 { var ID : int var ID : bool if - ( int ID ID + true ) { } print 123 } func + ( ) { }",
  "func ID ( ) : 123 { var ID : int var ID : bool if - ( int ID ID ) true ) { } print 123 } func + ( + { }",
  "func ID ID ) : [ ] [ ID ( ( ( ) / 123 + false ) ] bool { }",
  "func ID ID ) : [ ] [ ID ( ( ( ) / 123 + false ] ) bool { }",
  "func ID ID ) : [ ] [ ( ( ID ( ) / 123 + false ] ) bool { }",
  "func ID ( { : [ ( false / ID ( ) / - - - ID ( ) ) ] int ) { } func ID ( ) ID }",
  "func ID ( { : [ int false / ID ( ) / - - - ID ( ) ) ] ( ) { } func ID ( ) ID }",
  "func ID ( / : [ int false / ID ( ) { - - - ID ( ) ) ] ( ) { } func ID ( ) ID }",
  "func ID ( ) { var ID } [ ] int while - ID [ true and false ] { : }",
  "func while ( ) { var ID } [ ] int ID - ID [ true and false ] { : }",
  "func while ( ) { var ID } [ ] int ID - ID [ true and false ] { : }",
  "func ID ( ID : bool ) : [ ( [ [ - ( true ) ] ) ] ID ] bool { }",
  "func ( ID ID : bool ) : [ ( [ [ - ( true ) ] ) ] ID ] bool { }",
  "true ( ID ID : bool ) : [ ( [ [ - ( func ) ] ) ] ID ] bool { }",
  ") ID ( ID : bool func { if ( ID [ - false / false / - true ] ) { } } func ID ( ) { }",
  ") ID ( ID { bool func { if ( ID [ - false / false / - true ] ) { } } func ID ( ) : }",
  ") ID ( ID { bool func { if ( ID [ - false / false / - true ] ) { } } func ID ( ) : }",
  "func ID ( ) ] var ID : int var ID : bool if ( ID ( ) [ true ] [ - false { ) { } if - - ID { } }",
  "func ID ( ) ] var ID } int var ID : bool if ( ID ( ) [ true ] [ - false { ) { : if - - ID { } }",
  "func ID ( ) ] var ID } true var ID : bool if ( ID ( ) [ int ] [ - false { ) { : if - - ID { } }",
  "func ID ( ) { var ID : bool if ID * ID [ ID ) ( ( ID [ ) ] ] { } } func ID ( ) { }",
  "func [ ( ID : [ ] ID ] [ false - ( 123 - ( false ) ) ] bool ) { }",
  "func [ ( ID : [ ] ID ] [ false - ( 123 - ( false ) ) ] bool ) { }",
  "} [ ( ID : [ ] ID ] [ false - ( 123 - ( false ) ) ] bool ) { func",
  "func ID ( ID : [ - 123 + ID ( ) * ( false 123 + ( - ) ) / ID + ( ID ) ] [ ] bool ) { }",
  "( ID ( ID : [ - 123 + ID ( ) * ( false 123 + func - ) ) / ID + ( ID ) ] [ ] bool ) { }",
  "( ID ( ID : [ - 123 + } ( ) * ( false 123 + func - ) ) / ID + ( ID ) ] [ ] bool ) { ID",
  "func ID ( ) { print ID ( ( - ( ) ID ) ) ( ) call ID ( ) }",
  "func ID ( ) { print ID ( ( - ( ) ID ID ) ( ) call ) ( ) }",
  "func ID ( ID : int , ID : [ ( ID [ ( ID ) ] ) ] [ ] int { ) } func ID ( ) { }",
  "func ID ( ID : int ID ID : [ ( ID [ ( ID ) ] ) ] [ ] int { ) } func , ( ) { }",
  "func ID ( ID : int ID ID : [ ( ID [ ( ID ) ] ) ] } ] int { ) [ func , ( ) { }",
  "true ID ( ID : int ) : int { var ID : int } func ID ( ID : [ func - - - true ] int ) { }",
  "true ID ( ID : int ) : int { var ID : int } func true ( ID : [ func - - - ID ] int ) { }",
  "true ID ( ID : int : : int { var ID : int } func true ( ID ) [ func - - - ID ] int ) { }",
  "func ID ( ID [ : ] bool , ID : bool ) { var ID : [ ] int var ID : bool return }",
  "bool ID ( ID [ : ] bool , ID : func ) { var ID : [ ] int var ID : bool return }",
  "bool ID ID ID [ : ] bool , ID : func ) { var ID : [ ] int var ( : bool return }",
  "func ID ( [ : bool ) : bool { var ID : ID - 123 or ID ( ) [ - ID ] [ true ] or - false ] bool var ID : [ ] [ ] bool } func ID ( ) { }",
  "func ID ( [ : bool ) : bool { var [ : ID - 123 or ID ( ) [ - ID ] ID true ] or - false ] bool var ID : [ ] [ ] bool } func ID ( ) { }",
  "{ ID ( [ : bool ) : bool { var [ : ID - 123 or ID ( ) [ - ID ] ID true ] or - false ] bool var ID : [ ] [ ] bool } func ID ( ) func }",
  "func ID ( ID : int , ID : int ) : int { ID [ ( ID ( - ( - - false ) ) ) ] = - - true } func ) ( ID { }",
  "func ID ID ID : int , ID : int ) : int { ID [ ( ( ( - ( - - false ) ) ) ] = - - true } func ) ( ID { }",
  "func ID ID ID : int , ID : int ) : int { ID [ ( ( ( - ( - - false ) ) ) ] = - - true } func { ( ID ) }",
  "func ID ) ID : [ ID ( ) * - false * - ( - ID - ( ID ) ) ] bool ) { } func ID ( ( { }",
  "func ID ) ID : ( ID ( ) * - false * - ( - ID - ( ID ) ) ] bool ) { } func ID ( [ { }",
  "func ID ( ) : false ID ( - [ * true + - ( ID ) + false ) ] int { } func ID ( ) { }",
  "func ID ( ( : false ID ) - [ * true + - ( ID ) + false ) ] int { } func ID ( ) { }",
  "func ID ( ( : false ID ) - [ * true + - ( + ) ID false ) ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { { call ID ( ) bool return } func ID ( ) : } { var ID : [ ] [ ] int }",
  "func ID ( ID : [ , ID : bool ) { { call ID ( ) bool return } func ID ( ) : } { var ID : int ] [ ] int }",
  "func ID ( ID : [ , } : bool ) { { call ID ( ) bool return } func ID ( ) : ID { var ID : int ] [ ] int }",
  "func ID ( bool : bool { var ID : ) if - ( true * ( ID ) ) { } } func ID ( ) { }",
  "func ID ( bool : bool { var ID { ) if - ( true * ( ID ) ) : } } func ID ( ) { }",
  "func ID ( } : bool { var ID { ) if - ( true * ( ID ) ) : } } func ID ( ) { bool",
  "func ID ( ID : false , ID : bool , ID : [ ( 123 / bool * 123 - - true - true ) ] bool ) { }",
  "ID ID ( ID : false , ID : bool , func : [ ( 123 / bool * 123 - - true - true ) ] bool ) { }",
  "ID ID ( ID : false , ID : bool , func : [ ) 123 / bool * 123 - - true - true ) ] bool ( { }",
  "func ID ( ID : bool ) { var ID = int ID ( - false / ID ( 123 ) * 123 ) : ( ID ) } func ID ( ) { }",
  "func ID ( ID : bool ) { ID ID = int var ( - false / ID ( 123 ) * 123 ) : ( ID ) } func ID ( ) { }",
  "func ) ( ID : bool ) { ID ID = int var ( - false / ID ( 123 ID * 123 ) : ( ID ) } func ID ( ) { }",
  "bool ID ( ) : int { var ID : func while ( ( ID [ - ID ] [ ID ] ) ) { } { } }",
  "bool ID ) ( : int { var ID : func while ( ( ID [ - ID ] [ ID ] ) ) { } { } }",
  "bool ID ) ( : int { var ID : func - ( ( ID [ while ID ] [ ID ] ) ) { } { } }",
  "func ID ( ID : [ - - ID ( ID and ( true { and ( ( - ( - ( ID ) ) ) ) ) ] [ ] [ ] bool ) ) } func ID ( ) { }",
  "func ID ( ID : [ - - ID ( ID and ( true { and ( ( - } - ( ID ) ) ) ) ) ] [ ] [ ] bool ) ) } func ID ( ) { (",
  "func ID ( ID : [ - - ID ( ( and ( true { and ( ID - } - ( ID ) ) ) ) ) ] [ ] [ ] bool ) ) } func ID ( ) { (",
  "func ID ( ID : bool ) : int { if 123 * true - ID [ - ID ] [ ( ( true ) ) ] + ID { } } ) ID ( func { }",
  "func ID ( ID : ( ) : int { if 123 * true - ID [ - ID ] [ bool ( true ) ) ] + ID { } } ) ID ( func { }",
  "func ID ( ID : ( ) : int { if 123 * true - ID [ - ID ] ) bool ( true ) [ ] + ID { } } ) ID ( func { }",
  "func ID ( ) { var ] : [ false * ( ID [ ID ( ) ID [ 123 ] ) / true ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ] : [ false * ( ID [ ID ( ) ID [ 123 ] ) / true ] int var ID : ) } func ID ( bool { }",
  "ID func ( ) { var ID : [ ] int print ( - ( - ( ( ( 123 ) ) ) ) ) } func ID ( ) { }",
  "ID func ( ) ( var ID : [ ] int print ( - ( - ( ( { 123 ) ) ) ) ) } func ID ( ) { }",
  "ID func ( ) ( var ID : [ ] int print ( - ( ) ( ( { 123 ) ) ) ) - } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : int bool ID : var { return } if ID { } }",
  "func ID ( ID : int int ID : int , ID : , ) { var ID : int bool ID : var { return } if ID { } }",
  "func ID ( ID : bool ) : [ ] bool { var ID : int var ID : int { var ID : } if - ID { } ID = false } int",
  "func ID ( ID : bool ) : [ ] bool { var ID : int var ID : int var { ID : } if - ID { } ID = false } int",
  "func ID ( ID : bool ) : [ ] : { var ID : int var ID bool int var { ID : } if - ID { } ID = false } int",
  "func ID ( ) : ID { while true * ID [ ID [ 123 ] ] [ ( bool ) ] { } print ID }",
  "func ID ( ) : ID { while true ID * [ ID [ 123 ] ] [ ( bool ) ] { } print ID }",
  "func ID ( ) : ID { while true ID * [ ID [ 123 ] ] [ ( bool ) ] { } print ID }",
  "func ID ( ID : int ) { var ID : bool : var ID : bool var ID { [ ( ( ( ID ) ) ) ] [ ] int } if ( - ( ID ) ) { } } func ID ( ) { }",
  "func ID ( var : int ) { var ID : bool : var ID : bool ID ID { [ ( ( ( ID ) ) ) ] [ ] int } if ( - ( ID ) ) { } } func ID ( ) { }",
  "func ID ( var : int ) { var ID : bool : ( ID : bool ID ID { [ ( ( ( ID ) ) ) ] [ ] int } if ( - ( ID ) ) { } } func ID var ) { }",
  "func ID ( ) { int { : call ID ( - false - ( ID ) ) } }",
  "func ID } ) { int { : call ID ( - false - ( ID ) ) } (",
  "func ID } ) { int { : call ID ( - ) - ( ID false ) } (",
  "func ID ( ) : [ ID ( ( ID + ID ( ) - ID ) ) ] [ ID bool { } func ] ( ) { }",
  "func ID ( ) : + ID ( ( ID [ ID ( ) - ID ) ) ] [ ID bool { } func ] ( ) { }",
  "func ID ( ) : + ID ( ID ( [ ID ( ) - ID ) ) ] [ ID bool { } func ] ( ) { }",
  "func ID ( ID : bool , ID : [ 123 ID [ ( - ( ) ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID ID bool , ID : [ 123 ID [ ( - ( ) ] ) ] bool ) { } func : ( ) { }",
  "func ID ( ID ID bool , ID : ) 123 ID [ ( - ( ) ] ) ] bool [ { } func : ( ) { }",
  "func ID ( ID : int , ID : - 123 [ ( - - ( ID ) ) - - 123 ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : - 123 [ ( - - ( ID ) ) - - 123 ] bool , { : int ) ID } func ID ( ) { }",
  "ID ID ( ID : int , ID : - 123 [ ( - - ( ID ) ) - - 123 ] bool , { : int ) func } func ID ( ) { }",
  "func ID ( { : [ ] int ) : int { if true - false / ID ( - ID ) ID } call ID ( ) } func ID ( ) { }",
  "func ID ( { : [ ] int ) : ) { if true - false / ID ( - ID ) ID } call ID ( int } func ID ( ) { }",
  "func ID ( { ] [ : int ) : ) { if true - false / ID ( - ID ) ID } call ID ( int } func ID ( ) { }",
  "func ID ( ID : [ ( ) ID ( - false * ( ( - false ) ) ) ) ) ] [ ] int ( { } func ID ( ) { }",
  "func { ( ID : [ ( ) ID ( - false * ( ( - false ) ) ) ) ) ] [ ] int ( ID } func ID ( ) { }",
  "func { ( ID : [ ( ) ID ( - false * ( ( - false ) ) ) ) ( ] [ ] int ) ID } func ID ( ) { }",
  "func ID ( ID : ID , ID : [ true / 123 / - - ( ID ( ) ) ] int , int : int ) { }",
  "func { ( ID : ID , ID : [ true / 123 / - - ( ID ( ) ) ] int , int : int ) ID }",
  ") { ( ID : ID , ID : [ true / 123 / - - ( ID ( ) ) ] int , int : int func ID }",
  "( ID func ) : int { var ID : bool var ID : bool return }",
  "( ID func ) : int { var : : bool var ID ID bool return }",
  "return ID func ) : int { var : : bool var ID ID bool ( }",
  "func ID ( ) { var ID : int if ( - ( false / ( ( - ID ) ) ) ID { } print ) }",
  "func ID ( ) { var ID : if int ( - ( false / ( ( - ID ) ) ) ID { } print ) }",
  "func ID ( ) { var ID : if int ( - ( false / ( ( - ID ) ) ) ID { } print } )",
  "func ID ( ID : [ ] bool ) : bool { while ) ( - - ( - ID ( ) ) { } { } }",
  "func ID ( [ : ID ] bool ) : bool { while ) ( - - ( - ID ( ) ) { } { } }",
  "func ID ( [ : ID ] bool } : bool { while ) ( - - ( - ID ( ) ) { } { } )",
  "func ID ( ) { var - : bool return ID [ ( ID ( - false ) ) ] [ ID ] } func ID ( ) { }",
  "func ID ( ) { var - : bool return ID [ ( ID ( - false ) ) ] [ } ] } func ID ( ) { ID",
  "func ID ( ) { var - : ) return ID [ ( ID ( - false ) ) ] [ } ] } func ID ( bool { ID",
  "func : ( ) : [ ] int { var ID ID int { var ID : int call ID ( ) if false { } } }",
  "func : ( ) : [ ] int { var ID ID int { var ID : int call ID ( ) if false { } } }",
  "func : ( ) : [ ] int { var false ID int { var ID : int call ID ( ) if ID { } } }",
  "func ID ( ) : int { var ID : [ ] int var : ID [ 123 * ( false ) ] [ ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : 123 ] int var : ID [ [ * ( false ) ] [ ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : 123 ] int var : ID [ [ * } false ) ] [ ] int ( func ID ( ) { }",
  "func ID ( ID : int , ID : [ false * ID } ) + 123 / true * ( ID ) - - ( ( ID ) ) ] bool , ID : bool ) { } func ID ( ) { (",
  "func ID ( ID : int , ID : [ false * ID } ) + 123 / true * ( ID ) - - ( ( ID ) ) ] bool , ID { bool ) { } func ID ( ) : (",
  "func ID ( ID : int , ID : [ false * ID } ) + 123 / true * ( ID ) - - ( ( ID ) ID ] bool , ID { bool ) { } func ) ( ) : (",
  "func ID ( ID : bool ) : int { var ID : bool ID ( ID [ - ] ) = - ID ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : func ID ( ID [ - ] ) = - ID ( ID ) { } } bool ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : func ID ( ID [ - ] ) = - ID ( ID ) { } } bool ID ( ) { }",
  "func ID ( ) : bool { var ( : bool var ID : int if ( false - - - ( ( ID ID ) ) ) ) { } }",
  "func ID ( ) : bool { var ( : bool var ID : int if ( false - - - ( ( ID ID ) ) ) ) { } }",
  "func ID ( ) : bool { var ( : bool var ID false int if ( : - - - ( ( ID ID ) ) ) ) { } }",
  "func ID ( ID : bool ) { var ID : [ ID ( [ ( ( - ID ) ) ) ] ] int var ID : [ ] int }",
  "func ID ( ID : bool ) { var ID : [ ID ( [ ( ( - ID ) ) ) ] ] int var ID : [ ] int }",
  "func [ ( ID : bool ) { var ID : [ ID ( [ ( ( - ID ) ) ) ] ] int var ID : ID ] int }",
  "func ID ( ) : [ - [ 123 / ID ( ) [ ] - - - 123 ] / 123 ] int { } func ID ( ) { }",
  "func ID ( ) : [ - [ 123 / ID ( ) [ ] - - - 123 int / 123 ] ] { } func ID ( ) { }",
  "func ID ( ) { print ID ( true / 123 >= - - = ID ) ID - ( ID ) }",
  "func ID true ) { print ID ( ( / 123 >= - - = ID ) ID - ( ID ) }",
  "func ID true ) { print ID ( ( / 123 >= - - = ID ) ID - ( ID ) }",
  "func ID } ID : int , ID : [ ] int , ID : bool ) { var ID : bool var ID : bool { var ID : int var ID : bool ( } func ID ( ) { }",
  "func ID } ID : int , ID : [ ] int , ID : bool ) { } ID : bool var ID : bool { var ID : int var ID : bool ( } func ID ( ) { var",
  "func ID } ID : int , ID : [ ] int , ID : bool ) { } ID : ( var ID : bool { var ID : int var ID : bool ( } func ID bool ) { var",
  "func ID ( ) : int { if ID ) ( ID - ( - ID ( ) ) { } ID = - ID }",
  "func int ( ) : ID { if ID ) ( ID - ( - ID ( ) ) { } ID = - ID }",
  ": int ( ) func ID { if ID ) ( ID - ( - ID ( ) ) { } ID = - ID }",
  "func ID ( { : int ) ID print false + false * ID [ ID ( ) ] - true }",
  "func ID ID { : int ) ID print false + false * ( [ ID ( ) ] - true }",
  "func ID ID { : int ) ID print false + false ID ( [ * ( ) ] - true }",
  "func ID ) ) { ID ( ) = ( true + false * 123 / ID ( }",
  ") ID ) func { ID ( ) = ( true + false * 123 / ID ( }",
  ") ID ) func { ID ( ) } ( true + false * 123 / ID ( =",
  "func ID ( ) : int ) var ID : int if true { var ID : [ - ( ( false ) { ] int } } func ID ( ) { }",
  "func ID ( ] : int ) var ID : int if true { var ID : [ - ( ( false ) { ) int } } func ID ( ) { }",
  "func ID ( ] : int ) var ( : int if true { var ID : [ - ID ( false ) { ) int } } func ID ( ) { }",
  "[ ID ( ID : bool , ID : [ ] [ ] int , ID : func 123 / 123 * ( - ID ) ] int ) { } func ID ( ) { }",
  "[ ID ( ID : bool , ID : [ ] [ ] int , ID : func } / 123 * ( - ID ) ] int ) { 123 func ID ( ) { }",
  "[ { ( ID : bool , ID : [ ] [ ] int , ID : func } / 123 * ( - ID ) ] int ) { 123 func ID ( ) ID }",
  "func ID ( ) { var ID true int var ID : [ - : + ID ( ( - ( ID ) ) ) + - ID ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID true int var ID : [ - : + ID ( ( - ( ID ) ) ) + - ID ] [ ID [ ] bool } func ] ( ) { }",
  "func ID ( ) + var ID true int var ID : [ - : { ID ( ( - ( ID ) ) ) + - ID ] [ ID [ ] bool } func ] ( ) { }",
  "func ID ( ID : int ) { print 123 / ( false - ID ( ID ) + 123 ) } func false ( ) { }",
  "func ID ( ID : int ) { print 123 / ( false - ( ( ID ) + 123 ) } func false ID ) { }",
  "func ID ( ID : int ) { print 123 / ( ) - ( ( ID ) + 123 ) } func false ID false { }",
  "func [ ( ID : int , ID : ID ] int ) : bool { print ( ( ( ( ( ID ) ) ) ) ) }",
  "func [ ( ID : int , ID : ID ] int ) : bool { print ( ( ( ( ( ID ) ) ) ) ) }",
  "func [ ( ID : int , ID : ID ] int ) : bool { print ( ( ( ( ( ID } ) ) ) ) )",
  "func ID ( ID : int ) : [ ID int { return - - - ID and - false } func ] ( ) { }",
  "func ID ( ID : int ) : [ ID int { return - - - ID } - false and func ] ( ) { }",
  "func ID ( ID : int { : [ ID int ) return - - - ID } - false and func ] ( ) { }",
  "func ID ( ) : [ ] bool { var ID : int true if * ID ( ) [ true ] [ true ] { } while ID { } }",
  "func ID ID ) : [ ] bool { var ID : int true if * ID ( ) [ true ] [ true ] { } while ( { } }",
  "func ID ID ) : [ ] bool { var ID : int true if * while ( ) [ true ] [ true ] { } ID ( { } }",
  "func ID ( ) : [ ] [ ] int int var ID : { while false >= - ID ( ) { } { } } func ID ( ) { }",
  "func ID ( ) : ) ] [ ] int int var ID : { while false >= - ID ( [ { } { } } func ID ( ) { }",
  "func ID ( ) : ) ] [ ] int int var ID : { while false >= - ID func [ { } { } } ( ID ( ) { }",
  "func ID ( ID : bool ) : [ ] bool { var ID : int var ID : int print ( ( - false } ) )",
  "( ID ( ID : bool ) : [ ] bool { var ID : int var ID : int print func ( - false } ) )",
  "( int ( ID : bool ) : [ ] bool { var ID : int var ID : ID print func ( - false } ) )",
  "func ID ( ) { var ID : [ true - - ] - ( ID ) ) + ID ] [ ( int }",
  ") ID ( ) { var ID : [ true - - ] - ( ID ) func + ID ] [ ( int }",
  ") ID ( - { var ID : [ true ) - ] - ( ID ) func + ID ] [ ( int }",
  "func ID ( < : [ - ID ( - true ) true + - ID ) ] bool { }",
  "func ID ( < : [ ] ID ( - true ) true + - ID ) - bool { }",
  "func ID ( < : [ ] ID ( - true ) true + - ID ) - bool { }",
  "func ID ( ID : [ false * true [ 123 <= ( ID ( true ) ) ] * ] int ) { }",
  "func ID ( ] : [ false * true [ 123 <= ( ID ( true ) ) ] * ID int ) { }",
  "func ID ( ] : [ false * true [ 123 <= ( ID ( int ) ) ] * ID true ) { }",
  "123 ID ( ID : int , ID : int , ID : bool ) : int { var ID : int if 123 - - false + ( - func ) { } while ( ( - ( - false ) ) ) { } }",
  "123 ID ( ID : int , ID : int , ID : bool ) : int { var ID : int if 123 - - false + ( - func ) { } while ( ( - ( - false ) ) ) { } }",
  "123 ID ( ID : int , ID : int , ID : bool { : int { var ID : int if 123 - - false + ( - func ) ) } while ( ( - ( - false ) ) ) { } }",
  "func ID ( ) : bool { var ID : [ ] [ true * ( ID ( ID [ - ID ] ) / true ] int var ) : int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] [ true * ( ID ( ID [ - ID ] ) / true ] int var : ) int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] [ true * ( ID ( ( [ - ID ] ) / true ] int var : ) int } func ID ID ) { }",
  "func ID ( ID : int ( { var ID : bool { print ID [ ) ( ID ) ) ] while ID { } } }",
  "func ) ( ID : int ( { var ID : bool { print ID [ ) ( ID ) ID ] while ID { } } }",
  "func ) ( ID : } ( { var ID : bool { print ID [ ) ( ID ) ID ] while ID { } } int",
  "func ID ( ID : bool , ID : int { ID : bool ) , var ID : bool return }",
  "func ID ( ID : bool bool ID : int { ID : bool ) , var ID : , return }",
  "func ID ( ID : bool bool ID : int { ID ) bool : , var ID : , return }",
  "func ID ( ) { var ID : int var ID : bool return - ID [ ID ( ) * - ( ID ) } ]",
  "func ID ( ) { var ID : int var ID : bool ( - ID [ ID return ) * - ( ID ) } ]",
  "func ID ( ) { var ID ID int var : : bool ( - ID [ ID return ) * - ( ID ) } ]",
  "func ID ( ) : int { { if - ( ( false * } true ) ) ) { } } } func ID ( ) { (",
  "func ID ( ) : int { { if - ( ( false * } true ) ) { { } } } func ID ( ) ) (",
  "func ID ( ) : int { { if - ( ( false * } true ) ) { { } } } func ID ( ) ) (",
  "func ID ( ) { var ) : [ ] bool var ID : [ true * ( ( ( ( - false ) ) ) ID ] bool } func ID ( ) { }",
  "func ID ( ) { var ) : [ ] bool var ID : [ true * ( ( ( ( - false ) ] ) ID ) bool } func ID ( ) { }",
  "func ID ( ) { var ) ( [ ] bool var ID : [ true * ( ( : ( - false ) ] ) ID ) bool } func ID ( ) { }",
  "func ID ( ID : bool ) { ID ID : bool var var : int return }",
  "func ID ( ID : bool ) : ID ID { bool var var : int return }",
  "func ID ( bool : ID ) : ID ID { bool var var : int return }",
  "func func ( ID : [ ] int ) : int { var ID : bool var ID : bool ID ( ) = ID } ID ID ( ) { }",
  "func func ( ID : [ ] int ) : int { var ID : bool var ID : bool ( ( ) = ID } ID ID ID ) { }",
  "func func ( ID : [ ] int = : int { var ID : bool var ID : bool ( ( ) ) ID } ID ID ID ) { }",
  ") ID ( ) { var ID : bool var ID : bool ID ( ) = ( ID [ ( false func ] [ ( - - false ) ] ) }",
  ") ID ( ) { var ID : bool var ID : bool ID ( ) = ( ID [ func false ( ] [ ( - - false ) ] ) }",
  ") ID ( ) { var : ID bool var ID : bool ID ( ) = ( ID [ func false ( ] [ ( - - false ) ] ) }",
  "func ID ( ID ) [ ] bool ) : [ ] int { var ID : int call ID ( ( false ) : while ( - true ) { } } func ID ( ) { }",
  "func ID ( ID ) [ ] bool ID : [ ] int { var ID : int call ID ( ( false ) : while ( - true ) { } } func ) ( ) { }",
  "func ID ( ID ) [ ] int ID : [ ] int { var ID : bool call ID ( ( false ) : while ( - true ) { } } func ) ( ) { }",
  "func ID ( ) : [ ( ID - - ( ) [ ID [ ID ] [ ( - ( - true ) ) ] ] ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ( ID - { ( ) [ ID [ ID ] [ ( - ( - true ) ) ] ] ) ] [ ] bool - } func ID ( ) { }",
  "[ ID ( ) : [ ( ID - { ( ) [ ID [ ID ] func ( - ( - true ) ) ] ] ) ] [ ] bool - } func ID ( ) { }",
  "func ID ( ] : int { var ID : [ ) [ ] [ ] int if ID ( ) / ( true ) / ID { } while ( true ) { } } func ID ( ) { }",
  "func ID ( ] : int { var ID : [ ) ( ] [ ] int if ID ( ) / ( true ) / ID { } while [ true ) { } } func ID ( ) { }",
  "func ID ( ] : int { var true : [ ) ( ] [ ] int if ID ( ) / ( ID ) / ID { } while [ true ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] ] ] bool , ID : [ ID * 123 / ID ( ) [ [ ] bool ) { }",
  "func ID ( ID : bool , ID : [ ] ] ] bool , ID : [ ID * 123 / ID ( ) [ { ] bool ) [ }",
  "func ID ( ID : bool , 123 : [ ] ] ] bool , ID : [ ID * ID / ID ( ) [ { ] bool ) [ }",
  "func ID ( ID : int ) { return true / ( - true * false > 123 ) } ID * func ID ( ) { }",
  "func ID ( ID : int ) { return true / ( - true * false > 123 ) { ID * func ID ( ) } }",
  "func ID ( ID : int ) { return true / ( - true } false > 123 ) { ID * func ID ( ) } *",
  "func ID ( ID : [ ID ( true / ( true / ( - - ( ID ) ) / - ( ( ID ) ) ) ) ) bool ) { } func ID ( ] { }",
  "func ID ( ID : [ ID ( true / ( true / ( - func ( ID ) ) / - ( ( ID ) ) ) ) ) bool ) { } - ID ( ] { }",
  "func ( ( ID : [ ID ( true / ( true / ID - func ( ID ) ) / - ( ( ID ) ) ) ) ) bool ) { } - ID ( ] { }",
  "func ID ( ID ID [ ] int , ID : [ false - : [ - - ( ( ID ) ) ] ] [ ] bool , ID : int ) { }",
  "func ID ( ID , [ ] int ID ID : [ false - : [ - - ( ( ID ) ) ] ] [ ] bool , ID : int ) { }",
  "func ID ( ) : int { var ID : int var ID : [ ] int while ( ID ( false = ) { } ID ) ID }",
  "func ID ( ) : int { ) ID : int var ID : [ ] int while ( ID ( false = var { } ID ) ID }",
  "ID ID ( ) : int { ) ID : int var func : [ ] int while ( ID ( false = var { } ID ) ID }",
  "func ID ( ) : [ 123 or - - 123 * ID [ - ID ] [ ID { ] [ ] int { } func ID ( ) ] }",
  "func ID ( ) : [ 123 or - - 123 * ID [ - ID ] [ ID { ] [ ] int { } func ID ( ) ] }",
  "func ID ( ) : [ - or - 123 123 * ID [ - ID ] [ ID { ] [ ] int { } func ID ( ) ] }",
  "func ID ( ID : int , ID ) bool : : bool { var ID : int ID ( ) [ - ( 123 ) ] = true } func ID ( ) { }",
  "func ID ( ID : int , ID ) bool : : bool { var ID : int ID ( ) [ - ( 123 = ] ) true } func ID ( ) { }",
  "func ID ( ID : int , ID ) bool : : bool { var ID : int ID ( ) [ - ( 123 = ] ) true } func ID ( ) { }",
  "func ID ( ID : [ false / * true ( - ( - ID ( ) ) ) / false ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ false / false true ( - ( - ID ( ) ) ) / * ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ false / false true ( - ( - ID ) ) ) ( / * ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ - false / ID [ ( 123 ) ] [ - true ] ] [ ] [ ] ( ] int , ID : [ ] [ ] int ) { } func ID [ ) { }",
  "func ID ( ID : int , ID ] [ ] [ - false / ID [ ( 123 ) ] [ - true ] ] [ ] [ ] ( ] int , ID : [ ] [ : int ) { } func ID [ ) { }",
  "func ID ( ID : int ] ID , [ ] [ - false / ID [ ( 123 ) ] [ - true ] ] [ ] [ ] ( ] int , ID : [ ] [ : int ) { } func ID [ ) { }",
  "func ID ( ) { { true - 123 >= - ID [ while ] { } } print true }",
  "func ID ( 123 { { true - ) >= - ID [ while ] { } } print true }",
  "func ID { 123 { { true - ) >= - ID [ while ] ( } } print true }",
  "func ID ( ID : func , ID : int ) : [ ] [ ] int { return } int ID ( ) : int { call ID ( ) print - ( ( ID ) ) }",
  "func ID ( ID : func , ID : ) ) : [ ] [ ] int { return } int ID ( int : int { call ID ( ) print - ( ( ID ) ) }",
  "func ID ( ID : ) , ID : ) ) : [ ] [ ] int { return } int ID ( int : int { call ID ( ) print - ( ( ID ) func }",
  "func ID ( ) : bool { var ID true int var ID : [ true * : / ID [ ID ] [ ID ] ] bool }",
  "func ID ( ) : bool { var ID true int var ID ] [ true * : / ID [ ID : [ ID ] ] bool }",
  "func ID ( ) : bool { var ID true int var ID ] [ true * : / ID [ ID : ] ID ] [ bool }",
  "func ID - ) { var ID : int var ID : int while ID [ true ] + ( ID { } }",
  "func ID - ) { ( ID : int var ID : int while ID [ true ] + var ID { } }",
  "func ID - { ) ( ID : int var ID : int while ID [ true ] + var ID { } }",
  "func ID ( ID : bool , ID : [ ] bool : { var ID : int var ID ) bool if ID ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool : { var ID : int var ID ) bool } ID ( ID ) { } } func ID ( ) { if",
  "func ID ( ID : bool , ID : [ ] bool : { var ID : func var ID ) bool } ID ( ID ) { } } int ID ( ) { if",
  "func ID ( ID : [ - ( ID [ ( ( true ) ) ] ) ] int { { } func ID ( ) ) }",
  "func ID ( ID : [ } ( ID [ ( ( true ) ) ] ) ] int { { - func ID ( ) ) }",
  "func ID ( ID : [ } ( ID [ ( ( true ) ) ] ) ] int { { - func ID ( ) ) }",
  "func ID ( ID : [ ] bool , ID : bool ) { call ID ( ) func ID ( ( ID ) ) } call ID ( ) { }",
  "func ) ( ID : [ ] bool , ID : bool ) { call ID ( ID func ID ( ( ID ) ) } call ID ( ) { }",
  "func ) ( ID : { ] bool , ID : bool ) [ call ID ( ID func ID ( ( ID ) ) } call ID ( ) { }",
  "func ID ( ID : [ ] bool ) { var ID : int { var ID : int } ID : int call ID ( - - true ) { var } if - false { } }",
  "func ID ( ID : [ ] ) ) { var ID : int { var ID : int } ID : int call ID ( - - true bool { var } if - false { } }",
  "func ID ( ID : [ ] ) ) { var ID int int { var ID : int } ID : : call ID ( - - true bool { var } if - false { } }",
  "func ID ( ) : bool { var ID : int var ID : [ } bool ID ( - 123 * false ) = ( false ) if ID { ] }",
  "func ID ( ) : bool { var ID : int var ID : [ } bool ID ( - 123 * false ) = ( { ) if ID false ] }",
  "func ID ( ) : bool var { ID : int var ID : [ } bool ID ( - 123 * false ) = ( { ) if ID false ] }",
  "func ID ( ID : [ ( int ) : bool { var ID : bool var ID : int call ID ] ) print - ID }",
  "func ID ( var : [ ( int ) : bool { var ID : bool ID ID : int call ID ] ) print - ID }",
  "func ID ( var : [ ( int ) : bool { var ID : bool ID ID : int call ID } ) print - ID ]",
  "func ID ( ID : ) , ID : bool , ID : bool int : bool { var ID : int var ID : [ false * ID ] [ ] bool }",
  "func ID ( ID : ) , ID : bool , ID : bool int ] bool { var ID : int var ID : [ false * ID : [ ] bool }",
  "func ID ( ID : ) , : : bool , ID ID bool int ] bool { var ID : int var ID : [ false * ID : [ ] bool }",
  "func ID ( ID : bool , ID [ : ] bool ) : bool { return ID [ false * ID ] }",
  ", ID ( ID : bool func ID [ : ] bool ) : bool { return ID [ false * ID ] }",
  "func ID ( ID : bool , ID : int ) : int { : ID : [ true * ID [ - - - ( ( ( - ( ID ) ) ) ) ] [ - ID ] ] int var ID var int }",
  "func ID ( ID : bool , ID : int ) : int { : ID : [ true * ID [ - - - ( ( ( - ( ID ) ) ) ) ] [ - ID ] ] } var ID var int int",
  "func ID ( ID : bool , ID : int ) : int { : ID : ( true * ID [ - - - ( ( ( - [ ID ) ) ) ) ] [ - ID ] ] } var ID var int int",
  ": ID ( ID : bool ) { var ID func [ true / - 123 / 123 - ( ( ( ID ) ) ) ] [ ] [ ] int } func ID ( ) { }",
  ": ID ( ID : bool ) { - ID func [ true / - 123 / 123 var ( ( ( ID ) ) ) ] [ ] [ ] int } func ID ( ) { }",
  ": ID ( ID : bool ) { - ID func [ true - / 123 / 123 var ( ( ( ID ) ) ) ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : : , ID : int ) int [ ] [ false * ID ( ) [ false ] / ID ] bool { }",
  "func ID ( ID : bool [ ID : : , ID : int ) int [ ] , false * ID ( ) [ false ] / ID ] bool { }",
  "func ID ( ID : bool [ ID : : , ID : int ) int [ ] , { * ID ( ) [ false ] / ID ] bool false }",
  "func ID ( ) { print ( - ID [ - ( ( true ) } ] ) } func ID ( ) { )",
  "func ID ( ) { print ( - ID [ ) ( ( true - } ] ) } func ID ( ) { )",
  "func ID ( ) { print ( - ID [ ) ( ( true - } ] ) } func ID { ) ( )",
  "func ID ( ID { bool , ID : [ true - 123 / false + ( true ) ] [ ] bool , ID : [ ] bool ) : } func ID ( ) { }",
  "func ID ( ID { bool , ID : + true - 123 / false [ ( true ) ] [ ] bool , ID : [ ] bool ) : } func ID ( ) { }",
  "func ID ( ID { bool , ID : + true - 123 / , [ ( true ) ] [ ] bool false ID : [ ] bool ) : } func ID ( ) { }",
  "func bool ( ) : bool { { { var ID : [ ID [ ID ] [ ID ] ] ID } print - - false } } func ID ( ) { }",
  "func bool ( ) : bool { { { var ID : [ - [ ID ] [ ID ] ] ID } print ID - false } } func ID ( ) { }",
  "func } ( ) : bool { { { var ID : [ - [ ID ] [ ID ] ] ID bool print ID - false } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool } func ID ( ) : bool { var ID : bool var ID { int ID = true while ( ID ) : } }",
  "func ID ( ) - var ID : int var ID : bool while ( true { - - ID ) { } } func ID ( ) { }",
  "func ID ( ) - var ID : int var ID : bool while } true { - - ID ) { } ( func ID ( ) { }",
  "func ID ( ) - var ID : int var ID : bool while } true { - - ID ) { } ( func ID ( ) { }",
  "func ID ( ID ) [ ( ID [ ( ( ( false ) ) ) ] : ] int ) { }",
  "func ID ( ID ) [ ( ID [ } ( ( false ) ) ) ] : ] int ) { (",
  "func ID ( ID ) [ ( ID [ } ( ( false ) ) ) ] : ] int ) { (",
  "func ID ( ID : [ ( - ( - ID - - true ] [ [ - ( - ID ) ] ) ) ] [ ] bool ) { }",
  "func ID ( ID : [ ( - ( - ID - - true ] [ [ - ( - ID ) ] ) ) ] [ ] bool ) { }",
  "func ID } ID : [ ( - ( - ID - - true ] [ [ - ( - ID ) ] ) ) ] [ ] bool ) { (",
  "func ID ( ) { } func ID ( ID : int ) : ] ] [ - ( ( - ( ( 123 ) ) ) ) [ int { }",
  "func ID ( ) func } { ID ( ID : int ) : ] ] [ - ( ( - ( ( 123 ) ) ) ) [ int { }",
  "func ID ( ) func } { ) ( ID : int ) : ] ] [ - ( ( - ( ( 123 ) ) ID ) [ int { }",
  "func - ( ID : bool , ID : int , ID : [ - ( - ID ( true ) ) ] int ) { }",
  "func - ( ID : ID , ID : int , bool : [ - ( - ID ( true ) ) ] int ) { }",
  "func - ( ID : ID , ID : int , bool : [ - ( - ID ( true ) ) ] int ) { }",
  "func ) ( ID : bool ) { var ID : int ID ( ) = - ( ( ( ID ) ) ) } func ID ( ID { }",
  "func ) ( ID : bool ) { var ID ( int ID ( ) = - ( ( : ID ) ) ) } func ID ( ID { }",
  "func ) = ID : bool ) { var ID ( int ID ( ) ( - ( ( : ID ) ) ) } func ID ( ID { }",
  "func ID ( ) : [ ] bool { var ID : int var ID : int while 123 * false 123 / ( ( ( - ) ) ) { } if ID { } }",
  "func ID ( ) : [ ] bool { var ID : int var ID : int while ( * false 123 / ( ( 123 - ) ) ) { } if ID { } }",
  "func ID ( ) : [ ] bool { var ID : int var ID : ) while ( * false 123 / ( ( 123 - ) ) int { } if ID { } }",
  "func ID ( ) : [ ] int { var ID : } - ( ( 123 * ID * - false ) ) ] [ ] bool [",
  "func ID ( ) : [ ] int { var ID : } ) ( ( 123 * ID * - false - ) ] [ ] bool [",
  "func ID ( [ : [ ] int { var ID : } ) ( ( 123 * ID * - false - ) ] ) ] bool [",
  "func ID ( ID : [ ] bool , ID : bool ) : [ ] [ - - ID ( ) [ ( - ID ) ] [ bool ID ] ] [ ] - { }",
  "func ID ( ID : [ : bool , ID : bool ) ] [ ] [ - - ID ( ) [ ( - ID ) ] [ bool ID ] ] [ ] - { }",
  "func ID ( ID : [ : bool , ID : bool ) ] [ ] [ - - ID ( ) [ ( } ID ) ] [ bool ID ] ] [ ] - { -",
  "func ID false ) : bool { var ID : int var ID : [ ID ( ) [ - 123 ] [ ( ] ] int }",
  "func ID false [ : bool { var ID : int var ID : ) ID ( ) [ - 123 ] [ ( ] ] int }",
  "func ID false [ : bool { var ID : int : ID var ) ID ( ) [ - 123 ] [ ( ] ] int }",
  "func ID ( ) : int { ID ID : bool var var : [ ( - ID ( - ID ) ) ] bool }",
  "func ID ( ) : int { ID ID : bool var var : [ - - ID ( ( ID ) ) ] bool }",
  "func ID ( ) : int { ID ID : bool var var : [ - - ID ( ( ID ) ) ] bool }",
  "func ID ( ) : bool { } func ID ( ID : [ ] bool , ID : [ ] { , ID : bool ) : bool int var ID : int }",
  "func : ( ) ID bool { } func ID ( ID : [ ] bool , ID : [ ] { , ID : bool ) : bool int var ID : int }",
  "func : ( ) ID bool { } func ID ( ID : [ ] bool , ID : [ ] { , ID : bool ) : bool var int ID : int }",
  "{ ID ( ) : [ true + ID / - ( false + ( ID ) + - true ) * - - - ID ] int { } func ID ( ) func }",
  "{ ID ( ) : [ true + ID / - ( false + ( int ) + - true ) * - - - ID ] ID { } func ID ( ) func }",
  "{ ID ( ) : + true [ ID / - ( false + ( int ) + - true ) * - - - ID ] ID { } func ID ( ) func }",
  "func ID ( ) : bool { var ID : bool var ID : ID ID [ false * ( true ) ] [ - ID ] = bool call ID ( ) }",
  "func ID ( ) : bool { var ID : bool var ID : ID ID [ false * ( true ) ] [ - ID ] = bool call ID ( ) }",
  "( ID ( ) { var ID : bool while ( ID * - false * ID func ) ) { } if - 123 { } } func ID ( ) { }",
  "( ID ( ) { var ID : bool while ( ID * - false * ID func ) ) { } if - 123 { } } func ID ( ) { }",
  "( ID ( ) { var ID : bool while if ID * - false * ID func ) ) { } ( - 123 { } } func ID ( ) { }",
  "func ID ( ID : int , ID } bool , ID : bool ) { var ID : int while true - 123 + - ( ID ) { } : func ID ( ) { }",
  "func ID ( ID : int , ID } int , ID : bool ) { var ID : bool while true - 123 + - ( ID ) { } : func ID ( ) { }",
  "{ ID ( ) : [ ] [ ] bool func var ID : [ ID ( ) [ - - ID ] [ - 123 ] ] int var ID : int } func ID ( ) { }",
  "{ ID ( ) : [ ] [ ] ] func var ID : [ ID ( ) [ - - ID ] [ - 123 bool ] int var ID : int } func ID ( ) { }",
  "{ ID ( ) ( [ ] [ ] ] func var ID : [ ID : ) [ - - ID ] [ - 123 bool ] int var ID : int } func ID ( ) { }",
  "func ID ( ] : [ ID bool , ID : int ) : int { var ID : [ ] bool }",
  "func ID ID ] : [ ( bool , ID : int ) : int { var ID : [ ] bool }",
  "func ID ID ] : [ ( bool , ID : var ) : int { int ID : [ ] bool }",
  "func ID ( ) { var ID : int var ID : bool ID = ID ( [ ) ( - false ) ] }",
  "func ID ( ) { var ID : ( var ID : bool ID = ID int [ ) ( - false ) ] }",
  "func ID ( ) { ID ID : ( var ID : bool var = ID int [ ) ( - false ) ] }",
  "func ID { ) ( var ID : bool var ID : int call ID ( - ID ( ) [ ( ( true ) ) ] ) } func ID ( ) { }",
  "func ID { ) ( var ID : bool var ID : int call ID ( - ID ( ) [ ( ( true ) } ] ) } func ID ( ) { )",
  "func } { ) ( var ID : bool var ID : int call ID ( - ID ( ) [ ( ( true ) ID ] ) } func ID ( ) { )",
  "func ID ( ) : int int var ID : { } func ID ( ) : int { print ID - 123 }",
  "func ID ( ) : int int var : ID { } func ID ( ) : int { print ID - 123 }",
  "func int ( ) : int int var : ID { } func ID ( ) : ID { print ID - 123 }",
  "func ID ( ID int bool , ID : [ ] [ - ( true * ID ( ) [ ( ID ) ] ) ] [ ] [ ] [ ] [ ] [ ] int , ID : : ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : [ ID [ 123 / ID / ID true ) ] ] int { } func ( ( ) { }",
  ") ID ( ID : bool , ID : int , ID : int ) : [ ID [ 123 / ID / ID true func ] ] int { } func ( ( ) { }",
  ") ID ( ID : bool , ID : int , ID : int ) : [ ID [ 123 { ID / ID true func ] ] int { } func ( ( ) / }",
  "func ID ( ID : bool , ID : [ false * ( ID [ ( ID ) ] ID [ ] ) / true ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ [ * ( ID [ ( ID ) ] ID false ] ) / true ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ [ * ] ID [ ( ID ) ( ID false ] ) / true ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID ( ID ( ID ( ) ) } ] bool , ID : [ ] [ ] int ) { } func ID ( ) { )",
  "func ID ( ID : int , ID : [ ID ( ID ( ID ( ) ) } ] bool , ID : [ ] [ ] int ) { } func ID ( ) { )",
  "func ID ( ) { var ID : ( if - ( ( - false - true ) ) { } } func ID bool ) { }",
  "func ID ) ) { var ID : ( if - ( ( - false - true ( ) { } } func ID bool ) { }",
  "func ID ) ) { var ID : ) if - ( ( - false - true ( ) { } } func ID bool ( { }",
  "func } ( ) { var ID : bool ID func ID ( ) : int { var ID : [ ] int print - - ID { } }",
  "func } ( ) { var func : bool ID ID ID ( ) : int { var ID : [ ] int print - - ID { } }",
  "func } ( ) { var func : bool ID ID ID ( ) : int { var ID : int ] [ print - - ID { } }",
  "func ID ( ID : int , ID : bool ) : [ ] bool { call func ( ) if true * ID { } } ID ID ( ) { }",
  "func ID } ID : int , ID : bool ) : [ ] bool { call func ( ) if true * ID { } } ID ID ( ) { (",
  "func ID } ID : int , ID : bool ) : [ ] bool { call func ( ) * true if ID { } } ID ID ( ) { (",
  "func ID : ID : int ) { var ID : [ ] bool var ID ( int if ( - ( true ) ) { } while - ID { } }",
  "func ID : ID : int ) { var ID : [ { bool var ID ( int if ( - ( true ) ) { } while - ID ] } }",
  "func ID : ID : int ) { var ID : int { bool var ID ( [ if ( - ( true ) ) { } while - ID ] } }",
  "func ID ( ) : bool { { ID : [ ] bool var ID : bool if 123 * ( false ) { } if ID var } }",
  "func ID ( bool : bool { { ID : [ ] ) var ID : bool if 123 * ( false ) { } if ID var } }",
  "func ID 123 bool : bool { { ID : [ ] ) var ID : bool if ( * ( false ) { } if ID var } }",
  "func ID ( ) : int { var * : int var ID : bool { var ID : [ ] [ 123 * - - - - ( ID ) ID ID ] bool var ID : bool } }",
  "func ID ( ) : ID { var * : int var ID : bool { var ID : [ ] [ 123 * - - - - ( ID ) ID ID ] bool var int : bool } }",
  "func ID ( ) { var ID : [ true - ID ) ( [ - ID ( ) ] [ ( false ) ] + ( - - ( ID ) ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ true - ID ) ( [ ( ID ( ) ] [ - false ) ] + ( - - ( ID ) ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ true - ID ) ( [ ( ID ( ) ] [ - false ) ] + ( - - ( ID ) ) { bool var ID : bool } func ID ( ) ] }",
  "func ID ( ID : bool ) ( var ID : [ ID ( - { ID ) ) ] bool var ID : int }",
  "func ID : ID : bool ) ( var ID ( [ ID ( - { ID ) ) ] bool var ID : int }",
  "func ID : ID : bool ) ( var var ( [ ID ( - { ID ) ) ] bool ID ID : int }",
  "func ID ( ) ID var { : int } func ID ( ) { var ID : [ ] [ ] [ ] bool }",
  "func ID ( ) ID var { : int } func ID ( ) { ] ID : [ ] [ ] [ var bool }",
  "func ID ( ) ID var { : int } func ID ( ) { ] ID : [ [ [ ] ] var bool }",
  "func ID ( ID : bool , ID : : ) { var ID int [ ] [ ID [ - false ] ] bool var ID : [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( [ : bool , ID : : ) { var ID int [ ] [ ID [ - false ] ] bool var ID : [ ] ID ] [ ] bool } func ID ( ) { }",
  "func ID ( [ : bool , ID : : : { var ID int [ ] [ ID [ - false ] ] bool var ID ) [ ] ID ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] ( - - ID ( ) * ID ) ID int , ID : int ) { }",
  "func ID ( ID : bool , ID : [ ] ( - - ID ( ) * ID ) ID int , ID : int ) { }",
  "func ID ( ID : bool , ID ] [ : ( - - ID ( ) * ID ) ID int , ID : int ) { }",
  "func ID { ) : int { var ID : int var ID : int ID ( ) = ID * true + - 123 - - false } func ID ( ) ( }",
  "func ID { ) : int { var ID : int var ID : int ID ( ) = ID false true + - 123 - - * } func ID ( ) ( }",
  "func ID { ) : ID { var ID : int var ID : int int ( ) = ID false true + - 123 - - * } func ID ( ) ( }",
  "func ID ( ) { var ID : bool ID ( - ID ( while ( ) ) ) { } } func ID ( ) { }",
  "func ID ID ) { var ID : bool ID ( - ( ( while ( ) ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool ID ( - ID ( ) [ ID ] [ - false ] ) = ID while { - ( ( ( ( - true ) ) ) ) ) ( } }",
  "func ID ( ) { var ID : int var ID : bool ID ( - ID ( ) [ ID ] [ ( false ] ) = ID while { - ( - ( ( - true ) ) ) ) ) ( } }",
  "} ID ( ) { var ID : int var ID : bool ID ( - ID ( ) [ ID ] [ ( false ] ) = ID while { - ( - ( ( - true ) ) ) ) ) ( func }",
  "func ID ( ) : int { ID ( ) [ 123 * ( - false ) true / ] = 123 }",
  "func ID ( ) : ] { ID ( ) [ 123 * ( - false ) true / int = 123 }",
  "func ID ( ) : ] { ID ( ) ( 123 * [ - false ) true / int = 123 }",
  "func ID ( ) : bool { var ) : int { ID ( ID / ( ID ) ) = ID if ( ( false ) ) { } } } func ID ( ID { }",
  "func ID ( ) : bool { var ) : int { ID ( ID / ( ID ) ) = ID ( ( ( false ) ) { } } } func ID if ID { }",
  "func ID ( ID : [ ] [ ] bool ) { ) ID [ - ( ID ) ] [ - 123 ] } func ID ( return { }",
  "func ID ( ID : [ ] [ ( bool ) { ) ID [ - ( ID ) ] [ - 123 ] } func ID ] return { }",
  "- ID ( ID : [ ] [ ( bool ) { ) ID [ - ( ID ) ] [ func 123 ] } func ID ] return { }",
  "[ ID ( ) : bool { var ID : int var ID : [ ] [ ] func ID ( true ) ] int }",
  ") ID ( ) : bool { var ID : int var ID : [ ] [ ] func ID ( true [ ] int }",
  "ID ID ( ) : bool { var ID : int var ID : [ ] [ ] func ) ( true [ ] int }",
  "func ID ( ID : [ ID [ ( - ( ( 123 ) ) { ] ] int ) { } func ID ( ) ) }",
  "func ) ( ID : [ ID [ ( - ( ( 123 ) ) { ] ] int ) { } func ID ( ID ) }",
  "func ) ( ID : [ ID [ ( - ( ( 123 ) ) { ] ] int ) { } } ID ( ID ) func",
  "func ] ( ID : [ ID [ - ( ID / false <= ( ID ) ) ] ] [ ] [ ID bool ) { }",
  "] func ( ID : [ ID [ - ( ID / false <= ( ID ) ) ] ] [ ] [ ID bool ) { }",
  "bool func ( ID : [ ID [ - ( ID / false <= ( ID ) ) ] ] [ ] [ ID ] ) { }",
  "func ID ( int : ID , ID : int ) { var ID : bool var ID : int }",
  "func ID ( int : ID , ID : ID ) { var ID : bool var int : int }",
  "func ID ( int : ID , ) : ID ID { var ID : bool var int : int }",
  "func ID ( [ : [ ( - - - ID * ( 123 * true ) ) ] ) ] int { } func ID ( ) { }",
  "func ID ( [ : [ ( - - - ID * ( 123 * true ) ) ] ) ] int { } func ID ( ) { }",
  "func ID ( [ : [ ( - - - ID * 123 ( * true ) ) ] ) ] int { } func ID ( ) { }",
  "] ID ( ) { while - - - - ID [ - ( false ) func { } }",
  "] ID [ ) { while - - - - ID ( - ( false ) func { } }",
  "] ID [ ) { while - - - - ID ( - ( false ) func { } }",
  "func ID ( ) : [ ] int - var ID : [ ( ID + true / { ID ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) : [ ] int - var ID : [ ( ID + true / { ID ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) : [ ] int - : ID var [ ( ID + true / { ID ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) : int { while ( - ( ( * * true false false ) ) ) { } }",
  "func ID ( ) : int { while ( - ( ( * false true false * ) ) ) { } }",
  "func ID ( ) : int { while ( } ( ( * false true false * ) ) ) { } -",
  "func ID ( ID : [ ] [ ( 123 * ( ID ( ) [ ( ( true - ) ) ] [ 123 ] ) * - true ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( 123 - ( ID ( ) [ ( ( true - ) ) ] [ 123 ] ) * * true ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID true [ ] [ ( 123 - ( ID ( ) [ ( ( true - ) ) ] [ 123 ] ) * * : ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int [ ID : [ ] [ ] int , ID : bool ) { var ID : , ] bool return }",
  "func ID ( ID : int [ ID : [ ] [ ] int , ID : bool ) } var ID : , ] bool return {",
  "func ID ( ID : int var ID : [ ] [ ] int , ID : bool ) } [ ID : , ] bool return {",
  "func ID ( ) { var ID : int var ID : int call ID ( 123 * ( ID ( ) ) } ID ) *",
  "func ID ( ) { var ID : int : ID var int call ID ( 123 * ( ID ( ) ) } ID ) *",
  "func ID ( ) { var ID : int : ID var int call ) ( 123 * ( ID ( ID ) } ID ) *",
  "func ( ( ) : int { var ID : bool call ID ( ID / ( - ID ) ) print ID } func ID ID ) { }",
  "func ( ( ) : print { var ID : bool call ID ( ID / ( - ID ) ) int ID } func ID ID ) { }",
  "func ID ( ID : bool ) { ID print [ ( - ( - ID ) ) ] } func ID ( ) { }",
  "func ID ( ID : bool ) { ID print [ ( - ( } ID ) ) ] - func ID ( ) { }",
  "func ID ( ID : bool ) { ID print [ ( - ( ) ID } ) ] - func ID ( ) { }",
  "func ID ( ) { / - - 123 print 123 + 123 * - ( ( ( ( false ) ) ) ) - - - false } func ID ( ) { }",
  "func ID ( ) { / - - 123 print 123 + 123 * - ( ( ( ( false ) ) ) ) - - - false } func ID ( ) { }",
  "func ID ( ) { / ) - 123 print 123 + 123 * - ( ( ( ( false ) ) ) - - - - false } func ID ( ) { }",
  "func ID ( ) { var : ID [ 123 - ID [ - false * ID / - true ] [ - ( - - - ID ) ] + - - - - ID ] [ ] int }",
  "func ID ( ) { var : ID [ 123 - ID [ - false * ID / - true ] [ - ( - - - ID ] ] + - - - - ID ) [ ] int }",
  "func ID ( ) { var : ID [ 123 - - [ - false * ID / ID true ] [ - ( - - - ID ] ] + - - - - ID ) [ ] int }",
  "func ID ( bool : ) { var ID : [ ] [ ] int return }",
  "func ID ( int : ) { var ID : [ ] [ ] bool return }",
  "func ID ( int : [ { var ID : ) ] [ ] bool return }",
  "func ID ( ) : bool { return 123 / ID [ ID [ 123 ] ] * ( - false ) } { ID ( ) func }",
  "func ID ( ) : bool { return 123 / ID [ ID [ 123 ] ] * ( - false ) } { ID ( ) func }",
  "func ID { ) : bool { return 123 / ID [ ID [ 123 ] ] * ( - false ) } ( ID ( ) func }",
  "func ID ( ID : int , ID : [ ] int , ID : [ ( ( ID [ ID ] [ - true } ) ) ] bool ) { ] func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ID : [ ( ( ID [ ID ] [ - true } ) ) ] bool ) { ] func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int ID , : [ ( ( ID [ ID ] [ - true } ) ) ] bool ) { ] func ID ( ) { }",
  "func ID ( ) { var ID : bool var : : [ ] [ ] int return } func ID ( ID ID bool , ID : [ ] bool ) { }",
  "func ID ( ) { var ID : ID var : : [ ] [ ] int return } func ID ( ID bool bool , ID : [ ] bool ) { }",
  "func ID ( ) { var ID : ID var : : ] [ [ ] int return } func ID ( ID bool bool , ID : [ ] bool ) { }",
  "func ID ( ) ID int { return } func ID ( ID : [ ( ID ( ) [ - : ] ) ] [ ] int ) { }",
  "func ID ( ) ID int { return } func ID ID ID : [ ( ( ( ) [ - : ] ) ] [ ] int ) { }",
  "func ID ( ) ID int { return } func [ ID ID : [ ( ( ( ) ID - : ] ) ] [ ] int ) { }",
  "func ID } ID : [ ] int ) { print - ID ( ID ( 123 ) ) (",
  "func } ID ID : [ ] int ) { print - ID ( ID ( 123 ) ) (",
  "func } ID ID : [ ] int ) { print 123 ID ( ID ( - ) ) (",
  "func ID ( ) : [ ] int { print } ID [ ( ( ( ( - true ) ) ) ) ] ) ( func ID ( ) { }",
  "func ID ( ) : [ ] int { print } ID [ ( ( ( ( - true ) ) ) ) ] ) ( func ID ( ) { }",
  "func ID ( ) : [ ] int { print } ID [ ( ( ( ( { true ) ) ) ) ] ) ( func ID ( ) - }",
  "func ID ( ) { var ID : int var ID : [ ] bool return } ( ID ( ID : int ) { ID func ) = ID ID = ( - false ) }",
  "func ID ( ) ) var ID : int var ID : [ ] bool return } ( ID ( ID : int ) { ID func ) = ID ID = ( - false { }",
  "func ) ( ID ) var ID : int var ID : [ ] bool return } ( ID ( ID : int ) { ID func ) = ID ID = ( - false { }",
  "func ID ( ID : [ - ( ID [ ID [ - ID ] ] ) ] [ ] } ) { } func ID ( ) { bool",
  "func ID ( ID : [ [ ( ID [ ID [ - ID ] ] ) ] - ] } ) { } func ID ( ) { bool",
  "func ID ( ID : [ [ ( ID [ ID - [ ID ] ] ) ] - ] } ) { } func ID ( ) { bool",
  "func ID ( ID : [ - 123 / 123 - ID [ ] * ID ( ) ] false [ ] [ ] int ) { }",
  "func ID ( ID : [ - 123 / 123 - ID [ ] * ID ( ) ] false { ] [ ] int ) [ }",
  "func ID ( 123 : [ - 123 / ID - ID [ ] * ID ( ) ] false { ] [ ] int ) [ }",
  "func ID ( ) { var ID : int true ID : [ ( false + - ( ( ID ) ) + - var ) ] bool }",
  "func ID ( ) { var ID : int true ID ( [ : false + - ( ( ID ) ) + - var ) ] bool }",
  "func + ( ) { var ID : int true ID ( [ : false ID - ( ( ID ) ) + - var ) ] bool }",
  "func ID ( ) { int : var ID : int if ( - - ID [ ID ] [ 123 ] ) { } }",
  "func ID ( ) { [ : var ID : int if ( - - ID int ID ] [ 123 ] ) { } }",
  "func ID ( ) { if ( ID * true * ID [ ( - ( true ) ) ] [ ( ID ) ) ] { } if ID { } } func ID ( ) { }",
  "func ID ( ) { if } ID * true * ID [ ( - ( true ) ) ] [ ( ID ) ) ] { } if ID { } ( func ID ( ) { }",
  "func ID ( ) { if } ID ( true * ID [ * - ( true ) ) ] [ ( ID ) ) ] { } if ID { } ( func ID ( ) { }",
  "func ID ( ) : [ { { var ID : [ ] int false / - - ( true ) / ( ( true ) ) ] [ ] bool } if ( ( 123 ) ) { } }",
  "func ID ( ) : [ { { var ( : [ ] int false / - - ( true ) / ( ( true ) ) ] [ ] bool } if ( ID 123 ) ) { } }",
  "func ID ( ) : [ { { var ( : [ ] int false / - - ( true ) / ( ( true ) ) 123 [ ] bool } if ( ID ] ) ) { } }",
  "func ID ( ) : ( { var ID : bool var ID : [ bool true - ( ( ID ) + - - ( - ( - ID ) ) ) ) ] bool }",
  "func ID ( ) : ( { var ID : bool var ID : [ bool true - ( ( ID ) + - - ( - ( - ID ) ) ) ) ] bool }",
  "func ] ( ID : [ - - ( - ( ID ( ) [ ( ID ) ] ) ) ] [ ] [ ID [ ] [ ] [ ] int ) { }",
  "func ] ( ID : [ - - ( - ( ID ( ) [ ( ID ) ] ) ) ] [ ] [ ID [ ] [ ] [ ) int ] { }",
  "func ] ( ID : [ - ) ( - ( ID ( ) [ ( ID ) ] - ) ] [ ] [ ID [ ] [ ] [ ) int ] { }",
  "func ID ( ) { while ID ( ) [ ID ( - ID } ] { } )",
  "func ID ( ) { while ID ( ] [ ID ( - ID } ) { } )",
  "func ID ( ) { while } ( ] [ ID ( - ID } ) { ID )",
  "func ID ( ID : ( ( ( [ - false > true ) ) ) ] [ ] [ ] bool ) { }",
  "func ID ( [ : ( ( ( [ - false > true ) ) ) ] ID ] [ ] bool ) { }",
  "func ID > [ : ( ( ( [ - false ( true ) ) ) ] ID ] [ ] bool ) { }",
  "func ID ( ) { { var bool : ID } }",
  "func ID ( ) { { bool var : ID } }",
  "func } ( ) { { bool var : ID } ID",
  "func ID ( ) ID int { var ID : bool var : : [ ( ( 123 == false ) ) ] [ ] int } func ID ( ) { }",
  "func ID ] ) ID int { var ID : bool var : : [ ( ( 123 == false ) ) ( [ ] int } func ID ( ) { }",
  ": ID ] ) ID int { var ID : bool var func : [ ( ( 123 == false ) ) ( [ ] int } func ID ( ) { }",
  "func / ( ) { ID [ 123 ID ID [ ID ( - ( ID ) ) ] * false ] = ID } func ID ( ) { }",
  "func / ( ) { ID [ 123 ID ID [ ID ( - ( ID ) ) ] * { ] = ID } func ID ( ) false }",
  "func / ( ) { ID [ ID ID ID [ ID ( - ( ID ) ) ] * { ] = ID } func 123 ( ) false }",
  "func ID bool ) : [ ] [ ] bool { var ID : [ ID [ true / 123 / false ] ] ( var ID : [ ] [ ] int } func ID ( ) { }",
  "func ID ] ) : [ ] [ ] bool { var ID : [ ID [ true / 123 / false bool ] ( var ID : [ ] [ ] int } func ID ( ) { }",
  "[ ID ] ) : [ ] [ ] bool { var ID : [ ID [ true / 123 / false bool ] ( var ID : [ ] func ] int } func ID ( ) { }",
  "func ID ( ) { ID [ ( 123 * - true == - 123 ) ] [ - - ( - - ID ] ) = - true }",
  "func ID ( ) { ( [ ( 123 * - true == - 123 ) ] [ - - ID - - ID ] ) = - true }",
  "func ID ( ID : [ ID 123 - ( [ + ID [ - true ] [ - true ] ) ] [ ID ] ] bool ) { }",
  "func : ( ID ID [ ID 123 - ( [ + ID [ - true ] [ - true ] ) ] [ ID ] ] bool ) { }",
  "func : ( ID ID [ ] 123 - ( [ + ID [ - true ] [ - true ] ) ID [ ID ] ] bool ) { }",
  "func ID ( ID : [ ] , int ID : [ ID * 123 - ID ( 123 ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] , int ID : [ ID ] 123 - ID ( 123 ) * int ) { } func ID ( ) { }",
  "func ID ( ID func [ ] , int ID : [ ID ] 123 - ID ( 123 ) * int ) { } : ID ( ) { }",
  "func ID ( ) : int { while ID [ ID ( [ ID ( true ) ] ) ] { } ID = ( false ) }",
  "func ID ( ) : int { while ID [ ID ( true ID ( [ ) ] ) ] { } ID = ( false ) }",
  "func ID ( ) : int { [ ID [ ID ( true ID ( while ) ] ) ] { } ID = ( false ) }",
  "func ID ( ID : int , ID : bool ) : bool { return true / false + 123 * ( - - 123 func - 123 } ) ID ( ) { }",
  "func ID ) ID : int , ID : bool ( : bool { return true / false + 123 * ( - - 123 func - 123 } ) ID ( ) { }",
  "func ID ) ID : int , ID : bool ( : bool { return true / false + 123 * ( - - 123 func - 123 } ) ID ( ) { }",
  "func ID ( ) { var ID : bool ( ID ) = ( true and ( ( false ) ) and ID ) }",
  "func ID ( ) { var ID ( bool ( ID ) = ( true and ( : false ) ) and ID ) }",
  "{ ID ( ) func var ID ( bool ( ID ) = ( true and ( : false ) ) and ID ) }",
  "func ID ( ID : bool ) { var ID : int return ( ID ( [ ( - ID ) ] [ - 123 ] ) ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int return ( ID ( [ ( - ID ) ] [ - 123 ] ) ) } func ID ( ) { }",
  "func ID ( return : bool ) { var ID : int ID ( ID ( [ ( - ID ) ] [ - 123 ] ) ) } func ID ( ) { }",
  "func ID int ID : int , ID : ( ) : int { while - false * ( false - - ID + ID ) { } print - ID }",
  "func ID * ID : int , ID : ( ) : int { while - false int ( false - - ID + ID ) { } print - ID }",
  "func ID * ID : int , ID : ( ) : int { while - false int ( false ID - ID + - ) { } print - ID }",
  "func ID ( ID : bool ) : int { var ID : bool var ID : bool while 123 * - ID ( ) * 123 { } ID = - ( - ( ( ( ( ) ) ) ) } func ID 123 ) { }",
  "func ID ( ID : bool ) : int { var ID : bool var ID : bool while 123 * - ID ( ) * 123 { } ID = - ( - ( ( ( ( ) ) ) ) } } ID 123 ) { func",
  "func ID ( ID : bool ) : ID { var ID : bool var ID : bool while 123 * - ID ( ) * 123 { } ID = - ( - ( ( ( ( ) ) ) ) } } int 123 ) { func",
  "func ID , ID : int , ID : int ( ID : bool ) { var ID : bool { var ID : [ ] int var ID : int while ( ( - true ) ) { } ID = ( ( 123 ) ) } if ( - - true ) { } }",
  "func ID , : : int , ID ID int ( ID : bool ) { var ID : bool { var ID : [ ] int var ID : int while ( ( - true ) ) { } ID = ( ( 123 ) ) } if ( - - true ) { } }",
  "func ID : : : int , ID ID int ( ID , bool ) { var ID : bool { var ID : [ ] int var ID : int while ( ( - true ) ) { } ID = ( ( 123 ) ) } if ( - - true ) { } }",
  "func ID ( ID : [ : int , ID ] bool ) { var ID : bool var ID : int call ID ( ) }",
  "func ID ( ID : [ : int , ID ] ) bool { var ID : bool var ID : int call ID ( ) }",
  "func ID ( ID : [ : int , ID ] ) bool int var ID : bool var ID : { call ID ( ) }",
  "func ID ( ID : int ) { [ ( - - ID [ ( ID ) ] ) ] int { } func ID ( ) : }",
  "func ID ( ID : int ) ] [ ( - - ID [ ( ID ) { ) ] int { } func ID ( ) : }",
  "func ID ( ID : int ) ] [ ( - - ID [ ( ID ) { ) ] int { } func ID ( ) : }",
  "func ID ( - : bool { var ID : [ ] [ 123 / - ) ( - 123 ) / ( ( 123 ) ) ] [ ] int var ID : [ ] [ ] [ ] bool }",
  "func ID ( - : bool { var ID : [ ] [ 123 / - ) ( - 123 ) / ( ( 123 ) ] ) [ ] int var ID : [ ] [ ] [ ] bool }",
  "func ID ( - : bool ] var ID : [ { [ 123 / - ) ( - 123 ) / ( ( 123 ) ] ) [ ] int var ID : [ ] [ ] [ ] bool }",
  "func ID ( ) : bool { { var ID : int ID [ ( true - ID ) } = ( ID ) print ( 123 ) } ]",
  "func ID ( ) : bool { { var ID : int ID [ ( true - ID ) } = ) ID ( print ( 123 ) } ]",
  "func ID ( ) : bool { { var ID : int ID [ ( true - ) ID } = ) ID ( print ( 123 ) } ]",
  "func ID ( ID : int int ID : int , ID : [ ] [ - - ( 123 * - ( true ) ) ] [ ] , ) { }",
  "func ID ( ID : int int ID : int , ID : [ ] [ - - ( 123 * - ( true ) ) ] [ ] , ) { }",
  "func ID ( ID : int int ID : } , ID : [ ] [ - - ( 123 * - ( true ) ) ] [ ] , ) { int",
  "func ID ( ) { var ID : int var ID : int } ID ( ) call",
  "func ID ( ) { var ( : int var ID : int } ID ID ) call",
  "func ID ( ) { var ( : int var ID : int } ID ID ) call",
  "func ID ( ) int int { var ID : : return ( - ID ( - - false ) ) }",
  "func ID ( ) - int { var ID : : return ( - ID ( int - false ) ) }",
  "func ID ( ID : [ ] [ false + true * true * - - ) ID ) - ( ID ) ] int ( { }",
  "func ID ( ID : [ ] [ ( + true * true * - - ) ID ) - false ID ) ] int ( { }",
  "func ID [ ID : [ ] ( ( + true * true * - - ) ID ) - false ID ) ] int ( { }",
  "func ID ( ID - [ - - ID [ - true / : true and - ID and ID ] ] [ ] int ) { }",
  "func ID ( ID - [ - int ID [ - true / : true and - ID and ID ] ] [ ] - ) { }",
  "func ID ( ID - [ - int ID - [ true / : true and - ID and ID ] ] [ ] - ) { }",
  "func ID ( ) { var ID : [ ] } if ( false * ( true ) * - 123 ) { } } func ID ( ) { int",
  "func ID ( ) { var ID : [ ] } ) ( false * ( true if * - 123 ) { } } func ID ( ) { int",
  "func ID ( ) { var ID : [ ] } ) ( false * ( true if * - 123 ) { } } func ID ( ) { int",
  "func ID ( ID : [ 123 + ID [ ( - - 123 / true ) ] ] ( 123 ) ] ] [ [ int ) { }",
  "func ID ( ID : [ 123 + ( [ ID - - 123 / true ) ] ] ( 123 ) ] ] [ [ int ) { }",
  "func ID - ) : [ ] [ - ( ( - ( 123 * true * 123 ) ) ] [ ] int { }",
  "func ID - ) : [ int [ - ( ( - ( 123 * true * 123 ) ) ] [ ] ] { }",
  "func ID - ) : [ int [ - ( ( - ( 123 * true * ] ) ) 123 [ ] ] { }",
  "func ID ( ) : int { var ID : [ ] [ ] int if true / - ID [ - } ] [ ID ] { } { } ID func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] [ ] [ if true / - ID [ - } ] int ID ] { } { } ID func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] [ ] [ if true / - ] [ - } ] int ID ID { } { } ID func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool if 123 - ( - ( - - ( ID ) ) ) { } { } } func ID } ) { (",
  "func ID ( ) { var ID : bool var ID : bool if 123 - ( ( - - - ( ID ) ) ) { } { } } func ID } ) { (",
  "func ID ( ID : [ true / - - ID [ ID [ ( ID ) ] [ - ID ] ] [ 123 ] ] int ) ) } func ID ( { { }",
  "func ID ( ID : [ true / - - ID [ ID [ ( } ) ] [ - ID ] ] [ 123 ] ] int ) ) ID func ID ( { { }",
  "func ID ( ID : [ true / func - ID [ ID [ ( } ) ] [ - ID ] ] [ 123 ] ] int ) ) ID - ID ( { { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] var ) { int ID : [ ] [ ] bool var ID : [ ( ID ) ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] var ) { int ID : [ ] [ ] bool var ID : [ ( ID ) ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] var ) { int ID : [ ] [ ] bool var } : [ ( ID ) ] int } func ID ( ) { ID",
  "func ] ( ID : [ ID ( ) [ 123 / 123 / - 123 or ID ] ] [ ] [ ID [ ] [ ] int ) { }",
  "func ] ( ID : [ ID ( ) [ 123 / 123 / - 123 or ID ] ] [ ] [ ID [ ] [ ] int ) { }",
  "func ] ( ID : [ ID ( ) [ 123 / 123 / - 123 or ID ] ID [ ] [ ] [ ] [ ] int ) { }",
  "func ID ( ) [ [ ID / ID ( true / false and ID ) ] : ] int { }",
  "func ID ( } [ [ ID / ID ( true / false and ID ) ] : ] int { )",
  "func ID ID ) { var ID : int var ID : bool return ( ( false / ( ) ) }",
  "func ID ID ) { var ID : int var ID : bool return ( ( false / ( ) ) }",
  "func { ID ) ID var ID : int var ID : bool return ( ( false / ( ) ) }",
  "func ID ( ) - [ ID ( : - ( true >= ID ) ) ] bool { }",
  "func ID ( ) - [ ID ( : - ( true >= ID ) ) bool ] { }",
  "func ID ( ) - [ ID ( : - } true >= ID ) ) bool ] { (",
  "func ID ( ID : bool ) : int { } func ID : ID : bool , ID : [ ] int , ID : int ) ( int { var ID : bool }",
  "func ID ( ID : bool ) : int { } func ID : ID : ID , ID : [ ] int , ID : int ) ( int { var bool : bool }",
  "func ID { ID : bool ) : int ( } func ID : ID : ID , ID : [ ] int , ID : int ) ( int { var bool : bool }",
  "func ID ( ) : [ ] int { { var ID int [ ] bool var ID : [ ID ( ) ] : } }",
  "func ID ( ) : [ ] int { { var ID int [ ] : var ID bool [ ID ( ) ] : } }",
  "func ID ( ) : [ ] int { { var ID int [ bool : var ID ] [ ID ( ) ] : } }",
  "[ ID ( ID : int , ID : int , ID : [ ( - ID func false ] ) ] [ ] bool ) { } func ID ( ) { }",
  "[ ID ( ID : int , ID : int [ ID : [ ( - ID func false ] ) ] , ] bool ) { } func ID ( ) { }",
  "[ ID ( ID : int ID ID : int [ ID : [ ( - , func false ] ) ] , ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { var ID : int return false * func ID [ ( ( ( - - ID ) ) ) ] ) } ( ID ( ) { }",
  "func ID ( ID : [ ] bool ) { var ID * int return false : func ID [ ( ( ( - - ID ) ) ) ] ) } ( ID ( ) { }",
  "func ID ( ID : [ ] bool ID { var ID * int return false : func ID [ ( ( ( - - ID ) ) ) ] ) } ( ) ( ) { }",
  "] ID ( ) { return } func ID ( ) { ID [ - 123 <= 123 func = - 123 ID = 123 }",
  "] ) ( ID { return } func ID ( ) { ID [ - 123 <= 123 func = - 123 ID = 123 }",
  "] ) ( ID { return } func ID ( ) { 123 [ - 123 <= 123 func = - 123 ID = ID }",
  "func ID ( ID : [ ] [ ] bool , ID : int , ID : bool ) } var ID : int return - true } func ID ( ) { {",
  "func ID ( ID : [ ] [ ] bool , ID : int , ID : func ) } var ID : int return - true } bool ID ( ) { {",
  "func ID ( ID : [ ] [ ] bool , ID : int , ID : func ) } var ID : int true - return } bool ID ( ) { {",
  "{ ID ( ID : [ ] int , ID : int ) : int { var ID : int if ID [ ID ] [ ( ( - ( ( ( true ) ) ) ) ) ] func } if true { } }",
  "{ ID ( ID : [ ] int , ID : int ) : int { ( ID : int if ID [ ID ] [ var ( - ( ( ( true ) ) ) ) ) ] func } if true { } }",
  "{ ID ( ID : [ ] int , ID : int } : int { ( ID : int if ID [ ID ] [ var ( - ( ( ( true ) ) ) ) ) ] func ) if true { } }",
  "func ID ( ID : [ false ) ( ID ( - ID [ ( true ) ] [ ( - ID ) ] / ) / 123 ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ false ) ( ID ( / ID [ ( true ) ] [ ( - ID ) ] / ) - 123 ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ false ) ( ID ( / ID [ ( true ) ] [ ) - ID ) ] / ( - 123 ] bool ) { } func ID ( ) { }",
  "func ID ) ID : [ ] int , ID : [ ID - ( ID * - true ) - 123 ] int ( { }",
  "func ID ) ID : [ ] int ( ID : [ ID - , ID * - true ) - 123 ] int ( { }",
  "func ID ) ID : [ ] int ( ID : [ ID - , ID * - true ) - 123 ] int ( { }",
  "func ID ( ID == bool , ID : [ true : - ID ( - ID [ - ( true ) ] [ - - - false ] ) ] int ) { }",
  "func ID ( ID == bool , ] : [ true : - ID ( - ID [ - ( true ) ] [ - - - false ] ) ID int ) { }",
  "func ID ( ID == bool , ] : [ true : - ID ( - ID ] - ( true ) [ [ - - - false ] ) ID int ) { }",
  "func ID ( ID : [ ID ( ) [ * / ID - ID * - 123 ID ID ] ] [ ] int ) { }",
  "func ID ( ID ID [ ID ( ) [ * / ID - ID * - 123 : ID ] ] [ ] int ) { }",
  "func ID ( ID ID [ ID ( ) [ * / ID - ID * - 123 : ID ] ] [ int ] ) { }",
  "func ID ( ID : int { : int ) var ID : int call ID ( ( ID ( - 123 ) ) ) } func ID ( ) { }",
  "func ID ( ID : int { : int ) var ID } int call ID ( ( ID ( - 123 ) ) ) } func ID ( ) { :",
  "ID ID ( ID : int { : int ) var ID } int call func ( ( ID ( - 123 ) ) ) } func ID ( ) { :",
  "func ID ( ID : int ) : ( { while ( - - ID bool ) [ - ID ] ) { } while - ID { } } func ID ( ) { }",
  "func ID ( ID : int ) : ( { while ( - - ID bool } [ - ID ] ) { } while - ID { } } func ID ( ) { )",
  "func ID ( ID : int ) : ( { while ( - - ID bool } [ - ID ] ) { } while - ID { } } func ID ( ) { )",
  "func ID ( ) { : ID var bool print ( ID * ID / - - 123 ) } func ID ( ) { }",
  "func ID ( ) { : ID var bool print ( ID * ID / - - 123 ) } func ID ( ) { }",
  "func ID { ) ( : ID var bool print ( ID * ID / - - 123 ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : ) true / ( ( ( true ) ) [ ] int ) { } func ID ( ) { }",
  "func ) ( ID : bool , ID : ) true / ( ( ( true ) ) [ ] int ) { } func ID ( ID { }",
  "func ) ( ID : bool , ID : ) true ID ( ( ( true ) ) [ ] int ) { } func ID ( / { }",
  "func ID ( ID : [ ] int , ID : [ - ( ID - - - ( ID ) + - - ( ( true ) ) ) ] [ ] bool ) { } func true ( ) { }",
  "func ID ( ID : [ ] int , ID : [ - ( ID - - - ( ID bool + - - ( ( true ) ) ) ] [ ] ) ) { } func true ( ) { }",
  "func ) ( ID : [ ] int , ID : [ - ( ID - - - ( ID bool + - - ( ( true ) ) ) ] [ ] ) ID { } func true ( ) { }",
  "func ID ( ) : [ [ ( ) [ ID ID ( - ID ) ] [ 123 ] ] ] int { }",
  "func ID ( ) : [ [ ( ) [ ID ID ( - ID ) ] [ 123 ] ] ] int { }",
  "func ID ( ) : [ [ ( ) [ ID ID ( - ID ) ] [ 123 ] ] ] int { }",
  "func ID ( ) { int ID : [ - false - ID [ false / ID * - true ] + false ] bool var ID : [ ] var } func ID ( ) { }",
  "func ID ( ) true int ID : [ - false - ID [ false / ID * - { ] + false ] bool var ID : [ ] var } func ID ( ) { }",
  "func ID ( ) true int ID : [ - false - ID } false / ID * - { ] + false ] bool var ID : [ ] var } func ID ( ) { [",
  "func ID ( ) : bool ( return { false / false - - ID ( ) ) } func ID ( ) { }",
  "func : ( ) ID bool ( return { false / false - - ID ( ) ) } func ID ( ) { }",
  "func ) ( : ID bool ( return { false / false - - ID ( ) ) } func ID ( ) { }",
  "func ID : ) ( [ ] [ ( ID / ( - ID ( ) ) / - 123 ) ] bool { }",
  "func ID : ) ( [ ] [ ( ID / ( - ID ( ) ) } - 123 ) ] bool { /",
  "func ID : ) ( [ - [ ( ID / ( - ID ( ) ) } ] 123 ) ] bool { /",
  "func ID ( ID : bool ] bool , ID : bool ) : [ { var ID : int var ID : [ false * - true ] bool } func ID ( ) { }",
  "func ID ( ID : bool ] bool , ID : bool ) : [ { var ( : int var ID : [ false * - true ] bool } func ID ID ) { }",
  "func } ( ID : bool ] bool , ID : bool ) : [ { var ( : int var ID : [ false * - true ] bool ID func ID ID ) { }",
  "func ID ( ID : int , ID : } ) : bool { return ID ( ) [ - ID ] bool",
  "func ID ( ID : int , ID : } ) : bool { return ID ( - [ ) ID ] bool",
  "func ID ( ID : int , ID - } ) : bool { return ID ( : [ ) ID ] bool",
  "func ID ( ID : int ) : bool { var ID : bool var ID : bool call ID ( - false * ( true ) ) } func ID { ) ( }",
  "} ID ( ID : int ) : bool { var ID : bool var ID : bool call ID ( - false * ( true ) ) } func ID { ) ( func",
  "} ID ( ID : int ) : bool { var ID : bool var ID : bool call ID ( - false * ( true ) ) func } ID { ) ( func",
  "func ID ( ) { call ID ( ID ) - ID ( ID ) ( ) if - ( - true ) { } } func ID ( ) { }",
  "func ID ( ) { call ID ( ID ) - ID ( ID ) ( ) if - ( - true ) { } } ) ID ( func { }",
  "func ID ( ) { call ID ( ID ) - ID ( ID ) ( ) if - ( - true ) { } } ) func ( ID { }",
  "func ID ( ID : [ ] ) , ID : [ ID - ID ( - 123 ) - - - - ID ] int bool { } func ID ( ) { }",
  "func ID ( ID : [ ] : , ID ) [ ID - ID ( - 123 ) - - - - ID ] int bool { } func ID ( ) { }",
  "func ID ( ID : [ ] : , ID ) [ ID - ID ( - 123 ) - - - - ID ] int bool { } func ID ( ) { }",
  "func ID ( ) : int { return 123 + ( } ID ( ) [ ID ] [ true ] ) ) ( func ID ( ) { }",
  "func ID ( ) : int { return 123 + ( } ID ( ) [ ID true [ ] ] ) ) ( func ID ( ) { }",
  ": ID ( ) func int { return 123 + ( } ID ( ) [ ID true [ ] ] ) ) ( func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : int { var ID : bool } } func ID ( ) : [ ( ID ) { bool ] }",
  "func ID ( { : int , ID : bool ) { var ID : int { var ID : bool } } func ID ( ) : [ ( ID ) ID bool ] }",
  "func ID ( { : int , ID ( bool ) { var ID : int { var ID : bool } } func ID : ) : [ ( ID ) ID bool ] }",
  "func ID ( ID : bool ) : ) ] [ true - ID ( ID ( ID ) [ + - true ] [ ] [ ] int { }",
  ") ID ( ID : int ) { var ID : [ true - ID / ( - - - ID ) / ( ( ID func ) - false ] bool var ID : bool }",
  ") ID ( ID : int ) { var ID : [ true - ID / ( - - - ID ) / ( ( ID func ) - } ] bool var ID : bool false",
  ") ID ( ID : int ) { var ID : [ true - ID / ( - - - ID ) / ( ( ID func ) - ID ] bool var } : bool false",
  "func ID ( ID : bool , ID : ) int { var ID : int var ID : int ID = ID [ - ( - false ) ] } func ID ( ) { }",
  "func ID ( ID : bool , ID : ) int ] var ID : int var ID : int ID = ID [ - ( - false ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : [ ] [ true ( - - ID / false ) * - ID ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : [ ] [ true ( - - ID / false ) * - ID } int { ] func ID ( ) { }",
  "func ID ( ID : int [ ID : bool ) : [ ] , true ( - - ID / false ) * - ID } int { ] func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool var ID bool [ ] : return false / ID ( - true ) } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool var ( bool [ ] : return false / ID ( - true ) } func ID ID ) { }",
  "func ID ( ID : int ) { var ID : bool var ( bool [ ID : return false / ID ( - true ) } func ] ID ) { }",
  "func ID ( ) : int { var ID : : var ID int int while ID [ ID ( ID ) ] { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : : var ID int ID while ID [ int ( ID ) ] { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : : var ID int ( while ID [ int ( ID ) ] { } } func ID ID ) { }",
  "func ID ( ) : [ ] bool { var ID : [ ] [ ] - true != ( ( ID ) ) ) ( int } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : [ ] [ ] - true != ( ( ID ) ) ) ( int } func ID ( ) { }",
  "func ID ( ( : [ ] bool { var ID : [ ] [ ] - true != ) ( ID ) ) ) ( int } func ID ( ) { }",
  "func ID ( ID : int ) : [ 123 * false + false - ID ) ( ( ID [ ) ] ] int { }",
  "func ID ( ID : int ) : [ 123 } false + false - ID ) ( ( ID [ ) ] ] int { *",
  "func ID ( ID : int ) : [ 123 ] false + false - ID ) ( ( ID [ ) } ] int { *",
  "func ID ( ID : int ) { var ID : int var ID : int print 123 / false * func - ( ID ) } - ID ( ) { }",
  "func ID ( ID : bool { ID : bool , ID : [ ] int ) : bool , }",
  "func ID ( ID : bool { ID : , bool ID : [ ] int ) : bool , }",
  "func ID : ID ( bool { ID : , bool ID : [ ] int ) : bool , }",
  "func ID ( ID : bool , ID : bool , ) : int ) : [ ( ID * - ( ID ) * ( ( 123 ) ) ID ] int { }",
  "func ) ( ID : bool , ID : bool , ) : int ID : [ ( ID * - ( ID ) * ( ( 123 ) ) ID ] int { }",
  "func ) ( ID : bool , ID : bool , ) : int ID : [ ) ID * - ( ID ) * ( ( 123 ) ( ID ] int { }",
  "func ID ( ID : int , ID : [ ] } ) : bool { var ID : bool var ID : bool while ID ( ) { bool }",
  "func ID ( ID : int , ID : [ ] } ) : bool { var ID ID bool var ID : bool while : ( ) { bool }",
  "func ID ( ID : int , bool : [ ] } ) : bool { var ID ID bool var ID : bool while : ( ) { ID }",
  "func ID ( ) : int { bool ID : var if ( - - true + ( true ) ) { } if ID { } } func ID ( ) { }",
  "func ID ( ) : int } bool ID : var if ( - - true + ( true ) ) { } if ID { } { func ID ( ) { }",
  "func ID ( ) : int } bool ID : var if ( true - true + ( - ) ) { } if ID { } { func ID ( ) { }",
  "func ID ( [ { ID [ - true / ( ID ( ( - - true ) ) ) ] ) ID ] = ( ( - ( - false ) ) ) call ID ( ) }",
  "func ID ( [ { ID [ - true / ( ID ( ) - - true ) ) ( ] ) ID ] = ( ( - ( - false ) ) ) call ID ( ) }",
  "func ID / [ { ID [ - true ( ( ID ( ) - - true ) ) ( ] ) ID ] = ( ( - ( - false ) ) ) call ID ( ) }",
  "func ID ( ID : bool , ID : bool ) } [ ] bool { var ID : [ 123 / - true * - - ( true ) ] int var ID : bool : func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) } [ ] true { var ID : [ 123 / - bool * - - ( true ) ] int var ID : bool : func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) } [ ] true { var ID : [ 123 / - bool * - - ( true ) ] int ) ID : bool : func ID ( var { }",
  "func ID ( ) : int / return - - true / - ( true { - ( - ( ( - ID ) ) ) / - - ID ) }",
  "func ID ( ) : - / return - - true / - ( true { - ( int ( ( - ID ) ) ) / - - ID ) }",
  "func ID ( ) : - / return - - true / - ( true { - ( int - ( - ID ) ) ) / - ( ID ) }",
  "func ID * ) { print ID ( - ( - - 123 ( ( - ( - - - ( - ID ) ) ) ) ) }",
  "func ID * ) { print ID ( - ( - - 123 ( ( - ( - - - ( - ID ) ) ) ) ) }",
  "func ID * ) { ) ID ( - ( - - 123 ( ( - ( - - - ( - ID ) ) ) print ) }",
  "if ID ( ID : int , ID : bool , ID : bool ) { var ID : bool func - false == ( ID ) { } ID = - false }",
  "if ID ( ID bool int , ID : : , ID : bool ) { var ID : bool func - false == ( ID ) { } ID = - false }",
  "if ID int ID bool ( , ID : : , ID : bool ) { var ID : bool func - false == ( ID ) { } ID = - false }",
  "func ID ( ID : int , ID : [ ] int ) : int { ID ( ) [ - - ( - ( - true ) ) ] [ - - - - ( ID ) ] = ID ID ( ( false ) } func ID = ) { }",
  "func ID ] ID : int , ID : [ ] int ) : int { ID ( ) [ - - ( - ( - true ) ) ( [ - - - - ( ID ) ] = ID ID ( ( false ) } func ID = ) { }",
  "func ID ] ID : int , ID : [ ] int ) : int { ID ( ) [ - - ( - ( - true ) ) ( - - [ - - ( ID ) ] = ID ID ( ( false ) } func ID = ) { }",
  "func ID ( ) : bool var { ID : bool call ID ( - ( ( true ) ) ) }",
  "func ID ( ) ) bool var { ID : bool call ID ( - ( ( true : ) ) }",
  "} ID ( ) { var ID : bool return func",
  "} ID ( ID { var ) : bool return func",
  "} ID ( ID { var ) : bool func return",
  "func ID func ) : bool { { if ID ( ( true / ID ) ) { } } while false { } } ( ID ( ) { }",
  "func ID func { : bool ) { if ID ( ( true / ID ) ) { } } while false { } } ( ID ( ) { }",
  "func ID ( { : bool ) { if ID ( ( true / ID ) ) { } } while false { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( ID ID - ( [ ) ] [ false ] ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( ID ID - ( [ ) ] [ false ] ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( } ID - ( [ ) ] [ false ] ) ] bool ID func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int ) ID if ID * { [ ( ( ( ( ( 123 ) ) ) ) ) ] [ ID ] / - - ID { } }",
  "func ID ( ID ] int , ID : [ ] int ) ID if ID * { [ ( ( ( ( ( 123 ) ) ) ) ) ] [ ID : / - - ID { } }",
  "func / ( ID ] int , ID : [ ] int ) ID if ID * { [ ( ( ( ( ( 123 ) ) ) ) ) ] [ ID : ID - - ID { } }",
  "func ID ( ) { print ( ID ( ( ID [ - ( - ( ( ID ) ) ) ] ) ) ) call ID ( ) } func false ( ) { }",
  "func ID ( ) { print ( ID ( ( ID [ - ( - ( ( ID ) ) ) ] ) ID ) call ) ( ) } func false ( ) { }",
  "func ID ( ) { print ( ID ( ( ID [ - ( - ( ( ID ) ) ) ( ) ID ) call ) ] ) } func false ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] bool } true / ID [ ( false ) ] [ ( ( true ) ) ] { } while",
  "func ID ( ) { var ID : [ ] [ ] bool [ true / ID [ ( false ) ] } ( ( true ) ) ] { } while",
  "func ID ( ) { var ID : [ ] [ ] bool [ true / ) [ ( false ) ] } ( ( true ID ) ] { } while",
  "func ID ( ID } [ ] [ ID + ID ( ( ID ) ) - ID ] bool ) { :",
  "func ID ( ID } [ ] [ ID + ID ( ( ID ) ) - ID ] bool ) { :",
  "func ID ( ID } [ ] [ ) + ID ( ( ID ID ) - ID ] bool ) { :",
  "func ID ( ID : bool ) { var ID : bool var ID : [ - - true and false * 123 / 123 ] } } func ID ( ) { int",
  "func - ( ID : bool ) { var ID : bool var ID : [ - ID true and false * 123 / 123 ] } } func ID ( ) { int",
  "func ID ( ID : bool ) { var - : bool var ID : [ - ID true and false * 123 / 123 ] } } func ID ( ) { int",
  "func ID ( ID : int ) : [ ) bool { var ID : [ ( ID [ ID ] [ ID ] ] ] bool } func ID ( ) { }",
  "func ID ( ID : int ) : [ ) bool { var ID : [ ( ID [ ID ] [ ID ] ] ] bool } func ID ( ) { }",
  "ID ID ( ID : int ) : [ ) bool { var ID : [ ( ID [ ID ] [ func ] ] ] bool } func ID ( ) { }",
  "func ID ( ID : int ID : int { var ID : int print ( - ( ID ) ) } func ) ( ) { }",
  "func ID ( ID : int ID : int { ( ID : int print var - ( ID ) ) } func ) ( ) { }",
  "func ID ( ID : int ID : int { ( ID : int print var - ( ID ) ) } func ) ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : int call ID ( 123 / - ( false ) ) if - ( ID ) { } } func ID ( { ) }",
  "func ID ( ) : int { var ID : bool var ID : int call ID ( if / - ( false ) ) 123 - ( ID ) { } } func ID ( { ) }",
  "func ID ( ) : int { var ID : bool var ID : int call ID ( if / - ( false ) ) 123 - ( ID ) { } } func ID ( { ) }",
  "func ID ( ID : bool , ID : [ ( ) 123 / ID [ ID ] - ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( ) 123 / ID { ID ] - ] bool ) { } func ID ( ) [ }",
  "func ID ( ID : bool , ID : [ ( ) 123 / ID { ID ] - ] bool ) { } func ID ( ) [ }",
  "func ID ( ID : int ) : bool { var ID : int while true ( * ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : int ) : bool { { ID : int while true ( * ( ID ) ) var } } func ID ( ) { }",
  "func ID ( ID : int ) : bool { { ID : int while true ( * ( ID ) ) var } } func ID ( ) { }",
  "func ID ( ) / var ID : [ ] [ ID [ 123 { ( - - ID ) ] [ ( ( ID ) ) ] ] int var ID : [ ] int }",
  "func ID ( ) / var ID ID [ ] [ ID [ 123 { ( - - : ) ] [ ( ( ID ) ) ] ] int var ID : [ ] int }",
  "func - ( ) / var ID ID [ ] [ ID [ 123 { ( - ID : ) ] [ ( ( ID ) ) ] ] int var ID : [ ] int }",
  "func ID ( ) : bool { var ID : [ ] ID ] [ [ [ ID [ false ] ] ] int }",
  "func ID ( ) : bool { var ID : ] ] ID ] [ [ [ ID [ false [ ] ] int }",
  "func ID [ ) : bool { var ID : ] ] ID ] ( [ [ ID [ false [ ] ] int }",
  "( ID func ) { } func ID ( ) : [ ] bool { while ID ( ( true ) ) { } }",
  "( ID func ) { } func ID ( { : [ ] bool { while ID ( ( true ) ) ) } }",
  "func ID ( ) { var ID : ( ID [ ( ID [ ID ] ) ] ] [ ] [ ] int var ID : int } func ID [ ) { }",
  "func ID ( ) { var ID : ( ) [ ( ID [ ID ] ) ] ] [ ] [ ] int var ID : int } func ID [ ID { }",
  "func ID ( ) { var ID : ( ) [ ( ID [ ID ] ) ] ] [ ] [ ] int var ID : int } func ID [ ID { }",
  "func ID ( ID : bool ) : int ID } func ID ( ID : int ) { return { ( ( ( ( ID ) ) ) ) }",
  "func ID ( ID : bool ) : func ID } int ID ( ID : int ) { return { ( ( ( ( ID ) ) ) ) }",
  "func ID ( ID : bool ) : func ID } int ID ( ID : int ) { return { ( ) ( ( ID ( ) ) ) }",
  "func ID ( ID : [ ] [ ] ) - - - ( ID ( [ * - ID * - ( ( - - ID ) ) ) ] int ) { }",
  "func { ( ID : [ ] [ ] ) - - - ( ID ( [ * - ID * - ( ( - - ID ) ) ) ] int ) ID }",
  "func { ( ID : [ ] [ ] ) - - - ( ID ( [ * - ID * - ( ( - - ID ) ) ) ] int ) ID }",
  "func ID ( ID : bool , ID : int , ID : int int : bool { var ID : int } func ID ( ) : [ ] ) { var ID : [ ] [ ] bool var ID : int }",
  "func ID ( ID : bool , ID : : , ID : int int : bool { var ID : int } func ID ( ) : [ ] ) { var ID : [ ] [ ] bool var ID int int }",
  "func ID ( ID : bool , ID : : , ID : int int : bool { var ID : int } func ID ( ) : [ ] ) { var ID : [ ] [ ] bool var ID int int }",
  "func ID ( - : bool , ID : bool , ID : int ) { var ID : bool var ID : bool if false / - ( ID ( ( ID ) ) ) { } if ID { } }",
  "func ID ( - : bool , ID : : , ID : int ) { var ID : bool var ID bool bool if false / - ( ID ( ( ID ) ) ) { } if ID { } }",
  "func ID ( - if bool , ID : : , ID : int ) { var ID : bool var ID bool bool if false / - ( ID ( ( ID ) ) ) { } : ID { } }",
  "func ID ( 123 { var ID : [ ] int var ID : [ - ID ( ) [ true ] [ ) ] ] [ ] bool }",
  "func ID ( ) { var - : [ ID / ID * ( - - - ( ID - ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ) { var - : [ ID / ID func ( - - - ( ID - ID ) ) ] bool } * ID ( ) { }",
  "ID ID ( ) { var - : [ ID / ID func ( - - - ( ID - func ) ) ] bool } * ID ( ) { }",
  "func ID ] ) : int { var ID : int print ID ( ) [ - 123 / ( ID ) / true ] [ false ( } func ID ( ) { }",
  "func ID ] ) : int { ID ID : int print var ( ) [ - 123 / ( ID ) / true ] [ false ( } func ID ( ) { }",
  "ID ID ] ) : int { ID ID : int print var ( ) [ - 123 / ( func ) / true ] [ false ( } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int , ID : ID , ID : int ) { var int : int while - - false { } call ID ( ) }",
  "func ID ( ID : [ - [ ] int , ID : ID , ID : int ) { var int : int while ] - false { } call ID ( ) }",
  "func ( ( ID : [ - [ ] int , ID : ID , ID : int ) { var int : int while ] - false { } call ID ID ) }",
  "func ID ( ID : [ ID [ - ( ID ( ] ( ( 123 ) ) ) ) - ] int ) { }",
  "func ID ( ID : [ ID [ - ( ID ( ] ( ( 123 ) ) ) ) - ] int ) { }",
  "func ID ( ID : [ ID [ - ( ID ( ] ( ( - ) ) ) ) 123 ] int ) { }",
  "func ID ( ) : [ ] bool { ID [ ID ( ) [ - - ( ID ) ] ] = - true ID = - ID } ) ID ( func { }",
  "func ID ( ) : [ ] bool { ID [ ID ( ) [ - - ( ID ) ] ] = - true ID = - ID } ) ID ( func { }",
  "func ID ( ) : [ ] bool { ID [ ID ( ) [ - - ( ID ) ] ] = - true ID ID - ID } ) = ( func { }",
  "func ID ( ) : int { var ID : [ - ID ( 123 * ( ( { ) ) ) ] bool var ID : [ ] bool } func ID ( ) false }",
  "func ID ( ) : int { var ID : [ - ID ( 123 * ( ( { ) ) ) ] bool var ID : [ ] bool } func ID ( ) false }",
  "func ID ( ) : ) { var ID : [ - ID ( 123 * ( ( { int ) ) ] bool var ID : [ ] bool } func ID ( ) false }",
  "func ID : ) { var ID : int var ID ( int while - ID ( - false * ID * ID ) { } }",
  "func ID : ) { var ID : int var ID ( int while ID ID ( - false * - * ID ) { } }",
  "func ID : ) { var ID : int var ID ( int while ID ID - ( false * - * ID ) { } }",
  "func ID ( ID : [ ] bool , int : int , ID : ID ) : int { var ID : bool return }",
  "func ID ( ID : [ ] bool , int : int , ID ID : ) : int { var ID : bool return }",
  "func : ( ID : [ ] bool , int : int , ID ID : ) : int { var ID ID bool return }",
  "func ID ( ID : [ ] [ true / ( 123 / true < ID ) * false ] [ ] [ ] [ ] func ) { } bool ID ( ) { }",
  "func ID ( ID : [ ] [ true bool ( 123 / true < ID ) * false ] [ ] [ ] [ ] func ) { } / ID ( ) { }",
  "func ID ( ID : [ ] [ true bool ( 123 / true < ID ) * false ] [ ] [ ] [ ] func } { ) / ID ( ) { }",
  "func ID } ID : bool , ID : int , ID : [ ] [ ] bool ) { var ID : bool var ID : int while - ( ID ) { } { } (",
  "func ID } ID : bool , ID : int , ID : [ ] [ ] bool ) { var ID : bool var ID : int while - ( ID ) { } { } (",
  "func ID } ID : bool , ID : int , ID : [ ] [ ] bool ) { var ID : bool var ID : ( while - ( ID ) { } { } int",
  "func ID ( ) { } func ID ( ID : bool , ID : bool bool ID : int ) { var ID : , if ID { } }",
  "func ID ( ) { } func ID ( ID : bool , ID : ID bool bool : int ) { var ID : , if ID { } }",
  "func , ( ) { } func ID ( ID : bool ID ID : ID bool bool : int ) { var ID : , if ID { } }",
  "func / ( ID : [ 123 / - - ( ID ( ) + ID > ID ) ID ( ID ) ] [ ] bool ) { } func ID ( ) { }",
  "func / ( ID : [ ) / - - ( ID ( ) + ID > ID ) ID ( ID ) ] [ ] bool ) { } func ID ( 123 { }",
  "func / ( ID : [ ) / - - ( ID ( ) + ID > ID ) ID ( ID ) ] [ ] bool ) { } func ID ( 123 { }",
  "func ID ( ID : int ID , : int , ID : [ ] bool ) { var ID : [ - ( ( ID ) ) ] int }",
  "func ID ( ID : int ID , : int , ID : [ ] bool ) { var ID : [ - ( ( ID ) ) ] int }",
  "func ID ( int : ID ID , : int , ID : [ ] bool ) { var ID : [ - ( ( ID ) ) ] int }",
  "func ID ( bool : [ ] int ) { var ID : [ ] int var ID : [ ] bool { var ID : ID var ID : [ ] bool } }",
  "func ID ( bool : [ ] int ) { var ID : [ ] int var ID : [ ] bool { var ID : ID var ID : [ ] bool } }",
  "func ID ( bool : [ ] [ ) { var ID : [ ] int var ID : [ ] bool { var ID : ID var ID : int ] bool } }",
  "func ID ( ID : bool ) : bool { var : ID [ - ( false / - false - true ) ] [ ] int } func ID ( ) { }",
  "func ID true ID : bool ) : bool { var : ID [ - ( false / - false - ( ) ] [ ] int } func ID ( ) { }",
  "] ID true ID : bool ) : bool { var : ID [ - ( false / - false - ( ) ] [ func int } func ID ( ) { }",
  "func ID ( ) { { var ID : bool var ID : int ID ( - true * ) - ID 123 = false while ID { } } } func ID ( ) { }",
  "func ID ( ) { { var ID : bool var ID } int ID ( - true * ) - ID 123 = false while ID { } } } func ID ( ) { :",
  "func ID ( ) { { var ID : bool var ID } int ID ( = true * ) - ID 123 - false while ID { } } } func ID ( ) { :",
  "func ID ( ) : bool { var ID : [ ] [ ] [ ] bool var ID : int } true / ID return func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] [ ] [ ] bool var ID : int ID true / } return func ID ( ) { }",
  "func bool ( ID : bool ) { var ID : int var ID : ID ID [ ( ID [ ID ] [ false ] ) ] = - true }",
  "func bool ( ID : bool ) { var ID [ int var ID : ID ID [ ( ID : ID ] [ false ] ) ] = - true }",
  "func bool ( ID : bool ) { var ID ID int var ID : ID ID [ ( [ : ID ] [ false ] ) ] = - true }",
  "func ID ( ) { var ID ( bool var ID : [ ] bool call ID : ) }",
  "func ID ( ) [ var ID ( bool var ID : { ] bool call ID : ) }",
  "func ID ( ) [ var ID ( bool var ID : { ] ) call ID : bool }",
  "func ID ( ID var [ ] bool , ID : bool , ID : int ) : bool { : ID : bool var ID : [ ] [ ] int call ID ( ) { } }",
  "func ID ( ID var [ ] bool , ID ) bool , ID : int : : bool { : ID : bool var ID : [ ] [ ] int call ID ( ) { } }",
  "func ID ( ID var [ ] bool , ID ) bool : ID : int : : bool { : ID : bool var ID , [ ] [ ] int call ID ( ) { } }",
  "func ID ( ID : int , ID - int , ID : [ ID ( ) * 123 / ID ( : ( ( ( false ) ) ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID - int ( ID : [ ID ( ) * 123 / ID ( : ( , ( false ) ) ) ) ] [ ] int ) { } func ID ( ) { }",
  "( ID func ID : int , ID - int ( ID : [ ID ( ) * 123 / ID ( : ( , ( false ) ) ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ID ) : bool { while - 123 - 123 / ID and - ( ( ) { } { } }",
  "func and ID ) : bool { while - 123 - 123 / ID ID - ( ( ) { } { } }",
  "123 and ID ) : bool { while - 123 - func / ID ID - ( ( ) { } { } }",
  "func ID ( ID : [ ] bool , ID : [ - false - - false * ( false ) / false + ID ] bool , ID : } ) { int func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ - false - - false * ( false ) / false + ID ] bool , ID ( } ) { int func ID : ) { }",
  "func ID ( ID : [ ] bool , ID : [ - false - - false * ( false ) / bool + ID ] false , ID ( } ) { int func ID : ) { }",
  "func ID ( ID : [ ] [ true / ID [ - ( - ID ) ] [ 123 ] / ( ( true ) ) ] [ false ] ] [ ID bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ true ] ID [ - ( - ID ) ] [ 123 / / ( ( true ) ) ] [ false ] ] [ ID bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ true ] ID [ - ( - ID ) ] [ 123 / / ( ( true ) ) ] [ false ] ] [ ID bool ) { } func ID ( ) { }",
  "func ID bool ) : ( { var ID : [ ( - ID [ ( ( ID ) ) ] ) ] int var ID : int } func ID ( ) { }",
  "func ID bool ) : ( { var ID : [ ( - ID [ ( ( ID ) ) ] ) ID int var ] : int } func ID ( ) { }",
  "func ID { ) : ( { var ID : [ ( - ID [ ( ( ID ) ) ] ) ID int var ] : int } func ID ( ) bool }",
  "func ID ( ID : [ - ID 123 - / ID ( ID ( ) ) / ID + - ID ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ - ID 123 - / ID ( ID ( ) ) / ID + - ID ] [ ] ] [ int ) { } func ID ( ) { }",
  "func ID int ID : [ - ID 123 - / ID ( ID ( ) ) / ID + - ID ] [ ] ] [ ( ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) : int { { ) ID : bool if ( ID var { } print ( ( true ) ) } } func ID ( ) { }",
  ") ID ( ID : int , ID : bool , ID : int ) : int { { func ID : bool if ( ID var { } print ( ( true ) ) } } func ID ( ) { }",
  ") ID ( ID : int , ID : bool , ID : int ) : } { { func ID : bool if ( ID var { } print ( ( true ) ) int } func ID ( ) { }",
  "func ID ( ID : int , ID : int , - : int ) : [ ] int { var ID : [ ID ( - - ( ID false ) ) ] int var ID : int }",
  "func - ( ID : int , ID : int , - : int ) : [ ] int { var ID : [ ID ( - ID ( ID false ) ) ] int var ID : int }",
  "func - ( ID : int , ID : int , - : int ) : [ var int { var ID : [ ID ( - ID ( ID false ) ) ] int ] ID : int }",
  "func ) ( ID : [ - ( - ID ( ID / ID / false ID ) ] int ) { } func ID ( ) { }",
  "func ) ( ID - [ - ( : ID ( ID / ID / false ID ) ] int ) { } func ID ( ) { }",
  "ID ) ( ID - [ - ( : ID ( func / ID / false ID ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool if - ( - ) ( - - ( ( ID ) - ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool if - ) - ) ( - - ( ( ID ) - ) ) { } } func ID ( ( { }",
  "func ID ( ) { var ID : bool if - ) - ) ( - - ( ( ID ) - ) ) { } } func ID ( ( { }",
  "func ID ( ID : [ ] : ] int , ID : [ ] int ) [ int { }",
  "func ID ( ID : [ ] ] ] int , ID : [ : int ) [ int { }",
  "func ID ( { : [ ] ] ] int , ID : [ : int ) [ int ID }",
  "func ID ( ID var int , ID : int , ID : bool ) : bool { : ID : bool }",
  "func ID ( var ID int , ID : int , ID : bool ) : bool { : ID : bool }",
  "func ID ( var ID int , ID : int , ID : bool ) : bool { : ID : bool }",
  "func ID ( ) : ] ] [ [ int { var ID : int var ID : bool return } func ID ( ) : [ ( - - true ) ] bool { }",
  "func ID bool ) : ] ] [ [ int { var ID : int var ID : bool return } func ID ( ) : [ ( - - true ) ] ( { }",
  "func ID bool ) : ] ] [ [ int { ) ID : int var ID : bool return } func ID ( ) : [ ( - - true var ] ( { }",
  "func ID ( ) ) int { var ID : [ ID ( : [ - ( ID ) ] [ ID ] ] int var ID : [ ] int }",
  "func ID ( ) ) int { var ID : [ ID ( : ] - ( ID ) [ [ ID ] ] int var ID : [ ] int }",
  "func ID ( ) ) int { var ID : [ ID ( : ] - ( ID ) [ [ ID ] ] int var ID int [ ] : }",
  "func ID ( ) ) var ID : bool var ID : int print ID ( { > - ID ( ) }",
  "func ID ( ) ) var ID : bool var ID : int print ID ( { > - ID ( ) }",
  "func ID ( ) ( var ID : bool var ID : int print ID ( { > - ID ) ) }",
  "func ID ( ID : [ ( - ( ( ID [ ID ] ) ) ) ] [ ] } ) { bool",
  ": ID ( ID func [ ( - ( ( ID [ ID ] ) ) ) ] [ ] } ) { bool",
  ": ID ( ID func } ( - ( ( ID [ ID ] ) ) ) ] [ ] [ ) { bool",
  "func ID ( ) { var - : bool var ID : int if ( ( ( - - ID - ( ( 123 ) ) ) ) ) { } }",
  "func ID ( ) { var - : bool var ID : int { ( ( ( - - ID - ( ( 123 ) ) ) ) ) if } }",
  "func ID ( ) { var - : bool ) ID : int { ( ( ( - - ID - ( ( 123 ) ) ) var ) if } }",
  "func ID ( ) : [ - int { var ID : [ - true / - ] 123 * ID ( ) ] int var ID : int } func ID ( ) { }",
  "func ID ( { : [ - int ) var ID : [ - true / - ] 123 * ID ( ) ] int var ID : int } func ID ( ) { }",
  "func ID ( { : [ - int ) ] ID : [ - true / - var 123 * ID ( ) ] int var ID : int } func ID ( ) { }",
  "func ID func ) { var ID : [ ( ID ( ) [ ID / ( false ) / ( ( 123 ) ) ] ) ] bool } ( ID ( ) { }",
  "func ID func ) { var ID : [ ( ID ( ) [ ID / ( ( ) / ( false 123 ) ) ] ) ] bool } ( ID ( ) { }",
  "func ID func ) false var ID : [ ( ID ( ) [ ID / ( ( ) / ( { 123 ) ) ] ) ] bool } ( ID ( ) { }",
  "false ID ( ) : int { var ID : bool print ID [ - ( - ID ) ] [ func ] call ID ( ) }",
  "- ID ( ) : int { var ID : bool print ID [ - ( false ID ) ] [ func ] call ID ( ) }",
  "- ID ( ) : int { var ID : bool print ID [ - ( false ID ) ] [ func ] call ID ( ) }",
  "func ID ( ) : int { var ID : call var ID : int { var ID : bool var ID : int call ID ( - ID ) } int ID ( ) }",
  "func ID ( ) : int { var ID : call var ID : int { var ID : bool int ID : int call ID ( - ID ) } var ID ( ) }",
  "func ID ( ) : int { var ID : call var ID : int { var ID call bool int ID : int : ID ( - ID ) } var ID ( ) }",
  "( ID func ) : int { var ID : [ ] [ ] int call ID ( ) if - ID ( ID ) { } }",
  "( ID func ) : int [ var ID : { ] [ ] int call ID ( ) if - ID ( ID ) { } }",
  "( ID func ) : int [ var ) : { ] [ ] int call ID ( ) if - ID ( ID ID { } }",
  "func ID ( ) : bool ) var ID : [ ] int var ID : int return false / ( ( false { ) }",
  "func ID ( ) : var ) var ID : [ ] int bool ID : int return false / ( ( false { ) }",
  "func ID ( ) : var ) var ID : [ ] int bool / : int return false ID ( ( false { ) }",
  "func ID ( ID : int ) { while ( ( false + } [ false ] [ 123 ] - ( - ID ) ) ) { } while ( ( - ID ) ) { } ID",
  "func ID ( ID : int ) { while ( ( false + } [ false ] [ 123 ] - ( - ID ) ) ) { { while ( ( - ID ) ) } } ID",
  "func ID ( ID : int ) { while ( ( false + } [ false ] [ 123 ] - ) - ID ) ) ) { { while ( ( - ID ) ( } } ID",
  "func ID ( ) { + ID : int var ID : int while 123 var - false * - ID ( ) / ID { } if true { } }",
  "func ID ( ) { + ID : int var ID : int while 123 var - false * - ID ( { / ID { } if true ) } }",
  "func ID ( ) { + ID ID int var : : int while 123 var - false * - ID ( { / ID { } if true ) } }",
  "func ID ( ID : int int ID : [ ] , , ID : bool ) : [ ( ( true ) ) ] [ ] int { }",
  "func ID ( ID : int int ID : [ ] , , ID : bool ) : [ ( ( true ) ) ] [ ] int { }",
  "func ID ( ID : int int ID : [ ] , , ID : bool ) : [ ( ( true ) ) ] [ ] int { }",
  "func ID ( ) { var ID : int var ID : int ID [ ( ) [ - ( 123 ) ] [ ID ] ) ] [ ID ] = ( ( - ID ID ) print ID }",
  "func ID ( ) { var ID : int var ID : int ID [ ( ) [ - ] 123 ) ] [ ID ] ) ] [ ID ( = ( ( - ID ID ) print ID }",
  "func ID ( ) { var ID : ( var ID : int ID [ ( ) [ - ] 123 ) ] [ ID ] ) ] [ ID ( = ( int - ID ID ) print ID }",
  "func ID ( ) { var ID : int var ID : int return ( ID [ ( ( - false ) ) ] [ - - ID ) ] }",
  "func ID ( ) { var ID : int var ID : int return ( ID [ ( ( - false ) ) ] ] - - ID ) [ }",
  "func ID ( ) { var ID : ] var ID : int return ( ID [ ( ( - false ) ) ] int - - ID ) [ }",
  "func - ( ) { if - true / - - ( true > 123 - - ( ID ID ) / ID ) + 123 { } ID = - false } func ID ( ) { }",
  "func - ( ) { if - true / - - ( true > 123 - - ( ID ID ) / ID ) + 123 { } ID = func false } - ID ( ) { }",
  "func ID ( ) { { var ID : int var ID : int if ID [ - print true ] [ 123 ] { } call ID ( ) } - ID } func ID ( ) { }",
  "func ID ( ) { { call ID : int var ID : int if ID [ - print true ] [ 123 ] { } var ID ( ) } - ID } func ID ( ) { }",
  "func ID ( ) { { call ID : int var ID : int if print [ - ID true ] [ 123 ] { } var ID ( ) } - ID } func ID ( ) { }",
  "func ID ( ) { ID - - 123 / ID ( if [ ID ] ) / ( ( ( ( ( true ) ) ) ) ) { } ID = ( false ) } func ID ( ) { }",
  "func ID ( ) { ID - - 123 / ID ( } [ ID ] ) / ( ( ( ( ( true ) ) ) ) ) { if ID = ( false ) } func ID ( ) { }",
  "func [ ( ID : bool , ID : bool ) : int { return ID [ - ( - ID ) ] ID 123 ] } func ID ( ) { }",
  "func [ ( ID : bool , ID : [ ) : int { return ID bool - ( - ID ) ] ID 123 ] } func ID ( ) { }",
  "func [ ID ID : bool , ( : [ ) : int { return ID bool - ( - ID ) ] ID 123 ] } func ID ( ) { }",
  "func ID ( ) { ( 123 + - ( ( 123 + ( - print - false ) ) ) ) } func ID ( ) { }",
  "func ID ( ) { ( 123 + - ( ( 123 func ( - print - false ) ) ) ) } + ID ( ) { }",
  "func ID ( ) ) ( 123 + - ( ( 123 func ( - print - false { ) ) ) } + ID ( ) { }",
  "func ID ( ) ) int { return ( ( - ( - - true : ) ) }",
  ") ID ( ) func int { return ( ( - ( - - true : ) ) }",
  ") ID ( ) func int { return ( ( - ( - - true : ) ) }",
  "func ID ( ) : bool { var ID : int true / ( ( ID / false * ( ID ) ) ) ] int var ID : [ }",
  "func ID ( ) : bool { var ID : int true / ( ( ID / false * ( ID ) ) ) ] int var ID : } [",
  "func ID ( ) : bool { var ID : int true / ( ( ID / : * ( ID ) ) ) ] int var ID false } [",
  "func ID ( ) : int { var ID : [ ID / ) ( ( ( - ( false ) ) - ) * ID ] bool }",
  "func ID ( ) : int { ( ID : [ ID / ) ( ( ( - var false ) ) - ) * ID ] bool }",
  "func ID ( ) : int { ( ID : [ ID / ) ( ) ( - var false ) ) - ( * ID ] bool }",
  "func ID ( true : bool , ID : int , ID : [ ] [ ID + - - 123 and - true and ID ] [ ] int ) { }",
  "func ID ( true : bool , ID : int , ID : [ ] [ ID + - - { and - true and ID ] [ ] int ) 123 }",
  "func ID ( true : bool , ID } int , ID : [ ] [ ID + - - { and - true and ID ] [ ] int ) 123 :",
  "func ID ( ) { call ID ( - ( ( - - ID ( ) ) ) ( } func ID ) ) { }",
  "func ) ( ID { call ID ( - ( ( - - ID ( ) ) ) ( } func ID ) ) { }",
  "func ) ( ID { call } ( - ( ( - - ID ( ) ) ) ( } func ID ) ) { ID",
  "func ID ( ID : bool , ID : [ ] bool ) { var ID : bool var ID : [ ( ( ID ID ) ) ) ] bool } func ( ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) { var { : bool var ID : [ ( ( ID ID ) ) ) ] bool } func ( ( ) ID }",
  "func ID ( ID : ) , ID : [ ] bool ) { var { : bool var ID : [ ( ( ID ID bool ) ) ] bool } func ( ( ) ID }",
  "ID ID ( ) : int { var ID : [ ] int var func : bool while ID ( ) [ ( false ) ] [ - ( ( - ( ( ( ID ) ) ) ) ) ] { } } func ID ( ) { }",
  "ID : ( ) : int { var ID : [ ] int var func ID bool while ID ( ) [ ( false ) ] [ - ( ( - ( ( ( ID ) ) ) ) ) ] { } } func ID ( ) { }",
  "func ID ( ID : [ ID / ID ( ) [ - ID ( ) [ - ID ] [ 123 ] ] true - [ ] ] [ ] [ ] bool ) { }",
  "func ID ( [ : [ ID / ID ( ) [ - ID ( ) [ - ID ] [ 123 ] ] true - [ ] ] ID ] [ ] bool ) { }",
  "func ID ( [ : [ ID / ID ( ) [ - ID ( ) [ - ID ] [ 123 ] ] true - [ ] ] ID ] [ ] bool ) { }",
  "func ID ( ID : int , ID : int , ID } bool ) : bool { var ID : int var ID : int call ID ( ) { var ID : bool var ID : [ ] bool } : func ID ( ) { }",
  "func ID ( ID : : , ID : int , ID } bool ) : bool { var ID : int var ID : int call ID ( ) { var ID : bool var ID : [ ] bool } int func ID ( ) { }",
  "func ID ( ID : : , ID : int , ID } bool ) : bool { var ID : int var ID : int call ID ( ) { var int : bool var ID : [ ] bool } ID func ID ( ) { }",
  "func ID ( ID : ) , ID : [ ] int ) : int { var ID : [ ] [ - false / ( ( ID int ) / true ] int } func ID ( ) { }",
  "func ID ( ID : ) , ID : [ ] int ) : int { var ID : [ ] [ - false / ( { ID int ) / true ] int } func ID ( ) ( }",
  "func ID ( ID : ) , ID : [ ] int ) : int { var ID : ) ] [ - false / ( { ID int ) / true ] int } func ID ( [ ( }",
  "func ID ( ID : bool : ID , int , ID : bool ) : int { var ID : [ - ( ( ( ID ) ) ) ] bool }",
  "func ID ( ID : bool : int , ID , ID : bool ) : int { var ID : [ - ( ( ( ID ) ) ) ] bool }",
  "func ID ( ID , bool : int , ID : ID : bool ) : int { var ID : [ - ( ( ( ID ) ) ) ] bool }",
  "] ID ( ) { ID [ ( ID [ 123 + ID - ( 123 ) func ) ] [ true ] = ID }",
  "] ID ( ID { ID [ ( ) [ 123 + ID - ( 123 ) func ) ] [ true ] = ID }",
  "] ID ( ID [ ID [ ( ) { 123 + ID - ( 123 ) func ) ] [ true ] = ID }",
  "func ID ( ID : int , } : bool , ID : int ) : int { { var ID : int ID }",
  "func ID ( ID : int , } : bool : ID : int ) : int { { var ID , int ID }",
  "int ID ( ID : int , } : bool : ID : int ) : func { { var ID , int ID }",
  "func : ( ID ID int , ID : bool , ID : bool ) : [ ( ( ID ( ) ) ) ] bool { }",
  "func : ( ) ID int , ID : bool , ID : bool ) : [ ( ( ID ( ) ) ID ] bool { }",
  "func : ( ) ID int , ID : bool , ID : bool ) : [ ( ( ID ( ) ) ID ] bool { }",
  "func ID ( ) { var ID : int var ID : [ ] [ ID { ) [ - ID ] [ ( true ) ] ] int } func ID ( ) ( }",
  "func ID ( ] { var ID : int var ID : [ ) [ ID { ) [ - ID ] [ ( true ) ] ] int } func ID ( ) ( }",
  "func ID ( ] { var ID : int var ID : [ ) [ ID { ) [ - ID ] [ ( true ) ] ] int } func ID ( ) ( }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var ID : int var ID : bool } ( - ( ID ) ) { } while func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var ID : int var ID : bool } ( - ( ID ) ) { } while func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var } : int var ID : bool } ( - ( ID ) ) { ID while func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int : ID var bool }",
  "func ID ( ID : var ) { var ID : int : ID int bool }",
  ": ID ( ID func var ) { var ID : int : ID int bool }",
  "func ID ( ) { var ID : bool { var int : ID var ID : bool while 123 + true / ( ( 123 ) ) + - ID { } } if 123 { } }",
  "func ID ( ) { var ID : bool { ID int : ID var var : bool while 123 + true / ( ( 123 ) ) + - ID { } } if 123 { } }",
  "func ID ( ) { var ID : bool { ID int while ID var var : bool : 123 + true / ( ( 123 ) ) + - ID { } } if 123 { } }",
  "func ID ( ) { ( ID * false * ID - ( ID if ) ) { } }",
  "func ID } ) { ( ID * false * ID - ( ID if ) ) { } (",
  "( ID } ) { ( ID * false * ID - ( ID if ) ) { } func",
  "func ID ( ) { var ID : bool var ID ) bool ID = ( - 123 != - ( ID ) : } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID ) bool ID = ( - 123 != - ID ( ) : } func ID ( ) { }",
  "func ID ) ( { var ID : bool var ID ) bool ID = ( - 123 != - ID ( ) : } func ID ( ) { }",
  "func ID ( ID : - ) : int { var ID : bool var ID : int if ID / int ID ( ) * - false { } }",
  "func ID ( ID : - ) : int { var ID ID bool var ID : int if ID / int : ( ) * - false { } }",
  "func ID ( ID * - ) : int { var ID ID bool var ID : int if ID / int : ( ) : - false { } }",
  "func ID ( ID : [ ID ( - - ID [ false / false false * ] ) ] int ) { }",
  "func ID ( ID : [ ID ( - - ID [ false / * false false ] ) ] int ) { }",
  "func ID ( ID : [ ID ( - - / [ false ID * false false ] ) ] int ) { }",
  "func ID ( ID : ) ] bool , ID : int [ : int { var ID : int var ID : int }",
  ": ID ( ID : ) ] bool , ID : int [ : int { var ID func int var ID : int }",
  ": ID ( ID : ) ] bool , ID : int [ func int { var ID : int var ID : int }",
  "func ID ( ) { var ID : bool var ID ID int if 123 - ( - - 123 ) + : { } }",
  "func ID ( ) { var ID : bool { ID ID int if 123 - ( - - 123 ) + : var } }",
  "func ID ( 123 { var ID : bool { ID ID int if 123 - ( - - ) ) + : var } }",
  "func ID ( ID : ] , ID : [ ID ( ) [ - true - ID [ ID ] + ID ] [ ID ] bool [ ] int , ID : [ ] [ ] bool ) { }",
  "func ID ( ID [ ] , ID : : ID ( ) [ - true - ID [ ID ] + ID ] [ ID ] bool [ ] int , ID : [ ] [ ] bool ) { }",
  "func ID ( ID [ ] , ID : : ID ( ) ID - true - ID [ [ ] + ID ] [ ID ] bool [ ] int , ID : [ ] [ ] bool ) { }",
  "func ID ( ID : [ ] int , ID : bool , ID : bool ) { var ID : int var ID : bool if ID { ( } func ID } ) { }",
  "func ID ( ID : [ ] int , ID : bool , ID : bool ) { var ID : int var ID : bool if ID { ( } func ID } ) { }",
  "func ID ( ) : [ ] bool { print false * ( ID ( ( - ( - ) 123 ) ) ) ) * ( - true ) call ID ( - }",
  "func ID ( ) : [ ] bool { print false * ( ID ( ( - ( - ) 123 ) ) ) ) * true - ( ) call ID ( - }",
  "bool ID ( ) : [ ] func { print false * ( ID ( ( - ( - ) 123 ) ) ) ) * true - ( ) call ID ( - }",
  "func ID ( ) { call - ( ) print ID ( - ID - false / - false / - - ID + - - true ) }",
  "func ID ( ) { call - ( ) print ID ( - ID - false / - false - - - ID + / - true ) }",
  "func ID ( ) { call - ( ) print ID ( - ID - false / - false - - - ID + / - true ) }",
  "func ID ( ID : int , ID : [ ] int ) { while ( - ( false ) } { } { } ) func ID ( ) { }",
  "func ID } ID : int , ID : [ ] int ) { while ( - ( false ) } { } { } ) func ID ( ) { (",
  "func ID } ID : int , ID : [ ] int ) { while ( - ( false ) } { } } { ) func ID ( ) { (",
  "func ID ( ) { ID ( ) [ true / - ( / ( - 123 ( ( - - 123 ) ) ) ) ] [ ID ] = 123 }",
  "func ID ( } { ID ( ) [ true / - ( / ( - 123 ( ( - - 123 ) ) ) ) ] [ ID ] = 123 )",
  "func ID ( } { ID ( ) [ true / - ( / ( - 123 ( ( - - 123 ) ) ) ) ] [ ID ] = 123 )",
  "func ID ( ) { var ID : int } ID : bool if - ( true / ( ( true ) ) / false ) { var { } } func ID ( ) { }",
  "func ID ( ) { var ID : int } ID : bool if - ( true / ( ( true } ) / false ) { var { ) } func ID ( ) { }",
  "func ID ( ) { var ID ) int } ID : bool if - ( true / ( ( true } ) / false : { var { ) } func ID ( ) { }",
  "func ID ( ) : [ ] [ * int { var ID : [ false ] ( ID [ - ID ] ) ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) : [ ] [ * int { var ID : [ false ] ( ID [ - ID ] : ] int var ID ) bool } func ID ( ) { }",
  "func ID ( ) : [ ] [ * int { var ID : [ false ] ( ID [ - ID ] : ] int var ID { bool } func ID ( ) ) }",
  "func ID ( ) : int { var ID : int var ID : bool ID ( ) [ true + ID } - false ] - - - - ID ] [ - - - true ] = ( ( - - - false ) ) call ID ( ) [",
  "func ID ( ) : int { var ID : int var ID : bool ID ( ) [ true + ID } - false ] - - - - ID ] [ - - - true ] = ( ( - - - false ) ) call ID ( ) [",
  "func ID ( ) : int { var ID : - var ID : bool ID ( ) [ true + ID } - false ] - - - - ID ] [ - int - true ] = ( ( - - - false ) ) call ID ( ) [",
  "func ID ( ) : bool { ID [ ( ID [ true + - ID + true ] [ ( 123 ) ] ) } [ - - - 123 ] = 123 while ( ID ) { } ]",
  "func = ( ) : bool { ID [ ( ID [ true + - ID + true ] [ ( 123 ) ] ) } [ - - - 123 ] ID 123 while ( ID ) { } ]",
  "func = ( ) : bool { ID [ ( ID [ true + - ID + true ] - ( 123 ) ] ) } [ - [ - 123 ] ID 123 while ( ID ) { } ]",
  "func ID [ ) : [ true * - ID ( ) ( ID ( 123 ) ] ] [ ] bool { }",
  "func ID [ ) : { true * - ID ( ) ( ID ( 123 ) ] ] [ ] bool [ }",
  "func ID [ ) : { true * - ID ( ) ( ID ( 123 ] ] ) [ ] bool [ }",
  "func ID ( ID : bool ( : int { var ID : int print ID * - - ID ( ID ) / - ) - ID ) } func ID ( ) { }",
  "ID func ( ID : bool ( : int { var ID : int print ID * - - ID ( ID ) / - ) - ID ) } func ID ( ) { }",
  "ID func ( ID : bool ( func int { var ID : int print ID * - - ID ( ID ) / - ) - ID ) } : ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ ] [ false / 123 * - false ( + ( true ) ) + ( 123 ) ] [ ] bool ) { }",
  "func ID ( ID : [ ] int , ID : [ ] [ false / 123 ( - false ( + ( true ) ) + * 123 ) ] [ ] bool ) { }",
  "func ID ( ID 123 [ ] int , ID : [ ] [ false / : ( - false ( + ( true ) ) + * 123 ) ] [ ] bool ) { }",
  "func ID ( ID : { , ID : [ false / ID [ - false * - ID ] [ false ] * - - ( - true ) ] [ ] [ ] int ) int }",
  "func [ ( ID : { , ID : ID false / ID [ - false * - ID ] [ false ] * - - ( - true ) ] [ ] [ ] int ) int }",
  "func [ ( ID : { , false : ID false / ID [ - false * - ID ] [ ID ] * - - ( - true ) ] [ ] [ ] int ) int }",
  "func ID ( ) : int } var ID : bool var ID : [ ] int if ( ( - ID ) ) { { { } }",
  "func ID ( ) : int } var ID : bool var ID : [ ] int { ( ( - ID ) ) { if { } }",
  "func ID ( ) : int } var ID : ) var ID : [ ] int { ( ( - ID bool ) { if { } }",
  "func ID ( : ID int , ID : bool , ID : bool ) : [ ] bool { var ID : int var ID : bool }",
  "func ID ( : ID int , ID : ID , bool : bool ) : [ ] bool { var ID : int var ID : bool }",
  "func ID ( : ID int , ID : ID , bool : bool ) : [ ] bool { var ID : int var ID : bool }",
  "func ID ( ) : int { var ID : bool ( ID : [ ] [ ] [ var ID ( ) ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool ( ID ) [ ] [ ] [ var ID ( ) ) ] [ ] bool } func ID ( : { }",
  "func ID ( ) : int { var ID : bool func ID ) [ ] [ ] [ var ID ( ) ) ] [ ] bool } ( ID ( : { }",
  "func ID ( ID : bool , ID : [ - - - ID ( ID [ true ] bool ID ] ) ] [ ] [ , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - - - ID ( ID [ true ] bool ID ] ) ] [ ] [ , ID : [ ] bool ) { ID func } ( ) { }",
  "func ID ( ID : bool , , : [ - - - ID ( ID [ true ] bool ID ] ) ] [ ] [ ID ID : [ ] bool ) { ID func } ( ) { }",
  "func ID ( ID : [ ( bool ) : [ 123 - 123 / ID - ID [ ] ID ) ] ] int { } func ID ( ) { }",
  "func ID ( ID : [ ( bool ) : [ 123 - 123 / ] - ID [ ] ID ) ID ] int { } func ID ( ) { }",
  ": ID ( ID : [ ( bool ) func [ 123 - 123 / ] - ID [ ] ID ) ID ] int { } func ID ( ) { }",
  "func ID ( ID : bool } ID : [ - true - ID [ 123 / - - false ] ] bool ) { } func ID ( ) { ,",
  "func ID ( ID : bool } ID : [ - true - ID [ 123 / - - false ] ] bool ) { } func ID ( ) { ,",
  "func ID ( ID : bool } ID : [ - true - ID [ 123 / - - false ] } bool ) { ] func ID ( ) { ,",
  "func { ( ) { while - - - ( - true / ID < ID ) { } ID } }",
  "func { ( ) { while - - - ( - true / ID < { ) ID } ID } }",
  "func { ( ) { while ) - - ( - true / ID < { - ID } ID } }",
  "func ID ( ) } var ID : int } func ID ( ) { var ID : bool var ID : bool ID ( false ) = ( false ) call ID ( ) {",
  "func ID ( ) } var ID : int } func ID ( ) { var ID : ( var ID : bool ID bool false ) = ( false ) call ID ( ) {",
  "func ID ( ID } var ID : int } func ID ( ) { var ID : ( var ID : bool ID bool false ) = ( false ) call ) ( ) {",
  "func ID ( ) { var ID : [ return bool var ID : int ] 123 * - - ID [ ID ] [ false ] / - ID }",
  "func [ ( ) { var ID : [ return bool var ID : int ] 123 * - - ID ID ID ] [ false ] / - ID }",
  "ID [ ( ) { var ID : [ return bool var ID : int ] 123 * - - func ID ID ] [ false ] / - ID }",
  "func ID ( ) { var ID : [ ] ID print - - ( true / - - ( 123 ) ) call int ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] ID print - - ( true / int - ( 123 ) ) call - ( ) } func ID ( ) { }",
  "func ID ( ( { var ID : [ ] ID print - - ( true / int - ) 123 ) ) call - ( ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) : bool { print true } ( ( ID ) ) * false * func ID ( ) { }",
  "func ID ( ID : [ ] bool ) : bool { true print } ( ( ID ) ) * false * func ID ( ) { }",
  "func ) ( ID : [ - ID ( ) * 123 or ID [ ID ] [ ID ] or - ( false ) ] bool ID { }",
  "func ) ( ID : [ - ID ( ) * 123 or ID [ ID ] [ ID ] or - ( false ) ] bool ID { }",
  "func ) ( ID : [ - ID ( ) * 123 or ID [ ID ] [ ID bool or - ( false ) ] ] ID { }",
  "func ID ( ) : [ ID and ID ( ) * false func 123 == ( ( ID ) ) and false ] [ ] bool { } / ID ( ) { }",
  "func ID ( ) : [ ID and ID ( ) * ID func 123 == ( ( ID ) ) and false ] [ ] bool { } / false ( ) { }",
  "func ID ( ) : [ ID and ( ( ) * ID func 123 == ( ( ID ) ) and false ] [ ] bool { } / false ID ) { }",
  "func ID ( ) { print false / 123 ( ( ( - ( false ) ) ) { } } func ID * ) { }",
  "func ID ( ) { print false / 123 ( ( ( - ( false ) ) ) { } } func ID { ) * }",
  "func ID ( ) { / false print 123 ( ( ( - ( false ) ) ) { } } func ID { ) * }",
  "func ID ( ID : ID ) : int { if ID ( ( ID ( ) ) ) { } } func int ( ) { }",
  "func ID ( ID : ID ) : { { if ID ( ( ID ( ) ) ) int } } func int ( ) { }",
  "func ID ( ID : ID ) : { { if ID ( ( ID ( ) ) ) int int } func } ( ) { }",
  "func ID ( ID : [ ( ID } - - - ( false ) and false ) ] [ ] bool ) { and",
  "func ID ( and : [ ( ID } - - - ( false ) and false ) ] [ ] bool ) { ID",
  "func ID ( and { [ ( ID } - - - ( false ) and false ) ] [ ] bool ) : ID",
  "func ID ( false : int ) { var ID : bool return 123 / ID [ - ( ID ) ] * ID } func ID ( ) { }",
  "func ID ( false : int ) { var ID return bool : 123 / ID [ - ( ID ) ] * ID } func ID ( ) { }",
  "func ID ( false : int ) { var ID return bool : 123 / ID [ - ( ID ) ) * ID } func ID ( ] { }",
  "func ID ( ) { return - true + 123 / ( } func ID 123 ) : bool { var ID : int var ID : int }",
  "} ID ( ) { return - true + 123 / ( func func ID 123 ) : bool { var ID : int var ID : int }",
  "} ID ( ) { return - true + 123 / ( func func ID : ) 123 bool { var ID : int var ID : int }",
  "func ID ( ) { var ID : [ - true * ID [ 123 / - ID ] [ 123 ] ) ( - ( 123 ) * ] [ ] int var ID : bool }",
  "func ID ( ) { var ID : [ - true * ID [ 123 / - ID ] [ 123 ] ) ( - ( 123 ) * ] [ ] int var ID : bool }",
  "func ID ( ) { var ID : [ - true * ID [ 123 / - ID ) [ 123 ] ) ( - ( 123 ] * ] [ ] int var ID : bool }",
  "func ID - ID : [ ID ( ( - ( ( 123 ) ) ) ] int ) { }",
  "func ID - ID : [ ID ( ( - ( ( 123 ) ) ) int ] ) { }",
  "func ID - ID : ( ID ( ( - [ ( 123 ) ) ) int ] ) { }",
  "func ID ( ) : : { } func ID ( ID : [ ] bool , ID bool int , ID : int ) : [ ] bool { var ID : int var ID : [ ] bool }",
  ": ID ( ) : : { } func ID ( ID : [ ] bool , ID bool int , ID : int ) func [ ] bool { var ID : int var ID : [ ] bool }",
  ": ID ( ) : : { } func ID ( ID : [ ] bool , ID bool int , : ID int ) func [ ] bool { var ID : int var ID : [ ] bool }",
  "func ID ( } : int , ID : [ ID ( true / ID ( ) - - false ) ] [ ] bool ) { ID func ID ( ) { }",
  "bool ID ( } : int , ID : [ ID ( true / ID ( ) - - false ) ] [ ] func ) { ID func ID ( ) { }",
  "bool ID ( } : int , [ : ID ID ( true / ID ( ) - - false ) ] [ ] func ) { ID func ID ( ) { }",
  "ID func ( ID : int ) { var ID : bool print ID ( ) * - ( 123 ) }",
  "ID func ( ID : int ) { var ID : bool print ID ( ) * - ( 123 ) }",
  "func ID ( ) { ID = ( } / true + true and - false ) false",
  "func ID ( ) { true = ( } / true + ID and - false ) false",
  ") ID ( func { true = ( } / true + ID and - false ) false",
  "func ID ( ID : bool ) { var ID : int var : ID int }",
  "func bool ( ID : ID ) { var ID : int var : ID int }",
  "func bool ( ID : ID ) : var ID : int var { ID int }",
  "func ID ( ) : int , ID : int ID { call ID ( 123 / - 123 / ( ID ) ) } func ID ( ) { }",
  "func ID ( ) : int / ID : int ID { call ID ( 123 / - 123 , ( ID ) ) } func ID ( ) { }",
  "func ID ( ) : int / ID : int ID { call ID ( 123 / - 123 , ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ] int ) { var ID : bool call ID ( ) print false - }",
  "int ID ( ID : int , ID : [ ] [ ] func ) { var ID : bool call ID ( ) print false - }",
  "int ID print ID : int , ID : [ ] [ ] func ) { var ID : bool call ID ( ) ( false - }",
  "func ID ( ) { var ID : bool var ID ) bool return } func ID ( ID : int , ID : [ ] [ - ( false ) ] bool : { }",
  "func ID ( ) { false ID : bool var ID ) bool return } func ID ( ID : int , ID : [ ] [ - ( var ) ] bool : { }",
  "func ID ( ) { false ID : bool var ID ) bool return } func ID ( ID : int , ID : [ ] [ - ( var ) ] bool : { }",
  "func ID ( ) { var ID : [ ( ID ( ) and ID ( ) and 123 ) ] ) var ID : int } func ID ( bool { }",
  "func ID ( ) { var ID : [ ( ID ( ) and ID ( ) } 123 ) ] ) var ID : int and func ID ( bool { }",
  "func ID ( ID : bool , ID : bool , ID : [ ID ( ) [ ( - ( ( - - ( - ( ID ) { ) ) ) ] [ ID ] ] int ) { } func ID ( ) ) }",
  "func ID ( ID : ( , ID : bool , ID : [ ID ( ) [ ( - bool ( - - ( - ( ID ) { ) ) ) ] [ ID ] ] int ) { } func ID ( ) ) }",
  "func ID ( ID : ( , ID ] bool , ID : [ ID ( ) [ ( - bool ( - - ( - ( ID ) { ) ) ) ] [ ID ] : int ) { } func ID ( ) ) }",
  "func ID ( ID : bool , ID : [ true / ID ( ) * ( ( - 123 ) ) 123 / ID ] bool , ID : bool ) { }",
  "func ID ( ID : bool , ( : [ true / ID ( ) * ID ( - 123 ) ) 123 / ID ] bool , ID : bool ) { }",
  "func ID ( ID : bool , ( : [ true / ID ( ) * ID , - 123 ) ) 123 / ID ] bool ( ID : bool ) { }",
  "func ID ( ID : int , ID : bool , ID { bool ) { return 123 + true + false * - 123 } func ID ( ) : }",
  "func ID ( ( : int , ID : bool , ID { bool ) { return 123 + true + false * - 123 } func ID ID ) : }",
  "func ID ( ( : int , ID : bool , ID { bool ) { return 123 true + + false * - 123 } func ID ID ) : }",
  "func ID ( ) : bool { { var ID : [ true / - ID ( ID ) ] bool } if ( - ) { } }",
  "func ID ID ) : bool { { var ID : [ true / - ( ( ID ) ] bool } if ( - ) { } }",
  "func ID ID ) : bool { { var [ : ID true / - ( ( ID ) ] bool } if ( - ) { } }",
  "func ID ( ) : [ ] int { - ID : bool var ID : bool print 123 * ( var ID ) * ID } func ID ( ) { }",
  "func ID ( ) : [ ] int { - ID : bool var ID : bool print 123 * ( var ID ) * ) } func ID ( ID { }",
  "func ID ( ) : [ ] int { - ID : bool var ID print bool : 123 * ( var ID ) * ) } func ID ( ID { }",
  "func ID ( ID : bool ) var bool { } func ID ( ) : bool { : ID : [ ] int while true { } }",
  "func : ( ID : bool ) var bool { } func ID ( ) ID bool { : ID : [ ] int while true { } }",
  "func : ( ID : bool ) var bool { } func ID while ) ID bool { : ID : [ ] int ( true { } }",
  "func ) ( ID : [ ID - ( ( ( ID ) ) ID ] [ ] [ ] [ ] int ) { }",
  "func ) ( ID : [ ID - ( ( ( ID ) ) ID ] [ ] [ ] [ ] int ) { }",
  "func ) ( ID : [ ID - ( ( ( ID ) ) ID ] [ ] [ ] [ ] int ) { }",
  "func ID ( ) : bool { var ID : [ ] int var ID : / call ID ( ID int ( 123 ) * false ) }",
  "func ID ( ) : bool { var ID : ) ] int var ID : / call ID ( ID int ( 123 ) * false [ }",
  "func ID ( ) : bool ID var ID : ) ] int var ID : / call ID ( { int ( 123 ) * false [ }",
  "{ ID ( ID : [ ( ID ( ) * ID [ - 123 ] [ ID ] ) ] bool ) func }",
  "{ ID ( ID : [ ( ID ( ) * ID [ - 123 ] [ ID ] ) bool ] ) func }",
  "{ ID ( ID : [ ( ID ( ) * ID ) - 123 ] [ ID ] ) bool ] [ func }",
  "func ID ( ID : [ ] int ( ID : [ - ( ID [ , ( ID ) ) ] [ ( ID ) ] ) ] [ ] int ) { }",
  "func ID ( ID : [ ] int ( ID : [ - ( ID [ , ( ID ) ) ] [ ( ID ) ] ) ] [ ] int ) { }",
  "func ID ( ID : [ ] int ( ID : [ - ( ID [ , ( { ) ) ] [ ( ID ) ] ) ] [ ] int ) ID }",
  "func ID ( ID : int ) : } { print ( true / ID [ ( 123 ) ] / ID ) int",
  "func int ( ID : int ) : } { print ( true / ID [ ( 123 ) ] / ID ) ID",
  "func int ( ID : int ) : } 123 print ( true / ID [ ( { ) ] / ID ) ID",
  "func ID ( ID : int , ID : int ) : int { var ID true int call ID ( ) while ID [ ( : ) ] [ - ( 123 ) ] { } }",
  "func ID ( ID : int , ID : int ) : int { var ID true int call ID ( ) while ID [ ( : ) ] [ - ( 123 ) ] { } }",
  "func ID ( ID , int : ID : int ) : int { var ID true int call ID ( ) while ID [ ( : ) ] [ - ( 123 ) ] { } }",
  "func ID ( ID : bool , ID : bool , ID ID int ) { var ID : bool return ( : * ID / ( 123 ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID ID ( ) { var ID : bool return int : * ID / ( 123 ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID ID ( ) { var ID : bool return int : * ID / ( 123 ) ) ) func ID ( } { }",
  "func ID ( ID ( int ) : bool { var ID : [ true or : ( ID ) ) ] int var ID : [ ] int }",
  "func ID ( ID ( int ) : bool { ID ID : [ true or : ( ID ) ) ] int var var : [ ] int }",
  "func ID ( ID ( int ) : : { ID ID bool [ true or : ( ID ) ) ] int var var : [ ] int }",
  "func ID ) ) { print ID ( ) [ - - 123 - ID [ ID ] [ - 123 ] ] [ ( ID ( ] while ( 123 ) { } } func ID ( ) { }",
  "123 ID ) ) { print ID ( ) [ - - func - ID [ ID ] [ - 123 ] ] [ ( ID ( ] while ( 123 ) { } } func ID ( ) { }",
  "123 ID ) ) { print ID ( ) [ - - func - ID [ ID ] [ ] 123 ] ] [ ( ID ( - while ( 123 ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID int [ ] int var ID : : print ID - ID if - ID { } }",
  "func ID ( ID : bool ) : int { var ID int [ ] int var ID : } print ID - ID if - ID { : }",
  "func ID ( ID : bool ) : int { var ID int [ ] int var ID : } { ID - ID if - ID print : }",
  "func ID ( ID : bool ) : [ true / - ID [ ( 123 * true / true ) ] [ ID ] ) [ ] bool { } func ID ( ] { }",
  ") ID ( ID : bool func : [ true / - ID [ ( 123 * true / true ) ] [ ID ] ) [ ] bool { } func ID ( ] { }",
  ") ID ( ID : true func : [ true / - ID [ ( 123 * true / bool ) ] [ ID ] ) [ ] bool { } func ID ( ] { }",
  "func ID ( ) { var ID : { return false / - ( - - ( ID ) ) } func ID ( ) bool }",
  "func ID ( ) { var ID : { return false / - ( - - ( ID ID ) } func ) ( ) bool }",
  "func ID ( ) { var ID : { return false / - ID - - ( ( ID ) } func ) ( ) bool }",
  "func ID ( ID [ : ] int , ID : int ) { return }",
  "func ID ( ID [ : ] int ID , : int ) { return }",
  "func ID ( ID [ : ] int ID int : , ) { return }",
  "func ( ID ) { var ID : int call ID ( ) while ID ( ( ID ) ) { } }",
  "func ( ID ) { var ID : int ) ID ( ) while ID ( ( ID call ) { } }",
  "func { ID ) { var ID : int ) ID ( ) while ID ( ( ID call ) ( } }",
  "func ID ( ) : [ ] bool { if - - ( - ID 123 ( ) ) { } } func ID ( ) { }",
  "func ID ( ) : [ ] bool { if - - ( - ID 123 ( ) ) { } } func ID ( ) { }",
  "func ID ( ) : int { ID ( ) = - - true * 123 / ( - - ) ( - ID ) ) ( }",
  "func ID ( ) : int { ID true ) = - - ( * 123 / ( - - ) ( - ID ) ) ( }",
  "func ID ( ) : int { ID true ) = - - ( * 123 / ( - - ) ( - ID ) ) ( }",
  "func ID ( [ : ) 123 * - 123 / ID [ 123 * ID * false ] ] bool { }",
  "func ID ( [ : ) 123 * - 123 / ID [ 123 * bool * false ] ] ID { }",
  "func ID ( [ : ) 123 * - 123 / false [ 123 * bool * ID ] ] ID { }",
  "func ID ( ID : int ( ( true ) / 123 * ( false ) ) ] [ ) { } func ID ( ) { }",
  "func ID ( ID ] int ( ( true ) / 123 * ( false ) ) : [ ) { } func ID ( ) { }",
  "func ID [ ID ] int ( ( true ) / 123 * ( false ) ) : ( ) { } func ID ( ) { }",
  "func ID ( ) { var ID } int while ID * ID ( ) [ ( - false ) ] [ ID ] / ( - - ( - ID ) ) { } if 123 { } } func ID ( ) { :",
  "func ID ( ) : bool { ( ID : bool { var ID : [ ( - ( ID ) ) ] int var ID : bool } } func ID var ) { }",
  "func ID ( ) : bool { ( ID : bool { var ID : [ ( - ( ID ) ) ] int var ID : bool ) } func ID var } { }",
  "func ID ( ) : bool { ( ID : bool { var ID : [ ( - ( ID ) ) ] int var ID : bool ) } func ID var } { }",
  "func ID { ID : [ ] int , ID : [ ID [ ( - true ) ] [ ID ] ] bool , ID : int ) { } func ID ( ) ( }",
  "func ID { ID : [ ] int , ID : [ ID [ ( - true ) ] [ ID ] ] bool , ID : int ) { } func ID ( ) ( }",
  "( ID { ID : [ ] int , ID : [ ID [ ( - true ) ] [ ID ] ] bool , ID : int ) { } func ID func ) ( }",
  "func ID ( ID : bool , ID : [ ] bool ) : bool { var ID : [ ID [ true ] [ ID ] ] [ ] bool var ID } [ ] bool :",
  "func ID ( ID : bool , ID : ] ] bool ) : bool { var ID : [ ID [ true ] [ ID ] ] [ [ bool var ID } [ ] bool :",
  "func ID ( ID : bool , ID : ] ] bool ) : bool { var var : [ ID [ true ] [ ID ] ] [ [ bool ID ID } [ ] bool :",
  "func int ( ID : ID ) : [ ] int { var ID : bool }",
  ": ID ( ) { var ID func [ - true * ( - ID ( ) [ ID ] ) * - false ] [ ] [ ] bool } func ID ( ) { }",
  ": ID ( ) ( var ID func [ - true * { - ID ( ) [ ID ] ) * - false ] [ ] [ ] bool } func ID ( ) { }",
  ": ID ( ) ( var ID func [ - true * { - ID ( ) [ ID ) ] * - false ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] [ ) * ID [ - ( ID ) ] ] bool false { }",
  "func ID * ID : [ ] [ ) ( ID [ - ( ID ) ] ] bool false { }",
  "func ID * ID : [ ] [ } ( ID [ - ( ID ) ] ] bool false { )",
  "func ID ( ) { var ID : [ - - ID [ ( ID ( ( - - - - 123 ) ) ) ] ] int var ID : bool } func - ( ) { }",
  "func ID ( ) { var ID : [ - - ID [ ( ID ( ( - - - - 123 ) ) ) ] ] } var ID : bool } func - ( ) { int",
  "func ID ( ) { var bool : [ - - ID [ ( ID ( ( - - - - 123 ) ) ) ] ] } var ID : ID } func - ( ) { int",
  "func ID ( ) { var ID : int var ID : int print ( false / - true / } ( - ( ( ID ) ) ) ) ) print ( ( ( - true ) ) ) ( func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int print ( false / - true / } ( - ( ( ID ) ) ) ) ) print ( ( ( - true ) ) ) ( func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int print ( false / ) true / } ( - ( ( ID ) ) ) - ) print ( ( ( - true ) ) ) ( func ID ( ) { }",
  ") ID ( ) { var ID : int print ID ( func / - ( false / - - true ) * true { } } func ID ( ) { }",
  ") ID ( ) { var ID : int print ID ( func / - } false / - - true ) * true { } } func ID ( ) { (",
  ") ID ( ) { var ID : int print ID ( func / - } false / - - true ) * true { } } func ID ( ) { (",
  "func ID ( ID [ int , ID : int ) { var ID : : ] int var ID : int call ID ( ) } func ID ( ) { }",
  "func ID ( ID [ } , ID : int ) { var ID : : ] int var ID : int call ID ( ) int func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int ) : [ ] bool { - ID : int return var false - false }",
  "func ID ( ID : int , ID : [ ] int ) : [ ] bool { - ID : int false var false - return }",
  "func ID ( ID : int false ID : [ ] int ) : [ ] bool { - ID : int false var , - return }",
  "func ID ( ID : bool ID : [ ] bool { var ID : bool var ID : bool { var ID : int { var ) : [ ] int var ID : bool } if - ( ( - - true ) ) { } } while 123 { } }",
  "func ID ( ID : bool ID : [ ] bool { var ID : bool var ID : bool { 123 ID : int { var ) : [ ] int var ID : bool } if - ( ( - - true ) ) { } } while var { } }",
  "func ID ( ) : int { var ID : int call ID ( ( ) - false ) ( ) }",
  "func ID ( ( : int { var ID : int call ID ( ( ) - false ) ) ) }",
  "func ID ( ( : int { var ID : int ) ID ( ( call - false ) ) ) }",
  "func ID ( ) { ID ID : bool var ID : [ ID / var ] int print ID } func ID ( ) { }",
  "func ID ( ) { ID ID : bool var ID : [ ID / var } int print ID ] func ID ( ) { }",
  "func ID ( ) { ID ID : bool var ID : [ ID / var func int print ID ] } ID ( ) { }",
  "func ID ( ID : bool ( ID : [ - ( - true / true == ID , ) ) ] int , ID : [ ] [ ] [ ] [ ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( int : bool ( ID : [ - ( - true / true == ID , ) ) ] ID , ID : [ ] [ ] [ ] [ ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( int : bool ) ID : [ - ( - true / true == ID , ) ( ] ID , ID : [ ] [ ] [ ] [ ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "{ ID ( ) { return ID / ( - - 123 / - ( false ) ) } func ID ( ) func }",
  "{ ID ( ) { return ID / ) - - 123 / - ( false ( ) } func ID ( ) func }",
  "{ ID ( ) { return ID / ) - - 123 / - ( false ( ) } func ID } ) func (",
  "func ID ( ( : bool , ID : [ - ( ( true / ( ID false ) ) * ID ) ) ] int ) { }",
  "func ID ( ( : { , ID : [ - ( ( true / ( ID false ) ) * ID ) ) ] int ) bool }",
  "func ID ( ) : bool { var ID : [ ] bool var ID int [ ] : if true / false + false { } } func ID ( ) { }",
  "func ID int ) : bool { var ID : [ ] bool var ID ( [ ] : if true / false + false { } } func ID ( ) { }",
  "func ID } ) : bool { var ID : [ ] bool var ID ( [ ] : if true / false + false { } } func ID ( ) { int",
  "func ID ( ID : int ) { var ID : [ ] [ ] [ ] bool var : ID int { var ID : int } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ] [ ] [ ] bool var : ID int { } ID : int } var func ID ( ) { }",
  "func ID ( var : int ) { var ID : [ ] [ ] [ ] bool var : ID int { } ID : int } ID func ID ( ) { }",
  "func ID ( ID : ] - - - ID ( ) / ID [ 123 / ID [ [ - - - true ] ] [ ] int ) { }",
  "func ID ( ID : ] - - - ID ( ) / ID [ 123 / ID [ [ - ] - true ] ] [ - int ) { }",
  "func ID ( ( : ] - - - ID ID ) / ID [ 123 / ID [ [ - ] - true ] ] [ - int ) { }",
  "func ID ( ID : [ ] int ) : int { true ID : int var ID : bool print ( ( - ( ( - 123 ) ) ) ) if var { } } func ID ( ) { }",
  "( ID ( ID : [ ] int ) : int { true ID : int var ID : bool print ( func - ( ( - 123 ) ) ) ) if var { } } func ID ( ) { }",
  "( ID ( ID : [ ] int ) : int { true ID : int var ID : bool print ( func - ( ( - 123 ) var ) ) if ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) } bool { { if - 123 + 123 / ID / ( - - 123 ) - ID { : { } } }",
  "func ID ( ID : bool , ID : bool ) } bool { { if - 123 - 123 / ID / ( - + 123 ) - ID { : { } } }",
  "func ID ( ID : bool , ID : bool ) } 123 { { if - 123 - 123 / ID / ( - + bool ) - ID { : { } } }",
  "func ID ( ) { var ID : int } ID : [ ] int print ID [ ID / ID * ID ] } func ID ( ) { var",
  "( ID ( ) { var ID : int } ID : [ ] int print ID [ ID / ID * ID ] } func ID func ) { var",
  "( ID ( ) { var ID : int } ID : [ ] int print ID [ ID / ID ) ID ] } func ID func * { var",
  "func ID 123 ) : [ ] int { var ID : [ ( ID / ( ( ( ) ) ) ] [ ] bool }",
  "func ID 123 ) : [ ] int { var ) : [ ( ID / ( ( ( ) ) ID ] [ ] bool }",
  "func ID 123 ) : [ ] int { var ) : [ ( ID / ( ( ( ) ) ID ] [ ] bool }",
  "func ID ( ID : [ , ID : int ) : [ ] int ] int { while 123 * ID / ID { } while ( true ) { } }",
  "{ ID ( ID : [ , ID : int ) : [ ] int ] int { while 123 * ID / ID func } while ( true ) { } }",
  "{ ID ( ID : [ , ID : int ) : [ ] int ] int { func 123 * ID / ID while } while ( true ) { } }",
  "func ) ( ID : bool { return false * ID and ( - - - 123 ) }",
  "( ) ( ID : bool { return false * ID and func - - - 123 ) }",
  "( ) ( ID : bool { return false * ID and func - - - 123 ) }",
  "func ID ( ) : bool { var ID : int var ID : bool { var ID : [ ] int while ( } false ) ) { } } { ( }",
  "func ID ( ) : bool { var ID : int var ID { bool { var ID : [ ] int while ( } false ) ) : } } { ( }",
  "func ID ( ) : bool } var ID : int var ID { bool { var ID : [ ] int while ( { false ) ) : } } { ( }",
  "func ID ( ID : int , ID : [ { ( ( ( - ID ) ) ) ] bool ) ID }",
  "func ID ) ID : int , ID : [ { ( ( ( - ID ( ) ) ] bool ) ID }",
  "func ID ) ID : int , ID : [ { ( ( ( - ID ) ) ) ] bool ( ID }",
  "func ID ( ) { var ID : bool var ID : bool print ( false / - ID } ( - ID ) ) / ID ) } func ID ( ) { (",
  "func ID ( ) { var ID : bool var ) : bool print ( false / - ID } ( - ID ) ID / ID ) } func ID ( ) { (",
  "func ID ( ) { var ID : bool var ) : bool print ( false / - ID } ( - ID ) ID / ID ) } func ID ( ) { (",
  "func ID ( ) : int { var ID : int ID print ( ) < ID + true * - - ID * ( ( false ) ) call ID ( ) }",
  "func ID ( ) : int { var ID : int ID print ( ) < ID + true * - - ID * ( ( false ) ) call ID ( ) }",
  "func ID ( ) : int { var ID : int ID print ( ) < ID + true * - - ID * ( ( false ) ) call ID ( ) }",
  "func ID ( ) : [ ] [ { [ 123 / ( ( ( - ID ) ) ) ] [ ( true ) ] ] [ ] [ ] bool ID }",
  "func ID ( ) : [ ] [ { [ 123 true ( ( ( - ID ) ) ) ] [ ( / ) ] ] [ ] [ ] bool ID }",
  "func ID ( ) : [ ] [ { [ 123 true ( ( ( - ID ) ) ) ] [ ( / ) ] ] [ ] [ ] bool ID }",
  "func ID ( ID : int , ID : bool - : int { var ID : int return - - - false * ) ID }",
  "func ID ( ID : int , ID : var - : int { bool ID : int return - - - false * ) ID }",
  "func ID ( ID : int , - : var - : int { bool ID : int return ID - - false * ) ID }",
  "func ID ( ID { [ ] bool ) { while ID / false * ( ID ( ) ) { } while true { } } func ID ( ) : }",
  "func { ( ID { [ ] bool ) ID while ID / false * ( ID ( ) ) { } while true { } } func ID ( ) : }",
  "func { while ID { [ ] bool ) ID while ID / false * ( ID ( ) ) { } ( true { } } func ID ( ) : }",
  "func ID ( ID : int ) { var ] : [ ( ID [ - - ( - 123 ) ] [ - false ] ) ID [ ] [ ] bool }",
  "func ID ( var : int ) { ID ] : [ ( ID [ - - ( - 123 ) ] [ - false ] ) ID [ ] [ ] bool }",
  "func ID ( var : int ] { ID ] : [ ( ID [ - - ( - 123 ) ) [ - false ] ) ID [ ] [ ] bool }",
  ") ID ( ID : [ ] [ ID ( ) < ID [ ( - ID func ] ] [ ] int ) { } func ID ( ) { }",
  ") ID ( ID : [ ] [ ID ( ) < ID [ ( - ID func ] ] [ ( int ) { } func ID ] ) { }",
  "func true ( ) { var ID : bool call ID ( ) } func ID ( ) : int { var ID : int if true { } print ID }",
  "func true ( ) { var ID : bool call ID } ) } func ID ( ) : int { var ID : int if true { ( print ID }",
  "func true ( ) { var ID : bool call ID } ) } func ID ( ) : int { var ID : ( if true { int print ID }",
  "func ID 123 ) { print false / ID ( ) / ( + - ID ( false ) }",
  "ID func 123 ) { print false / ID ( ) / ( + - ID ( false ) }",
  "ID func 123 ) { ( false / ID print ) / ( + - ID ( false ) }",
  "func ID ( ) { if ( 123 or ID - - - [ ( ID ) ] ) { } call ID ( ) }",
  "func ID ( ) { if ( 123 or ID - - - [ ( ID ) ] ) { } call ID ( ) }",
  "func ID ( ) { if ( 123 ) ID - - - [ ( ID or ] ) { } call ID ( ) }",
  "func ID ( ID : bool , ID : [ ( true / - ID [ ID ] [ ID ] * ID ) ] [ { bool , ID : int ) ] }",
  "func ID ( [ : bool , ID : [ ( true / - ID [ ID ] [ ID ] * ID ) ] ID { bool , ID : int ) ] }",
  "func ID ( [ : bool , ID : [ ( true / - } [ ID ] [ ID ] * ID ) ] ID { bool , ID : int ) ] ID",
  "func ID ( ID : [ ] if , ID : bool , ID : bool ) { var ID : bool int ID [ - ( - ( - ( - ( - false ) ) ) ) ] { } print false }",
  "func ID ( ID : [ ] if ) ID : bool , ID : bool ) { var ID : bool int ID [ - ( - ( - ( - ( - false , ) ) ) ] { } print false }",
  "func ID ( ID : int ] if ) ID : bool , ID : bool ) { var ID : bool [ ID [ - ( - ( - ( - ( - false , ) ) ) ] { } print false }",
  "func ID ( ID : [ - 123 + ID ( { true - ID + ( ID ) ) ) - ID ] [ ] [ ] bool ) ( }",
  "{ ID ( ID : [ - 123 + ID ( func true - ID + ( ID ) ) ) - ID ] [ ] [ ] bool ) ( }",
  "{ ID ( ID : [ - 123 + ID ( - true func ID + ( ID ) ) ) - ID ] [ ] [ ] bool ) ( }",
  "func ID ( ID : bool ) { while ID [ ID ( ID ( ) ) ] [ - 123 ] { } { ( } func ID } ) { }",
  "func ID ( ID : bool ) { while ID [ ID ( ID ( ) ) ] [ - 123 func { } { ( } ] ID } ) { }",
  "func ID ( ID : bool 123 { while ID [ ID ( ID ( ) ) ] [ - ) func { } { ( } ] ID } ) { }",
  "func ID ( ID : [ ] [ } bool , ID : bool ) { ID ( true - ID ) = ( ( - ID ) ) if ID { } } func ID ( ) { ]",
  "func ID ( ID : [ ( [ } bool , ID : bool ) { ID ] true - ID ) = ( ( - ID ) ) if ID { } } func ID ( ) { ]",
  "func ID ( ID : [ ( [ } bool ] ID : bool ) { ID , true - ID ) = ( ( - ID ) ) if ID { } } func ID ( ) { ]",
  "{ ID ( ID : bool , ID : int , ID : bool ) func var ID : [ - - ID ( - true ) ] [ ] int var ID : bool } func ID ( ) { }",
  "{ ID ( ID : bool , ID : int , ID : bool ) func var ID : [ - ] ID ( - true ) ] [ - int var ID : bool } func ID ( ) { }",
  "{ ID ( ID : bool , ID : int , ID : bool ) func var ID : [ - ] ID ( - true ) ] [ - var int ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ( - ID * - true + ID ) ] int ID var : bool }",
  "func ID ( ) { var ID : [ - [ ( ] ID * - true + ID ) ] int ID var : bool }",
  "func ID ( true { var ID : [ - [ ( ] ID * - ) + ID ) ] int ID var : bool }",
  "func ID ( ID : - ] [ ] bool ) { print ( ( - [ - - ( ( ID ) ) ) ) { } }",
  "func ( ID ID : - ] [ ] bool ) { print ( ( - [ - - ( ( ID ) ) ) ) { } }",
  "func ( ID ID : - ] ( ] bool ) { print [ ( - [ - - ( ( ID ) ) ) ) { } }",
  "func ID ( ) { var ID : - var ID : bool print false * ( int ID ( - ID ) ) { } }",
  "func : ( ) { var ID ID - var ID : bool print false * ( int ID ( - ID ) ) { } }",
  "func ID ( ID : int ) { var ID : int var ID : [ ID and - false * ( ID - * ( ( ) ( - - - - false ) ) ) ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ) : [ ID and - false * ( ID - * ( ( ) ( - - - - false ) ) ) ] [ ] int } func ID ( ID { }",
  "func ID ( ID : int ) { var false : int var ) : [ ID and - ID * ( ID - * ( ( ) ( - - - - false ) ) ) ] [ ] int } func ID ( ID { }",
  "func + ( ) { var ID : bool while ID ( - false ID ID ( ) ) { } call ID ( ) }",
  "func + ( ) { } ID : bool while ID ( - false ID ID ( ) ) { var call ID ( ) }",
  "false + ( ) { } ID : bool while ID ( - func ID ID ( ) ) { var call ID ( ) }",
  "func ID ] ID : int ) : [ - - ( 123 / - 123 - ( true ) ) ( bool { }",
  "func ID ] ID : int ) : [ - - ( 123 ( - 123 - / true ) ) ( bool { }",
  "[ ID ] ID : int ) : func - - ( 123 ( - 123 - / true ) ) ( bool { }",
  "func ID ( ) { var ID : bool return } [ ID [ - - ( ( - ( - true ) ) ) ] ] [ - ( ID ) ] ID func ID ( ) { }",
  "func ID ( ) { var ID : bool return } [ ID [ - - ( ID - ( - true ) ) ) ] ] [ - ( ID ) ] ( func ID ( ) { }",
  "func ID ( ) { var ID : bool return } [ ID [ - - ( ID - ( - true ) ) ) ] ] [ - ( ID ) ] ( func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] int var ID : bool print true * ID ( ) [ - ( ] [ 123 - ( ( ( ( ( ID ) ) ) ) ) ) ] }",
  "func ID ( ) : int { var ID : [ ( int var ID : bool print true * ID ( ) [ - ] ] [ 123 - ( ( ( ( ( ID ) ) ) ) ) ) ] }",
  "func ) ( ) : int { var ID : int call ID ( ) if ID ( ID [ - - ( false ) ] [ true ] ) { } } func ID ( ID { }",
  "func ) ( ) : call { var ID : int int ID ( ) if ID ( ID [ - - ( false ) ] [ true ] ) { } } func ID ( ID { }",
  "func ) ( ) : call { var ID : int ) ID ( ) if ID ( ID [ - - ( false int ] [ true ] ) { } } func ID ( ID { }",
  "func ID ( ID : int , ID : [ - ( - ID 123 ) / - - - ( ( ( ) ) ) ] int , ID : bool ) { }",
  "func ID ( ID : int , ( : [ - ID - ( 123 ) / - - - ( ( ID ) ) ) ] int , ID : bool ) { }",
  "func ID / ) { return ID [ 123 ( 123 - ID >= true ] }",
  "func ID / } { return ID [ 123 ( 123 - ID >= true ] )",
  "func ID ( ID : int ) : bool { var ID : var - - - - true <= - - - - ID ] bool [ ID : bool }",
  "func ID ( ID [ int ) : bool { var ID : var - - - - true <= - - - - ID ] bool : ID : bool }",
  "func ID ( ID [ int ) : bool { var ID : var bool - - - true <= - - - - ID ] - : ID : bool }",
  "func ID ( ID : bool , ID true int ) : [ : / - 123 / true - - ( ID ) ] bool { }",
  "func ID ( ID : bool , ID true int ) : ) : / - 123 / true - - ( ID [ ] bool { }",
  "func ID ID ID : bool , ( true int ) : ) : / - 123 / true - - ( ID [ ] bool { }",
  "func ID ( ID : int , ID : [ ] [ ( [ ] [ - ] ID ( ) ) ] [ ] bool , ID : bool ) { }",
  "func ID : ID : int , ID : [ ] [ ( [ ] [ - ] ID ( ) ) ] [ ] bool , ID ( bool ) { }",
  "func ID : ID : int , ID : [ ] [ ( [ ] [ ) ] ID ( ) ) ] [ ] bool , ID ( bool - { }",
  "func ID ( ID : bool ) { var ID : bool var ( : [ ID [ - true / true ] [ true ] ] bool } func ID ID ) { }",
  "var ID ( ID : bool ) { func ID : bool var ( : [ ID [ - true / true ] [ true ] ] bool } func ID ID ) { }",
  "var ID ( ID : bool ) { func ID : bool var ( [ : ID [ - true / true ] [ true ] ] bool } func ID ID ) { }",
  "func ID ( ) var int { : ID : bool var ID : bool return ID ( ) * - - ( ID ) }",
  "func ID return ) var int { : ID : bool var ID : bool ( ID ( ) * - - ( ID ) }",
  "func ID return ) var int { : ID : bool var ID - bool ( ID ( ) * - : ( ID ) }",
  "func ID ( ) : int { var ID : ] ID [ - - ( 123 ) ] [ false [ ] bool var ID : [ ] int } func ID ( ) { }",
  "func ID func ) : int { var ID : ] ID [ - - ( 123 ) ] [ false [ ] bool var ID : [ ] int } ( ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID true int while ( - ( - : ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int true { var ID ) int while ( - ( - : ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int while { var ID ) int true ( - ( - : ) ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool if 123 ( / ID ( ) ) { } print ID } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool if 123 ( / ID ( ) ) { } print ID } func ID ( ) { }",
  "func var ( ) : bool { ID ID : bool var ID : bool if 123 ( / ID ( ) ) { } print ID } func ID ( ) { }",
  "func ID ( ) { var ID ( bool var ID : [ - - - : true / ( - true ) * true ) ] int }",
  "func ID ( ) { ID var ( bool var ID : [ - - - : true / ( - true ) * true ) ] int }",
  "func int ( ) { ID var ( bool var ID : [ - - - : true / ( - true ) * true ) ] ID }",
  "func ID ( ID : [ bool int ) { var ID : ] var ID : bool return ID + ID ( ) }",
  "func ID ( ID : bool bool int ) { var ID : ] var ID : [ return ID + ID ( ) }",
  "func ID ( ID : bool return int ) { var ID : ] var ID : [ bool ID + ID ( ) }",
  "bool ID ( ID : int ) { var ID : int } func ID ( ) : func { return }",
  "bool ID ( ID : int ) func var ID : int } { ID ( ) : func { return }",
  "bool ID ( ID : int ) func var ID : int } : ID ( ) { func { return }",
  "func ID ( true : int { while false - ( ID * ) - - ID + true ) - true { } { } }",
  "func ID ( * : int { while false - ( ID true ) - - ID + true ) - true { } { } }",
  "func ID } * : int { while false - ( ID true ) - - ID + true ) - true { } { } (",
  "func ID ( ) : [ ID [ ID ( ( - ( ID ) ) ) ] [ ] ID ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ] [ ID ( ( - ( ID ) ) ) ] [ ] ID ] [ ID bool { } func ID ( ) { }",
  ") ID ( ) : [ ] [ ID ( ( - ( ID ) ) ) ] [ ] ID ] [ ID bool { } func ID ( func { }",
  "func ID ( ) { while ID ) ( - - - false * ID ( ) [ - - ( - ( ID ) ) ] [ - - ( ( false ) ) ] { } }",
  "func ID ( } { var ID : bool call ID ( ) while ( - - ( ( ID ) ) ) { } ) func ID ( ) { }",
  "func ID ( } { var ID : bool call ID ( ) while ( - - ( ) ID ( ) ) { } ) func ID ( ) { }",
  "func ID ( } { var ID ) bool call ID ( ) while ( - - ( ) ID ( : ) { } ) func ID ( ) { }",
  "func ) ( ID : int { var ID : [ ] [ - ID ( false + false ) ] bool }",
  ": ) ( ID : int { var ID func [ ] [ - ID ( false + false ) ] bool }",
  ": ) ( false : int { var ID func [ ] [ - ID ( ID + false ) ] bool }",
  "func ID ( ID : [ - ( 123 and 123 / - ID ( false ) * ( ( true ) ) and ( { ) ) ] [ ] bool ) { } func ID ( ) ID }",
  "func ID ( ID : [ - ( 123 and 123 / - ID ( false ID * ( ( true ) ) and ( { ) ) ] [ ] bool ) { } func ID ( ) ) }",
  "func ID * ID : [ - ( 123 and 123 / - ID ( false ID ( ( ( true ) ) and ( { ) ) ] [ ] bool ) { } func ID ( ) ) }",
  "func ID ( ) : ) { var ID : bool call ID ( ( - ID ( bool [ 123 ] [ 123 ] ) ) }",
  "func ID ( ) : ) { var ID : bool ID ID ( ( - call ( bool [ 123 ] [ 123 ] ) ) }",
  "bool ID ( ) : ) { var ID : bool ID ID ( ( - call ( func [ 123 ] [ 123 ] ) ) }",
  "func ID ( ID : bool , ID : [ 123 != - ID ( ] ( ID ) ) ID int , ID : int ) { }",
  "func ID ( ID : bool , ID : [ 123 != - ID { ] ( ID ) ) ID int , ID : int ) ( }",
  "func ID ( ID : bool , ID : [ 123 != - ID { ] ( ID ) ) ID int , ID : int ) ( }",
  "func ID ( ID : int , ID : bool , ID : [ ] [ ] int ) : bool { var ID : [ - ID ] bool var ID : int func } ID ( ) { }",
  "func ID ( ID : int , ID : bool [ ID : [ ] , ] int ) : bool { var ID : [ - ID ] bool var ID : int func } ID ( ) { }",
  "func ID ID ( : int , ID : bool [ ID : [ ] , ] int ) : bool { var ID : [ - ID ] bool var ID : int func } ID ( ) { }",
  "func ID ) ) { var ID : bool } func ID ( ) : [ ( ( ( ID ) ) ( ] bool { }",
  "func ID ) ) { var ID : bool } func ID ] ) : [ ( ( ( ID ) ) ( ( bool { }",
  "func ID ) ) { var ID : ) } func ID ] ) : [ ( ( ( ID ) bool ( ( bool { }",
  "func ID ( ID : [ ] [ - - true * ID ( ) { ( ID ) ] * - - false ] int ) [ }",
  "func ID ( ID : [ ] [ - - true * ID ( ) { ( ID ) ] * - - false ] int ) [ }",
  "func ID ( ID : [ ] } - - true * ID ( ) { ( ID ) ] * - - false ] int ) [ [",
  "ID ID ( ) { var ID : bool func = true * - false + 123 * - ID * - false }",
  "ID ID ( ) { var ID : bool func = true * - false + ID * - 123 * - false }",
  "ID ID ( ) { var ID : bool func = true * - false + ID - * 123 * - false }",
  "func ID ( ) { return true - - >= ID [ - false != ID ] [ ID ] } func ID ( ) { }",
  "func ID ( ) { return true - - >= ID ID - false != ID ] [ [ ] } func ID ( ) { }",
  "func ID ( ) { return true - - >= ID ID ID false != - ] [ [ ] } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { while true * - ) / ID ( ) [ ( 123 ) ] [ - ( 123 true ] { } }",
  "func ID true ID : bool , ID : int ) { while true * - ) / ID ( ) [ ( 123 ) ] [ - ( 123 ( ] { } }",
  "func ID true ID : bool , ID : int ) { while true * - ) / ID ( ) [ } 123 ) ] [ - ( 123 ( ] { ( }",
  "func ID ( ID : int ) { var : : [ ] int var ID ID bool call ID ( ) }",
  "func ID ( ID : : ) { var : int [ ] int var ID ID bool call ID ( ) }",
  "func } ( ) { var ID : bool ID",
  "func } ( ) { bool ID : var ID",
  "func } ( ) { : ID bool var ID",
  "func ID ( ID : [ ] int , ID : int , ID : [ ] ID ) : [ ( int ( ) ) ] int { }",
  "func ID [ ID : ( ] int , ID : int , ID : [ ] ID ) : [ ( int ( ) ) ] int { }",
  "func int [ ID : ( ] int , ID : int , ID : [ ] ID ) : [ ( int ( ) ) ] ID { }",
  "func ID ( ID : bool , ID : [ 123 / ) ( - ( ( - - false ) ID ) / ( - ( 123 ) ) ] int ) { }",
  "func ID ( ID : bool , ID : [ 123 / ) ( - ( ( - - false ) ID ) / ( - ( 123 ) ) ] int ) { }",
  "func ID ( ID : bool , ID : [ 123 / ) ( - ( ( - - false ) ID ) / ( - ( 123 ) ) ] int ) { }",
  "func ID ( ) { var ID : bool } func ID ( ID } bool ) : bool { var ID : int :",
  "func ID ( ) { var ID : bool } func ID ( ID } bool ) { bool : var ID : int :",
  "func ID ( ) { var ID : int } func ID ( ID } bool ) { bool : var ID : bool :",
  "func ID ( ID : ) - ID [ - ( ID / ID ( ) [ ] ] bool ) { }",
  "func ID ( ID : ) - ID [ - ( ID ID / ( ) [ ] ] bool ) { }",
  "func ID ( ID : ) - ID [ - ( ID ID / ( ) [ ] bool ] ) { }",
  "func ID ID ) : bool { { var ( : int var ID : bool call ID ( ) return } }",
  "func ID ID ) : bool { ( var ( : int var ID : bool call ID { ) return } }",
  "func bool ID ) : ID { ( var ( : int var ID : bool call ID { ) return } }",
  "func ID ( ID : bool , ID : bool ) { var ID : int var ID : int while ) true * true ) { } if ( ( ID ( ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : int var ID : int while ) true * true ) { } if ( ( ID ( ) { } } func ID { ) ( }",
  "func ID ( ID : bool , ID : bool ) { var ID : int var ID : int while ) true { true ) { } if ( ( ID ( ) * } } func ID { ) ( }",
  "func ID ( ) { false ID : int var ID : bool { var ID : bool while - var / - false * ( ( ( ( ID ) ) ) ) { } while ID { } } print true }",
  "func ID ( ) { false int : ID var ID : bool { var ID : bool while - var / - false * ( ( ( ( ID ) ) ) ) { } while ID { } } print true }",
  "func ID ( ) { false int : ( var ID : bool { var ID : bool while - var / - false * ( ( ( ID ID ) ) ) ) { } while ID { } } print true }",
  "] ID ( ID : [ func [ ] int ) : int { var ID : bool call ID ( ) if - ( ID ) { } }",
  "] ID ( ID int [ func [ ] int ) : : { var ID : bool call ID ( ) if - ( ID ) { } }",
  "func ID ( ) { var ID : [ ] ID var ID : int { var int : bool var ID : int { var ID : int var ID : int } while ID { } } }",
  "func ID ( ) { var ID : [ ] ID var ID : int { var int : bool var ID : int { var } : int var ID : int } while ID { ID } }",
  "func ID ( ) { var ID : [ ] ID var ID : int { var int : bool var var : int { var } : int ID ID : int } while ID { ID } }",
  "func ID ( ) { } func } ( ID : bool , ID : [ ] int ) { return ID",
  "func ID ( ) { } func } ( ID : bool , ID : int ] [ ) { return ID",
  "func ID ( ) { } func } ( ID : bool , ID : int ] return ) { [ ID",
  "func ID , ID : bool ( ID : int , ID : bool ) : bool { return - ID [ ID ] [ ( ( ID ) ) ] }",
  "func ID , ID : bool ( ID : int , ID : bool ) : bool { return - ID [ ID ] [ ( ( ID ) ) ] }",
  "func ID ( ) { var ID : int } func ID ( ) ( [ 123 / ID : ) * 123 ] int { }",
  "func ID ( ) { var ID : int } func ID ( ) ( [ 123 / ID : ) * 123 ] int { }",
  "func ID ( ) { { ID : int } func ID ( ) ( [ 123 / ID : ) * 123 ] int var }",
  "func ID ( ) { var ID : int call ID ( ) while ID ( ID ID ) [ - - - ( ] ) { } }",
  "func ID ( ) { var ID : int call ID ( ) while ID ( ID ID ) [ - - - ( ] ) { } }",
  "func ID ( ) { var ID ( int call ID : ) while ID ( ID ID ) [ - - - ( ] ) { } }",
  "func ID ( ) ( call ID { true and - ID [ - ID ] and - ( false ) ) } func ID ( ) { }",
  "func ID ( ) ( call ID { true and - ) [ - ID ] and - ( false ) ) } func ID ( ID { }",
  "func ID ( ) ( call ID { true and } ) [ - ID ] and - ( false ) ) - func ID ( ID { }",
  "func ID ( ID ID [ ] bool ) { var : : [ ] bool if - true / ID [ false ] [ - 123 ] { } }",
  "func ID / ID ID [ ] bool ) { var : : [ ] bool if - true ( ID [ false ] [ - 123 ] { } }",
  "func ID / ID ID [ ] [ ) { var : : [ ] bool if - true ( ID [ false ] bool - 123 ] { } }",
  "func ID ( ID : int , ID : [ ] [ ( * 123 * ID ( ) [ false ( - ( ( ( - ID ) ) ) ) ) ] [ ID ] ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ( * 123 * ID ( ) [ false ( - ( ( ( - ID ) ) ) ) ) ] [ ID ] ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ) - bool { while false * ID ( ) [ - 123 / - : false ] { } } func ID ( ) { }",
  "func ID ( ) - bool { while { * ID ( ) [ - 123 / - : false ] { } } func ID ( ) false }",
  "func ID ( ) - bool { while { * ID ( ) [ - 123 / - : } ] { false } func ID ( ) false }",
  "func ID ( ) : int } ID = ID / - - ( - 123 * ID ) {",
  "func ID ( ) : int } ID = ID / - - ( - 123 * ID ) {",
  "func - ( ) : int } ID = ID / - - ( ID 123 * ID ) {",
  "func ID ( ) : [ - ( ID ( ] ( 123 ) ) ) ID bool { }",
  "func ID ( ) : [ - ( ID ( ] ( 123 ) ) ) ID { bool }",
  "func ID ( ) : [ - ( ID ( ] ( 123 } ) ) ID { bool )",
  "func ID ( ) : int { var ID [ bool if ID [ ID : ( - 123 ) ] ] { } while ( ID ) { } }",
  ") ID ( func : int { var ID [ bool if ID [ ID : ( - 123 ) ] ] { } while ( ID ) { } }",
  ") ID ( func : int { var ID [ ID if ID [ ID : ( - 123 ) ] ] { } while ( bool ) { } }",
  "func ID ( ) { var ID ID bool call ID ( - ( true - ID ( ) ) ) while ID { } } func : ( ) { }",
  "func ID ( ) { var ID ID bool call ID ( - ( true - ID ( ) ) ) while ID { } } func : ( ) { }",
  "func ID ( ) { var ID ID bool call - ( - ( true ID ID ( ) ) ) while ID { } } func : ( ) { }",
  "func ID ( ) { var ID : int { var ID : int var ID : [ false * ( ( ) ( - ( - - ( 123 ) ) ) - ) ] [ ] int } } func ID ( ) { }",
  "func ID ( ) var var ID : int { { ID : int var ID : [ false * ( ( ) ( - ( - - ( 123 ) ) ) - ) ] [ ] int } } func ID ( ) { }",
  "func ID ( } var var ID : int { { ID : int var ID : [ false * ( ( ) ( - ( - - ( 123 ) ) ) - ) ] [ ] int ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ) : [ false / ID ( true + ( ( - true ID ) ) ] bool }",
  "func ID ( ) { var ID : bool true ) : [ false / ID ( var + ( ( - true ID ) ) ] bool }",
  "func ID ( ) { var ID : bool true ) : [ false / ID ( ( + var ( - true ID ) ) ] bool }",
  "func ID ( ) : int { var ID : int { var ID : [ 123 * ID ) ) [ ( ID ) ] / - 123 ] [ ] int } } func ID ( ( { }",
  "func ID ( ) : ( { var ID : int { var ID : [ 123 * ID ) ) [ int ID ) ] / - 123 ] [ ] int } } func ID ( ( { }",
  "func ID ( ) : ( { : ID : int { var ID var [ 123 * ID ) ) [ int ID ) ] / - 123 ] [ ] int } } func ID ( ( { }",
  "ID ID ( ID : [ ( ( false * false / ( ( func ) ) ) ) ] [ ] bool ) { }",
  "func ID ( ID : ) bool { var ID : int var ID : [ ] int ID = ID ( ) [ ID ] [ ID ] }",
  "func ID ( ID : ) bool { var ID : int var ID : [ ] ( ID = ID int ) [ ID ] [ ID ] }",
  "func ID ( ID : ID bool { var ID : int var ID : [ ] ( ID = ID int ) [ ) ] [ ID ] }",
  "func ID ( ID : bool ) { { var func : [ ID ( ) [ true * - ID * ( ID ) ] ] [ ] [ ] bool } } ID ID ( ) { }",
  "func ID ( ID : bool ) { { var func : [ ID ( [ [ true * - ID * ( ID ) ] ] [ ] ) ] bool } } ID ID ( ) { }",
  "func ID ( ID ) bool : { { var func : [ ID ( [ [ true * - ID * ( ID ) ] ] [ ] ) ] bool } } ID ID ( ) { }",
  "func ID ( ) { ] } func ID ( ID : [ ID [ ( - ID ) return [ ( ID ) ] ] [ ] int ) { }",
  "func ID ( ) { ] } func ID ( ID : ) ID [ ( - ID ) return [ ( ID [ ] ] [ ] int ) { }",
  "func ID ( ) { ] } func ID ( ID : ) ID [ ( - ID ) return [ ( ID [ ] ] [ ] int ) { }",
  "func ID ( ) : int { { ID [ - ID [ ( 123 ) ] [ false ] ] [ ( - - ID ) ] if } }",
  "func ID ( ) : int { { ID [ false ID [ ( 123 ) ] [ - ] ] [ ( - - ID ) ] if } }",
  "func ID ( ) : int { { ID [ false ID [ ( 123 ) ] } - ] ] [ ( - - ID ) ] if } [",
  "func ID ( ID : bool ) { var ID : int call ID ( 123 * [ ( ) ID 123 ] / true ) }",
  "func ID ( ID : ID ) { var ID : int call bool ( 123 * [ ( ) ID 123 ] / true ) }",
  "func ID ( ID : ID ) { var ID : [ call bool ( 123 * int ( ) ID 123 ] / true ) }",
  "func ID ( ID : [ ] true and 123 / ( - ( true ) ) * 123 - int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] true and 123 / ( - ( true { ) * 123 - int ) ) } func ID ( ) { }",
  "func ID ( ID ) bool , ID : bool ) : [ ] int { var ID : [ ID / ( - - - ( ID ) : * - false ] bool var ID : [ ] [ ] int }",
  "func ID ( - : bool , ID : bool ) : [ ] int { var ID : [ ID / ( - - - ( ID ) ) * ID false ] bool var ID : [ ] [ ] int }",
  "func ID ( ID : bool , ID : bool ) - if 123 * ID ( ) and { ID and 123 { } }",
  "func ( ( ID : bool , ID : bool ) - if 123 * ID ID ) and { ID and 123 { } }",
  "func ( ( ID : bool , ID : bool ) - if * 123 ID ID ) and { ID and 123 { } }",
  "func ) ( ID : [ ] int ID { }",
  "func ] ( ID : [ ) int ID { }",
  "func ] { ID : [ ) int ID ( }",
  "func ID ( } { var ID : [ ( 123 * ( 123 * false ) ) ] bool var ID : bool )",
  "func ID ( } { var ID : [ ( 123 * ( 123 * false ) ) ] bool bool ID : var )",
  "func ID ( } { var ID : [ ( 123 * ( 123 * false ] ) ) bool bool ID : var )",
  "func ID ( ) { while ( } - - - 123 * ( - - - - true ) * ID ) ) { ( }",
  "func ID ( ) { while ( } - - - 123 * ( - - - - true ) * ( ) ) { ID }",
  "- ID ( ) { while ( } - - - 123 * ( - func - - true ) * ( ) ) { ID }",
  "func ID ( ID : [ ID and ID ( false / true - ( 123 ) ) and false ] bool ) { } func ID ( ) } {",
  "func ID ( ID : [ ID and ID ( false / } - ( 123 ) ) and false ] bool ) { } func ID ( ) true {",
  "func ID ( ID : [ ID and ID ( false / } ( - 123 ) ) and false ] bool ) { } func ID ( ) true {",
  "func ID ( ID : [ ] int , ID : int , ID : bool ) : [ ( ) ( ( ID ) ) ) ] [ ] int { } func ID ( - { }",
  "func ID ( ID : [ ] int , ID : int , ID : ) ) : [ ( ) ( ( ID ) ) bool ] [ ] int { } func ID ( - { }",
  "func ID ( ID : [ ] int , ID : int , ID ID ) ) : [ ( ) ( ( ID ) ) bool ] [ ] int { } func : ( - { }",
  "func ID ( ID : ID ] int , ID : int , ID : bool ) { var ID : [ 123 / - - - ( ID ) / ( ( ( ID ) ) ) ] int var [ : [ ] [ ] bool }",
  "func ID ( ID : ID ] int , ID : int , ID : bool ) { var ID : [ 123 / - - - ( ID var / ( ( ( ID ) ) ) ] int ) [ : [ ] [ ] bool }",
  "func ID ( ID : ID ] int , ID : int , ID : bool ) { var ID : [ 123 / - - - ( ID var / ( ( ( ID ) ) ) ] int ) [ : [ ] [ ] bool }",
  "func ID ( ID : ) ] int , ID : [ ( ( 123 * ( ID ) * ( ( 123 ) ) [ ) ] int ) { }",
  "func ID ( ID : ) ] int , ( : [ ( ( 123 * ( ID ) * ( ID 123 ) ) [ ) ] int ) { }",
  "func ID ( ID ) ) ] int , ( : [ ( ( 123 * ( ID ) * ( ID 123 ) ) [ ) ] int : { }",
  ": ID ( ID func bool , ID : int , ID : int ) { var ID : [ false > - true - ( 123 ) ] int }",
  ": bool ( ID func ID , ID : int , ID : int ) { var ID : [ false > - true - ( 123 ) ] int }",
  ": bool ( ID func ID , [ : int , ID : int ) { var ID : ID false > - true - ( 123 ) ] int }",
  "func ID ) ) : [ - ( true - - ID [ ID ( ) ] [ ID ] + ( - false ( ) ] [ ] bool { } func ID ( ) { }",
  "func ID ) ) : [ - ( true - - ID [ ID ( ) ] [ ID ] + ( - false ( ) ] [ ] bool { } func ID ( ) { }",
  "func ID ) ) : [ - ( true - - ID { ID ( ) ] [ ID ] + ( - false ( ) ] [ ] bool [ } func ID ( ) { }",
  "func ( ( ) : [ ] [ ( ID ID ( true ) ) ) ] [ ] int { }",
  "func ( ( ) : [ ] [ ( ID ID ( true ) ) ) ] [ int ] { }",
  "func ( ( ) : [ ] [ ( ID ID ( true ) ) ) ] [ } ] { int",
  "func ID ( ) : int ( var ID : int var ID : bool return { ( ( ( - ID ) ) ) ) }",
  "ID func ( ) : int ( var ID : int var ID : bool return { ( ( ( - ID ) ) ) ) }",
  ") ID ( ID : int func : bool { var ID : bool var ID : [ ] [ - ( ID ) ] [ ] int }",
  ") ) ( ID : int func : bool { var ID : bool var ID : [ ] [ - ( ID ID ] [ ] int }",
  ") ) ( ID : int func : bool { var ID : : var ID bool [ ] [ - ( ID ID ] [ ] int }",
  "+ ID ( ) { var ID : [ true * ID ( - true func ID + 123 ) ] bool } func ID ( ) { }",
  "+ ID ( ) { var ID : [ true * ID ( - true func ID + 123 ) ] ( } func ID bool ) { }",
  "+ ID ( ) { var ID : [ true * } ( - true func ID + 123 ) ] ( ID func ID bool ) { }",
  "func ( ( ID : bool , ID : bool , ID : [ ID ( ) * ID 123 / ID * ( ID ) ) ] int ) { } func ID ( ) { }",
  "func ( ( ID : bool , ID : bool , ID : [ ID ( { * ID 123 / ID * ( ID ) ) ] int ) { } func ID ( ) ) }",
  "func ( ( ID : bool , ID : bool , ] : [ ID ( { * ID 123 / ID * ( ID ) ) ID int ) { } func ID ( ) ) }",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) : int { var ID : bool var ID ID bool print true ID = - - : }",
  "func ID ( ID : int , ID : int - ID : [ ] bool ) : int { var ID : bool var ID ID bool print true ID = - , : }",
  "var ID ( ID : int , ID : int - ID : [ ] bool ) : int { var ID : bool func ID ID bool print true ID = - , : }",
  "func ID ( ) : bool { var ID : int var ID : bool return } func ID ( ) : int { ID = ( true - print ) - ( ID ) }",
  "func ID } ) : bool { var ID : int var ID : bool return ( func ID ( ) : int { ID = ( true - print ) - ( ID ) }",
  "func ID } ) ) bool { var ID : int var ID : bool return ( func ID ( ) : int { ID = ( true - print ) - ( ID : }",
  "func ID ( ) { var ID : int var ID : [ ] int } func : ( ID : int , ID ID bool ) : bool { }",
  "func ID ( ) { var ID : int var : : [ ] int } func : ( ID : int , ID ID bool ) ID bool { }",
  "func ID ( ) { var ID : int var : : [ int int } func : ( ID : ] , ID ID bool ) ID bool { }",
  "func ID ) ) : bool { var ID : int if ( true < ( 123 ) ) { } } func ID ( ( { }",
  "func ID ) ) : bool { : ID var int if ( true < ( 123 ) ) { } } func ID ( ( { }",
  "bool ID ) ) : func { : ID var int if ( true < ( 123 ) ) { } } func ID ( ( { }",
  "func ID ( ) { var int : [ ] ID var ID : [ ( ( ( ID ) ) ) ] [ ] int } func ID ( ) { }",
  "func ID ( } { var int : [ ] ID var ID : [ ( ( ( ID ) ) ) ] [ ] int } func ID ( ) { )",
  "func ID ( } ) var int : [ ] ID var ID : [ ( ( ( ID { ) ) ] [ ] int } func ID ( ) { )",
  "} ID ( ID : int , ID : int ) { var ID : [ ] int var ID : bool func",
  "} var ( ID : int , ID : int ) { ID ID : [ ] int var ID : bool func",
  "} var ID ID : int , ID : int ) { ID ID : [ ] int var ( : bool func",
  "func ID ( ID : int , ID : ) ] int [ { var ID : int }",
  "func ID ( ID : int , ID : ) ] int var { [ ID : int }",
  "func ID ( ID : int , ID int ) ] int var { [ ID : : }",
  "func ID ( ID : bool ) : bool { var ID : [ ) - false / - ID ( ) / ( ( ID ( ) ) ] int }",
  ": ID ( ID : bool ) : bool { var ID func [ ) - false / - ID ( ) / ( ( ID ( ) ) ] int }",
  ": ID ( ID : ) ) : bool { var ID func [ ) - false / - ID ( ) / ( ( ID ( bool ) ] int }",
  "func ID ( ) : bool , ID : [ ID ( ( - 123 * ( ID ) * ID ID ) ] bool ) { } func ID ( ) { }",
  "func ID ) ) : bool , ID : [ ID ( ( - 123 * ( ID ) * ID ID ( ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) : int { call ID false ) return ( ID ( ( ( ) ) ) }",
  "func ID ( ID : int ) : call { int ID false ) return ( ID ( ( ( ) ) ) }",
  "func ID ( ID : ( ) : call { int ID false ) return int ID ( ( ( ) ) ) }",
  "func ID ( and : bool ) { var ID : bool var ID : int call ID ( ) while true and ID ID ID { } }",
  "func ID ( and : bool ) { var ID ( bool var ID : int call ID : ) while true and ID ID ID { } }",
  "func var ( and : bool ) { ID ID ( bool var ID : int call ID : ) while true and ID ID ID { } }",
  "( ID ( ) { var ID : [ ( ( - func 123 ) ) ) ] bool } func ID ( ) { }",
  "( ID ( 123 { var ID : [ ( ( - func ) ) ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : bool ) - - ID ( ID if { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID - bool ) - : ID ( ID if { } } func ID ( ) { }",
  "func ID ( ID : bool , ID ID int ) { var ID - bool ) - : ID ( : if { } } func ID ( ) { }",
  "func ID ( ) : [ ] while { int - false * ID ( ) - - ID [ - 123 ] [ ( - ID ) ] { } }",
  "func ID ( ) : [ ] while { int - false * ID ( ) - - ID [ - 123 ] [ ( - ID ) ] { } }",
  "func ID ( ) : [ ] [ { int - false * ID ( ) - - ID while - 123 ] [ ( - ID ) ] { } }",
  "func ID ( ID : int , ] : int , ID : bool ) : [ - ( true + ID ) ID bool { } func ID ( ) { }",
  "func ID ( ID : int ID ] : int , ID : bool ) : [ - ( true + ID ) ID bool { } func , ( ) { }",
  "func ID ( ID : int ID ] : int , ID func bool ) : [ - ( true + ID ) ID bool { } : , ( ) { }",
  "func ID ( ID : bool , ID : [ ] 123 ) : int { var ID : int ID [ - ID ] [ - 123 ] = bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] 123 ) : int { var = : int ID [ - ID ] [ - 123 ] ID bool } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int { var ID : bool return - ID - 123 * ID * - } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID func int { var ID : bool return - ID - 123 * ID * - } } : ID ( ) { }",
  "func ID ( ) { var ID : int var { func int ID var ID : bool return - ID - 123 * ID * - } } : ID ( ) { }",
  "func ID ( ID : - 123 * ID ( ( - true - ( ( [ ID ) ) ) ) * ( ( true ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : - 123 * ID ( ( - true - ( ( [ ( ) ) ) ) * ID ( true ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : - 123 * ID ( ( - true - ( ( [ ( ) ) ) ) * ID ( true ) ) ) int ) { } func ID ( ] { }",
  "func ID ( ID : int , ID ID int ) { print ID [ : ( ) [ ( - ( 123 ) ) ] ] if 123 { } } func ID ( ) { }",
  "func ID ( ID ) int , ID ID int ) { print ID [ : ( : [ ( - ( 123 ) ) ] ] if 123 { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID ID int ) { var ID : int print 123 * ID ( ID ) } func : ( ) { }",
  "func ID ( ID } bool , ID : int , ID ID int ) { var ID : int print 123 * ID ( ID ) : func : ( ) { }",
  ") ID ( ID } bool , ID : int , ID ID int func { var ID : int print 123 * ID ( ID ) : func : ( ) { }",
  "func ID ( ) : [ - - - ( ID ( ) [ - { ID ) ] [ - - ID ] ) ] [ ] bool ( } func ID ( ) { }",
  "func ID ( ) : [ - - - ( ID ( ) [ - { ID ) ] ] - - ID ] ) ] [ [ bool ( } func ID ( ) { }",
  "func ID ( ) : [ - - - ( ID ( ) [ - ] ID ) ] ] - - ID ] ) { [ [ bool ( } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ false * - , / - ID ( false ) ] int true ID : int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ false * - , / - ID ( false ) ] int true ID : int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ false * - , ( - ID ( false ) ] int true ID : int ) { } func ID / ) { }",
  "func ID ( ID : [ ] int , ID : int ) { var ID ( [ - true / ( - true ) ] bool var ID : bool } func ID : ) { }",
  "func ID ( ID : bool ) : bool { var ID : [ ] [ ( ( true ) func ] int } ) ID ( ) { }",
  "func ) ( ID : bool ID : bool { var ID : [ ] [ ( ( true ) func ] int } ) ID ( ) { }",
  "func ) ( ID : bool ID : bool { var ID : [ ] [ ( ( true ) func ] int ) ) ID ( } { }",
  "func ID ( ID [ int , ID : int ) { print 123 + ( ID : ID ] [ ID ] ) while - ID { } }",
  "func ID ( ID [ int , : ID int ) { print 123 + ( ID : ID ] [ ID ] ) while - ID { } }",
  "func ID ( ID [ int , : ID ID ) { print 123 + ( ID : ID ] [ ID ] ) while - int { } }",
  "func ID ( ) : int { true var ID : bool } return { == ( ID ) } func ID ( ) { }",
  "func ID ( ) func int { true var ID : bool } return { == ( ID ) } : ID ( ) { }",
  "func ID return ) func int { true var ID : bool } ( { == ( ID ) } : ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool if true * - 123 * ID ( while ) { } ID false { } }",
  "func ID ( ) { var ID : bool * ID : bool if true var - 123 * ID ( while ) { } ID false { } }",
  "func ID ( ) { * ID : bool var ID : bool if true var - 123 * ID ( while ) { } ID false { } }",
  "func ID ( ) { var ID : bool if ( ID * ( { ) ) ID } }",
  "func ID ( ) { : ID var bool if ( ID * ( { ) ) ID } }",
  "func ID ( - { var ID : [ ( ID ( - - true * ( ( ID ) ) / ( ) ID ) ) ) ] int }",
  "func ID ( - { var ID : [ ( ID ( - - true * ( ( ID ( ) / ) ) ID ) ) ) ] int }",
  "func ID ( - { var ID : [ ( ID ( - ( true * - ( ID ( ) / ) ) ID ) ) ) ] int }",
  "func ID ( ID : [ ] int ) : bool { var ID : [ ( ID ( true ) ) ] [ ] int var ID : bool ID func } ( ) { }",
  "func ] ( ID : [ ID int ) : bool { var ID : [ ( ID ( true ) ) ] [ ] int var ID : bool ID func } ( ) { }",
  "func ] ( ID : bool ID int ) : [ { var ID : [ ( ID ( true ) ) ] [ ] int var ID : bool ID func } ( ) { }",
  "func ID ( ID : int , ID : [ ( false / - ID ( ) [ ID ] [ - false ] * ID ) ) bool ] { }",
  "func ID ( ID : int , ID : [ ( false / - ID ( ) [ ID ] [ - false ] * ID ) ) bool } { ]",
  "func ID ( ID : int , ID : * ( false / - ID ( ) [ ID ] [ - false ] [ ID ) ) bool } { ]",
  "func ID ) ) : bool { print true - - true * ID [ - ( ID ) ] if ( ( ( - ID ) ( ) { } }",
  "func ID ) ) : bool { print if - - true * ID [ - ( ID ) ] true ( ( ( - ID ) ( ) { } }",
  "func ID ) ) : bool { print if - - true * ID ] - ( ID ) [ true ( ( ( - ID ) ( ) { } }",
  "func ID ( ) : int { print ID [ ID ( / false true ) ] }",
  "func ID ( ) : int { print false [ ID ( / ID true ) ] }",
  "/ ID ( ) : int { print false [ ID ( func ID true ) ] }",
  "func ID ( ID : int , ID : [ ] [ - ( - - ( ( 123 ) ) ) ] } ] int ) { [",
  "func ID ( ID : ) , ID : [ ] [ - ( - - ( ( 123 int ) ) ] } ] int ) { [",
  "func ID ( ID : ) , ID : [ ] [ - ) - - ( ( 123 int ) ) ] } ] int ( { [",
  "func 123 ( ) : int { var ID : int print ( - ID + 123 / ID / true ) if 123 { } } func ID ( ) { }",
  "func 123 ( ) : int { var ID : int print ( - ID + 123 / ID / true ) if 123 { } ( func ID } ) { }",
  "func 123 ( ) : int { var ID : int print ( 123 ID + 123 / ID / true ) if - { } ( func ID } ) { }",
  "func ID ( ) { var ID : bool return } func ID ( ) ID bool { var ID : [ ID [ - : ] ] int var ID : [ ] [ ] [ ] [ ] bool }",
  "func ID ( ) { var ID : bool return } func ID ( ) ID bool { var int : [ ID [ - : ] ] ID var ID : [ ] [ ] [ ] [ ] bool }",
  "func ID ( ) { var ID : bool return } func ID ( ) ID bool { var int : [ ID [ [ : ] ] ID var ID : [ ] - ] [ ] [ ] bool }",
  "func ID ( ID ( [ ] [ ID ( ID * - ( - ( ( true ) ) ) ) ] bool ) { } func ID : ) { }",
  "func ID ( { ( [ ] [ ID ( ID * - ( - ( ( true ) ) ) ) ] bool ) { } func ID : ) ID }",
  "func ID ( ID ) int , ID : int , ID : int : { var ID : [ ] bool } func ID ( ID : [ ] [ ] [ ] int ) { }",
  "func ID ( ID ) int , ID : int , ID : int : int var ID : [ ] bool } func ID ( ID : [ ] [ ] [ ] { ) { }",
  "func ID ( ID ) int , ID ] int , ID : int : int var ID : [ ] bool } func ID ( ID : [ : [ ] [ ] { ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : bool ) : int { var ID : bool var ID : int print - ID while { { } } func ID ( ) false }",
  "func ID ( ID var [ ] int , ID : int , ID : bool ) : int { var ID : bool : ID : int print - ID while { { } } func ID ( ) false }",
  "func ID ( ID var [ ] int , ID : int , ID : bool ) : int { var ID : print : ID : int bool - ID while { { } } func ID ( ) false }",
  "func ID ( ID : int , ID : int , ID : [ - ( true ( / ID ) / 123 ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ - ( true ( ] ID ) / 123 ) / bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ - ( true ( ] ID ) / } ) / bool ) { 123 func ID ( ) { }",
  "func ID ( ) : int - var ID : int var ID : bool while 123 / - - ( { false ) { } call ID ( ) }",
  "func ID ( } : int - var ID : int var ID : bool while 123 / - - ( { false ) { } call ID ( ) )",
  "func ID ( } int int - var ID : : var ID : bool while 123 / - - ( { false ) { } call ID ( ) )",
  "ID ID ( ID : [ ] bool , ID : [ ] int ) : [ ID [ - - func ] [ ID ] ] int { } func ID ( ) { }",
  "ID { ( ID : [ ] bool , ID : [ ] int ) : [ ID [ - - func ] [ ID ] ] int ID } func ID ( ) { }",
  "ID { [ ID : [ ] bool , ID : [ ] int ) : ( ID [ - - func ] [ ID ] ] int ID } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID { bool , ID : [ - false / true / ID - 123 + ( true ) ] int ) : }",
  "func ID ( : : [ ] bool , ID { bool , ID ID [ - false / true / ID - 123 + ( true ) ] int ) : }",
  "func ID ( : : [ ] bool , ID { bool , ID ID [ ) false / true / ID - 123 + ( true ) ] int - : }",
  "func ID ( : : bool , ID : int , ID : bool ) : int { var ID ID bool } func ID ( ID : [ true ] int ) { }",
  "func ID ( : : bool , ID : int , ID : bool ) : int { var ID ID ID } func ID ( bool : [ true ] int ) { }",
  "int ID ( : : bool , ID : int , ID : bool ) : func { var ID ID ID } func ID ( bool : [ true ] int ) { }",
  "func ID ( ID : [ ID ( ID [ ( ( ID ) ) ] [ - ( ) ID ] ) ] bool ) { }",
  "] ID ( ID : [ ID ( ID [ ( ( ID ) ) ] [ - ( ) ID ] ) func bool ) { }",
  "] ID ( ID : [ ID ( ID [ ( ( ID ) ) ] [ ) ( ) ID ] ) func bool - { }",
  "func ID ( ID : int ) : int { } func ID ( ) { print 123 - if true ) + - ID ( ( ( ID ) ) { } }",
  "func ID ( ID : int ) : int { } func ID ( ) { ) 123 - if true print + - ID ( ( ( ID ) ) { } }",
  "func ID ( ID : int ID : int { } func ID ( ) { ) 123 - if true print + - ID ( ( ( ) ) ) { } }",
  "func ID ( ID : int , ID : int ) { ID } - ID [ ( ID ) ] [ false ] ] [ ( true ) ] = true [ func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { ID } - ID [ ] ID ) ] [ false ] ( [ ( true ) ] = true [ func ID ( ) { }",
  "func ID ( ID : int [ ID : int ) { ID } - ID [ ] ID ) ] , false ] ( [ ( true ) ] = true [ func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : ID ) { while ( ( ID ) ) { } call int ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : ID ) { while ( ( ID ) ) ID } call int ( ) } func { ( ) { }",
  "func ID ( ID : bool , ID : int , ID : ) ) { while ( ( ID ) ID ID } call int ( ) } func { ( ) { }",
  "func ID ( ID : int ) : int { var ID : bool var ID : bool if - ID ( ( - - ( ( ) - ( - ( - ID ) ) ) ) ) ) ( { } } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : bool var ) : bool if - ID ( ( - - ( ( ) - ( - ( - ID ) ) ) ) ) ID ( { } } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ - 123 * bool * false >= true ] [ ID ] ] 123 ) { }",
  "func ID ( ID >= [ ID ( ) [ - 123 * bool * false : true ] [ ID ] ] 123 ) { }",
  "func ID ( ID >= [ ID ( ) [ - } * bool * false : true ] [ ID ] ] 123 ) { 123",
  "func ID ( ID : [ ] int ) : int { var ID : / print false bool ID ( ) [ false ] }",
  "func ID ( ID : [ ] int ) false int { var ID : / print false bool ID ( ) [ : ] }",
  "func ID ( ID : [ ] int ) false false { var ID : / print int bool ID ( ) [ : ] }",
  "func ID ( : : bool , ID : bool , ID ID [ ] bool ) : int { }",
  "func ID ( : ) bool , ID : bool , ID ID [ ] bool : : int { }",
  ": ID ( : ) bool , ID : bool , ID ID [ ] bool : func int { }",
  "func ID ( ) bool var ID : bool var ID : { if 123 * ID ( ) * true - ( false ) - - 123 { } }",
  "func ID ( ) bool var ID : bool var ID : { if 123 * ID ( 123 * true - ( false ) - - ) { } }",
  "func ID ( ) } var ID : bool var ID : { if 123 * ID ( 123 * true - ( false ) - - ) { bool }",
  "func ID var ID : int ) { ( ID : int } func ID ( ) : bool { while 123 * ( ID ) / ID { } }",
  "func ID var ID : ID ) { ( ID : int } func ID ( ) : bool { while 123 * ( int ) / ID { } }",
  "func ID var ID : ID ) { ( ID : int } 123 ID ( ) : bool { while func * ( int ) / ID { } }",
  "} ID ( ) { var ID : bool { var ID : int var ID : bool } while ( - - - ( ( - ( ( 123 ) ) ) ) ) { } } func ID ( ) { func",
  "} ID ( ) func var ID : bool { var ID : int var ID : bool } while ( - - - ( ( - ( ( 123 ) ) ) ) ) { } } func ID ( ) { {",
  "} ID ( ) func var - : bool { var ID : int var ID : bool } while ( - - - ( ( ID ( ( 123 ) ) ) ) ) { } } func ID ( ) { {",
  "func ID ( ID : int / ID : [ ( - 123 / ( true * ( ( false ) ) , 123 ) * ( ID ) ) ] [ ] int , ID : bool ) { }",
  "func ID ( ID ) int / ID : [ ( - 123 / ( true * ( ( false : ) , 123 ) * ( ID ) ) ] [ ] int , ID : bool ) { }",
  "func ID ( ID ) int / ID : [ ( int 123 / ( true * ( ( false : ) , 123 ) * ( ID ) ) ] [ ] - , ID : bool ) { }",
  "func ID ( int : ID ) { var ID : [ ] bool var ID : bool }",
  "func ID ( int ID : ) { var ID : [ ] bool var ID : bool }",
  "func ID ( int ID : ) { var ID : [ ] bool var ID : bool }",
  "( ID ( ) { var ID : bool print - func ID [ ( false ) ] ) } func ID ( ) { }",
  "( ID ( ) { var ID func bool print - : ID [ ( false ) ] ) } func ID ( ) { }",
  ") ID ( ( { var ID func bool print - : ID [ ( false ) ] ) } func ID ( ) { }",
  "func ID ( ID : [ - ( ) [ ID [ - ID true * ( ID ) / 123 ] ] ] bool ) { }",
  "func ID ( ID : [ - } ) [ ID [ - ID true * ( ID ) / 123 ] ] ] bool ) { (",
  "func : ( ID ID [ - } ) [ ID [ - ID true * ( ID ) / 123 ] ] ] bool ) { (",
  "func ID ( - : int { return ( ) ( - ( ID ) ) ) } func ID ( ) { }",
  "func ID ( - : int } return ( ) ( - ( ID ) ) ) { func ID ( ) { }",
  "func ID ( ID : [ - ID [ ( true - ID ( ) - ( ( - ID ) ) ) ] ] bool ) ( } func ID { ) { }",
  ") ID ( ID : [ - ID [ ( true - ID ( ) - ( ( - ID ) ) ) ] ] bool func ( } func ID { ) { }",
  ") ID ( ID : [ - ID [ ( true - ID ( ) - ( ( - ID ) ) ) ] ] bool func ( } func ID { ) { }",
  "ID func ( ID : int ) { var ID : int var ID : bool return ( - 123 / ID * ( false ) ) } func ID ( ) { }",
  "ID func ( ID 123 int ) { var ID : int var ID : bool return ( - : / ID * ( false ) ) } func ID ( ) { }",
  "func ID ( ID : ID , ID : [ ( 123 / ( ID ( ) [ ( ( false ) ) ] ) / - ( int ) ) ] [ ] int , ID : bool ) { }",
  "func ID / ID : ID , ID : [ ( 123 ( ( ID ( ) [ ( ( false ) ) ] ) / - ( int ) ) ] [ ] int , ID : bool ) { }",
  "func ID / ID : ID ID ID : [ ( 123 ( ( , ( ) [ ( ( false ) ) ] ) / - ( int ) ) ] [ ] int , ID : bool ) { }",
  "func ID ( ID : int , ID : [ ID ( ( 123 and true and ID ) ) ] [ ] int { { } func ID ( ) ) }",
  "func ID ( ID : int , ID : [ ID ( ( 123 and true and { ) ) ] [ ] int { ID } func ID ( ) ) }",
  "func ID ( ) : int , ID : [ ID ( ( 123 and true and { ) ID ] [ ] int { ID } func ID ( ) ) }",
  "func ID ( ID : int , ID : [ [ - ID ( ID + ID ] [ - ID ] ) ] bool ) { }",
  "func ID ( ID : int , ID : [ [ - ID { ID + ID ] [ - ID ] ) ] bool ) ( }",
  "func ID ( ID : int , ID : [ [ ) ID { ID + ID ] [ - ID ] - ] bool ) ( }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID int : }",
  "func ID ( ID : int , ID , bool : ID : int ) { var ID int : }",
  "} ID ( ID : int , ID , bool : ID : int ) { var ID int : func",
  "func ID ) ID : bool , ID : [ ( ( 123 * ( ID ) / - ( ( ID ) ) ) ) ] bool ( { }",
  "func ID ) ID : bool , ID : [ ( ( 123 * ( ID ) / ) ( ( ID ) ) ) - ] bool ( { }",
  "func : ) ID : bool , ID ID [ ( ( 123 * ( ID ) / ) ( ( ID ) ) ) - ] bool ( { }",
  "func ID ( ) : } { var ID : bool return ( - false * true and ID ) int func ID ( ) { }",
  "func ID ID ) : } { var ( : bool return ( - false * true and ID ) int func ID ( ) { }",
  "func ID ID ) : } int var ( : bool return ( - false * true and ID ) { func ID ( ) { }",
  "func ID ( ID : [ ] [ ID ( ) [ ID [ - ID ] [ ( ID ) ] ] ] [ ] [ ] [ ] } ) { bool func ID ( ) { }",
  "func ID ( ID : [ ] [ ID ( ) ) ID [ - ID ] [ ( ID ) ] ] ] [ ] [ ] [ ] } [ { bool func ID ( ) { }",
  "func ID ( ID : [ ] [ { ( ) ) ID [ - ID ] [ ( ID ) ] ] ] [ ] [ ] [ ] } [ { bool func ID ( ) ID }",
  "func ID ( ) { var ID : int while ID ( [ [ ID [ - 123 ] [ ID ] ] ) - - - false ] { } }",
  "} ID ( ) { var ID : int while ID ( [ [ ID [ - 123 ] [ ID ] ] ) - - - false ] { } func",
  "} - ( ) { var ID : int while ID ( [ [ ID [ - 123 ] [ ID ] ] ) ID - - false ] { } func",
  "func ID ( ID : bool , ID : int ) { var ID : bool var ID : [ true [ ID ( ( - ( 123 ) ) ) ] [ ] * ] [ ] [ ] bool }",
  "func ID ( ID : bool , ID : int ) { var ID : bool var ID : [ true [ ID ( ( - ) 123 ) ) ( ] [ ] * ] [ ] [ ] bool }",
  "func bool ( ID : bool , ID : int ) { var ID : ID var ID : [ true [ ID ( ( - ) 123 ) ) ( ] [ ] * ] [ ] [ ] bool }",
  "func ID ( ID : } - false / ID ( ) [ 123 and 123 / ID ] [ ID ] / - ID ] [ ] bool ) { [",
  "func ID ( ID : } - false / ID ( ) [ 123 and ] / ID 123 [ ID ] / - ID ] [ ] bool ) { [",
  "func ID ( ID : } - false / ID ( ) [ 123 and ] / ID 123 [ ID ] / - ID ] [ ] bool ) { [",
  "func ID ( ID : bool ) { ID var ID : [ ] int var { : int return ( - - - ID ) } }",
  "ID func ( ID : bool ) { ID var ID : [ ] int var { : int return ( - - - ID ) } }",
  "ID func ( ID : bool ) { ID var ID : [ ] int var { : int return ( - - - ID ) } }",
  "func int ( ID : int , ID : int , ID : ID ) { var ID : [ ] int }",
  "func int ( ID : int , ID var int , ID : ID ) { : ID : [ ] int }",
  "func int ] ID : int , ID var int , ID : ID ) { : ID : [ ( int }",
  "func ID ( ID : [ - ID * ( - ( bool and - - ( false ) and - ID ) ) ] [ ] [ ] [ ] false ) { }",
  "func ID ( ID : [ - ] * ( - ( bool and - - ( false ) and - ID ) ) ] [ ] [ ID [ ] false ) { }",
  "func ID ( ID : [ - ] * ( - ( bool and - - ( false ) [ - ID ) ) ] [ ] and ID [ ] false ) { }",
  "func ID ( ID : bool ) : [ ] bool { print ID : int var false / - true * false } func ID ( ) { }",
  "func ID ( ID : bool ) : } ] bool { print ID : int var false / - true * false [ func ID ( ) { }",
  "func ID ( ID : bool ) : } ] bool { print ID : int var false / - true * false [ func ID ( ) { }",
  "func ID ( ID : [ ( ID ( false / ( true ) [ ) ] [ ] [ ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ( ID ( false / ( true ) [ int ] [ ] [ ] ) ] ) ) { } func ID ( ) { }",
  "func ID ( ID : ] ( ID ( false / ( true ) [ int ] [ [ [ ] ) ] ) ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] bool var ID } bool while - ( - ID ) { : ID = ( ID ) }",
  "func ID - ) : bool { var ID : [ ] bool var ID } bool while ( ( - ID ) { : ID = ( ID ) }",
  "func ID - ) : bool { [ ID : var ] bool var ID } bool while ( ( - ID ) { : ID = ( ID ) }",
  "func ID ( ) { var : : int var ID ID int return }",
  "func ID ( ) { ID : : int var ID var int return }",
  "func ID ( ) { ID : : ID var int var int return }",
  "func ID ( ID : int , ID : int , ID : bool ) bool int { var ID : : var ID : [ ] int }",
  "func ID ( ID : int , ID : int , ID : bool : bool int { var ID : : var ID ) [ ] int }",
  "func ID ( ID : int , ID bool int , ID : : : bool int { var ID : : var ID ) [ ] int }",
  "func ID ( ID : [ ] int , ID : ( ) { call ID ( ( int true ) ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : call ) { call ID ( ( int true ) ) ) ( ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : call ) { call ID ( ( int { ) ) ) ( ID ( ) } func ID ( ) true }",
  "func ID ( ) { var ID : ID ] bool if ( 123 != ( ID ) ) { } { } } func [ ( ) { }",
  "func ID ( ) { var ID : ID ] bool if ) 123 != ( ID ( ) { } { } } func [ ( ) { }",
  "func ID ( ) { } ID : ID ] bool if ) 123 != ( ID ( ) { } { var } func [ ( ) { }",
  "func ID ( ) { ID [ 123 + - - ID ( ID ) ] [ ( ID ) ] } - ID while ( ID ) { } } func ID ( ) { =",
  "func ID ( ) { ID [ 123 + - - ID ( ) ) ] [ ( ID ) ] } - ID while ( ID ) { } } func ID ( ID { =",
  "func ID ( ) { ID [ 123 + - - ID ( ) ID ] [ ( ID ) ] } - ID while ( ID ) { } } func ID ( ) { =",
  "func ID ( ) { var ID : bool var ID : ] 123 / true + ID [ ID [ - 123 ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : bool ID ID : ] 123 / true + ID [ var [ - 123 ] [ ] [ ] int } func ID ( ) { }",
  "} ID ( ) { var ID : bool ID ID : ] 123 / true + ID [ var [ - 123 ] [ ] [ ] int } func ID ( ) { func",
  "func ID ( ) : bool , ID : bool ID { if ( - - ID ( ) [ false ] ) { } } func ID ( ) { }",
  "func ID ( ) : bool , ) : bool ID { if ( - - ID ( ) [ false ] ) { } } func ID ( ID { }",
  "func ID ( ) : bool , ) : bool ID { if ( - - ID ) ( [ false ] ) { } } func ID ( ID { }",
  "func ID ( ID : [ ] bool ) { { while true + ( ( ID ) ) + { { } } false } }",
  "func ID ( ID : } ] bool ) { { while true + ( ( ID ) ) + { { } } false [ }",
  "func ID ( ID : ] } bool ) { { while true + ( ( ID ) ) + { { } } false [ }",
  "func ID ( ) ID var ID : [ ] int var { : int return - - true * 123 or ID }",
  "func ID ( ) ID var ID : [ ] int var { - int return : - true * 123 or ID }",
  "func ID ( var ID ) ID : [ ] int var { - int return : - true * 123 or ID }",
  "func ID ( ) { ) ID ( ) print ( false - false * ID ( ) * ID ) } func ID ( call { }",
  "} ID ( ) { ) ID ( ) print ( false - false * ID ( ) * ID ) } func ID ( call { func",
  "func ID ( ) { var ID : int call ID ( ) ( false / true - ID [ - - false ] [ false ] - ID } func ID return ) { }",
  "func ID ( ) { var ID : int false ID ( ) ( false / true - ID [ - - false ] [ call ] - ID } func ID return ) { }",
  "func ID ( ) { var ( : int false ID ( ) ID false / true - ID [ - - false ] [ call ] - ID } func ID return ) { }",
  "func ID ( ID : bool , ID : ) ] [ ] int , ID : int ) { var ID : [ ] int } func ID ( ID : int [ { }",
  "func ID ( ID : bool , ID : ) ID [ ] int , ID : int ) { var ID : [ ] int } func ] ( ID : int [ { }",
  "func ID ( ID : bool , ID : ) ID [ ] int , [ : int ) { var ID : [ ] int } func ] ( ID : int ID { }",
  "func ID ( ID : [ - ID ( ) [ true / true or ID or - ( ( - ( ( false ) ) ) ) ] ] bool ) { } func ID { ) ( }",
  "func ID ( ID : [ - ID ( ) [ true / true or ID ( - or ( - ( ( false ) ) ) ) ] ] bool ) { } func ID { ) ( }",
  "func ID ( ID : [ - ID ( ) [ true ( true or ID ( - or ( - / ( false ) ) ) ) ] ] bool ) { } func ID { ) ( }",
  "func ID ( ID : [ ( true + ( false } ID [ - ID ] [ ID ] / false ) + ( ID ) ) ] [ ] bool ) { * func ID ( ) { }",
  "func ID ( func : [ ( true + ( false } ID [ - ID ] [ ID ] / false ) + ( ID ) ) ] [ ] bool ) { * ID ID ( ) { }",
  "func ID ( func : [ ( true + ( false } ID [ - ID ] [ ID ] / false ) + ( ID ) ) ] [ ] bool ) { * ID ID ( ) { }",
  "func ID ( ID : bool - ID : int ) { var ID : int var ID : [ - ID ( ) / , ID * true ] int }",
  "func ID ( ID : bool var ID : int ) { - ID : int var ID : [ - ID ( ) / , ID * true ] int }",
  "func ID ( } : bool var ID : int ) { - ID : int var ID : [ - ID ( ) / , ID * true ] int ID",
  "func ID ( ID : [ - ID - - false * - ( 123 / - ( ) ) ] bool ) { }",
  "func ID ( ID : [ - ID ( - false * - ( 123 / - - ) ) ] bool ) { }",
  "func ID ( ID : / - ID ( - false * - ( 123 [ - - ) ) ] bool ) { }",
  "func ID ( ID : bool ) - var ID : [ ] int { print true / false * - ( ( - { false ) ) } }",
  "func ID ( ID : bool ) - var ID : [ ] int { print true / false * - ( ( - { false } ) ) }",
  "func ID ( ID : bool ) - var ID : [ ] int } print true / false * - ( ( - { false { ) ) }",
  "func ID ( ) : int { var ID : [ ] ID ID [ ( - ( ID ) ) ] [ true ] ] bool } func [ ( ) { }",
  ") ID ( ) : int { var ID : [ ] [ ID [ ( - ( ID func ) ] [ true ] ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { ID ID : int return ( var ( 123 ) ) }",
  "func ID ( ID ] [ : int ) { ID ID : int return ( var ( 123 ) ) }",
  "func ID ( ] ID [ : int ) { ID ID : int return ( var ( 123 ) ) }",
  "func ID ( ) : int { var ID : [ ] [ 123 / ( false * ) / - - ( false ) ID * ( ID ) ] bool var ID : int }",
  "func ID ( ) : ( { var ID : [ ] [ 123 / ( false * ) / - - ( false ) ID * int ID ) ] bool var ID : int }",
  "func ID ( ) { ID ID : int { return ( - false / - ( ( ( ( var ) ) ) ) / ( 123 ) ) } while - ID { } }",
  "func ID ( ) { ID ID : ) { return ( - false / - ( ( ( ( var ) ) int ) / ( 123 ) ) } while - ID { } }",
  "func ID ( ) { return ID : ) { ID ( - false / - ( ( ( ( var ) ) int ) / ( 123 ) ) } while - ID { } }",
  "func ID ( ) { var ID : int ] int var ID : [ ] [ return 123 + ID [ ( - ( false ) ) ] [ ID ] + 123 }",
  "func ID ( ) { var ID : int ] ] var ID : [ ] [ return 123 + ID [ ( - ( false ) ) int [ ID ] + 123 }",
  "func ID ( ) { var ID * int { var ID : bool print ( - false : true ) if 123 { } } }",
  "func ID ( ) true var ID * int { var ID : bool print ( - false : { ) if 123 { } } }",
  "int ID ( ) true var ID * func { var ID : bool print ( - false : { ) if 123 { } } }",
  "func ID ( ID : ] ) { var ID : [ bool bool return }",
  "func bool ( ID : ] ) { var ID : [ ID bool return }",
  "func ID ( ) : bool ID { ID = ( 123 * ( 123 * ( false ) / - ID ) ) }",
  "func ID ( ) : bool ID ) ID = ( 123 * ( 123 * ( false ) / - ID { ) }",
  "func ID ( ) { call ID ( ( - true / ( false * 123 ID - - ID ) * * ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) { call ID ( ( - true / ( false * 123 ID - call ID ) * * ) ) - ID ( ) } func ID ( ) { }",
  "func ID ( ) { call ID ( ( - true / ( false * 123 ID - call ( ) * * ) ) - ID ( ) } func ID ID ) { }",
  "func ID ( ID : 123 , ID : [ ID [ ( - 123 / ( true ) / bool ) ] ] int , ID : int ) { }",
  "func ) ( ID : 123 , ID : [ ID [ ( - 123 / ( true ) / bool ) ] ] int , ID : int ID { }",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) { while 123 + ( ID ( { } call ID ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) { while 123 + ID ID ( { } call ( ) ) } func ID ( ) { }",
  ") ID ( ID : int , ID : int , ID : [ ] bool ) { while 123 + ID ID ( { } call ( ) ) } func ID ( func { }",
  "func ID ( ) { while - ( false + - { * ID or - ID ) false } { } } func ID ( ) { }",
  "func ID ( ) { while - ( false + - { * ID ) - ID ) false } { } } func ID ( or { }",
  "func while ( ) { ID - ( false + - { * ID ) - ID ) false } { } } func ID ( or { }",
  "func [ ( ) { while ID [ ID [ ( ID ) ] ] ID ( - 123 ) ] { } }",
  "func [ ( ) { while ID [ ID [ ( ID ) ] ] ID ( - 123 ) ] { } }",
  "func [ ( ) { while ID [ ID [ ( ID ) ] ] ID ( - } ) ] { } 123",
  "func ID ( ID : bool , ID { [ ] bool ) : var ID : bool var ID : [ ] int } func ID ( ) { print false }",
  "func ID ( ID : bool , ID { [ ] bool ) var var ID : bool : ID : [ ] int } func ID ( ) { print false }",
  "func ID ( ID : bool , ID { [ ] bool ) var var ID : bool : ID : print ] int } func ID ( ) { [ false }",
  "func ID ( ID : bool ) : bool { var ID : int var ID : ( if ID ( ) [ true ] [ ( bool ( ID ) ) ) ] { } ID = false } func ID ( ) { }",
  "func : ( ID : bool ) ID bool { var ID : int var ID : ( if ID ( ) [ true ] [ ( bool ( ID ) ) ) ] { } ID = false } func ID ( ) { }",
  "func : ( ID : bool ) ID bool { var ID : int var ID : ( if ID ( ) [ true ] [ ( bool ( ID ) ) ) { { } ID = false } func ID ( ) ] }",
  "func ID ( ID : [ true * - true - ( ( ID ( ) ) ) + int ] [ ] true ) { } func ID ( ) { }",
  "func ID ( ID : [ true * - true - ( ( ID ( + ) ) ) int ] [ ] true ) { } func ID ( ) { }",
  "func ID ( + : [ true * - true - ( ( ID ( ID ) ) ) int ] [ ] true ) { } func ID ( ) { }",
  "func ID ( ID : [ ] : , ID int bool , ID : [ ] int ) { return }",
  "func ID ( ID : [ ] : , ID int bool , ID : [ { int ) ] return }",
  "func ID ( ID : [ ] : , ID ) bool , ID : [ { int int ] return }",
  "func ID ( return { { } ) } func ID ( ) : int { var ID : bool var ID : bool return }",
  "func ID } return { { } ) ( func ID ( ) : int { var ID : bool var ID : bool return }",
  "func ID return } { { } ) ( func ID ( ) : int { var ID : bool var ID : bool return }",
  "func ID ( ID : bool , : : bool ) : int { var ID : [ ] int { var ID ID bool if ID { } if ID { } } ID = false } func ID ( ) { }",
  "func ID ( ID : bool , : : bool ) : int { var ID : [ ] int { var ID ID bool if ID { } if ID } } { ID = false } func ID ( ) { }",
  "func ID ( ID : bool , : : bool ) : int { var ID : [ ] int { var ID ID bool if ID { } if ID ( } { ID = false } func ID } ) { }",
  "func ID ( ID : bool ) : [ 123 / ID ] - ID ( ID ) ) / ID ( [ ] [ ] bool { }",
  "func { ( ID : bool ) : [ 123 / ID ] - ID ( ID ) ) / ID ( [ ] [ ] bool ID }",
  "func ID ( ) : int { ( ID : [ ] int if - ID ( ) * - false / 123 { } print - ( - ( var 123 ) ) ) } func ID ( ) { }",
  "func ID ( ) : int { ( ID : [ ] int if - ID ( ) * ( false / 123 { } print - ( - ( var 123 ) ) ) } func ID - ) { }",
  "func ID ( ) : int { ( ID : [ ] int if - ID ( ) * ( false / 123 { } { - ( - ( var 123 ) ) ) } func ID - ) print }",
  "func ID ( ) { var ID : bool var ID : [ ] int while ( false * true true ) / - ( ( ) ) { } }",
  "func ID ( ) { var } : bool var ID : [ ] int while ( false * true true ) / - ( ( ) ) { ID }",
  "func ID ( ) { var } : bool var ID : [ ] int while ( false ID true true ) / - ( ( ) ) { * }",
  "ID ID ( ) : int { var ID : [ ( ( ( ( ( 123 ) ) ) ) ) ] [ ] bool } func func ( ) { }",
  "ID ID ( ) : int { ) ID : [ ( ( ( ( ( 123 ) ) ) var ) ] [ ] bool } func func ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) { call ID ( ( true / ID * - - } - - ( false ) ) ) call ID ( ) } func ID ( ) { -",
  "func ID ( ID : [ ] bool ID , : bool ) { call ID ( ( true / ID * - - } - - ( false ) ) ) call ID ( ) } func ID ( ) { -",
  "func ID : ) { var ID ( [ ] int var ID : [ 123 / - - - true + true ] [ ] bool } func ID ( ) { }",
  "{ ID : ) { var ID ( [ ] int var ID : [ 123 / - - - true + true ] [ ] bool } func ID ( ) func }",
  "{ ID : ) [ var ID ( [ ] int var ID : [ 123 / - - - true + true ] { ] bool } func ID ( ) func }",
  "func ID ( ID : int , ID [ : ID [ ( 123 <= true ) ] ] int , ID : int ) { }",
  "func ID ( ID : int ] ID [ : ID [ ( 123 <= true ) ] , int , ID : int ) { }",
  "ID func ( ID : int ] ID [ : ID [ ( 123 <= true ) ] , int , ID : int ) { }",
  "func ID ( ID : bool , ID : [ ID ( ID ( false + - ID + ) ( - - false - ) ) ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID ( ID ( false + ID ID + ) ( - - false - ) ) ] int , ID : bool ) { } func - ( ) { }",
  ") ID ( ID : bool , ID : [ ID ( ID ( false + ID ID + ) ( - - false - ) ) ] int , ID : bool ) { } func - ( func { }",
  "func ID ( ID : bool , ID : [ ] int ) : bool { [ ID : int var ID : var true * ID / true ] int }",
  "func ID ( ID : bool , ID : [ ] int ) : bool int [ ID : { var ID : var true * ID / true ] int }",
  "func ID ( ID : bool , ID : [ ] int ) : / int [ ID : { var ID : var true * ID bool true ] int }",
  "func ID ( ID : int , ID : [ ID ( - 123 / ID ( ( 123 ) ) / ID ) ] : , ID bool [ ] int ) { }",
  "func ID ( ID : int , ID : [ ID ( - 123 / ID ( ( 123 ) int / ID ) ] : , ID bool [ ] ) ) { }",
  "func ID ( ID : int , ID : [ ID ( - / 123 ID ( ( 123 ) int / ID ) ] : , ID bool [ ] ) ) { }",
  "func ID ( ID : bool [ ID : , ] bool , ID : bool ) { print ID ( ID ) } func ID ( ) { }",
  "func ID ( ID : { [ ID : , ] bool , ID : bool ) bool print ID ( ID ) } func ID ( ) { }",
  "func ID ( ID : { [ ID : , ] bool , ID : bool ) bool print ID ( ID ) } func ID ( ) { }",
  "func ID } ) { var ID : [ ID [ ( ID [ false ] ) ] ] int (",
  "func ID } ) { var false : [ ID [ ( ID [ ID ] ) ] ] int (",
  "func ID } ) { var false : [ ID [ ) ID [ ID ] ( ] ] int (",
  "func ID ( ID : [ ] int , ID : [ ] , - - ID ( ) * - - - ( ID ) * ID ] [ ] int [ ID : [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ ) , - - ID ( ] * - - - ( ID ) * ID ] [ ] int [ ID : [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ ) , - - ID ( ] ID - - - ( ID ) * * ] [ ] int [ ID : [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( } : bool ) : bool { var ID : int if - ( ID [ true ] ) { ID { } } func ID ( ) { }",
  "func ID ( } : bool { : bool ) var ID : int if - ( ID [ true ] ) { ID { } } func ID ( ) { }",
  "func ID ( } : bool { : bool ) var ID : int if - ( ID [ { ] ) { ID true } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : int var ID : bool ID - ID ( ) * ( return ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : int var ID : bool ID - ID ( ) * ( return ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : int var ID : bool ID - ID ( ) * ( return ) } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : bool while ID ID false + ( - true ) + - ( [ ) ] [ - false ] { } { } } func ID ( ) { }",
  "func ID ( ID : bool ) : int var { ID : bool while ID ID false + ( - true ) + - ( [ ) ] [ - false ] { } { } } func ID ( ) { }",
  "func ID ( ID : bool ) : int var { ) : bool while ID ID false + ( - true ) + - ( [ ID ] [ - false ] { } { } } func ID ( ) { }",
  "func ID ( ) : [ ( - * ID false / ( false * ( - 123 ) ) ) ] [ ] [ ] int { }",
  "func ID ( ) : [ ( - * ID false ( ( false * / - 123 ) ) ) ] [ ] [ ] int { }",
  "func ID ( ) false [ ( - * ID : ( ( false * / - 123 ) ) ) ] [ ] [ ] int { }",
  "func ID ( ) : bool ) { print ID [ ID ( ID [ - ( ID ) ] [ ID ] ] call ID ( ) }",
  "func ID ( ) [ bool ) { print ID : ID ( ID [ - ( ID ) ] [ ID ] ] call ID ( ) }",
  "func ID ( ) [ bool ) [ print ID : ID ( ID { - ( ID ) ] [ ID ] ] call ID ( ) }",
  "func ID ( ID : [ func bool , ID : [ ] int , ID : [ 123 * false * false - - ID ] bool ) { } ] ID ( ) { }",
  "func ID ( ID : [ func bool , ID : [ ] int : ID , [ 123 * false * false - - ID ] bool ) { } ] ID ( ) { }",
  "func ID ( ID : int ) { var ID : int call ID ( - ( ID ] false [ [ false ] ) ) ID = - true } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int call ID ( - ( ID ] false [ [ false ] ID ) ) = - true } func ID ( ) { }",
  "func ID ( ID : int ) ] var ID : int call ID ( - ( ID { false [ [ false ] ID ) ) = - true } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ] [ ( 123 / ID [ - ( ( ID ) ) ] [ - - * ID ) ] ( - - false ) ] bool ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ] ) ( 123 / ID [ - ( ( ID ) ) ] [ - - * ID [ ] ( - - false ) ] bool ) { }",
  "func ID ( ID : bool , ID : int , ID : - ] ) ( 123 / ID [ - ( ( ID ) ) ] [ - - * ID [ ] ( [ - false ) ] bool ) { }",
  "func ID ( ID : int ) { return } func ID ( ID : bool ) : bool { var ID : bool { var ID : [ bool ] var ID : bool } if - - - ID { } }",
  "func ID ( ID : int ) { return } func ID ( ID : bool ) : bool { var ID : bool { - ID : [ bool ] var ID : bool } if - - var ID { } }",
  "func ID ( ) : [ ] [ false and ID ( - ID ( ID ) ) ] int { } func ID ) ( { }",
  "func ID ( ) : [ ] [ false and ID ( - ID ( ID ) ) ] int { } func ID ) ( { }",
  "func ID ( ) : [ ] [ false and ID ( - ID ( int ) ) ] ID { } func ID ) ( { }",
  "func ID ( ID : [ ] bool , ID : [ ] int ) { return bool func ID ( ) : } { var ID : bool var ID : bool }",
  "func ID ( ID : [ ] bool , ID : [ ] int ) var return bool func ID ( ) : } { { ID : bool var ID : bool }",
  "func ID ( ID : [ ] bool , ID : [ ] int ) var return bool func ID ( : ) } { { ID : bool var ID : bool }",
  "func ID ( ID : int , ID ] int ) : [ true * - 123 * ( - - ( 123 ) ) : [ ] bool { } func ID ( ) { }",
  "func ID ( ID ( int , ID ] int ) : [ true * - 123 * : - - ( 123 ) ) : [ ] bool { } func ID ( ) { }",
  "func ID ( ID ( int , ID ] int ) : [ true * - 123 { : - - ( 123 ) ) : [ ] bool * } func ID ( ) { }",
  "func var ( ) { ID ID : [ ] int var ID : int return }",
  "func return ( ) { ID ID : [ ] int var ID : int var }",
  "func return ( ) { ID ID } [ ] int var ID : int var :",
  "func ID ( , : [ ] bool ID ID : int ) { var ID : int } func ID ( ID : int , ID : [ true ] bool ) { }",
  "func ID ( , : [ ID bool ID ID : int ) { var ID : int } func ID ( ] : int , ID : [ true ] bool ) { }",
  "func ID ( , : [ , bool ID ID : int ) { var ID : int } func ID ( ] : int ID ID : [ true ] bool ) { }",
  "func ID ( ) { while ID + - ( ID ( ID ) ) - - - false { } { } } func 123 ( ) { }",
  "func ID ( ) ( while ID + - { ID ( ID ) ) - - - false { } { } } func 123 ( ) { }",
  "func ID ( ( ( while ID + - { ID ) ID ) ) - - - false { } { } } func 123 ( ) { }",
  "func { ( ) { var ID : bool var ID : bool if - ID ( ) [ ID ( ) ] [ ID ] { } while false ID } } func ID ( ) { }",
  "func { ( ) { var ID : bool var ID : bool if - ID ( while [ ID ( ) ] [ ID ] { } ) false ID } } func ID ( ) { }",
  "func { ( ) { var ID : bool var ID : bool if - ID ( while } ID ( ) ] [ ID ] { } ) false ID [ } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] int ) : int { ID [ - ( ID ) ] = ID if ) { } } func ID ( ID { }",
  "func ID ( ID : bool , ID : , bool ID : [ ] int ) : int { ID [ - ( ID ) ] = ID if ) { } } func ID ( ID { }",
  "func ID ( ) : bool { var ID false bool if ID [ ID ( ) [ 123 ] [ false ] ] [ - ( - ( 123 ) ) ] { } print - : }",
  "func ID ( ) ID bool { var : false bool if ID [ ID ( ) [ 123 ] [ false ] ] [ - ( - ( 123 ) ) ] { } print - : }",
  "func ID ( ID : [ ( ID - ( true + true + - ( true ) ) ) ] } ) { int func ID ( ) { }",
  "func ID ( ID : [ ( ID ] ( true + true + - ( true ) ) ) - } ) { int func ID ( ) { }",
  "func ID ( ID ] [ : [ ( - true * false != ( - false ) ) ] int ) { }",
  "func ID ( ID ] [ : [ ( true - * false != ( - false ) ) ] int ) { }",
  "func ID ( ID ] [ : [ ( ) - * false != ( - false ) ) ] int true { }",
  "func ID ( ID int [ ] int ) { var ID : [ ] [ - true + ID [ ID ] [ ID ] ] [ ] bool var ID : : }",
  "func ID ( ID int [ ] int ) { var ID : [ ] [ - true + ID [ ID ] [ ID ] ] [ ] bool var ID : : }",
  "func ID ( ID int [ ] int ) { var ID : [ ] : - true + ID [ ID ] [ ID ] ] [ ] bool var ID [ : }",
  "func ID ( ) : [ ( ID ( ) / ID ( ) != - - ( ( false ) ) func ] bool { } ) ID ( ) { }",
  "func ID ( ) : [ ( ID ( } / ID ( ) != - - ( ( false ) ) func ] bool { } ) ID ( ) { )",
  "func ID ( ) : [ ( ID ( } / ID ( ) != - - ( ( false ) ) func ] bool { } ) ID ( ) { )",
  "func ID ( ) { var ID : bool var ID : bool { var ID : int var ID : int return ID - ID ( ID ) } print ( ( ( - ) ) ) }",
  "func ID ( ) { var ID : bool var ID : bool { var ID : ( var ID : int return ID - ID int ID ) } print ( ( ( - ) ) ) }",
  "func ID ( ) { var ID : bool var ID : bool { var ID : ( var ID : int return ID - ID int ID ) } print ( ( ( ) - ) ) }",
  "func ID ( ) : int { var ID : bool while ( * ( - - ID - ID ) / true { } } func ID true ) { }",
  "func ID ( ) : int { var ID : bool while func * ( - - ID - ID ) / true { } } ( ID true ) { }",
  "func ID ( ) : bool { { var ID : int var ID : bool - - while false * - true * - ID { } } } func ID ( ) { }",
  "func ID ( ) : bool { ID var ID : int var ID : bool - - while false * - true * - ID { } } } func { ( ) { }",
  "func ID ( ) : bool { ID var ID : int var ID : bool - - while false * true - * - ID { } } } func { ( ) { }",
  "func ID ( ) : - ( - [ 123 / ID [ - ID ( ) ] [ false ] ) ] int { }",
  "func ID ( ) : - ( - [ 123 / ID [ - ID false ) ] [ ( ] ) ] int { }",
  "func ID ( ) : - ( - [ [ / ID [ - ID false ) ] 123 ( ] ) ] int { }",
  "func ID ( ID : [ ] bool ) { call ID ( - ID [ - false { ( - ID ) + - ( false ) ] [ ID ] ) } func ID ( ) + }",
  "func ID ( ID : [ ] bool ) ( call ID ( - ID [ - false { ( - ID ) + - { false ) ] [ ID ] ) } func ID ( ) + }",
  "func ID ( ID : [ ] bool ) ( call ID ( - ID [ - false + ( - ID ) { - { false ) ] [ ID ] ) } func ID ( ) + }",
  "func ID ( ID : { ] bool , ID : bool ) [ var ID : bool var ID : bool { var ID : bool var ID : [ ] bool } }",
  "func } ( ID : { ] bool , ID : bool ) [ var ID : bool var ID : bool { var ID : bool var ID : [ ] bool ID }",
  "func } ( ] : { ID bool , ID : bool ) [ var ID : bool var ID : bool { var ID : bool var ID : [ ] bool ID }",
  "func ID ( ) int bool { var ID : [ ID ( ( ID ( ) ) ) ] [ ] bool var ID : [ ] [ ] : }",
  "func ID bool ) int bool { var ID : [ ID ( ( ID ( ) ) ) ] [ ] ( var ID : [ ] [ ] : }",
  "func ID ( ) { } : ID ( ID : bool , ID func int , ID : [ - 123 / ( - ID ) ] bool ) { }",
  "func ID ( ) { } : ID ( ID : bool , ID func 123 , ID : [ - int / ( - ID ) ] bool ) { }",
  "func ID ( ) { } : ID ( ID : bool , ID func 123 ) ID : [ - int / ( - ID ) ] bool , { }",
  "func , ( ID : bool ID ID : int ) : [ ( - - - - ( - ( 123 ) ) ) ] int { } func ID ( ) { }",
  "func , ( ID : bool ID ID : int ) : [ ( - - - - ( - ( 123 ( ) ) ] int { } func ID ) ) { }",
  "func , ( ID : bool ID ID : int ) : [ ( - - - - ( - ( func ( ) ) ] int { } 123 ID ) ) { }",
  "func ID ( ) ( bool { var ID : [ ] int var ID : bool return } func ID : ID : bool ) { }",
  "func ID ( ID ( bool { var ID : [ ] int var ID : bool return } func ID : ) : bool ) { }",
  "func ID ( ID ( bool { var ) : [ ] int var ID : bool return } func ID : ) : bool ID { }",
  "func ID ( ) { return ( 123 / [ ID / ID ( ID ] [ - false ] ) / ID ) }",
  "func ID ( [ { return ( 123 / ) ID / ID ( ID ] [ - false ] ) / ID ) }",
  "func ID ( [ { return ( 123 / ) ID ID ID ( ID ] [ - false ] ) / / ) }",
  "func ID ( : : bool , ID : bool , ID : int ) : bool { var ID ID bool while ID + false { } }",
  "func ID ( : : bool , ID : bool , ID : ID ) : bool { var ID int bool while ID + false { } }",
  "func ID ( : : bool , ID : bool , ID : ID ) : bool { var ID + bool while ID int false { } }",
  "func ID ( ID : { ) { var ID : int var ID : int call ID ( true / ( ( - - - - 123 ) ) ) ID = ( 123 ) } func ID ( ) int }",
  "func ID ( ID : { int { var ID : ) var ID : int call ID ( true / ( ( - - - - 123 ) ) ) ID = ( 123 ) } func ID ( ) int }",
  "func : ( ID ID { int { var ID : ) var ID : int call ID ( true / ( ( - - - - 123 ) ) ) ID = ( 123 ) } func ID ( ) int }",
  "func ID ID ID : bool , ID : [ ( ( ( ID [ ( ] ) ) ) ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ID ID : bool , ID : [ ( ( ( ID [ ( ] ) ) ) ] bool , ID : int ) } } func ID ( ) { {",
  "func ID ID ID : bool , { : [ ( ( ( ID [ ( ] ) ) ) ] bool , ID : int ) } } func ID ( ) { ID",
  "func ( ID ) : int { var ID : int print ID / - ( ID [ ID ] [ ( - true ) ] ) * ID } func ID ( ) { }",
  "func ( ID ) : int { var ID ID int print : / - ( ID [ ID ] [ ( - true ) ] ) * ID } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ( { - ID + ID ) ) ] bool } func ID ( ) ( }",
  "func ID ( ) { var ID : [ - } { - ID + ID ) ) ] bool ( func ID ( ) ( }",
  "func ID ( ) { var ID : [ - } { - ID + ID ) ) ] } ( func ID ( ) ( bool",
  "func ID ( ID : bool ID ID : bool , ID : int ) { var ID : bool var ID : int } func ID ( , : bool ) { }",
  "func ID ( ID : bool ID ID : bool , ID : int ) func var ID : bool var ID : int } { ID ( , : bool ) { }",
  "func ID ( ID : bool ID ID : bool , ID : int ) func var , : bool var ID : int } { ID ( ID : bool ) { }",
  "func ID ( ID : [ ] [ ID ( ) [ ID ] ( ( ( 123 ) ) ) ] [ ] bool ) { }",
  "func ID ( ID 123 [ ] [ ID ( ) [ ID ] ( ( ( : ) ) ) ] [ ] bool ) { }",
  "func ID ( ID 123 [ ] [ ID ( ) [ ID ] ( ( ( : ) ) ) ] [ ] bool ) { }",
  "func ID ( ) { if ( - 123 } ( ( true ) ) ) { / } func ID ( ) { }",
  "func ID ( ) { if ( - 123 } ( ) true ( ) ) { / } func ID ( ) { }",
  "func ID ( ) { if ( - ) } ( ) true ( ) ) { / } func ID ( 123 { }",
  "func : ( ) : int { var ID : bool var ID ID int }",
  "func : int ) : int { var ID : bool var ID ID ( }",
  "var : int ) : int { var ID : bool func ID ID ( }",
  "func ID ( ID : [ ] bool ) { var ID : [ ( ID { ID ] [ ID ] ) ] int } func ID ( ) [ }",
  "func ) ( ID : [ ] bool ID { var ID : [ ( ID { ID ] [ ID ] ) ] int } func ID ( ) [ }",
  "func ) ( ID : [ ] bool ID { var int : [ ( ID { ID ] [ ID ] ) ] ID } func ID ( ) [ }",
  "func ID ( ID : bool ) : int { var ID : [ ] bool ID = false / ID [ ( - ( } ( - - 123 ) ) ) ) ] [ ( ( ID ) ) ] / - 123 ( func ID ( ) { }",
  "func ID ( ) : bool ) : int { var ID : [ ] bool ID = false / ID [ ( - ( } ( - - 123 ) ) ) ) ] [ ( ( ID ID ) ] / - 123 ( func ID ( ) { }",
  "ID ID ( ) : bool ) : int { var func : [ ] bool ID = false / ID [ ( - ( } ( - - 123 ) ) ) ) ] [ ( ( ID ID ) ] / - 123 ( func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID ( [ ID ( ID ( ( ( 123 ) ) ) ) ] bool ) { } func ID : ) { }",
  "func ID ( ID : bool , ID : int , ID ( [ ID ( ID ( ( ) 123 ( ) ) ) ] bool ) { } func ID : ) { }",
  "func ID ( ID : bool , ID : int , ID ( [ ID ( ID ( ( ) 123 ( bool ) ) ] ) ) { } func ID : ) { }",
  "func ID ( ID : bool , - : [ ID ID ( ID ( ) [ - ID ] ) + ID ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : bool , - : [ ID ID ( ID ( ) ) - ID ] ) + ID ] int , ID : int [ { } func ID ( ) { }",
  "func ID ( ID , bool : - : [ ID ID ( ID ( ) ) - ID ] ) + ID ] int , ID : int [ { } func ID ( ) { }",
  "var ID ( ID : int ) : int { func ID : bool }",
  "var ID ( ID : int ) : int { func ID : } bool",
  "func ID ( ID : int ) : int { var ID : } bool",
  "func ID ( ID : int } { var ID : bool var ID : bool { var ID : bool var ID : bool } if false { ) }",
  "func ID ID ID : int } { var ID : bool var ( : bool { var ID : bool var ID : bool } if false { ) }",
  "func ID ID ID { int } { var ID : bool var ( : bool : var ID : bool var ID : bool } if false { ) }",
  "func ID ( ID : [ } / ( ID ( ) [ ( - ( ID ) ) ] ) * true ] int ) { false func ID ( ) { }",
  "func ID ( ) : [ } / ( ID ( ) [ ( - ( ID ) ) ] ) * true ] int ) { false func ID ( ID { }",
  "func ID ( ) : [ } / ( ID ( ) [ ( - ( ID ( ) ] ) * true ] int ) { false func ID ) ID { }",
  "( ID ( ) { var ID : int } func ID ( ) : int { var ID : int call ID func ) ID ( ) = - - ID }",
  "( ID ( ) { var ID : int } func ID ( ) : ID { var ID : int call ID func ) ID ( ) = - - int }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : [ ] true ID ( [ ) ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : [ ] ( ID true [ ) ] bool } func ID ( ) { }",
  "func ID ( ID } int , ID : bool ) : bool { var ID : [ ] ( ID true [ ) ] bool : func ID ( ) { }",
  "func ID ( ) : int { print 123 } ID ( ) [ - - ID / - ID * true ] ID = ID *",
  "func ID ( ) : int - print 123 } ID ( ) [ - - ID / { ID * true ] ID = ID *",
  "func ID ( ID : int - print 123 } ) ( ) [ - - ID / { ID * true ] ID = ID *",
  "func ID ( ) { var ID : int var ID : [ ( - true * - - ID ( ) ] ( - ID ) ) / int } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ( - true * - - ID ( ) ] ( } ID ) ) / int - func ID ( ) { }",
  "func ID ( ID : int ) { var ID - [ ] int while false - ( - : - - ID ) { } if true { } } func ID ( ) { }",
  "func ID while ID : int ) { var ID - [ ] int ( false - ( - : - - ID ) { } if true { } } func ID ( ) { }",
  "func ID while ID : int ) { var ID - ) ] int ( false - ( - : - - ID ) { } if true { } } func ID ( [ { }",
  "func ID ( ) : [ ] [ ] bool ] [ { var ID : bool }",
  "func ID ( ) : [ bool [ ] ] ] [ { var ID : bool }",
  "func ID ( ) : [ bool [ ] ] ] [ { bool ID : var }",
  "func ID ( ) : * { var ID : bool var ID : bool ID = - true int false + 123 } func ID ( ) { }",
  "func ID ( ) : * { var ID : bool var ID : bool ID = - true int false + 123 } { ID ( ) func }",
  "func ID ( ) : * { var ID : bool var ID { bool ID = - true int false + 123 } : ID ( ) func }",
  "func ID ( ) : [ ID [ ] >= ID [ ID ] ] ] [ ] [ ] [ false [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ID [ ] >= ID [ ID ] ] ] [ ] [ ] [ false [ ] [ } bool { ] func ID ( ) { }",
  "func ID ( ) : [ ID [ ] >= ID [ ID } ] ] [ ] [ ] [ false [ ] [ ] bool { ] func ID ( ) { }",
  "func ID ( ) { var ID : int return } func ID ( ID : [ ID [ true * ] ID ) * 123 ( [ ID ] ] [ ] [ ] int ) { }",
  "func ID ( ) ID var ID : int return } func ID ( ID : [ ID [ true * ] { ) * 123 ( [ ID ] ] [ ] [ ] int ) { }",
  "func ID ( ) ID var ID : int return } func ID ( ID : [ ID [ true * ] [ ) * 123 ( [ ID ] ] [ ] { ] int ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { { ) true / ID ( ) [ ID ] * ( ( 123 while ) { } { } } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { / ) true { ID ( ) [ ID ] * ( ( 123 while ) { } { } } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { / ) true { ID ( ) [ ID ( * ( ] 123 while ) { } { } } } func ID ( ) { }",
  "func ID ( ID : [ ( - - { / ID + ID ( ) [ 123 ] [ ID ] ) ] int ) { } func ID ( ) ID }",
  "func ID ( ID : [ ( - - { / ID + ID ( ) [ 123 ] [ ID ] ) ] } ) { } func ID ( ) ID int",
  "func ID ( ID : [ ( - - ( / ID + ID { ) [ 123 ] [ ID ] ) ] } ) { } func ID ( ) ID int",
  "func ID ( ID ) bool , ID : [ ] int ) : int { var ID : bool var ID : bool } func ID ( : { while ( ( ( ( ID ) ) ) ) { } }",
  "func ID ( ID ) bool , ID : [ ] int ) : int { bool ID : var var ID : bool } func ID ( : { while ( ( ( ( ID ) ) ) ) { } }",
  "func ID ( ID ) bool , ID : [ ] int ) : int { bool ID : var var ID ) bool } func ID ( : { while ( ( ( ( ID ) ) ) : { } }",
  "func ID ( ID : bool ) { var ID : [ - 123 * ID [ 123 != ( ( ID true ) ) ) ] [ ( ( ) ] ] [ ] bool var ID : bool } func ID ( ) { }",
  "func ID [ ID : bool ) { var ID : [ - 123 * ID ( 123 != ( ( ID true ) ) ) ] [ ( ( ) ] ] [ ] bool var ID : bool } func ID ( ) { }",
  "func ID int ) { var ID : ( var ID : int { { } call ID ( ) return - true } }",
  "func ID int ) { var ID : ( var ID : int ) { } call ID ( { return - true } }",
  "func ID int ) { var ID : ( var ID ) int : { } call ID ( { return - true } }",
  "func ID ( ) { return false + ( ID ID ) [ ID ] [ - ID ] ) - - ( ( ) }",
  "func ID ( ) { return false + ( ID ID ) [ ID - [ - ID ] ) ] - ( ( ) }",
  "func ID ( ) { return ID + ( false ID ) [ ID - [ - ID ] ) ] - ( ( ) }",
  "func ID ( ID : [ ] [ ] bool , ID : [ ( ( - 123 ) ) { [ ] bool ) ] } func ID ( ) { }",
  "func ID { ID : [ ] [ ] bool , ID : [ ( ( - 123 ) ) { [ ] bool ) ] } func ID ( ) ( }",
  "func ID { ID : [ ] [ ] bool , ID : [ ( ( - 123 ) ) { ) ] bool [ ] } func ID ( ) ( }",
  "func ID ( ) : bool { var ( : [ - true + - true and - ID - true ) ] int } func ID ( ) { }",
  "func ID ( ) : bool ID var ( : [ - true + - true and - { - true ) ] int } func ID ( ) { }",
  "func ID ( ] : bool ID var ( : [ - true + - true and - { - true ) ) int } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ ] bool , ID : [ ] int ) { var ID : ( } func ID bool ID : bool ) { }",
  "func ID ( ID : [ ] int , ID func [ ] bool , ID : [ ] int ) { var ID : ( } : ID bool ID : bool ) { }",
  "func ID ( ) { print ( - - false / - - - ( false ) * - ID 123 - ( false ) ) }",
  ") ID ( func { print ( - - false / - - - ( false ) * - ID 123 - ( false ) ) }",
  ") ID ( func { print ( - - false / - - } ( false ) * - ID 123 - ( false ) ) -",
  "func ID ( ) ) int { var ID : [ ( ID - ID ( ) [ - - ID ] : ] bool var ID : [ ] bool }",
  "func ID ( bool ) int { var ID : [ ( ID - ID ( ) [ - - ID ] : ] bool var ID : [ ] ) }",
  "func ID ( ID : int ) : bool bool var ID : [ 123 * ( ( 123 ) ) / ID ] [ ] bool var ID : { } func ID ( ) { }",
  "func ID ( ID : int ) : bool bool var ID : [ 123 * ( ( 123 ) ) / ID ] [ ID bool var ] : { } func ID ( ) { }",
  "func ID ID ID : int ) : bool bool var ID : [ 123 * ( ( 123 ) ) / ID ] [ ( bool var ] : { } func ID ( ) { }",
  "func : ( ID : int , ID ID [ - ID [ ID [ true * ID ] ] [ - ( false ) ] ] int , ID : bool ) { }",
  "func : ( ID ID int , ID : [ - ID [ ID [ true * ID ] ] [ - ( false ) ] ] int , ID : bool ) { }",
  "func : ( ID ID int , ID [ [ - ID : ID [ true * ID ] ] [ - ( false ) ] ] int , ID : bool ) { }",
  "func ID ( ) { var ID : int var ID : [ false and ID * - false * false and ( ( ID ) ) ] int } func { ( ) ID }",
  "func ID ( ) { var ID : int var ID : [ false - ID * and false * false and ( ( ID ) ) ] int } func { ( ) ID }",
  "func : ( ) { var ID : int var ID ID [ false - ID * and false * false and ( ( ID ) ) ] int } func { ( ) ID }",
  "func ID ( ID : = , ID : [ ] bool ) { call ID ( ) ID ( - - ( ID ) ) int - ID } func ID ( ) { }",
  "int ID ( ID : = , ID : [ ] bool ) { call ID ( ) ID ( - - ( ID ) ) func - ID } func ID ( ) { }",
  "func ID ( ID : [ ] [ 123 - ( - * - ( true ) ) ] int ) { }",
  "func ID ( ID : [ ] - 123 - ( - * [ ( true ) ) ] int ) { }",
  "true ID ( ID : [ ] - 123 - ( - * [ ( func ) ) ] int ) { }",
  "func ID - ) : bool { var ID : bool var ID : bool print ( ( ID [ - ID ] [ ( false ) ] ) { } }",
  "func ID - ) : bool { var ID : bool var ID : bool print ( ( ID [ - ID ] [ ( false ) ] ) { } }",
  "func ID - ) : : { var ID : bool var ID bool bool print ( ( ID [ - ID ] [ ( false ) ] ) { } }",
  "func ID ( ID : int , ID : bool , ID : [ ] bool ) { if 123 / - ID func ( ID ) ] { } } [ ID ( ) { }",
  "func ID ( ] : int , ID : bool , ID : [ ] bool ) { if 123 / - ID func ( ID ) ID { } } [ ID ( ) { }",
  "func ID ( ] : } , ID : bool , ID : [ ] bool ) { if 123 / - ID func ( ID ) ID { } } [ ID ( ) { int",
  "func ID ( ) { call ID ( * false / ( ID ( ( ( - ( 123 ) ) ) ) ) ) }",
  "func ID ) ) { call ID ( * false / ( ID ( ( ( - ( 123 ) ) ) ) ( ) }",
  "func ID ) ) { call ID ( * false / ( ID ( ( ( - ) 123 ) ) ) ( ( ) }",
  "func ID ( ) { { } ID = ( ( false * - { ( ( ( - ID ) ) ) / ID ) ) } func ID ( ) - }",
  "func ID ( ID { { } ID = ( ( false * - { ( ( ( - ) ) ) ) / ID ) ) } func ID ( ) - }",
  "/ ID ( ID { { } ID = ( ( false * - { ( ( ( - ) ) ) ) func ID ) ) } func ID ( ) - }",
  "func bool ( ID : [ ( true * ID * ( 123 + false - ID ) ) ] [ ] ID ) { }",
  "func bool ID ID : [ ( true * ID * ( 123 + false - ID ) ) ] [ ] ( ) { }",
  "func bool ID ID : [ ( true * ID * ( 123 + ) - ID false ) ] [ ] ( ) { }",
  "func ID ( ID : int : ) int { return }",
  "func ID ( ) : int { var ID : bool var ID : bool } : ID ( ) { var ID : int var ID : int { var ID func bool var ID : int } { } }",
  "func ID ( ) : int { var ID : bool var ) : bool } : ID ( ID { var ID : int var ID : int { var ID func bool var ID : int } { } }",
  "func ID ( ) : int { var ID : bool var ) : bool } } ID ( ID { var ID : int var ID : int { var ID func bool var ID : int : { } }",
  "func ID ( ID : [ 123 and - - ID / ID / - ( - ID ) ] ) bool { }",
  "func ID ( ID : [ 123 and - ( ID / ID / - - - ID ) ] ) bool { }",
  "func ID ( ID : [ 123 and - ID ID / ( / - - - ID ) ] ) bool { }",
  "func ID ( ) : ID ] [ ] bool { var ID : [ ] int if - ( [ ) { } { } }",
  "[ ID ( ) : ID ] [ ] bool { var ID : [ ] int if - ( func ) { } { } }",
  "[ ID ( ) : ID ] } ] bool { var ID : [ ] int if - ( func ) { [ { } }",
  "func ID ( ID : [ ] bool , ID : int ) : int { var ID : [ } ( - 123 ) ] int ID func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int ) : int { var ID : [ } func - 123 ) ] int ID ( ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int ) : int { var ID : [ } func - 123 ) ] int ID ( ID ( ) { }",
  "func ID ( ID } int , ID : int ) { call ID ( ) :",
  "func ID ( ID } call , ID : int ) { int ID ( ) :",
  "ID func ( ID } call , ID : int ) { int ID ( ) :",
  "func ID ( ID : [ 123 / 123 > false and - ] [ ( true ) ] and false ID int ) { }",
  "func ID ( ID : ) 123 / 123 > false and - ] [ ( true ) ] and false ID int [ { }",
  "> ID ( ID : ) 123 / 123 func false and - ] [ ( true ) ] and false ID int [ { }",
  "func ID ( ID 123 [ false / - ( ID ( ) * false * 123 - : ) * 123 ] bool ) { }",
  "func ID ( ) { ID ( ) [ - ( 123 * ( ( ( true ) ) ) ) ] } 123 =",
  "func ID ( ) { ID ( ) [ - ( 123 * ( ( ( ) ) ) true ) ] } 123 =",
  "func ID ( ) { ID ( ) [ - ( 123 * ( ( ( ) ) ) 123 ) ] } true =",
  "func ID ( ID : [ , ID : bool ) { var ID : bool var ID : bool ( - ID ( ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : [ , ID : func ) { var ID : bool var ID : bool ( - ID ( ) ) ] bool } bool ID ( ) { }",
  "func ID ( ) { var ID : int { while } ( ( ( ( true ) ) ) ) { } } } func ID ( ) { ID",
  "func ID ( ) { var true : int { while } ( ( ( ( ID ) ) ) ) { } } } func ID ( ) { ID",
  "func ID ( ) { var ) : int { while } ( ( ( ( ID ) ) ) ) { } } } func ID ( true { ID",
  "func ID ( ID : bool , ID } bool ) { var ID : bool var ID : [ ] bool call ID ( - - false ) : func ID ( ) { }",
  "func ID ( ID : bool , ID } bool ) { var ID : bool var ID : [ ] bool call ID ( - - { ) : func ID ( ) false }",
  "func ID ( ID : bool , ID } bool ) { var ID : bool var ID : [ ] bool call ID ( - func { ) : - ID ( ) false }",
  "func ID ( ) : return { var ID : int var ID : bool int ID [ 123 or false or - - ( 123 ) ] } func ID ( ) { }",
  "func ID ( ) : return { var ID : int var ID : bool or ID [ 123 or false int - - ( 123 ) ] } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID ] [ ID [ true * false / 123 ] : int }",
  "func ID ( ) : bool var { ID : bool var ID ] [ ID [ true * false / 123 ] : int }",
  "func ID ( ) : bool var { ID : bool var ID ] [ ID [ true * false / : ] 123 int }",
  "func ID : ) { var ID : int { return } { var ID : bool var ID ( [ ] bool while ( ( ( ID ) ) ) { } ID = ID } }",
  "func ID : ) { var while : int { return } { var ID : bool var ID ( [ ] bool ID ( ( ( ID ) ) ) { } ID = ID } }",
  "func ID : ) { var while : int { ( } { var ID : bool var ID ( [ ] bool ID ( return ( ID ) ) ) { } ID = ID } }",
  "print ID ( ID : int ) : int { var ID : int var ID : int print 123 * true * ( true ) func ( ID ) } func ID ( ) { }",
  "print ID ( ID : int * : int { var ID : int var ID : int print 123 * true ) ( true ) func ( ID ) } func ID ( ) { }",
  "print ID ( ID : int * : int { var ID : ID var ID : int print 123 * true ) ( true ) func ( ID ) } func int ( ) { }",
  "func ID ( ID : [ ] bool : ID : int , ID : bool ) : int { var ID : int { var ID : [ ] bool var ID , int } }",
  "func ID bool ID : [ ] bool : ID : int , ID : ( ) : int { var ID : int { var ID : [ ] bool var ID , int } }",
  "func ID bool ID : [ ] bool : ID : ID , ID : ( ) : int { var int : int { var ID : [ ] bool var ID , int } }",
  "func ID ( ) : bool { var ID : bool var ID : bool return ( ( ( 123 ) ) ) } } ID ( ) { func",
  "func ID ( ) : bool { var ID : var bool ID : bool return ( ( ( 123 ) ) ) } } ID ( ) { func",
  "func ID ( ) : bool { var ID : ID bool var : bool return ( ( ( 123 ) ) ) } } ID ( ) { func",
  "func ID ( ID : int , ID : [ ] [ ] int , ID : int } : int { var ID : [ ] bool if ID { ) print ID } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ] int , ID : int : } int { var ID : [ ] bool if ID { ) print ID } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ] } , ID : int : } int { var ID : [ ] bool if ID { ) print ID } func ID ( ) { int",
  ": ID ( ) : bool { var ID : int var ID func int ID [ true / 123 / - ID ] = - ID } func ID ( ) { }",
  ": ID var ) : bool { ( ID : int var ID func int ID [ true / 123 / - ID ] = - ID } func ID ( ) { }",
  ": ID var ) : bool { ( ID : int var ID int func ID [ true / 123 / - ID ] = - ID } func ID ( ) { }",
  "ID func ( ) : int { var ID : int var ID : [ ] [ ID [ false / ID / ID ] ] int }",
  "ID func ( ) : int int var ID : int var ID : [ ] [ ID [ false / ID / ID ] ] { }",
  "ID func ( ) false int int var ID : int var ID : [ ] [ ID [ : / ID / ID ] ] { }",
  "func ID ( [ : [ true / ( true / - ID * - false - - ID - - 123 ) / ID ] ) ] bool { } func ID ( ) { }",
  "func ID ( [ : [ true { ( true / - ID * - false - - ID - - 123 ) / ID ] ) ] bool / } func ID ( ) { }",
  "func ID ( [ : [ true { ( true / - ID * - ] - - ID - - 123 ) / ID false ) ] bool / } func ID ( ) { }",
  "func ID ( ID : [ - - ID [ ( ID * - - - true ) ] ] } ) { bool",
  "func ID ( ID : [ - - ID [ ( ID ) - - - true * ] ] } ) { bool",
  "func ID ( ID } [ - - ID [ ( ID ) - - - true * ] ] : ) { bool",
  "func ID ( } : [ true * true + ID ( ) [ true * ID ] [ true ] ] int ) { ID",
  "func ID ( } : [ true * true + ID ( ) [ true * ID ] [ true ] ] int { ) ID",
  "func ID ( true : [ true * true + ID ( ) [ } * ID ] [ true ] ] int { ) ID",
  "func ID ( ) { ID ( ) [ = ID / ( ID ) ) ] ( - true }",
  "func ID ( ) { ID ( ) [ = ID / ( ID ) ) ] ( - true }",
  "func ID ( ) { ID ( ) [ = ID ID ( / ) ) ] ( - true }",
  "func ID ( ID : bool int ID : , ) : [ ] [ ] [ ] bool { var ID : bool }",
  "func ID ( ID : bool int ID ] , ) : [ : [ ] [ ] bool { var ID : bool }",
  "func ID ( ID ID bool int ID ] , ) : [ : [ ] [ ] bool { var : : bool }",
  "func ID - ID : int ) : int { var ID : int var ID : bool { var ID : bool return - ( ( ( false ) ) } }",
  "func ID - ID : int ) : int { var ID : int var ID : bool { var ID : bool return - ( ( ( false ) ) } }",
  "func ID - ID : int ) : int ( var ID : int var ID : bool { var ID : bool return - { ( ( false ) ) } }",
  "func ID ( ID : bool , ID : [ false / - ( ( - ( ID ) ) ) ] bool ) func } { ID ( ) { }",
  "func ID ( ID : bool , ID : [ false / - ( ( - ( ID ) ) ) ] } ) func } { ID ( ) { bool",
  ") ID ( ID : bool , ID : [ false / - ( ( - ( ID ) func ) ] } ) func } { ID ( ) { bool",
  "func ID ( * : [ - false ID ( 123 != ( 123 ) ) ] int ) { }",
  "func ID ( * : [ - false ID ( ) != ( 123 ) 123 ] int ) { }",
  "func ID ( * : [ - false ID ( ) != ( 123 ) 123 ] int ) { }",
  "func ID ( ) : int { ID ( ID [ ID ( - - - ID ) ] [ - ( - ( ] ) ) 123 ) = - - true print 123 } func ID ( ) { }",
  "func ID ( ) : int { ID ] ID [ ID ( - - - ID ) ] [ - ( - ( ( ) ) 123 ) = - - true print 123 } func ID ( ) { }",
  "func ID ( ) ) int { ID ] ID [ ID ( - - - ID : ] [ - ( - ( ( ) ) 123 ) = - - true print 123 } func ID ( ) { }",
  "func ID ( ID int int ) : : { var ID : bool var ID : bool print ID [ - ID ] [ false ] } func ID ( ) { }",
  "func ID ( ID int int bool : : { var ID : bool var ID : ) print ID [ - ID ] [ false ] } func ID ( ) { }",
  "func ID { ID int int bool : : ( var ID : bool var ID : ) print ID [ - ID ] [ false ] } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int [ ID : bool , ID : , ] bool ) : bool { var ID : bool var ID : [ ] bool }",
  "func ID ( ID : [ ] [ ] int [ ID : bool , ID : , ] bool ) : bool { var ID : var bool ID : [ ] bool }",
  "func ID ( ID : [ 123 * ID ( ) [ 123 * ( - 123 false * - false ] [ ( ) ) ] * ( ( ID ) ) ] [ ] bool ) { }",
  "func ID } ID : [ 123 * ID ( ) [ 123 * ( - 123 false * - false ] [ ( ) ) ] * ( ( ID ) ) ] [ ] bool ) { (",
  "func ID } ID : [ 123 ( ID ( ) [ 123 * ( - 123 false * - false ] [ * ) ) ] * ( ( ID ) ) ] [ ] bool ) { (",
  "func ID ( ) : [ ID ( ) [ - ( - [ ( ) [ ID ] ID - ( ID ) ] ) ] [ 123 ] ] bool { }",
  "func ID ( ) : [ ID ] ) [ - ( - [ ( ) [ ID ] ID - ( ID ) ] ) ] [ 123 ( ] bool { }",
  "func ID ( ) : [ ID ] ) [ - ( - [ ( ) [ ID ] ID - ( ID ) ] ) ] [ 123 ( ] bool { }",
  "func ID - ) : int { var ID : int print ( - ( 123 + ID [ false ] ) { } } func ID ( ) { }",
  "func ID - ) : int { var ID : int print ( - ( 123 + ID [ false ] ) { } } func ID ( ) { }",
  "func ID ( ID : : ) { var ID int [ - ( ID [ - true ] [ - ( ID ) ] ) ] int }",
  "func ID ( [ : : ) { var ID int [ - ( ID [ - true ] ID - ( ID ) ] ) ] int }",
  "func ID ( [ : : ) { var ID - [ - ( ID [ int true ] ID - ( ID ) ] ) ] int }",
  "func ID ( ID bool : , ID : [ 123 * ID [ ( ID ) ] [ ( true ) ] ] [ ] [ ] bool ) { }",
  "func ID ( ID bool : , ID : [ 123 * ID [ ( ID ) ] [ ( true ) ] ] [ ) [ ] bool ] { }",
  "func ID ( ID bool : , ID : ID 123 * ID [ ( [ ) ] [ ( true ) ] ] [ ) [ ] bool ] { }",
  "func ID ( ) : int { print - true ID ( ( false * * ) ) * - false }",
  "func ID ( false : int { print - true ID ( ( ) * * ) ) * - false }",
  "func ID ( false : int { print - true ID ( ( ) * * } ) * - false )",
  "func ID ( ID : int , : ID int ) : [ ID [ ID [ ID ] ] [ ID ] ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : int , : ID int ) : [ ID [ ID [ ID ] ] [ ID ] ] [ ) bool { } func ID ( ] { }",
  "func ID ( ID : int , : ID int ) : [ ID [ ID [ ID ] ] [ ID ] ] [ ) bool { } func ID ( ] { }",
  "func ID ( ) { var ID : int var ID : int print ID ( - ID func - ( ID ) ) call ID ( ) } * ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int print ID ( - ID func - ( ID ) ) call ID ( ) ID * } ( ) { }",
  "func ID ( : { var ID : int var ID ) int print ID ( - ID func - ( ID ) ) call ID ( ) ID * } ( ) { }",
  ") ID ( ) : int { call ID ( - ( false * true + false / - true / 123 - ( ( ( - ID ) func ) ) ) }",
  ") ID ( ) : int { call ID ( - ( false * true + false / - true / 123 - ( ( ( - ID ) func ) ) ) }",
  "func ID ( ID : [ ] bool , ID : int , ID : bool ) { var ID : [ ] bool ID ( - ( ID ) ) } func print ( ) { }",
  "func ID ( ID : [ ] bool ) ID : int , ID : bool , { var ID : [ ] bool ID ( - ( ID ) ) } func print ( ) { }",
  "func ID ( ID : [ ] bool ) ID : int ID ID : bool , { var ID : [ ] bool , ( - ( ID ) ) } func print ( ) { }",
  "func ID ( ) } return ( ID ( ) [ ( ID ) ] ) {",
  "func ID ( ) } ) ( ID ( return [ ( ID ) ] ) {",
  "func ID ( ) } ) ID ID ( return [ ( ( ) ] ) {",
  "func ID ( ID : bool , ID : bool ) : int / var ID : [ ] int ID [ true { ( - - ( - ID ) ) ] = 123 } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool true : int / var ID : [ ] int ID [ ) { ( - - ( - ID ) ) ] = 123 } func ID ( ) { }",
  "func ID ( ID : ( , ID : bool true : int / var ID : [ ] int ID [ ) { ( - - ( - ID ) ) ] = 123 } func ID bool ) { }",
  "func [ ( ) : ID ] [ ] bool { var ID : int ID [ 123 <= ID ] = - - ID }",
  "func [ ( ) : ID bool [ ] ] { var ID : int ID [ 123 <= ID ] = - - ID }",
  "func [ ( ) : ID bool [ ] ] var { ID : int ID [ 123 <= ID ] = - - ID }",
  "func ID ( ID : [ true / ID [ ID [ ( ID ) 123 ] / ( ( ] ) ) ] [ ] int ) { }",
  "func ID ( ID : [ true / int [ ID [ ( ID ) 123 ] / ( ( ] ) ) ] [ ] ID ) { }",
  "func ID ( ID : [ true / int [ ID [ ( ID ) 123 ] / ( ( ] ) ) ] [ ] ID ) { }",
  "func ID ( ID : int , ID : [ ] [ ] [ ( - int ( false ) ) ] - , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ] [ ( - int ( false ) ) ] - , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ( [ ( - int ] false ) ) ] - , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : int ID ID : bool , , : int ) : bool { var ID : int print ID [ - 123 ] [ - ID ] }",
  "func ID ( ID : int ID ID : , , bool : int ) : bool { var ID : int print ID [ - 123 ] [ - ID ] }",
  "func ID ( ID : int ID ID : , , bool 123 int ) : bool { var ID : int print ID [ - : ] [ - ID ] }",
  "func ID ( ID : ) , ID : [ ID ( int [ - - ( ( - ID ) ) ] ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : ) , ID : [ ID ( int [ - - ) ( - ID ) ) ] ] [ ] int ( { } func ID ( ) { }",
  "func ID ( ID : ( , ID : bool ) : int { var ID : [ ] int { var ID : bool { var ID : bool } if ( ( true ) ) { } } call ID ( ) } func ID bool ) { }",
  "func ID ( ID : ( , ID : bool ) : int { var ID : [ ] int { var ID : bool { var ID : bool } if ( ( true ) ) { } } call ID ( ) } func ID bool ) { }",
  "func ID ( ID : ( , ID : bool ) : int { var ID : [ ] int { var ID : bool { var ID : bool } if ( ( true ) } { ) } call ID ( ) } func ID bool ) { }",
  "func ID ( ID { bool , ID : bool , ID : [ ] int ) : }",
  "func ID ( ID { bool , ID : bool , ID : } ] int ) : [",
  "func ID ( ID { bool : ID , bool , ID : } ] int ) : [",
  "func ID ( ) : [ ( - ID [ ( true ] - ID * ( ID ) ) ] ) * [ ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ( - ID [ ( true ] - ID * ( ID ) ) ] ) * [ ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) : { ( - 123 / ID ( ) ) ] bool { } func ID ( ) [ }",
  "func ID ( ID : [ ] bool , ID : bool ) - { ( : 123 / ID ( ) ) ] bool { } func ID ( ) [ }",
  "func ID ( ( : [ ] bool , ID : bool ) - { ( : 123 / ID ( ) ) ] bool { } func ID ID ) [ }",
  "func ID ( ID : ID , int : [ ] bool ) { var ID : [ ( ( - ( - - ID ) ) ) ] bool var ID : [ ] bool }",
  "func ID ( ID : ID , int : [ ] bool ) { var ID : [ ( ( - ( - ID - ) ) ) ] bool var ID : [ ] bool }",
  "func ID ( ID : ID , int : [ ] bool ) { var ID : [ ( ) - ( - ID - ( ) ) ] bool var ID : [ ] bool }",
  "func ID ( ) { while false * false / [ and - ID ( ) [ ID ] false true ] { } }",
  "func ID ( ) { while false * false / [ and true ID ( ) [ ID ] false - ] { } }",
  "func ID ( ) { true false * false / [ and while ID ( ) [ ID ] false - ] { } }",
  "func ID ( ) : [ ] bool { var ID : / var ID : bool return - ( 123 * - ( ( ( ID ) ) ) bool - - false ) }",
  "* ID ( ) : [ ] bool { var ID : / var ID : bool return - ( 123 func - ( ( ( ID ) ) ) bool - - false ) }",
  "* ID ( ) : ID ] bool { var ID : / var [ : bool return - ( 123 func - ( ( ( ID ) ) ) bool - - false ) }",
  "func ID ( ) { - - false - 123 * - ( ( ID ) ) * ID + ( - ( while ID ) ) { } print 123 }",
  "func ID ( ) { - - false - 123 * - ( ( ID ) ) * ID + ( - ( { ID ) ) while } print 123 }",
  "func ID ( ) { - - false - 123 * ) ( ( ID - ) * ID + ( - ( { ID ) ) while } print 123 }",
  "func ID ( ID : bool ) : bool { var ] : [ ] [ true / true >= ( ( false ) ) ID bool var ID : int } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ] ) [ ] [ true / true >= ( ( false : ) ID bool var ID : int } func ID ( ) { }",
  "func ( ( ID : bool ) : bool { var ] ) [ ] [ true / true >= ( ( false : ) ID bool var ID : int } func ID ID ) { }",
  "func { ( ID : [ ] [ - ID [ ( - false + ( ( ( ID ) ) ) ) ] ] bool ) ID } func ID ( ) { }",
  "func { ( ID : [ ] [ - ID [ ( - false ( + ( ( ID ) ) ) ) ] ] bool ) ID } func ID ( ) { }",
  "func ID ( ID : [ ] [ - ID [ ( - false ( + ( ( ID ) ) ) ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( false { var ID : int while 123 + 123 * ID ( - ) ) / 123 { } }",
  "func 123 ( false { var ID : int while ID + 123 * ID ( - ) ) / 123 { } }",
  "ID 123 ( false { var ID : int while ID + 123 * func ( - ) ) / 123 { } }",
  "func ID ( ID : int ) { var ID 123 int } func ID ( ) { ID = ( : ) }",
  "func ID ( ID : } ) { var ID 123 int int func ID ( ) { ID = ( : ) }",
  "func ID ( ID int } ) { var ID 123 : int func ID ( ) { ID = ( : ) }",
  "func ID ( ID : int , ( : [ ] [ 123 + ID true != - - 123 ) ] [ ] [ ] [ ] int , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ( : [ ] [ 123 + ID [ != - - 123 ) ] true ] [ ] [ ] int , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ( : [ ] [ 123 + : [ != - - 123 ) ] true ] [ ] [ ] int , ID ID [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID ) [ true + - ( ( - ID ) : ] int ) { }",
  "func ID ( ID : bool , ID : int , ID ) [ true + - ( ( - ID ) : ] int ) { }",
  "func ID ( false { var ID : int var ID : int while - - ) <= ( ( - ID ) ) { } } func ID ( ) { }",
  "func ID ( false { var ID : int var ID : int while - - ) <= ( ( - ID ) ) { } } func ID { ) ( }",
  "func ID ( false { var ID : int var ID : int while - - } <= ( ( - ID ) ) { } ) func ID { ) ( }",
  "func ID ( ID : bool ) { var ID : ID var ID : bool print int ( ( ID ) ) }",
  "func ID ( ID : bool ) { var ID : ID var ID : bool ID int ( ( print ) ) }",
  "func ID ( ID : bool ) { var ID : ID var ID : bool ID int ( ( print ) ) }",
  "func ID ( ID : bool , ID : int , ID : int ) { call ID } ) (",
  "func ID ( ID : bool , ID : int , ID : int ) { call ID } ) (",
  "func ID ( ID : bool , ID : int , ID : int ) { call ID } ) (",
  "func ID ( ] : [ - 123 - ( ( ( - ID ) ) ) - ID ) bool { }",
  "func ID ( ] - [ : 123 - ( ( ( - ID ) ) ) - ID ) bool { }",
  "func ID ( ] - [ : 123 - ( ( ( - ID ) ) ) - ID ) bool { }",
  "func ID ( ID : int false : int { var ID : bool return ) + ( ID ) } func ID ( ) { }",
  "func ID ( ID : int false : { int var ID : bool return ) + ( ID ) } func ID ( ) { }",
  "func ID ( ID : ) false : { int var ID : bool return ) + ( ID int } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ : int ) { var ID ] bool var ID : int }",
  "func ID ( ID : bool , ID : [ : int ) { : ID ] bool var ID var int }",
  "func ID ( ID : bool ID ID : [ : int ) { : ID ] bool var , var int }",
  "ID ID ( ID : [ false - func ( ) * - - 123 / true * 123 / ( ID ) ] bool ) { }",
  "ID ID ( ID : [ false ID func ( ) * - - 123 / true * 123 / ( - ) ] bool ) { }",
  "func ID ( ID : bool , true : [ ( ( ID ( ID ) ) ) ] int , ID : int ) { }",
  "func ID ( ID : bool , true : [ ( ( ) ( ID ) ) ) ] int , ID : int ID { }",
  "func ID ( ) { var ID : ( return - int 123 / - 123 and ID and ( ID ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : ( ID - int 123 / - 123 and ID and ( ID ) ) } func return ( ) { }",
  "func ID { ) { var ID : ( ID - int 123 / - 123 and ID and ( ID ) ) } func return ( ) ( }",
  "func ID ID ( : int , ID : bool , ID : [ - ID ( ( false ) ) ] int ) { }",
  "func ID ID ( ) int , ID : bool , ID : [ - ID ( ( false ) : ] int ) { }",
  "func ID ID ID ) int , ID : bool , ( : [ - ID ( ( false ) : ] int ) { }",
  "func ID ( ID : [ - ( - false ) - ID - ( ( false ) ) ) ] [ ] bool ) { } func ID ( - { }",
  "func ID ( ID : [ - ( - false ) - ID - ( ( false [ ) ) ] ) ] bool ) { } func ID ( - { }",
  "func ID ( print : bool { print ( ( ID ( ) [ ( ( - ID ) ) ] [ ( ID ) ] ) ) ) 123 }",
  "func ID ( print : bool ( print ( ( ID ( ) [ { ( - ID ) ) ] [ ( ID ) ] ) ) ) 123 }",
  "func ID ( [ : bool ( print ( ( ID ( ) [ { ( - ID ) ) ] print ( ID ) ] ) ) ) 123 }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : bool var ID return int } func ID ( ) : int { : }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : bool var ID return int } func ID ( ) : int { : }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : bool var ID return int int func ID ( ) : } { : }",
  "func ID int ID : int ) : int { var ID : [ ] ( var ID : int return }",
  "func ID int ID : int int : int { var ID : [ ] ( var ID : ) return }",
  "func ID int ID : int int : int { ID var : [ ] ( var ID : ) return }",
  "func ID ( ) : bool ID var ID : bool { var { : [ ] bool } print false * ( ( ( 123 ) ) ) }",
  "func ID ( ) : bool ID var ID : bool { var { : [ ] 123 } print false * ( ( ( bool ) ) ) }",
  "func ID ( ) : bool ID var ID : bool { var { : ( ] 123 } print false * [ ( ( bool ) ) ) }",
  "func ID ( ) { var ID : bool ID ID : [ ] int if ( ID ( - 123 ) ) { } call var ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool ID ID : [ ] ( if ( ID int - 123 ) ) { } call var ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool ID ID : [ ] ( if ( ID int - 123 ) ) { } call var ( ) } func } ( ) { ID",
  "func ( ( ) : [ false and - - ( ID - ( ID ) ) ) and ID ] int { }",
  "func ( ( ) : [ false and - - ( ID - ( { ) ) ) and ID ] int ID }",
  "func ( ( ) : [ false and ID - ( ID - ( { ) ) ) and - ] int ID }",
  "func ID ( ) ) bool { var ID : bool var ID : bool } func ID ( : : [ - ( ( 123 ) ) ] bool { }",
  "func ID ( ) ) bool { var ID : bool : ID : bool } func ID ( var : [ - ( ( 123 ) ) ] bool { }",
  "func ID ( ) ) bool { var ID : bool : ID : bool } func ] ( var : [ - ( ( 123 ) ) ID bool { }",
  "func ID ( ) : bool { var ID : int var ID : [ 123 / ( ID - ID - ( - - ID ) ) * ( ( - ( - func ( ( ( ( ID ) ) ) ) ) ) ) ) ] int } ( ID ( ) { }",
  "func ID ( ) : bool { var ID { int var ID : [ 123 / ( ID - ID - ( - - ID ) ) * ( ( - ( - func ( ( ( ( ID ) ) ) ) ) ) ) ) ] int } ( ID ( ) : }",
  "func ID ( ) : bool { var ID { int var ID : [ 123 / ( ID - ID - ( - - ID ) ) * ( ( - ( - func ( ( ( ( int ) ) ) ) ) ) ) ) ] ID } ( ID ( ) : }",
  "func ID ( ) { print ( - ( - ID ( - ID ) ) ) if - ( ( - ID ) { } } func ID - ) { }",
  "func ID ( ) { print ( - ( - - ( - ID ) ) ) if ID ( ( - ID ) { } } func ID - ) { }",
  "func ID - ) { print ( ( ( - - ( - ID ) ) ) if ID ( ( - ID ) { } } func ID - ) { }",
  "func ID ( : ) [ ID [ - ID [ - ( - - ID ) ] ] ] [ ] int { } func ID ( ) { }",
  "func ID ( : ) [ ID [ - - [ ID ( - - ID ) ] ] ] [ ] int { } func ID ( ) { }",
  "func ID ( : ) [ ID ( - - [ ID [ - - ID ) ] ] ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : [ ID / - ID ( ) [ ( ) ) ] [ - ID ] ] int ID { } func ID ( ) { }",
  "func ID ( ] : [ ID / - ID ( ) [ ( ) ) ] [ - ID ID ] int ID { } func ID ( ) { }",
  "func ID ( ] : [ ID / - ID ( ) [ ( - ) ] [ ) ID ID ] int ID { } func ID ( ) { }",
  ") ID ( ) { var ID : int var ID : [ - ID / ID == ID [ ID ] [ ( ( ( ( - - ID ) ) ) func ] ] [ ] bool } func ID ( ) { }",
  ") ID ( ) { var ID : int var ID : [ - ID / ID == ID [ ID ] [ ( ( ( ( ID - ID ) ) ) func ] ] [ ] bool } func - ( ) { }",
  ") ID ( ) bool var ID : int var ID : [ - ID / ID == ID [ ID ] [ ( ( ( ( ID - ID ) ) ) func ] ] [ ] { } func - ( ) { }",
  "func ID ( ) : int { var ID : [ 123 ID ( - ( ID ) ) ] bool var ID : [ ] [ ] [ ] [ ] int } func >= ( ) { }",
  "func ID ( ) : int { int ID : [ 123 ID ( - ( ID ) ) ] bool var ID : [ ] [ ] [ ] [ ] var } func >= ( ) { }",
  "func ID ( ) : int { int ID : [ 123 ID ( - ( ID ) ) ] bool var ID : [ ] [ ] [ ] ] [ var } func >= ( ) { }",
  "func ID ) ) : [ ] [ ( ( - ( - ID ) ) ( ] [ ] bool { }",
  "func ID ) ) : [ ] ] ( ( - ( - ID ) ) ( ] [ [ bool { }",
  "func ID ) ) : [ ] ] ( ( - ( - ID ) ) ( ] [ [ bool { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : [ ] [ - ID [ ( ID ) ] [ ID ] ] [ ] bool } func 123 ( ) { }",
  "func ID ( ID : int ) ID : bool , ID : bool , { var ID : [ ] [ - ID [ ( ID ) ] [ ID ] ] [ ] bool } func 123 ( ) { }",
  "func ID ( ID : int ) ID : bool , ID : bool , { var ID : [ ] [ - bool [ ( ID ) ] [ ID ] ] [ ] ID } func 123 ( ) { }",
  "func ID : ID ( [ ] [ - 123 * false * - ID ( - ID ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ID ID ( [ ] [ - 123 * false * - ID ( - ID ) ] [ ] [ ] int ) { } func : ( ) { }",
  "func ID ID ID ( [ ] [ - 123 * false * - ID ( - ID ) ] [ ] [ ] int ) { } func : ( ) { }",
  "func ID ( - : [ ID ID ( - ID ( ( true ) ) ) ] int ) { }",
  "func [ ( - : ID ID ID ( - ID ( ( true ) ) ) ] int ) { }",
  "func [ ( - : ID ID ID ( - ID ( } true ) ) ) ] int ) { (",
  "func ( ( ) { var ID : int if ID ID [ ( 123 ) ] ) { } }",
  "func ( ( ) { var ID if int : ID ID [ ( 123 ) ] ) { } }",
  "func ( : ) { var ID if int ( ID ID [ ( 123 ) ] ) { } }",
  "func ( ( ID : bool , ID : bool ) : bool { var ID : bool var ID : bool while ID ( ID ) { } } func ID ID ) { }",
  "func ( ( ID : bool , ID ID bool ) : bool { var ID : bool var ID : bool while ID ( ID ) { } } func : ID ) { }",
  "func ( ( ID : bool , { ID bool ) : bool ID var ID : bool var ID : bool while ID ( ID ) { } } func : ID ) { }",
  "func ID ( ) : [ ] bool { var ID ] int { var ID : bool { { var ID : [ : int } if ( false ) { } } { } } print false } func ID ( ) { }",
  "func ID } ) : [ ] bool { var ID ] int { var ID : bool { { var ID : [ : int } if ( false ) { } } { } } print false } func ID ( ) { (",
  "func ID } ) : [ ] bool { var ID ] int ( var ID : bool { { var ID : [ : int } if ( false ) { } } { } } print false } func ID { ) { (",
  "func ID ( } { var ID : [ ] bool var ID : int if - - false / - 123 - ( - ID ) { } print ( - ID ) } func ID ( ) { )",
  "func ID ( } { var ID : [ - bool var ID : int if - - false / - 123 - ( ] ID ) { } print ( - ID ) } func ID ( ) { )",
  "func ID ( } { var ID : [ - bool var ID : int if - - false / - 123 - ( ] ID ) { } print ( - ID ) } func ID ( ) { )",
  "ID func ( ID : bool ) { print ID ( ( 123 * ( true ) * - true ) ) }",
  "ID func ( ID : bool * { print ID ( ( 123 * ( true ) ) - true ) ) }",
  "ID func ( ID * bool : { print ID ( ( 123 * ( true ) ) - true ) ) }",
  "func ID ( ID : int , ID : bool ) : [ ] int { var ID : int } func ID ( ) bool bool { var ID : : }",
  "func ID ( ID : int , ID : bool ) : [ ] bool { var ID : int } func ID ( ) int bool { var ID : : }",
  "func ID ( ID : int , ID : bool ) int [ ] bool { var ID : : } func ID ( ) int bool { var ID : : }",
  "func ID ( } : int ) { { var ID : int while ID ( - true ) { } } ID",
  "ID func ( } : int ) { { var ID : int while ID ( - true ) { } } ID",
  "ID func { } : int ) { { var ID : int while ID ( - true ) ( } } ID",
  "func ID { ID : [ ] bool ) : bool ( var ID : int { var ID : [ ] bool var ID : int ID = - ID print 123 } }",
  "func ID { ID : [ ] bool ) : [ ( var ID : int { var ID : bool ] bool var ID : int ID = - ID print 123 } }",
  "func ID { ID : [ ] bool ) : var ( [ ID : int { var ID : bool ] bool var ID : int ID = - ID print 123 } }",
  "func ID ( ) ID var ID : bool var ID : bool print ID * 123 / - - - - { { } } func ID ( ) { }",
  "func ID ( ) ID var { : bool var ID : bool print ID * 123 / - - - - { ID } } func ID ( ) { }",
  "func ID ( ) ID var { : bool var ID : bool print ID * 123 / - - - - { ID } } func ID ( ) { }",
  "func ID ( ID : [ ID [ false and - ( true * ( ( ID ) { * ( false ) ) and ( ( true ) ) ] ] int ) ) } func ID ( ) { }",
  "func ID ( ID : [ ID [ false and - ( true * ( ( true ) { * ( false ) ) and ( ( ID ) ) ] ] int ) ) } func ID ( ) { }",
  "func ID ( ID : [ ID [ false and - ( true * ( ( true ) { * ( false ) ) and ( ( ID ) ) ] ] int ) ) } func ID ( ) { }",
  "func ID ID ( : bool ) : int { }",
  "func ID ID : ( bool ) : int { }",
  "func int ID : ( bool ) : ID { }",
  "func ID ( ) { print ( ID [ - ( ID 123 ) ] ) }",
  "func ID ( ) { print ( ID [ - ( ID ) 123 ] ) }",
  "func ID ID ) { print ( ID [ - ( ( ) 123 ] ) }",
  "func ID ID ID : int , ID : int , ( : bool ) { var ID : bool print false * false * ( true ) }",
  "func ID ID ID : int , ID : int , ( : } ) { var ID : bool print false * false * ( true ) bool",
  "func ID ID false : int , ID : int , ( : } ) { var ID : bool print ID * false * ( true ) bool",
  "func print ( ) { ID ( true + ID ( ) [ true * - - ID ] ) } func ID ( ) { }",
  "func print ( ) { ID ( true + ID ( * [ true ) - - ID ] ) } func ID ( ) { }",
  "func print ( ) { ID ( true + ID ( * [ true ) - - ID ] ) } func ID ( ) { }",
  "func ID ( ) : [ [ false and ID ( ) - ( ( ID ) ) ] and ID ] [ ] bool { } func ID ( ) { }",
  "func ID ) ) : [ [ false and ID ( ( - ( ( ID ) ) ] and ID ] [ ] bool { } func ID ( ) { }",
  "func ID ) ) : [ [ false and ID ( ( - ( ( ID [ ) ] and ID ] ) ] bool { } func ID ( ) { }",
  "func ID ( : { var ID ) bool ID ( false / ( ID ( - ID ) ) ) = - - ID } func ID ( ) { }",
  "func ID ( : { var ID ) bool ID ( false / ( ID ( - ID } ) ) = - - ID ) func ID ( ) { }",
  "func ID ( : { var ID ) bool ID ( false / ( ID ( - ID } ) ) = - - ID ) func ID ( ) { }",
  "func ID ( ID : bool , ID : int , int : ID ) { var ID : [ ] int var ID : [ ] [ ] [ ( ( - ID ) ) ] bool }",
  "func ID ( ID : bool , ID : int , int : ID ) { bool ID : [ ] int var ID : [ ] [ ] [ ( ( - ID ) ) ] var }",
  "func ID ( ID : bool , ID : int , int : ID ) { bool ID : [ ] int var ID : [ ] [ ] [ ( ( } ID ) ) ] var -",
  "[ ID ( ID : [ ] bool ) : [ ] [ ] func - 123 * - - 123 / ID ] bool { } func ID ( ) { }",
  "[ ID ( ID : [ ] bool ) : [ ] [ ] func - 123 * - ( 123 / ID ] bool { } func ID - ) { }",
  "[ ID ( ID : func ] bool ) : [ ] [ ] [ - 123 * - ( 123 / ID ] bool { } func ID - ) { }",
  "func ID ( ) : int { var ID : int print - - ID ( } [ - ID ( ) ] { ) }",
  "ID func ( ) : int { var ID : int print - - ID ( } [ - ID ( ) ] { ) }",
  "ID func ( ) : int { var ID : } print - - ID ( int [ - ID ( ) ] { ) }",
  "func ID ( ID : [ ] bool , ID : int : ID : int ) , bool { var ID : bool var ID : [ - ( ID ) ] bool }",
  "func ID var ID : [ ] bool , ID : int : ID : int ) , bool { ( ID : bool var ID : [ - ( ID ) ] bool }",
  "func ID var ID : [ ] bool , ID : int : ID : int ) , bool { ( ID : bool var ID : [ ] ( ID ) - bool }",
  "func ID ( ) : bool { var ID : bool return } func ID ( } : int , ID : bool ) : int { if - 123 { ID }",
  "func ID ( ) : func { var ID : bool return } bool ID ( } : int , ID : bool ) : int { if - 123 { ID }",
  "func ID ( ) : func { var ID : if return } bool ID ( } : int , ID : bool ) : int { bool - 123 { ID }",
  "func ID ( ) { var ID : int call ID ( ) print ( ( ID ( ) ) ) } func ID ( { ) }",
  "func ID ( ) { var ) : int call ID ( ID print ( ( ID ( ) ) ) } func ID ( { ) }",
  "func ID ( ) { var ) : int call ID ( ID print ( ( ID ( ) ) ) ID func } ( { ) }",
  "func ID ( ) { var ID print int : ( - 123 / ( ID ) ) }",
  "func ID ( ) { var ID print int : / - 123 ( ( ID ) ) }",
  "func ID ( ID : [ 123 - - ID ( ID [ ID ] func - ID ] bool ) { } ) ID ( ) { }",
  "func : ( ID ID [ 123 - - ID ( ID [ ID ] func - ID ] bool ) { } ) ID ( ) { }",
  "func } ( ID ID [ 123 - - ID ( ID [ ID ] func - ID ] bool ) { : ) ID ( ) { }",
  "func ID ( ) while bool { var ID : int : ( ( ( ( ID ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ) while bool { var ID : int : ( ( ( ( ) ) ) ) ID { } } func ID ( ) { }",
  "func ID ( ) while bool { var ID : int : ( ( ( ) ) ) ( ) ID { } } func ID ( ) { }",
  "func : ( ID : int , ID ID bool , ID : [ ] int ) { }",
  "func : ( ID : int , ID ID bool , ID : [ ] int ) { }",
  "func : ( ID int : , ID ID bool , ID : [ ] int ) { }",
  "func ID int ID : ( ) : [ ] [ ID / ID + ID [ - ( - 123 ) ] [ ID ] + ( - - true ) ] bool { } func ID ( ) { }",
  "func ID int ID : ( ) : [ ] [ ID / ID func ID [ - ( - 123 ) ] [ ID ] + ( - - true ) ] bool { } + ID ( ) { }",
  "func ID int ID : ( ) : [ ] [ ID / ) func ID [ - ( - 123 ) ] [ ID ] + ( - - true ) ] bool { } + ID ( ID { }",
  "func ID ( ID : int ) : [ 123 - true != ID ( ( ) [ ID ] ) ] [ ] bool { }",
  "func ID ( ID : int ) : [ 123 - true != ID ] ( ) [ ID ( ) ] [ ] bool { }",
  "func ID ( [ : int ) : [ 123 - true != ID ] ( ) ID ID ( ) ] [ ] bool { }",
  "func ID ( ) false [ - : < ( - - false * - ID [ true ] ) ] bool { } func ID ( ) { }",
  "func ID ( ) false [ - : < ( - - false * - bool [ true ] ) ] ID { } func ID ( ) { }",
  "- ID ( ) false [ func : < ( - - false * - bool [ true ] ) ] ID { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ] int call { var ID : int var ID : int ) ID ( ID ) }",
  "func ID ( ID : [ ] bool , ID : [ ] int : { var ID : int var ID call int ) ID ( ID ) }",
  "func ID ( ) : [ false * ( ( / - - ( 123 / true ) ) ] [ ] int { } func ID false ) { }",
  "func ID ( ) : [ false * ( ( / - - ( 123 ) true / ) ] [ ] int { } func ID false ) { }",
  "func ID ( ) : [ false * ( ( / - - ( [ ) true / ) ] 123 ] int { } func ID false ) { }",
  ") ID ( ID : [ - ( ID ( func [ true * true - ( - - true ) ] ) ] [ ] int ) { } func ID ( ) { }",
  ") ID ( ID : [ - ( ID ( ) [ true * true - ( - - true func ] ) ] [ ] int ) { } func ID ( ) { }",
  ") ID ( ID : [ - ( ID ( ) ( true * true - [ - - true func ] ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ID bool , ] : int , ID : int ) { }",
  "func ID ID ID : [ ( bool , ] : int , ID : int ) { }",
  "func ID ( ) { var ID : int } func ID ( ) : bool { var ID : ] var ID : [ int [ true ] int }",
  "func ID ( ) { var ID ] int } func ID ( ) : bool { var ID : : var ID : [ int [ true ] int }",
  "func ID ( ) { var ID ] int } : ID ( ) : bool { var ID : : var ID func [ int [ true ] int }",
  "func ID ( ID : [ ] bool ) : [ 123 - 123 * ID ( ) [ - ( ] [ ID 123 ) ] * ( 123 ) ] [ ] [ ] bool { }",
  "func ID : ID ( [ ] bool ) : [ 123 - 123 * ID ( ) [ - ( ] [ ID 123 ) ] * ( 123 ) ] [ ] [ ] bool { }",
  "func ID : ID ( [ ] bool ) : [ 123 - 123 * ID ( ) [ - ( ] [ ID 123 ) ] * ( 123 ) ] [ ] [ ] bool { }",
  "func ID ( ) : bool { ID ( ) [ - ID ( ) * ( ( print - ( true ) ) ) ] [ - false ] = ( ID ) - - ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ) : bool { ID ( ) [ - ID ( ) * ( ( print - } true ) ) ) ] [ - false ] = ( ID ) - - ( ( ID ) ) } func ID ( ) { (",
  "func ID ( ) : bool { ID ( ) [ - ID ( ) * ( ( print - } true ) ) ) ] [ - false ] = ( ID ) - - ( ( ID ) ) } func ID ( ) { (",
  "func ID ( ) { var } : int var ID : int return ID [ - - 123 / ID ] [ false ] } func ID ( ) { ID",
  "func ID / ) { var } : int var ID : int return ID [ - - 123 ( ID ] [ false ] } func ID ( ) { ID",
  "func ID / ) { var } : int var } : int return ID [ - - 123 ( ID ] [ false ] ID func ID ( ) { ID",
  "func ID ( ID : [ ] int , ID : bool , ID : [ ] int ) { ID ( ) [ ( ( [ ) ) ] true ID ] = ( - 123 ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool , ID : [ ] int ) { ID ( ) [ ( ( [ ) ) ] true ID ] = ( { 123 ) call ID ( ) } func ID ( ) - }",
  "func ID ( ID : [ ] int , ID : bool , ID : [ ] int ) { ID ( ) [ ( ( [ ) ) ] true ID ] = ( { 123 ) call ID ( ) } func ID ( ) - }",
  "func : ( ) { var ID ID int { ID ( true / 123 - ID / - - true / ( ID ) ) = ID call ID ( ) } }",
  "func : ( ) { var ID ID int { ID ( true / / - ID 123 - - true / ( ID ) ) = ID call ID ( ) } }",
  "func : ( ) { var ID ID int { ID ( true / / - ID 123 - - true / ( ID ) ) = ID call ID ( } } )",
  "func ID ( ID : int , ID : int ) { var ID var bool var ID : bool { : ID : bool } return ID }",
  "func ID ( ) { call ID ( ( 123 - ID [ ( ( - ID ) ) ] [ false ] ) ) print * - ID } func ID ( ) { }",
  "func ID ( 123 { call ID ( ( ) - ID [ ( ( - ID ) ) ] [ false ] ) ) print * - ID } func ID ( ) { }",
  "func ID ( 123 { call ID ( ( ) - ID [ ( ) - ID ) ) ] [ false ] ) ) print * - ID } func ID ( ( { }",
  "func ID ( ) { var ID : [ ID [ - 123 / 123 / ID func ( true ) ] ] ] bool var ID : [ ] bool } [ ID ( ) { }",
  "func true ( ) { var ID : [ ID [ - 123 / 123 / ID func ( ID ) ] ] ] bool var ID : [ ] bool } [ ID ( ) { }",
  "func true ( ) { var ID : ) ID [ - 123 / 123 / ID func ( ID [ ] ] ] bool var ID : [ ] bool } [ ID ( ) { }",
  "func ID ( var : bool { ) ID : int var ID : [ ] [ false / ( ( 123 ) ) / true ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( var : bool { ) ID : int var ID : [ ] [ false / ( ( } ) ) / true ] [ ] [ ] bool } func ID ( ) { 123",
  "func ID ( var : bool { ) ID : int var ID : [ ] [ false ID ( ( } ) ) / true ] [ ] [ ] bool } func / ( ) { 123",
  "func var ( ) : bool { ID ID : bool var ID : [ ] int print ( ( ID ) ) }",
  "func var ( ) : bool { ID ID : bool var ID : [ ] ( print int ( ID ) ) }",
  "func var ( ID : bool { ID ) : bool var ID : [ ] ( print int ( ID ) ) }",
  "{ ID ( ) : [ ] [ ID ( ) [ ( ID * ( - ( - true ) ) ) ] ] [ ] int func } func ID ( ) { }",
  "{ ID ( ) ) [ ] [ ID ( ) [ ( ID * ( - ( - true : ) ) ] ] [ ] int func } func ID ( ) { }",
  "func ID ( ID : [ 123 ID ( ( ( / ID ) ) ) ] [ ] bool ) { }",
  "func ID ( ID : [ 123 ID ( ( ( [ ID ) ) ) ] / ] bool ) { }",
  "ID func ( ID : [ 123 ID ( ( ( [ ID ) ) ) ] / ] bool ) { }",
  "func ID ( ) { ( ( ) [ false / ( true == ID ( - ( false ) ) ) ) * ( - - ID ) ] [ ID ] = ( true ) call ID ( ) } func ID ( ) { }",
  "func ID ID ) { ( ( ) [ false / ( true == ( ( - ( false ) ) ) ) * ( - - ID ) ] [ ID ] = ( true ) call ID ( ) } func ID ( ) { }",
  "func ID ID true { ( ( ) [ false / ( true == ( ( - ( false ) ) ) ) * ( - - ID ) ] [ ID ] = ( ) ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : bool call ID ( ) : var ID { bool var ID : bool call ID ( ) call ID ( ) } }",
  "func ID ( ID : int , ID : bool ) { var ( : bool call ID ID ) : var ID { bool var ID : bool call ID ( ) call ID ( ) } }",
  "func ID ( ID : int , ID : bool ) { var ( : bool ) ID ID ) : var ID { bool var ID : bool call ID ( call call ID ( ) } }",
  "func ID ( ) { print ID ( ID [ ( ( false ) ) ] } if ( - 123 ) { } )",
  "func ID ( ) { print ID ( ID [ ( ( } ) ) ] } if ( - 123 ) { false )",
  "func ID ( ) ( print ID ( ID [ ( { } ) ) ] } if ( - 123 ) { false )",
  "func ID ( var : bool ) { var ID : int ID ID : bool ID ( - ( ID ) ) = ID if - 123 { } }",
  "func ID ( var : bool ) = var ID : int ID ID : bool ID ( - ( ID ) ) { ID if - 123 { } }",
  "func ID ( var : bool ) = var ID : int ID ID : bool ID ( ( - ID ) ) { ID if - 123 { } }",
  "func ID ( ) : bool { var ID : [ ( var ( true - - ID ) ) ] [ ] int - ID : int }",
  "func ID ( ) : bool { var ID : [ ( } ( true - - ID ) ) ] [ ] int - ID : int var",
  "func ID ( ) : bool { var ID : [ ( } ( true - - ID ) ) int [ ] int - ID : ] var",
  "func ID ( ID : int , ID : int ) { var ID ) [ ( - ID ( - 123 ) : ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) ] var ID ) [ ( - ID ( - 123 ) : { [ ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) ] var ID ) [ ( - ID ( - 123 ) : { [ ] func } bool ID ( ) { }",
  "func ID ( ) { ID ( ) [ ( ( - ( true ) ) - ] = ) ( ( - ( - ( ( false ) ) ) ) ) print ( ID ) }",
  "func ID ( ) { ID ( ) [ ( ( - ( true ) ) - ] = ) ( ( - ( - ( ( false ) ) ) ) ) print ( ID ) }",
  "func ID ( ) { ID ( ) [ ( ( - ( true ) ] - ) = ) ( ( - ( - ( ( false ) ) ) ) ) print ( ID ) }",
  "func ID [ ID : int ) { var ID : int var ID : ( ID ( false + true + true ) ] bool } func ID ( ) { }",
  "func ID [ ID : int ) { ) ID : int var ID : ( ID ( false + true + true ) ] bool } func ID ( var { }",
  "func ID [ ID : int ) bool ) ID : int var ID : ( ID ( false + true + true ) ] { } func ID ( var { }",
  "func ID ( ) : [ ) - - false - - - true * ( ID ) / ( ID false ] [ ] bool { }",
  "* ID ( ) : [ ) - - false - - - true func ( ID ) / ( ID false ] [ ] bool { }",
  "* ID ( } : [ ) - - false - - - true func ( ID ) / ( ID false ] [ ] bool { )",
  "func ID ( ID : int , ID : [ - false / true and ID - ID { ) - - - false and 123 ] bool , ID : bool ) { } func ID ( ) ( }",
  "func ID ( ID : int , ID : [ - false / true and ID - ID { ) - - - false and 123 ] bool , { : bool ) ID } func ID ( ) ( }",
  "func ID ( ID : int , ID : [ - false / true and ID - ID { ) - - - false and 123 ] bool , { : bool ) ID ( func ID ( ) } }",
  "func ID ( ) : bool { var ID : int { ID ( - } ( ID ) ) ) = - false ( while - true { } }",
  "func ID ( ) : bool { var ID - int { ID ( - } ( ID ) ) ) = : false ( while - true { } }",
  "func ID ( ) : bool { var ID - int { ) ( - } ( ID ) ) ID = : false ( while - true { } }",
  "func ID ( ID : [ ( false { + ID ( - - ( ( 123 ) ) ) ] int ) { } func ID ( ) ) }",
  "} ID ( ID : [ ( false { + ID ( - - ( ( 123 ) ) ) ] int ) { func func ID ( ) ) }",
  "} func ( ID : [ ( false { + ID ( - - ( ( 123 ) ) ) ] int ) { func ID ID ( ) ) }",
  "func ID ( ) : int { var ID : int } ( ID func ID : int ) { var ID : int var ID : bool call ID ( ) ID = ID }",
  "func ID ( ) : int { var ID : int } ( ID func ID : = ) { var ID : int var ID : bool call ID ( ) ID int ID }",
  "func ID ( ) : int { var ID : int } ( ID func ID : ID ) { var = : int var ID : bool call ID ( ) ID int ID }",
  "func ID ( ID : int , ID : [ ] bool bool : bool { var ID : [ ] bool } func ID ( ID : [ ] ) ) { }",
  "func ID : ID ( int , ID : [ ] bool bool : bool { var ID : [ ] bool } func ID ( ID : [ ] ) ) { }",
  "func ID int ID ( : , ID : [ ] bool bool : bool { var ID : [ ] bool } func ID ( ID : [ ] ) ) { }",
  "func ID ( : ID bool , ID : bool , ID : int ) : bool { if ID ( ) [ 123 ] { } }",
  "func ID ( bool ID bool , ID : : , ID : int ) : bool { if ID ( ) [ 123 ] { } }",
  "func ID ( ) { var ID : bool var ID : [ ] [ ] int print { ID [ true ] ) print ID } func ID ( ) ( }",
  "func ID [ ) { var ID : bool var ID : [ ] [ ] int print { ID ( true ] ) print ID } func ID ( ) ( }",
  "func ID ( ) { print ID [ ( 123 * - ID ( ) * ID ) ] [ ( } ) ] call ID ( ) } func ID ( ) { 123",
  "func ID ( ) { print ID [ ( 123 * - ID ( ) * ID ) ] [ ( } ) ] call ID ( ) } func ID ( ) { 123",
  "func ID ( ) { print ID [ ( 123 * - 123 ( ) * ID ) ] [ ( } ) ] call ID ( ) } func ID ( ) { ID",
  "func ID ( ID : int ) : [ ] int { var ID : [ ( int var ID : [ ] int if ] ( 123 ) ) { } { } }",
  "func ID ( ID var int ) : [ ] int { : ID : [ ( int var ID : [ ] int if ] ( 123 ) ) { } { } }",
  "func ID ( ID var int ) : [ ] int { : ID : [ ( int var ) : [ ] int if ] ( 123 ID ) { } { } }",
  "func var ( ) : int { var ID : int ID ID : int return true * ID - ( - - ( 123 ) ) } func ID ( ) { }",
  "func var ( ) : int { var ID : int ID ID : int return ( * ID - ( - - ( 123 ) ) } func ID true ) { }",
  "func var ( ) : int { ( ID : int ID ID : int return ( * ID - var - - ( 123 ) ) } func ID true ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] [ ] bool ] bool ) : [ { return ( ( false ) ) }",
  "func ID ( ID : bool , ID : bool , ID : [ ] [ ] bool ] bool ) : } { return ( ( false ) ) [",
  "func ID ( ) : bool , ID : bool , ID : [ ] [ ] bool ] bool ) : } { return ( ( false ) ID [",
  "func { ( ID : [ ] bool ) { ID ( ) = ( false == true ) } func ID ( ) ID }",
  "func { ( ID : [ ] bool ) { ID ( ) = ID false == true ) } func ID ( ) ( }",
  "func [ ( ID : { ] bool ) { ID ( ) = ID false == true ) } func ID ( ) ( }",
  "func ID ( ) : [ ID ( ) [ ( ID ( - ( false ) ) ) ] ] [ ] { int }",
  "func ID ( ) : int ID ( ) [ ( ID ( - ( false ) ) ) ] ] [ ] { [ }",
  "func ID ( ) : int ID ( ( [ ( ID ) - ( false ) ) ) ] ] [ ] { [ }",
  "func ID ( ID : int , ID : [ ] [ ] [ ( ( ( - ID ) } ) ] [ ] int , ID : bool ) { )",
  "func ID ( ID : int , ID : [ ] [ ] [ ( ( ( - ID ) } ) ] [ ] int , ID : bool ) { )",
  "func ID ( ID : int , ID : [ ] [ ] [ ( ( ( - ID ) } ) ] [ ] int , ID : bool ) { )",
  "func ID ( ID : [ ID ( ) [ - 123 * ID [ - - ( ( ( ( false ) ) ) } ] [ - ID ] * 123 ] ] bool ) { ) func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ - 123 * ID [ - - ( ( ( ( false ) ) ) } ] [ - ID ] * 123 ] ] ) ) { bool func ID ( ) { }",
  "func ID ( ID : func ID ( ) [ - 123 * ID [ - - ( ( ( ( false ) ) ) } ] [ - ID ] * 123 ] ] ) ) { bool [ ID ( ) { }",
  "func ID ( ) : [ ( ID ) true / - ID [ - ( ID ) ] [ ( false [ ] ] [ ID ] ) ] bool { }",
  "func ID ( ) : [ ( ID ) true / - ID [ - ( ID ) ] [ ( false [ ] ] [ ID ] ) ] bool { }",
  "func ID ( ) : [ ( ] ) true / - ID [ - ( ID ) ID [ ( false [ ] ] [ ID ] ) ] bool { }",
  "func ID ) ID : [ ID ( true * true - ( - ( - - ( ID ) ) ) + - - ID ) ] bool ( { }",
  "func ID ) ID : [ ID ( - * true - ( true ( - - ( ID ) ) ) + - - ID ) ] bool ( { }",
  "func ID ) - : [ ID ( ID * true - ( true ( - - ( ID ) ) ) + - - ID ) ] bool ( { }",
  "func ID ( ID : [ ] int ) { var + : bool call ID ( ( 123 ID ( ID ) ) ) while false { } } func ID ( ) { }",
  "func ID ( ID : [ ] int ) { var + : bool call ID ( ( 123 ID ( ID ) ) ) while false { } { func ID ( ) } }",
  "func ID ( ID : [ ] false ) { var + : bool call ID ( ( 123 ID ( ID ) ) ) while int { } { func ID ( ) } }",
  "func ID ( ID : [ 123 * - ( - ( true + ( 123 ) true + ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : ) 123 * - ( - ( true + ( 123 ) true + ) [ ] bool ) { } func ID ( ) { }",
  "func ID ( + : ) 123 * - ( - ( true + ( 123 ) true ID ) [ ] bool ) { } func ID ( ) { }",
  "ID func ( ) { call ID ( ) return }",
  "ID func ( ) { call return ( ) ID }",
  "ID func ( } { call return ( ) ID )",
  "func ID ( ID : [ ] int , ID : [ - ID ( ) ] bool ) { int : var ID : int var ID : int } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID ( [ - ID ( ) ] bool ) { int : var ID : int var ID : int } func ID : ) { }",
  "func ID ( ID : [ ] int , ID ( [ - ID ( ) ] int ) { int : var ID : bool var ID : int } func ID : ) { }",
  "func ID ( ) { var } : bool if ( ID [ ID ( true ) ] [ 123 ] ) { } if - ( 123 ) { ID } func ID ( ) { }",
  "true ID ( ) { var } : bool if ( ID [ ID ( func ) ] [ 123 ] ) { } if - ( 123 ) { ID } func ID ( ) { }",
  "true ID ( ) { var } : bool ] ( ID [ ID ( func ) ] [ 123 if ) { } if - ( 123 ) { ID } func ID ( ) { }",
  "func ID ( ) { while ( ID [ - ( - ( ( true } ) ) ] ) { } } func ID ( ) { )",
  "func ID ( ) { while ( ID [ - ( - ( ( true } ) ) ] ) { } } func ID ( ) ) {",
  "func ID ) ) { while ( ID [ - ( - ( ( true } ) ) ] ) { } } func ID ( ) ( {",
  "func ID ( ) : [ false * ( true / false and true + - - false and 123 ) * int ] false { }",
  "func ID ( ) : [ false * ( true int false and true + - - false and 123 ) * / ] false { }",
  "func ID ( ) : [ false * ( true int false and true + - - { and 123 ) * / ] false false }",
  "func ID ( ) : int { var ID : int ID var : [ ] bool return true / false / ID ( ) } func ID ( ) { }",
  "func ID ( ) [ int { var ID : int ID var : : ] bool return true / false / ID ( ) } func ID ( ) { }",
  "func ID ( ) [ int { var : : int ID var ID : ] bool return true / false / ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : true var ID : bool call ID ( - 123 * ( ID ) ) while bool { } } func ID ( ) { }",
  "func 123 ( ) { var ID : true var ID : bool call ID ( - ID * ( ID ) ) while bool { } } func ID ( ) { }",
  "func 123 ( ) { var ID : true var ID ( bool call ID ( - ID * : ID ) ) while bool { } } func ID ( ) { }",
  "func ID ( - : [ ID / true / - ( ID ( ID ) ) ] bool ) { }",
  "func ID / - : [ ID / true ( - ( ID ( ID ) ) ] bool ) { }",
  "func ID / - : [ ID bool true ( - ( ID ( ID ) ) ] / ) { }",
  "func ID ( ID ] int , ID : [ : int ) : [ ] bool { var ID : bool var ID : bool { var ID : [ ] int var ID : int } }",
  "func ID ( ID ] int , ID : [ : int ) : [ ] bool { var ID : bool ID ID : bool { var var : [ ] int var ID : int } }",
  "func ID ( ID ] int , ID : [ : int ) : [ ] bool { var ID : bool ID ID } bool { var var : [ ] int var ID : int } :",
  "bool ID ( ID : bool ) { var ID : bool var ID : bool } func ID ( ID : func , ID : int , ID : bool ) : [ ] bool { }",
  "bool ID ( ID : bool ) { var ID : bool var ID : bool } func ID ( ID : } , ID : int , ID : bool ) : [ ] bool { func",
  "bool ID ( ID : bool ) { var ID : bool var bool : ID } func ID ( ID : } , ID : int , ID : bool ) : [ ] bool { func",
  "func var ( ID : int , ID : bool ) : bool { ID ID : [ ] [ - ( ( ( true ) ) ) ] bool var ID : bool } func ID ( ) { }",
  "func var { ID : int , ID : bool ) : bool { ID ID : [ ] [ - ( ( ( true ) ) ) ] bool var ID : bool } func ID ( ) ( }",
  "func var { ID : int , var : bool ) : bool { ID ID : [ ] [ - ( ( ( true ) ) ) ] bool ID ID : bool } func ID ( ) ( }",
  "func ID ( ID : [ ] [ ] [ ] bool , ID : [ - - false / false * ( - - ( false ) ) ] bool , ID : int ) { } func ) ( ID { }",
  "func ID ( ID : [ ] [ ] [ ] bool , ID : [ - - false / false * ( - - ( false ) ID ] bool , ) : int ) { } func ) ( ID { }",
  "func ID ( ID : [ ] [ ] [ ] bool , ID : false - - false / [ * ( - - ( false ) ID ] bool , ) : int ) { } func ) ( ID { }",
  "func ID ( ID / [ ] int ) : bool { var ID : int { return false : ID ( ) * ID } ID = 123 } func ID ( ) { }",
  "bool ID ( ID / [ ] int ) : func { var ID : int { return false : ID ( ) * ID } ID = 123 } func ID ( ) { }",
  "bool ID ( ID / 123 ] int ) : func { var ID : int { return false : ID ( ) * ID } ID = [ } func ID ( ) { }",
  "func ID ( ID : / ID / ( ID [ - 123 and ID ) * true ] bool ) { }",
  "func ID ( ID : / ID / ( ID [ - 123 and ID ) * true ] bool ) { }",
  "func ID ( ID : ( ID / / ID [ - 123 and ID ) * true ] bool ) { }",
  "func ID ( ) { var ID : int var ) : [ ] [ ID [ false / ( - ( ID ) ) / ( true ) ] [ ( ( 123 ) ID ] ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : int var ) ( [ ] [ ID [ false / ( - ( ID ) ) / ( true ) ] [ ( : 123 ) ID ] ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : int var ) ( [ ] [ ID [ false / ( - ( ID ) ) / ( true ) ] [ ( : } ) ID ] ] bool 123 func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) ID int { print ID [ - ( false ) ] call ID ( ) } func : ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) ID int { print ID [ - ( false ) ( call ID ] ) } func : ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) ID int { print ID [ - ( false ) ( call ID ] ) } func : ( } { )",
  "func ID ( ID : bool ) : int { while ] ( ID ( ) [ ( true ) ] [ ID - ) { } while ID { } }",
  "func ID ( ID : bool ) : int { while ] ( ID ( ) [ ( true ) ] } ID - ) { [ while ID { } }",
  "func ID ( ID : bool ) : int { ) ] ( ID ( while [ ( true ) ] } ID - ) { [ while ID { } }",
  "func ID ( ID : int , ID : bool ) { [ ID : int var ID : bool ID var 123 / ( ID ) ] = false ID = ID }",
  "func ID ( ID : int , ID : bool ) { [ ID : int var ID : bool ID var 123 / ( ID ) ] = false ID = ID }",
  ") ID ( ID : int , ID : bool ) { [ ID : int var ID : bool ID var 123 / ( ID func ] = false ID = ID }",
  "int ID ( ) { var ID : func call ID ( ) print - true / - ( ( ( false ) ) ) / ( true ) }",
  "int ID ( ) { var ID : func call ID ( ) print - true / - ( } ( false ) ) ) / ( true ) (",
  "int ID ( ) { var ID : func call ID ( ) print - true } - ( / ( false ) ) ) / ( true ) (",
  "func ID ( ID : bool ) { var ID false int var ID : int while false * ( ( - - ID ) ) / ( : ) { } }",
  "func ID ( ID : bool ) { var false false int var ID : int while ID * ( ( - - ID ) ) / ( : ) { } }",
  "func ID ( - : bool ) { var false false int var ID : int while ID * ( ( ID - ID ) ) / ( : ) { } }",
  "func ID ( ID : bool , ID : [ ID { 123 / ( ID > ( - ( ( ID ) ) ) ) ] bool ) { } func ID ( ) * }",
  "func ID ( ID : bool , ID : [ ID { 123 / ( ID > ( - ( ( ID ) ) ) ) ID bool ) { } func ] ( ) * }",
  "func ID ( ID : bool , ID : [ ID { 123 / ( ID > ( - ( ( ID ) ) ) ) ID bool ) { } ( ] func ) * }",
  "func ID ( ) { return ID [ ( - ID [ true { ) ] } func ID ( ) ] }",
  "func ID ( ) { return ID [ ( - ID } true { ) ] } func ID ( ) ] [",
  "func ID ( ) { return ID [ ID - ( } true { ) ] } func ID ( ) ] [",
  "func ID ( : : int , ID : bool ) : bool { var ID ID int var ID : int { while ID { } } { } }",
  "func ID ( : : int , ID : bool int : bool { var ID ID int var ID : ) { while ID { } } { } }",
  "func ID ( : : int , ID : bool int : bool while var ID ID int var ID : ) { { ID { } } { } }",
  "func ID ( ID : bool , ID : [ - ID ( ID ( ) [ ID ] ) ] bool ) { } func ID ( } { )",
  "func ID ( ID : bool , ID : [ - ID ( ID ( ) [ ID ) ) ] bool ] { } func ID ( } { )",
  "func ID ( ID : bool ] ID : [ - ID ( ID ( ) [ ID ) ) ] bool , { } func ID ( } { )",
  "func ID ( ) : [ ] [ ( - ID ( - true ) ) ] ID [ ] bool { }",
  "func ID ( ID : bool , ID : int ) { var ID : int { ID [ ID ( 123 ) ID [ - ] ] = ( - ( ID ) ) } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : int { ID [ ID ( 123 ) ID [ ( ] ] = ( - - ID ) ) } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : int ID ID [ { ( 123 ) ID [ ( ] ] = ( - - ID ) ) } } func ID ( ) { }",
  "func ID ( ) : bool { var - : int print - ID [ ID ID ID + ( - - ( ID ) ) ] call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var - : int print - ID [ ID ID ID + ( - - ( ID ) ) ] call ID ( ) } func ID ( ) { }",
  "func ID ( [ : bool { var - : int print - ID ) ID ID ID + ( - - ( ID ) ) ] call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ - - - ( ID ( ) * ID * 123 123 ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID } [ - - - ( ID ( ) * ID * 123 123 ) ] [ ] [ ] bool ) { : func ID ( ) { }",
  "func ID ( * } [ - - - ( ID ( ) * ID ID 123 123 ) ] [ ] [ ] bool ) { : func ID ( ) { }",
  "func ID ( ID : int , ( : int , ID : [ ID true * - ( true ) ) ] [ ] bool ) { } func ID ( ) { }",
  ", ID ( ID : int func ( : int , ID : [ ID true * - ( true ) ) ] [ ] bool ) { } func ID ( ) { }",
  ", ID ( ID : int func ( : int - ID : [ ID true * , ( true ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int while - - true * ( - true - ID + ID ) * - ID { } while ID { } } func 123 ( ) { }",
  "func ID ( ) : int - var ID : int while - - true * ( - true { ID + ID ) * - ID { } while ID { } } func 123 ( ) { }",
  "func ID ( ) : int - var ID : int while - - true * ( } true { ID + ID ) * - ID { } while ID { } } func 123 ( ) { -",
  "func ID ( ID : [ ID [ ( - - [ true ) ) ] ] ( ] [ ] int ) { } func ID ( ) { }",
  "] ID ( ID : [ ID [ ( - - [ true ) ) func ] ( ] [ ] int ) { } func ID ( ) { }",
  "] ID func ID : [ ID [ ( - - [ true ) ) ( ] ( ] [ ] int ) { } func ID ( ) { }",
  "func ID ( - : int , ID : int , ID : int ) { var ID : int var ID : int print ( - ID ( ID ) ) }",
  "func ID ( - : int , ID : int , ID : int ) { var ID : int var ID : int print ( - ID ( ID ) ) }",
  "func ID ( - : int , ID : int , ID : int ) { ( ID : int var ID : int print var - ID ( ID ) ) }",
  "func ID ( ) : [ ID [ { ( ID ( ID ) ) ] ] bool - }",
  "func ID ( ) : [ ID [ { ( ID ( ID ) ) ] ] bool - }",
  "func ID ( ) : [ ID [ ) ( ID ( ID { ) ] ] bool - }",
  "func ID ( ) : bool { var ID : ID } func ID ( ) { bool ( ) [ - - ID ] = 123 }",
  "func ID ( ) : bool { var ID : ID } func ID ( ) - bool ( ) [ { - ID ] = 123 }",
  "func 123 ( ) : bool { var ID : ID } func ID ( ) - bool ( ) [ { - ID ] = ID }",
  "func ID bool ID : [ ] int ) : int { var ID : ( }",
  "func ID bool ID : [ ] int ) : int { var ID : ( }",
  "func } bool ID : [ ] int ) : int { var ID : ( ID",
  "func ID ( ) { var ID : int while func > ( false * - ID ) { } ID = ID } true ID ( ) { }",
  "func ID ( ) { var ID : int while func > ( false * - ID ) { } ID = ID } true ID ( ) { }",
  "func ID ( ) { var : ID int while func > ( false * - ID ) { } ID = ID } true ID ( ) { }",
  "func ID ( ) { var ID : bool 123 ID : [ - - ( ( var / ( ( - false ) ) / true ) ) ] [ ] [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool 123 ID : [ - - ( ( var / ( ( - false ) ) / true ) ( ] [ ] [ ] [ ] [ ] bool } func ID ) ) { }",
  "func ID ( ) { var ID : bool 123 ID : [ - - ( ( var / ( ( - false ) ) / true ) ( ] [ ] [ ] [ ] [ ] bool } func ID ) ) { }",
  "func ID ( ID : bool , ID : [ ID ( [ [ ID ( ) [ ID ] [ - ID ] ] ] ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ] : [ ID ( [ [ ID ( ) [ ID ] [ - ID ] ] ID ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ] : [ ID ( [ } ID ( ) [ ID ] [ - ID ] ] ID ) ] bool ) { } func ID ( ) { [",
  "func ID ( ) ) bool { var ID : [ 123 >= ID [ ( ( ID : ) ] ] [ ] bool var ID : int }",
  "func ID ( ) ) bool { var ID >= [ 123 : ID [ ( ( ID : ) ] ] [ ] bool var ID : int }",
  "func ID ( ) ) [ { var ID >= [ 123 : ID bool ( ( ID : ) ] ] [ ] bool var ID : int }",
  "func ID ( ) { var { : int } func ID ( ID : [ ] int ) : int ID var ID : int }",
  "} ID ( ) { var { : int } func ID ( ID : [ ] int ) : int ID var ID : int func",
  "} ID ( ) { var { func int } func ID ( ID : [ ] int ) : int ID var ID : int :",
  "func ID ( ID : [ false [ ( ( ( ID ) ) ) ] ] bool ) { }",
  "func ID ( ID : [ false [ ( ( ( ID ) ) ) { ] bool ) ] }",
  "func ID [ ID : ( false [ ( ( ( ID ) ) ) { ] bool ) ] }",
  "func ID ( ID : int , ID : ) ) { var ID : bool } func ID ( bool { var ID : int var ID : int return - true }",
  "func ID ( ID : int , ID : ) ) { var ID : bool } func ID ( bool true var ID : int var ID : int return - { }",
  "func ID ( ID : int , ID : ) ) { var ID : bool } func ID ( bool true var ID : int var return : int ID - { }",
  "func ID ( ) : bool { ID var : int return ID ( ) * true / 123 - ID + true } func ID ( ) { }",
  "func ID ( ) : } { ID var : int return ID ( ) * true / 123 - ID + true bool func ID ( ) { }",
  "func ID ( ) : } { ID var : int return ID ( ) bool true / 123 - ID + true * func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ - ( - ( ( ) ) ) ID ] [ ] bool }",
  "func ID ( ) { var ID : bool var ID [ [ - ( - ( ( ) ) ) ID ] : ] bool }",
  "func ID ( ID : bool ) : [ ] int { var ( : [ ID false / - - ( ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : bool ) : ( ] int { var [ : [ ID false / - - ( ID ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : bool ) : ( ] int { var [ : [ ID false / - ID ( ID ) ) ] bool } func - ( ) { }",
  "func } ( ID : bool , ID : [ true * ID and true - ID ( ) + ID ] bool ) { ID",
  "func } ( ID : bool , ID : [ true bool ID and true - ID ( ) + ID ] * ) { ID",
  "func } ( ID : bool , ID : [ true bool ID and true - ID ( ) * ID ] + ) { ID",
  "func ID ( ) : int { + ID : int var ID : [ ] bool if - - 123 * true var true { } } func ID ( ) { }",
  "func ID ( ) : int { + ID : int var ID : [ ] bool if - - 123 * true var true { ) } func ID ( } { }",
  "func ID ( ) : int { + ID : int var ID : [ ] var if - - 123 * true bool true { ) } func ID ( } { }",
  "func ID ( ) : int { var ID : [ ] bool { var ID : bool } ID : int while ( - ID ) { } while ( - ID ) { } } call ID ( ) var func ID ( ) { }",
  "func ID ( ) : int { var ID : while ] bool { var ID : bool } ID : int while ( - ID ) { } [ ( - ID ) { } } call ID ( ) var func ID ( ) { }",
  "func ID ( ) : int { var ID : while ] bool } var ID : bool } ID : int while ( - ID ) { } [ ( - ID ) { { } call ID ( ) var func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int ID ) true - ID [ ( ( - - 123 ) ) ] [ - - true ] - - ( ( ( true ) ) ) ] [ ( - ( 123 [ ) ] = ( ID ) }",
  "func ID ( ) { ID ID : bool var var : int ID ) true - ID [ ( ( - - 123 ) ) ] [ - - true ] - - ( ( ( true ) ) ) ] [ ( - ( 123 [ ) ] = ( ID ) }",
  "func ID ( ) { ID ID : bool var var : int ID ) true ID - [ ( ( - - 123 ) ) ] [ - - true ] - - ( ( ( true ) ) ) ] [ ( - ( 123 [ ) ] = ( ID ) }",
  "func ID ( ) : bool { var func : [ ID ( ( 123 < ID ) ) ] [ ] int } ID ID ( ) { }",
  "func ID ( ) : bool { } func : [ ID ( ( 123 < ID ) ) ] [ ] int } ID ID ( ) { var",
  "func ID ( ) : bool { } func : [ ID ( ( ID < ID ) ) ] [ ] int } 123 ID ( ) { var",
  "func ID ( var { var ID : [ ID [ true * ( ( - ( false ) ) ) ] ] int ) ID : int }",
  "func ID ( var { var ID : [ ID [ true ) ( ( - ( false * ) ) ] ] int ) ID : int }",
  "func ID ( var { var ID : [ ID [ true ) ( ( - ( false * ) ) int ] int ) ID : ] }",
  "func ID ( ID : int , ID : [ true * false / true + ( ( ID ] ) ] [ ] [ ) int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ true * ) / true + ( ( ID ] ) ] [ ] [ ) int ) { } func ID ( false { }",
  "func ID ( ID : int , ID : [ true * ) / true + ( ( ID ] ) ] [ ] [ ) int ) { } func ID } false { (",
  "func ID ( ) : bool { var ID ID bool var ID : bool ID ( ) [ ID [ ID ] [ false ] ] [ true ] = : }",
  "func ID ( ) : bool { var ID ID bool var ID : bool true ( ) [ ID [ ID ] [ false ] ] [ ID ] = : }",
  "func ID ( ) : [ { var ID ID bool var ID : bool true ( ) [ ID bool ID ] [ false ] ] [ ID ] = : }",
  "func ID ( ID : int ) { ] ID : [ false and ( ID ( ) ) and ( ID ) var [ ] [ ] bool var ID : int }",
  "func ID ( ID : int ) { ] ID : [ false and ( ID ( ) ) and ( ID ) var [ ] [ ] bool var ID : int }",
  "func ID ( ID : { ) int ] ID : [ false and ( ID ( ) ) and ( ID ) var [ ] [ ] bool var ID : int }",
  "func ID ( ID : int , ID ) int , ID : bool ) : [ ] [ - - ID ( ID ) ] int { } func ID ( : { }",
  "func ID ( ID : int , ID ) int , ID : bool ) : [ ( [ - - ID ( ID ) ] int { } func ID ] : { }",
  "func ID ( ID : int , - ) int , ID : bool ) : [ ( [ - ID ID ( ID ) ] int { } func ID ] : { }",
  "func ID ( ) : int { var ID : int var ID : bool print true * - ID ) ( true ) ] [ ID ] / - - ID ID = ( ID ) } func ID ( [ { }",
  "func ID ( ) : int { var ID : int var ID : - print true * bool ID ) ( true ) ] [ ID ] / - - ID ID = ( ID ) } func ID ( [ { }",
  "func ID ( ) { call ID ( ) { return ( true / true ID ( ID ) ) } } func / ( ) { }",
  "func ID ( ) { call ID ( ) ( return { true / true ID ( ID ) ) } } func / ( ) { }",
  "func ID ( ) call { ID ( ) ( return { true / true ID ( ID ) ) } } func / ( ) { }",
  "func ID ( - { var ID : [ ] int var ID : int ID ( ) = ) - - ( 123 ) } func ID ( ) { }",
  "func ID ( - { var ID : [ ] int var ID : int ID ( ) - ) = - ( 123 ) } func ID ( ) { }",
  "func ID ID - { var ID : [ ] int var ( : int ID ( ) - ) = - ( 123 ) } func ID ( ) { }",
  "func ID ( ID : bool ) ( return false and ID or ID ( ) [ { ID ) ] or ID }",
  "func ID ( ID : and ) ( return false bool ID or ID ( ) [ { ID ) ] or ID }",
  "func ID ( ID : and ) ( return false bool ID or ) ( ID [ { ID ) ] or ID }",
  "func ID ( ) { var ID : [ ID ( ) [ ( ( true ) ) ] ] [ ( [ ] [ ] [ ] bool } func ID ] ) { }",
  "func ID ( ) { var ID : [ ID ( ) [ ( ( true ) ) ] ] [ ( [ ] [ bool [ ] ] } func ID ] ) { }",
  "func ID ( ) { var ID : [ ID ( ) [ ( ( true ) ) ] ] [ ( [ ] [ bool [ ] ] } func ID ] ) { }",
  "func ID ( ID : [ - ( ID ( ( ID ( ) { ) ) ] [ ] [ ] [ ] [ ] bool ) ) } func ID ( ) { }",
  "func ID ( ID : [ - ( ID ( ( ID ( ) { ) ) ] [ ] [ ] } ] [ ] bool ) ) } func ID ( ) { [",
  "func ID ( ID : [ - ( } ( ( ID ( ) { ) ) ] [ ] [ ] } ] [ ] bool ) ) ID func ID ( ) { [",
  "func ID ( ID : [ ] bool } { var ID : bool var ID : bool ID [ - ID ( ) ] [ - ( ( - - - 123 ) ) ] = ID )",
  "func ID ( ID : - ] bool } { var ID : bool var ID : bool ID [ - ID ( ) ] [ - ( ( - [ - 123 ) ) ] = ID )",
  "func - ( ID : - ] bool } { var ID : bool var ID : bool ID [ - ID ( ) ] [ - ( ( ID [ - 123 ) ) ] = ID )",
  "func } ( ID : [ ] bool , ID : [ ] bool ) { var ID : [ ] [ ] int ID ( ) = - - 123 } func ID ( ) { ID",
  "func } ( ID : [ ] bool , ID : [ ] bool ) { var ID : [ ] [ ] int ID ( ) = - - 123 } func ID ( ) { ID",
  "func } ( ID : [ ] bool , ID : [ ] bool ) { [ ID : [ ] var ] int ID ( ) = - - 123 } func ID ( ) { ID",
  "func ID ( ID : [ ( int , ID : bool , ID : int ) : int { var ID : [ false * ID ] int } func ID ] ) { }",
  "func ID ( ID : [ ( int , ID : bool , ID : int ) : int { var ID : [ false int ID ] * } func ID ] ) { }",
  "func ID ( ID : [ ( int , ID : bool , ID : int ) : int { var ID : [ false int ID ] } * func ID ] ) { }",
  "func ID ( ID : bool ) { var : ID [ ] bool var ID : bool call ID ( ) return - - ID } func ID ( ) { }",
  "func ID { ID : bool ) { var : ID [ ] bool var ID : bool call ID ( ) return - - ID } func ID ( ) ( }",
  "func ID { ID : bool ) { var return ID [ ] bool var ID : bool call ID ( ) : - - ID } func ID ( ) ( }",
  "{ ID ( ID : int , ID : [ ID [ false * - true - false - - ID ] [ ID ] ] bool ) func }",
  "{ ID ( ID : int , ID : [ ID ) false * - true - false - - ID ] [ ID ] ] bool [ func }",
  "{ ID ( ID : int , ID : [ ID ) false * - true - false - - ID ] [ ID ] ] [ bool func }",
  "func ID ( ID : int , ID [ bool ) { var ID : [ ] [ ] [ ] int var ID : : ] int }",
  "func ID ( ID : int , ID [ bool ) { var ID int [ ] [ ] [ ] int var ID : : ] : }",
  "func ID ( ID : int , ID [ bool ) { var ID var [ ] [ ] [ ] int int ID : : ] : }",
  ") ID ( ) : [ - - - - false + ( - - - false / - - ( - - false func * - ( ( ID ) ) ) ] [ ] bool { }",
  ") ID ( ) : [ - - false - - + ( - - - false / - - ( - - false func * - ( ( ID ) ) ) ] [ ] bool { }",
  ") ID ( ) : [ - - false ) - + ( - - - false / - - ( - - false func * - ( ( ID - ) ) ] [ ] bool { }",
  "func ID ( ID : [ - ( ( ( ID [ - ID ] ] ID ] ) ) ) [ [ ] [ ] [ ] int ) { }",
  "func ID ( ID : [ - ( ( ( ID [ - ID ] ] ID ] ) ) ) [ [ ] [ ] ] [ int ) { }",
  "func ID [ ID : [ - ( ( ( ID ( - ID ] ] ID ] ) ) ) [ [ ] [ ] ] [ int ) { }",
  "func ID ( ) : int { var ID ( int ID ( ) = ID : true * 123 / ID ) call ID ( ) }",
  "func ID ( ) : int ID var ID ( int { ( ) = ID : true * 123 / ID ) call ID ( ) }",
  "func ID ( ) : int ID var * ( int { ( ) = ID : true ID 123 / ID ) call ID ( ) }",
  "func ID } ) { var ID : [ false * ( ID / - - - - - ID / false ) / false ] int (",
  "func ID } ) - var ID : [ false * ( ID / { - - - - ID / false ) / false ] int (",
  "func ID } ) - var ID : [ false * ( ID / { - - - - ID / false ) / false ] int (",
  "func ID ( ID : [ - 123 ] - 123 + true / ID ( ID ) * - ( true ) ] [ * int ) { } func ID ( ) { }",
  "func ID ( ID : [ - 123 ] - ] + true / ID ( ID ) * - ( true ) 123 [ * int ) { } func ID ( ) { }",
  "func ID ( ID : [ , ID : int ] bool ) { var ID : bool }",
  "func ID ( ID : [ , ID : int ] bool ) { ID var : bool }",
  "{ ID ( ) func var ID : int var ID : int return ID [ false >= - ( - ( ( ID ) ) ) ] [ false ] }",
  "( ID ( ) func var ID : int var ID : int return ID [ false >= - ( - ( { ID ) ) ) ] [ false ] }",
  "( ID ( ) func var ID : int var ID : int return ( [ false >= - ID - ( { ID ) ) ) ] [ false ] }",
  "} ID ( ) : [ ID ( - ID [ ( - true ) ] [ ID ] ) ] int { func func ID ( ) { }",
  "} ID ( ) : [ ID ( - [ ID ( - true ) ] [ ID ] ) ] int { func func ID ( ) { }",
  "} ID ( ) : [ ID ID - [ ID ( - true ) ] [ ID ] ) ] int { func func ( ( ) { }",
  "func ID ( ID : bool ) { var ID : [ true * ( ID [ true ] [ : ] ) * - false ] int var ID true int }",
  "func ID ( int : bool ) { var ID : [ true * ( ID [ true ] [ : ] ) * - false ] int var ID true ID }",
  "func ID ( int : bool ) { var ID : } true * ( ID [ true ] [ : ] ) * - false ] int var ID true ID [",
  "[ ID ( ) : bool { var ID : bool var ID : int { var ID : [ ] int { var ID : func ID ] bool var ID : bool } if ( - 123 ) { } } } func ID ( ) { }",
  "[ ID ( ID : bool { var ID : bool var ID : int { var ) : [ ] int { var ID : func ID ] bool var ID : bool } if ( - 123 ) { } } } func ID ( ) { }",
  "var ID ( ID : bool { var ID : bool var ID : int { var ) : [ ] int { [ ID : func ID ] bool var ID : bool } if ( - 123 ) { } } } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ( ( ( - - ( - ID ) ) ) ) ] [ ] [ ] [ ] [ ] var ] bool [ ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ( ( func - - ( - ID ) ) ) ) ] [ ] [ ] [ ] [ ] var ] bool [ ID : int } ( ID ( ) { }",
  "func ID ( ) { var ( : [ - ID ( func - - ( - ID ) ) ) ) ] [ ] [ ] [ ] [ ] var ] bool [ ID : int } ( ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) : int { var ID : bool var ID : bool print 123 ) ( ID ) print - ( ( ( true ) ) > } func ID ( ) { }",
  "func ID ( ID : int , ID var int , ID : int ) : int { : ID : bool var ID : bool print 123 ) ( ID ) print - ( ( ( true ) ) > } func ID ( ) { }",
  "func ID ( ID : { , ID var int , ID : int ) : int { : ID : bool var ID : bool print 123 ) ( ID ) print - ( ( ( true ) ) > } func ID ( ) int }",
  "func ID ( ID : [ ] int int : ) { }",
  "] ID ( ID : [ func int int : ) { }",
  "] ID ( ID : [ func int int : ) { }",
  "ID func ( ) : bool { var ID : [ ] int var ID : bool print ( true + ID ) }",
  "ID func ( ID : bool { var ) : [ ] int var ID : bool print ( true + ID ) }",
  "ID func ( var : bool { ID ) : [ ] int var ID : bool print ( true + ID ) }",
  "func ID ( ID : bool ) bool var ID : bool var ID : [ ] { return ( ID ( ) ) } func ID ( ) { }",
  "func : ( ID ID bool ) bool var ID : bool var ID : [ ] { return ( ID ( ) ) } func ID ( ) { }",
  "func : ( ID ID bool ) bool var ID var bool : ID : [ ] { return ( ID ( ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int ) : bool { var ID ID [ ] int { ID ( ID ) = : if 123 { } } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int ) : bool { var ID ID [ ] int { ) ( ID ID = : if 123 { } } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int ) : bool { var ID ID [ ] int { ) ( ID ID = : if 123 { } } } func ID ) ( { }",
  "func ID ( ) { var ID : [ ID [ ID [ - ( ( ID ) ) ] ] ] [ ] bool var ID : bool } func } ( ) { ID",
  "func ID ( ) { var ID : [ ID [ ID [ - ( ( ID ) ) ] ] ] [ ] bool var ID : bool } func } ( ) { ID",
  "func ID ( ID : [ ] [ true / - 123 + ID ( ) ( ) ) - ( true ) ] int { }",
  "func ] ( ID : [ ID [ true / - 123 + ID ( ) ( ) ) - ( true ) ] int { }",
  "func ] ( ID } [ ID [ true / - 123 + ID ( ) ( ) ) - ( true ) ] int { :",
  "func ID ( ID : int , ID : bool ) : int { print false / 123 == ( [ - - - ( - - ID ) ] [ ID ] } func ID ID ) { }",
  "func ID ( ID : int , ID : bool ) : int { print false / 123 == ( [ - - - ( - - ID ) ] [ ID ] } func ID ID ) { }",
  "func ID ( ID : int , ID : bool ) : int { print false / 123 == ( [ - - - } - - ID ) ] [ ID ] ( func ID ID ) { }",
  "func = ( ID : bool , ID : bool ) { var ID : bool { ID ( true / false ) ID false } print - - ID }",
  "func = ( ID : bool , ID : bool ) { var ID : bool / ID ( true { false ) ID false } print - - ID }",
  "- = ( ID : bool , ID : bool ) { var ID : bool / ID ( true { false ) ID false } print func - ID }",
  "func ID ( ) : bool { var ID : int var ID : int ID ( 123 / ID ( ( ID ) ) ) = - ID ) ID } func ID ( print { }",
  "func ID ( ) : bool { var ID : int var ID : int ID ( 123 / ID ( ( ID ) ) ) = - ID ) ID } func ID ( print { }",
  "func ID ( ) : bool { var ID : int var ID : int ID ( 123 / ID ( ( ID ) ) ) = - ID ) ID } func ID ( print { }",
  "func : ( ID : bool , ID : int ) : int { var ID : bool var ID ID int return ( false ) }",
  "func : ( ID : bool , ID : int ) : int { var ID : bool var ID ID int return ( false ) }",
  "func ID ( ) { > ID ( ) / - 123 print ID ( ) * ( ( - true ) ) if true { } }",
  "func ID { ) ( > ID ( ) / - 123 print ID ( ) * ( ( - true ) ) if true { } }",
  "func ID > ) ( { ID ( ) / - 123 print ID ( ) * ( ( - true ) ) if true { } }",
  "func ID ( ID : int , ID : bool ) ] [ ID [ - - ID ( false ) ] : int { }",
  "func ID ( ID : { , ID : bool ) ] [ ID [ - - ID ( false ) ] : int int }",
  "func ID ( ID : ID , ID : bool ) ] [ { [ - - ID ( false ) ] : int int }",
  "func ID ( ID : [ ( ( ID ( ] false / 123 / ID ) ) ) - bool ) { }",
  "func ID ( ID : [ ) ( ID ( ] false / 123 / ID ) ( ) - bool ) { }",
  "func ID ( ID : [ false ( ID ( ] ) / 123 / ID ) ( ) - bool ) { }",
  "func ID ( ID : [ ID ( ) [ ( ( / true - ID ) ) ] ] [ ] bool ) { }",
  "func ID ( ID : [ ID ( ) [ ( ( / true - ID ) ) ] ] [ ] bool ) { }",
  "func ID ( ID : [ ( ( ) [ ID ( / true - ID ) ) ] ] [ ] bool ) { }",
  "} ID ( ) { { var ID : [ ] [ ( ID [ 123 ] ) ] int var ID : bool } ID = ( 123 ) } func ID ( ) { func",
  "} ID ( ) { { var ID : [ ] [ ( ID [ 123 var ) ] int ] ID : bool } ID = ( 123 ) } func ID ( ) { func",
  "} ID ( ) { { var ID : [ ] [ ( ID [ 123 var ) ] int ] ID : bool } ID = ( 123 ) } func ID ( ) { func",
  "- ID ( ) : [ ] [ ( ID ( ) / - func ( true ) ) ] [ ] int { }",
  "- ID ( ) : [ ] [ ( ID ( ) / - func ( true ) ) ] [ ] int { }",
  "func ID ( ) { var int : bool var ID : bool } func ID ( ID : bool , ID : ID ) : bool { var ID : [ ] bool }",
  "func ID ( ) { var int : bool var bool : bool } func ID ( ID : bool , ID : ID ) : bool { var ID : [ ] ID }",
  "func ID ( ) { var int : ID var bool : bool } func ID ( ID : bool , ID : bool ) : bool { var ID : [ ] ID }",
  "func ID ( bool : ID , ID : bool , ID : int ) : int { ID ( ) = - 123 / - ( false ) }",
  "func ID ( bool : ID , ID : bool , { : int ) : int ID ID ( ) = - 123 / - ( false ) }",
  "func ID ( bool : ID bool ID : , , { : int ) : int ID ID ( ) = - 123 / - ( false ) }",
  "func ID ( ) : bool { var ID : int - return } return { ID [ ( 123 ) ] [ - ( ID ) ] } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int - return ID return { ID [ ( 123 ) ] [ - ( ID ) ] } func } ( ) { }",
  "func ID ( ) : bool { var ID : int - return ID return { ID [ ( 123 ) ] [ - ( ID ) } ] func } ( ) { }",
  ": ID ( ) : int { var ID func int var ID : [ ] bool while 123 + true * ( ID ) / - - ( - ( ( ( ( - ( ( ID ) ) ) ) ) ) ) + ( - ( ( 123 ) ) ) { } print - - ( ( ID ) ) } func ID ( ) { }",
  ": ID ( ) : int { var ID func int var ID : [ ] bool while 123 + true * ( ID ) / - - ( - ) ( ( ( - ( ( ID ) ) ) ) ) ) ) + ( - ( ( 123 ) ) ( { } print - - ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ] { var ID : [ - true and - ID ( ID ) and false ) bool var ID : [ ] int } func ID ( ) { }",
  "func { ( ] ID var ID : [ - true and - ID ( ID ) and false ) bool var ID : [ ] int } func ID ( ) { }",
  "func { ( ] ID var ID : [ - true and - ID ( ID ) and false ) bool ] ID : [ var int } func ID ( ) { }",
  "func ID ( ) return } func ID ( ) { var ID : [ ] int { }",
  "func ID ( ) return } func ID ( ) { var [ : ID ] int { }",
  "func ID ( ) : int { return ( ID [ ID ( - ID ) ] [ - - - - ID ) ] }",
  "func ID ( ) : int { return ( ID [ ID ( - - ) ] [ - ID - - ID ) ] }",
  "- ID ( ) : int { return ( ID [ ID ( - - ) ] [ - ID func - ID ) ] }",
  "func ID ( ID : bool ) { call ID ( } - - - 123 * ( - - true ) ) - func ID ( ) { }",
  "func ID ( ID : ( , ID : bool , ID : [ 123 / ID - ( false ) ] bool ) { } func ID int ) { }",
  "func ID ( ID : ( , ID : bool , ID : [ 123 / ID - ( false ) ] bool ) { } func ID int ) { }",
  "func ID ( ID : ( , ID : bool , : ID [ 123 / ID - ( false ) ] bool ) { } func ID int ) { }",
  "func ID ( ) : [ 123 + true - - ID > - ( { ( ( - ID ) ) ) ] int - } func ID ( ) { }",
  "func ID ( ) : [ ( + true - - ID > - ( { ( 123 - ID ) ) ) ] int - } func ID ( ) { }",
  "func ID func ) : [ ( + true - - ID > - ( { ( 123 - ID ) ) ) ] int - } ( ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ) [ - - 123 / - true * ( ( false ] ) ] bool } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ) ] - - 123 / - true * ( ( false [ ) ] bool } func ID ( ) { }",
  "func ID ( ID : int ) { var - : [ ) ] - ID 123 / - true * ( ( false [ ) ] bool } func ID ( ) { }",
  "func ID ( ] { { var ID : [ ) [ ] [ ] bool ID [ - ID ] = 123 } print true } func ID ( ) { }",
  "func func ( ] { { var ID : [ ) [ ] [ ] bool ID [ - ID ] = 123 } print true } ID ID ( ) { }",
  "func func ( ] { { var ID : [ ) [ ] [ ] bool ID [ - ID ] = 123 } print true } ID ID ( ) { }",
  "func ID ( ) { ( ID call ) if ( ( false * ID ( ) ) ) { } } func ID ( ) { }",
  "func ID ( ) { ( ID call ) if ( ( func * ID ( ) ) ) { } } false ID ( ) { }",
  "func ID ) ) { ( ID call ) if ( ( func * ID ( ) ) ) { } } false ID ( ( { }",
  "bool ID ( ID : [ false + - ID ( ( - - false ) ) + ( - ( - ID ) ) ] func ) { } func ID ( ) { }",
  "bool ID ( ID : [ false + - ID ( ( - - false ) ) + ( - ( - ID ) } ] func ) { } func ID ( ) { )",
  "bool ID ( ( : [ false + - ID ( ( - - false ) ) + ID - ( - ID ) } ] func ) { } func ID ( ) { )",
  "func : ( ID : int , ID : bool ) { { var ID ID [ - ID [ ID ] [ false ] ] int var ID : bool } }",
  "func : ( ID : int , ID : ID ) { { var ID ID [ - bool [ ID ] [ false ] ] int var ID : bool } }",
  "func : ( ID : int , ID : ID ) { { var ID [ ID - bool [ ID ] [ false ] ] int var ID : bool } }",
  "func ID ( ID : int ) { var [ : int var ID : bool print - ( ID ( ) ID ID ] ) }",
  "func ID ( ) : int ID { var [ : int var ID : bool print - ( ID ( ) ID ID ] ) }",
  "func ID ( ) : int ID : var [ : int var ID { bool print - ( ID ( ) ID ID ] ) }",
  "func ID ( ID : bool , ID : bool , return : [ ] bool ) : bool { var ID : bool ID } func ID ( ) : bool { }",
  "func ID ( ID : bool , ID : bool , return : [ ] bool ) : bool { var ID : bool ID } func ID ( ) : bool } {",
  "ID func ( ID : bool , ID : bool , return : [ ] bool ) : bool { var ID : bool ID } func ID ( ) : bool } {",
  "func ID ( ) { var ID : [ ] bool ( print - ID ( ( ( ID ) ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool ( print - ID ( ( ( ID ) ) ) ) } func ID ( ) { }",
  "func ID ) ) { var ID : [ ] bool ( print - ID ( ( ( ID ) ) ) ) } func ID ( ( { }",
  "func ID ( ID { bool , ID : bool ) : [ ( ID ( ID ( ) ) ) ] int { } func ID ( ) : }",
  "func ID ( ID { bool , ID : bool ) : [ ( ID ( ID ( ) ) ) ] int } } func ID ( ) : {",
  "func ID { ID { bool , ID : bool ) : [ ( ID ( ID ( ) ) ) ] int } } func ID ( ) : (",
  "( ID ( ID : bool ) : [ ] int { var ID : bool var ID : bool return 123 and true and func - ( ID ) ) }",
  "( ID ( ID : bool ) : [ ] and { var ID : bool var ID : bool return 123 and true int func - ( ID ) ) }",
  "( ID ( ID : bool ) : [ ] and { var ID : bool var ID : bool ID 123 and true int func - ( return ) ) }",
  "ID ID ( func : bool ) : bool { return }",
  ": ID ( func : bool ) ID bool { return }",
  ": ID ) func : bool ( ID bool { return }",
  "func ID ( ) : [ ] [ ID [ - true * - - 123 >= - 123 func ] bool { } ] ID ( ) { }",
  "func ID ( ) : [ ] [ ID [ - true * - - 123 >= - 123 func ] bool { } ] ID ( ) { }",
  "func ID ( ) : [ ] - ID [ - true * - - 123 >= [ 123 func ] bool { } ] ID ( ) { }",
  "func ID ( ID ID [ ] [ ( true and - 123 * true ) + ( : ) + ( - false ) ] int ) { }",
  "func ID ( ID ID [ ( [ ( true and - 123 * true ) + ( : ) + ] - false ) ] int ) { }",
  "func ID ( ID ID [ ( [ ( true and - 123 * true + ) ( : ) + ] - false ) ] int ) { }",
  "func ID bool ID : ( , ID : [ ] int , ID : int ) { var ID : bool } func ID ( ) : bool { var ID : [ ] int var ID : bool }",
  "func ID bool ID : ( , ID ) [ ] int , ID : int : { var ID : bool } func ID ( ) : bool { var ID : [ ] int var ID : bool }",
  "func ID bool ID : bool , ID ) [ ] int , ID : int : { var ID : ( } func ID ( ) : bool { var ID : [ ] int var ID : bool }",
  "func ID ( ) ) var ID : [ - - - - ID [ ( ID { ] ] bool } func ID ( ) { }",
  "func ID ( ) ) var ID : [ - - - - ID [ ( ID { ] ] bool } func ID } ) { (",
  "func ID ( ) ) var ID : [ - - - ( ID [ - ID { ] ] bool } func ID } ) { (",
  "func ID ( ) ) int { return } func ID ( ID : int : { var ID : [ ( 123 ) ] bool }",
  "func ID ( ) ) int { return } func ID ( ID : ( : { var ID : [ int 123 ) ] bool }",
  "func ID ( ) { var int : ID var ID : int ID = - - ( ( ( 123 ) ) ) } func ID ( ) { }",
  "func ID ( ) ID var int : ID var { : int ID = - - ( ( ( 123 ) ) ) } func ID ( ) { }",
  "func ID ( ) ID var int : ID var { : - ID = - int ( ( ( 123 ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var bool : ID call ID ( ( ID [ true ] ) ) { } } func ID ( ) { }",
  "func ID ( ] { var ID : int var bool : ID call ID ( ( ID [ true ) ) ) { } } func ID ( ) { }",
  "func ID ( ] { var ID : int var bool : ID call ID ( ( ID [ ) ) true ) { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int while ID ( - false * { * ( true ) ) { } while - ( false ) { } } func ID ( ) ID }",
  "func ID ( ID { int ) : var ID : int while ID ( - false * { * ( true ) ) { } while - ( false ) { } } func ID ( ) ID }",
  "func ID ( ID { int ) : var ID : int while ID ( - false * { * ( true ) ) { } while - ( false ) { } } func ID ( ) ID }",
  "func ID ( } { var ID : bool var ID : int { } while ( - ( - 123 ) ) { ) } func ID ( ) { }",
  "func ID ( } { var ID : bool var ID : int - } while ( { ( - 123 ) ) { ) } func ID ( ) { }",
  "func ID ( } { var ID : bool ( ID : int - } while ( { ( - 123 ) ) { ) } func ID var ) { }",
  "func ( ( ) : [ ] bool { var ID : int var ID : [ false * - 123 / ID false ) ] int } func ID ( ) { }",
  "func ( ( ) : [ ] bool { var ID : int var ID : [ false int - 123 / ID false ) ] * } func ID ( ) { }",
  "{ ( ( ) : [ ] bool func var ID : int var ID : [ false int - 123 / ID false ) ] * } func ID ( ) { }",
  "func } ( ) { var ID : bool print false - 123 * true <= ID * ID if ID { } ID",
  "func } ( ) { var ID : bool false print - 123 * true <= ID * ID if ID { } ID",
  "func } ( 123 { var ID : bool false print - ) * true <= ID * ID if ID { } ID",
  "func ID ( ID : int ) : [ ] bool { var ID : [ ] int return ID ( ( ( ( - - true ) ) ) } )",
  "func ID [ ID : int ) : [ ] bool { var ID : ( ] int return ID ( ( ( ( - - true ) ) ) } )",
  "int ID [ ID : func ) : [ ] bool { var ID : ( ] int return ID ( ( ( ( - - true ) ) ) } )",
  "func ID ( ) { var ID : bool var ID : int if - ( ID ( ( - 123 ) ) ) } } { func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int if - ( ID ( ( - 123 ) ) ) } } { func ID ( ) { }",
  "func ID ( ) : var ID { bool var ID : int if - ( ID ( ( - 123 ) ) ) } } { func ID ( ) { }",
  "func ID ( ID : bool ) : [ ( * ID * - false - ID ( - true ) ) ] [ ] int { }",
  "func ID ( ID : bool ) : [ ( * ID * - false int ID ( - true ) ) ] [ ] - { }",
  "- ID ( ID : bool ) : [ ( * ID * - false int ID ( - true ) ) ] [ ] func { }",
  "func ID ( ) { var ID : int print false * ( ( ID ( ( - ID ) ( ) ) } func ID ) ) { }",
  "func ID ( ) { var ID ID int print false * ( ( : ( ( - ID ) ( ) ) } func ID ) ) { }",
  "- ID ( ) { var ID ID int print false * ( ( : ( ( func ID ) ( ) ) } func ID ) ) { }",
  "func ID ( ID : } ) { var ID : int var ID : [ ] int call ID ( ) print ( ( true ) ) } func ID ( ) { int",
  "func ID ( ID : } ) { var ID : ID var ID : [ ] int call int ( ) print ( ( true ) ) } func ID ( ) { int",
  "func ID ( ID : } ) { var ID ) ID var ID : [ ] int call int ( ) print ( ( true ) ) } func ID ( : { int",
  "func ID ( ) { if - ( ( ID ( ID } - 123 ) ) ) { - }",
  "} ID ( ) { if - ( ( ID ( ID func - 123 ) ) ) { - }",
  "func ID ( ) { { call ID ( 123 * ( { / - - ( ( true ) ) ) ) } } func ID ( ) ID }",
  "func ID ( ) { { call ID ( 123 * ( { / - - ( ( true ) ) ) ) } } func ID ( ) ID }",
  "func ID ( ) { { call ID ( 123 * } { / - - ( ( true ) ) ) ) ( } func ID ( ) ID }",
  "func ID ( ) { var ID : bool print ( - - ) ( ID ( ) ) ) print - ( ( ( ID - ) ) }",
  "func ID ( ) { var ID : bool print ( - - ) ( ID ( ) ) ) ID - ( ( ( print - ) ) }",
  "func ID ( ) { var ID : bool print ( - - ) ( ID ( } ) ) ID - ( ( ( print - ) ) )",
  "func ID ( ID : [ ID + ( - false [ ( false ) ] ) ] [ ] bool ) { } func ID ( ) { }",
  "ID ID ( func : [ ID + ( - false [ ( false ) ] ) ] [ ] bool ) { } func ID ( ) { }",
  "ID ID } func : [ ID + ( - false [ ( false ) ] ) ] [ ] bool ) { } func ID ( ) { (",
  "func ID ( { : [ false * ID [ ( ID [ true ] [ true ] ) ] ] bool ) { } func ID ( ) ID }",
  "func ) ( { : [ false * ID [ ( ID [ true ] [ true ] ID ] ] bool ) { } func ID ( ) ID }",
  "func ) ( { : [ false * ID [ ] ID [ true ] [ true ] ID ] ( bool ) { } func ID ( ) ID }",
  "ID ID ( ID : bool , ID : bool ) { var ID : bool } func ID ( func : bool , ID : [ ] [ ( - 123 ) ] int , ID : [ ] bool ) { }",
  "ID ID ( ID : bool , ID : bool ) { var ID : bool } func ID ( func : bool , ID : [ ] [ ( - 123 ) ] int , ID : [ ] bool ) { }",
  "ID ID ( ID : bool , ID : bool ) { var ID : bool } func ID ( func : bool , ID : [ ] [ ( - ) 123 ] int , ID : [ ] bool ) { }",
  "func ID ( ID : bool ) { var ID : bool var : ID bool return - ( - ( - true ) ) }",
  "func ID ( ID : bool ) ) var ID : bool var : ID bool return - ( - ( - true { ) }",
  "func ID ( ID : - ) ) var ID : bool var : ID bool return - ( - ( bool true { ) }",
  "func ID bool ID : ( , ID : [ - ID / ID ( ) [ true / - ( - ID ) ] * ID ] int ) { }",
  "func ID bool ID : ( , ID : [ - ID / ID ( ) [ - / - ( true ID ) ] * ID ] int ) { }",
  "func ID bool ID : ( , ID : [ - ID / ID ( ) [ - / - ( true ID ) ] * ID ] int ) { }",
  "func ID ( ID : bool ] ID : int , ID : int ) : [ false * - 123 + ( ID ) , int { }",
  "func false ( ID : bool ] ID : int , ID : int ) : [ ID * - 123 + ( ID ) , int { }",
  "func false ( ID : bool ] ID : int , } : int ) : [ ID * - 123 + ( ID ) , int { ID",
  "func * ( ) : [ ( ( ( false / ( false ) ID - false ) ) ) ] bool { }",
  ") * ( ) : [ ( ( ( false / ( false ) ID - false func ) ) ] bool { }",
  ") * ( ) : [ ( ( ( false ) ( false / ID - false func ) ) ] bool { }",
  "func ID ( ID : [ - or 123 / ID [ ID / 123 true * ( false ) ] or true ] [ ] bool ) { }",
  "} ID ( ID : [ - or 123 / ID [ ID / 123 true * ( false ) ] or true ] [ ] bool ) { func",
  "} ID ( ID : [ - or 123 / ID [ ID / or true * ( false ) ] 123 true ] [ ] bool ) { func",
  "func ID ( ID : [ - ID ( ) [ ( - ( ID ) ) ] [ - - ( bool - 123 ) ] ] - ) { }",
  "func ID } ID : [ - ID ( ) [ ( - ( ID ) ) ] [ - - ( bool - 123 ) ] ] - ) { (",
  "func ID - ID : [ - ID ( ) [ ( - ( ID ) ) ] [ - - ( bool - 123 ) ] ] } ) { (",
  "ID ID ( ) : [ ] int { return ID ( ) / func [ - - ID ] [ 123 ] * ( ID ) } func ID ( ) { }",
  "ID ID ( ) : [ ] int { return ID ( ) / func [ - - ID ] [ 123 ] * ( ID ) ID func } ( ) { }",
  "func ID ( ) : [ ID ( ) false 123 * / - - ( ID ) - true ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ( : [ ID ( ) false 123 * / - - ) ID ) - true ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ( : [ ID ( ) false ] * / - - ) ID ) - true ] [ ] [ 123 int { } func ID ( ) { }",
  "func ID ( ) : bool { while ID * - - true / false and ( { ) false } { } }",
  "func } ( ) : bool { while ID * - - true / false and ( { ) false } { ID }",
  "func } ( ) : bool { while ID * - - true } false and ( { ) false / { ID }",
  "func ID ( ID : [ ID ( ID ( ) ) true / - false * ID ] ) ] int [ { }",
  "func ID ( ID : [ ID ( ID ( ) ) true / - ] * ID false ) ] int [ { }",
  "func ID ( ID : [ ID ( ID ( ] ) true / - ] * ID false ) ) int [ { }",
  "func ID ( ID : bool , ID : [ ( - / ( 123 / - true 123 / 123 ) / - 123 ) ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : ( , ID : [ ( - / ( 123 / - true 123 / 123 ) / - 123 ) ] bool , ID : int ) { } func ID bool ) { }",
  ") ID ( ID : ( , ID : [ ( - / ( 123 / - true 123 / 123 ) / - 123 ) ] bool , ID : int ) { } func ID bool func { }",
  "func ID ( ID : bool , ID : int ) : [ ( true / ( - 123 } ) ] int { } func ID ( ) { )",
  "func ID ( ID : bool , ID : int ) : [ ( true / ( - { } ) ] int { } func ID ( ) 123 )",
  "func ID ( ID : bool , ID : } ) : [ ( true / ( - { int ) ] int { } func ID ( ) 123 )",
  "func ID ( ID : [ ] bool ) { var ID : } } func ID ( ) : [ - true * ID ] bool { int",
  "func ID } ID : [ ] bool ) { var ID : } ( func ID ( ) : [ - true * ID ] bool { int",
  "func ID ID ID : [ ] bool ) { var ID : } ( func ID ( ) : [ - true * } ] bool { int",
  "func ID ( ID : int ID , : int , ID : int ) { var ID : bool return } func ID ( ) : int { var ID : [ ] int var ID : int }",
  "func ID ( ID : int ID , : int , ID : int ) { var ID : bool return } func ID ( ) : int { var ID : [ ] int var ID : int }",
  "int ID ( ID : int ID , : int , ID : int ) { var ID : bool return } func ID ( ) : func { var ID : [ ] int var ID : int }",
  "func ID ( ID : int , ID : bool ) { var ID : bool if ID ( ) - [ ID ] { } { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : } if ID ( ) - [ ID ] { } { bool } func ID ( ) { }",
  "func ID ( bool : int , ID : ID ) { var ID : } if ID ( ) - [ ID ] { } { bool } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ] : [ ] bool var ID : bool { var ID : [ ] [ ID ID int } if - false { } } func ID ( ) { }",
  "func ID ( ID : int , ID } int ) { var ] : [ ] bool var ID : bool { var ID : [ ] [ ID ID int } if - false { } : func ID ( ) { }",
  "func ID ( ID : int , ID } int ) { var int : [ ] bool var ID : bool { var ID : [ ] [ ID ID ] } if - false { } : func ID ( ) { }",
  "func ID ( ) : bool { return - ID / ID ( ) [ ID ( ID ) ] [ ID - ] }",
  "func ID ( ) : bool { return - ID ID ID ( ) [ ID ( / ) ] [ ID - ] }",
  "func ID ( ) : bool { return - ID ID } ( ) [ ID ( / ) ] [ ID - ] ID",
  "func ID ( ID call [ ] bool , ID : int , ID : bool ) { : ID ( ) ID ( ID ) = ( - ( ID ) ) } func ID ( ) { }",
  "func ID ( ID call [ ] bool ( ID : int , ID : bool ) { : ID ( ) ID , ID ) = ( - ( ID ) ) } func ID ( ) { }",
  "func ID ( ID call [ ] bool ( ID : int , ID : bool ) { : ID ( ) ID , ID ) = ( - ( ID ) ) } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] bool ( var ID : [ ID { ) [ true ] ] int }",
  "func ID ( ) : [ ] var ] bool ( [ ID : [ ID { ) [ true ] ] int }",
  "func ID ( ) : [ ] ID ] bool ( [ ID : [ var { ) [ true ] ] int }",
  "func ID ( ) { { var } : bool var ID : [ ] [ false / ( true ) ] int } } func ID ( ) { ID",
  "func ID ( ) { [ var } : bool var ID : { ] [ false / ( true ) ] int } } func ID ( ) { ID",
  "func ID ( ) { [ int } : bool var ID : { ] [ false / ( true ) ] var } } func ID ( ) { ID",
  "func ( ( ) { var ID : bool while - ( ID < ( ID - 123 ) ) ) { } ID = false }",
  "func ( ( ) { var 123 : bool while - ( ID < ( ID - ID ) ) ) { } ID = false }",
  "func ( ( ) { var 123 : bool while - ( ID < ( ID - ID ) ) ) { } ID = false }",
  "func ID ( ID : int ) { print - ( } * ID [ ID ] [ ( ( - - - - ( ( ID ) ) ) ) ] ) { } } func ID ( ) { 123",
  "func ID ( ID : int ) { print - ( } * ID [ ID ] [ ( ( - - ) - ( ( ID ) ) ) ) ] ) { } } func ID ( - { 123",
  "func ID ( ID : int ) { print - ( } * ID [ ID ] [ ( ( - - ) - ( ( ID ) } ) ) ] ) { ) } func ID ( - { 123",
  "func ID ( - : bool ) { while - ID ( ID false * true * ( ( ID ) ) ) { } print ( ID ) } func ID ( ) { }",
  "- ID ( - : bool ) { while func ID ( ID false * true * ( ( ID ) ) ) { } print ( ID ) } func ID ( ) { }",
  "- ID false - : bool ) { while func ID ( ID ( * true * ( ( ID ) ) ) { } print ( ID ) } func ID ( ) { }",
  "func ID ( var { var ID : int ) ID : [ ] bool if false * - ( true ) / ( false ) { } if ( 123 ) { } }",
  "func ID ( var { var ID : int ) ID : [ ] bool if false * - ( true { / ( false ) { } if ( 123 ) ) } }",
  "func ID ( var { var ID : int ) ID : ( ] bool if false * - ( true { / ( false ) { } if [ 123 ) ) } }",
  "func ID ( ID : int ) { ID - true or 123 + - [ ( - - - ( - - ID ) ) ] = ID } func ID ( ) { }",
  "func ( ( ID : int ) { ID - true or 123 + - [ ID - - - ( - - ID ) ) ] = ID } func ID ( ) { }",
  "func ( ( ID : int ) { ID - true or 123 + - [ ) - - - ( - - ID ID ) ] = ID } func ID ( ) { }",
  ") ID ( ID : [ ID ( ) [ ID ( ) [ ( ( - true ) ) ] [ ( ID ) ] ] ] [ ] bool func { } func ID ( ) { }",
  ") ID ( ID : [ ID ( ) [ ID ( ) [ ( ( - true ] ) ] [ ( ID ) ] ) ] [ ] bool func { } func ID ( ) { }",
  ") ID ( ID : [ ID ( ) [ ID ( ) [ ( ( - true ] ) ] [ ( ID ) ] ) ] [ ] bool func { } func ID ( ) { }",
  "func ID ( ) ID int { var : : int print - ( 123 - ID / false ) while ID { } }",
  "func - ( ) ID int { var : : int print ID ( 123 - ID / false ) while ID { } }",
  "func - ( ) ID int { var : : int print ID ( 123 - ID / false ) while ID { } }",
  "func ID ( 123 { { var ID : [ false * ID [ ) * ID / - ( - ID ) ] / ID ] [ ] int var ID : bool } }",
  "func ID var 123 { { var ID : [ false * ID [ ) * ID / - ( - ID ) ] / ID ] [ ] int ( ID : bool } }",
  "func ID var 123 { { var ID : [ false * ) [ ) * ID / - ( - ID ID ] / ID ] [ ] int ( ID : bool } }",
  "func ID ( } : int ) { var ID : [ ( ID [ ( false ) ] [ - ID ] ) ] [ ] int ID func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ( ID [ ( false ) ] [ - } ] ) ] [ ] int ID func ID ( ) { }",
  "func ID ( ID ] int ) { var ID : [ ( ID [ ( false ) ] [ - } : ) ] [ ] int ID func ID ( ) { }",
  "func ID ( var : int ) { var ID : int ID ID : [ ] bool ID ( ) [ ID ( ) ] = 123 }",
  "func ID ( var : int var { ) ID : int ID ID : [ ] bool ID ( ) [ ID ( ) ] = 123 }",
  "func ID ( var : int var { ) ID : ] ID ID : [ int bool ID ( ) [ ID ( ) ] = 123 }",
  "func ID ( - : bool ) { print - - ID ( ID ( - ID - - - - ID ) ) } func ID ( ) { }",
  "func ID ( - : bool ) { print - - ID ( ID ( - ID ) - - - ID ) - } func ID ( ) { }",
  "func ID ( ID : [ , ID : int ( 123 / ( ID ( - ID ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] ID : int ( 123 / ( ID ( - ID ) ) ) , int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] ID : int ( 123 / ( ID ( - ID ) ) ) , int ) { } func ID ( ) { }",
  "func ID ( ( : [ ] [ - ID true / ( true / ( ID ) ) / ID ) ] int ) { } func ID ( ) { }",
  "func ID ( ( : [ ] [ - { true / ( true / ( ID ) ) / ID ) ] int ) ID } func ID ( ) { }",
  "ID ID ( ( : [ ] [ - { true / ( true / ( ID ) ) / ID ) ] int ) func } func ID ( ) { }",
  "func ID ( ) : [ { [ ID ( ( ID ( - 123 ) ) ) ] bool ] } func ID ( ) { }",
  "func ID ( ) : [ { [ ID ( ( ID ( - 123 ) { ) ] bool ] } func ID ( ) ) }",
  "func ID ( ) : [ { [ ID ( ( ID ( ] 123 ) { ) ] bool - } func ID ( ) ) }",
  "func ID ( ID : [ true * ( ID [ - ID ) ID ] <= ] bool ) { }",
  "func ID ( ID ] [ true * ( ID [ - ID ) ID ] <= : bool ) { }",
  "func ID ( ID [ ] true * ( ID [ - ID ) ID ] <= : bool ) { }",
  "func ID ( ) ] int { var ID : [ ] bool ID [ ID [ - - ( ( ( ( ( - ID ) ) ) ) ) : ] = - ( - ID ) }",
  "{ ID ( ) ] int func var ID : [ ] bool ID [ ID [ - - ( ( ( ( ( - ID ) ) ) ) ) : ] = - ( - ID ) }",
  "{ ID ( ) ) int func var ID : [ ] bool ID [ ID [ - - ( ( ( ( ( - ID ) ) ) ] ) : ] = - ( - ID ) }",
  "ID ID ( ID : bool , ID : bool , ID : bool ) : bool { var ID : bool while - true + - func { } } func ID ( ) { }",
  "ID ID ( ID : bool , ID : bool , ID : bool ) : bool { var ID : bool func - true + - while { } } func ID ( ) { }",
  "ID ID ( ID : bool , ID : bool , ID : bool ) : bool { var ID : bool func - true + - while { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : int print - ( ( ID ) ) } func ID ) ( { }",
  "func ID ( ID : int , ID ID int , : : int ) { var ID : int print - ( ( ID ) ) } func ID ) ( { }",
  "func ID print ID : int , ID ID int , : : int ) { var ID : int ( - ( ( ID ) ) } func ID ) ( { }",
  "func ID ( ) : int ID var ID : bool var ID : [ ] bool if ID [ ID ] { } while { { } }",
  "func ID ( ID : int ) var ID : bool var ID : [ ] bool if ID [ ID ] { } while { { } }",
  "func ID ( ID : int ) var ID : bool var ID { [ ] bool if ID [ ID ] { } while { : } }",
  "func ID ( ID : [ ] [ ] [ , ID : [ ] int ) { var ID : bool ] [ ] [ - 123 ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : { ] [ ] [ , ID : [ ] int ) [ var ID : bool ] [ ] [ - 123 ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : { ] [ ] [ var ID : [ ] int ) [ , ID : bool ] [ ] [ - 123 ] bool var ID : int } func ID ( ) { }",
  "func ID var ) : bool { ( ID : [ ] bool print ID ( ID ( ) / - ID ) }",
  "func ID var ) : bool { ( / : [ ] bool print ID ( ID ( ) ID - ID ) }",
  "func ID var ) : ( { bool / : [ ] bool print ID ( ID ( ) ID - ID ) }",
  "func ) ( ID : [ ID / - ID ( ID ( ID [ false ] [ ID ] ) ] bool ) { }",
  "func ) ( ID : [ ID / - ID ( ID ( ID [ false ] [ ID ] ) ] bool ) { }",
  "func ) ( ID : [ ID / - ID ( ID ( ID [ bool ] [ ID ] ) ] false ) { }",
  "func ID ( ) { var ID : { var ID : bool ID ( - ID [ ( ( ( ID ) ) ) ] ) = - - true if - true bool } } func ID ( ) { }",
  "func ID ( ) { var ID : { var ID : bool ID ( - ID [ ( ( ( ID ) ) ) ] ) = - - true if - true bool } } func ID ( ) { }",
  "func ID ( ) { var ID : { var ID : bool ID ( - ID [ ( ( ( ID ) ) ) ] ) = - - true if - true bool } ID func } ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] bool var ID ) bool ID ( ) [ ( true : ] = - true }",
  "func - ( ) { var ID : [ ] [ ] bool var ID ) bool ID ( ) [ ( true : ] = ID true }",
  "func - ( ) { ID var : [ ] [ ] bool var ID ) bool ID ( ) [ ( true : ] = ID true }",
  "func bool ( ) : ID { } func ID ( ID : [ ] int ) { var ID : [ - - false ] bool }",
  "{ bool ( ) : ID { } func ID ( ID : [ ] int ) func var ID : [ - - false ] bool }",
  "{ bool var ) : ID { } func ID ( ID : [ ] int ) func ( ID : [ - - false ] bool }",
  "func ID ( ID : [ - true and true / { ID * true - ID + - ( ID ) and - ID ] bool ) { } func ID ( ) - }",
  "func ID ( ID : [ - true and true / { ID * true - ID + - ( ID ) and - ID bool ] ) { } func ID ( ) - }",
  "func ID } ID : [ - true and true / { ID * true - ID + - ( ID ) and - ID bool ] ) { } func ID ( ) - (",
  "func ID ( ID : int , ID : [ ] int ) func var ID : bool if ID ( ) [ - ( true ) ] { } } { ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int ) func var ID : bool if ID ( ) [ - ( true ) ] { } } { ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool ) func var ID : int if ID ( ) [ - ( true ) ] { } } { ID ( ) { }",
  "func ID ( ID : bool , ID : [ 123 * ID ( - ID [ ( ( ( 123 ) : ) ] ) * ( ID ) ] bool , ID ) bool ) { }",
  "func ID ( ID : * , ID : [ 123 * ID ( - ID [ ( ( ( 123 ) : ) ] ) bool ( ID ) ] bool , ID ) bool ) { }",
  "func ( ( ID : * , ID : [ 123 * ID ( - ID [ ID ( ( 123 ) : ) ] ) bool ( ID ) ] bool , ID ) bool ) { }",
  "func ID ( ) [ : ID [ false / 123 * ID ( ( true ) ) ] ] bool { }",
  "func ID ( ) [ : ID [ false / ID * 123 ( ( true ) ) ] ] bool { }",
  "func ID ( ) / : ID [ false [ ID * 123 ( ( true ) ) ] ] bool { }",
  "func ID ( ) : bool { return ID ( ) [ ID ( ) / ( ( ) ) ) ] } func ID ( 123 { }",
  "func ID ( ) : bool { return ID ( ) [ ID ( ) 123 ( ( ) ) ) ] } func ID ( / { }",
  "func ID ( ) : bool { return ID ( ) [ ID ( func 123 ( ( ) ) ) ] } ) ID ( / { }",
  "func ID ( ID : bool , ID int : , ID : int ) { var ID : bool var ID : [ ID ( false ) ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID int : , ID : ID ) { var int : bool var ID : [ ID ( false ) ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID int : , ID : ID ) { bool int : var var ID : [ ID ( false ) ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : [ ] int { var ID : [ true int ID ( 123 ) ] * var ID : bool }",
  "func ID ) ID : int , ID : bool ( : [ ] int { var ID : [ true int ID ( 123 ) ] * var ID : bool }",
  "func ID ) ID : int , : : bool ( : [ ] int { var ID ID [ true int ID ( 123 ) ] * var ID : bool }",
  "func ID ( ID : int , ID : [ ] ) - false / ID ( ) / - ( ID [ ] bool , ID : int ) { }",
  "func ID ( ID : int , ID : [ ] ) ID false / ID ( ) / - ( - [ ] bool , ID : int ) { }",
  "func ID ( ID , int , ID : [ ] ) ID false / ID ( ) / - ( - [ ] bool : ID : int ) { }",
  "func ID ( { : int , ID : int , ID : bool ) { if ID ( ) [ - false ] { } while 123 ID } } func ID ( ) { }",
  "func ID ( { : int ( ID : int , ID : bool ) { if ID , ) [ - false ] { } while 123 ID } } func ID ( ) { }",
  "func ID : ) { var ID : bool var ID ( bool if - ( - 123 * ID ( ) ) { } print ( true ) } func ID ( ) { }",
  "func ) : ) { var ID : bool var ID ( bool if - ( - 123 * ID ( ) ID { } print ( true ) } func ID ( ) { }",
  "func ID ( ) : bool { 123 ID : [ ( - 123 / - var * ID ) ] int } func ID ( ) { }",
  "func ID ( ) 123 bool { 123 ID : [ ( - : / - var * ID ) ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) : ID { if ( - ( 123 ) ) { } { } } func int ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) : ID { ( ( - if 123 ) ) { } { } } func int ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) : ID { ( ( - if 123 ) ) { } { } } ( int func ) { }",
  "func ID ( ) : bool { var ID : ( var ID : bool { var ID : int print - ( ID ) print true } } func ID int ) { }",
  "func ID ( ) : bool { var ID : ( var ID : bool { var ID : int print - ( ID ) print true } } func ID int ) { }",
  "func ID ( ) : bool { var ID : ( var ID : bool ) var ID : int print - ( ID { print true } } func ID int ) { }",
  "func ID ( ) { var ID ( int } func ID : ID : int , ID : [ - - true - - ( false ) ] bool , ID : bool ) { }",
  "func ID ( ) { var ID ( ID } func ID : ID : int , int : [ - - true - - ( false ) ] bool , ID : bool ) { }",
  "func ID ( ) { var ID ( ID } func ID : ID : int , int : [ - - true - - ( false ) : bool , ID ] bool ) { }",
  "func ID ( ID : bool , ID : bool , ID true [ - false * true + ID [ ( ( false ) ) ] [ false ] + ( : ) ] int ) { }",
  "func ID ( ID : bool , ID : bool , ID true [ - false * true + ID [ ( ( false ) ) ] [ ] ] + ( : ) false int ) { }",
  "func ID ( ID : bool { ID : bool , ID true [ - false * true + ID [ ( ( false ) ) ] [ ] ] + ( : ) false int ) , }",
  "func ID ( ) { var ID : bool var ID ( bool print ( ( : 123 ) ) ) print false }",
  "func ID ( ) { print ID : bool var ID ( bool print ( ( : 123 ) ) ) var false }",
  "func ID ( ) { print ID : bool var ID ( bool print false ( : 123 ) ) ) var ( }",
  "func ID ( ID : int , ID : bool ) : int { } func ID ( ) } var ID : int var ID : int { return } print - ( ID ) {",
  "func ID ( ID : int , ID : bool int : ) { } func ID ( ) } var ID : int var ID : int { return } print - ( ID ) {",
  "func ID ( ID : int , ID : bool int : ) { ID func ID ( ) } var ID : int var ID : int { return } print - ( } ) {",
  "func ID ( ID : bool ) : int { var ID - [ - false / - true : - - false + ID ] int }",
  "func ID ( ID : bool ) : int { / ID - [ - false var - true : - - false + ID ] int }",
  "func ID ( ID : bool ) : int { / ID - [ false - var - true : - - false + ID ] int }",
  "func ID ( ID : bool , ID : int , ID ( [ ] [ ] int ) : [ ] int { var ID : [ : false ) ] [ ] int }",
  "func ID ( ID ] bool , ID : int , ID ( [ : [ ] int ) : [ ] int { var ID : [ : false ) ] [ ] int }",
  "func ID ( ID ] bool , ID : int , ID ( [ { [ ] int ) : [ ] int : var ID : [ : false ) ] [ ] int }",
  "func ID ( ID : bool , ID : bool ) { var ID : return var ID : int bool ID ( ) * ID }",
  "func ID ( ID : bool : ID : bool ) { var ID : return var ID , int bool ID ( ) * ID }",
  "func bool ( ID : ID : ID : bool ) { var ID : return var ID , int bool ID ( ) * ID }",
  "func ID ( ID : [ false - 123 / true + - 123 ( ( - == ( - - false ) ) ) ] int ) { }",
  "func ID ( ID : [ false - 123 / true + - int ( ( - == ( - - false ) ) ) ] 123 ) { }",
  "func ID ( ID : [ false - 123 / ) + - int ( ( - == ( - - false ) ) true ] 123 ) { }",
  "func ID ( ) { var ID : int { var ID ] bool var ID : int call ID ( - ID [ - - ( ( false ) ) : [ false ] ) } } func ID ( ) { }",
  "func ID ( ) { var ID : int { var ID ] bool var ID call int : ID ( - ID [ - - ( ( false ) ) : [ false ] ) } } func ID ( ) { }",
  "func ID ( - { var ID : int { var ID ] bool var ID call int : ID ( - ID [ - ) ( ( false ) ) : [ false ] ) } } func ID ( ) { }",
  "func ID ( ) { var ID : int false ( ( return * false == ID ) ) } func ID ( ) { }",
  "func ID ( ) ID var { : int false ( ( return * false == ID ) ) } func ID ( ) { }",
  "func ID ( ) ID var { : int false ( ( return * false == ID } ) ) func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] [ ] int var ID : } print true * 123 * - - ID call ID ( ) int",
  "func ID ( ) { var ID : [ ] [ ] [ ] call var ID : } print true * 123 * - - ID int ID ( ) int",
  "func ID true ) { var ID : [ ] [ ] [ ] call var ID : } print ( * 123 * - - ID int ID ( ) int",
  "func ID : ID : bool ) ( bool { { var ID : [ - - - - - - - - ( 123 ) ] [ ] bool var ID : [ ] bool } }",
  "func ID : ID : bool ( ) bool { { var ID : [ - - - - - - - - ( 123 ) ] [ ] bool var ID : [ ] bool } }",
  "func ) : ID : bool ( ) bool { { var ID : [ - - - - - - - - ( 123 ID ] [ ] bool var ID : [ ] bool } }",
  "func ID ( ID : int ) { var ID : int var ID : int print true ( ) * ( - ID ) } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID : int print true ( ) * ( - ID ) } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID : int print true ( ) * ( - ID ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ID ( ) / ( ID [ ] ] [ - true ] ) * ( ID ) true int ) { }",
  "func bool ( ID : [ ] ID , ID : [ ID ( ) / ( ID [ ] ] [ - true ] ) * ( ID ) true int ) { }",
  "func bool ( ID : [ ] ID , ID : [ ID ( ) / ( ID [ ] ] [ - true ] ) * ( ID ) true int ) { }",
  "func ID ( ID : [ ] int : ID : int , ID : int ) { var ID : int { var ID , int var ID : bool return } }",
  "func ID ( ID : [ ] int : ID : int , ) : int ID { var ID : int { var ID , int var ID : bool return } }",
  "func ID ( ID : [ ] int : ID : int , ) : int ID { var ID : int { var ID var int , ID : bool return } }",
  "func ID ( ID : int , ID 123 [ ] bool ) : bool { var ID : bool ID [ true and ( - ( - ID ) ) ] = ( : ) print ( false ) }",
  "func ID ( ID : int , ID 123 [ ] bool ) : bool { var ID : bool ID [ true and ( - ( - ID ) ) ] } ( : ) print ( false ) =",
  "func ID ( ID : int , ID 123 [ ] bool ID : bool { var ID : bool ID [ true and ( - ( - ) ) ) ] } ( : ) print ( false ) =",
  "func ID ( ID : bool , ID : [ ] int , ID : int ) { var ID : [ ID ( ( } ID ) ) ) ] [ ] [ ] bool (",
  "func ID ( ID : bool ] ID : [ ] int , ID : int ) { var ID : [ ID ( ( } ID ) ) ) ] [ ] [ , bool (",
  "func ID ( ID ID bool ] : : [ ] int , ID : int ) { var ID : [ ID ( ( } ID ) ) ) ] [ ] [ , bool (",
  "func ID ( ) : [ ID ] ) [ 123 / ( ID [ - ID ] ) * - ID ] ( bool { } func ID ( ) { }",
  "func ID ( ) : [ ID ] ) [ 123 / ( ID [ - ID ] ) * - ID func ( bool { } ] ID ( ) { }",
  "func bool ( ) : [ ID ] ) [ 123 / ( ID [ - ID ] ) * - ID func ( ID { } ] ID ( ) { }",
  "func ID ( ) { var ID : int while true / ID [ ID [ ( 123 ) ] [ ] ] false [ ( - 123 ) ] * ID { } }",
  "func ID ( ) { var ID : int while true / ID [ ID [ ( 123 ) ] [ ] ] false [ ( - 123 ) ] * ID { } }",
  "func ID ( ) { var ID : int while true / ID [ ID [ ( 123 ) ] [ ] false ] [ ( - 123 ) ] * ID { } }",
  "func ID ( [ : bool { var ID : [ ] [ ( ID ( ) ) ID ] [ ( true ) ] ) ] bool }",
  "func ( ( [ : bool { var ID : [ ] [ ( ID ID ) ) ID ] [ ( true ) ] ) ] bool }",
  ") ( ( [ : bool { var ID : [ ] [ ( ID ID ) func ID ] [ ( true ) ] ) ] bool }",
  "func ID ( ID : [ ] int ) : bool { var ID : int var ID bool bool return } func ID ( ID : [ false ] [ ] : ) { }",
  "func ID ( ID : [ ] int ) : bool { var [ : int var ID bool bool return } func ID ( ID : [ false ] ID ] : ) { }",
  "func ID ( ID ] [ ] int ) : bool { var [ : int var ID bool bool return } func ID ( ID : [ false ] ID : : ) { }",
  "} ID ( ID : [ true * ( ID ( - true * ( true ) ) ) ] bool ) { func",
  "} ID ( ID : [ true * ( func ( - true * ( true ) ) ) ] bool ) { ID",
  "} ID ( ID : [ true * ( func ) - true * ( true ( ) ) ] bool ) { ID",
  "func ID ( ID ID bool ) { var ID : bool var : : int ID [ - 123 / 123 / ID ] = ( - 123 ) while ( - ( - false ) ) { } }",
  "func ID ( ID ID 123 ) { var ID : bool var : : int ID [ - 123 / 123 / ID ] = ( - bool ) while ( - ( - false ) ) { } }",
  "func ID ( ID ID 123 ) { var ID : bool var : : int ID [ - 123 / ) / ID ] = ( - bool 123 while ( - ( - false ) ) { } }",
  "func ID ( call : int , ID : int ) : [ ] bool { ID ID ( ) { var ID : [ ] [ - ID ] bool } }",
  "func ID ( call : int , ID : int ) : [ ] bool { ID ID ( ) { var ID : [ ] [ - ID } bool ] }",
  "func ID ( call : int , ID : int ) ID [ ] bool { ID ID ( ) { var : : [ ] [ - ID } bool ] }",
  "func ID - ID : [ ID ( ( ( ( ( ID ) ) ) ) ] int ) { }",
  "func ID - ID : [ ID ( ) ( ( ( ID ) ) ) ) ] int ( { }",
  "func ID - } : [ ID ( ) ( ( ( ID ) ) ) ) ] int ( { ID",
  "func ID ( ID : bool , ID : [ ] bool int ID : , ) : bool { var ID : bool return } func ID ( ID : [ ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : [ ] bool int ID : , ) : bool { var ID : bool return } func ID ( ID : [ ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : ] ] bool int ID : , ) : bool { var ID : bool return } func ID ( ID : [ [ [ ] bool ) { }",
  "func ID ( ) ) [ ( ( ( - ID ( ) [ ( 123 : ] ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) ) [ ( ( ( - ID ( ) [ ( 123 : ] ) ) ) ] ID { } func bool ( ) { }",
  "bool ID ( ) ) [ ( ( ( - ID ( ) [ ( 123 : ] ) ) ) ] ID { } func func ( ) { }",
  "func ID ( ID : int ID ( ( ( ( - true ) ) ) ) ] [ ] [ ] [ ) { } func ID ( ) { }",
  "} ID ( ID : int ID ( ( ( ( - true ) ) ) ) ] [ ] [ ] [ ) { } func ID ( ) { func",
  "} ID ( ID : int ID ( ( ( ] - true ) ) ) ) ( [ ] [ ] [ ) { } func ID ( ) { func",
  "func ID ( ) var { ID : [ ID [ ID [ - ID ] [ - 123 ] ] ] bool } func ID ( ) { }",
  "func ID ID ) var { ID : [ ID [ ID [ - ID ] [ - 123 ] ] ] bool } func ( ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ false / - ( - int / ID ) ] [ ] 123 }",
  "func ID ( ) { var ID : bool var ID : [ false / - ( - int / ) ID ] [ ] 123 }",
  "func ID ( ) ) var ID : bool return true * ID ( - - - ( true { ) / ID } func ID ( ) { }",
  "func ID ( ) ) var ID : bool return } * ID ( - - - ( true { ) / ID } func ID ( ) { true",
  "func ID ( ) ) ) ID : bool return } * ID ( - - - ( true { var / ID } func ID ( ) { true",
  "func ID ( ID : [ - ( ID ( ) [ 123 * ( ID ) ] ] ] [ ) int ) { }",
  "func ID ( ID : [ - ( ID ( } [ 123 * ( ID ) ] ] ] [ ) int ) { )",
  "func ID ( ID : [ - ( ID ) } [ 123 * ( ID ) ] ] ] [ ) int ) { (",
  "func ID ( ID : bool , ID : int , ID : { ) { call ID ( ) if - ID ( ) [ - false ] int } }",
  "func ID ( ID : bool , ID : int , ID : { ) { call ID ( ) if ID - ( ) [ - false ] int } }",
  "func ID ( ID : bool , ID : int , ID : { ) { ( ID call ) if ID - ( ) [ - false ] int } }",
  "func ID ( ) : bool { var ID : int if - ID [ ( ID ) } { ] call ID ( ) }",
  "func - ( ) : bool { var ID : int if ID ID [ ( ID ) } { ] call ID ( ) }",
  "func - ( ) : bool { var ID : int if ID ID [ ( ID ) } { ] call ID ( ) }",
  "func ID ( ID : int , ID : [ - true >= - ID ( ) and ( true ) and - ID ] ) ] int [ { } func ID ( ) { }",
  "ID ID ( func : int , ID : [ - true >= - ID ( ) and ( true ) and - ID ] ) ] int [ { } func ID ( ) { }",
  "ID ID ( func : int , [ : [ - true >= - ID ( ) and ( true ) and - ID ] ) ] int ID { } func ID ( ) { }",
  "func ID ( ) { print ( ( ) * ID [ - ( ID 123 ] [ false ] * ( - false ) ) ) }",
  "func ID ( ) { print ( ( false * ID [ - ( ID 123 ] [ ) ] * ( - false ) ) ) }",
  "func ID ( ) { print ( ( false * ID [ - ( ID 123 ] [ ) ] * ( - false ) ) ) }",
  "func ID ( var { var ID : bool ) ID : int ID [ ( ( ( ( true ) ) ) ) ] [ true ] = ( - false ) }",
  "func } ( var { var ID : bool ) ID : int ID [ ( ( ( ( true ) ) ) ) ] [ true ] = ( - false ) ID",
  "func int ( ID : bool , ID : int ) : ID { var ID : bool }",
  "func int ( ID : bool { ID : int ) : ID , var ID : bool }",
  "func int ( ID : bool { ID : int ) : ID , : ID var bool }",
  "} ID ( ID : bool ) { while ( - - ( true / - ID * - ID ) ) { func while - - ( ( ( ( 123 ) ) ) ) { } } func ID ( ) { }",
  "} ID ( ID : bool ) { while ( - - ( true / - ID * - ) ) ID { func while - - ( ( ( ( 123 ) ) ) ) { } } func ID ( ) { }",
  "} ID ( ID : bool ) { while ( - - ( true / - ID * - ) ) ID { func while - ID ( ( ( ( 123 ) ) ) ) { } } func - ( ) { }",
  "func ID ( ID true int ) { var ID : [ - : - - true / - ID < ID ] [ ] int var ID : int }",
  "func ID ( ID true [ ) { var ID : [ - : - - true / - ID < ID ] int ] int var ID : int }",
  "func } ( ID true [ ) { var ID : [ - : - - true / - ID < ID ] int ] int var ID : int ID",
  "func ID ( ID : [ true * 123 ] - - ID ( - false < ( - true ) ) ] [ - bool ) { }",
  "] ID ( ID : [ true * 123 ] - - ID ( - false < ( - true ) ) func [ - bool ) { }",
  "] ID ( ID : [ * true 123 ] - - ID ( - false < ( - true ) ) func [ - bool ) { }",
  "func ID - ) : int { var ID : int while ( ( true * ( ID ) / - ( ID ) ) { } while true { } } func ID ( ) { }",
  "func ID - ) : int { var ID : int while ( ( true * ( ID ) / - ( ID ) ) { } while true { } } func ID ( ) { }",
  "func ID - ) : int { var ID : int while ( ( true * ( ID ) / - ( ID ) ) { } while ( { } } func ID true ) { }",
  "func ID ( ) : int { var ( : [ ] [ ID [ ( 123 ) ] ] [ ] int } func ID ID ) { }",
  "func ID ( ) : int { var ( : [ ] [ ID [ ( 123 [ ] ] ) ] int } func ID ID ) { }",
  "func ID ( ) : int { var ( { [ ] [ ID [ ( 123 [ ] ] ) ] int } func ID ID ) : }",
  "func ID ( ) : bool { var ID : int var - : int call ID ( ID ( ) [ ID ] [ ID ID ] ) }",
  "func ID ( ) : ( { var ID : int var - : int call ID ( ID bool ) [ ID ] [ ID ID ] ) }",
  "func ID ( ) ID ( { var ID : int var - : int call ID ( ID bool ) [ : ] [ ID ID ] ) }",
  "func ID ( ID : [ ID ( ( ( ] ( ) ) ) ) ID bool ) { }",
  "func ID ( ID : [ ID ( ( ( ] ( ) ) ) ) ID bool ) { }",
  "ID func ( ID : [ ID ( ( ( ] ( ) ) ) ) ID bool ) { }",
  "func ID ( ID : [ - ( 123 * ( 123 * ID ( ) ) ] ID ) ] [ / [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] ( 123 * ( 123 * ID ( ) ) ] ID ) - [ / [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] ( 123 * ( 123 * ID ( ) ) func ID ) - [ / [ ] bool ) { } ] ID ( ) { }",
  "func ID ( ID : [ ( ID [ false - ID [ ID ] ] bool ID ] ) ] [ ] [ ) { }",
  "func ID ( ID ] [ ( ID [ false - ID [ ID ] ] bool ID ] ) : [ ] [ ) { }",
  "func ID ( ID ] [ ( ID [ ID - ID [ ID ] ] bool false ] ) : [ ] [ ) { }",
  "func ID ( var { var ID : bool ) ID : [ ] [ ID ( ) * ( false ) ] bool } func ID ( ) { }",
  "func ID ( var { var bool : ID ) ID : [ ] [ ID ( ) * ( false ) ] bool } func ID ( ) { }",
  "func ID ( var { var bool : ID ) ID : [ ] [ ID ( ) * ( false ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool ) ID : [ true / 123 * - ( ID var ] [ ] bool }",
  "func ID ( ) / var ID : bool ) ID : [ true { 123 * - ( ID var ] [ ] bool }",
  "func * ( ) / var ID : bool ) ID : [ true { 123 ID - ( ID var ] [ ] bool }",
  "( ID ( ) { return } func ID func ) { var ID : [ ID [ - ( ( - ( - - ID ) ) ) ] ] bool }",
  "( ID ( ) { return } func ID func ) { } ID : [ ID [ - ( ( - ( - - ID ) ) ) ] ] bool var",
  "( ID ( ) { return } func ID func ) { } ID : [ var [ - ( ( - ( - - ID ) ) ) ] ] bool ID",
  "func ID ( ) : int { if false * false - ID ( ) and true / ID / ID and } { } { } 123 func ID ( ) { }",
  "func ID ( ) : int { if } * false - ID ( ) and true / ID / ID and false { } { } 123 func ID ( ) { }",
  "func ID ( ) : / { if } * false - ID ( ) and true / ID int ID and false { } { } 123 func ID ( ) { }",
  "func ID ( ) { call ID ( ) { return ID [ - ID - [ ( true ) ] ] } } func ID ( ) { }",
  "func ID ( ) { call ID ( ) { return ID [ - ID - [ ( true ) ( ] } } func ID ] ) { }",
  "func ID ( ) { call ID ( ) { - ID [ return ID - [ ( true ) ( ] } } func ID ] ) { }",
  "func ID ( ) { var ID : int var ID : bool print - true * 123 - ( - false ) - 123 if ( ) ( false ) - { } } func ID ( ) { }",
  "func ID ( ) { : ID : int var ID var bool print - true * 123 - ( - false ) - 123 if ( ) ( false ) - { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ( * ID ( ) + ID true ) + true ] int } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ID * ID ( ) + ] true ) + true ( int } func ID ( ) { }",
  "func ID ( { ) var ID : [ ] [ ] [ true * ID + 123 * ID * ID ] int } func ID ( ) { }",
  "func ID ID { ) var ( : [ ] [ ] [ true * ID + 123 * ID * ID ] int } func ID ( ) { }",
  "func ID : { ) var ( ID [ ] [ ] [ true * ID + 123 * ID * ID ] int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool if ID / ) ( - - - - ( ID ) { } ID = ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ) : bool { var / : bool if ID ID ) ( - - - - ( ID ) { } ID = ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ) : bool { var / : bool if ID ID ) ( - ID - - ( ID ) { } ID = ( ( - ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int { var ) : int if - false / ID ( ) * 123 { } }",
  "func ID ( ID : [ ] [ ] int { var ) : int if - false / ID ( ) * 123 { } }",
  "func ID ( ID : ) ] [ ] int { var ) : int if - false / ID ( [ * 123 { } }",
  "func ID ( ID : [ ] int , ID : int , ID : [ - ID [ ( - - - ID ) ] [ ( bool ID ) ] ] [ ] - ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : [ ] ID [ ( - - - ID ) ] [ ( bool ID ) - ] [ ] - ) { }",
  "func ID , ID : [ ] int ( ID : int , ID : [ ] ID [ ( - - - ID ) ] [ ( bool ID ) - ] [ ] - ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ 123 ID ID [ - false * / * - - - ID ] ] int ) { }",
  "] ID ( ID : bool , ID : bool , ID : [ 123 ID ID [ - false * / * - - - ID func ] int ) { }",
  "] ID ( ID : bool ID , : bool , ID : [ 123 ID ID [ - false * / * - - - ID func ] int ) { }",
  "func bool ( ID : bool , ID : bool , ID : ID ) { }",
  "func bool ( ID : bool , ID : bool , ID : ID { ) }",
  "func bool ( ID : bool , ID : } , ID : ID { ) bool",
  "] ID ( ID : int , ID : bool , ID : [ ] int ) : [ func [ ] [ ( ID ) ] bool { } func ID ( ) { }",
  "] ID ( ID : int , } : bool , ID : [ ] int ) : [ func [ ] [ ( ID ) ] bool { } func ID ( ) { ID",
  "] ID ( ID : int , } : bool , ID : int ] [ ) : [ func [ ] [ ( ID ) ] bool { } func ID ( ) { ID",
  "func ID ( ID : [ ] bool , ID : int var { { ) ID : int var ID : int print 123 / true while ID { } } } func ID ( ) { }",
  "func int ( ID : [ ] bool , ID : ID var { { ) ID : int var ID : int print 123 / true while ID { } } } func ID ( ) { }",
  "func int ( ID : [ ] bool , ID ID : var { { ) ID : int var ID : int print 123 / true while ID { } } } func ID ( ) { }",
  "func ID ( ) { if ( - - - false * ) / 123 - false true { } }",
  "func ID - ) { if ( - - ( false * ) / 123 - false true { } }",
  "func ID - ) { if ( - - ( false * ) / 123 - false true } } {",
  "func ID ( ID : [ ] bool ) : bool { while ( - { - true / - ID * 123 ) - } if false { } }",
  "} ID ( ID : [ ] bool ) : bool { while ( - { - true / - ID * 123 ) - func if false { } }",
  "} ID ( ID : [ ] bool ) : bool { while ( - { - true / - ID * 123 } - func if false { ) }",
  "func ID ( ( { if - ) - 123 * 123 and true - ID - ( ID ) and ID ) { } }",
  "func ID ( ( { if - ) - } * 123 and true - ID - ( ID ) and ID ) { 123 }",
  "func ID ( ) { var ID : [ ] var ( - - ( 123 / 123 ) ) ] bool [ ID : [ ] int }",
  "ID ID ( ) { var ID : [ ] var ( - - ( 123 / 123 ) ) ] bool [ func : [ ] int }",
  "ID ID } ) { var ID : [ ] var ( - - ( 123 / 123 ) ) ] bool [ func : [ ] int (",
  "func } ( ) { { var ID : [ - ID + ( - - ID ) ] int ID if ID { } } func ID ( ) { }",
  "func } ( ) { { } ID : [ - ID + ( - - ID ) ] int ID if ID { var } func ID ( ) { }",
  "func } ( ) { { } ID : [ - ID + ( var - ID ) ] int ID if ID { - } func ID ( ) { }",
  "func ID ( ID : [ - false / ID [ true < ID [ ( ( true ) ) ] [ true ] ] / ( ] - true ) - int ) { }",
  "func ID ( ID : [ [ false / ID - true < ID [ ( ( true ) ) ] [ true ] ] / ( ] - true ) - int ) { }",
  "- ID ( ID : [ [ false / ID - true < ID [ ( ( true ) ) ] [ true ] ] / ( ] func true ) - int ) { }",
  "- ID ( ID : bool ) : bool { print ID ( true * func ID [ 123 ] ) ID = - ID }",
  "ID - ( ID : bool ) : bool { print ID ( true * func ID [ 123 ] ) ID = - ID }",
  "func ID ( ID : int , ID : [ 123 / - ( 123 and true + - ( false ) - ( - 123 ) ) / ( ( ( ) ( ID ) ) ) ( ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ 123 / - ( 123 and true + - ( false ) - ( - 123 ) ) / ( ( ( ) ( ID ) ) ) ( ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ 123 / - ( 123 and true ID - ( false ) - ( - 123 ) ) / ( ( ( ) ( ID ) ) ) ( ) ] bool ) { } func + ( ) { }",
  ") ID ( ID : bool func { var ID : [ ] int }",
  ") ID ( ID : bool func { [ ID : var ] int }",
  "bool ID ( ID : ) func { [ ID : var ] int }",
  "func ID ( ID : int ) ( var ID : bool var ID : [ - { false * true - false + ( ID ) ) ] int }",
  "func ID ( ID : int ) ( var ID : bool var ID : [ - { false * true - false int ( ID ) ) ] + }",
  "func ID ( ID : int ) ( ) ID : bool var ID : [ - { false * true - false int ( ID ) var ] + }",
  "func ID ( ) { var ID : int return } func ID ( ID : bool , ID return bool ) : bool { var ID : int : }",
  "func ID ( ) { var ID : int return } func ID ( ID : bool , ID return bool ) : bool { var ID : int : }",
  "func ID ( ) { var ID : int return ID func ID ( ID : bool , ID return bool ) : bool { var } : int : }",
  "func ID ( ID : bool ID : bool { var ) : int while 123 / - false - - - ( - - false ) { } print true }",
  "func ID ( ID : bool ID : bool { var ) : int while 123 / - false - - - true - - false ) { } print ( }",
  "func ID ( ID : bool ID : bool { - ) : int while 123 / var false - - - true - - false ) { } print ( }",
  "func ID { ID : int , ID : int ) { var ID : bool var ID : bool if - 123 + ID ( } call ID ( ) } func ID ( ) { }",
  "func ID { ID : int , ID : int ) { var ID : bool var ID : bool if - 123 + ID ( } call ID ( { } func ID ( ) ) }",
  "func ID { ID : int , ID : int ) { var ID ID bool var : : bool if - 123 + ID ( } call ID ( { } func ID ( ) ) }",
  "func ID ( ) { - ID : [ var - ID [ ( - ( ID ) ) ] ] int } func ID ( ) { }",
  "{ ID ( ) func - ID : [ var - ID [ ( - ( ID ) ) ] ] int } func ID ( ) { }",
  "{ ID ( ) func - ID : [ var - ID [ ( } ( ID ) ) ] ] int } func ID ( ) { -",
  "func ID ( ID : ID ] [ ] int , ID : int ) : bool { var ID : int if ( [ ) { } } func ID ( ) { }",
  "func ) ( ID : ID ] [ ] int , ID : int ) : bool { var ID : int if ( [ ) { } } func ID ( ID { }",
  "func ) ( ID : ID ] [ ] int , ID : int ) : bool { var ID : int if ( [ ) { } } func ID ( ID { }",
  "func : ( ID : bool ) ID [ ] bool { print 123 + ( - ( false ) ) }",
  ") : ( ID : bool func ID [ ] bool { print 123 + ( - ( false ) ) }",
  ") : ( ID : bool bool ID [ ] func { print 123 + ( - ( false ) ) }",
  "] ID ( ) { var ID : [ ID [ - false * ID [ ID ] func [ ID ] ] bool var ID : int }",
  "] ID ( ) { var ID : [ ID [ - false * ID [ ID func ] [ ID ] ] bool var ID : int }",
  "] ID ( ) { var ID : [ ID [ - false * ID [ ID func ] [ ID ] ] bool var ID : int }",
  "func ID ( ) { var ( : int var ID : bool print ( ( ID - true ) ) ) }",
  "func var ( ) { ID ( : int var ID : bool print ( ( ID - true ) ) ) }",
  "func bool ( ) { ID ( : int var ID : var print ( ( ID - true ) ) ) }",
  "ID ID ( ID : [ ] int , ID : int ) : int { print false / ID - ( - - false ) + ID } func func ( ) { }",
  "ID ID ( ID : [ ] int , ID : int ) : int { print - / ID false ( - - false ) + ID } func func ( ) { }",
  "ID ID ( ID : [ ] int , ID : int ) : int { print - / ID false ( - - false ) + ID } func func ( ) { }",
  "func ID ( } : [ ] int ) { var ID : int return - false / ( ( ID ) ) * ID ID",
  "func ID ( } : [ ] int ) { var * : int return - false / ( ( ID ) ) ID ID ID",
  "func ID ( ID : bool , ID : bool , ID : [ ] bool ) ( ID ( ( - { ID ) ) ) = ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ( ID : [ ] bool ) ( ID ( ( - { ID ) ) ) = ID } func ID , ) { }",
  "func ID } ID : bool , ID : bool ( ID : [ ] bool ) ( ID ( ( - { ID ) ) ) = ID } func ID , ) { (",
  "func ID ( ID : bool ) : [ true * ( false / - false ( ID [ false ] [ ID ] ) ] bool { } func ID * ) { }",
  "func ID ID ( : bool ) : [ true * ( false / - false ( ID [ false ] [ ID ] ) ] bool { } func ID * ) { }",
  "func ID ID ( } bool ) : [ true * ( false / - false ( ID [ false ] [ ID ] ) ] bool { } func ID * ) { :",
  "func ID ( ) : [ true / ID ( ) - ( - ID and ( true ) ) false - ] int { } func ID ( ) { }",
  "func ID and ) : [ true / ID ( ) - ( - ID ( ( true ) ) false - ] int { } func ID ( ) { }",
  "func ID and ) : [ true / ID ( ) - ( - ID ( ( true ) ) false - ] ( { } func ID int ) { }",
  "func ID ( ) { ID [ - 123 * ( - ID ( ( ID ) ) ) ] [ true ] = ID print true } func - ( ) { }",
  "func ID ( ) { ID [ - 123 ( * - ID ( ( ID ) ) ) ] [ true ] = ID print true } func - ( ) { }",
  "func ID ( ) { ID [ - 123 ( * - ID ( ( ID ) ) ) ] [ true ] = ID print true } func - ( ) { }",
  "func ID ( 123 : [ ID [ ID + ID ( ) [ false ] ] ] bool ) { }",
  "func ID ( 123 : [ ID [ ID + ID ] ) [ false ] ( ] bool ) { }",
  "func ID ( 123 ) [ ID [ ID + ID ] : [ false ] ( ] bool ) { }",
  "func ID ( ID : int ) { if ID ( false / - ID [ - ID ] [ } ] * ( - ID ) ) { } if false { ID } func ID ( ) { }",
  "func ID ( ID : int ) { if ID ( ( / - ID [ - ID ] [ } ] * false - ID ) ) { } if false { ID } func ID ( ) { }",
  "func ID ( ID ID int ) { if ID ( ( / - ID [ - ID ] [ } ] * false - : ) ) { } if false { ID } func ID ( ) { }",
  "func ID ( ) : int { call ID ( ID ( ) [ - - ID [ - ID ] ] ) if ID { } } ( ID func ) { }",
  "func ID ( ) : int { call ID ( ID ( ) [ - - ID [ - ID ] ] ) if ID { } } ( ID func ) { }",
  "func ID ( ) } int { call ID ( ID ( ) [ - - ID [ - ID ] ] ) if ID { } } ( ID func ) { :",
  "func ID ( ) { { } : func ID ( ID } [ ] bool ) : int { }",
  "func ID ( ) { { } : func ID ( ID } [ ] int ) : bool { }",
  "func ID ( ) { { var ID : [ ] { return true * ( ID ( ) ) } bool } }",
  "func ID ( ) { { return ID : [ ] { var true * ( ID ( ) ) } bool } }",
  "func ID ( ) { { return ID : [ ID { var true * ( ] ( ) ) } bool } }",
  "func ID ( ID : int , ID : [ ] bool ) : int { var ID : [ ] [ [ ( ) ID 123 ] [ ID ] ] bool var ID : [ ] bool }",
  "func ID ( ID : int , ID : [ ] bool ) : int { var ID : [ ] [ [ ( ) ID 123 ] [ ID ] ] bool var ID : [ ] bool }",
  ") ID ( ID : int , ID : [ ] bool func : int { var ID : [ ] [ [ ( ) ID 123 ] [ ID ] ] bool var ID : [ ] bool }",
  "func ( ( ) { var ID : [ true != 123 * ID ID ( ID ) ) ] [ ] bool }",
  "func : ( ) { var ID ( [ true != 123 * ID ID ( ID ) ) ] [ ] bool }",
  "func : ( ) { var ID ( ID true != 123 * ID ID ( [ ) ) ] [ ] bool }",
  "func ID ( ) { var ID : [ ( int * true / ID [ 123 ] [ - ID ] ) ] false }",
  "func ID ( ) { var ID : [ ( int * true / ID [ 123 ] [ - ID ] ) ] false }",
  "func ID ( ) { var ID : [ ( int * true / ID [ 123 ] ] - ID [ ) ] false }",
  "func ID ( ) { var ID : bool var ID : bool return ( - ( 123 * true func 123 ) ) } / ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool return 123 - ( 123 * true func ( ) ) } / ID ( ) { }",
  "ID ID ( ) { var func : bool var ID : bool return 123 - ( 123 * true func ( ) ) } / ID ( ) { }",
  "func ID ( ) : [ ] int ) var ID : bool if ( true / ( ID ) ) { } } func ID ( { { }",
  "func ID ( ) : [ ] int ) var ID : if bool ( true / ( ID ) ) { } } func ID ( { { }",
  "func ID ( ) : [ ] int ) var ID : if bool ( ( / ( ID ) ) { } } func ID true { { }",
  "func ID ( ) func var ID : [ ( ID ( ID ( ID ) ) ) ] [ ] [ ] bool } { ID ( ) { }",
  "func ID ( ID : [ ] int ID ID : int ) { var ID : bool var , : [ ] bool if ( true ) { } ID = - - ( - - ( ( ( ( ( ID ) ) ) ) ) ) }",
  "func ID ( ID : [ ] int ID ID : int ) { bool ID : bool var , : [ ] var if ( true ) { } ID = - - ( - - ( ( ( ( ( ID ) ) ) ) ) ) }",
  "func ID ( ID : ID ] int [ ID : int ) { bool ID : bool var , : [ ] var if ( true ) { } ID = - - ( - - ( ( ( ( ( ID ) ) ) ) ) ) }",
  "func true ( ) : bool { var ID : int call ID ( ID [ ( ID ) ] [ false ] ) call ID ( ) }",
  "func true ( ) [ bool { var ID : int call ID ( ID : ( ID ) ] [ false ] ) call ID ( ) }",
  "func true ( ) [ bool { var ID : int call ID ( ID : ( ID ) ] [ false ) ] call ID ( ) }",
  "func ID ( ) { var ID : [ ( ( ] ( - ( ID ) ) ) ) ID bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ func ( ] ( - ( ID ) ) ) ) ID bool } ( ID ( ) { }",
  "func ID ( ) { var ID : [ bool ( ] ( - ( ID ) ) ) ) ID func } ( ID ( ) { }",
  "{ ID ( ID : bool ) func var ID : bool if - true * 123 / true and ( - ID ) and ID { } } func ID ( ) { }",
  "{ ID ( ID : bool ) func - ID : bool if - true * 123 / true and ( var ID ) and ID { } } func ID ( ) { }",
  "{ ID ( ID : bool ) func - ID : bool if - true * 123 / true and ( var ID ) and ID { } } func ID ( ) { }",
  "func ID ( ID : [ - false / ID ( ) * ID - - [ ID ( ID ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ - false / ID ( ) * ID - - [ ID ( ID ( ] ] int ) { } func ID ) ) { }",
  "func ID ( ID : [ - { / ID ( ) * ID - - [ ID ( ID ( ] ] int ) false } func ID ) ) { }",
  "func ID ( { : [ ] bool ) { var ID : bool if ID ( ) [ - false ] ID } } func ID ( ) { }",
  "func if ( { : [ ] bool ) { var ID : bool ID ID ( ) [ - false ] ID } } func ID ( ) { }",
  "func if ( { : [ ] bool ) { var ID : bool ID { ( ) [ - false ] ID } } func ID ( ) ID }",
  "func ID ( ID : [ ) [ ] int , ID : int ) : bool { var ID : bool var ID : int if ( false ) { } while ( ID ) { } } func ID ( ] { }",
  "func ID ( ID : [ ) [ ] int , ID : int ) : bool { var ID : var bool ID : int if ( false ) { } while ( ID ) { } } func ID ( ] { }",
  "func ID ( ID : [ ) [ ] int , int : ID ) : bool { var ID : var bool ID : int if ( false ) { } while ( ID ) { } } func ID ( ] { }",
  "func ID ( ID : int ) { var ID : [ ] bool } func ] ( ) { var ID : int var ID : [ ID int }",
  "func ID ( ID : int ) { var ID : [ ] bool } func ] ( ) { var } : int var ID : [ ID int ID",
  "func ID ( ID : int [ { var ID : [ ] bool } func ] ( ) { var } : int var ID : ) ID int ID",
  "func ID ( ID : bool , ID } int , ID : bool ) : bool { var ID : bool var ID : bool return :",
  "func ID ( ID : bool ID ID } int , ID : bool ) : bool { var , : bool var ID : bool return :",
  "func ID return ID : bool ID ID } int , ID : bool ) : bool { var , : bool var ID : bool ( :",
  "func ID ID ) { call ID ( ID ( ( ( - false ) ) ) ) ( = - - - - false }",
  "func ID ID ) { call ID ( ID ( ( ( - = ) ) ) ) ( false - - - - false }",
  "func ID ID ) { false ID ( ID ( ( ( - = ) ) ) ) ( call - - - - false }",
  "func ID ( ] : bool { var ID : int var ID : [ false / false * 123 + ( 123 ) ) int } func ID ( ) { }",
  "func ID ( ] : bool { var ID : int var } : [ false / false * 123 + ( 123 ) ) int ID func ID ( ) { }",
  "func ID ( ] : bool { var ID : int var } : [ false / false * 123 + ( 123 ) ) int ID func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int ( var ID : bool var ID : int return - false / { ID ) / 123 }",
  "func ID ( ID : bool , ID : int ) : int ( var ID : } var ID : int return - false / { ID ) / 123 bool",
  "func ID ( ID : bool , ID : int ) : int ( var ID : } var ID : int return - false / { ID bool / 123 )",
  "func ID ( ) { var ID : } ] int var ID : int if ID [ false * ( ( ( ( 123 ) ) ) ) / false ] [ ( - - ( true ) ) ] { } print - true [ func ID ( ) { }",
  "func ID ( ) { var ID : } ] int var ID : int if ID [ false * / ( ( ( 123 ) ) ) ) ( false ] [ ( - - ( true ) ) ] { } print - true [ func ID ( ) { }",
  "func ID ( ID : bool ) : [ ( ( ( ID ( - ( ( ID ) ) { ) ) ) ] [ ] [ ] int ) } func ID ( ) { }",
  "func ID int ID : bool ) : [ ( ( ( ID ( - ( ( ID ) ) { ) ) ) ] [ ] [ ] ( ) } func ID ( ) { }",
  "func ID int ID : bool ) : [ ( ( ( ID ( - ( ( ID ) ) { ) ) ) ] [ ] [ ] ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ true - - - ID * ) / ( ( - - - ( false ) false ) ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ false - - - ID * ) / ( ( - - - ( false ) true ) ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ false - - - ID * ) / ( ( - - - ( ( ) true ) ] [ ] int var ID : bool } func ID false ) { }",
  "func int ( ID : ID ) : [ true * ID ( ) * ID [ - 123 ] ] int { }",
  "func int * ID : ID ) : [ true * ID ( ) ( ID [ - 123 ] ] int { }",
  "func int * ID : ID ) : [ true * ID ( 123 ( ID [ - ) ] ] int { }",
  "func ID ( ) : [ ( ID ( ) [ ID ] ) ID ] bool { }",
  "func bool ( ) : [ ( ID ( ) [ ID ] ) ID ] ID { }",
  "func [ ( ) : [ ( ID ( ) bool ID ] ) ID ] ID { }",
  "func ID ( ) { var ID : int var ID : int bool func ID ( ) { var ID : int var ID : [ ] } return ( ( ID ) ) }",
  "func ID ( ) { var ID : int var ID : int bool func ID ( ] { var ID : int var ID : [ ) } return ( ( ID ) ) }",
  "func ID ( ) { var ID : int var ID : ( bool func ID int ] { var ID : int var ID : [ ) } return ( ( ID ) ) }",
  "func ID ( ) : int { var ID : [ ] ) ] bool call ID ( ID ( true ) ) } func ID ( [ { }",
  "func ID ( ) : int { var ID : [ ] ) ] bool call ( ( ID ID true ) ) } func ID ( [ { }",
  "func ID ( ID : bool ) { var ID var bool : ID : int call ID ( ) if ID [ 123 ] [ ID ] { } } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID var bool : ID : int call ID ( ) if ID [ 123 ] [ ID ] { } } func ID ( ) { }",
  "func ID ( ) : bool { } func ID ( ) { ID ( ) [ ID [ ID ] ] [ ID ] = - - - ( ( ) call ID false ) }",
  "func ID ( ) : bool { } func ID ( ] { ID ( ) [ ID [ ID ) ] [ ID ] = - - - ( ( ) call ID false ) }",
  "func ID ( ) : bool { } func ID ( ] { ID ( ) [ ID [ ID ) ] [ ID ] = } - - ( ( ) call ID false ) -",
  "func ID ( ID : int , ID : [ 123 * - ID ( ID ( ID ) ) / - ID ] int ) { } ( ID func ) { }",
  "func ID ( ID : int , ID : [ 123 * - ID ( ID ( ID ) ) / - ID ] int ) { } ( ID func ) { }",
  "func ID ( ID : int , ID : [ 123 * - ID ( ID ] ID ) ) / - ID ( int ) { } ( ID func ) { }",
  "func ID ( ) : bool { while ( ID ( ) [ ( ) - ID ) ] - { } if - false { } }",
  "func ID ( ) : bool { while ( ID ( ) [ ( ) - ] ) ID - { } if - false { } }",
  "func ID ( ) : bool { while ( ID ( ) [ ( ) - ] { ID - { } if - false ) } }",
  "} ID ( ) { call ID ( 123 + ID ( true * - - ( ( - - ( ID ) ) ) ) ) func",
  "} ID ( ) { call ID ( 123 + ID ( true * - - ( ( - - ( ID ) ) ) ) func )",
  "} true ( ) { call ID ( 123 + ID ( ID * - - ( ( - - ( ID ) ) ) ) func )",
  "func ID ( ID : bool ) : bool - var ID : bool print ID [ - 123 * { ID ] }",
  "func ID ( } : bool ) : bool - var ID : bool print ID [ - 123 * { ID ] ID",
  "func ID ( } : bool ) : bool - var ID : bool print { [ - 123 * ID ID ] ID",
  "func ID ( ) : bool { var ID : int return ( - ( - ( ID ) ) } )",
  "func ID ( ) : bool { var ID ) int return ( - ( - ( ID : ) } )",
  "( ID ( ) : bool { var ID ) int return ( - ( - func ID : ) } )",
  ": ID ( ) { } func ID ( ID : int , ID : [ ] bool , ID : bool ) func [ ] int { var ID : [ ] int var ID : [ ] int }",
  ": ID ( ) { } func ID ( ID : int , ID : [ ] bool , ID : bool ) func [ } int { var ID : [ ] int var ID : [ ] int ]",
  ": ID ( ) { } func ID ( ID : int , ID : [ ] bool var ID : bool ) func [ } int { , ID : [ ] int var ID : [ ] int ]",
  "func ID ( ID : var ] int ) { [ ID : int var ID : int } func ID ( ) : bool { while - ID { } { } }",
  "func ID ( ID : var ] : ) { [ ID int int var ID : int } func ID ( ) : bool { while - ID { } { } }",
  "func ID ( ID : var ID : ) { [ ID int int var ] : int } func ID ( ) : bool { while - ID { } { } }",
  "func ID ( ) { var ID : false ] [ ] [ ( ( ID [ ( ( ( - - ( [ ) ) ) ) ] ) ) ] bool var ID : int }",
  "func ID ] ) { var ID : false ] [ ] [ ( ( ID [ ( ( ( - - ( [ ) ) ) ) ] ) ) ( bool var ID : int }",
  "func ID ( ID : bool , ID : [ ( ( - - ID ( ( true ) ) ) ) ] int ) { } ID func ( ) { }",
  "func ID ( ID : bool , ID : [ ( ( - - ID ( ( true ) ) ) ) ] } ) { int ID func ( ) { }",
  "ID ID ( func : bool , ID : [ ( ( - - ID ( ( true ) ) ) ) ] } ) { int ID func ( ) { }",
  "func ID ( ID : ) ] bool [ { }",
  "ID func ( ID : ) ] bool [ { }",
  "ID } ( ID : ) ] bool [ { func",
  "func ] ( ) : [ - ID ( ( ( ID ( ) ) ) ) ID bool { } func ID ( ) { }",
  "func ] ( ) : bool - ID ( ( ( ID ( ) ) ) ) ID [ { } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) : [ [ [ true != ID [ ( true ) ] ] ID ] ] [ ] int { }",
  "func ID ( ID : [ ] bool ) : [ [ [ true != ID [ ( true ) ] ] ID ] ] [ ] int { }",
  "func ID ( ID : [ ] bool ) : [ [ [ true != ID [ ( true ) ] ] ID ] ] [ ] int { }",
  "func ID ( ) { var ID func int var ID : int return } : ID ( ID : bool ) { var ID : int call ID ( ) }",
  "func ID ( ) { var ID func int var ID : int return } : ID ( ID : bool ) { var ID : int call ID ( ) }",
  "func ID ( ) { var ID func int var ID : int return } : ID ( ID : bool ) { var ID : int call ID ( ) }",
  "func ID ( ID int int ) : bool { var ID : : var ID : int if - ( ID ) { } } func ID ( ) { }",
  "func ID ( ID int int ) : bool { var ID : : var ID : int if - ( ID ) { } } func ID ( ) { }",
  "func ID ( ID int int ) : bool ( var ID : : var ID : int if - { ID ) { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ID ( ) [ 123 + ID ] true [ [ ID ] ] ] bool }",
  "func ID ( ) : int { var ID : [ ID ( ) [ ] + ID ] true [ [ ID 123 ] ] bool }",
  "func ID ( ) : [ { var ID : [ ID ( ) int ] + ID ] true [ [ ID 123 ] ] bool }",
  "func ID ( ) : int { { ( ) [ ( ID ( ID ) ) ] = false } func ID ( ) ID }",
  "func ID ( ) : int { { ( ) [ ( ID ( ID ) ) ] = false } func ID ( ) ID }",
  "func ID ( ) : int { { ( ) [ ( ID ( ID ) ) ] = false } func ID ( ) ID }",
  "func ID ( ) { return func / - - - false * - ID ( false ) } 123 ID ( ) { }",
  "func - ( ) { return func / - - - false * ID ID ( false ) } 123 ID ( ) { }",
  "func - ( ) { return func / - - - false * ID ID ( false ) } 123 ID ( ) { }",
  "func ID ( ) : [ ] [ - - false / - 123 - ( ID * ( - 123 ) { ] bool { } func ID ( ) ) }",
  "func ID ( ) : [ ] [ - - false / - 123 - ( ID * ( - 123 ) { ] bool ID } func { ( ) ) }",
  "func ID ( ) : * ] [ - - false / - 123 - ( ID [ ( - 123 ) { ] bool ID } func { ( ) ) }",
  "func ID ( ID : int , ID : [ ID / ( 123 - false * func ) * ( ID ) ] int ) { } true ID ( ) { }",
  "func ID ( ID : int , ID : [ ID / ( 123 - func * false ) * ( ID ) ] int ) { } true ID ( ) { }",
  "func ID ( ID ID int , ID : [ : / ( 123 - func * false ) * ( ID ) ] int ) { } true ID ( ) { }",
  "int ID ( ID : bool , ID : [ - ( true * ( ( ID ) ) * ID ) ] func ) { }",
  "int ID ( ( : bool , ID : [ - ID true * ( ( ID ) ) * ID ) ] func ) { }",
  "int ID ( ( : bool * ID : [ - ID true * ( ( ID ) ) , ID ) ] func ) { }",
  "func ID ( ID : int , ID : int , * : [ 123 ID ( ( false ) ) * 123 ] int ) { }",
  "func ID ( ID : int , } : int , * : [ 123 ID ( ( false ) ) * 123 ] int ) { ID",
  "func ID , ID : int ( } : int , * : [ 123 ID ( ( false ) ) * 123 ] int ) { ID",
  "func ID ( ) { } func ID ( ID : [ ] bool , ID : int [ ID : int ) { var ID : , 123 ] bool }",
  "func ID ( ) { } func ID ( ID : [ ] bool , ID : } [ ID : int ) { var ID : , 123 ] bool int",
  "func bool ( ) { } func ID ( ID : [ ] ID , ID : } [ ID : int ) { var ID : , 123 ] bool int",
  "func ID ( ) { ID = ID ( 123 - - 123 + ID ) print ( ( ( ( ( - ) ) ) ) ) true } func ID ( ) { }",
  "func ID ( ) { ID = ID ( 123 - - 123 + ID ( print ( ( ( ( ( - ) ) ) ) ) true } func ID ) ) { }",
  "func ID ( ) : [ ] [ ) * ( ( - ( ID false ) ) ] bool { }",
  "func ID ( } : [ ] [ ) * ( ( - ( ID false ) ) ] bool { )",
  "func ID ( ID : [ ] [ ( false * ( ID ( ) [ ID { [ ID ] ) * ID ) ] bool ) ] } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( false * ( ID ( ) [ ID * [ ID ] ) { ID ) ] bool ) ] } func ID ( ) { }",
  "func ID ( ID ] [ ] [ ( false * ( ID ( ) [ ID * [ ID ] ) { ID ) ] bool ) : } func ID ( ) { }",
  "func ID ( ID : [ ( / ID [ - ID / - ID false - - ID ) ] ] bool ) { }",
  "func [ ( ID : ID ( / ID [ - ID / - ID false - - ID ) ] ] bool ) { }",
  "func [ ( ID : [ ( / ID ID - ID / - ID false - - ID ) ] ] bool ) { }",
  "func ID ( ) ( int { ID [ - : ID ( ID ) ) ] [ ID ] = 123 }",
  "func ID ( ) ( int { : [ - ID ID ( ID ) ) ] [ ID ] = 123 }",
  "func ID ( ( ) int { : [ - ID ID ( ID ) ) ] [ ID ] = 123 }",
  "func ID ( ID : bool ) : bool { var ID : bool ID = ( - ID ( ) func print ( ID ) } ) ID ( ) { }",
  "func ID ( ID : bool var : bool { ) ID : bool ID = ( - ID ( ) func print ( ID ) } ) ID ( ) { }",
  "func ID ( ID : bool var : bool { ) ID : bool ID = ( - ID ( ) func print ( ID ) } ) ID ( ) { }",
  "func ID [ ) : [ false * - ID ( ( ( - - ( ( ID ) ) ) ) ) * - ( ID ) ] [ ] ( ] bool { } func ID ( ) { }",
  "( ID [ ) : [ false * - ID ( func ( - - ( ( ID ) ) ) ) ) * - ( ID ) ] [ ] ( ] bool { } func ID ( ) { }",
  "( ID [ [ : [ false * - ID ( func ( - - ( ( ID ) ) ) ) ) * - ( ID ) ] ) ] ( ] bool { } func ID ( ) { }",
  "func ID ( ) : ID { var ID : [ false / true + ID ( ) [ ( int ) ] ] bool } func ID ( ) { }",
  "func ID ( ) : ID { var ID : [ false / true ID + ( ) [ ( int ) ] ] bool } func ID ( ) { }",
  "func ID ( ) : ID { var ID : [ false / true ID + bool ) [ ( int ) ] ] ( } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ ] [ ( - true * - ( ) ID ) ) * 123 ( ] [ ] bool ) { }",
  "func ID ( ID : ID , ID : int , ID : [ ] [ ( - true * - ( ) int ) ) * 123 ( ] [ ] bool ) { }",
  "func ID ( ID : ID , ID : int , ID : [ ] [ ( - true * - ( ) int { ) * 123 ( ] [ ] bool ) ) }",
  "var ID ( ) { var ID : bool func ID : [ - ( 123 * false >= - ID ) ] bool } func ID ( ) { }",
  "var ID ( ) { var func : bool func ID : [ - ( 123 * false >= - ID ) ] bool } ID ID ( ) { }",
  "var ID : ) { var func ( bool func ID : [ - ( 123 * false >= - ID ) ] bool } ID ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID ( [ ] int ID ( ) [ ID ( ) ] = - ( - ( : ( 123 ) ) ) ) }",
  "func ID ( ) : bool { var ID : bool var ID ( [ ] int ID ( ) [ - ( ) ] = - ( ID ( : ( 123 ) ) ) ) }",
  "func ID ( ) : bool { var ID : bool var ID ( [ ] int ID ( ) [ - } ) ] = - ( ID ( : ( 123 ) ) ) ) (",
  "func ID ( ) : int { var ID : [ - false / ID ( ID [ true / false ] * ) ] [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ - false ] ID ( ID [ true / false ] * ) / [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ - false ] ID ( ID [ true / false ] * ) / [ ] [ ] [ ] bool } func ID ( ) { }",
  "func bool ( ) : ID { var ID : bool if false * ( - ( 123 ) ) { } }",
  "func bool ( ) : ID { var ID : bool if false * } - ( 123 ) ) { } (",
  "func { ( ) : ID bool var ID : bool if false * } - ( 123 ) ) { } (",
  "func ID ( ) { var ID : int var ID : int } func ID ( ID : int , ID : bool bool { var ID : bool var ID : ) }",
  "func ID ( ) { var ID : int var ID : int } func ID ( ID , int : ID : bool bool { var ID : bool var ID : ) }",
  "func ID ( ) { var ID : int var ID : int } func ID ( ID , int : ID : bool bool { var ID : bool var ID : ) }",
  "func ID ( ID : int ) : bool { var ID : bool var ID : [ - ID [ false ] ] int ( func ID } ) { }",
  "func ID ( ID : int ) : bool { var ID : bool var ID : [ - ID [ false ] ] } ( func ID int ) { }",
  "func ID ( ID : int ) : bool { var ID : bool var ID : [ - ID [ false ] ] } ( func ID int ) { }",
  "func ID ( ) : bool { var ID : int var ID : bool if false * - false * - true { } } { ID ( ) func }",
  "func ID ( ) : { { var ID : int var ID : bool if false * - false * - true bool } } { ID ( ) func }",
  "func ID ( - : { { var ID : int var ID : bool if false * - false * ) true bool } } { ID ( ) func }",
  ": ID ( ID : int , ID func int ) : int { { var ID : [ - ID ( false ) ] bool } }",
  ": [ ( ID : int , ID func int ) : int { { var ID : ID - ID ( false ) ] bool } }",
  ": [ ( ID : int , ID func int ) : int { { var ID : ID - ID false ( ) ] bool } }",
  "func ID ( ) : int { var ID : [ ] [ ] [ ] int print - ID ( false ) while ( } ( ID ) ) ) { ( }",
  "func [ ( ) : int { var ID : ID ] [ ] [ ] int print - ID ( false ) while ( } ( ID ) ) ) { ( }",
  "func [ ( ) : int { ( ID : ID ] [ ] [ ] int print - ID ( false ) while ( } var ID ) ) ) { ( }",
  "func ID ( ) { var ID : [ ] bool if 123 - 123 / - - false * print { } ID 123 }",
  ": ID ( ) { var ID func [ ] bool if 123 - 123 / - - false * print { } ID 123 }",
  ": ID ( ) { var ID func [ ] bool if 123 - 123 / - - false * print { } ID 123 }",
  "+ ID ( ) { ID = - false + - false / false / - ( ( ( ID ) ) ) func - ID } func ID ( ) { }",
  "+ ID ( ) { ID = - false ( - false / false / - ( + ( ID ) ) ) func - ID } func ID ( ) { }",
  "+ ID ( ) { ID = - false ( - false / false / - ( + ( ID ( ) ) func - ID } func ID ) ) { }",
  "func ID ( ID : bool , ID : bool ) : int { if - ( ( false ) ) { ID } func } ( ) { }",
  "func ID ( ID : bool , : : bool ) ID int { if - ( ( false ) ) { ID } func } ( ) { }",
  "func ID ( ID : ID , : : bool ) bool int { if - ( ( false ) ) { ID } func } ( ) { }",
  "func ID ( ) : bool { if - true + false - ID ( ) [ - ] - - - false { } }",
  "func ID ( ) : bool { if - true + false - ID ( ) [ - ] - - - false { } }",
  "func ID ( ) : bool { if + true - false - ID ( ) [ - ] - - - false { } }",
  "func ID ( ) { if ( ID + true - - true * - - ( - false ) ) { } } ( ID func ) { }",
  "func ) ( ID { if ( ID + true - - true * - - ( - false ) ) { } } ( ID func ) { }",
  "true ) ( ID { if ( ID + func - - true * - - ( - false ) ) { } } ( ID func ) { }",
  "func ID : ) ( [ ] int { return }",
  "func ID : ) ( [ ] int { return }",
  "func ID ( ID : [ ] int , : : bool , ID : bool ) ID bool { { call ID ( ) } }",
  "func ID ( ID : [ ] int , { : bool , ID : bool ) ID bool : { call ID ( ) } }",
  "func ID ( ID : , ] int , { : bool [ ID : bool ) ID bool : { call ID ( ) } }",
  "func ID ( ID : bool , ID : bool , ID : [ ] bool = { ID ) ID ( ( ( 123 ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] bool = { ID ) ID ( ( ( 123 ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] bool = { ID ) ID ( ( } 123 ) ) ) } func ID ( ) { (",
  "true ID ( ID : int , ID : int ) { { var ID : bool return } while ( func ) { } } func ID ( ) { }",
  "true ID ( ID : int , ID } int ) { { var ID : bool return } while ( func ) { : } func ID ( ) { }",
  "true ID ( ID : int , ID } int ) { { var ID : bool return } while ( func ) { : } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool while true * - ID func - - - ( false ) ) / 123 { } } ( ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool while true * - ID func - - - ( false ) ) / 123 { } } ( ID ( ) { }",
  "func ID ( ID : int ) { var ) : bool while true * - ID func - - - ( false ) ) / 123 { } } ( ID ( ID { }",
  "func ID ( var : [ ] [ ] bool , ID : int , ID : bool ) : bool { var ID : bool ID ID : bool return ID }",
  "func ID ( var : [ ] [ ] bool , ID : int , ID : bool : : bool { var ID : bool ID ID ) bool return ID }",
  ": ID ( var func [ ] [ ] bool , ID : int , ID : bool : : bool { var ID : bool ID ID ) bool return ID }",
  "func ID ( ) : bool { ID ID ( * 123 and ( ID ) and ID ) = 123 }",
  "func ID ( ) : bool { ID ID 123 * ( and ( ID ) and ID ) = 123 }",
  "func ID ( ID : [ - - ID ( false true ( - * ) * ID ) ] bool ) { }",
  "] ID ( ID : [ - - ID ( false true ( - * ) * ID ) func bool ) { }",
  "] ID ( ID : true - - ID ( false [ ( - * ) * ID ) func bool ) { }",
  "func ID ( : ID bool ) : bool { while true * - - - - - 123 * - - ( - ( 123 ) ) { } ID = ID }",
  "func ID ( while ID bool ) : bool { : true * - - - - - 123 * - - ( - ( 123 ) ) { } ID = ID }",
  "func ID ( while ID bool ) : bool - : true * { - - - - 123 * - - ( - ( 123 ) ) { } ID = ID }",
  "func ID ( ) { if ( true / ( ] [ - ( ID ) ID ) / false ) { } ID = ( true ) } func ID ( ) { }",
  "func ID ( ) { if ( true / ( ] [ ) ( ID ) ID - / false ) { } ID = ( true ) } func ID ( ) { }",
  "func ID ( ) = if ( true / ( ] [ ) ( ID ) ID - / false ) { } ID { ( true ) } func ID ( ) { }",
  "func ID ( ID : call ) { bool ID ( ) } func ID ( ) { call ID ( ) call ID ( - ID ) }",
  "func ID ( bool : call ) { ID ID ( ) } func ID ( ) { call ID ( ) call ID ( - ID ) }",
  "func { ( bool : call ) ID ID ID ( ) } func ID ( ) { call ID ( ) call ID ( - ID ) }",
  "func ID ( ID : int ) : int { while ( - ( } - ID ) ) { } -",
  "func ID ( ID : int ) while int { : ( - ( } - ID ) ) { } -",
  "func ID ( ID : int ) while int { : ( - - } - ID ) ) { } (",
  "func ID ( ) : [ true / ( ( ( ID ( ) ) ) ) } true ] int { / func ID ( ) { }",
  "func ID ( ) : [ true / ( int ( ID ( ) ) ) ) } true ] ( { / func ID ( ) { }",
  "func ID ( ) : / true [ ( int ( ID ( ) ) ) ) } true ] ( { / func ID ( ) { }",
  "func ID ( ) : int { var bool : ID print 123 * ID ( - ( - false ) ) if 123 { } }",
  "func ID ( ) : var { int bool : ID print 123 * ID ( - ( - false ) ) if 123 { } }",
  "func ID ( ) : var { if bool : ID print 123 * ID ( - ( - false ) ) int 123 { } }",
  "func ID ( ) : int { } func ID ( ID : int , ID : bool , ID false [ ] [ - : * true ] bool ) { }",
  "func ID ( ) : int { } func ID ( ID : int , ID : bool , ID false [ ] : - [ * true ] bool ) { }",
  "func ID ID ) : int { } func ID ( ( : int , ID : bool , ID false [ ] : - [ * true ] bool ) { }",
  "func ID ( ) : 123 { var ID : int print 123 * - ( true + ID - - bool ) }",
  "func ID ( ) : 123 - var ID : int print 123 * - ( true + ID { - bool ) }",
  "func ID ( ) : 123 - var ID : int ) 123 * - ( true + ID { - bool print }",
  "ID ID ( ) { var ID : bool var ID : bool return - true * ( - ( ID ) ) / - func } func ID ( ) { }",
  "ID ID func ) { var ID : bool var ID : bool return - true * ( - ( ID ) ) / - ( } func ID ( ) { }",
  "ID - func ) { var ID : bool var ID : bool return - true * ( ID ( ID ) ) / - ( } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ID int int ) : : { if ID ( ( ( false ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ID int ) ) : : { if ID ( ( ( false ) int ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : ] ] bool var ID : [ ( ( - ( - ID ) ) ) [ int }",
  "func ID ( ) { var ID : ] ] bool var ID : [ ( ( - ( - ID ) ) ) [ int }",
  "func { ( ) ID var ID : ] ] bool var ID : [ ( ( - ( - ID ) ) ) [ int }",
  "func ID ] ID : [ ID [ ID ( ID ( ) [ ID ] ) ] ( int ) { } func ID ( ) { }",
  "func ID ] ID : [ ID [ ID ( int ( ) [ ID ] ) ] ( ID ) { } func ID ( ) { }",
  "func ID ] ID : [ ID [ ) ( int ( ) [ ID ] ID ] ( ID ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool { var ID : bool var ID : int ID [ ID [ - ID ] ] = 123 print ID ID call ID ( ) } func } ( ) { }",
  "func ID ( ) { ID ID : bool { var var : bool var ID : int ID [ ID [ - ID ] ] = 123 print ID ID call ID ( ) } func } ( ) { }",
  "func ID ( ) { ID ID : ID { var var : bool var ID : int bool [ ID [ - ID ] ] = 123 print ID ID call ID ( ) } func } ( ) { }",
  "func ID ( ID : return , ID : [ ] int , ID : int ) : bool { bool }",
  "func ID ( int : return , ID : [ ] ID , ID : int ) : bool { bool }",
  "func ID ( int : return , ID : [ ] : , ID : int ) ID bool { bool }",
  "func ID ( : : [ ] [ ] bool , ID ID bool ) : int { var ID : int var ID : bool { } { } }",
  "func ) ( : : [ ] [ ] bool , ID ID bool ID : int { var ID : int var ID : bool { } { } }",
  "func ) } : : [ ] [ ] bool , ID ID bool ID : int { var ID : int var ID : bool { } { } (",
  "func ID ( ID : int , ID : [ ] [ ] ) ( 123 / - ID ( ) ) ] [ ] bool [ { } func ID ( ) { }",
  "func ID ( ID : int , / : [ ] [ ] ) ( 123 ID - ID ( ) ) ] [ ] bool [ { } func ID ( ) { }",
  "func ID ( ID : int , / : [ ] [ ] ) ( 123 ID - ID ( ) ) func [ ] bool [ { } ] ID ( ) { }",
  "func ID ( ID : int ) { if / true ( - ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : { ) int if / true ( - ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : { ) int if / true ( - ( ID ) ) ID } } func { ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : ] ] bool ) { } func ID ( ID : [ - ID [ int ) { }",
  "func ID ( ID : bool , ID : ID , ID : ] ] bool ) { } func ID ( ID : [ - bool [ int ) { }",
  "func ID ( ID : bool , ID : ID , ID : ] ] bool [ { } func ID ( ID : [ - bool ) int ) { }",
  "func ID ( ID : [ - false * ( - - ( ID ( - false ) ) ) ] int ) } {",
  "func ID int ID : [ - false * ( - - ( ID ( - false ) ) ) ] ( ) } {",
  "func ID ( ) : [ ] bool { var ID / bool var ID : bool { while ID : ID * 123 { } while - ID { } } if ( - 123 ) { } }",
  "func - ( ) : [ ] bool { var ID / bool var ID : bool { while ID : ID * 123 { } while - ID { } } if ( ID 123 ) { } }",
  "func - { ) : [ ] bool ( var ID / bool var ID : bool { while ID : ID * 123 { } while - ID { } } if ( ID 123 ) { } }",
  "func ID ( ) { var : ID [ ID ( false + ID ( ID ) ) ] [ ] int }",
  "func ID ( ) { var : ID [ ID ( ] + ID ( ID ) ) ] [ false int }",
  "func ID ( ) { var : ID [ int ( ] + ID ( ID ) ) ] [ false ID }",
  "func ID ( ID : bool , ID } int ) { var ID : [ ] bool :",
  "func ID ( } : bool , ID ID int ) { var ID : [ ] bool :",
  "func ID ( } : bool , ID ID : ) { var ID : [ ] bool int",
  "func ID ( ID : ] , ID : bool , ID : int ) : int { ID ( ) [ ID ( ) [ ID ] ] [ - ID int = ID { } }",
  "func ID ( ) : ] , ID : bool , ID : int ) : int { ID ( ) [ ID ( ID [ ID ] ] [ - ID int = ID { } }",
  "func ID ( ) : ] , ID : bool , ID : int ) : int { ID ( ) [ ID ( ID [ ID = ] [ - ID int ] ID { } }",
  "func ID ( ID : [ bool bool , ID : [ ] int , ID : int ) : ] { call ID ( - ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ bool bool , ID : [ ] int , ID : int ) : ] { call ID ( - ID { ) } } func ID ( ) { }",
  "func ID ( ID : [ bool bool , ID : [ ] int , ID : int ) : ] ID call ID ( - ID { ) } } func { ( ) { }",
  "+ ID ( ID : [ - ( ID [ false func ID >= ( ( - false ) ) ] ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "+ ID ( ID : [ - ( ID [ false func ID ID ( ( - false ) ) ] ) ] [ ] [ ] bool ) { } func >= ( ) { }",
  "+ ID ( ID ( [ - ( ID [ false func ID ID : ( - false ) ) ] ) ] [ ] [ ] bool ) { } func >= ( ) { }",
  "func ID ( ) { var ID : bool var ID : int return } func ID ( ) { bool : while ID ( ) { } }",
  "func ID ( ) { var ID : bool var ) : int return } func ID ( ) { bool : while ID ( ID { } }",
  "func ID ( ) { var ID : bool var ) : int return } func ID ( ) { bool : while ID ( ID { } }",
  "func ID ( ID : int , ID : int func : [ ID [ ID [ true ] ] [ ( 123 ) ] ] int { } ) ID ( ) { }",
  "func ID ( ID : int , ID : int func : [ ID [ ID [ true ] ] [ ( 123 ) { ] int { } ) ID ( ) ] }",
  "func ID ( 123 : int , ID : int func : [ ID [ ID [ true ] ] [ ( ID ) { ] int { } ) ID ( ) ] }",
  "func ID ( ) { } func ID ( ) { var ID : [ } int while true / true { } ]",
  "func ID ( ) { } true ID ( ) { var ID : [ } int while true / func { } ]",
  "func ID ( ID : bool ) : int { var ID : int var ID : func ID ( ( ( false ) ) ) = 123 } int ID ( ) { }",
  "func ID ID ID : bool ) : int { var ID : int var ID : func ( ( ( ( false ) ) ) = 123 } int ID ( ) { }",
  "func ID ID ID : bool ) : int { var ID : int var ID : func ( ( ( ( false ) ) ) = 123 } int ID ( ) { }",
  "func ID ( ) : int { var ID : ) ( - - ID * 123 / - false [ ] [ ] int }",
  "func ID ( ) : int { var - : ) ( - - ID * 123 / ID false [ ] [ ] int }",
  "func ID ( ) : int { var - : ) ( - ID - * 123 / ID false [ ] [ ] int }",
  "func ID ( ) : { bool var ID : bool if ( ID * false and - - false ) { } }",
  "func ID ( ) : { var bool ID : bool if ( ID * false and - - false ) { } }",
  "func ID ( { : { var bool ID : bool if ( ID * false and - - false ) ) } }",
  "func ID ( ) { var [ : int var ID : ID 123 * - ID ( ( - true ) ) ] [ ] bool }",
  "func ID ( ) { var [ - int var ID : ID 123 * - ID ( ( : true ) ) ] [ ] bool }",
  "func ID ( ) { var [ int - var ID : ID 123 * - ID ( ( : true ) ) ] [ ] bool }",
  "func ID ( ID : [ ] { ) : int { ID ( ) = - ( true / - ID ) } func ID ( ) bool }",
  "func ID ( ( : [ ] { ) : int { ID ID ) = - ( true / - ID ) } func ID ( ) bool }",
  "func ID ( ( : [ ] { ) : int { ID ID ( = - ) true / - ID ) } func ID ( ) bool }",
  "func ID ( ) { var ID : int var ID : bool ) var ID : int call ID ( ) while ( ID { { } } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID ID bool ) var : : int call ID ( ) while ( ID { { } } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID ID bool ( var : : int call ID ( ) while ( ID { { } } } func ID ) ) { }",
  "func ID ( ID : int ) bool var ID : bool var ID : [ ] { return - true + true * ID / false } func ID ( ) { }",
  "func ID ( ID : bool ) int var ID : bool var ID : [ ] { return - true + true * ID / false } func ID ( ) { }",
  "func ID ( ID : } ) int var ID : bool var ID : [ ] { return - true + true * ID / false } func ID ( ) { bool",
  "func : ( ID ID int , ID : [ true / false - ID [ ( - false ) ] - false ] int , ID : bool ) { }",
  "func : ( ID ID , , ID : [ true / false - ID [ ( - false ) ] - false ] int int ID : bool ) { }",
  "func : ( ID ID , , ID : [ true / false - ID [ ( - false ] ] - false ) int int ID : bool ) { }",
  "func ID ( ID : bool , ID : bool ) : int { bool ID : var var ID : int print - true / ( ID ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : int { bool ID : var var ID : int print - true ( / ID ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : int { bool ID : var var ID : int print - true ( / ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ - - - false - ( bool ( ID ) ) ) + ID ] ( var ID : bool }",
  "func ID ( ) { var ID : ) - - - false - ( bool ( ID ) [ ) + ID ] ( var ID : bool }",
  "func ID ( ) { var ID : ) - - - false - ( bool ( ID ) [ ) + ( ] ID var ID : bool }",
  "( ID ( ID : bool ) { var ID : bool var ID : [ - func - ID ( ) ) ] [ ] bool }",
  "( ID ( ID : : ) { var ID : bool var ID bool [ - func - ID ( ) ) ] [ ] bool }",
  "( ID ( ( : : ) { var ID : bool var ID bool [ - func - ID ID ) ) ] [ ] bool }",
  "func ID ( ) : bool } var ID : bool while ( - ( false / ( ID ) ) ) { } { } {",
  "func ID ( ) : bool } var ID false bool while ( - ( : / ( ID ) ) ) { } { } {",
  "func ID ( ) : bool } var ID false bool while ( - ( : / ( ID ) ) ) { } { } {",
  "func ID ( ) { print ID ( - true - - ( - 123 ) ) ID } ID } func ID ( ) { =",
  "func ID ( ) { ID print ( - true - - ( - 123 ) ) ID } ID } func ID ( ) { =",
  "func 123 ( ) { ID print ( - true - - ( - ID ) ) ID } ID } func ID ( ) { =",
  "func ID ( ID : [ false * - ( ( ( ( ) true ) ) - ) / ID ] [ ] bool ) { }",
  "func ID ( ID : true false * - ( ( ( ( ) [ ) ) - ) / ID ] [ ] bool ) { }",
  "func ID bool ID : true false * - ( ( ( ( ) [ ) ) - ) / ID ] [ ] ( ) { }",
  "func ID ( ID : bool ) return var ID : int { } func ID ( ID : bool ) : bool { var ID : int while - ID { } { } }",
  "func ID ( ID : bool ) return var ID : int { } func ID ( ID ID bool ) : bool { var : : int while - ID { } { } }",
  "func ID ( ID { bool ) return var ID : int : } func ID ( ID ID bool ) : bool { var : : int while - ID { } { } }",
  "func ID ( ID : [ 123 / ( ( + 123 ID ( - ( false ) ) ) ) ] int ) { }",
  "func ID ( ID : [ 123 / ( ( ) 123 ID ( - ( false ) ) ) ) ] int + { }",
  "func ID ( ID : [ 123 / ( ( ) 123 ID ( + ( false ) ) ) ) ] int - { }",
  "func ID ( ID : [ ID bool , ID : [ ] [ ( ID [ ( - ] ) ] [ ID ] ) ] bool , ID : int ) { }",
  "func ID ( ID ] [ ID bool , ID : [ : [ ( ID [ ( - ] ) ] [ ID ] ) ] bool , ID : int ) { }",
  "func ID ( ID ] [ ID bool , ID ] [ : [ ( ID [ ( - ] ) ] [ ID ] ) : bool , ID : int ) { }",
  "func ] ( ID : [ ] [ ] [ - 123 / - ( - true ) - ID + ( ID ) ID bool ) { }",
  "func ] ( ID ) [ ] [ ] [ - 123 / - ( - true : - ID + ( ID ) ID bool ) { }",
  "func ] ( ID ) [ ] [ ] [ - 123 - / ( - true : - ID + ( ID ) ID bool ) { }",
  "func ID ( ) : int { var bool : [ ] ID return }",
  "func ID ( ) : } { var bool : [ ] ID return int",
  "func ID ( ) : : { var bool } [ ] ID return int",
  "func ID ( ) { var ID : bool var ID : bool return ( ( * - - ( 123 - ( - ( ID ) ) ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool return ( ( * - - ( ) - ( - ( ID ) 123 ) ) ) } func ID ( ) { }",
  "func ) ( ) { var ID : bool var ID : bool return ( ( * - - ( ID - ( - ( ID ) 123 ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool , int : [ ID [ ID ( true <= ( ID ) ) ] ] int , ID : [ ] ID ) { }",
  "func ID ( ID : bool , int : [ ID [ ID ( true <= ( ID ) ) ] ] int , ID ) [ ] ID : { }",
  ", ID ( ID : bool , int : [ ID [ ID ( true <= ( ID ) ) ] ] int func ID ) [ ] ID : { }",
  "func ID ( ID : [ ] [ ( ( ] == - ID ) ) true bool ) { }",
  "ID ID ( ID : [ ] [ ( ( ] == - func ) ) true bool ) { }",
  "ID ID ( ( : [ ] [ ID ( ] == - func ) ) true bool ) { }",
  "func ID ( ) { var ID / [ ID ( ID ( true : - - 123 ) ) ] bool }",
  "func ID ( ) { / ID var [ ID ( ID ( true : - - 123 ) ) ] bool }",
  "func ID ( ) : / ID var [ ID ( ID ( true { - - 123 ) ) ] bool }",
  "func ID ( ) : [ - - false * ID ( ) * [ ID ( ) [ true ] ) ] ( ] bool { } func ID ( ) { }",
  "func ID ( ) : [ - - false * ID ( ) * [ ID ( ] [ true ] ) ] ( ) bool { } func ID ( ) { }",
  "func ID ( ) : [ - - false * * ( ) ID [ ID ( ] [ true ] ) ] ( ) bool { } func ID ( ) { }",
  "func ID ( ID int : , ID : int , ID : [ ID * - ID == ( 123 ) ] [ ] bool ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) : bool { var ID : bool : ID : bool { var ID var int var ID : int } { } }",
  "func ID ( ID : int , ID : bool , ID : int ) : bool { var ID : bool : ID : bool { var int var ID var ID : int } { } }",
  "func ID ( ID : int var ID : bool , ID : int ) : bool { var ID : bool : ID : bool { , int var ID var ID : int } { } }",
  "func ID ( ID ID int ) : int { var ID : int var ID : bool call ID ( ( - ID ) ) } func : ( ) { }",
  "func ID ( ID ID int ) : int { var ID ID int var ID : bool call ID ( ( - : ) ) } func : ( ) { }",
  "func ID ( ID ID int ) : int { var ID ID int var ID : bool call ID ( ( } : ) ) } func : ( ) { -",
  "func ID ( ) : [ ] int { var ID : bool { var ID : int var - : [ - ID 123 ] bool } call ID ( ) }",
  "func ID ( ) : [ ] int { var ID : bool { var } : int var - : [ - ID 123 ] bool } call ID ( ) ID",
  "func ID ( ) : [ ] int { var ID : bool { var } : int var - : [ - ID 123 ] ( } call ID bool ) ID",
  "func ID ( ID : [ false * { false / true + - ID [ ID ] ] [ ] bool ) { } func ID ( ) - }",
  "func ID ( ID : [ false * { false / true + - ID [ ID ] ] ] [ bool ) { } func ID ( ) - }",
  "func ID ( ID ) [ false * { false / true + - ID [ ID ] ] ] [ bool : { } func ID ( ) - }",
  "func ID - ID : [ ] int , ID : [ 123 / false + ( false == ( ( ID ) ) ] int ) { }",
  ", ID - ID : [ ] int func ID : [ 123 / false + ( false == ( ( ID ) ) ] int ) { }",
  ", ID - ID : [ ] int func ID : [ 123 / false + ( false == ( { ID ) ) ] int ) ( }",
  "func ID ( ID : [ false / ( ( - int / ID ( ) / ID ) ) / ID ] 123 ) { }",
  "func ID ( ID 123 [ false / ( ( - int / ID ( ) / ID ) ) / ID ] : ) { }",
  "func ID ( ID 123 [ false / ( ( - int / ID ( ) ) ID ) / / ID ] : ) { }",
  "func ID ID ) { call ID ( 123 + ID ( - ( ( ID ) ) ) ) } func ( ( ) { }",
  "func ID ID ( { call ID ( 123 + ID ( - ) ( ID ) ) ) ) } func ( ( ) { }",
  "func ID ID ( { call ID ( 123 + ID ( - ) ( ID ) ) ) ) } func ) ( ( { }",
  "func ID ( ) : int - print ID [ - ID ( true - ( { ID ) ) ] } func ID ( ) { }",
  "func ID ( ) : int - } ID [ - ID ( true - ( { ID ) ) ] print func ID ( ) { }",
  "func ID ( ) : int - } ID [ - ) ( true - ( { ID ) ID ] print func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID ( ) ) true / ( ID - false ) ] bool , ID : int ) { } func ID ( / { }",
  "func ID ( ID : bool , ID : true ID ( ) ) [ / ( ID - false ) ] bool , ID : int ) { } func ID ( / { }",
  "ID ID ( ID : bool , ID : true ID ( ) ) [ / ( ID - false ) ] bool , ID : int ) { } func func ( / { }",
  "func ID ( ) : ID ID [ - true / true + - [ or ( - false ) or true ] ] int { } func ID ( ) { }",
  "func ID ( ) : ID ID [ - true / true + - [ or ( - false ) or true ] ] int { } ) ID ( func { }",
  "func ID ( ) : ID ID [ - true / true + - [ or ( - false ) or func ] ] int { } ) ID ( true { }",
  "{ ID ( ) func var ID : int while - ID [ ID [ 123 ] [ - - ( ID ) ] ] [ - ID ] { } }",
  "{ ID ( ) func var ID : int while - ID [ ID [ 123 ] [ - - ( ID ) ] ] [ - ID ] { } }",
  "func ID ( ) { var ID : [ ] int { bool ID : var } }",
  "func ID ( ) { var ID ID [ ] int { bool : : var } }",
  "func ID ( ) { var ID ID [ int ] { bool : : var } }",
  "func ID ( ID : bool , ID : [ ] int , int : int ) : ID { var ID : int print ( 123 ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int , int : int ) : ID { var ID : int print ( 123 ) } func ID ( } { )",
  "func ID ( ID : , , ID : [ ] int bool int : int ) : ID { var ID : int print ( 123 ) } func ID ( } { )",
  "func bool ( ) : ID { ID = ID [ - - ( ID ) ] [ false ] }",
  "func bool ( ) : ID { ID = ] [ - - ( ID ) ] [ false ID }",
  "func bool ( ) : ID { ID = ] [ - false ( ID ) ] [ - ID }",
  "func ID ( ) : [ ] int { var ] : [ ID bool ID ( ) [ - - ( ID ) ] [ ( ( ID ) ) ] = ( ( 123 ) ) ID = ( false ) } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ] : [ ID bool ID ( ) [ - - ( ID ) ] ID ( ( ID ) ) ] = ( ( 123 ) ) [ = ( false ) } func ID ( ) { }",
  "func ID ( ) : ] ] int { var ] : [ ID bool ID ( ) [ - - ( ID ) [ ID ( ( ID ) ) ] = ( ( 123 ) ) [ = ( false ) } func ID ( ) { }",
  "func ID ( ID int [ ID ( ) * ID ( - ID ( ( ID ) ) ) ] [ ] : ) { } func ID ( ) { }",
  "func ID ( ID [ [ ID ( ) * ID ( - ID ( ( ID ) ) ) ] int ] : ) { } func ID ( ) { }",
  "func ID ( ID [ [ ID ( ) * ID ( - ID ( ( } ) ) ) ] int ] : ) { } func ID ( ) { ID",
  "func ID ( ) { var ID : bool var ID ID bool print - - : ( ) / ( 123 ) ID = 123 }",
  "func ID ( ) { var ID : bool var bool ID ID print - - : ( ) / ( 123 ) ID = 123 }",
  "func ID ( ) { var ID : print var bool ID ID bool - - : ( ) / ( 123 ) ID = 123 }",
  "func ID ( ) : int { var ID : [ ] bool return - false - ID [ ( false ) ] } func ID { ) ( }",
  "func ID ( ) : int { var ID : [ ] bool return - false - ID [ ( false ) ] } func ID { ) ( }",
  "func ID ( - : int { var ID : [ ] bool return ) false - ID [ ( false ) ] } func ID { ) ( }",
  "func ID ( ) { var ID : [ ] bool { var ID { int return false * ( ID ) * ID } } func ID ( ) : }",
  "func ID ( ) } var ID : [ ] bool { var ID { int return false * ( ID ) * ID { } func ID ( ) : }",
  "func ID ( ) } [ ID : var ] bool { var ID { int return false * ( ID ) * ID { } func ID ( ) : }",
  "func ID ( ) : int { - false / if true > 123 / false * ID { } } func ID ( ) { }",
  "func ID true ) : int { - false / if ( > 123 / false * ID { } } func ID ( ) { }",
  "func ID true ) : int { - false / if ( > 123 / } * ID { false } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ID ( - ( - - 123 ) [ ] ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ID ( - ( - - 123 ) [ ] ) } int ] func ID ( ) { }",
  "func ID ( ) { var ID : [ - ID ( - ( - - 123 ) [ ] ) } int ] ID func ( ) { }",
  "{ ID ( ID : int ) : int { var ID : bool { if ( ID ( ) ) func } { } } } func ID ( ) { }",
  "{ ID ( ID : ( ) : int { var ID : bool { if ( ID ( ) ) func } { } } } func ID int ) { }",
  "{ ID ( ID : ( ) : int { ) ID : bool { if ( ID ( ) ) func } { } } } func ID int var { }",
  "func ID ( ID : - ID [ true / ID [ ID [ ID ] [ - ( - - [ 123 ) ] ] [ true ] / true ] ] [ ] int ) { }",
  "func ID ( / : - ID [ true / ID [ ID [ ID ] [ - ( - - [ 123 ) ] ] [ true ] ID true ] ] [ ] int ) { }",
  "func ID ( / : - ID [ true / ID [ ID [ ID ] [ - ( - - [ 123 ) ] ] [ true ] ID true ] ] [ ] int ) { }",
  "func ID ( ID [ [ ] int ) : [ ( ( - - ID [ ID ] : - ( ID ) ] ) ) ] int { } func ID ( ) { }",
  "func ID ( ID [ ] ] int ) : [ ( ( - - ID [ ID ] : - ( ID ) [ ) ) ] int { } func ID ( ) { }",
  "{ ID ( ID [ ] ] int ) : [ ( ( - - ID [ ID ] : - ( ID ) [ ) ) ] int func } func ID ( ) { }",
  "func ID ( ) { var ID : [ - ( ID ( - - ID } ) ] int )",
  "func ID ( ) { var } : [ - ( ID ( - - ID ID ) ] int )",
  "func ID ( ) { var } : [ - ID ID ( - - ID ( ) ] int )",
  "func ID ( ] : int ) { var ID : int var ID : [ ] [ ] bool { var ID : [ ] [ false ] [ ] int var ID : [ ID bool } }",
  "func ID ( [ : int ) { var ID : int var ID : [ ] [ ] bool { var ID : [ ] [ false ] ] ] int var ID : [ ID bool } }",
  "func ID ( [ : int ) { var ID : int var ID : [ ] [ ] bool { var ID : [ ] [ false ID ] ] int var ] : [ ID bool } }",
  "func ID ( ID : int , ID : bool ) { var ID : int ID [ ID ( ) + ID ] = ( ) ) call ID ( ) } func ID ( ID { }",
  "func ID ( ID : int , int : bool ) { var ID : ID ID [ ID ( ) + ID ] = ( ) ) call ID ( ) } func ID ( ID { }",
  "func ID ( ID : int , int : bool ) { var ID : ID ID + ID ( ) [ ID ] = ( ) ) call ID ( ) } func ID ( ID { }",
  "func ID ID ID : [ ] int , ID : [ ( 123 * ID / ID ( ) ) ] bool , ( : [ ] int ) { }",
  "ID func ID ID : [ ] int , ID : [ ( 123 * ID / ID ( ) ) ] bool , ( : [ ] int ) { }",
  "ID func ID ID : [ ] int , ID : [ / 123 * ID ( ID ( ) ) ] bool , ( : [ ] int ) { }",
  "func ID ) ID : bool , ID : [ ID ( 123 - - - false - ID ) ] bool , ID : [ ] [ ] int ( { }",
  "func ID ) ID : bool , ID : [ ID ( 123 - - - false - ID ) ] bool , ID : [ ] [ ] int ( { }",
  "func ID ) ID : bool , ID : [ ID ( } - - - false - ID ) ] bool , ID : [ ] [ ] int ( { 123",
  "func ID ( ) int } func ID ( ID : bool , ID : { , ID : int ) : [ ] [ ( - 123 ) ] [ ] bool { }",
  "func : ( ) int } func ID ( ID : bool , ID ID { , ID : int ) : [ ] [ ( - 123 ) ] [ ] bool { }",
  "func : ( ) int } func ID ( ID : bool , ID ID { , ID ] int ) : [ ] [ ( - 123 ) : [ ] bool { }",
  "func ID ( ) : bool { var ID [ [ - false * ID ( ) [ ( ( ( ( ( - ID ) ) ) ) ) ] : ID ] / - ( - 123 ) ] int } func ID ( ) { }",
  "func ID ( ) : bool { var ID [ [ - false - ID ( ) [ ( ( ( ( ( - ID ) ) ) ) ) ] : ID ] / - ( * 123 ) ] int } func ID ( ) { }",
  "func ID ( ) : bool { var ID [ [ } false - ID ( ) [ ( ( ( ( ( - ID ) ) ) ) ) ] : ID ] / - ( * 123 ) ] int - func ID ( ) { }",
  "func { ( ) ID var ID : [ ] bool var ID : [ ] bool if ( ( - - false ) ) { } while ID { } } func ID ( ) { }",
  "func { ( ) ID var ID : [ ] bool var ID : [ ] bool if ( ( - - false ) ) { } while ID { } } func ID ( ) { }",
  "func { ( ) ID var ID : [ ] bool var ID : [ ] bool if ( ( - - false ) ) { } while ID { } } func ID ( ) { }",
  "func ID ( ID : bool ) { return ID : [ ] [ ] bool var }",
  "{ ID ( ID : bool ) func return ID : [ ] [ ] bool var }",
  "func ID ( ID : int ) { var ID : bool var ID : print int ( ( - ID ) ) }",
  "func ID ( ID : int ID { var ID : bool var ID : print int ( ( - ) ) ) }",
  "func ID ( ID : int ID { var ID : bool var ID : print int ( ( - ) ) ) }",
  "func ID ( ID ) [ ( ( - false - false * ID [ ( true ) ] [ - ( - 123 ) ] ) ) ] bool : { } func ID ( ) { }",
  "func ID ( ID ) [ ( ( - false - false * ID [ ( true ) ] [ - ( - 123 ) ] func ) ] bool : { } ) ID ( ) { }",
  "func ID ( ID ) [ ( ( - func - false * ID [ ( true ) ] [ - ( - 123 ) ] false ) ] bool : { } ) ID ( ) { }",
  "func ID ( ID : bool ) : [ ( - - ID [ - false } ( true ) ] ) ] int { /",
  "func ID ( ID : bool ) : [ ( - - ID [ - false } ( true ) ] ) / int { ]",
  "func ID ( ) : { ] bool { if - - ( 123 * ( true ) * - ID ) { } } func ID ( ) [ }",
  "func 123 ( ) : { ] bool { if - - ( ID * ( true ) * - ID ) { } } func ID ( ) [ }",
  "func 123 ( ) : { ] bool { if - - ( ID * ( true ) * - ID ) { [ } func ID ( ) } }",
  "func ID bool ) { var ID : [ - false * ID [ ID ( ) ] ] ( } func ID ( ) { }",
  "func ID bool ) { func ID : [ - false * ID [ ID ( ) ] ] ( } var ID ( ) { }",
  "func ID bool ) [ func ID : [ - false * ID { ID ( ) ] ] ( } var ID ( ) { }",
  "func ID ( ID : call ) { } func ID ( ) : int { int ID ( ) print ( - true ) }",
  "func ID ( ID : call ) { } true ID ( ) : int { int ID ( ) print ( - func ) }",
  "func ID ( ID : call ) { } true ID ( ) : int { int ID ( ) print ( - func ) }",
  "func } ( ) : [ ] int { var ID : bool var ID : int print ( - 123 - ( - - - - true ) ) ID",
  "func } ( ( : [ ] int { var ID : bool var ID : int print ( - 123 - ) - - - - true ) ) ID",
  "func ) ( ( : [ ] int { var ID : bool var ID : int print ( - 123 - ) - - - - true ) } ID",
  ": ID ( ID : bool , ID func [ - ( true * ( - true + ID ) ) ] [ ] bool , ID : bool ) { }",
  ": ID ( ID : bool { ID func [ - ( true * ( - true + ID ) ) ] [ ] bool , ID : bool ) , }",
  ": ID ( ID : bool { ID func [ - ( true ) ( - true + ID ) * ] [ ] bool , ID : bool ) , }",
  "func ID ( ) : bool { var - : bool var ID : bool while false / true + ID ID ( ) { } call ID ( ) }",
  "func ID ( ) : bool { var - : bool var ID : bool while false / true + ID ID call ) { } ( ID ( ) }",
  "func ID ( ) : bool { var - : bool var ID ) bool while false / true + ID ID call : { } ( ID ( ) }",
  "func ( ( ) { } func ID ID ) : [ ] bool { var ID : bool var ID : [ ID ] bool }",
  "func bool ( ) { } func ID ID ) : [ ] ( { var ID : bool var ID : [ ID ] bool }",
  "func bool ( ) { } ( ID ID ) : [ ] func { var ID : bool var ID : [ ID ] bool }",
  "func bool ( ID : bool ) : [ ] int { var ID : ID print ID ( false / true ) } func ID ( ) { }",
  "func bool ( ID : bool ) : [ ] int { var ID : ID print ID ( false / true ) } func ID ) ( { }",
  "func bool ( ID : bool ) : [ true int { var ID : ID print ID ( false / ] ) } func ID ) ( { }",
  "func ID ( ) false var ID : bool if false - - ( { * false / 123 ) { } }",
  "{ ID ( ) false var ID : bool if false - - ( func * false / 123 ) { } }",
  "{ ID ( ) false var ID : bool if false - - ( func * false / 123 ) { } }",
  "func ID ( ) bool var ID : [ - - - ID [ ID ( ( true ) ) ] ] { var ID : bool }",
  "func ID ( ) bool { ID : [ - - - ID [ ID ( ( true ) ) ] ] var var ID : bool }",
  "( ID ( ) : bool { print func - ( true * - ID [ true ] [ ( false ) ] ) ) }",
  "( ID ( ) : bool { print func - ( true * - ID [ true ] [ ( false ) ] ) ) }",
  "( ID ( ) : bool { print func - ( true * - ID [ true ] [ ( false } ] ) ) )",
  "func ID ( ) } int { var ID : [ ID [ - ID ( ) * ( true ) ] ] bool } func ID ( ) { :",
  "func ID ( ) } int { var ( : [ ID [ - ID ( ) * ( true ) ] ] bool } func ID ID ) { :",
  "func ID ( ) } ) { var ( : [ ID [ - ID ( int * ( true ) ] ] bool } func ID ID ) { :",
  "func ID bool ID : [ ] ( , ID : int , ID : int ) { print 123 / ID ( ) >= - true if 123 { } }",
  "func ID bool ID { [ ] ( , ID : int , ID : int ) : print 123 / ID ( ) >= - true if 123 { } }",
  "/ ID bool ID { [ ] ( , ID : int , ID : int ) : print 123 func ID ( ) >= - true if 123 { } }",
  "func ID ( ID : bool , ID : bool , ID : int ) : int ] var ID : [ { [ ] int var ID : int return ( ID ) } func ID ( ) { }",
  "func ID ( ID : : , ID : bool , ID : int ) bool int ] var ID : [ { [ ] int var ID : int return ( ID ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : int while - - 123 + ID } } print ( true ) { func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : int while - - 123 + ID } } print ( true ) { func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : int + - - 123 while ID } } print ( true ) { func ID ( ) { }",
  "func ID ( ID : bool , ID : int ] { if false * ID [ 123 and - - ( 123 ) and ID ) [ ID ] / false { } call ID ( ) }",
  "func ID ( ID : bool , ID : int ] { if false * ID [ 123 and - - ( 123 ) and ID ) [ ID ] / false { } call ID ( ) }",
  "func ID ( ID : bool and ID : int ] { if false * ID [ 123 and - - ( 123 ) , ID ) [ ID ] / false { } call ID ( ) }",
  "/ ID ( ID : [ 123 / - false func ( true * ID >= true ) ] [ ] bool ) { } func ID ( ) { }",
  "/ ID ( ID : [ 123 / - false func ( true * ID >= true ) ] [ ] bool ) { } func ID ( ) { }",
  "/ ID ( ID : [ 123 / - false func ( true * ID >= true ) bool [ ] ] ) { } func ID ( ) { }",
  "func { ( ) { var ID : int var ID : int if true / false and ( true ) { } if true { } } func ID ( ) ID }",
  "func { ( ) { var ID : ) var ID : int if true / false and ( true int { } if true { } } func ID ( ) ID }",
  "func ID ( ) { var ID : ) var ID : int if true / false and ( true int { } if true { } } func { ( ) ID }",
  "func ID ( ) { var ID : [ ] int var } : int call ID ( ID [ ID ] ) } func ID ( ) { ID",
  "func ID ( ) { var ID ID [ ] int var } : int call ID ( ID [ : ] ) } func ID ( ) { ID",
  "func ID ( ) { var ID ID [ ] int var ID : int call ID ( } [ : ] ) } func ID ( ) { ID",
  "func ID ( ) : var ID : int var ID { int print ( ( false + ( true ) - - ID ) ) { } } func ID ( ) { }",
  "func ID ( ) : var ID : int var ID { int print ( ( false + ( true ) - ) ID ) - { } } func ID ( ) { }",
  "func ID ( ) : var ID : int var ID { int print ( ( false + ( true ) - ) ID ) - { { } func ID ( ) } }",
  "func ID ( ID : int , ID ) bool , ID : [ ] int : : bool { }",
  "func ID ( ID : int , ID ) bool , ID : [ ] int : : bool { }",
  "func ID ( ID [ int , ID ) bool , ID : : ] int : : bool { }",
  "func ID ( ID ) [ ( ID ( ) <= ( ID ( ) ) ) ] [ ] bool ) { } func ID ( : { }",
  "func ID ( ID ) [ ( bool ( ) <= ( ID ( ) ) ) ] [ ] ID ) { } func ID ( : { }",
  "func ID ( ID ) [ ( bool ( ) <= ( ID ( ) ) ) ] [ ] ID ) { } func ID ( : { }",
  "func ID ( ID : [ ( ( - true and 123 * ( ID ) * ] ) ) ] [ 123 [ ] [ ] [ ] int ) { }",
  "func ID ( ID : [ ( ( - true and 123 * ( ID [ * ] ) ) ] [ 123 [ ] ) ] [ ] int ) { }",
  "func ID ( ID : [ ( ( - true 123 and * ( ID [ * ] ) ) ] [ 123 [ ] ) ] [ ] int ) { }",
  "func ) ( ) { var ID : int call ID ( ) call ID ( - false <= ID ( ) ID }",
  "func ) ( ) { var ID : int call false ( ) call ID ( - ID <= ID ( ) ID }",
  "func ) ( ) { var ID : int call false ( ) call ID ( - ID <= ID ( ) ID }",
  "func ID ( ID : [ ( ( int ( false ) ) ) ) ] ( ) { }",
  "func ID ( ID : [ ( ( int ( false ) ) ) ) ] ( { ) }",
  "func ID ) ID : [ ( ( int ( false ( ) ) ) ] ( { ) }",
  "func ID ( ID : int ) [ int { var ID : int var ID : bool { var ID : : ID ( ) ] int var ID : int } if - - - - - ID { } }",
  "func ID ( ID : int ) [ int { var ID : int var ID : bool ] var ID : : ID ( ) { int var ID : int } if - - - - - ID { } }",
  "func ID ( ID : int ) [ int { var ID : int var ID ID bool ] var ID : : ID ( ) { int var : : int } if - - - - - ID { } }",
  "} ID ( ) : int { } func ID ( ID : bool ) { var ID : int var ID : bool return ID func",
  "} return ( ) : int { } func ID ( ID : bool ) { var ID : int var ID : bool ID ID func",
  "} return ( ) : var { } func ID ( ID : bool ) { int ID : int var ID : bool ID ID func",
  "func ID ( } { return )",
  "func ID ( } return { )",
  "{ ID ( } return func )",
  "func ID ( ) : [ ] int { var ID : int var ID : [ ] [ ID } - ID ) ] bool (",
  "func ID ( ) : [ ] int { var ID : int var ] : [ ] [ ID } - ID ) ID bool (",
  "func ID ( ) : [ ] int { var ID : int var ] [ : ] [ ID } - ID ) ID bool (",
  "func ID ( ) : int { var ID : [ ] [ ID ( ID [ - ( ( - - - 123 ) ) ] ) ] [ ] bool var ] : [ ] [ ] [ ID int } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] bool ID ( ID [ - ( ( - - - 123 ) ) ] ) ] [ ] [ var ] : [ ] [ ] [ ID int } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] bool ID ( ) [ - ( ( - - - 123 ) ) ] ID ] [ ] [ var ] : [ ] [ ] [ ID int } func ID ( ) { }",
  "func ( ID ) : int { var ID : [ ] int return }",
  "func ( ID ) : int { var ID : return ] int [ }",
  "func ( ID ) [ int { var ID : return ] int : }",
  "func ID ( ) { while 123 - true + ID ( ) [ 123 + / ID ] [ - ID ] { } } func ID ( ) { }",
  "func ID ( ) { while 123 - true + ID ( ) [ 123 + / ID ] [ - ID ] { } } func ID ( ) { }",
  "func ID ( ) { while 123 - true + ID ( ) [ 123 + / ID ] ) - ID ] { } } func ID ( [ { }",
  "func ID ( ) : [ ] [ ID [ ( false - ( ( ID ) ) + false ) ] [ ID ] ] bool { } func ) ( ID { }",
  "( ID func ) : [ ] [ ID [ ( false - ( ( ID ) ) + false ) ] [ ID ] ] bool { } func ) ( ID { }",
  "( ID func ) : [ ] [ ID ] ( false - ( ( ID ) ) + false ) ] [ ID ] [ bool { } func ) ( ID { }",
  "func ID ) ) { var ID : [ ] int return } func ID ( ID : [ ID ( ( [ 123 ] ] [ ] [ ] [ ] int ) { }",
  "func ID ) ) { var ID : [ ] int return ( func ID } ID : [ ID ( ( [ 123 ] ] [ ] [ ] [ ] int ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ] int ) : bool { var ID ID [ - - ( true ) ] bool var : : int }",
  "func ID ( ID : int , ID : bool , ID : [ ] int ) var bool { : ID ID [ - - ( true ) ] bool var : : int }",
  "func ID [ ID : int , ID : bool , ID : [ ] int ) var bool { : ID ID ( - - ( true ) ] bool var : : int }",
  "func ID ( ) - [ ID ( ( - false or : true or ( ( false ) ) ) ) ] [ ] int { }",
  "func ID ( ) - [ ID ( ( - false or : true or ( ) false ( ) ) ) ] [ ] int { }",
  "func ID ( ID - [ ) ( ( - false or : true or ( ) false ( ) ) ) ] [ ] int { }",
  "func ID ( ID : bool , ID : [ ( - true / ID [ - - - ( ID int ] ) ] ) , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( - true ] ID [ - - - ( ID int ] ) ] ) , ID : [ / bool ) { } func ID ( ) { }",
  "func ID ( bool : bool , ID : [ ( - true ] ID [ - - - ( ID int ] ) ] ) , ID : [ / ID ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : [ - - ( ID [ ) ] [ 123 ] ) ] int ID { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : [ - - ( ID [ ) ] [ 123 ] ) ] int ID { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : [ - 123 ( ID [ ) ] [ - ] ) ] int ID { } func ID ( ) { }",
  "func ID ( ID : [ , bool ] ID : int , ID : int ) : int { var ID : bool }",
  "func ID ( ID : [ , int ] ID : int , ID : bool ) : int { var ID : bool }",
  "func ID ( ID : bool , int ] ID : int , ID : [ ) : int { var ID : bool }",
  "func ID var ) : bool { ( ID : [ true == ID * false / - ( ID ) ] bool } func ID ( ) { }",
  "func ID var ) : bool func ( ID : [ true == ID * false / - ( ID ) ] bool } { ID ( ) { }",
  "func ID var ) : bool func ( ID : ) true == ID * false / - ( ID ) ] bool } { ID ( [ { }",
  "func ID ( ) : ( { var ID : int var ID : [ bool ( 123 / false ) ) ] int } func ID ( ) { }",
  "func ID ( ) : ( { { ID : int var ID : [ bool ( 123 / false ) ) ] int } func ID ( ) var }",
  "func ID ( ) : ( { { ID : int var ID : [ bool ( 123 / false ) ) ] int } func ID ( ) var }",
  "func ID ( ID : int , ID : int ) : bool { if ID [ ID ( ID ) ] { } if { ( 123 ) ) ( } } func ID ( ) { }",
  "func { ( ID : int , ID : int ) : bool ID if ID [ ID ( ID ) ] { } if { ( 123 ) ) ( } } func ID ( ) { }",
  "func { ( ID : int , ID : int ) 123 bool ID if ID [ ID ( ID ) ] { } if { ( : ) ) ( } } func ID ( ) { }",
  "func ID - ) { var ID : int var ID : [ ] [ - false / true > ( - - ID ] int }",
  "true ID - ) { var ID : int var ID : [ ] [ - false / func > ( - - ID ] int }",
  "true ID var ) { - ID : int var ID : [ ] [ - false / func > ( - - ID ] int }",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : int - ID : int print ID [ 123 ] [ var ID ] while - ( false ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : int - ID : int print ID [ 123 ] [ var ID ] while - ( { ) false } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { var [ : int - ID : int print ID [ 123 ] ID var ID ] while - ( { ) false } } func ID ( ) { }",
  "func ID and ) { if - ( false / true ( ID [ ID ] ) { } }",
  "func ID and ) { if - } false / true ( ID [ ID ] ) { } (",
  "func ID and ) { if / } false - true ( ID [ ID ] ) { } (",
  "func ID ( ) { var ID : [ ] [ ( [ ID [ true ] [ ( ( ID ) ) ] ) ) ] ( ] [ ] bool }",
  "func ID ( ) { var ID : [ ] [ ( [ ID [ ) ] [ ( ( ID ) ) ] ) true ] ( ] [ ] bool }",
  "func ID ( ) { var ID : [ ] [ ( [ ID [ ) ] [ ( ( ID ) ) ] ) true ] ( ] [ ] bool }",
  "func ID ( ) : int { var ID : bool if ( false / ID >= { - - ID ) { } } func ID ( ) - }",
  "func ID ( ) : int { var ID : bool if ( false / ID } { - - ID ) { >= } func ID ( ) - }",
  "func ID { ) : int { var ID : bool if ( false / ID } { - - ID ) ( >= } func ID ( ) - }",
  "func ID ( ID : ( ] int , ID : [ ] [ ID ( [ ID ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : ( ] int , ID func [ ] [ ID ( [ ID ) ) ] bool ) { } : ID ( ) { }",
  "func ID ( ID : ) ] int , ID func [ ] [ ID ( [ ID ) ( ] bool ) { } : ID ( ) { }",
  "func ID return ) { var ID : bool ( ( 123 * - - - ( false ) ) }",
  "- ID return ) { var ID : bool ( ( 123 * - - func ( false ) ) }",
  "- ID return ) { var ID func bool ( ( 123 * - - : ( false ) ) }",
  "func ID ( ID : [ ] [ ] bool , ID : return ) { var ID : [ ] bool bool } func ID ( ID : [ ] bool ) { }",
  "ID func ( ID : [ ] [ ] bool , ID : return ) { var ID : [ ] bool bool } func ID ( ID : [ ] bool ) { }",
  "func ID ( : : bool { var ID : [ - ID ( ) [ - ( ( true ) ) ] [ - - ID ] ] int var ID ) bool }",
  "func ID ( : : bool { ( ID : [ - ID ( ) [ - var ( true ) ) ] [ - - ID ] ] int var ID ) bool }",
  "func ID ( : : bool { ( ID : [ - ID ( - [ - var ( true ) ) ] [ - ) ID ] ] int var ID ) bool }",
  "func ID ( ID : int , ID ID bool ) { var ID : [ ] int ID [ 123 / ( ( false ) ) ] = ( 123 ) if ( 123 ) { } } func : ( ) { }",
  "func ID ( ID : int , ID ID bool ] { var ID : [ ] int ID [ 123 / ( ( false ) ) ) = ( 123 ) if ( 123 ) { } } func : ( ) { }",
  "func ID ( ID : int , ID ID bool ] { var ID : [ ] int ID [ 123 / ( ( false ) ) ) = ( 123 ) } ( 123 ) { } if func : ( ) { }",
  "func ID ( ) } [ 123 * ID [ true + - false / ID ] * ID ] [ ] [ ] int { :",
  "func ID ( ) } [ : * ID [ true + - false / ID ] * ID ] [ ] [ ] int { 123",
  "func ID ( ) } [ : + ID [ true * - false / ID ] * ID ] [ ] [ ] int { 123",
  "func ID ( ID : bool , ID : bool ) : bool { var ID : bool return } func ID ( ) return int { : }",
  "func ID : ID ( bool , ID : bool ) : bool { var ID : bool return } func ID ( ) return int { : }",
  "func ID : ID ( bool , ID : bool ) : bool } var ID : bool return { func ID ( ) return int { : }",
  "func ID ( ) { var - : int var ID : int if ID [ ID ID [ true ] ] [ - ( true ) ] { } print - ( ID ) } func ID ( ) { }",
  "func { ( ) { var - : int var ID : int if ID [ ID ID [ true ] ] [ - ( true ) ] { } print - ( ID ) } func ID ( ) ID }",
  "func { ( ) { var - : int var ID : int } ID [ ID ID [ true ] ] [ - ( true ) ] { } print - ( ID ) if func ID ( ) ID }",
  "func 123 ( ID : int ) { var ID : int ID ( false / 123 - 123 * ID / ( ID ) ) = false }",
  "func ) ( ID : int ) { var ID : int ID ( false / 123 - 123 * ID / ( ID ) 123 = false }",
  "( ) ( ID : int ) { var ID : int ID func false / 123 - 123 * ID / ( ID ) 123 = false }",
  "func ID ( ID : int , ID : [ ID ) - ID + - ( - true ) + 123 ) ] int ) { } func ID ( ( { }",
  "func ID ( ID : int , ID : [ ID ) - ID + - ( - true ) + 123 ( ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID ) - ID + - ) - true ( + 123 ( ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int ID ID : [ - true - ID ( var ) ] bool } func ID ( ) { }",
  "func ID ( ) : ] { var ID : int ID ID : [ - true - ID ( var ) int bool } func ID ( ) { }",
  "func ID ( ) : ] { var ID : int ID ID : [ - true - ID ( var ) int bool } func ID ( ) { }",
  "func { ( ) : int { var ID : [ ( true * ( ID [ true ] ) ) ] [ ] int } func ID ( ) ID }",
  "func { ( ID : int { var ID : [ ( true * ( ID [ true ] ) ) ] [ ] int } func ID ( ) ) }",
  "func ID ( ID : bool , , : int ID ID : int ) : int { var ID : bool var ID : int call ID ( - - ID ) print 123 } func ID ( ) { }",
  "func ID ( ID : bool , , : int ID ID : int ) : int { var call : bool var ID : int ID ID ( - - ID ) print 123 } func ID ( ) { }",
  "func { ( ID : bool , ID : bool , ID : int ) : [ - ( ( ( true ) ) ) ] [ ] bool ID } func ID ( ) { }",
  "func { ( ID : bool , ID : bool , ID true int ) : [ - ( ( ( : ) ) ) ] [ ] bool ID } func ID ( ) { }",
  "func { ( ID : bool , ID : bool , ID true int ) : [ - ( ( ( } ) ) ) ] [ ] bool ID } func ID ( ) { :",
  "func ID ( ) { var ID : int var ID : int } func ID ( ) : int { var ID : 123 call ID ( bool ) call ID ( ) }",
  "func ID ( ) { int ID : int var ID : int } func ID ( ) : var { var ID : 123 call ID ( bool ) call ID ( ) }",
  "func ID ( ) { int ID : int var ID : int } func ID ( ) : var { var ID : 123 call ID call bool ) ( ID ( ) }",
  "func ID ( ) { var ID : int call ID ( ID ( ) ) ID * ID / ( ( 123 ) [ ] ) ID = ID } func ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( ID ( ) ) ID * ID / ( ) 123 ) [ ] ) ID = ID } func ID ( ( { }",
  "func ID ( ) { var ID : int call ID ( ID ( ) ) ID * ID / ( 123 ) ) [ ] ) ID = ID } func ID ( ( { }",
  "func ID ( ) : bool { return 123 ( ID < ( - * 123 ) ) }",
  "< ID ( ) : bool { return 123 ( ID func ( - * 123 ) ) }",
  "< ID ) ) : bool { return 123 ( ID func ( - * 123 ( ) }",
  "func ID ( ID : int , ID : bool ) : int { [ ID : [ ( - false * 123 / ID ) ] var ] bool }",
  "func ID ( ID : int , ID : bool ) : [ { int ID : [ ( - false * 123 / ID ) ] var ] bool }",
  "func ID : ID : int , ID ( bool ) : [ { int ID : [ ( - false * 123 / ID ) ] var ] bool }",
  "func ID ( ID : int ) ( int { var ID : int print ID [ ( - false ) ] } func ID : ) { }",
  "func ID ( ID : int ) ( int { var ID : int print ID [ } - false ) ] ( func ID : ) { }",
  "func ID ( ID : int ) ( { { var ID : int print ID [ } - false ) ] ( func ID : ) int }",
  "func call ( ) { var ID : int var ID : int ID ID ( ) ID = - false / ( 123 ) } func ID ( ) { }",
  "func call ( ) { ID var : int var ID : int ID ID ( ) ID = - false / ( 123 ) } func ID ( ) { }",
  "func call ( ) { ID var : int var ID : int ) ID ( ID ID = - false / ( 123 ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : [ - ID ( ) [ - - ID ] [ ( 123 ) ] } bool { ]",
  "func ID ( ID : bool , ID : bool , ID : int ) : [ - ID ( ) [ - ] ID ] [ ( 123 ) - } bool { ]",
  "func ID ( ID : bool , ID : bool , ID : int ) : ID - ID ( ) [ - ] [ ] [ ( 123 ) - } bool { ]",
  "func ID ( ID ( bool , ID : [ ID ( - ID : ) [ ( 123 ) ] ) ] bool , ID : int ) { } func ID ( ) { }",
  "ID ID ( ID ( bool , ID : [ func ( - ID : ) [ ( 123 ) ] ) ] bool , ID : int ) { } func ID ( ) { }",
  "bool ID ( ID ( ID , ID : [ func ( - ID : ) [ ( 123 ) ] ) ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ) : false ] int { return [ * true / - ID and ID and ID }",
  "func ID ( ) int [ ] : { return false * true / - ID and ID and ID }",
  "func ID ( ) { var ID : int if - false / 123 * ID [ - ( ( - - ID ) ) } [ ID ] { ] } func ID ( ) { }",
  "func ID ( ) { var ID : bool if ID ( ) / ( ID [ - - } ] ) { ID call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool if ] ( ) / ( ID [ - - } ID ) { ID call ID ( ) } func ID ( ) { }",
  "func ID ( func { var ID : bool if ] ( ) / ( ID [ - - } ID ) { ID call ID ( ) } ) ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ] * ID [ ( ID ) ] [ true false / - false ] int ) { }",
  "func ID ( ID : bool , ID : int } ID : [ ] * ID [ ( ID ) ] [ true false / - false ] int ) { ,",
  "func ID ( ) : bool { var ID : int var ID : ( if - - ( ( ( int true ) ) ) ) { } }",
  "func ID ( ) : bool { var ID : int var ID : ( if ) - ( ( ( int true ) - ) ) { } }",
  "func ID ( ) : bool { var ID : int var ID : ( if ) - ) ( ( int true ( - ) ) { } }",
  "func ID ( ) { var ID : ) ] int if ( ID ( ) [ - false ] [ { } }",
  "func ID ( ) { var ID : ) ] int ) ( ID ( if [ - false ] [ { } }",
  "func ID ( ) { var ID : ) ] int ) ( ID ( if false - [ ] [ { } }",
  "func ID ( ID : [ ] int ) : [ ID int { var ] : [ ID [ ( ( 123 ) ) ] ] bool var ID : bool }",
  "func ID ( ID : [ ] int ) : [ ID int { ( ] : [ ID [ ( var 123 ) ) ] ] bool var ID : bool }",
  "func ID ( ID : [ ] int ) : [ ID int { ( ] : [ ID [ ( var 123 ) ) ] ] bool var ID : bool }",
  "func ID ( ) : int { var ID : [ 123 - ( ) ( ID - ID - false ) ] [ ] [ ] [ ] bool }",
  "func ID ( ) ID int { var ID : [ 123 - ( ) ( ID - : - false ) ] [ ] [ ] [ ] bool }",
  "func ID ( ) ID int { var [ : ID 123 - ( ) ( ID - : - false ) ] [ ] [ ] [ ] bool }",
  "func ID ( ID : int , ID : int ) : bool ( print 123 / ID { 123 ) }",
  "ID func ( ID : int , ID : int ) : bool ( print 123 / ID { 123 ) }",
  "ID func ( ID : int , ID : int ) : bool print ( 123 / ID { 123 ) }",
  "func ID ( ID : [ ] int , ID : int , ID : bool ) { var ID : bool call ID ( ) return } ( ID func ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : bool ) { var ID : bool call ID ( ) return } ( ID func ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : bool ) { var ID : bool call ID ( ) return } ( ID func ) { }",
  "func ID ( ) : bool { var ID : int while ID ( - [ false ] [ ID ] ) { } }",
  "func ID ( ) : } { var ID : int while ID ( - [ false ] [ ID ] ) { } bool",
  "func ID ( ) : { { var ID : int while ID ( - [ false ] [ ID ] ) } } bool",
  "func ID ( ID : bool , ID : [ ] [ 123 * true / - 123 - - - false ] { ] [ ] int ) [ }",
  "func ID ( ID : bool , ID : [ ] [ 123 [ true / - 123 - - - false ] { ] * ] int ) [ }",
  "func ID ( ID : bool [ ID : [ ] , 123 [ true / - 123 - - - false ] { ] * ] int ) [ }",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) : bool { return } func ID ( ID : bool , ID : [ ] [ ] bool , ID : bool } { )",
  "func ID ( ID : int , ID : int , ID func [ ] bool ) : bool { return } : ID ( ID : bool , ID : [ ] [ ] bool , ID : bool } { )",
  "func ID ( ID : int , ID : int , ID func [ ] bool ) : } { return bool : ID ( ID : bool , ID : [ ] [ ] bool , ID : bool } { )",
  "func ID ( ID : bool , ID : int ) : func { var ID : [ ] int return true + - - ID } bool ID ( ) { }",
  "func ID ( ID : bool , ID : int ID : func { var ID : [ ] int return true + - - ) } bool ID ( ) { }",
  "func ID ( ID : bool , ID : ) ID : func { var ID : [ ] int return true + - - int } bool ID ( ) { }",
  "func ] ( ID : bool ) { var ID : int var ID : int if ID ( ) [ ( - 123 ) ID { } if ( ID ) { } } func ID ( ) { }",
  "func ] ( ID : bool ) { var ID { int var ID : int if ID ( ) [ ( - 123 ) ID { } if ( ID ) { } } func ID ( ) : }",
  "func ] ( ID : bool ) { var ID ID int var ID : int if ID ( ) [ ( - 123 ) ID { } if ( { ) { } } func ID ( ) : }",
  "func ID int ID : int , ID : int , ID : int ) { var ID : int var ID : bool { var ID : int var ID : ( ID = ID if - 123 { } } } func ID ( ) { }",
  "func ID int ID : int , ID : int , ID : int ) { var ID : int var ID : bool { var : : int var ID ID ( ID = ID if - 123 { } } } func ID ( ) { }",
  "func ID int ID : int , ID : int , ID : func ) { var ID : int var ID : bool { var : : int var ID ID ( ID = ID if - 123 { } } } int ID ( ) { }",
  "func : ( ) { var ID : int var ID ID bool ID ( ) [ - - ID [ ID ] [ true ] ] [ - ID ] = true }",
  "func : ID ) { var ID : int var ID ( bool ID ( ) [ - - ID [ ID ] [ true ] ] [ - ID ] = true }",
  "func : ID ) { var ID : int var ID ( bool ID ( ) [ - - ID [ ID ] [ true ] ] [ - ID ] = true }",
  "func ID ( ) : int { while ( 123 and ( ID ( ) ) } { ) }",
  "func ID ( ) : int 123 while ( { and ( ID ( ) ) } { ) }",
  "func ID ( ) : int 123 while ( { and ( ) ( ) ) } { ID }",
  "func { ( ) : int { while ID * - ( - ( ID ) ) * ( ID ) { } } func ID ( ) ID }",
  "func { } ) : int { while ID * - ( - ( ID ) ) * ( ID ) { } } func ID ( ) ID (",
  "func } } ) : int { while ID * - ( - ( ID ) ) * ( ID ) { { } func ID ( ) ID (",
  "func ID ( ) : { 123 * ( ( ID ( ) [ 123 ] ) ) / true ] bool [ } func ID ( ) { }",
  "func ID ( ) : { 123 * ( ( ID ( } [ 123 ] ) ) / true ] bool [ } func ID ( ) { )",
  "func ID ( ) : { 123 ] ( ( ID ( } [ 123 ] ) ) / true * bool [ } func ID ( ) { )",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : bool print true - false } ( ID ) } func ID ( ) { *",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : bool print true - false } ( ID ) ( func ID } ) { *",
  "func ID ( ID : int , true : bool , ID : int ) { var ID : bool print ID - false } ( ID ) ( func ID } ) { *",
  "func ID ( ID : int ) { var ID : bool var ID : int { var ID : [ - ( false ) ] [ ] bool var } : int } } func ID ( ) { ID",
  "func ID ( ID : int ) { var ID : bool var ID : int { var ID : [ - ( ( ) ] [ ] bool var } : int } } func ID false ) { ID",
  "func ID ( ID : int ) { var ID : bool var ID : int ] var ID : [ - ( ( ) { [ ] bool var } : int } } func ID false ) { ID",
  "func ID ( ) : int { var ID : ] var ID : [ ID ( ) [ false - - ID + ID ] int int }",
  "func ID ( int : int { var ID : ] var ID : [ ID ( ) [ false - - ID + ID ] int ) }",
  "func ID ( int : int { var ID : ] var ID : [ ID ( ) [ false - - ID ID + ] int ) }",
  "func ID : ID ( [ ] [ ] bool , ID : [ ( - true / 123 / ( - ( ID ) ) ) ] int ) { }",
  "func ID : ID ( [ ] [ ] bool , ID : [ ( - true 123 / / ( - ( ID ) ) ) ] int ) { }",
  "( ID : ID ( [ ] [ ] bool , ID : [ func - true 123 / / ( - ( ID ) ) ) ] int ) { }",
  "func ID ( ID : int ) { var ID : [ ] [ 123 - ] * ID - ( ( ( true ) ) ) 123 int } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ] [ 123 - ] * ID - ( ( ( true ) ) ) 123 int } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : bool { var ID var int { : ID : bool print false / - false / - ( true ) } }",
  "func ID ( ID : int , ID : int ) : bool { var bool var int { : ID : ID print false / - false / - ( true ) } }",
  ") ID ( ID : int , ID : int ) : bool { var bool var int { : ID : ID print false / - false / - ( true func } }",
  "func ID ( ID : int ) : [ false + ( - false or false or true ) + ID ] [ ] [ ] [ ] [ ] int func } { ID ( ) { }",
  "func ID ( ID : int ) false [ : + ( - false or false or true ) + ID ] [ ] [ ] [ ] [ ] int func } { ID ( ) { }",
  "func ID ( ID : int ) false [ : + [ - false or false or true ) + ID ] [ ] ( ] [ ] [ ] int func } { ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ : bool ) { var ID ] [ - ID ( - true ) ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ : bool ) { var ID ] [ - ID ( - true ) ] bool } } ID ( ) { func",
  "func ID ( ID : bool , ID : [ ] [ : bool ) { var ID ] [ - ID ( - true ) ] bool } } ID ( ) { func",
  "func ID ( ID ( bool , ID : [ : - ( false * false and ( ( - ID ) ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID { ID ( bool , ID : [ : - ( false * false and ( ( - ID ) ) ) ) ] bool ) ( } func ID ( ) { }",
  "func ID { ID ( bool , ID } [ : - ( false * false and ( ( - ID ) ) ) ) ] bool ) ( : func ID ( ) { }",
  "func ID ( ) { print ID ( ID / ) true + ( - ID - ) { } }",
  "func ID ( ) { print ID ( ID - ) true + ( - ID / ) { } }",
  "func ID ( ) { print ID true ID - ) ( + ( - ID / ) { } }",
  "{ ID ( ) : [ ] int func while ( ID [ - ID ] [ true ] ) { } if true { } } func ID ( ) { }",
  "{ ID ( ) : [ ] int func while ( ID [ - ID ] [ true } ) { ] if true { } } func ID ( ) { }",
  "{ [ ( ) : ID ] int func while ( ID [ - ID ] [ true } ) { ] if true { } } func ID ( ) { }",
  "func ID ( ID { bool , ID : [ false + true > 123 * false / 123 and 123 and - - ID ] [ ] int , ID : [ ] [ ] [ ] int ) : }",
  "func ID ( ID { bool , ID : [ false + true > 123 * false / 123 and 123 and int - ID ] [ ] - , ID : [ ] [ ] [ ] int ) : }",
  "func ID ( ID { bool , ID : [ false + true > 123 - false / 123 and 123 and int - ID ] [ ] * , ID : [ ] [ ] [ ] int ) : }",
  "func ID ( ) { call ID ( ) ID func ID ( ) { var ID : int var ID : [ - ( } ) ] bool }",
  "func : ( ) { call ID ( ) ID func ID ( ) { var ID : int var ID ID [ - ( } ) ] bool }",
  "func : ID ) { call ( ( ) ID func ID ( ) { var ID : int var ID ID [ - ( } ) ] bool }",
  "func ID ( ID : } false * ( - false / ID - ID ( ) - - ID ) ] bool ) { [ func ID ( ) { }",
  "func ID ( ID : } false * ( - false - ID - ID ( ) - / ID ) ] bool ) { [ func ID ( ) { }",
  "func ID ( ID : } false ID ( - false - ID - * ( ) - / ID ) ] bool ) { [ func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : } ID [ ID [ ( 123 ) ] ] [ - ID ] = ID } func ID ( ) { bool",
  "func ID ( ID : int , ID : bool ) : bool { var ID : } ID [ ID [ ( 123 ) ] ] [ - ID ] = ID } func ID ( ) { bool",
  "func ID ( ID [ int , ID : bool ) : bool { var ID : } ID [ ID [ ( 123 ) ] ] : - ID ] = ID } func ID ( ) { bool",
  "func ID ( ID ) int , ID : [ false - ( - ID ( : [ ( ( ( ID ) ) ) ] ) + false ] [ ] [ ] bool ) { }",
  "func ID ( ID ) int , ID ] [ false - ( - ID ( : [ ( ( ( ID ) ) ) ] ) + false ] [ ] [ : bool ) { }",
  "- ID ( ID ) int , ID ] [ false func ( - ID ( : [ ( ( ( ID ) ) ) ] ) + false ] [ ] [ : bool ) { }",
  "func ) ( ) { print ID ( - 123 + - - 123 * ID - - ( ( ( - 123 ID ) ) ) } func ID ( ) { }",
  "func ) ( ) - print ID ( - 123 + - - 123 * ID - { ( ( ( - 123 ID ) ) ) } func ID ( ) { }",
  "func ) ( ) - print ID ( - 123 + - - 123 * ID - { } ( ( - 123 ID ) ) ) } func ID ( ) { (",
  "} ID ( ) : bool { func func ID ( ) { }",
  "} : ( ) ID bool { func func ID ( ) { }",
  ": } ( ) ID bool { func func ID ( ) { }",
  "func ID ( ID : bool ) { var ( : int var ID : int } func ID ID ) { var ID : bool if 123 { } ID = ID }",
  "func ID ( ID : bool ) { var ( : var int ID : int } func ID ID ) { var ID : bool if 123 { } ID = ID }",
  "func ID ( ID : bool ) { ID ( : var int ID : int } func ID ID ) { var ID : bool if 123 { } var = ID }",
  "func ID ( ID : [ ] [ ID [ ( false / 123 - 123 + + ID ) ] [ ( ID ) ] ] int ) { }",
  "func ID ( ID : [ ] [ ID [ ( false - 123 / 123 + + ID ) ] [ ( ID ) ] ] int ) { }",
  "func ID ( ID : [ ] [ ID [ ( false - 123 / 123 + + ID ) ] [ ( ID ) ] ] int ) { }",
  "func ID ) ) : bool { print ID [ - ID ( ID ( ) ( ] [ ID ] ID = ( false ) }",
  "func ID ) ) : bool { print ID [ - ID ( ID ( ) ( ] [ ID ] ID = ( false ) }",
  "func ID ( ) : bool { print ID [ - ID ( ID ) ) ( ] [ ID ] ID = ( false ) }",
  "func ID ( ) : ID { var ID : [ - - - bool ( 123 / 123 ) ] int }",
  "func ID ( ) } ID { var ID : [ - - - bool ( 123 / 123 ) ] int :",
  "func ID ( ) } ID { var ID : [ ] - - bool ( 123 / 123 ) - int :",
  "func ID / ) : int { var ID : bool return ( false * ( true * ( - true ) / ID ) ( - ID ) }",
  "func ID / ) : int { var ID : bool true ( false * ( true * ( - return ) / ID ) ( - ID ) }",
  "func ID / ) : int { var ID : bool true ( false * ( true * ) - return ) / ID ) ( - ID ( }",
  "func ID ( ) { while true <= ( true ) - } * ( ( - ID ) ) { } false func ID ( ) { }",
  "func ID ( ) { } true <= ( true ) - while * ( ( - ID ) ) { } false func ID ( ) { }",
  "func ID ( ) { } true <= ( true ) - while * ( ( - ID ( ) { } false func ID ) ) { }",
  "func ID ( ID : [ - [ ID [ - - true + ID - false ] [ ID ] ] ] [ ] bool ) { }",
  "func ID ( ID : [ - [ ID [ - bool true + ID - false ] [ ID ] ] ] [ ] - ) { }",
  "func ID ( ) : bool ( print ( - ( ( ID ) ) ) call ID { ) } func ID ( ) { }",
  "func ID ( ) : bool ( print ( - ( ( ID ) ) ) call ID { ) } func ID ( ) { }",
  "func ID ( ) : bool ( print ( - ( ( ID ) ) ) call ID { ) ID func } ( ) { }",
  "func ID ( ) : int { * ID ( false while ( ID [ ID ] ) * false ) { } }",
  "func ID ) ) : int { * ID ( false while ( ID [ ID ] ( * false ) { } }",
  "func ID ) ) : int { ] ID ( false while ( ID [ ID * ( * false ) { } }",
  "func ID ( ID : [ ] [ ] [ ] int , ID : [ ] bool ) { ID [ ( ID ) ] [ ( ( = ) ) ] false ID } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ ] int , ID : [ ] bool ) { ID [ ( ID ) ] [ ( ( = ) ) false ] ID } func ID ( ) { }",
  "func ID ( ID : int ) [ bool { var ID : [ ID ( ) : ID [ - ID ] ] [ ( ID ) ] ] [ ] [ ] bool }",
  "func ID ( ID : int ID [ bool { var ID : [ ID ( ) : ID [ - ) ] ] [ ( ID ) ] ] [ ] [ ] bool }",
  "func ID ( ID : int ID [ bool { var ID : [ ID ( ) : ID [ - ) ] ] [ ( ID ) ] ] [ ] [ ] bool }",
  "func ID ( ] : [ false + - true - ( ( - true ) ) ] [ ID int ) { }",
  "func + ( ] : [ false ID - true - ( ( - true ) ) ] [ ID int ) { }",
  "func + ( ] : [ false ID - true [ ( ( - true ) ) ] - ID int ) { }",
  "func ID ( ID : bool , ID : [ ID * ID [ 123 * / [ ( 123 ) ] [ - - true ] ID - ( ID ) ] [ ID ] * ( 123 ) ] bool ) { }",
  "func ID ( ID : bool , ID 123 [ ID * ID [ 123 * / [ ( 123 ) ] [ - - true ] ID - ( ID ) ] [ ID ] * ( : ) ] bool ) { }",
  "func ID ( ID : bool , ID - [ ID * ID [ 123 * / [ ( 123 ) ] [ - 123 true ] ID - ( ID ) ] [ ID ] * ( : ) ] bool ) { }",
  "func ID ( ID : bool ) : int { var ID : bool var ( : bool return ID ( ) [ ID ] } func ID ID ) { }",
  "func ID ID ID : bool ) : int { var ID : bool var ( : bool return ID ( ) [ ID ] } func ID ( ) { }",
  "func : ID ID ID bool ) : int { var ID : bool var ( : bool return ID ( ) [ ID ] } func ID ( ) { }",
  "func ID ( ) { var ID : bool { } if ( ( ID [ true ] } ) { ) } func ID ( ) { }",
  "func ( ( ) { var ID : bool { } if ( ( ID [ true ] } ) { ) } func ID ID ) { }",
  "func ( ( ) { var ID : bool { } if ( ( ID [ true ] } ) { ) ) func ID ID } { }",
  "func ID ( ) : : { var ID : bool var ID bool bool }",
  "func ID : ) ( : { var ID : bool var ID bool bool }",
  "func ID : ) ( : { var ID : bool var ID bool bool }",
  "func ID ( ) { ID = ( 123 ID ID [ - 123 ] [ 123 ] * / ) if ( - 123 ) { } } func ID ( ) { }",
  "func ID ( ) { ID = ( 123 ID ID [ - 123 ] [ 123 ) * / ] if ( - 123 ) { } } func ID ( ) { }",
  ") ID ( ) { ID = ( 123 ID ID [ - 123 ] [ 123 ) * / ] if ( - 123 func { } } func ID ( ) { }",
  "func ID ( ID : [ , ID : int , ID : [ ] int - ID [ ID [ - - - - ( - ( ID ) ) ] ] ] bool ) { }",
  "func ID ( ID : [ , ID : int , ID : [ ] int - ID [ ID [ - - - - ( - ( ID ) ) ] ] ] bool ) { }",
  ", ID ( ID : [ , ID : int func ID : [ ] int - ID [ ID [ - - - - ( - ( ID ) ) ] ] ] bool ) { }",
  "func ID ( ) : bool { var ID : int var } : int { var ID : [ ] [ ] bool { var ID : bool var ID : bool } } ID",
  "func ID ( ) : bool { var ID : int var } : int { var ID : [ ] [ ] bool var { ID : bool var ID : bool } } ID",
  "func ID ( ID : [ false ) ( ( 123 + ID ( ) ) / * - ID ] bool ) { }",
  "func ID ( ID : [ false ) ( ( 123 + ID ( ) ) / * - ID ] bool ) { }",
  "func ID ( ID : [ false ) ( ( 123 + ID ( ) ) / * - ID ] bool ) { }",
  "func ID ( ) { var var : bool var ID : int { { var ID : int ID ID : [ ] bool } } call ID ( ) }",
  "func ID ( ) { var ) : bool var ID : int { { var ID : int ID ID : [ ] bool } } call ID ( var }",
  "func ID { ) : [ - false / false + ( ID + 123 * - false ) + - ID ] bool { } func ID ( ) ( }",
  "func ID { ) : [ - false / false + ( ) + 123 * - false ) + - ID ] bool { } func ID ( ID ( }",
  "func ID { ) : [ - false / false + ( ) + 123 * - false ) + - ID } bool { } func ID ( ID ( ]",
  "func ID ( ) { var ID : [ ID / ( / false - - - 123 / true ) ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID / ( / - - - false 123 / true ) ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID / ( / / - - false 123 - true ) ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : int { false - - false / true * ( ID ) { } if ( - while ) { } }",
  "func ID ( ID : [ ] int ) : int { false - - false / true * ( ( ) { } if ID - while ) { } }",
  "func ID ( ID : [ ] int ) : int { false - - false / true - ( ( ) { } if ID * while ) { } }",
  "func ID ( ID , int , ID : int : ID : int ) : [ ] bool { } func ID ( ) { var ID : int if ID { } }",
  "func ID ( ID , { , ID : int : ID : int ) : [ ] bool int } func ID ( ) { var ID : int if ID { } }",
  "func ID ( ID , { , var : int : ID : int ) : [ ] bool int } func ID ( ) { ID ID : int if ID { } }",
  "func ID ( ID : int , ID : bool ) { ) ID : bool return - true * ( 123 ) } func ID ( var { }",
  "func ID ( ID : int , ID : bool ) { ) ID : bool return - true * ( 123 ) { func ID ( var } }",
  "func ID ( var { var ID : int ) ID : [ ] int } func ID ( ) { var ID : [ ( 123 ) ] int var ID : int }",
  "func ID ( var { var ID : int ) ID : [ var int } func ID ( ) { ] ID : [ ( 123 ) ] int var ID : int }",
  "func ID ( var { var ID : int ) ID : [ var int } func ID ( ) { : ID : [ ( 123 ) ] int var ID ] int }",
  "func : ( ) ID [ ] [ ] [ ] bool { var ID : int call ID ( ) while - ( - - - ID ) { } }",
  "func : ( ) ID [ ] [ ] [ ] bool { var ID : ) call ID ( int while - ( - - - ID ) { } }",
  "func : ( ) ID [ ] [ ] [ ] bool { ID ID : ) call ID ( int while - ( - - - var ) { } }",
  "func ID ( ID : bool ) { var ) : [ ] int var ID : int ID ( ) = - false * - false } func ID ( ID { }",
  "func ID ( ID : bool ) { var ) : [ ] int var : ID int ID ( ) = - false * - false } func ID ( ID { }",
  "func ID ( ID : bool ) { var ) : [ ] int int : ID var ID ( ) = - false * - false } func ID ( ID { }",
  "func ID ( ID : [ - ( 123 + ( true * - ( - ( false ) ) / false ) ] ID ) + [ ] int ) { }",
  "func ID ( ID : [ - ( 123 + ( true * - ( - ( false ) ) / false ) ] ID ) + [ ] int ) { }",
  "func ID ( ) { var ID : int var ID : bool while false * - ( - ID [ - false ] ) / 123 ) } call ID ( ) } func ID ( { { }",
  "func ID ( ) { var ID : int var ID : bool while false * - ( - ID [ - false ] ) / 123 ) } call ID ( ) } { ID ( func { }",
  "func ID ( ) { var ID : int var ID : bool while false * - ( - 123 [ - false ] ) / ID ) } call ID ( ) } { ID ( func { }",
  "func ID ( ID : [ ( true - true * ) ( ) and 123 and ID ) ] int { } func ID ( ) { }",
  "ID ID ( ID : [ ( true - true * ) ( ) and 123 and ID ) ] int { } func func ( ) { }",
  "ID ID ( ID : [ ( ( - true * ) true ) and 123 and ID ) ] int { } func func ( ) { }",
  "func ID ( ID : bool , ID : int ) } var ID : bool var ID : bool return ID [ ID ] { func ID ( ) { }",
  "func ID ( ID : : , ID : int ) } var ID : bool var ID bool bool return ID [ ID ] { func ID ( ) { }",
  "func ID ( ID : : , ID : int ) } var ID bool bool var ID bool : return ID [ ID ] { func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ( ] ( false * 123 / - ID ) ) ] [ ] [ ID [ ] [ ] int ) { } func ID ( ) { }",
  "( ID ( ID : bool , ID : [ ] [ ( ] ( false * 123 / - ID ) ) ] [ ] [ ID [ ] [ ] int ) { } func ID func ) { }",
  ") ID ( ID : bool , ID : [ ] [ ( ] ( false * 123 / - ID ) ( ] [ ] [ ID [ ] [ ] int ) { } func ID func ) { }",
  "func ID ( ID : int , ID : [ - ID / ( ID ( ( ( ID ) ) ) ) * ( false ) ] [ ] int : ID , int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - func / ( ID ( ( ( ID ) ) ) ) * ( false ) ] [ ] int : ID , int ) { } ID ID ( ) { }",
  "func ID ( ID : int , ID : [ - func / ( ID } ( ( ID ) ) ) ) * ( false ) ] [ ] int : ID , int ) { ( ID ID ( ) { }",
  "func ID ( ) : [ - ( - true * - true / false and ( ) ) and ID ID ] [ ] bool { } func ID ( ) { }",
  "func func ( ) : [ - ( - true * - true / false and ( ) ) and ID ID ] [ ] bool { } ID ID ( ) { }",
  "func func ( ) : [ - ( - true * - true false / and ( ) ) and ID ID ] [ ] bool { } ID ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ID [ ) / ( ( ( 123 ) 123 ) * ( ID ) ] ] int }",
  "func ID ( ) : bool { var ID : [ ID [ ) / ( ( ( 123 ) 123 ) } ( ID ) ] ] int *",
  "func ID ( ) : bool { ID ID : [ var [ ) / ( ( ( 123 ) 123 ) } ( ID ) ] ] int *",
  "func ID ( ) { var * : int return ( ( true / ( ( - ID ) ) ID - - false ) ) } func ID ( ) { }",
  "func ID ( ) { var * : int ( ( ( true / ( ( - ID ) ) ID - - false ) ) } func ID return ) { }",
  "func ID ( ) { var * : int ( ( ( true / ( - - ID ) ) ID - ( false ) ) } func ID return ) { }",
  "func ID ( ) : bool { var ID : bool return - * + ID ( ) * false 123 ID }",
  "func * ( ) : bool { var ID : bool return - * + ID ( ) ID false 123 ID }",
  "func * ( ) : bool { var ID : bool return ( * + ID - ) ID false 123 ID }",
  "func ID ( { ) var ID : bool var ID : bool print - ( true * ID ( ID ) / false ) }",
  "func ID true { ) var ID : bool var ID : bool print - ( ( * ID ( ID ) / false ) }",
  "func ID true { ) var ID false bool var ID : bool print - ( ( * ID ( ID ) / : ) }",
  "func ID ] ID : [ false * ID [ ID * ID ( 123 ) ] / ( - true ) ] [ ( [ ] int ) { } func ID ( ) { }",
  "func ID ] ID ( [ false * ID [ ID * ID : 123 ) ] / ( - true ) ] [ ( [ ] int ) { } func ID ( ) { }",
  "func ID ] ID ( [ false * ID [ ID * ID : 123 ) ] / ( - true ) ] ] ( [ [ int ) { } func ID ( ) { }",
  "func ID ( ID : [ - and ( true / ID ( false ID ) * 123 ) and - ID ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ - { ( true / ID ( false ID ) * 123 ) and - ID ] bool ) { } func ID ( ) and }",
  "func ID ( ID : [ - { ) true / ID ( false ID ) * 123 ( and - ID ] bool ) { } func ID ( ) and }",
  "func ID ( ID : int ) { var ID : int while - - ( false ] ID [ - ( ( - ( ID ) ) ) ] [ ID * ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int while - - ( false ] ID [ - ( ( - ( ID ID ) ) ] [ ID * ) { } call ) ( ) } func ID ( ) { }",
  "{ ID ( ID : int ) { var ID : int while - - ( false ] ID [ - ( ( - ( ID ID ) ) ] [ ID * ) func } call ) ( ) } func ID ( ) { }",
  "func ID ( ( { var ID : bool var ID : bool call ID ) ) { while - true - ID { } } } func ID ( ) { }",
  "func ID ( ( { var ID : bool var ID : { call ID ) ) { while - true - ID bool } } } func ID ( ) { }",
  "func ID ( ( { var ID : bool var ID : { call ID ) ) { while - true func ID bool } } } - ID ( ) { }",
  "func ID ( ) : bool func return ID [ ( - true * ID ) ] } { ID ( ) { }",
  "func ID ( ) : bool func return ID [ ( - ID * ID ) ] } { true ( ) { }",
  "func ID ( ) : bool func return ID [ ( - ID * ID ) ] } { ( true ) { }",
  "func ID ( ) { print ID [ ( } * ID ( ( true ) ) ) ] if 123 { } } func ID ( ) { 123",
  "func ID ( ) { print ID [ ( } * ID ( ( true ) ) ) ] if 123 { } } ( ID func ) { 123",
  "func ID ( ID : int , ID : bool ) : int { var ID : - var ID : int { { var ID : int if - bool ( ID ) { } if false { } } } ID = ( ID ) }",
  "func ID ( ID : int , ID : bool ) : int { var ID : - var ID : int { { bool ID : int if - var ( ID ) { } if false { } } } ID = ( ID ) }",
  "func ID ( ID : int , ID : bool ) : int { var ID : - var ID : int { { bool ID : int if - var ( ID ) { } if false { } } } ID = ( ID } )",
  "func ID ( ) { } func ID * ) : [ ( 123 ( ( - ID ) ) ] int { }",
  "func ID ( ) { } func ID ] ) : [ ( 123 ( ( - ID ) ) * int { }",
  "func ID ( ) { } func ID ] ) int [ ( 123 ( ( - ID ) ) * : { }",
  "func ID ( ID : [ ( ID false * true * - ID ( false ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ( ID false * true * - ID ( false ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ( ID false } true * - ID ( false ) ) ] bool ) { * func ID ( ) { }",
  "func [ ( ID : bool , ID : bool , ID : int ) : int { var ID : ID ] int return false + ID }",
  "func [ ( ID : bool , , : bool ID ID : int ) : int { var ID : ID ] int return false + ID }",
  "func [ ( ID : bool , return : bool ID ID : int ) : int { var ID : ID ] int , false + ID }",
  "func ID ( ID : bool , ID : bool , ID : [ ] [ ID } ) [ ( ID ) ] ] [ ] bool ) { ( func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] [ ID } ) [ ( ID ) ] ] [ ] bool ) { ( func ID ( ) { }",
  "func ID ( ID ID bool , ID : bool , ID : [ ] [ ID } ) [ ( ID ) ] ] [ ] bool ) { ( func : ( ) { }",
  "} ID ( ) : bool { while true / - ID ( - false - - true ) { } if - ID { func } func ID ( ) { }",
  "} ID ( ) : bool { while ID / - true ( - false - - true ) { } if - ID { func } func ID ( ) { }",
  "} ID ( ) : bool { while ID / - true - - false - - true ) { } if ( ID { func } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) var bool { : ID : int print ID + - true != ID if false { } }",
  "func ID ( ID : int , ID : : ) var bool { : ID int int print ID + - true != ID if false { } }",
  "func ID ( ID : int , ID : : print var bool { : ID int int ) ID + - true != ID if false { } }",
  "func ID ( ID : [ ( ID ( ID * ID bool 123 ] [ true ] ) ) ] [ ] [ ) { }",
  "func ID ( ID : [ ( ID ( ID * ID bool 123 ] [ true ] ) ) ] [ ] [ ) { }",
  "func ID ( ID : bool ID ID : int ) { var , : int } func ID ( ) { var ID : bool var ID : int return ( - ID ) }",
  "func ID ( ID : bool ID ID : int ) return var , : int } func ID ( ) { var ID : bool var ID : int { ( - ID ) }",
  "func , ( ID : bool ID ID : int ) return var ID : int } func ID ( ) { var ID : bool var ID : int { ( - ID ) }",
  "func ID ( ID : bool , ID : int , ID : int } : bool { ID [ ID ( - - ID ) ] [ 123 ] = ( ID ) print ( ID ) } func ID ( ) { )",
  "func ID ( ID : bool , ID : int , ID : int } : bool { ( [ ID ( - - ID ) ] [ 123 ] = ( ID ) print ID ID ) } func ID ( ) { )",
  "func ID ( ID : bool ) ID : int , ID : int } : bool { ( [ ID ( - - ID ) ] [ 123 ] = ( ID ) print ID ID , } func ID ( ) { )",
  "func ID ( ) { ID ( true * ID ( ) [ ( ID ) ] [ ( ( ( ( - ( ID ) ) ) ) ) ] * ID { = - true ID = 123 } func ID ( ) ) }",
  "func ID ( ) { ID ( true * ID ( ) [ ( ID ) ] [ ( ( ( ( - ( ID ) ) ) ) = ] * ID { ) - true ID = 123 } func ID ( ) ) }",
  "func ID ( ) { ID ( true * ID ( ) [ ( ID ) ] [ ( ( ( ( - ( ID ) ) ) ) = ] * ID { ) - true ID = 123 } func ID ( ) ) }",
  "func ID ( ) / ID [ - ID * ( - - true { - ID ) ] = - ( ID ) } func ID ( ) { }",
  "func ID ( ) / ID [ - ID * ( - - true { ) ID - ] = - ( ID ) } func ID ( ) { }",
  "func ID ( ) / ID [ - - * ( - - true { ) ID ID ] = - ( ID ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : ] [ int while 123 * - ( - ( - true ) ) { } }",
  "func ID ( ) ( bool { var ID : ] [ int while 123 * - : - ( - true ) ) { } }",
  "func ID ( ) ( bool { ) ID : ] [ int while 123 * - : - ( - true ) var { } }",
  "func ID ( ID : [ ] [ true / - ( 123 * false * ( ID ] ) ) [ ] int ) { }",
  "func ID ( ID : [ ] [ true / - [ 123 * false * ( ID ] ) ) ( ] int ) { }",
  ") ID ( ID : [ ] [ true / - [ 123 * false * ( ID ] func ) ( ] int ) { }",
  "func ID ( ID : bool ) : int ( var ID : bool var ID : bool } func ID { ) : bool { }",
  "func ( ( ID : bool ) : int ID var ID : bool var ID : bool } func ID { ) : bool { }",
  "func ( ( ID : bool ) : int ID var ID : bool var ID : bool } func ) { ID : bool { }",
  "func ID ( { : int , ID : int ) : int { var ID : int var ID : bool call ID ( ) ID [ - false ] [ true ] = true } func ID ( ) ID }",
  ": ID ( { : int , ID : int ) : int { var ID func int var ID : bool call ID ( ) ID [ - false ] [ true ] = true } func ID ( ) ID }",
  ": [ ( { : int , ID : int ) : int { var ID func int var ID : bool call ID ( ) ID [ - false ] ID true ] = true } func ID ( ) ID }",
  "func ID ( ID : var ) : bool { int ID : bool }",
  "func ID ( ID : var ) : ID { int bool : bool }",
  "func ID ( ID : var ) : ID { int bool : bool }",
  "func ID ( ) : bool { { var ID : bool var ID : bool { var ID : int var ID : [ - ID ] bool } = } } ID { ( ID ) } func ID ( ) { }",
  "func ID ( ) : bool { { var ID : bool var ID : bool { var ID : int var ID : func - ID ] bool } = } } ID { ( ID ) } [ ID ( ) { }",
  "func ID ( ) : bool { { var ID : bool var ID : bool { : ID : int var ID var func - ID ] bool } = } } ID { ( ID ) } [ ID ( ) { }",
  "func ID ( ) : int { var ID : [ ( - - - ( - - - ID ) ) ID int } func ] ( ) { }",
  "func ID ( ) : int { var ID : [ ( - - - ( - - - ID ) ) ID int } func ] ( ) { }",
  "func - ( ) : int { var ID : [ ( - - ID ( - - - ID ) ) ID int } func ] ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID ) [ - - ( ID ( ( ( ID ) : ) ) ] [ ] bool }",
  "func ID ( ) { var ID : [ ] bool var ID ) [ - - ( ID ( ( ( ID ) ] ) ) : [ ] bool }",
  "func ID ( ) { var ID : [ ] bool var ID ) [ - - ( ID ( ( ( ID ) ] ) ) : [ ] bool }",
  "func ID ( - : int ) : int { var ID : [ ] [ ] bool var ID : [ ( - ID false ) ] int }",
  "func ID ( - : int ) : { int var ID : [ ] [ ] bool var ID : [ ( - ID false ) ] int }",
  "- ID ( func : int ) : { int var ID : [ ] [ ] bool var ID : [ ( - ID false ) ] int }",
  "func ID : ID ( int , ID : [ ] bool ) { var ID : [ ID + - true * 123 ] int } func ID ( ) { }",
  "func ID : ] ( int , ID : [ ] bool ) { var ID : [ ID + - true * 123 ID int } func ID ( ) { }",
  "func ID : ] ( int , ID : [ ) bool ) { var ID : [ ID + - true * 123 ID int } func ID ( ] { }",
  "func ID ( ID : [ 123 / - ( true != ] ( ) [ - - true ] [ - - ( ( - ID ) ) ] ) ] [ ] [ ] [ ID int ) { }",
  "func ID ( ID : [ ( - ID [ - - - - false * ( ( 123 ) ) ] ) ] int ( { } func ID ) ) { }",
  "func [ ( ID : [ ( - ID ID - - - - false * ( ( 123 ) ) ] ) ] int ( { } func ID ) ) { }",
  "func [ ( ID : [ ( - ID ID - - - - false * ( ( 123 ) ) ] ) ] int ( { } func { ) ) ID }",
  "func ID ( ) : ( ] [ ID + - ( true - ( - ( true ) ) ) ] int { } func ID [ ) { }",
  "func ID ( ) : ( ] [ ID + [ ( true - ( - ( true ) ) ) ] int { } func ID - ) { }",
  "func ID ID ) : ( ] [ ( + [ ( true - ( - ( true ) ) ) ] int { } func ID - ) { }",
  "func ID ( ) { var ID : int var ID : [ ] func true * false and - ID and ID ] [ ] int } [ ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] ] true * false and - ID and ID ] [ func int } [ ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] false true * ] and - ID and ID ] [ func int } [ ID ( ) { }",
  "func ID { ) ( var ID : [ ( - - ( - true or false ) ) ] int var ID : [ ] bool } func ID ( ) { }",
  "func : { ) ( var ID ID [ ( - - ( - true or false ) ) ] int var ID : [ ] bool } func ID ( ) { }",
  "func ( { ) ( var ID ID [ ( - - ( - true or false ) ) ] int var ID : [ ] bool } func ID : ) { }",
  "func ID ( ) { var ID : int } ID ( ) ID ( false - - ID ( ) ) = true call",
  "func ID ( ) { var ID : int } ID ( ID ) ( false - - ID ( ) ) = true call",
  "func ID ( ) { ) ID : int } ID ( ID var ( false - - ID ( ) ) = true call",
  "func ID ( ) : [ false / ( - - - ID 123 [ ] [ ID ] ) ] bool { }",
  "func ID ( ) : [ false / ( - - - ID 123 [ ] } ID ] ) ] bool { [",
  "func ID ( ) : [ false / ( - - - ID 123 [ ] } ID ] ) ] bool { [",
  "func ID ( ID : bool , ID : [ ] int , ID } bool ) : [ ] bool { return } func ID ( ID : [ ID ] bool ) { :",
  "func ID ( ID : bool , ID bool [ ] int , ID } : ) : [ ] bool { return } func ID ( ID : [ ID ] bool ) { :",
  "func ID ( ID : bool , ID bool [ ] : , ID } : ) : [ ] bool { return } func ID ( ID : [ ID ] bool ) { int",
  "func ID ( ) { var ID : bool } func ID ( ID : int , ID [ int ) : : - ID ( ) ] bool { }",
  "func ID ( ) { var ID : func } bool ID ( ID : int , ID [ int ) : : - ID ( ) ] bool { }",
  "func ID ( ID : bool , ID : bool ) : [ ID ( false * false / ( ( - - } ) ) ) ] bool { false func ID ( ) { }",
  "func ID ( false : bool , ID : bool ) : [ ID ( false * ID / ( ( - - } ) ) ) ] bool { false func ID ( ) { }",
  "func ID ( false : bool , ID : bool ) : [ ID ( ) * ID / ( ( - - } ) false ) ] bool { false func ID ( ) { }",
  "func ID ( ID ) int , ID : [ - ID [ ID [ false * false * - ID ] [ ( - ( ID ) : ] ] ] [ ] [ ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ID ] int , ID : [ - ID [ ID [ false * false * - ID ) [ ( - ( ID ) : ] ] ] [ ] [ ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ID ] int , ID : [ - ID [ - [ false * false * ID ID ) [ ( - ( ID ) : ] ] ] [ ] [ ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID { int var ID : bool while ( ( - false ) ) { } : } }",
  "bool ID ( ) : func { var ID { int var ID : bool while ( ( - false ) ) { } : } }",
  "bool ID ( ) : func { var ID { int var while : bool ID ( ( - false ) ) { } : } }",
  "func ID ( false : int { print 123 and ID [ ) + ID + - 123 ] [ ID ] and false ID = - ID }",
  "func ID ( false : int - print 123 and ID [ ) + ID + - 123 ] [ ID ] and false ID = { ID }",
  "func ID ( false : int - print 123 and ID [ ) + ID + - } ] [ ID ] and false ID = { ID 123",
  "func ID ( ID : [ ] bool , ID : [ int [ - true * - ( true ) ] [ 123 ] ] ID ) { }",
  "func ID ( ID : [ ] bool , true : [ int [ - true * - ( ID ) ] [ 123 ] ] ID ) { }",
  "func ID ( ID : [ ] bool , true : [ int [ - true * - ( ID ) ] [ 123 ] ] ID ) { }",
  "func ID ( ID : bool ) : ( ] [ ] int { var ID : [ ( [ ( - - false ) ) ) ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ID : bool ) : ( ] [ ] int { var ID : [ ( [ ( - - false } ) ) ] [ ] int var ID : bool ) func ID ( ) { }",
  "func ID ( ID : bool ) : ( ] [ ] int { var ID : [ ( [ ( - - false } ) ) ] [ ] int ) ID : bool ) func ID ( var { }",
  "func ID ( ] : bool { var ID : [ ) [ - 123 / ( ID ( ( ID ) ) ) ] [ ] bool var ID : bool }",
  "func ID ( ] : bool { var ID : [ ) [ - 123 / ( ID ( ( ID ) ) ) ] [ ] bool var ID : bool }",
  "func ID var ] : bool { var ID : [ ) [ - 123 / ( ID ( ( ID ) ) ) ] [ ] bool ( ID : bool }",
  "func ID ( ) { var ID : bool var ID : bool print true - 123 / false and - true and ( false ) if ( - * ( ( true ) ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool print true - 123 / false and - true and ( false ) if ( - * ( ( true ) ) ( { } } func ID ) ) { }",
  "func ID ( ) { var ID : bool var ID : bool print true - 123 / false and } true and ( false ) if ( - * ( ( true ) ) ( { } - func ID ) ) { }",
  "func ID ( ) { var ID : int call ID ( ) ID ( ID [ ( - false ) ] } ( 123 ) ] ) = ID [",
  "func ID ( ) ID var ID : int call { ( ) ID ( ID [ ( - false ) ] } ( 123 ) ] ) = ID [",
  "func ID ( ) ID var ID : [ call { ( ) ID ( ID int ( - false ) ] } ( 123 ) ] ) = ID [",
  "> ID ( ID : int ) { var ID : [ ] [ false * 123 / true func - ( true ) ] bool }",
  "> { ( ID : int ) ID var ID : [ ] [ false * 123 / true func - ( true ) ] bool }",
  "> { ( ID : int ) ID var / : [ ] [ false * 123 ID true func - ( true ) ] bool }",
  "int ID ( ID : bool , ID : [ ] func , ID : [ - ID ( ) [ - ( - ( ( 123 ) ) ) ] [ ID ] ] [ ] bool ) { } func ID ( ) { }",
  "int ID ( ID : bool , ID : [ ] ID , ID : [ - func ( ) [ - ( - ( ( 123 ) ) ) ] [ ID ] ] [ ] bool ) { } func ID ( ) { }",
  "int ID ( ID : ( , ID : [ ] ID , ID : [ - func ( ) [ - ( - bool ( 123 ) ) ) ] [ ID ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ false * ( - - ) ( - ID ( ) ) ) ] bool - { } func ID ( ) { }",
  "func ID ( ID : [ false * } - - ) ( - ID ( ) ) ) ] bool - { } func ID ( ) { (",
  "func ID ( ID : [ false * } - - ) ( - ID ( ) ) ) ] bool - { } func ID ( ) { (",
  "func ID ( ID / int , ID : bool ) : bool { while ID ( true / true : ID ) { } print ID } func ID ( ) { }",
  "func ID ( ID / int , ID : bool ) : bool { while ) ( true / true : ID ) { } print ID } func ID ( ID { }",
  "func ID ( ID : bool , ID : [ ] [ ] int , ID : int ) { print - false / true / ( true ID } func ) ( ) { }",
  "func ID ( ID : bool ID , : [ ] [ ] int , ID : int ) { print - false / true / ( true ID } func ) ( ) { }",
  "func ID ( ID : bool ID , : [ ] [ ] int , ID : int ) { print - false / true / ( true ID } func ) ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) : [ ( ID ( false int ) ] ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool func ID : int ) : [ ( ID ( false int ) ] ) { } , ID ( ) { }",
  "func ID ( ID int : , ID : bool func ID : int ) : [ ( ID ( false int ) ] ) { } , ID ( ) { }",
  "func ID ( ) : bool return { ( ( 123 / false and ID and 123 ) ) }",
  "func ID ( ) : bool return { ( ( 123 / false and ID and 123 ) ) }",
  "func ID ID ) : bool return { ( ( 123 / false and ( and 123 ) ) }",
  "func ID ( ID : [ - 123 * ID ( ID [ ( ID ) ] ) ) ( ( ID ) * ] bool ) { }",
  "func ID ( ID : [ - 123 * ID ( ID [ ( ID ) ] ) ) * ( ID ) ( ] bool ) { }",
  "func ID ( ID : [ - 123 * ID ( ID ] ( ID ) [ ) ) * ( ID ) ( ] bool ) { }",
  "func ID ( ) { return ID [ ( - - ID ( { [ ID ] [ - ID ] ) ] [ ID ] } func ID ( ) ) }",
  "func ID ( ) { [ ID [ ( - - ID ( { [ ID ] [ - ID ] ) ] return ID ] } func ID ( ) ) }",
  "func ID ( ) : bool { var ID : bool if ( func - ( 123 ) ) { } print 123 } 123 ID ( ) { }",
  "func ID ( ) : bool { var ID : bool if ( ) - ( 123 ) func { } print 123 } 123 ID ( ) { }",
  "func ID ( ) : bool { var ID : bool if ( ) - ( 123 ) func { } print 123 } 123 } ( ) { ID",
  "func ID ( ) { var ID : [ ] [ ] [ false / ( - ( 123 ) ) * - - ID ] bool var int : [ ] ID } func ID ( ) { }",
  "/ ID ( ) { var ID : [ ] [ ] [ false func ( - ( 123 ) ) * - - ID ] bool var int : [ ] ID } func ID ( ) { }",
  "/ ID ( ) { [ ID : [ ] [ ] var false func ( - ( 123 ) ) * - - ID ] bool var int : [ ] ID } func ID ( ) { }",
  "func ID ( ) : [ - - ( ID [ ( ( - 123 ) ) ] [ ID ] ID ] bool ) { } func ID ( ) { }",
  "func ID ( ( : [ - - ) ID [ ( ( - 123 ) ) ] [ ID ] ID ] bool ) { } func ID ( ) { }",
  "func ID ( ( : [ - - ) ID [ ( ( - 123 ) ) ] [ ID ] ID ] bool ) } } func ID ( ) { {",
  "] ID ( ID : int , ID : bool , ID : bool ) : [ ( ID [ ( ( ID ) ) func ) ] bool { }",
  "] ID ( ID : int , ID : bool , ID : bool ) : [ ( ID [ ( ( ID ) ) func ) ] bool { }",
  "] ID ( ID : int , ID : bool , ID : bool ) : [ ( ID [ ( ( ID ) ) func ) ] bool { }",
  ") ID ( ID : [ ] bool , ID : [ ID [ - ( ( - false ) func ] ] int ) { }",
  ") func ( ID : [ ] bool , ID : [ ID [ - ( ( - false ) ID ] ] int ) { }",
  "func ID ( ) : int { { { var ID : ( ] [ ] int var ID : int } if ( - - ID ) { } } print ( [ ID ) ) }",
  "func ID ( ) : int { { { var ID : ( ] [ ] int ID ID : int } if ( - - var ) { } } print ( [ ID ) ) }",
  "func ID ( ) : int { { { var ID : ( ] [ ] int ID - : int } if ( ID - var ) { } } print ( [ ID ) ) }",
  "func ID ( ) : int { var ID : bool { } ID : bool var ID : int } return false + true - ID var func ID ( ) { }",
  "func ID ( ) : { { var ID : bool int } ID : bool var ID : int } return false + true - ID var func ID ( ) { }",
  "func ID ( ) : { { var ID : bool int } + : bool var ID : int } return false ID true - ID var func ID ( ) { }",
  ") ID ( ID : bool , ID : bool func : bool { return }",
  ") ID ( ID : : , ID bool bool func : bool { return }",
  "func ID ( ) : int { var ID : int if ID ( ) / 123 * - ( ( } ) ) { } ID = ( - - ( ID ) ) ID",
  "func ID ( ) : int { var ID : int if ID ( ) / 123 * - ( ( } ) ) { } ID = ( - ) ( ID - ) ID",
  "/ ID ( ) : int { var ID : int if ID ( ) func 123 * - ( ( } ) ) { } ID = ( - ) ( ID - ) ID",
  "func ID ( ID : [ - false - ID [ ( - and ID and true ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ - false - ID [ ( - and ID and true ) ] ] int { { } func ID ( ) ) }",
  "func ID ( ID : [ - false - ID ) ( - and ID and true ) ] ] int { { } func ID ( ) [ }",
  "func ID ( ID : int , ID : [ ] [ - ID : ( 123 / ID ) ] [ ( ID ) ] ] [ ] int , ID [ bool ) { }",
  "func ID ( ID : int , ID : [ ] [ - ID : ( 123 / ID ) ] [ ( ID ) ] ] [ ] int , ID [ bool ) { }",
  "func ID ( ID : int , ID : [ ] [ - ID : ( 123 / ID ) ] [ ( ID ) ] ] [ ] , int ID [ bool ) { }",
  "func + ( ID : [ - - 123 - ( - ( ID + ID ) ) ID ( ID ) ] [ ] bool ) { } func ID ( ) { }",
  "func + 123 ID : [ - - ( - ( - ( ID + ID ) ) ID ( ID ) ] [ ] bool ) { } func ID ( ) { }",
  "func + 123 ID : [ - - ( - ( - ( ID + ID ) ID ID ( ID ) ] [ ] bool ) { } func ) ( ) { }",
  "func ID ( ID : int , ID : bool ) { - - ( ( return ( ID ) ) ) }",
  "func ID ) ID : int , ID : bool ( { - - ( ( return ( ID ) ) ) }",
  "func ID ) ID - int , ID : bool ( { : - ( ( return ( ID ) ) ) }",
  "func ID ( ID : bool , ID : bool ) : bool { var ID : [ - - - - false and false ] int ID var : int }",
  "func [ ( ID : bool , ID : bool ) : bool { var ID : ID - - - - false and false ] int ID var : int }",
  "func [ ( ID - bool , ID : bool ) : bool { var ID : ID : - - - false and false ] int ID var : int }",
  "func ID ( ID : int ) { var ID : bool var ID : int ID [ ( [ false ] ] [ - - ID - - - ID ) ] = - ID call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool var ID : ID ID [ ( [ false ] ] [ - - ID - - - int ) ] = - ID call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : bool var ID : ID ID [ ( [ false ] ] - - - ID - - - int ) ] = [ ID call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ ] int : : [ ] [ ] bool { var ID ) int }",
  "func ID ( ID : [ ] int : : [ ] [ } bool { var ID ) int ]",
  "func ID } ID : [ ] int : : [ ] [ ( bool { var ID ) int ]",
  "func ID ( ) { print - ID * 123 and - - ( ID 123 ) ) call ( ( ) }",
  "func ID ( ) { print - ID ID 123 and - - ( * 123 ) ) call ( ( ) }",
  "func ID ( ) { print - ID ID 123 and - - ( * 123 ) ( call ( ) ) }",
  "func ) ( ID : bool ) { var ID : [ - ( true / ( - - ( 123 ) ID ) ] bool } func ID ( ) { }",
  "func ) ( ID : bool ) { var ID : [ - { true / ( - - ( 123 ) ID ) ] bool } func ID ( ) ( }",
  "func ) ( ID : bool ) ID var ID : [ - { true / ( - - ( 123 ) ID ) ] bool } func { ( ) ( }",
  "func ID ( ) : int { var ID : [ ] int var ( : int if ID ( ( ID ) ) { } ID = ID } func ID ID ) { }",
  "func ID ( ) : int { var : ID [ ] int var ( : int if ID ( ( ID ) ) { } ID = ID } func ID ID ) { }",
  "func ID ( ) : int { var : ID [ ] int var ( : int if ( ( ID ID ) ) { } ID = ID } func ID ID ) { }",
  "func ID ( ID : int , ID : int ) { var ID : { { var ID : int if - - ( ( ( - - - ID ) ) ) bool } } }",
  "func ID ( ID : int , ID : int ) { var ID : { - var ID : int if - - ( ( ( { - - ID ) ) ) bool } } }",
  "func ID ( ID : int ( ID : int ) { var ID : { - var ID : int if - - ( ( , { - - ID ) ) ) bool } } }",
  "func ID ) ID : [ ID [ ( true - 123 < - ID ) ] [ ( ID ) ] ] [ ] [ ] int ) { } func ID ( ( { }",
  "int ID ) ID : [ ID [ ( true - 123 < - ID ) ] [ ( ID ) ] ] [ ] [ ] func ) { } func ID ( ( { }",
  "int ID ) ID : [ ID [ ( true - ] < - ID ) ] [ ( ID ) ] ] [ 123 [ ] func ) { } func ID ( ( { }",
  "func ID ( ID : int ) { call ID ( - ID * ( ID [ ( true ) ] ) * ( ID - ( ( ( ) ) ) ) ) } func ID ( ) { }",
  "func ID ( ID : ( ) { call ID ( - ID * ( ID [ ( true ) ] ) * ( ID - ( ( ( ) ) ) ) ) } func ID int ) { }",
  "func ID ( ID : ( ) { call ID ( - ID * ( ID [ ( true ) ] func * ( ID - ( ( ( ) ) ) ) ) } ) ID int ) { }",
  "func ID ( ) : int { var ID : [ ( bool return ID / ID ] 123 ) / - - ID }",
  ": ID ( ) func int { var ID : [ ( bool return ID / ID ] 123 ) / - - ID }",
  ": ID ( ) func int { var ID : [ ( bool return ID / ID ] 123 ) / - - ID }",
  "func ID ( ) : int { return } func ID ( ID : [ ] int bool ID : , ) : bool { var ID : int var ID : [ ] bool }",
  "func ID ( ) : int { return } func ID int ID : [ ] int bool ID : , ) : bool { var ID : ( var ID : [ ] bool }",
  "func ID ( ) : int { return } func ID int ID : [ ] [ bool ID : , ) : bool { var ID : ( var ID : int ] bool }",
  "func ID ( ) : [ ( - ID ( ID - ( 123 bool ) ) ] ) { }",
  "func ID ( ) : [ ( - ID ( ID - ( ) bool ) ) ] 123 { }",
  "func ID ( ) : [ ( - ID ( ID - ) ( bool ) ) ] 123 { }",
  "func ID ( ID { var ID : [ ( true * ID [ ) ( ) ] [ ID ] / - ID ) ] int var ID : int }",
  "func ID ( ID { var ID : [ ( true * ID [ ) ( ) ] [ ID ] / - ID ) ] int var ID int : }",
  "func ID ( int { var ID : [ ( true * ID [ ) ( ) ] [ ID ] / - ID ) ] ID var ID int : }",
  "func ID ( ID : bool ID ID : [ ] bool ) { var ID : int var , : int print 123 / - - ID / - ( - 123 ) }",
  "func ID ( ID : bool ID ID : [ ID bool ) { var ] : int var , : int print 123 / - - ID / - ( - 123 ) }",
  "func ID ( ID : bool ID ID : [ ID bool ) { var ] int int var , : : print 123 / - - ID / - ( - 123 ) }",
  "func ID ( ID : int , ID : int , ID : [ ] int ) : [ ] int { var ID : bool ID var : int { var ID : int } if - - - true { } } func ID ( ) { }",
  ") ID ( ID : int , ID : int , ID : [ ] int func : [ ] int { var ID : bool ID var : int { var ID : int } if - - - true { } } func ID ( ) { }",
  ") ID ( ID : int , var : int , ID : [ ] int func : [ ] int { var ID : bool ID var : int { ID ID : int } if - - - true { } } func ID ( ) { }",
  "func ID ( ) { var ID : ( var ID : [ ID / ( ( ( true ) ) ) / ID ] bool } func ID int ) { }",
  "func ID ( ) { var ID : ( var ID ) [ ID / ( ( ( true ) : ) / ID ] bool } func ID int ) { }",
  "func ID ( ) { var ID : ( var ID ) ) ID / ( ( ( true ) : [ / ID ] bool } func ID int ) { }",
  "func ID ( call : bool , ID : int ) { var ID : int var ID : int ID ID ( - - - - - 123 ) }",
  "func : ( call : bool , ID ID int ) { var ID : int var ID : int ID ID ( - - - - - 123 ) }",
  "func : ( call : bool , ID ID int ) { var ID : : var ID int int ID ID ( - - - - - 123 ) }",
  "func ID ( ID : int , ID : int , ID : false ) { if 123 * int - ID ( ) { } call ID ( ) }",
  "func ID ( ID : int , ID : int , int : false ) { if 123 * ID - ID ( ) { } call ID ( ) }",
  "func ID ( ID : int , ID : int , int : false ID { if 123 * ID - ) ( ) { } call ID ( ) }",
  "func ID ( : : bool { var ID ) int return } func ID ( ) { var ID : int var ID : [ ] bool ID = ID }",
  "func ID ( : : bool { ] ID ) int return } func ID ( ) { var ID : int var ID : [ var bool ID = ID }",
  ": ID ( : : bool { ] ID ) int return } func ID ( ) { var ID func int var ID : [ var bool ID = ID }",
  "func int ( ID : bool , ID : ID , ID : int ) : bool { var ID : int print true / - - true } func ID ( ) { }",
  ": int ( ID func bool , ID : ID , ID : int ) : bool { var ID : int print true / - - true } func ID ( ) { }",
  ": int ( ID func bool , ID : ID , ID : int ) : bool { var ID - int print true / - : true } func ID ( ) { }",
  "func ID ( ) { var ID : int while false / ( - false / - ( ) true ) / ID { } } func ID ( ) { }",
  "func ID ( ) ID var ID : int while false / ( - false / - ( ) true ) / { { } } func ID ( ) { }",
  "func ID ID ) ID var ( : int while false / ( - false / - ( ) true ) / { { } } func ID ( ) { }",
  "func ) ( ID : bool ID { call ID ( ) return }",
  "func ) ( ID : bool ID { call ID ( ) return }",
  "func bool ( ID : ) ID { call ID ( ) return }",
  "return ID ( ) { var ID : int func }",
  "return ID ( ) { : ID var int func }",
  "return ID ( ) { ID : var int func }",
  "func ID ( ID : [ ] int , ID : int ) : [ ] int { var ID : [ - - true * ] true ) / ID ( bool var ID : [ ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int ) : [ ] int { var var : [ - - true * ] true ) / ID ( bool ID ID : [ ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : [ ] int , ] : int ) : [ ID int { var var : [ - - true * ] true ) / ID ( bool ID ID : [ ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) : [ ( ID - ID [ 123 * 123 ] - ID ) ] [ ] [ ] int { } func ( ID ) { }",
  "func ID ( ) : [ ( ID - ID [ 123 * 123 ] - ID ) ] [ ] [ ] int { } func ( ID ) { }",
  "func - ( ) : [ ( ID ID ID [ 123 * 123 ] - ID ) ] [ ] [ ] int { } func ( ID ) { }",
  "func ID ( ) : int { ( ID : bool var ID : int call ID var ) if 123 * ( ( false ) ) { } }",
  "func ID ( ) ) int { ( ID : bool var ID : int call ID var : if 123 * ( ( false ) ) { } }",
  "func ID ( ) ) int { ( ID if bool var ID : int call ID var : : 123 * ( ( false ) ) { } }",
  "func ID ( ) { var : ID bool while ( - false / - ID ( true ) ) { } } func ID ( ) { }",
  "func ID ( ) { var : ID bool while ( - false / - ID ( true ID ) { } } func ) ( ) { }",
  "func ID ( ) { var : ID bool while ( - false / ID - ( true ID ) { } } func ) ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : [ ] [ ] [ ID - ID ( ) - ( - - ( ID ) ) ] bool , bool : ID ) { }",
  "func ID ( ID ID [ ] [ ] bool , : : [ ] [ ] [ ID - ID ( ) - ( - - ( ID ) ) ] bool , bool : ID ) { }",
  "func ID ( ID ID [ ] ] ] bool , : : [ ] [ [ [ ID - ID ( ) - ( - - ( ID ) ) ] bool , bool : ID ) { }",
  "func ID ( ) { var ID : [ ID ( ) [ false * } ( ( ID ) ) * - false ] ] bool var ID : [ ] int ID func ID ( ) { }",
  "func ID ( ) { var ID : [ ID ( ) [ false * } ( ( ID ) ) * - false ] ] bool var ID : [ ] int ID ( ID func ) { }",
  "func ID ( ) { var ID : [ ID ( ) [ false * } ( ( var ) ) * - false ] ] bool ID ID : [ ] int ID ( ID func ) { }",
  ") ID ( ) { var ID : [ - 123 + - ( true + ( - ID ) - ( - ID func ) ] int var ID : [ ] [ ] [ ] [ ] bool } func ID ( ) { }",
  ") ID ( ) { var ID true [ - 123 + - ( : + ( - ID ) - ( - ID func ) ] int var ID : [ ] [ ] [ ] [ ] bool } func ID ( ) { }",
  ") ID ( ) { var ID - [ - 123 + - ( : + ( - ID ) true ( - ID func ) ] int var ID : [ ] [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ] ( ) : [ ID bool { var ID : bool var ID : int ID ( ID ( ) * - ( - ID ) ) = - ( - - ID ) }",
  "func ] ( ) : [ ID bool { var ID : bool var ( : int ID ( ID ID ) * - ( - ID ) ) = - ( - - ID ) }",
  "func ] ( ) : [ ID bool { var ID : bool var ( : int ID ( ID ID ) - - ( - ID ) ) = * ( - - ID ) }",
  "func - ( ID : [ ID ( ID ID [ - - ID ( ) ] ) ] bool ) { }",
  "func - ( ID : [ ID ( ID ID [ - - ID ( ) ] ) ] bool ) { }",
  "func - ( ID : [ ID ( ID ID [ { - ID ( ) ] ) ] bool ) - }",
  "func ID ( ID : bool ) : int { var ID : int print ID + ID } ID ) { } } func ID ( ) { (",
  "func ID ( } : bool ) : int { var ID : int print ID + ID } ID ) { } ID func ID ( ) { (",
  "func ID ( } : bool ( : int { var ID : int print ID + ID } ID ) { } ID func ID ( ) { )",
  "func ID ( ) { var ID : bool var ID : [ ] [ ID [ - 123 + ( ID - ) - ( - 123 ) ] [ true ] ] bool }",
  "func ID ( ) { var ID : bool var ID : [ ] [ ID [ - 123 + ( ID - ) - ( bool 123 ) ] [ true ] ] - }",
  "func ID ( 123 { var ID : bool var ID : [ ] [ ID [ - ) + ( ID - ) - ( bool 123 ) ] [ true ] ] - }",
  "func ID ( ) : bool { var ID : ID while ID ( ) [ - - int ( ) ] { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : ID while ID ( ) [ - - ID ( ) ] { } call ID ( ) } func int ( ) { }",
  ": ID ( ) : bool { var ID func ID while ID ( ) [ - - ID ( ) ] { } call ID ( ) } func int ( ) { }",
  "func ID ( ID : int ) : [ ID [ ( - 123 - false + ID ) ] [ ( ( ID ) ) ] ] bool } { func ID ( ) { }",
  "func ID ( ID : int ) : [ ID [ ( - 123 - false + ID ) ] [ ( { ID ) ) ] ] bool } ( func ID ( ) { }",
  "func ID ( ) : int , ID : [ false / ( ID ( ) [ ( ID ) ] ID ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ) : int , ID : [ false / ( func ( ) [ ( ID ) ] ID ] int , ID : bool ) { } ID ID ( ) { }",
  "func ID ( ) : int , ID : [ false / ( func ( ) [ ( ID ) : ID ] int , ID ] bool ) { } ID ID ( ) { }",
  "func ID ( { ) print ID ( ) [ ID ( ID ( ) ) ] }",
  "func ID ( print ) { ID ( ) [ ID ( ID ( ) ) ] }",
  "func ID ( print ) { ID ( ) [ ID ( ID ( ) ) ] }",
  "func ID ( ID : int , ID : bool ) : int { var ID : int var int : [ ] ID return ( ID ) }",
  "func ID ( ID : int , ID : return ) : int { var ID : int var int : [ ] ID bool ( ID ) }",
  "func ID ( ID : int , ID : return ) : int { var ID : int var int : ( ] ID bool [ ID ) }",
  "bool ID ( ID : func ) { var ID : [ ] bool { var ID : [ ID ( - ( ID ) ) ] [ ] int } }",
  "bool ID ( ID : func ) { var ID : [ ] bool ID var { : [ ID ( - ( ID ) ) ] [ ] int } }",
  "bool ID ( ID } func ) { var ID : [ ] bool ID var { : [ ID ( - ( ID ) ) ] [ ] int : }",
  "func ID ( ID { } func ID ( ) { var ID : bool call ID ( ( ) ) ) }",
  "func ID ( ID } { func ID ( ) { var ID : bool call ID ( ( ) ) ) }",
  "func bool ( ID } { func ID ( ) { var ID : ID call ID ( ( ) ) ) }",
  "func ID ( ID : int , ID : ( ) : bool { var ID : int return } func ID bool ID : bool , ID : int ) { var ID : [ ] int }",
  "[ ID ( ID : int , ID : ( ) : bool { var ID : int return } func ID bool ID : bool , ID : int ) { var ID : func ] int }",
  "[ ID ( ID : int , ID : ( ) : bool { var ID : int return } func ID bool ID : bool , ID : int ) { var : ID func ] int }",
  "func ID ( ) { var ID : bool } func ID ( ) { var ID ) int if - ( ( false ) : { } while - ( ( ( ID ) ) ) { } }",
  "func ID ( ) { var ID : bool } func ID ( ) { ) ID var int if - ( ( false ) : { } while - ( ( ( ID ) ) ) { } }",
  "func ID ( ) { ( ID : bool } func ID ( ) { ) ID var int if - ( ( false ) : { } while - ( ( var ID ) ) ) { } }",
  "func ID ( ID : [ ] int ) { var ID : [ ] bool var ID : [ ] [ ] [ - - ( - - ID ) ] bool } func { ( ) ID }",
  "func ID ( ID : ) ] int ) { var ID : [ ] bool var ID : [ ] [ ] [ - - ( - - ID ) ] bool } func { ( [ ID }",
  "func ID ( ID : bool ) { ( ID : bool ID ( false / - ID - true + var ( ( ID ) ) ) ) = ( ID ) while ( - ID ) { } }",
  "func ID ( ID : bool ) { ( ID : bool ID ( false / - ID - true = var ( ( ID ) ) ) ) + ( ID ) while ( - ID ) { } }",
  "func ID ( ID : bool ) { ( ID : bool ID ( false / - ID - true var = ( ( ID ) ) ) ) + ( ID ) while ( - ID ) { } }",
  "func ID ( ) { var ID : bool var ID : int { while 123 - ID / true / - - - true { } ID } ( false ) } =",
  "func ID ( ) { var ID : bool var ID : int { while true - ID / 123 / - - - true { } ID } ( false ) } =",
  "func ) ( ) { var ID : [ ] int var ID : [ ID ( ) + ID [ - ( true ) ] [ ( ( - ID ) ) ] ] [ ] [ ] [ ] [ ] [ ] int } func ID ( ID { }",
  "func ) ( ) { var ID : [ ( int var ID : [ ID ( ) + ID [ - ( true ) ] [ ] ( - ID ) ) ] ] [ ] [ ] [ ] [ ] [ ] int } func ID ( ID { }",
  "func ) - ) { var ID : [ ( int var ID : [ ID ( ) + ID [ ( ( true ) ] [ ] ( - ID ) ) ] ] [ ] [ ] [ ] [ ] [ ] int } func ID ( ID { }",
  "func ID ( ) : var { bool ID : [ ] bool if ID * ID [ ( 123 ) ] { } } func ID ( ) { }",
  "func ID ( ) : var { bool ID : [ ] bool if ID * ID [ ( 123 ) ] { } { func ID ( ) } }",
  "func ID bool ID : int , ID : int ) : [ ] int { var ID : bool { var ID : bool var ID : ( } return } func ID ( ) { }",
  "func ID bool ID : int , ID : int ) : [ ] int { var ID : bool { var ID : bool var ID { ( } return } func ID ( ) : }",
  "func ID bool ID : int , ID : int ) : [ ] int { var ID : bool { var ID : bool var ID { ( } return } func ID ( ) : }",
  "func ID ( ) : [ ID * ID ( ( - ] ID ( ) ) ) * - - true ] [ - int { } func ID ( ) { }",
  "func ID ( ) : [ ID * ID ( ( - ) ID ( ) ] ) * - - true ] [ - int { } func ID ( ) { }",
  "func ID ( ID : [ ID * ) ( ( - ) ID ( ) ] ) * - - true ] [ - int { } func ID ( ) { }",
  "func ID * ID : bool , ID : [ ID / false ( - false - false / - - ( ID ) ] bool ) { }",
  "func ID * ID : bool false ID : [ ID / , ( - false - false / - - ( ID ) ] bool ) { }",
  "func ID * ID : false false ID : [ ID / , ( - false - bool / - - ( ID ) ] bool ) { }",
  "func ID ( ID : bool , ID : int ) : [ ID } - - ( ( - ( ID ) ) ) ] [ - - ID ] ] int { [ func ID ( ) { }",
  "func ID ( ID : - , ID : int ) : [ ID } bool - ( ( - ( ID ) ) ) ] [ - - ID ] ] int { [ func ID ( ) { }",
  "func ID ( ID : - , ID : int ) ID [ ID } bool - ( ( - ( : ) ) ) ] [ - - ID ] ] int { [ func ID ( ) { }",
  "func ID [ ID : int ) : [ ( ( ID [ ID ] ) ) ] [ ] ( ] bool { }",
  "func ID [ ID : int ) : [ ( ( ID [ ID ] ) ) ] [ ] ( ] bool { }",
  "func ID [ ID ( int ) : [ ( ( ID [ ID ] ) ) ] [ ] : ] bool { }",
  "func ID ( ) : 123 ID [ ( ID * [ - ( ID ) - true ) ] ] bool { }",
  "func ID ( ) : ID ID [ ( ID * [ - ( 123 ) - true ) ] ] bool { }",
  "- ID ( ) : ID ID [ ( ID * [ - ( 123 ) func true ) ] ] bool { }",
  "func ID ( ID : [ - 123 / ID [ ID ( ) [ ID ] [ ID ] ] [ - { ] * ( 123 ) ] int ) ID }",
  "ID ID ( ID : [ - 123 / ID [ ID ( ) [ ID ] [ ID ] ] [ - { ] * ( 123 ) ] int ) func }",
  "ID ID / ID : [ - 123 ( ID [ ID ( ) [ ID ] [ ID ] ] [ - { ] * ( 123 ) ] int ) func }",
  "func ID ( ID : [ ] [ ID { ID ( ) [ 123 ] [ - ID ] ) ] bool ) ( }",
  "func ID ( ID ( [ ] [ ID { ID : ) [ 123 ] [ - ID ] ) ] bool ) ( }",
  "func ID { ID ( [ ] [ ID ( ID : ) [ 123 ] [ - ID ] ) ] bool ) ( }",
  "func ID ( ID ( int ) : int { print - ( ID ( ) / ( true ) / : true ) ) }",
  "func ID ( ID ) int ) : int { print - ( ID ( ( / ( true ) / : true ) ) }",
  "func ID ( ID ) int ) : int { print - ( ID ( ( / ( true ) / : true ) ) }",
  "func ID ( ID } [ ] int ) { var ID : [ ] int var ID : int return } func ID ( ) : [ true ] [ ] bool { :",
  "func ID ( ID } [ ] int ) { var ID : [ ] int var ID : int return : func ID ( ) : [ true ] [ ] bool { }",
  "func ID ( ID } [ ] int ) { return ID : [ ] int var ID : int var : func ID ( ) : [ true ] [ ] bool { }",
  "func ID ( ) { var ID 123 int return false - false / ( true * true ) - : }",
  "func ( ( ) { return } func ID ID ) { var ID : int }",
  "func ( ( ) { return } func ID ID ) { var ID : int }",
  "func ) ( ) { return } func ID ID ( { var ID : int }",
  "func ID ( ) ) bool { return 123 * ID ( ) [ true / - true ] [ - - ID ] / - ( - - 123 : }",
  "func ID } ) ) bool { return 123 * ID ( ) [ true / - true ] [ - - ID ] / - ( - - 123 : (",
  "func ID } ) ) bool { return 123 * - ( ) [ true / - true ] [ - - ID ] / - ( ID - 123 : (",
  "func ID ( ) { var ID : bool var ID : int } func ID ) ( { var ID : int while ID [ ( - ( ( ( ( ID ) ) ) ) ) ] { } { } }",
  "func ID ( ) { var ID : bool var ID : int } func ID ) ( { var ID : int while ID [ ( - ( ( ( ( ID ) ) ) ) ) ] { } { } }",
  "func ID ( ) { var ID : bool var ID : - print - 123 * ID + int ID [ 123 ] + ( ( false ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : - print - 123 * ID } int ID [ 123 ] + ( ( false ) ) } func ID ( ) { +",
  "func ID ( : { var ID : bool var ID ) - print - 123 * ID } int ID [ 123 ] + ( ( false ) ) } func ID ( ) { +",
  "func ID ( ) { var ID : bool - ID ( ) if ( - ( call - 123 ) ) { } }",
  "( ID ( ) { var ID : bool - ID func ) if ( - ( call - 123 ) ) { } }",
  "func [ ( ID : [ ] [ - false - - ID ID - - 123 * ( false ) ] [ ( - ID ) ] + true ] int ) { }",
  "func [ ( ID : [ ] [ - false - - ID false - - 123 * ( ID ) ] [ ( - ID ) ] + true ] int ) { }",
  "func [ ( ID : [ ] [ - false - ) ID false - - 123 * ( ID ) ] [ ( - ID - ] + true ] int ) { }",
  "func ID ( ID : ] [ [ - - ( ( ( false ) ) ) ] int ) { }",
  "func ID ( ID : ] [ [ - - ( ( ( false ) ) ] ) int ) { }",
  "func ID ( ID : ] [ [ - - ) ( ( false ) ) ] ) int ( { }",
  "func ID ( ID : bool , ID : [ ] bool ) : bool { if ID ( ) [ true ] { - ID ] { } while 123 [ } } func ID ( ) { }",
  "func ID ( ID : bool { ID : [ ] bool ) : bool , if ID ( ) [ true ] { - ID ] { } while 123 [ } } func ID ( ) { }",
  "ID func ( ID : bool { ID : [ ] bool ) : bool , if ID ( ) [ true ] { - ID ] { } while 123 [ } } func ID ( ) { }",
  "func ID ( ( : [ ] int { return ( ( false * ID ( ) / ) - ID ) ) ) } func ID ( ) { }",
  "func ID ( ( : [ ] int { return ( ( false * ID ( ) / ) - ID ) ) ) } func } ( ) { ID",
  "func ID ( ( : [ ] int { return ( ( false * ID ( ) ) ) - ID ) ) / } func } ( ) { ID",
  "func ID ( ) : bool { var ID : [ ] bool var ID : [ { var ID : bool ID * ID * - ( - 123 ) ] bool var ID : [ ] int } }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : [ { var ID : bool ID * [ * - ( - 123 ) ] bool var ID : ID ] int } }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : [ { var ID : bool ID * [ * - ( - 123 ) ] } var ID : ID ] int bool }",
  "func ID ( bool : int , ID : bool , ID : bool ) { var ID : ID var ID : [ ID ( ) - ( ( - false ) ) - 123 ] int } func ID ( ) { }",
  "func ID ( bool ID int , ID : bool , ID : bool ) { var ID : : var ID : [ ID ( ) - ( ( - false ) ) - 123 ] int } func ID ( ) { }",
  "func ID ( bool ID int , ID : bool , ID : bool ) } var ID : : var ID : [ ID ( ) - ( ( - false ) ) - 123 ] int } func ID ( ) { {",
  "func ID ( ) : bool { var ID : int var ID : [ ( true * true or - ) - true ) ] [ ] [ ] bool } func ID ( - { }",
  "func ID ( ) : bool { var ID : int var ID : [ ( true * true or - ( - true ) ] [ ] [ ] bool } func ID ) - { }",
  "func int ( ) : bool { var ID : ID var ID : [ ( true * true or - ( - true ) ] [ ] [ ] bool } func ID ) - { }",
  "func ID ( ) : bool { var ID : int var ID : bool : } func ID ( ID : bool , ID : bool ) { var ID return int }",
  "func ID ( ) : bool { var ID : func var ID : bool : } int ID ( ID : bool , ID : bool ) { var ID return int }",
  "func var ( ) : bool { ID ID : func var ID : bool : } int ID ( ID : bool , ID : bool ) { var ID return int }",
  "func ID ( { ) var ID : bool } func ID ( ) { var ID : int var ID : int print ID print true }",
  "func ID ( * : [ - - - - - false * ID [ ID ) ID ] ] bool { }",
  "func ID ( * : [ - - - - - false * ID [ ID ) ID ] ] bool { }",
  "func ID ( * : [ - - - [ - false * ID - ID ) ID ] ] bool { }",
  "func ID ( ID : bool , ID : false , ID : [ - bool * ID ( - false ) / ID ] int ) { }",
  "func ID ( ID : bool , ID : false , ID : [ - bool * ID ( - ) false / ID ] int ) { }",
  "func ID ( ID : bool , ID : false { ID : [ - bool * ID ( - ) false / ID ] int ) , }",
  ", ID ( ID : int func ID : bool , ID : [ 123 and - ( ( true ) ) and - - ( ID ) ] [ ] int ) { } func ID ( ) { }",
  ", ID ( ID : int func ID and bool , ID : [ 123 : - ( ( true ) ) and - - ( ID ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool ( ID call ) }",
  "func ID ( ) { var ID : bool ( ID call ) }",
  "func ID ( ) { var ID : bool ( ID call ) }",
  "func ID ( ) : [ ] [ ID [ - 123 < ( ID ) ] [ bool false ] ] - { }",
  "func ID ( ) : [ ] [ ID [ - 123 ] ( ID ) ] [ bool false < ] - { }",
  "func ID ( ) } [ ] [ ID [ - 123 ] ( ID ) ] [ bool false < ] - { :",
  "func ID ( } : [ ] [ ] bool { while ( - true and 123 and ( ID ) ) { } )",
  "func ID ( } : [ ] bool ] [ { while ( - true and 123 and ( ID ) ) { } )",
  "func ID ( } : { ] bool ] [ { while ( - true and 123 and ( ID ) ) [ } )",
  "func ID ( ) : [ ID [ - - false / ID ( ) + ( ( - [ ) ) - true ] ] [ ] [ ] 123 ] [ ] bool { }",
  "func ID ( ) : [ ID [ - ) false / ID ( - + ( ( - [ ) ) - true ] ] [ ] [ ] 123 ] [ ] bool { }",
  "func ID ( ) + [ ID [ - ) false / ID ( - : ( ( - [ ) ) - true ] ] [ ] [ ] 123 ] [ ] bool { }",
  "func ID ( ) { var ID : ] ] [ [ bool ID = ( - ( ( ID ) ) ) ID = ( - ( ID ) ) }",
  "func ID ( ) { var ID : ] ] ) [ bool ID = ( - ( ( ID ) ) [ ID = ( - ( ID ) ) }",
  "func ID ( ) { var [ : ] ] ) [ bool ID = ( - ( ( ID ) ) ID ID = ( - ( ID ) ) }",
  "func ID ( ID ID int , ID : bool , ID : bool ) : int { var ID : bool var ID : [ : ( ) ] bool } func ID ( ) { }",
  "func ID ( ID ID int , ID : bool , ID ) bool ) : int { var ID : bool var ID : [ : ( ) ] bool } func ID ( : { }",
  "func ID ( ID ID int , ID : bool , ID ) bool ) ( int { var ID : bool var ID : [ : : ) ] bool } func ID ( : { }",
  "func ID ( ) : int { var : ID int call ID ( ) ID [ - - ID ( true ) ] [ ( - - false ) ] = - - ( false ) } func ID ( ) { }",
  "func ID : ) ( int { var : ID int call ID ( ) ID [ - - ID ( true ) ] [ ( - - false ) ] = - - ( false ) } func ID ( ) { }",
  "func ID : ) ( int { var : ID int call ID ( ) ID [ - - ID ( true ) ] [ ( - - false ) ID = - - ( false ) } func ] ( ) { }",
  "func ID ( ) { var ID : int while ) true - 123 * true - ( false ( ) { } }",
  "func ID ( ) { var ID : - while ) true - 123 * true int ( false ( ) { } }",
  "func ID ( ) { ) ID : - while ) true - 123 * true int ( false ( var { } }",
  "func ID ( ID : int , ID : int , ID : int ) ID int { var ID : [ ] int var : : int ID [ 123 ] [ - true ] = true }",
  "func ID ( ID : int , ID : int , ID : var ) ID int { int ID : [ ] int var : : int ID [ 123 ] [ - true ] = true }",
  "func ID ( ID : int , ID : int = ID : var ) ID int { int ID : [ ] int var : : int ID [ 123 ] [ - true ] , true }",
  "func ID ( ID : [ ] [ ( ( - false / ( ID ID ) ) ) ) ] [ ] [ ] int ) { } func ( ( ) { }",
  "func ID ( ID : [ ] [ ( ( - false / ( ) ID ) ) ) ) ] [ ] [ ] int ) { } func ( ( ID { }",
  "func ID ( ID : [ ] [ ( ( - false / ( ) ID ) ) ) ) ] [ ] [ ] int ) { } func ( ( ID { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var ID [ : true < false / 123 ] bool var ID : bool }",
  "func ID ( ) ( int { print ID ( - ID [ true / - ( true ) ] [ - ( : false ) ) ] ) }",
  "func ID ( ) ( int { print ID ( - ID [ true / - ( true ) ] [ - ( : false ) } ] ) )",
  "func ID ( ) ( int ( print ID ( - ID [ true / - { true ) ] [ - ( : false ) } ] ) )",
  "func ID ( ) : int { var var : int var ID : [ ] int { ID ID : bool } return - ID } func ID ( ) { }",
  "func ID ( ) : int { bool var : int var ID : [ ] int { ID ID : var } return - ID } func ID ( ) { }",
  "func ID ( ) : int { { ( ID : [ ] [ ( - false / var ( ID ) ) ) ] int } } func ID ( ) { }",
  "func ID ( ) : int { { ( ID } [ ] [ ( - false / var ( ID ) ) ) ] int : } func ID ( ) { }",
  "func ID ( ( : int { { ( ID } [ ] [ ( - false / var ( ID ) ) ) ] int : } func ID ) ) { }",
  "func ID ( * : bool ) { var ID : bool print true ID ( ID ( true ) ) / false ID = false }",
  "func ID ( * : bool ) { var ID : bool print true ID ( ID ( true ) ) / false ID = false }",
  "func ) ( * : bool ) { var ID : bool print true ID ( ID ( true ID ) / false ID = false }",
  "func ID ( ID : int ) : bool { call ID ( ID ID [ true / ID and - - ) ] [ false ] = ( - ( ID ) ) } func ID ( ) { }",
  "func ID ( ID ID int ) : bool { call ID ( : ID [ true / ID and - - ) ] [ false ] = ( - ( ID ) ) } func ID ( ) { }",
  "func ID ( ID ID int ) [ bool { call ID ( : ID : true / ID and - - ) ] [ false ] = ( - ( ID ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : int ID ( ) - = ID ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ) : int ( var ID : int ID { ) - = ID ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ) : int ( var ID : int ID { ) - = ( ( ( ID ) ) } func ID ID ) { }",
  "func ID ( ) : bool { var ID : bool print - ( 123 * - - - - ( ( { ) ) ) if ID false } }",
  "func ID ( ) : bool { var ID : bool print - ( 123 * - - - - ( ( { ) } ) if ID false } )",
  "func ID ( ) : bool { var ID : bool print - ( 123 } - - - - ( ( { ) * ) if ID false } )",
  "func ID ( ID : ) - ( ( ( ID ( [ * true * true ) ) ) ] int ) { }",
  "func ID ( ID : ) - ( ( ( ID ( [ * true * true ) ) ) ] } ) { int",
  "func ID ( ID : } - ( ( ( ID ( [ * true * true ) ) ) ] ) ) { int",
  "func ID ] ID : bool , ID : bool , ID : bool ) : int { var ID : [ - ID [ ( ( 123 ) ) ( [ 123 ] ] int var ID : int }",
  "func ID ] ID : bool , ID : bool , ID : bool ) : int { var ID : [ - ID [ ( ( 123 ) ) ( [ 123 ] ] int var ID : int }",
  "func ID ] ID : bool 123 ID : bool , ID : bool ) : int { var ID : [ - ID [ ( ( , ) ) ( [ 123 ] ] int var ID : int }",
  "[ ID ( ) : [ false / ID [ ( ID ( ) [ ( true ) ] ) ] * ( ( ID ) ) ] func ] int { }",
  "[ ID ( ) : [ false / ID [ ( ID ( { [ ( true ) ] ) ] * ( ( ID ) ) ] func ] int ) }",
  "[ ID ( ) : [ false / ID [ ( ID ( { [ ( true ) ] ) ] * ( ( ID ) ) ] func ] int ) }",
  "func ID false ) : bool { print true + ID ( ) - - ( / ( ( - - ( 123 ) ) ) / ID }",
  "func ID false ) : bool { print true + ID ( ) - - ( / ( ( - - ( 123 ) ) ) / ID }",
  "func ID false ) : bool { print ) + ID ( ) - - ( / ( ( - - ( 123 ) true ) / ID }",
  "func ID ( ID : [ ] [ ] bool , ID : [ - ID ( ) [ ( - false ) ] ] int , ID : int ] [ ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : [ int ID ( ) [ ( - false ) ] ] - , ID : int ] [ ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( bool , ID : [ int ID ] ) [ ( - false ) ] ] - , ID : int ] [ ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : int } bool ID ( ID : func , ID : bool , ID : int ) : int { }",
  "func ID ( ID : bool ) : bool { var ID : int } bool ID ( ID : func , ID : bool , ID : int ) : int { }",
  "func ID ( ID : bool ) : bool { var ID : int } bool ID ( ID : func , ID : bool , ID : int ) : int { }",
  "func ID ( ) : [ / 123 / true - - ( - ( - false ) ) ] bool { }",
  "func ID false ) : [ / 123 / true - - ( - ( - ( ) ) ] bool { }",
  "func ID false ) : [ / 123 / true - { ( - ( - ( ) ) ] bool - }",
  "func ID ( ) : bool { var ID : - var ID : int call ID ( ) return ( - int ID ) } func ID ( ) { }",
  "func , ( ID : int , ID : int ID ID : int ) { var ID : bool var ID : [ ID [ true ] ] bool }",
  "func , ( ID : int , ID : int ID ID : true ) { var ID : bool var ID : [ ID [ int ] ] bool }",
  "func , ( ID : int , int : int ID ID : true ) { var ID : bool var ID : [ ID [ ID ] ] bool }",
  "func ID ( ) { var ID : int var ID : int while 123 + 123 { - - - 123 - } while ( ID ) { } }",
  "func ID ( ) { var ID : ) var ID : int while 123 + 123 - - - - 123 { } while ( ID int { } }",
  "func ID ( ) : [ ID * false != ( false and ID and ( ) ( ( ID ) - ) ) ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : [ ID * false != ( false and ID and ( int ( ( ID ) - ) ) ] [ ] ) { } func ID ( ) { }",
  "func ID ( ) : [ ID * false != ( false and ID and ( int ( ( ID ) - ) func ] [ ] ) { } ) ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : int var ID ID int print ( : ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : int var ID ID int print ( : ) } func ID ( ) { }",
  "func ID ( ) : bool 123 var ID : [ ] [ ] bool var ID : int print ( ( { ) ) } func ID ( ) { }",
  "func ID ( ) : bool 123 var ID ) [ ] [ ] bool var ID : int print ( ( { ) : } func ID ( ) { }",
  "func ID ( } : bool 123 var ID ) [ ] [ ] bool var ID : int print ( ( { ) : ) func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) var { ID : bool var ID : int ID ( ) [ 123 * - ID ] [ ( - ID ) ] = ID }",
  "func ID ( ID : bool , ID : int ) var { ID : bool var ID : int ID ( ) [ 123 * - ID ] [ ( - ID ) ] = ID }",
  "func : ( ID : bool , ID : int ) var { ID ID bool var ID : int ID ( ) [ 123 * - ID ] [ ( - ID ) ] = ID }",
  "func ID ( ) : [ 123 * 123 + 123 * false + - ( ( ( false } ) ) ] [ ] bool { )",
  "ID func ( ) : [ 123 * 123 + 123 * false + - ( ( ( false } ) ) ] [ ] bool { )",
  "ID func ( ) : [ false * 123 + 123 * false + - ( ( ( 123 } ) ) ] [ ] bool { )",
  "func { ( ) : int { var ID : bool { var ID : int var ID : int if true / - ID * ( 123 ) ID } } ID = true }",
  "func { ( ) : int { var ID : bool { : ID var int var ID : int if true / - ID * ( 123 ) ID } } ID = true }",
  "func { ( ) : int { var ID : bool { : ID var int var ID : int if true / - ID * ( 123 ) ID } } ID = true }",
  "func ID ( ) : [ - ID ( - - - 123 and ( ID ) ) func [ ] [ ] [ ] int { } ] ID ( ) { }",
  "func ID ( ) : [ - ID ( - - - 123 and ( ID ) ) func [ ] [ ] [ ID int { } ] ] ( ) { }",
  "func ID ( ) : [ - ID ( - - - 123 and ( ID ) ) func [ ] [ ] [ ID int { } ] ] ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID 123 bool return ID * : - - 123 } func ID ( ) { }",
  "func ID ( ID : int , ID : ( , ID : int ) { var ID 123 bool return ID * : - - 123 } func ID int ) { }",
  "func ID ( ID : int ) ID : ( , ID : int , { var ID 123 bool return ID * : - - 123 } func ID int ) { }",
  "func ID ( ) { var ID : int if ( ID - false and - } - - - ID ) ) { ( if ( false ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int if ( ID - and false - } - - - ID ) ) { ( if ( false ) { } } func ID ( ) { }",
  "func ID ( ) { var ID ( int if : ID - and false - } - - - ID ) ) { ( if ( false ) { } } func ID ( ) { }",
  "func ID ID ID : int , ID : bool ) { var ID : int var ID : bool return } func ID ( ( : bool ) : [ ] [ ] bool { }",
  "func ID ID ID : int , ID : bool bool { var ID : int var ID : bool return } func ID ( ( : bool ) : [ ] [ ] ) { }",
  "func ) ID ID : int , ID : bool bool { var ID : int var ID : bool return } func ID ( ( : bool ) : [ ] [ ] ID { }",
  "func ID ( ) : [ false / ID ( ) - false * true + ID - ID ] [ - [ 123 ] * ID ] int { } func ID ( ) { }",
  "func ID ( ) : [ false / ID ( ] - false * true + ID - ID ] [ - [ 123 ] * ID ) int { } func ID ( ) { }",
  "func ID ( ) : [ false / true ( ] - false * ID + ID - ID ] [ - [ 123 ] * ID ) int { } func ID ( ) { }",
  "func ID ( ) { var ID : [ 123 / ID ( ( true int ID * 123 ) ) / true ] [ ] * var ID : int }",
  "func ID ( ) { var ID : [ 123 / ID ( ( true int ID * } ) ) / true ] [ ] * var ID : int 123",
  "func ID ( ) { var ID : [ 123 / ID ( ( true int ID * } ] ) / true ] [ ) * var ID : int 123",
  "func ID ( ID : int bool ID : , ) : int { var ID : [ - ( ( false ) ) ] int var ID : [ ] int }",
  "func ID ( ID : int bool ID : , ] : int { var ID : [ - ( ( false ) ) ] int var ID : [ ) int }",
  "func ID ( ID : int bool ID : , ] - int { var ID : [ : ( ( false ) ) ] int var ID : [ ) int }",
  "func ID ( ) : [ ( ( ID ( ) ) ID ( ) ] [ ) ] int { } func ID ( ) { }",
  "func ID ( ) : [ ( ( ID ( ) ) ID ( ) ] [ ) ] int { } func { ( ) ID }",
  "func ID ( ) { } ] ID ( ID : bool , ID : int , ID : int ) { var ID : bool var ID : [ ID func bool }",
  "func ID ( ) ID } ] ID ( ID : bool , ID : int , ID : int ) { var ID : bool var ID : [ { func bool }",
  "} ID ( ) ID func ] ID ( ID : bool , ID : int , ID : int ) { var ID : bool var ID : [ { func bool }",
  "func ID ( ) { : func ID ( ) } [ ] int { return true * - - ( ( false ) ) }",
  "} ID ( ) { : func ID ( ) func [ ] int { return true * - - ( ( false ) ) }",
  "} ID ( ) { : func ID ( ) func [ ) int { return true * - - ( ( false ) ] }",
  "( ID ( ID : bool , ID : [ ] [ ] bool ) { var ID : bool var ID : [ - ( func ( ID ) ) ) ] bool }",
  "( ID : ID : bool , ID ( [ ] [ ] bool ) { var ID : bool var ID : [ - ( func ( ID ) ) ) ] bool }",
  "( ID : ID : bool , ID ( [ ] [ ] : ) { var ID : bool var ID bool [ - ( func ( ID ) ) ) ] bool }",
  "func ID ( ) ( var ID : bool while - - { - - 123 - - ( true ) - ( ( ( ID ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ) ( var ID : bool while - ) { - - 123 - - ( true - - ( ( ( ID ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ) ( var ID : bool while - ) { - - 123 - - ( true - - ( ( ( ID ) ) ) ) { } } func ID ( { ) }",
  "} ID ( ID : bool ) : [ ] int { call ID ( ) ID = ID [ ( ID ) ] func",
  "} ID ( ID : bool ) : [ ] int { call ID ( ) ID = ID [ ( ID ) ] func",
  "} ID ( ID : bool ) : func ] int { call ID ( ) ID = ID [ ( ID ) ] [",
  "} ID ( ID : [ ( false * - false / ( ( true ) ) ) ] [ ] int ) { } func ID ( ) { func",
  "} ID ( ID : [ ( false * - false / ( ( true ) ) ) ] [ ] int ) { } func ID ( ) { func",
  "} ID ( ID : [ ( false * - false ID ( ( true ) ) ) ] [ ] int ) { } func / ( ) { func",
  "func ID ( ) : [ ] ID ( ) [ 123 / false / false - - ID ] - int { }",
  "func ID ] ) : [ ] ID ( ) [ 123 / false / false - - ID ( - int { }",
  "func ID ] ) : } ] ID ( ) [ 123 / false / false - - ID ( - int { [",
  "func ID ( ) : false { var ID : [ - 123 * ID ( - - int ) ] [ ] bool }",
  "func ID ( ) : false { var ID : [ - 123 * ID ( - - int bool ] [ ] ) }",
  "func ID ( ) : false { var ID : [ - 123 * ID ( - - int bool ] [ } ) ]",
  "func ID ( ID : bool , ID : [ true ) true and ( false / - true / - - 123 ) and 123 ] [ ] [ ] [ ] [ ] bool / { }",
  "func ID ( ID : bool ] ID : [ true ) true and ( false / - true / - - 123 ) and 123 , [ ] [ ] [ ] [ ] bool / { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : [ ] ( ID ( ) * ( [ ( - true ) ) ) / true ] bool var ID : [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : [ ] ( ID ( ) * ( [ ( - true ) ) ) / true ] bool var } : [ ] [ ] int } func ID ( ) { ID",
  "func ID ( ID : int ID ID : int , ID : int ) { var ID : [ ] ( ID ( ) * ( [ ( - true ) ) ) / true ] bool var } : [ ] [ ] int } func , ( ) { ID",
  "] ID ( ID : int , ID : int , ID : [ ( true * ID / - true ) func [ ] int ) { } func ID ( ) { }",
  "] ID ( ID : int , ID : int } ID : [ ( true * ID / - true ) func [ ] int ) { , func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( ( - ID , ) [ ID ] [ - ID ] ) ) ] [ ] bool ( ID : bool ) { }",
  "func ID ( ID : bool , ID : [ ( ( - ID , ) [ ID ] [ - ID ] ) ) ] [ ] bool ( ID : bool ) { }",
  "func ID ( ID : bool , ID : [ ( ( ] ID , ) [ ID ] [ - ID - ) ) ] [ ] bool ( ID : bool ) { }",
  "func ID ( ID : int , ID : bool , ID : int bool { var ID : [ ] ) return }",
  "func ID ( ID : int , ID : bool , ID : int bool { var ID : [ ] ) return }",
  ") ID ( ID : int , ID : bool , ID : int bool { var ID : [ ] func return }",
  "func ID ( ) : bool { var [ : ID - - ( true / - true * true ) ] bool var ID : bool }",
  "func ID ( ) : bool { var [ : ID - - - true / ( true * true ) ] bool var ID : bool }",
  "func ID ( ) : bool { - [ : ID var - - true / ( true * true ) ] bool var ID : bool }",
  "func ID ( ) : bool { var ID : [ ( - ( - ID * ID ) ) ] [ ] [ ] int } ID : [ ] int } func ID ( ) { var",
  "func ID ( ) : bool { var ID : { ( - ( - ID * ID ) ) ] [ ] [ ] int } ID : [ ] int } func ID ( ) [ var",
  "func } ( ) : bool { var ID : { ( - ( - ID * ID ) ) ] [ ] [ ] int } ID : [ ] int ID func ID ( ) [ var",
  "func true ( ) { var ID : [ ( true and ID [ - ID ] [ ID ] and ( ID ) ) ] bool } func ID ( ) { }",
  "func [ ( ) { var ID : [ ( true and ID true - ID ] [ ID ] and ( ID ) ) ] bool } func ID ( ) { }",
  "func [ ( ) { var ID : [ ( true and ID true } ID ] [ ID ] and ( ID ) ) ] bool } func ID ( ) { -",
  "func ID ( ID : [ false / - ID ID [ ID [ ID ] [ 123 ] ] ) / ( ( ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ false / - ID ID [ ID [ ID ) [ 123 ] ] ) / ( ( ) ] [ ] int ] { } func ID ( ) { }",
  "func ID ( ID : [ false / - ID ID [ ID [ ID ) [ 123 ] ] ) / ( ( ) ] [ ] int ] { } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] { bool var ID : bool call ID ( ) return }",
  "func ID ( ) : [ ] [ ] { bool ( ID : bool call ID var ) return }",
  "func ID ( bool : [ ] [ ] { bool ( ID : ) call ID var ) return }",
  "func bool ( ID : [ ] [ - ID ( ) [ ID ( ) * ( ID ) ] ] ID ) { }",
  "func bool ( ( : [ ] [ - ID ( ) [ ID ID ) * ( ID ) ] ] ID ) { }",
  "func bool ( ( : [ ] [ - ID ( ) [ ID ID ) * ( ID ] ] ) ID ) { }",
  "func , ( ID : int ID ID : int ) : [ ] [ ] int { var ID : bool if true / - 123 / - - true { } print ID }",
  "func , ( ID : int ID ID int : ) : [ ] [ ] int { var ID : bool if true / - 123 / - - true { } print ID }",
  "func , ( ID : int ID ID int : ) : [ ] [ ] 123 { var ID : bool if true / - int / - - true { } print ID }",
  "func ID ( ID : : ) int bool { var ID : bool call ID ( ID ( ( false ) ) ) }",
  ": ID ( ID : func ) int bool { var ID : bool call ID ( ID ( ( false ) ) ) }",
  ": ID ( ID : func ) int bool { var ID : bool call ID ( ID false ( ( ) ) ) }",
  "func ID ( ID : [ - 123 * ID * ) + ID / ( ID false * - ( ID ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ - 123 * ID * ) + ID / ( ID false * - ( ] ) ID [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] ] , ID : [ ] [ ] [ bool int ) { var ID : bool }",
  "func ID ( ID : [ [ ] , ID : ] ] [ ] [ bool int ) { var ID : bool }",
  "func ID ( ID : [ [ ] ] ID : , ] [ ] [ bool int ) { var ID : bool }",
  "func ID ( ID : bool , ID : [ ID * true + ( ( ) * ( ( - - false ) ) / ( ID ) ] [ ] [ ] int , ID : bool ) { } func ID ID ) { }",
  "func ID ( ID : ( , ID : [ ID * true + ( bool ) * ( ( - - false ) ) / ( ID ) ] [ ] [ ] int , ID : bool ) { } func ID ID ) { }",
  "func ID ( : : bool ) ID [ ( ( 123 or - false ) ) ] int { }",
  "func ID ( : : bool ) ID [ ( ( 123 - or false ) ) ] int { }",
  ") ID ( : : bool ) ID [ ( ( 123 - or false func ) ] int { }",
  "func ID ( ID : [ ] int ) : int { var ID : int var ID : [ false - } ( ( - ( ( ID ) ) ) ) + ( ID ) ] bool -",
  "- ID ( ID : [ ] int ) : int { var ID : int var ID : [ false func } ( ( - ( ( ID ) ) ) ) + ( ID ) ] bool -",
  "- ID ( ID : [ ] int int : ) { var ID : int var ID : [ false func } ( ( - ( ( ID ) ) ) ) + ( ID ) ] bool -",
  "func ID ( ) : var ID : int { var ID { [ ] [ ] bool } return } func ID ( ) : int { }",
  "func ID { ) : var ID : int { var ID ( [ ] [ ] bool } return } func ID ( ) : int { }",
  "func ID { ) : var ID : int { var ID ( [ ] [ ] bool } return } func ID ( ) } int { :",
  "func ID ( ID : [ ] [ ( false - ID ( ) [ false ] - int ) ] ID ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( false - ID ( ) [ - ] false int ) ] ID ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( false - { ( ) [ - ] false int ) ] ID ) ID } func ID ( ) { }",
  "func ID ( ID : [ ] bool int ID : [ ] bool , ID : bool ) : int { var ID : , while 123 { } } func ID ( ) { }",
  "func ID ( ID : [ ] bool int ID : [ ] bool , ID : : ) bool int { var ID : , while 123 { } } func ID ( ) { }",
  "func ID ( ID : [ ] bool int ID : [ ] bool , ID : : ) } int { var ID : , while 123 { bool } func ID ( ) { }",
  "func ) ( ID : [ 123 / ID ( ID ( ) [ 123 ] [ ID ] ID / - ( 123 ) ] int ) { }",
  "( ) ( ID : [ 123 / ID ( ID ( ) [ 123 ] [ ID ] ID / - func 123 ) ] int ) { }",
  "( ) : ID ( [ 123 / ID ( ID ( ) [ 123 ] [ ID ] ID / - func 123 ) ] int ) { }",
  "func ID ( ( : [ ( ( ) - - ID * - ID / - ID ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ( : [ ( ( ) - - ID * - ) / - ID ) ) ID ] bool { } func ID ( ) { }",
  "func ID ( ( : [ ( ( ) - ID ID * - ) / - - ) ) ID ] bool { } func ID ( ) { }",
  "func ID ( var { { ) ID : bool var ID : int } return }",
  "func ID ( var { { ) ID : bool var ID : int } return }",
  "func ID ( ) { } func ] ( ) : [ ID ( ) [ ( ID ) ] ] [ ID int { }",
  "func ID ( ) { } func ] ( ) : [ ID ( ) [ ( ID ) ] ] [ ID int { }",
  "func ID ( ID : int ) { var ID : bool var ID : [ ] int call ID ( false == ID ) call ) ( ) } func ID ( ID { }",
  "func call ( ID : int ) { var ID : bool var ID : [ ] int call ID ( false == ID ) ID ) ( ) } func ID ( ID { }",
  "func call ( ID : int ) { var ID : bool var ID : [ ] int call ID ( false == ID ( ID ) ) ) } func ID ( ID { }",
  "func ID ( ID : int , ID : bool , ID : bool ) ) [ ] [ ] bool { print - false * ID / ID } func ID ( : { }",
  "func ID ( ID : int , ID : bool , ID : bool ) func [ ] [ ] bool { print - false * ID / ID } ) ID ( : { }",
  "func ID ( ID : / , ID : bool , ID : bool ) func [ ] [ ] bool { print - false * ID int ID } ) ID ( : { }",
  "func ID ( ID : [ ( ( ( - - false } ( true ) ) ) ) ] bool ) { *",
  "func [ ( ID : ID ( ( ( - - false } ( true ) ) ) ) ] bool ) { *",
  "func [ ( ID : ID ( ( ( - - bool } ( true ) ) ) ) ] false ) { *",
  "func ID ( ) : bool { var ID : [ - - - / 123 true - false * false * 123 - ID ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ - bool - / 123 true - false * false * 123 - ID ] - var ID : bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ - bool - / 123 true - false * false * 123 var ID ] - - ID : bool } func ID ( ) { }",
  "func ID ( ID : [ ( true / ID [ ID ( ( 123 ) ) ] [ - ( false ) ] / ID ] ) [ ] bool ) { }",
  "func ID ( ID : [ ( true / ID [ ID ( ( 123 ) ) ] [ ( - false ) ] / ID ] ) [ ] bool ) { }",
  "func ID ( ID : [ ( true / ID [ ID ( ( 123 ) ) ] [ ( - ) ) ] / ID ] ) [ ] bool false { }",
  "func ID ( ) : bool { ID } ID [ - 123 / ID ( ) * ID ] ) = 123 (",
  "func ID ( ) : bool { ID } ID ID - 123 / [ ( ) * ID ] ) = 123 (",
  "func ID ( ) { var ID : bool var ID : int print ( ID [ false ] [ - ( ( ( ( ( - ( - 123 ) ) ) func ) ) ] ) if false { } } ) ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int print ( ID [ false 123 [ - ( ( ( ( ( - ( - ] ) ) ) func ) ) ] ) if false { } } ) ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int print ) ID [ false 123 [ - ( ( ( ( ( - ( - ] ) ) ) func ) ) ] ( if false { } } ) ID ( ) { }",
  "func } ( ID : int ) : bool { var ID : int } func ID ( ID : int , ID : [ ] int ) { var ID : [ ] [ ] int ID",
  "func } ( ID : int ) : bool { var ID : int } func ID ( ID : int , ID [ : ] int ) { var ID : [ ] [ ] int ID",
  "func } ( ID : int ) : bool { var ID : int } func ID ( ID : int , ID [ ID ] int ) { var : : [ ] [ ] int ID",
  "func ID ( ) : [ ] int { var ID : [ true / 123 : ID ( ) [ ( true ) ] [ - ( - ID ) ] ] int var ID + int }",
  "func ID ( ) : [ ] int { var ID : [ ] / 123 : ID ( ) [ ( true ) ] [ - ( - ID ) true ] int var ID + int }",
  "func ID ( ) : [ ] int { var ID int [ ] / 123 : ID ( ) [ ( true ) ] [ - ( - ID ) true ] : var ID + int }",
  "func ID ( ID : int , ID : - , ID : int ) { ID = bool false * ( ( ( ID ) ) ) while 123 { } } func ID ( ) { }",
  "func ID ( ID = int , ID : - , ID : int ) { ID : bool false * ( ( ( ID ) ) ) while 123 { } } func ID ( ) { }",
  "func ID ( ID = int , ID : - , ID : int * { ID : bool false ) ( ( ( ID ) ) ) while 123 { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : [ - ( true / - ID * true ) { bool { } func ID ( ) ] }",
  "func ID ( ID : bool , ID : bool ) : [ - ( true / - ID * func ) { bool { } true ID ( ) ] }",
  "func ID ( ) : ID ( - - false * ID [ [ [ - ID ] [ ID ] ] ) ] int { } func ID ( ) { }",
  "func false ( ) : ID ( - - ID * ID [ [ [ - ID ] [ ID ] ] ) ] int { } func ID ( ) { }",
  "func false ( ] : ID ( - - ID * ID [ [ [ - ID ] [ ID ] ] ) ) int { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ ] [ - ( - false false ( ( * ) ) ) ] int ) { }",
  "func ID ( ID : int : ID : int , ID , [ ] [ - ( - false false ( ( * ) ) ) ] int ) { }",
  "func ID ( ID : int : ID : int , ID ] [ ] [ - ( - false false ( ( * ) ) ) , int ) { }",
  "func ID ( ID : + , ID : [ - - - ( ID int ( ID ) ) ] [ ] bool ) { }",
  "func ID ( ID : + , ID : int - - - ( ID [ ( ID ) ) ] [ ] bool ) { }",
  "func ID ( ID : + , ID : int - - - ( ID [ ( ID ) [ ] ) ] bool ) { }",
  "func ID ( ) { call ID ( ) } func ID ( ) { var ID : bool var ID [ bool { var ID : : ] int } }",
  "func ID ( ) { call ) ( ID } func ID ( ) { var ID : bool var ID [ bool { var ID : : ] int } }",
  "func call ( ) { ID ) ( ID } func ID ( ) { var ID : bool var ID [ bool { var ID : : ] int } }",
  "func ID ) ID : bool , ID : bool , ID : [ ( false / ( 123 * ID / - ( false ) ( ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ) ID : bool , ID : bool , ID : [ ( false / ( 123 * ID / - ( false ) ( ) ] [ ] bool ) { ID func } ( ) { }",
  "func ID ) ID : bool , ID : bool , ID : [ ID false / ( 123 * ( / - ( false ) ( ) ] [ ] bool ) { ID func } ( ) { }",
  "* ID ( ID : int ) { var ID : [ ] bool var ID : [ ] bool print false * true func ( false ) } func ID ( ) { }",
  "* ID bool ID : int ) { var ID : [ ] bool var ID : [ ] ( print false * true func ( false ) } func ID ( ) { }",
  "* ID bool ID : int * { var ID : [ ] bool var ID : [ ] ( print false ) true func ( false ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : bool call ID : ) } func ID ( ) ( int { var ID : int }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : bool call ID : ) ( func ID ( ) } int { var ID : int }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : bool call ID : ) ( func ID ( ) } int { var ID : int }",
  "func ID ( ) bool [ 123 + true - - ID * - ( ID ) ] [ ] : { }",
  "func ID ( ) bool : 123 + true - - ID * - ( ID ) ] [ ] [ { }",
  "func ID ( ) bool : 123 + true - - ID * - [ ID ) ] ( ] [ { }",
  "func ID ( 123 : int ) : [ ID - false * 123 / ( - - ( ID ) ) ] bool { }",
  "func ID ( 123 : int ) : [ ID - false * - / ( 123 - ( ID ) ) ] bool { }",
  "func ID ( 123 : int ) : [ ID - false * - / { 123 - ( ID ) ) ] bool ( }",
  "func ID int ID : bool , ID : ( ) : bool { var ID : int while ID [ ID ] [ 123 ] { } if ID { } }",
  "func if int ID : bool , ID : ( ) : bool { var ID : int while ID [ ID ] [ 123 ] { } ID ID { } }",
  "func ID ( ID : bool , ID : [ ] int } { ID [ true / ( false ) ] = ( ID ) } func ID ( ) { )",
  "func ID ( ID : bool , ID : [ ] int } { ID [ true / ( false ) ] = ( } ) ID func ID ( ) { )",
  "func ID ( ID : bool , ( : [ ] int } { ID [ true / ( false ) ] = ( } ) ID func ID ID ) { )",
  "func ID ( ) { var ID : int return } func ID ( ID : int , ] : [ ] int , ID : bool ) { var ID : [ ID int var ID : bool }",
  "func ID ( ) { var ID : int return } : ID ( ID func int , ] : [ ] int , ID : bool ) { var ID : [ ID int var ID : bool }",
  "func ID ( ) { int ID : var return } : ID ( ID func int , ] : [ ] int , ID : bool ) { var ID : [ ID int var ID : bool }",
  "func ID ( ) { var ID : [ : [ ( ID [ ID ( ) ] ) ] bool var ID ] bool }",
  "func ID ( ) { var ID : [ : [ ( ID ID ID ( ) ] ) ] bool var [ ] bool }",
  "func bool ( ) { var ID : [ : [ ( ID ID ID ( ) ] ) ] bool var [ ] ID }",
  "func ID } ) : bool { call ID ( ) { var ID : int { return } ID = ID } (",
  "func ( } ) : bool { call ID ID ) { var ID : int { return } ID = ID } (",
  "func ( } ) : ID { call ID ID ) { var ID : int { return } ID = bool } (",
  "func ID ( ) : ] ( ( 123 * false - ( - 123 ) ) ) [ int { }",
  "func ID ( ) : ] ( ( 123 * false - ) - 123 ) ) ( [ int { }",
  "func ID ( - : ] ( ( 123 * false - ) ) 123 ) ) ( [ int { }",
  "func ID ( ) : int ) : int { var ID : [ ] [ ( - ( ( true ) ID ) ] bool var ID : int }",
  "func ID ( ) : int ) : int { var ID ( [ ] [ ( - : ( true ) ID ) ] bool var ID : int }",
  "func ID ( ID : [ ID ( ) [ false or ID [ false ] } - ( ( 123 ) ) ] or - - true ] ] int ) { } func ID ( ) { [",
  "func ID ( ID : [ ID ( ) [ false or ID [ false true } - ( ( 123 ) ) ] or - - ] ] ] int ) { } func ID ( ) { [",
  "func ID ( false : [ ID ( ) [ ID or ID [ false true } - ( ( 123 ) ) ] or - - ] ] ] int ) { } func ID ( ) { [",
  "func ID ( ID } int ) : [ true + ( ( ( ( false ) ) ) ) ] int { :",
  "func ID ( ID false int ) : [ true + ( ( ( ( } ) ) ) ) ] int { :",
  "func ID ( ID false int ) : [ true + ( ( ( ( } ) ) : ) ] int { )",
  "func ID ( ID : bool { var ID : bool var ) : bool print - - ( ( - true ) ) print false }",
  "func ID ( ID : bool true var ID : bool var ) : bool print - - ( ( - { ) ) print false }",
  "func ID ( ID : bool true var ID : bool var ) : bool print - false ( ( - { ) ) print - }",
  "func ID ( ID : [ ] bool , int : bool , ID : ID ) { var ID : [ ( - ( ID ) ) ] [ ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : [ ] bool , { : bool , ID : ID ) { var ID : [ ( - ( ID ) ) ] [ ] bool var ID : int } func ID ( ) int }",
  "func ID ( ) : [ ] bool , { : bool , ID : ID ) { var ID : [ ( - ( ID ID ) ] [ ] bool var ID : int } func ID ( ) int }",
  "func ID ( ) { var ID [ : ] bool return }",
  "func ID ( ) { var ID ] : [ bool return }",
  "[ ID ( ) { var ID ] : func bool return }",
  "func ID ID ID : [ 123 / ( - ( ID ( ) [ ID ] ) ] int ) { } func ID ( ) { }",
  "func ID ID ID : [ ID / ( - ( ID ( ) [ ID ] ) ] int ) { } func 123 ( ) { }",
  "func ID ID ID : [ ID / ( - ( ID ( ) [ ID ] ) ] int ) { } func 123 ( ) { }",
  "func ID var ) { var ID : [ ( ID ( - ( ( - ( - false ) ) ) ) ) ] bool ( ID : int }",
  "func ID var ) { var ID : [ ( - ( ID ( ( - ( - false ) ) ) ) ) ] bool ( ID : int }",
  "func ID var ) { } ID : [ ( - ( ID ( ( - ( - false ) ) ) ) ) ] bool ( ID : int var",
  "func ID ( ID : int , true : bool ) { var ID : bool if ( true and ID ) { } if ( - ( - - ID ) ) { } }",
  "func ID ( ID : int , true : bool ) { var ID : bool if ( true and ID ) { } if ( ) ( - - ID ) - { } }",
  "func ID ( ID : int , true : bool - { var ID : bool if ( true and ID ) { } if ( ) ( ) - ID ) - { } }",
  "func ID ( ID : ) ] bool ) { return true * ( ( true [ ) * ID }",
  "func ID ( ID bool ) ] : ) { return true * ( ( true [ ) * ID }",
  "func ID ( ID bool ) ] : ) { return true * ( ( true [ ) * ID }",
  "func ID ( ID : [ false + ID ( ( 123 / - ( ID ) / ID ) ) - - ( - [ - ID ) ] [ ] - ] [ ] [ ] int ) { }",
  "func ID ( ID : [ false + ID ( ( 123 / - ( ID [ / ID ) ) - - ( - [ - ID ) ] [ ] - ] ) ] [ ] int ) { }",
  "func ID - ID : [ false + ID ( ( 123 / - ( ID [ / ID ) ) - - ( - [ ( ID ) ] [ ] - ] ) ] [ ] int ) { }",
  "func ID ( ) : [ ] [ false * ( - - false ] ID ( - false ) ) * ID / int { }",
  "func ID ( ) : [ - [ false * ( ] - false ] ID ( - false ) ) * ID / int { }",
  "func ID ( ) : [ - [ false * ( ] - false ] ID * - false ) ) ( ID / int { }",
  "func ID ( ( : [ ] int { call ID ( - 123 * - ID [ ( ( ( - false ) ) ) ] [ ID ] ) while ) ( ID ) ) { } }",
  "* ID ( ( : [ ] int { call ID ( - 123 func - ID [ ( ( ( - false ) ) ) ] [ ID ] ) while ) ( ID ) ) { } }",
  "* int ( ( : [ ] ID { call ID ( - 123 func - ID [ ( ( ( - false ) ) ) ] [ ID ] ) while ) ( ID ) ) { } }",
  "func ID ( ) { var ID : int } ] ID ( ) { var ID : [ ] [ - ( true ) func bool var ID : int }",
  "func ID ( ) { var ID : int } ] ID { ) ( var ID : [ ] [ - ( true ) func bool var ID : int }",
  "func ID ( ) { ) ID : int } ] ID { ) ( var ID : [ ] [ - ( true var func bool var ID : int }",
  "func ID ( ) : bool , ID : int , ID : int ) { { return } } func ID ( ) { if ( ( ( ( - ( false ) ) ID ) ) { } ID = ( 123 ) }",
  "func ID ( ) : bool , ID : int , ID : int ) { { return } } func ID ( ) { if ( ) ( ( - ( false ) ) ID ) ) { } ID = ( 123 ( }",
  "func ID ( ) : bool , ID : int , ID : int ) { { return } } func ID ( ) ( if ( ) { ( - ( false ) ) ID ) ) { } ID = ( 123 ( }",
  "func ID ( ID [ bool , ID : [ ] : - ( - ID / - - ID ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) [ bool , ID : [ ] : - ( - ID / - - ID ) ] [ ] [ ] int ID { } func ID ( ) { }",
  "func ID - ) [ bool , ID : [ ] : ( ( - ID / - - ID ) ] [ ] [ ] int ID { } func ID ( ) { }",
  "func ID ( ID : int ) : [ ( ID ( ) [ } == - - ID ] ) ] [ ] [ ] bool { 123",
  "func ID ( ID : int - : [ ( ID ( ) [ } == - ) ID ] ) ] [ ] [ ] bool { 123",
  "func ID ( ID : int ID : [ ( - ( ) [ } == - ) ID ] ) ] [ ] [ ] bool { 123",
  "func ID if ) : bool { var ID : int var ID : bool { var ID : bool var ID : int } ( ( true ) { } } func ID ( ) { }",
  "func ID if ) : bool ) var ID : int var ID : bool { var ID : bool var ID : int } ( ( true { { } } func ID ( ) { }",
  "func ID if ) : bool ) var ID : int var ID : bool { var ID : bool var ID : int } true ( ( { { } } func ID ( ) { }",
  "func ID ( ) { print true * ( ( ID / false * func ID ) ) ) * - - ( - ID ) } ( ID ( ) { }",
  "func ID ( ) { print ID * ( ( true / false * func ID ) ) ) * - - ( - ID ) } ( ID ( ) { }",
  "func ID ( ) { print ID * ( ( true / false * func ID ) ) ) * - - ( ID - ) } ( ID ( ) { }",
  "func ID ( ID : bool ID ID : int , ID : int ) : bool { var ID : bool var , : [ ID ( - ( ID ) ) ] bool }",
  "func ID ( ID : bool ID ID : int , ID : int ) : bool { var ID : ID var , : [ bool ( - ( ID ) ) ] bool }",
  "func ID ( ID : bool ID ID : int , ID : int ) : bool { var ID : ID var , : [ ( ( - bool ID ) ) ] bool }",
  "func ID ( ) { var ID : [ ] [ ( bool var ID : bool return - - ( ( ( ] - ID ) ) ) ) } func ID ( ) { }",
  "func ( ID ) { var ID : [ ] [ ( bool var ID : bool return - - ( ( ( ] - ID ) ) ) ) } func ID ( ) { }",
  "func ( ID ) { var ID : [ ] [ ( bool var ID : bool return - - ( ( ( ] - ID ) ) ) ) ID func } ( ) { }",
  "func ID ( ID - int ) : [ ( ID ( ) - : ID [ ( ID ) ] [ ( ( ( ID ) ) ) ] - ( 123 ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID - int ) : [ ( ID ( ) - - ID [ ( ID ) ] [ ( ( ( ID ) ) ) ] : ( 123 ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID - int ) : [ : ID ( ) - - ID [ ( ID ) ] [ ( ( ( ID ) ) ) ] ( ( 123 ) ) ] bool { } func ID ( ) { }",
  "func ID ( ) : bool { print ( - false false ( * and ( ( ( - false ) ) ) and 123 ) * ( ( ( true ) ) ) ) { } }",
  "func ID ( * : bool { print ( - false false ( * and ( ( ( - false ) ) ) and 123 ) ) ( ( ( true ) ) ) ) { } }",
  ": ID ( * func bool { print ( - false false ( * and ( ( ( - false ) ) ) and 123 ) ) ( ( ( true ) ) ) ) { } }",
  "func ID ( ) : int { var ID : [ ( - true * - true / ( - ( ID ) ) ) ] int { func ID ( ) } }",
  "func ID ( ) : int { func ID : [ ( - true * - true / ( - ( ID ) ) ) ] int { var ID ( ) } }",
  "func ID ( ) : * { func ID : [ ( - true int - true / ( - ( ID ) ) ) ] int { var ID ( ) } }",
  "func ID ( ( : [ ] int { var ID : bool var ID : bool while - ID ( false ) { } } func ID ) ) { }",
  "func ID ( ( : [ ] int { var ID : bool var ID : bool while - ID ( false ) { } } func ID ) ) { }",
  "func ID ( ( : [ ] int { : ID var bool var ID : bool while - ID ( false ) { } } func ID ) ) { }",
  "func ID ( ) { var ID if bool : - ID ( ID ( ) / ( ID ) / ID ) { } } func ID ( ) { }",
  "func ID ( ) { var ID if bool : - ID ( ID ( ) / ( ID ) / ID ) { } } func ID ( ) { }",
  "func ID ( { { var ID if bool : - ID ( ID ( ) / ( ID ) / ID ) { } } func ID ( ) ) }",
  "func ID ( ) { if ( 123 + ID - false * ID / ID ] [ ID ) { } }",
  "func ID ( ] { if ( 123 + ID - false * ID / ID ) [ ID ) { } }",
  "func ID ( ] { if ( 123 + ID - false { ID / ID ) [ ID ) * } }",
  "func ID ( ID : bool ) : int { if ID ( ) [ - ID [ 123 ] [ - ( [ false ) ) ] ] ( true ] { } }",
  "func ID ( ID : bool ) : false { if ID ( ) [ - ID [ 123 ] [ - ( [ int ) ) ] ] ( true ] { } }",
  "func ID ( ID : bool ) [ false { if ID ( ) [ - ID [ 123 ] [ - ( : int ) ) ] ] ( true ] { } }",
  ": ID ( ID func bool , ID : [ ] bool ) : [ ] [ - true / - - - ID * - - - false ] int { } func ID ( ) { }",
  ": ID ( ID func bool , ID : [ - bool ) : [ ] [ - true / - - - ID * - - ] false ] int { } func ID ( ) { }",
  ": ID ( ID func bool , ID : [ - bool ) : [ ] [ - true / - - - ID * - - ] false ] int { } func ID ( ) { }",
  "func ID ( ID : bool ) { ID [ ( ] [ true / ID ] [ - ( ID ) ID ) ] [ - ID ] = ( - ID ) }",
  "func ID ( ID : bool ) { ID [ ( ] [ true / ID ] [ - ( ID ) ID ) ] [ - ID ] = ( - ID ) }",
  "func ID ( ID : bool ) { [ [ ( ] [ true / ID ] [ - ( ID ) ID ) ] ID - ID ] = ( - ID ) }",
  "func = ( ) : int { ID ID ( - ( ( - 123 ) ) ) }",
  "func = ( ) : int { ID ID ( - ( ( - 123 ) } ) )",
  "func ( ( ) : int { ID ID = - ( ( - 123 ) } ) )",
  "func ID ( ) { if - - ID * - true / ( true > } ) { ID ID = ID } func ID ( ) { }",
  "func ID ( if { ) - - ID * - true / ( true > } ) { ID ID = ID } func ID ( ) { }",
  "func ID ( if { ) - - ID * - true / ( > true } ) { ID ID = ID } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) - true - ID ( ) ) ) ] [ ] int ) { } func ID ( ( { }",
  "func ID ( ID : [ ID ( ) - true - ID ( ) ) ) ] [ ] int ) ( } func ID { ( { }",
  "func ID ( ID : [ ID ( ) - true - ID ( ) ) func ] [ ] int ) ( } ) ID { ( { }",
  "func ID ( ID : int , ID : [ ] [ ] bool ID , : int ) : bool { var ID : bool }",
  "func ID ( ID : int ID ID : [ ] [ ] bool ID , : int ) : bool { var , : bool }",
  "] ID ( ) : [ func bool { var ID : [ ( - ID - - ( - ( true ) ) ) ] [ ] bool var ID : [ ] int } func ID ( ) { }",
  "] ID ( ID : [ func bool { var ID : [ ( - ID - - ( - ( true ) ) ) ] [ ] bool var ID : [ ] int } func ) ( ) { }",
  "] ID ( ID : [ func bool { var ID : [ ( - ID - - ( - ( true ) ) ) ] [ ] bool var ID : [ ] int } func ) ( ) { }",
  "func ID ( ID : int , ID : bool var { ) ID : int return } func ID ( ID : [ ] bool , ID : [ ] bool , ID : bool ) { }",
  "func ID ( ID : int , ID : bool var { ) ID : int return } func ID ( ID : [ ] bool , ID : : ] bool , ID [ bool ) { }",
  "func ID ( ] { var ID : [ ) int var ID : int ID [ ( ID * ( ID ) ) ] = ID } func ID ( ) { }",
  "func ID ( ] { var ID : ( ) int var ID : int ID [ ( ID * ( ID ) ) ] = ID } func ID [ ) { }",
  "func ID ( ] { var ID : ( ) int var ID : { ID [ ( ID * ( ID ) ) ] = ID } func ID [ ) int }",
  "func ID ( false { var ID : bool var ID : int if 123 / true / ( ) * ( ( ( true ) ) ) ) { } while ( ( ID ) ) { } }",
  "func ID ( false { var ID ( bool var ID : int if 123 / true / : ) * ( ( ( true ) ) ) ) { } while ( ( ID ) ) { } }",
  "func ID ( false { var ID ( bool ) ID : int if 123 / true / : ) * ( ( ( true ) ) ) var { } while ( ( ID ) ) { } }",
  "func ID ( ) : bool { var ID : bool { var ID : bool var ID : int while ( ( ( - - - ID } ) ) { } } )",
  "func ID ( ) : bool { var ID : bool { var ID : bool var ID { int while ( ( ( - - - ID } ) ) : } } )",
  "func ID ( ) : bool { var ID : bool { var ID : bool var ID { int while ( ( - ( - - ID } ) ) : } } )",
  "func ID ( ) : bool { [ ID : bool var ID : var ] int return } func ID ( ) : int { var ID : bool print ID if ID { } }",
  "func ID ( ) : bool { [ ID : bool var ID : var ] int return } func var ( ) : int { ID ID : bool print ID if ID { } }",
  "func ID ( ) : bool { [ ID print bool var ID : var ] int return } func var ( ) : int { ID ID : bool : ID if ID { } }",
  "func ID ( ) { : ID var bool var ID : [ ] [ ID [ - ( ID ) ] [ - true ] ] [ ] bool }",
  "func ID ( ) { : ID var bool var [ : [ ] [ ID ID - ( ID ) ] [ - true ] ] [ ] bool }",
  "func ID ( ) { : ID var [ var [ : bool ] [ ID ID - ( ID ) ] [ - true ] ] [ ] bool }",
  "func ID ( ID : int , ID : [ ] bool ) { var ] : [ ( - ID [ - ( - false ) ] [ true ] ) ] int var ID : [ ID bool }",
  "func ID ( ID : int , ID : [ ] bool false { var ] : [ ( - ID [ - ( - ) ) ] [ true ] ) ] int var ID : [ ID bool }",
  "func ID ( ID : int , ) : [ ] bool false { var ] : [ ( - ID [ - ( - ID ) ] [ true ] ) ] int var ID : [ ID bool }",
  "func ID ( ID : [ - - - - ID [ ( ( ID ) ) ] - - [ false ] ] [ ] bool ) { }",
  "func ID ( ID : [ - - - - ID [ ( ( ID ) ) ] - - [ false ] ] } ] bool ) { [",
  "func ID ( ID : [ - - - ) ID [ ( ( ID - ) ] - - [ false ] ] } ] bool ) { [",
  "func ID ( ID : [ ] int , ID : [ ] bool while { var ID : int ) true - - ID + - true { } ID = ID } func ID ( ) { }",
  "func ID ( ID var [ ] int , ID : [ ] bool while { : ID : int ) true - - ID + - true { } ID = ID } func ID ( ) { }",
  "func ID ( ID var [ ] int , ID : [ ] ( while { : ID : int ) true - - ID + - true { } ID = ID } func ID bool ) { }",
  "func ID ( ID : [ ID ( ) and - ( 123 * 123 / - - - true ) ] { ) int }",
  "func ID ( ID : [ ID ( ) and - ( 123 * 123 / - - - true ) ] { ) int }",
  "func ID ( ID : [ ID ( ) and - ( 123 * 123 / - - - true ) ] { ) int }",
  "func ID - ) : int { var ID : bool { if ( ID [ true / ID / - - ID ] [ false ] { } } call ID ( ) } func ID ( ) { }",
  "ID ID - ) : int { var ID : bool { if ( ID [ true / ID / - - ID ] [ false ] { } } call ID ( ) } func func ( ) { }",
  "ID ID - ) : int { var ID : bool { if { ID [ true / ID / - - ID ] [ false ] { } } call ID ( ) } func func ( ) ( }",
  "func ID ( ID : [ ] ID , ID : int ) { } func ID ( ) { var ID : [ bool ] bool }",
  "func ID } ID : [ ] ID , ID : int ) { ( func ID ( ) { var ID : [ bool ] bool }",
  "func ID } ID : [ ] ID , ID : int ) { ( func ID ( ) { var ID : [ bool ] bool }",
  "func ID ( ) : bool { ID func ID ( ) { var ID : bool var ID : bool { var } : [ ID ] int var ID : int } ID = - ( ID ) }",
  "func ID ( ) : bool ID ID func ID ( ) { var { : bool var ID : bool { var } : [ ID ] int var ID : int } ID = - ( ID ) }",
  "func ID ( ID : int , ID : int ) : return ] bool { var ID : bool [ - - 123 * ID / ID }",
  "func ID ( ID : int , ID : int ) : return ID bool { var ] : bool [ - - 123 * ID / ID }",
  "func ID ) ID : int , ID : int ( : return ID bool { var ] : bool [ - - 123 * ID / ID }",
  "func ID ( ) ( bool { var ID : [ false + - ID : ( ( ( - ( ( ID ) ) ) ) ) ) + ID ] int var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) ( bool { var ID : [ false + - ID : ( ( ( - ( ( ID ) ) ID ) ) ) + ) ] int var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) ( bool { var ID : [ ( + - ID : false ( ( - ( ( ID ) ) ID ) ) ) + ) ] int var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] [ , ID : int ) : bool { var ID : bool true * true * - 123 ] int } func ID ( ) { }",
  "func ID ID ID : [ ] [ , ID : int ) : bool { var ID : bool true * true * - 123 ] int } func ( ( ) { }",
  "func ID ID ID : [ ] [ * ID : int ) : bool { var ID : bool true , true * - 123 ] int } func ( ( ) { }",
  "func ID ( ID } bool , ID : bool ) { var ID : bool var ID : [ - ( ( ID ) ) ] int } func ID ( ) { :",
  "func ID ( ID } bool , ID : : ) { var ID : bool var ID : [ - ( ( ID ) ) ] int } func ID ( ) { bool",
  "func ID ( ID } bool , ID : ( ) { var ID : bool var ID : [ - : ( ID ) ) ] int } func ID ( ) { bool",
  "func ID ( ID : bool ) { var - : int var ID : int return ( - ID * ( ( - ID 123 ) ) ) }",
  "func ID ( ID : ) bool { var - : int var ID : int return ( - ID * ( ( - ID 123 ) ) ) }",
  "func ID ( ID : ) bool ( var - : int var ID : int return ( - ID * ( { - ID 123 ) ) ) }",
  "func ID ( ) : bool { var ID : int var ID : ) ID ( true / ( true [ ) ] [ ] bool }",
  "bool ID ( ) : bool { var ID : int var ID : ) ID ( true / ( true [ ) ] [ ] func }",
  "bool ID ( ) : bool { var ) : int var ID : ID ID ( true / ( true [ ) ] [ ] func }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID int : var ID : [ true / ID ( ) ] int }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var } int : var ID : [ true / ID ( ) ] int ID",
  "func ID ( ID : int , ID : bool , ID : bool ) ] var } int : var ID : [ true / ID ( ) { int ID",
  "func ID ( ID : int , ID : bool : : int { var ID : bool var ID ) int if 123 * ( 123 ) / ID { } } func ID ( ) { }",
  "func ID ( ID ID int , ID : bool : : int { var ID : bool var ID ) int if 123 * ( 123 ) / ID { } } func : ( ) { }",
  "func ID ( ID ID int , ID : bool : : int { var ID : bool var ID ) int if 123 func ( 123 ) / ID { } } * : ( ) { }",
  "func ID ( ) { var ID : [ bool ] ID = ( false * - false <= ( ID ) ) while false { } }",
  "func ID ) ( { var ID : [ bool ] ID = ( false * - false <= ( ID ) ) while false { } }",
  "func ID ) ( { var ID : [ ID ] ID = ( false * - false <= ( bool ) ) while false { } }",
  "func ID ( ID : int , ID : int , } : bool ) { var ID : int var ID : int if false / - ( - ( - ID ) ) / 123 { } ID func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : int var } : int if false / - ( - ( - ID ) ) / 123 { } ID func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool / { var ID : int var } : int if false / - ( - ( - ID ) ) ) 123 { } ID func ID ( ) { }",
  "func ID ) ) : [ false + ( 123 * ( ( - - ( true ( ) ) * ID ) ] bool { }",
  "func ID ) ) ( [ false + ( 123 * ( : - - ( true ( ) ) * ID ) ] bool { }",
  "func ID ) ) ( [ false + ( 123 * ( : true - ( - ( ) ) * ID ) ] bool { }",
  "func ID ( ) { var ID : int var ID : bool print - true / ID ( ) [ - ID ] [ - ( ID ( ] * ( ( ID ) ) ID = false } func ID ) ) { }",
  "} ID ( ) : [ ] int { ID ( 123 / ( ( - - ID ) ) ) = ID while - true { } func",
  "} ID ( ID : [ ] int { ) ( 123 / ( ( - - ID ) ) ) = ID while - true { } func",
  "} ID ( ID : [ ] int { ) ( true / ( ( - - ID ) ) ) = ID while - 123 { } func",
  "func int ( ID : bool , ID : bool ) { var ID : [ ID ( ) / ( ID ) ] bool var ID : ID } func ID ( ) { }",
  "func : ( ID : bool , ID : bool ) { var ID : [ ID ( ) / ( ID ) ] bool var ID int ID } func ID ( ) { }",
  "func : ( ID : bool , ID : bool ) { var ID : [ ID ( ) / ( ID ) ] ID var bool int ID } func ID ( ) { }",
  "func ID ( ) { true false and ( - ID [ - - - - ID ] [ print ] ) and ID { } }",
  "func ID ( ) { true false and ( - ID [ - ] - - ID - [ print ] ) and ID { } }",
  "func ID ( and { true false ) ( - ID [ - ] - - ID - [ print ] ) and ID { } }",
  "func ID ( ID ) [ ] bool , ID : bool : : int { { call ID ( ) print ID ( ) } } func ID ( ) { }",
  "( ID func ID ) [ ] bool , ID : bool : : int { { call ID ( ) print ID ( ) } } func ID ( ) { }",
  "( ID func ID ) [ ] bool , ID : bool : : int { { ) ID ( call print ID ( ) } } func ID ( ) { }",
  "func ID ( ) : int { while ID ( ] [ ID * - 123 >= - false ] [ ( - ( ID ) ) ) { } { } } func ID ( ) { }",
  "func } ( ) : int { while ID ( ] [ ID * - 123 >= - false ] [ ( - ( ID ) ) ) { ID { } } func ID ( ) { }",
  "func } func ) : int { while ID ( ] [ ID * - 123 >= - false ] [ ( - ( ID ) ) ) { ID { } } ( ID ( ) { }",
  "func ID ( ) : [ - ID [ true / ID ( [ + ( - true ) + - true ] ] ) ] int { } func ID ( ) { }",
  "func ID ( ) : [ - ID [ ( / ID true [ + ( - true ) + - true ] ] ) ] int { } func ID ( ) { }",
  "func ID ( ) : [ - ID [ ( / ID true [ + ( - true ) + - true ] ] ) ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( 123 / - - false / ( ( ( ID ) ) ) ) ] int } ID func ( ) { }",
  "func ID ( ) { var ID : [ ( 123 / - - false ) ( ( ( ID / ) ) ) ] int } ID func ( ) { }",
  "func ID ( ) { var ID : [ ( 123 / - - false ) ( ( ( ID / ) ) ( ] int } ID func ) ) { }",
  "func ID ( ID : bool , ID : [ - 123 * - ( ID ( ) [ ID ] ) / ] true int ) { } func ID ( ) { }",
  "func ID ( ID ] bool , ID : [ - 123 * - ( ID ( ) [ ID : ) / ] true int ) { } func ID ( ) { }",
  "func ID ( ID ] bool , ID : [ - 123 / - ( ID ( ) [ ID : ) * ] true int ) { } func ID ( ) { }",
  "func ID ( ID : * - ( 123 / true [ false != ( ID ) ) ] int ) { }",
  ") ID ( ID : * - ( 123 / true [ false != ( ID ) func ] int ) { }",
  ") ID 123 ID : * - ( ( / true [ false != ( ID ) func ] int ) { }",
  "func ID ( ) : ( { return } func ID int ) { }",
  "ID func ( ) : ( { return } func ID int ) { }",
  "ID func ( ) : ( { return } func ID int { ) }",
  "func ID ) ID : bool ( { var ID : bool { var ID : [ ] [ 123 * ( ID ) * true ] [ ] [ ] int } }",
  "func ID ) ID : bool ) { var ID : bool { var ID : [ ] [ 123 * ( ID ( * true ] [ ] [ ] int } }",
  "func ID ( ) ] bool { return ID [ ID [ ( ID ) ] [ true ] : [ ID ] } func ID ( ) { }",
  "func ID ( ) ] bool { return ID [ ID [ ID ID ) ] [ true ] : [ ( ] } func ID ( ) { }",
  "func ID func ) ] bool { return ID [ ID [ ID ID ) ] [ true ] : [ ( ] } ( ID ( ) { }",
  "func ID ( ID : bool while { var ID : bool while 123 / ID - ( true ) + true { } ) ID { } } func ID ( ) { }",
  "func ID ( ID : bool while { var ID : bool while 123 / ID - func true ) + true { } ) ID { } } ( ID ( ) { }",
  "func } ( ID : bool while { var ID : bool while 123 / ID - func true ) + true { } ) ID { } } ( ID ( ) { ID",
  "func ID ( ) { } : ID ( ID func bool ) : bool { var ID : [ ] [ - true ] [ ] int var ID : [ ] [ ] bool }",
  "func ID ( ) [ } : ID ( ID func bool ) : bool { var ID : [ ] { - true ] [ ] int var ID : [ ] [ ] bool }",
  "func ID ( ) [ } : ID ( ID func bool ) { bool { var ID : [ ] : - true ] [ ] int var ID : [ ] [ ] bool }",
  "func ID ( ) { var ID { int print ID [ false + ( ( ( - ID ) ) ) + - true ] } func ID ( ) : }",
  "func ID ( ) { var ID { int print ( [ false + ID ( ( - ID ) ) ) + - true ] } func ID ( ) : }",
  "func ID ( ) { var + { int print ( [ false + ID ( ( - ID ) ) ) ID - true ] } func ID ( ) : }",
  "func ID ( ID : int ) { var ID : [ ] [ ] [ - ( ID bool ( ID ) ) ] int var ID : / }",
  "func ID int ID : int ) { var ID : [ ] [ ] [ - ( ID bool ( ID ) ) ] ( var ID : / }",
  "func ID int ID : int ) { var ID : [ ] [ ID [ - ( ID bool ( ID ) ) ] ( var ] : / }",
  "func ID ( ) : bool { print ( false * 123 / true ID - ID or - ( 123 ) ) } func or ( ) { }",
  "( ID ( ) : bool { print func false * 123 / true ID - ID or - ( 123 ) ) } func or ( ) { }",
  "( - ( ) : bool { print func false * 123 / true ID - ID or ID ( 123 ) ) } func or ( ) { }",
  "func ID ( ) : [ ] { int return - false * - ID ( ID ( ) ) } func ID ( ) { }",
  "func ID ( ) : [ ( { int return - false * - ID ( ID ] ) ) } func ID ( ) { }",
  "func ID ( ) : [ ( ( int return - false * - ID { ID ] ) ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : int if 123 / ID ( ( ( - } ) ) ) { false print - false }",
  "func int ( ) : ID { var ID : bool var ID : int if 123 / ID ( ( ( - } ) ) ) { false print - false }",
  "func int ( ) : ID { var { : bool var ID : int if 123 / ID ( ( ( - } ) ) ) ID false print - false }",
  "func ID ( ID : [ ] int , ID : int ) { ID [ ID = ID ] ] [ false }",
  "func ID ( ID : ID ] int , [ : int ) { ID [ ID = ID ] ] [ false }",
  "func ID ( ID : ID ] int , [ : ) int { ID [ ID = ID ] ] [ false }",
  "func ID ( ) { ID [ ) / ID ( - - ID [ ( ( ID false ) ] ) / ID ] [ ID ] = ( - 123 ) ID = ( - ID ) }",
  "func - ( ) { ID [ ) / ID ( - - ID [ ( ( ID false ) ] ) / ID ] [ ID ] = ( - 123 ) ID = ( ID ID ) }",
  "func - ( ) { ID [ ) / ID ( } - ID [ ( ( ID false ) ] ) / ID ] [ ID ] = ( - 123 ) ID = ( ID ID ) -",
  "func ID ( ID : [ ] int var ID : [ ] int , ID : int ) : bool { , ID : int var ID : bool { } }",
  "func ID ( ID : : ] int var ID : [ ] int , ID : int ) : bool { , ID : int var ID [ bool { } }",
  "func ID ( ID : : ] int var ID : [ ] int , ID : int ) : bool ID , ID : int var { [ bool { } }",
  "func ID ( ) { var ID : int { var ID : bool ) ID : int ID = ID ( 123 var { } } }",
  "func ID ( ) { var ( : int { var ID : bool ) ID : int ID = ID ID 123 var { } } }",
  "func ID ( ) { var ( : int { var ID : bool ) ID : } ID = ID ID 123 var { } } int",
  "func ID ( ID : int ) { var ID : int while ( true * - ID * ID ) { } while ID { } ( func ID } ) { }",
  "func ID ( ID : int ) { var ID ( int while ( true * - ID * ID ) { } while ID { } : func ID } ) { }",
  "func ID ( ID : int ) { var ID ( int while ( true * - ID * ID ) { } while } { } : func ID ID ) { }",
  "func ID ( ) : bool { ( ID return true / - - false * - - - - - true ) } func ID ( ) { }",
  "( ID ( ) : bool { func ID return true / - - false * - - - - - true ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : int print - - false * ID ( ) [ - true } * false print ID ]",
  "func ID ( ) : int { false ID : bool var ID : int print - - false * ID ( ) [ - true } * var print ID ]",
  "func ID ( ) : int { false ID : bool var ID : ID print - - false * ID ( ) [ - true } * var print int ]",
  "ID ID ( ) { func [ ( ( 123 + ( - ID ) ) ) ] [ true ] = ( - ( ( ( false ) ) ) ) if - false { } }",
  "ID ID ( ) { func [ ( ( 123 + ( - ID ) ) ) ] [ true ] = ( - ( ( ( false ) ) ) ) if - false { } }",
  "ID ID ( ) { func [ ( ( 123 + ( - ID ) ) ( ] [ true ] = ( - ( ) ( false ) ) ) ) if - false { } }",
  "func ID ( ID : bool , ID : [ true / - - false or - false * ( ID ) or false { int , ID : bool ) ] }",
  "func ID ( ID : bool , ID : [ true / - - false or ID false * ( - ) or false { int , ID : bool ) ] }",
  "func ID ( ID : bool , ID { [ true / - - false or ID false * ( - ) or false : int , ID : bool ) ] }",
  "func ID ( ) : bool { } func ID ( ID : int , ID : bool ) { var ID : int var : ID bool { var ID : [ ] int var ID : int } print - false }",
  "func ID ( ) : bool { } var ID ( ID : int , ID : bool ) { func ID : int var : ID bool { var ID : [ ] int var ID : int } print - false }",
  "func ID ( ) : bool { } var ID ( ID : int , ID : bool ) ID func { : int var : ID bool { var ID : [ ] int var ID : int } print - false }",
  "func ID ( ID } [ - ( - ( - ( - true ) ) ) ] [ ] int ) { :",
  "func ID ( - } [ - ( - ( ID ( - true ) ) ) ] [ ] int ) { :",
  "func ID ( - } [ - ( - ( ID ( - ) true ) ) ] [ ] int ) { :",
  "+ ID ( ) { if ID ( ) [ - - true * true - - - ID func ID ] [ false ] { } } func ID ( ) { }",
  "+ ID ( ) { if ID ( ) [ - - true * true - - - ID func ID ] [ false ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool { var ID : [ ID ( ID ) ] [ ] int var ID : int } while ID ( false ) { } } func - ( ) { }",
  "func ID : ) { var ID : int var ID : bool { var ID : [ ID ( ID ) ] [ ] int var ID ( int } while ID ( false ) { } } func - ( ) { }",
  "func ID : ) { var ID : int var ID : bool { var ID : [ ID ( ID ) ] [ ] int var ID ( int } while ID ( false ) { } } func - ( ) { }",
  "func ID ( ID : : ] int ) : int { var ID [ int var ID : [ ID ( - - ( ( ID ) ) ) ] [ ] bool }",
  "func ID ID ID : : ] int ) : int { var ( [ int var ID : [ ID ( - - ( ( ID ) ) ) ] [ ] bool }",
  "func ID ID ID : : ] int ) : int { var ( [ int var ID : [ ID ( - - ( ( ID ) ) ) ] [ ] bool }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ( : int { var ID : bool var ID : bool if ID { } } ID = ID ( ID ) ) }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ( : int { var ) : bool var ID : bool if ID { } } ID = ID ( ID ID ) }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ( : int { var ) : bool var ID : bool if ID { } } ID = ID ( ID ID ) }",
  "func ID } ) { call ID ( true * ( ( ID [ - - - ( - ( false ) ) ] ) ) / - ID ) while ID { } (",
  "func ID } ) { ( ID ( true * call ( ID [ - - - ( - ( false ) ) ] ) ) / - ID ) while ID { } (",
  "func ID } ) { ( true ( ID * call ( ID [ - - - ( - ( false ) ) ] ) ) / - ID ) while ID { } (",
  "func ID ( ID : [ ] [ ] ( ) [ ID ( ) and ID and false ] [ ( true ) ] ID bool ) { }",
  "func ID ( ID : [ ] [ ] ( ) [ ID ( ) and ID and false ] [ ( true ) ] ID bool ) { }",
  "func ID ( ID : [ ] [ ] ( ID [ ID ( ) and ID and false ] [ ( true ) ] ) bool ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) { var ID : int var ID } bool { ID ( ) [ ID ] = false : }",
  "func ID ( ID : bool , ID : [ ] bool : { var ID : int var ID } bool { ID ( ) [ ID ] = false ) }",
  "func ID ( ID : bool , var : [ ] bool : { ID ID : int var ID } bool { ID ( ) [ ID ] = false ) }",
  "func ID ( ) { var ID : [ false * false - ( - - ( ) ) ID ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ false * false { ( - - ( ) ) ID ] int } func ID ( ) - }",
  "false ID ( ID : [ func / ID ( 123 * - true and ID and ID ) ] bool ) { }",
  ": ID ( ID false [ func / ID ( 123 * - true and ID and ID ) ] bool ) { }",
  ": ID ( func false [ ID / ID ( 123 * - true and ID and ID ) ] bool ) { }",
  "func ID ( ) { var ID : bool var ID : int ) ID ( ( false + 123 / ( - false call * - - ID + ID ) ) ID = ( ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int ) ID ( ( false + 123 / ( - false call * - - + ID ID ) ) ID = ( ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int ) ID ( ( false + 123 / ( { false call * - - + ID ID ) ) ID = ( ID ) } func ID ( ) - }",
  "func ID ( ID : bool ) : [ ( [ ] int { var ID : int if - true + ( 123 ) + ( ( true ) ) { } ID = ( ] ID ) ) } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ( [ ] int { ) ID : int if - true + ( 123 var + ( ( true ) ) { } ID = ( ] ID ) ) } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ( [ ] ID { ) ID : int if - true + ( 123 var + ( ( true ) ) { } int = ( ] ID ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int , [ : int ) { return } func ID ( ID : [ ID ] ID ] bool ) { }",
  "func ID ( ID : bool { ID : [ ] int , [ : int ) { return } func ID ( ID : [ ID ] ID ] bool ) , }",
  "func ID ( ID : bool { ID : [ ] int , [ : int ) { return } func ID ID ID : [ ID ] ( ] bool ) , }",
  "func ID ( ) { var ID : bool var ID : } while ID ( ) [ - ( ID ) ] [ true ] { int { } }",
  "func ID ( ) { var ID : } var ID : } while ID ( ) [ - ( ID ) ] [ true ] { int { bool }",
  "func ID ( ) { var ID : } var ID : } while ID ( ) [ - ( ID ) ] [ true ] { int { bool }",
  "func ID ( ID : [ ] [ - ID ) ) [ ( - ( ID ) ) ] [ ( ( ( - ID ) ) ) ] ] bool ( { } func ID ( ) { }",
  "func ID ( ID : [ ] [ - ID ) ) [ ( - ( ID ) ) ] [ ( ( ( - ID ( ) ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ( [ - ID ) ) [ ( - ( ID ) ) ] [ ( ( ( - ID ] ) ) ] ] bool ) { } func ID ( ) { }",
  ") ID ( ID : bool , ID : int , ID : int func { print ( ID ( ) [ ( ID ) ] [ ID ] ) while 123 { } } func ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( false / - ( true - 123 ) ) print ( ID ) } ( ID func ) { }",
  "func ID ( ) { var ID : int call ID false ( / - ( true - 123 ) ) print ( ID ) } ( ID func ) { }",
  "func ID ) ( { var ID : int call ID false ( / - ( true - 123 ) ) print ( ID ) } ( ID func ) { }",
  "func ID ( ID : [ 123 / - ID [ 123 / ( - false ) / - ID ] [ - - [ ID ) ] ] ( ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ 123 / - ID [ 123 / ( - false ) / - ID ( [ - - [ ID ) ] ] ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : func 123 / - ID [ 123 / ( - false ) / - ID ( [ - - [ ID ) ] ] ] ] bool ) { } [ ID ( ) { }",
  "func ID ( ) : int { var ID } int call ID ( ) :",
  "func ID ( call : int { var ID } int ) ID ( ) :",
  "func ( ( call : int { var ID } int ) ID ID ) :",
  "func ID ( ) : ID { var ID : bool var ID : [ 123 + - int [ false ] [ ID ] ] bool }",
  "func ID } ) : ID { var ID : bool var ID : [ 123 + - int [ false ] [ ID ] ] bool (",
  "func ID } ) : ID { bool ID : bool var ID : [ 123 + - int [ false ] [ ID ] ] var (",
  "func ID ( ) } call ID ( ) while - ID ( ) - true * ID * ( - - ( 123 ) ) - ID { } {",
  "func ID ( } } call ID ( ) while - ID ( ) - true * ID * ( - - ( 123 ) ) - ID { ) {",
  "func ID ( * } call ID ( ) while - ID ( ) - true } ID * ( - - ( 123 ) ) - ID { ) {",
  "func ID ( ) { var ID : int { var ID : [ ] int } { var ID : [ ( 123 ) ] func } } int ID ( ) { }",
  "func ID ( ) { var ID : [ { var ID : int ] int } { var ID : [ ( 123 ) ] func } } int ID ( ) { }",
  "func ID ( ) { var ID : [ { var ID func int ] int } { var ID : [ ( 123 ) ] : } } int ID ( ) { }",
  "func ID ( ) : [ 123 / [ - - ( false / - ( ( - false ) ) ) ) ] ( ] int { }",
  "func ID ( - : [ 123 / [ - ) ( false / - ( ( - false ) ) ) ) ] ( ] int { }",
  "func ID ( ID : [ ] bool , ID var int ) { : ID : [ 123 / ID [ ( true ) ] ] int } func ID ( ) { }",
  "func ID } ID : [ ] bool , ID var int ) { : ID : [ 123 / ID [ ( true ) ] ] int } func ID ( ) { (",
  "func ID } ID : [ ] bool , ID var int ) ] : ID : [ 123 / ID [ ( true ) { ] int } func ID ( ) { (",
  "func ID ( ) : bool { var ID { int var ID : bool if - ID [ ID ( ) ] : } print ID }",
  "func ID ( ) : bool { int ID { var var ID : bool if - ID [ ID ( ) ] : } print ID }",
  "func ID ( ) : bool { int ID var { var ID : bool if - ID [ ID ( ) ] : } print ID }",
  "func ID ( ) { if func / ( ( ID [ - ( ID ) ] [ 123 ] ) ) { } ID = - ID } true ID ( ) { }",
  "func ID ( ) { if func / ( ( ID [ - ( ID ) ] [ 123 ] ) ) { } ID = - ID } true ID ( ) { }",
  "func ID ( ) { if func / ( ( ID [ - ( ID ) ] [ 123 ] ) ) { } ID = - ID } true ID ( ) { }",
  "func ID ( ) : int { var ID : bool var : ID [ ] int print ( ID / - ( ID ) ) }",
  "func ID ( ) : ( { var ID : bool var : ID [ ] int print int ID / - ( ID ) ) }",
  "func ID ( ) : ( } var ID : bool var : ID [ ] int print int ID / - ( ID ) ) {",
  "func ID ( ID : bool ) / bool { { print - false : false <= - ( ID ) ID = ( ID ) } }",
  "func ID ( ID : bool ) / false { { print - bool : false <= - ( ID ) ID = ( ID ) } }",
  "func print ( ID : bool ) / false { { ID - bool : false <= - ( ID ) ID = ( ID ) } }",
  "func ID ( ) { var ID : [ - - var 123 and - ID ( true ) ] [ ] int - ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ - - var 123 and - ID ( true ) ] [ ] ID - int : bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ - - var bool and - ID ( true ) ] [ ] ID - int : 123 } func ID ( ) { }",
  "func ID ( ) : int { var ID : int if 123 * false - false - / ( - - ID ) * ( ID ) { } { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int if 123 * false - false - / ( - - ID ) * ( ID ) { } { } } func ID ( ) { }",
  "func ID ( ) - int { var ID : int if 123 * false - false - / ( - : ID ) * ( ID ) { } { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : ] ] [ ID [ ( true ) ] [ int } func ID ( ) { }",
  "func ID ( ) : int { var ID : ] ] [ ID [ ( true ) ] [ int } func ID ( ) { }",
  "func ID ( ) : int { var ID : ] ] } ID [ ( true ) ] [ int [ func ID ( ) { }",
  "func ID ( ID { return ) / ( - ( 123 * - ( false ) / - - ID ) ) }",
  "func ID ( ID { return ) / ( - ( 123 * - ( false ) / - - ID ) ) }",
  "func ID ( ID { return - / ( - ( 123 * - ( false ) / - ) ID ) ) }",
  "func ID ( ID : ) ] [ ] bool , ID : int , ID : bool [ { var ID : bool { ID [ 123 ] = - ( - ( 123 ) ) } } func ID ( ) { }",
  "func ID ( ID : ) ] [ ] bool , ID : int , ID : bool [ { var ID : bool { ] [ 123 ID = - ( - ( 123 ) ) } } func ID ( ) { }",
  "func ID ( ] : ) ] [ ID bool , ID : int , ID : bool [ { var ID : bool { ] [ 123 ID = - ( - ( 123 ) ) } } func ID ( ) { }",
  ") ID ( ID : [ ID ( func [ 123 + - ( 123 ) ] ] int ) { } func ID ( ) { }",
  ") ID ( ID : [ func ( ID [ 123 + - ( 123 ) ] ] int ) { } func ID ( ) { }",
  ") ID ( ID : 123 func ( ID [ 123 + - ( [ ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] int { ID var : int var ID : bool }",
  "func ID ( ID : int ) : [ ] int { ID var : int var ID : bool }",
  "func ID int ID : int ) : [ ] ( { ID var : int var ID : bool }",
  "func ID ( ID : bool , ) : [ ] bool ID : bool { var ID : [ - - ( false ) ] int var ID : [ ] bool }",
  "func ID ( ID : bool , ) : [ ] ] ID : bool { var ID : [ - - ( false ) bool int var ID : [ ] bool }",
  "func ID ( ID : bool , ) : [ ] ] ID : bool { : ID var [ - - ( false ) bool int var ID : [ ] bool }",
  "func ID ( ) : bool { var ID : int return } func ID ( ID : bool , ID : int ) { print - false print ( ) - ( true ) ) ( }",
  "func ID ( ) : } { var ID : int return } func ID ( ID : bool , ID : int ) { print - false print ( ) - ( true ) ) ( bool",
  "func ID ( ) : } { var ID : int return func } ID ( ID : bool , ID : int ) { print - false print ( ) - ( true ) ) ( bool",
  "func ID ( - : bool { { } if 123 + - ) - - ( ( true ) ) { } } func ID ( ) { }",
  "func ID ( - : bool { { } ( 123 + - ) - - ( ( true ) ) { } } func ID if ) { }",
  "func ID ( ) int var ID : int { var ID : [ ( ID [ ( ID ) ] ) ] int var ID : [ ] { } print ( ID ) }",
  "func ID ( ) var var ID : int { var ID : [ ( ID [ ( ID ) ] ) ] int int ID : [ ] { } print ( ID ) }",
  "func ID ( ID var var ID : int { var ID : [ ( ) [ ( ID ) ] ) ] int int ID : [ ] { } print ( ID ) }",
  "ID func ( ID : bool ) : bool { var ID : [ ] [ ] bool } func ID ( ) { var ID : [ ] [ ] [ ] [ ] int }",
  "ID func ( ID : bool ) : bool ID var { : [ ] [ ] bool } func ID ( ) { var ID : [ ] [ ] [ ] [ ] int }",
  "ID func ( ID : bool ) : bool ID var { : [ ] ] [ bool } func ID ( ) { var ID : [ ] [ ] [ ] [ ] int }",
  "func ID ( ID : bool , ID : ID ) { var ID : [ true / true / - - 123 != ID ] int } func bool ( ) { }",
  "func ID ( ID : bool , ID : ID ) { var ID : [ true / true / - - 123 != ID ] int } func bool ( ) { }",
  "func ID true ID : bool , ID : ID ) { var ID : [ true / ( / - - 123 != ID ] int } func bool ( ) { }",
  "func ID ( ID ID [ ] [ ] int , ID : int ) : bool { var ID : [ ] int var : : bool while true { } }",
  ": ID ( ID ID [ ] [ ] int , ID : int ) func bool { var ID : [ ] int var : : bool while true { } }",
  "func ID ( ) : bool { var ID : [ : ( ( ID * - ( ( - - true ) ) * ID ) ) ] bool var ID ID bool }",
  "func ID ( ) : bool { var ID : [ : ( ( ID * - ( ( - - true ) ) * ID ) ) ] bool var ID ID bool }",
  "func ID ( ) : true { var ID : [ : ( ( ID * - ( ( - - bool ) ) * ID ) ) ] bool var ID ID bool }",
  "func ID ( ) { while ( ( ( { ( true ) ) ) ) - } } func ID ( ) { }",
  "func ID ( ) { while ( ( ( { ( true ) ) ) ) - } } func ID ( ) { }",
  "func ID ( ) { while ( ( ( { ( true ) ) ) } - } } func ID ( ) { )",
  "func ID ( ) { ] ID : bool if ID ( ) / ID [ 123 > false var [ 123 ] { } print ID } func ID ( ) { }",
  "func ID ( ) { ] ID : bool var ID ( ) / ID [ 123 > false if [ 123 ] { } print ID } func ID ( ) { }",
  "func ID ( ) { ] ID : bool var ID ( ) / ID [ 123 { false if [ 123 ] > } print ID } func ID ( ) { }",
  "func ID ( ID : [ - false * ( ( ( ID ) ) ) true ( - - - * ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ - false * ( ( ( ID { ) ) true ( - - - * ) ] int ) { } func ID ( ) ) }",
  "func ID ( ID : [ - false * ( ( ( ID { ) ) true ( - - - * ) ID int ) { } func ] ( ) ) }",
  "func ID ( ID : bool , ID : [ - and ID ( - ID [ ( ID ) ] [ false ( false ) ] ) and - true ] int , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - and ID bool - ID [ ( ID ) ] [ false ( false ) ] ) and - true ] int , ID : [ ] ( ) { } func ID ( ) { }",
  "func ID ( ID : , bool ID : [ - and ID bool - ID [ ( ID ) ] [ false ( false ) ] ) and - true ] int , ID : [ ] ( ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int : ID var int ID [ - ID [ ID ] ] [ ID ] = - 123 if true { } }",
  "func ID ( ) : } { var ID : int : ID var int ID [ - ID [ ID ] ] [ ID ] = - 123 if true { } int",
  "func ID ) ( : } { var ID : int : ID var int ID [ - ID [ ID ] ] [ ID ] = - 123 if true { } int",
  "func ID ( ) { var ID : bool { if - 123 != ID [ ID ] { } { } } } ) ID ( func { }",
  "func ID ( ) { var ID : } { if - 123 != ID [ ID ] { } { } } bool ) ID ( func { }",
  "func ID ( ) { var ID : } { if - 123 != ID { ID ] { } [ } } bool ) ID ( func { }",
  "func ID ( ) { var ID : [ ] bool var ID : { ] [ ] bool return ( ID ) } func ID ( ) [ }",
  "func ID ( ) { var ID : [ ] bool var ID : ) ] [ ] bool return ( ID ) } func ID ( { [ }",
  "func ID ( ) : bool { while } [ - true / - ( ID ) ] { } ID = ID } func ID ( ) { ID",
  "func ID ( ) : bool { while } [ - true / - ( ID ) ] { } ID = ID } func ID ( { ) ID",
  "func ID func ) : bool { while } [ - true / - ( ID ) ] { } ID = ID } ( ID ( { ) ID",
  "func ID ( ) false bool { ID [ false * - : or - ( ID ) ] = 123 } func ID ( ) { }",
  "func ID ( ) false bool { ID [ false * - : or - ( ID ) ] { 123 } func ID ( ) = }",
  "func ID ( ) false bool or ID [ false * - : { - ( ID ) ] { 123 } func ID ( ) = }",
  "func ID ( ) : [ ] [ ID / - ID ( ( ( ( ID ] ) ) ) / false ) int { }",
  "func ID ( ) : [ ] [ ID / - ID ( } ( ( ID ] ) ) ) / false ) int { (",
  "func ID ( ID : int , ID : bool ) : bool { var ID : [ int false + false - ID ] - }",
  "func - ( ID : int , ID : bool ) : bool { var ID : [ int false + false - ID ] ID }",
  "func - ( ID : int , ID : bool ) : bool { var ID : [ int false + false - ID ] ID }",
  "func ID ( ) : - { while ID ( 123 / ( true * int ID / ID ) ) { } }",
  "func ID ( ) : - { while ID ( 123 / ( true / int ID * ID ) ) { } }",
  "func ID ( ID : bool ) { var ID : [ - ( ID ( ) [ ( ( ( - - true ) ) ) ] [ - ID ] ) ] int } func ID ( } { )",
  "func ID ( ID : } ) { var ID : [ - ( ID ( ) [ ( ( ( - - true ) ) ) ] [ - ID ] ) ] int } func ID ( bool { )",
  "func - ( ID : } ) { var ID : [ ID ( ID ( ) [ ( ( ( - - true ) ) ) ] [ - ID ] ) ] int } func ID ( bool { )",
  "func ID func ) { var ID : [ ] bool if - - - false * - - ( ID ) { } if ( ID ) { } } ( ID ( ) { }",
  "false ID func ) { var ID : [ ] bool if - - - func * - - ( ID ) { } if ( ID ) { } } ( ID ( ) { }",
  "false ID func ) { var ID : [ ] bool if - - - func * ) - ( ID ) { } if ( ID - { } } ( ID ( ) { }",
  "func ID ( - : [ ] int { var ID : [ - - ( ) ID ( ) [ ( ( ( - 123 ) ) ) ] ) ] bool }",
  "func ID ( - : [ ] int { var ID ) [ - - ( ) ID ( ) [ ( ( ( - 123 ) ) : ] ) ] bool }",
  "func ID ( - ) [ ] int { var ID ) [ - - ( ) ID ( ) [ ( ( ( - 123 ) ) : ] : ] bool }",
  "[ ID ( ID : bool , ID : bool , ID : int ) : [ ] [ ] bool { var ID : func - ( - ID ) ] bool var ID : [ ] bool }",
  "[ ID ( ID : bool , ID ID bool , ID : int ) : [ ] [ ] bool { var : : func - ( - ID ) ] bool var ID : [ ] bool }",
  "[ ID ( ID : ID , bool ID bool , ID : int ) : [ ] [ ] bool { var : : func - ( - ID ) ] bool var ID : [ ] bool }",
  "func ID ( ID : int , ID : bool , ID : ) 123 * ID ( [ and - - ( ( - true ) ) and false ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : ) 123 * ID ( [ and - - false ( - true ) ) and ( ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : ) 123 * ID ( [ and - - false ( - true ) ) and ( } [ ] [ ] int ) { } func ID ( ) { ]",
  "func ID ( ) { print false / ( ID [ / * - ID / ID ] ) true 123 } func ID ( ) { }",
  "func ID ( ) { print false / ( ID ] / * - ID / ID [ ) true 123 } func ID ( ) { }",
  "func ID ] ) { print false / ( ID ( / * - ID / ID [ ) true 123 } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool , ID : int ) : int { var ID : [ ( ( - false ) ) ] [ ] [ ] [ [ int var ID : [ ] [ ] ] ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ID : int ) : int { var ID : [ ( ( - false ) ) ] [ ] [ ] [ [ bool var ID : [ ] [ ] ] ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : : ] int , ID : int ) : int { var ID : [ ( ( - false ) ) ] [ ] [ ] [ [ bool var ID [ [ ] [ ] ] ] [ ] [ ] int } func ID ( ) { }",
  "func : ( ) : bool { var ID ID [ ] [ - ID ( ) / ( - false ) ] bool } func ID ( ) { }",
  "func : ( ) : bool { var ID ID [ ] [ - ID ( ) / ( - false ) ] bool } func ID ( ) { }",
  "func ) ( ) : bool { call ID ( ID ( - - - ID [ ( false ) ] ) ) if - ID { } } func ID ( ID { }",
  "if ) ( ) : bool { call ID ( ID ( - - - ID [ ( false ) ] ) ) func - ID { } } func ID ( ID { }",
  "if ) ( func : bool { call ID ( ID ( - - - ID [ ( false ) ] ) ) func - ID { } } ) ID ( ID { }",
  "func ID ( ID : bool , ID : bool ] ID : [ ( ID [ - - ( true ) , ) ] bool ) { }",
  "func ID ( ID : bool , ID : bool ] ) : [ ( ID [ - - ( true ID , ) ] bool ) { }",
  "func ID ( ID : bool , ID : bool ] ) : [ ( bool [ - - ( true ID , ) ] ID ) { }",
  "func ) ( ) : [ ( ID ( ( ( ( true ID ) ) ) ) ] bool { }",
  "func ) ( ) : [ ( ID ( ) ( ( true ID ) ( ) ) ] bool { }",
  "func ) ( ) : [ ( ID ) ( ( ( true ID ) ( ) ) ] bool { }",
  "bool ID ( ID : func , ID : [ ID ( ) * - false + 123 - - - 123 ] bool ) { } func ID ( ) { }",
  "bool ID ( ID : ID , ID : [ func ( ) * - false + 123 - - - 123 ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool ) ID int { var ID : int while - ( false ) { } } func : ( ) { }",
  "func ID ( ID ) [ ] [ ] bool ) ID int { var ID : int while - ( false : { } } func : ( ) { }",
  "func false ( ID ) [ ] [ ] bool ) ID int { var ID : int while - ( ID : { } } func : ( ) { }",
  "func ID ( ID : [ ] int , ID bool : , ID : int ) { ID [ ID ( ) [ ( - ID ) ] [ ( ( - ID ) ) ] ] = ( true ) { } }",
  "func ID ( ID : : ] int , ID bool [ , ID : int ) { ID [ ID ( ) [ ( - ID ) ] [ ( ( - ID ) ) ] ] = ( true ) { } }",
  "func ID ( ID : : ] int , ID bool [ , ID : [ ) { ID [ ID ( ) [ ( - ID ) ] int ( ( - ID ) ) ] ] = ( true ) { } }",
  "func ID ( ID : bool , ID : int ) { { var ID ] [ - true + ( ID ) - false ] [ : int } }",
  "func ID ( ID : bool , ID : int ) { { var ID ] [ - true + ( ID false - ) ] [ : int } }",
  "func ID ( ID : bool , ID : int ) { { var ID ] [ - true + ( ID false - ) ] [ : int } }",
  "func ID ( ) : [ ] int { var [ : [ ID ( 123 * ID ID ( ( ID ) ) ] [ false ] ) ] int var ID : bool }",
  "func ID ( ) : [ ] int { var [ ] [ ID ( 123 * ID ID ( ( ID ) ) ] [ false ] ) : int var ID : bool }",
  "func ID ( ) : [ ] int { var ] [ [ ID ( 123 * ID ID ( ( ID ) ) ] [ false ] ) : int var ID : bool }",
  "func ID ( ) { call ID ( ( ID [ 123 } ( ID ) - 123 ] ) ) ID = false - func ID ( ) { }",
  "func - ( ) { call ID ( ( ID [ 123 } ( ID ) - 123 ] ) ) ID = false ID func ID ( ) { }",
  "func - ( ) { call ID ( ( = [ 123 } ( ID ) - 123 ] ) ) ID ID false ID func ID ( ) { }",
  "func ID ( ) { ( false / return ID ( 123 >= - ID ) ) }",
  "func ID ( ) { ( false ) return ID ( 123 >= - ID / ) }",
  "( ID func ) { ( false ) return ID ( 123 >= - ID / ) }",
  "func ID ( ID : int , ID : [ ] bool ) : [ / * - ID true ( - ID ) ] int { }",
  "func ID ( ID { int , ID : [ ] bool ) : [ / * - ID true ( - ID ) ] int : }",
  "func ID ( ID { int , ID : [ ] bool ) : [ / * - ID ( true - ID ) ] int : }",
  "func ID ( ID : int , { : int ) : int ID var ID : [ ( false * false / true ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : int , { : int ) : int ID var ID : [ ( false * false / true ) ] int var { : int } func ID ( ) ID }",
  "func ID ( ID : int , { : int ) : int ID var ID : [ ( false * false / true int ] ) var { : int } func ID ( ) ID }",
  "int ID ( ID : bool , ID : int , ID : int ) { var ID : [ - ( ID ( ) ) ] int var ID : [ ] func }",
  "int ID ( ] : bool , ID : int , ID : int ) { var ID : [ - ( ID ( ) ) ID int var ID : [ ] func }",
  "int ID ( ] : bool , ID : int , ID : int ) { var ID : [ - ( ID ( ) ) : int var ID ID [ ] func }",
  "func ID ( ) { while - ID ( ) / ID ( - ( - ) - 123 ) ) * true { } print - false } func ID ( - { }",
  "func ID ( ) { while - ID ( ) / ID ( - ( - ) - - ) ) * true { } print 123 false } func ID ( - { }",
  "func ID ( ) { ID - ID ( ) / while ( - ( - ) - - ) ) * true { } print 123 false } func ID ( - { }",
  "func ID ( ID : [ ( - true > ID true / true ) ) ] bool ) { } func ( ( ) { }",
  "func { ( ID : [ ( - true > ID true / true ) ) ] bool ) ID } func ( ( ) { }",
  "] ID ( ) { call ID ( - ID ( ) * ( ID [ ( ( false ) ) func ) * ( ( ID ) ) ) } func ID ( ) { }",
  "] ID ( ) { call ID ( - ID ( ) * ( ID [ } ( false ) ) func ) * ( ( ID ) ) ) } func ID ( ) { (",
  "] ID ( ) { call ID ( - ID ( ) * ( ID [ } ( false ) ) func ) * ( ( ID ) ) ) } func ID ( ) { (",
  "func ID ( ) { var ID : [ ] bool while ID ( ) [ ( ( } ) ) ] [ 123 ] { ID print ( 123 ) }",
  "func ID ( ) { var ID : [ ] bool while ID ( ) [ } ( ( ) ) ] [ 123 ] { ID print ( 123 ) }",
  "func ID ( bool { var ID : [ ] ) while ID ( ) [ } ( ( ) ) ] [ 123 ] { ID print ( 123 ) }",
  "func ID ( ID : int , ID : bool , ID : - ) { print 123 * 123 bool - false / - 123 - false }",
  "func ID ( ID : int , ID : bool 123 ID : - ) { print 123 * 123 bool - false / - , - false }",
  "func ID ( ID : bool , ID : int 123 ID : - ) { print 123 * 123 bool - false / - , - false }",
  "func ID ( ) : ) { var ID : [ ] bool print ID ( ) - 123 * - true * true call ID ( bool } func ID ( ) { }",
  "func ID ( ) : ) { var ID : [ ] bool print ID ( ) - 123 * true - * true call ID ( bool } func ID ( ) { }",
  "func ID ( ) : ) { var ID : [ ] bool ( ID print ) - 123 * true - * true call ID ( bool } func ID ( ) { }",
  "func ID ( [ : ID ] [ ] [ ID ( - false / ( - ID ) / ( ( ID ) ) ) ] [ ] bool ) { }",
  "func ID ( [ : ID ] [ ] [ ID ( - false / ( - ID ) / ( { ID ) ) ) ] [ ] bool ) ( }",
  "func ID ( [ : ID ] [ ] [ ID ( - false / ID - ID ) / ( { ( ) ) ) ] [ ] bool ) ( }",
  "func ID ( ID : bool , ID * bool , ID : [ ID [ - ID : ( - false ) ] [ - - true ] ] bool ) { }",
  "func ID ( ID : bool , ID * bool , ID : [ ID ] - ID : ( - false ) ] [ - - true ] [ bool ) { }",
  "func ID ( ID : bool , ID : int , ID : [ - true / ( ID ] ) [ ( ID ) ] [ false ( ) ] int ) { }",
  "func ID ( ID : bool , ID : int , ID : [ - true / ( ID ] ) [ ( ID ) ] [ false ) ( ] int ) { }",
  "func ID ( ID / bool , ID : int , ID : [ - true : ( ID ] ) [ ( ID ) ] [ false ) ( ] int ) { }",
  "func ID ( ) { var ID : int + ID : int if true / true + true / false var 123 { } }",
  "func ID ( ) { var ID : / + ID : int if true int true + true / false var 123 { } }",
  "func ID / ) { var ID : / + ID : int if true int true + true ( false var 123 { } }",
  "func ID ( ) { var ID : bool var ID : int return ( / true * 123 false * ( ( 123 ) ) * true ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int return ( / true * 123 false * ( ID 123 ) ) * true ) } func ( ( ) { }",
  "func ID ( ) { var ID : bool var ID : { return ( / true * 123 false * ( ID 123 ) ) * true ) } func ( ( ) int }",
  "func ID ( ID : [ ] int , ID : var ) : int { { { bool ID : int return } { var ID : bool var ID : bool } } }",
  "func ID ( ID : [ ] int , ID : var int : int { { { bool ID : ) return } { var ID : bool var ID : bool } } }",
  "func ID ( ID : [ ] int , ID : var int : int } { { bool ID : ) return } { var ID : bool var ID : bool } } {",
  "func ID ( var : bool { ) ID : [ ID [ ( false / ID * - true ) ] [ false ] ] bool } func ID ( ) { }",
  "func ID ( var : bool { ) ID ] [ ID [ ( false / ID * - true ) ] [ false ] : bool } func ID ( ) { }",
  "func ID ( var : bool { ) ID ] : ID [ ( false / ID * - true ) ] [ false ] [ bool } func ID ( ) { }",
  "func ID ( ) : bool = ID ( ) [ ID [ ( true ) ] ] { ID }",
  "func ID ( ) : bool = ID ( ) [ ID [ ( true ) ] ] { ID }",
  "func ID ( ) : bool = ID ( ) [ ID [ ( ] ) ] true { ID }",
  "func ID ( ID - int , ID : [ ( ( ( : - - ID ) ) ) ] int ) { }",
  "func ID ( ID - int , ID : [ ( ( ( : - - ID ) ) } ] int ) { )",
  "func ID ( ( - int , ID : [ ( ID ( : - - ID ) ) } ] int ) { )",
  "func ID ( ID : int , ID : [ ] int ( : [ ] int { var ID : [ ] bool var ID : int if - false { } call ID ) ) } func ID ( ) { }",
  "func ID ( } : int , ID : [ ] int ( : [ ] int { var ID : [ ] bool var ID : int if - false { } call ID ) ) } func ID ( ) { ID",
  "func ID ( } : int ) ID : [ ] int ( : [ ] int { var ID : [ ] bool var ID : int if - false { } call ID , ) } func ID ( ) { ID",
  "func ID ( ) { var ID : [ false * true * 123 - - - false * - true * - - ( - true ) ] [ ] bool var ID : [ [ ] ] bool }",
  "func ID ( ) } var ID : [ false * true * 123 - - - false * - true * - - ( - true ) ] [ ] bool var ID : [ [ ] ] bool {",
  "func ID ( ) var } ID : [ false * true * 123 - - - false * - true * - - ( - true ) ] [ ] bool var ID : [ [ ] ] bool {",
  "func ID ( ID : [ ] int , ID : bool ) : bool { var ID : bool { if ( ( ID ) ) { } } while ( ID ) } } } func ID ( ) { {",
  "func ID ( ID : [ ] int , ID : bool ) : bool { var ID : bool { if ( ( ID ) ) { } } while ( ID ) } } } func ID ( ) { {",
  "func ID ( ID : [ ] int , ID : while ) : bool { var ID : bool { if ( ( ID ) ) { } } bool ( ID ) } } } func ID ( ) { {",
  "func ID ( ID ) [ true + - - ( ( - ID ( ) : ) ] [ ] [ ] bool ) { }",
  "func ID ( ID ) [ ) + - - ( ( - ID ( true : ) ] [ ] [ ] bool ) { }",
  "func ID ( ID ) [ ) + - - ( ( - ID ( } : ) ] [ ] [ ] bool ) { true",
  "func ID ( ID : [ ] bool ) : [ ] bool { var ID : int var } : [ ] bool return ( false ) ID",
  "func ID ( ID : [ ] var ) : [ ] bool { var ID : int bool } : [ ] bool return ( false ) ID",
  "ID ID ( ID : [ ] var ) : [ ] bool { var func : int bool } : [ ] bool return ( false ) ID",
  "func ID ( ID : [ ] int , ID : [ ID [ 123 / true [ ( ( ID ) ) ] [ ID ] ] [ ] < ] [ ] [ ] int ) { }",
  "func ID ( ID : [ ] int , ID ID [ ID [ 123 / true [ ( ( ID ) ) ] [ : ] ] [ ] < ] [ ] [ ] int ) { }",
  "func ID ( ID : [ ] int , ID ID [ ID [ 123 [ true / ( ( ID ) ) ] [ : ] ] [ ] < ] [ ] [ ] int ) { }",
  "func ID ( int : bool { var ID : [ ] int var ID : ) }",
  "func ID : int : bool { var ID ( [ ] int var ID : ) }",
  "ID ID : int : bool { var func ( [ ] int var ID : ) }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : int var ID : - ID ( ) [ bool 123 ] = ( true ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) { { ID : int var ID : - ID ( ) [ bool 123 ] = ( true ) call ID ( ) } func ID ( ) var }",
  "func ID ( : : int , ID : int , ID ID bool ) { { ID : int var ID : - ID ( ) [ bool 123 ] = ( true ) call ID ( ) } func ID ( ) var }",
  "func ID ( ) : [ bool ] { var ID : [ ] bool var ID : [ ID [ ID ] [ ( ID ) ] ] int }",
  "func ID ( ) : [ bool ] { var ID : [ ] bool var ID : [ ID ] ID [ [ ( ID ) ] ] int }",
  "func ID ( ) : [ bool ] { [ ID : [ ] bool var ID : var ID ] ID [ [ ( ID ) ] ] int }",
  "func ID ( ID : [ ] int , ID : [ ] int ) : int { var ID : } int func ID ( ) { var ID : bool var ID : [ ] [ ] int }",
  "func ID ( ID : [ ] int , ID : [ int int ) : int { var ID : } ] func ID ( ) { var ID : bool var ID : [ ] [ ] int }",
  "func ID ( ID : { ] int , ID : [ int int ) : int { var ID : } ] func ID ( ) [ var ID : bool var ID : [ ] [ ] int }",
  "func ID ( ID ID int , : : int ) { } func ID ( ) : int { var ID : [ ] [ false ] bool var ID : [ ] [ ] [ ] bool }",
  "func ID ( ID ID int , : : int ) { } func ID ( ) ID int { var ID : [ ] [ false ] bool var : : [ ] [ ] [ ] bool }",
  "func ID ( ID ID int , : : int { { } func ID ( ) ID int ) var ID : [ ] [ false ] bool var : : [ ] [ ] [ ] bool }",
  "func ID ( , : int , ID : [ ] int ID ID : int ) : bool { while ID ( ) [ ( ( - - ID ) ) ] { } { } }",
  "func ID while , : int , ID : [ ] int ID ID : int ) : bool { ( ID ( ) [ ( ( - - ID ) ) ] { } { } }",
  "func ID while , : int , ID : [ { int ID ID : int ) : bool { ( ID ( ) [ ( ( - - ID ) ) ] ] } { } }",
  "- ID ( ) { var ID : [ - - - false func ID ( - ID ) ] int var ID : [ ] bool }",
  "- ID ( ) { var ID : [ - - - false func ID ( - ID ) ] int var ID : [ ] bool }",
  "- ID ( ) { var ID : [ - - - false func ID ( - ID ) ] : var ID int [ ] bool }",
  "func ID ( ) : int { while ID [ 123 ] ( false ) + { } { } } func ID ( ) { }",
  "func ID ( ) : int { while ID [ 123 ] ( false ) + { } { } } func ID ( ) { }",
  "func ID ( ) { int { while ID [ 123 ] ( false ) + : } { } } func ID ( ) { }",
  "func ID ( ID : [ false ( ID ( ) [ * true * ID ) ] [ 123 ] ] bool ) { }",
  ") ID ( ID : [ false ( ID ( func [ * true * ID ) ] [ 123 ] ] bool ) { }",
  ") ID ( ID : [ false func ID ( ( [ * true * ID ) ] [ 123 ] ] bool ) { }",
  "func ( ( ID : int ) { var ID : [ 123 + ( ( ID ) ) - - ( ID - 123 ) ) ] bool var ID : bool }",
  "func ( ( ID : int ) - var ID : [ 123 + ( ( ID ) ) - - ( ID { 123 ) ) ] bool var ID : bool }",
  "func ( ( ID : int ) - var ID : [ 123 + ( ( ID ) ) - - ( ID { 123 ) } ] bool var ID : bool )",
  "( ID ( ID : bool , ID : [ true * ID [ ID ( 123 ) ] ] int ) { } func ID func ) { }",
  "( ID ( ID : bool , ID : ID true * [ [ ID ( 123 ) ] ] int ) { } func ID func ) { }",
  "( ID ( ID : bool , ID : ID true * [ [ ID ( 123 ) ] ] int ) { } func ID func ) { }",
  "func ID ( ID : bool , ID : bool ) { } ID func ( ID : int , ID : [ ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : bool ) { } ID func ( ID [ int , ID : : ] [ ] bool ) { }",
  "func ID bool ID : ( , ID : bool ) { } ID func ( ID [ int , ID : : ] [ ] bool ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : [ ID [ true * - false ] [ ( ID ) ] func bool { } ] ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : [ ID { true * - false ] [ ( ID ) ] func bool { } ] ID ( ) [ }",
  "func ID ( ID : int , ID : bool , ID : bool ) : [ ID { true * - false ] [ ( [ ) ] func bool { } ] ID ( ) ID }",
  "func ( ID ID : [ - ID ( ) [ true - ( ( - ( false ) ) ) - ID ] [ 123 ] ] [ ] int ) { }",
  "func ( ID ID : [ - ID ( ) [ true - ( ] - ( false ) ) ) - ID ( [ 123 ] ] [ ] int ) { }",
  "func ( ID ID : [ int ID ( ) [ true - ( ] - ( false ) ) ) - ID ( [ 123 ] ] [ ] - ) { }",
  "func ID ( ID : bool , : : bool , ID : int ) : bool { var ID ID int var ID : [ ] [ ID ] int }",
  "func ID ( ID : bool , : : bool , ID : int ) : bool { var ID ID int var ID : [ ] [ ID ] int }",
  ", ID ( ID : bool func : : bool , ID : int ) : bool { var ID ID int var ID : [ ] [ ID ] int }",
  "func ID } ) { var ID : int { var ID : bool print false - ID [ - ( - ( ( 123 ) ) ) ] ID = ( - ( false ) ) } print ID } func ID ( ) { (",
  "func ID } ) { var ID : int { var ID : bool print false - ID 123 - ( - ( ( [ ) ) ) ] ID = ( - ( false ) ) } print ID } func ID ( ) { (",
  "func ID } ) { var ID : int { var ID : bool print false - ID 123 - ( - ( ( [ ) ) ) ] ) = ( - ( false ID ) } print ID } func ID ( ) { (",
  "func true ( ) : bool { return true / ID - true - - ( true ) }",
  "func true ( { : bool ) return true / ID - true - - ( true ) }",
  "func true ( { : bool ) return true / ID - true - - ( true ) }",
  "func ID ( ID : int ) : bool { var ID : [ - ( true ID ID ( ) + ( - - ) ) ] bool var ID : [ ] int }",
  "func ID ( ID : int ) : bool { var ID : [ - ( true ID ID ( ) + ( - ) - ) ] bool var ID : [ ] int }",
  "func ID ( ID : int ) : bool { [ ID : [ - ( true ID ID ( ) + ( - ) - ) ] bool var ID : var ] int }",
  "func ) ( ID : bool , ID : bool ) { var ID : [ ] bool print ( ( 123 ) ) { } } func ID ( ID { }",
  "func ) ( ID : : , ID bool bool ) { var ID : [ ] bool print ( ( 123 ) ) { } } func ID ( ID { }",
  "func ) ( ID : : , ID bool bool ) { var ID : ( ] bool print ( ( 123 ) ) { } } func ID [ ID { }",
  "func ID bool ) { var ID : [ true * ( false == ( ID ) ) / true ] ( var ID : bool }",
  "func ID bool ) { var ID : [ true * ( false == ( ID ) ) / true : ( var ID ] bool }",
  "func ID ( ID : [ - false * ( ( true - ( - - ( - 123 ) ) ) ) ID [ ] bool ) { } func ] ( ) { }",
  "func ID ( ID : [ - false * ( ( true - ( - - ( - 123 ) ) ID ) ) [ ] bool ) { } func ] ( ) { }",
  "func ID ( ID : [ - false * ( ( true - ( ) - ( - 123 ) ) ID ) - [ ] bool ) { } func ] ( ) { }",
  "func ID ( ) : ) { var ID : [ ] [ - - 123 / ( ( ( ( ID ) bool ) ) ] bool } func ID ( ) { }",
  "func ID ( ) : ) { var ID : [ ( [ - - 123 / ( ( ( ( ID ) bool ) ) ] bool } func ID ] ) { }",
  "func ID ( ) : ) { var ID : [ ( [ - - 123 / ( ( } ( ID ) bool ) ) ] bool ( func ID ] ) { }",
  "func ID ( ID : int , ID : bool ( { var ID : [ ( ID ) ID ) ) ] bool }",
  "func ID ( ID : int , ID : bool ( { var ID : [ ( ID ) ) ID ) ] bool }",
  "func ID ( ID : int , ID : bool ( { var ID bool [ ( ID ) ) ID ) ] : }",
  "func ID ( ID : [ ] bool , ID : int ID { var ID : [ - ID / ) ( ) ] int } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int ID { ) ID : [ - ID / ) ( var ] int } func ID ( ) { }",
  "func ID ID ID : [ ] bool , ID : int ID { ) ( : [ - ID / ) ( var ] int } func ID ( ) { }",
  "func ID } ) { var ID : bool var ID : [ ] int return ( func ID ( ) : int { var ID : int return }",
  "func ID } ) { var ID : bool var ID : [ ] int return ( func ID ( ) : int { int ID : var return }",
  "func { } ) ID var ID : bool var ID : [ ] int return ( func ID ( ) : int { int ID : var return }",
  "func ID ( ID : bool , ID : [ ] bool , ID : [ ] bool ) : [ ] bool { } ID : bool var ID : int while false { var }",
  "func ID ( ID : bool , ID : [ ] bool , ID : [ ] bool ) : [ ] bool { } ID : bool var ID : int { false while var }",
  "func ID ( ID : bool , [ : [ ] bool , ID : ID ] bool ) : [ ] bool { } ID : bool var ID : int { false while var }",
  "func ID ( ) { var ID : [ - ID [ false / false / ] - ID + - - ( ID ) 123 [ ID ] ] int }",
  "func ID ( ) { var ID : [ ID ID [ false / false / ] - ID + - - ( - ) 123 [ ID ] ] int }",
  "func ID ( ) { var ID : [ ID ID [ false / false / ] - [ + - - ( - ) 123 ID ID ] ] int }",
  "func ID ( ) { var ID 123 [ ] [ ] int var ID : int while - false * - : * - ID { } }",
  "func ID ( ) { var ID 123 [ ] [ ] int var ID : int while - false * - : } - ID { } *",
  "func ID ( ) - var ID 123 [ ] [ ] int var ID : int while { false * - : } - ID { } *",
  "func ID ( ) { return } func ID ( ID : : , ID bool int ) { print ( - ID ) }",
  "func ID ( ) { return } func ID ( ID : : , { bool int ) ID print ( - ID ) }",
  "func ID ( ) { return } func ID ( ID : : , { bool int ) ID print ( - ID ) }",
  "func ID ( var { var ID : int ) ID : int while ( - ID ( ( true ) ) ) { } }",
  "func ID ( var { - ID : int ) ID : int while ( var ID ( ( true ) ) ) { } }",
  "func ID ( var { - ID : int ) ID : int while ( var ID ( ( true ) ) ) { } }",
  "func ID ( func { while ID * ID ( ( ( ( ID ) ) ) ) { } } ) ID ( ) { }",
  "func ID ( ( { while ID * ID ( ( ( func ID ) ) ) ) { } } ) ID ( ) { }",
  "func ID ( ( ) while ID * ID ( ( ( func ID ) ) ) ) { } } { ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID [ ( 123 + false - ID ) ] [ ( ( ID ) ) bool ] ] ) { }",
  "func ID ( ID : [ , ID : [ ID [ ( 123 + false - ID ) ] bool ( ( ID ) ) bool ] ] ) { }",
  "func ID ( ID : [ , ID : [ ID [ ( 123 + false ( ID ) ] bool ( - ID ) ) bool ] ] ) { }",
  "func ID ( ID : int , ID : [ ] bool ) ID [ - 123 and ( - : ) ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID [ : ] bool ) ID [ - 123 and ( - : ) ] bool { } func ID ( ) { }",
  "func ID ( ID : - , ID [ : ] bool ) ID [ int 123 and ( - : ) ] bool { } func ID ( ) { }",
  "func ID ( ID : int / ID : [ true / ( - ( true and ( ( ( - false ) ) ) and true ) ) , - 123 ] int ) { } func ID ( ) { }",
  "func ID ( ID : int / ID : [ true } ( - ( true and ( ( ( - false ) ) ) and true ) ) , - 123 ] int ) { / func ID ( ) { }",
  "func ID ( ID : int / ID : [ true } 123 - ( true and ( ( ( - false ) ) ) and true ) ) , - ( ] int ) { / func ID ( ) { }",
  "func ] ( ) { call ID ( ID [ ID [ ( ( 123 ) ) ID [ ID ] ] ) }",
  "func ] ( ) { call ID ( ID [ ID } ( ( 123 ) ) ID [ ID ] ] ) [",
  "func ] ( ) { call ID ( ID [ [ } ( ( 123 ) ) ID [ ID ] ] ) ID",
  "func ID ( ) : [ ID [ - - - 123 ID false <= / ( ) ] [ ( - ( - false ) ) ] ] bool { }",
  "func ID ( ) / [ ID [ - - - 123 ID false <= : ( ) ] [ ( - ( - false ) ) ] ] bool { }",
  "func ID ( ) / [ ID [ - - - 123 ID false <= : ( ) ] [ ( - ( - false ) ) ] ] bool { }",
  "ID ID ( func : int , ID : bool ) { var ID : [ ] bool var ID : [ ] bool print ID ( ) if ( - ID ) { } }",
  "ID ID ( func : int , ID ) bool ) { var ID : [ ] bool var ID : [ ] bool print ID ( ) if ( - ID : { } }",
  "ID ID ( func : int , - ) bool ) { var ID : [ ] bool var ID : [ ] bool print ID ( ) if ( ID ID : { } }",
  "{ ID ( ID : [ ( - ID / ( true and false ) / ID ) ] [ ] bool ) { } func ID ( ) func }",
  "{ ID ( ID : [ ( - ID / ] true and false ) / ID ) ( [ ] bool ) { } func ID ( ) func }",
  "{ ID ( ID : [ ( func ID / ] true and false ) / ID ) ( [ ] bool ) { } - ID ( ) func }",
  "func ID ( ID : bool , ID : int ) ID : int ) { call ID ( - ID - 123 / - ID / ( - ( false ) ) - - ID , if - ( - ID ) { } }",
  "func ID ( ID : bool , ID : int ) ID : int ) { call ID ( - ID - 123 / - - / ( - ( false ) ) ID - ID , if - ( - ID ) { } }",
  "func ID ( ID : bool , ID : int ) ID : int ) } call ID ( - ID - 123 / - - / ( - ( false ) ) ID - ID , if - ( - ID ) { } {",
  "( ID ( ) { var ID : bool ID func 123 * ID / ID ( - - ( 123 ) ) ) = true } func ID ( ) { }",
  "( ID ( ) { true ID : bool ID func 123 * ID / ID ( - - ( 123 ) ) ) = var } func ID ( ) { }",
  "{ ID ( ) ( true ID : bool ID func 123 * ID / ID ( - - ( 123 ) ) ) = var } func ID ( ) { }",
  "int ID ( ID : func ) : [ ID + ( ID ( ID ) ) ] bool { }",
  "int ID ( ID : func } : [ ID + ( ID ( ID ) ) ] bool { )",
  "int ID ( ID : ID } : [ ID + ( func ( ID ) ) ] bool { )",
  "func ID ( ID : bool ( ID : [ ] bool ) : bool { return ID ( ) [ ( ID ) ] } func ID , ) { }",
  "func ID ( ID : bool ( ID ID [ ] bool ) : bool { return ID ( ) [ ( : ) ] } func ID , ) { }",
  "func ID ( ID : bool ( ID ID [ ] bool ) : bool { return ID ( ) [ } : ) ] } func ID , ) { (",
  "func ID ( ID : int , ID : int ) : int { } func ID ( ) { ID - ( - while ) { } ID = 123 }",
  "ID ID ( ID : int , func : int ) : int { } func ID ( ) { ID - ( - while ) { } ID = 123 }",
  "ID ID ( ID : int , func : int ) : while { } func ID ( ) { ID - ( - int ) { } ID = 123 }",
  "func ID ( ID : bool , ] : [ ] [ ID ( ID [ 123 ] ) ID [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ] : [ ] [ ID ( ID ) 123 ] ) ID [ ] bool [ { } func ID ( ) { }",
  "func ID ( ID : bool , ] : ID ] [ [ ( ID ) 123 ] ) ID [ ] bool [ { } func ID ( ) { }",
  "func ID ( ID ID [ ] [ ( ID ( ) [ ( - ( - ( ( false ) ) ) ) ] [ ID ] ) ] int ) { } func : ( ) { }",
  "func ID ( ID ID [ ] [ ( ID ( ) [ ( - ( - ( ( false ) ) ) ) ] [ ID ] ) ] int ) { } func : ( ) { }",
  "func ID ( ID ID [ ] [ ( ID ( } [ ( - ( - ( ( false ) ) ) ) ] [ ID ] ) ] int ) { } func : ( ) { )",
  "func ID ( ID : [ , ID : bool ) { call ID ( ) } func ID ( ) { var ID : bool true ] int }",
  "func ID ( ID : [ , ID : bool ) { call ID ( ) } func ID ( { ) var ID : bool true ] int }",
  "func ID ( ID : [ , ID : bool ) { call ID ( ) } func ID ) { ( var ID : bool true ] int }",
  "func ID ( ID : bool ) [ [ true / - 123 - 123 * true / ID [ false ] [ ( false ) ] ] : ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : bool ) [ [ true / - 123 { 123 * true / ID [ false ] [ ( false ) ] ] : ] [ ] bool { } func ID ( ) - }",
  "func ID ( ID : bool ) [ [ true / - 123 123 { * true / ID [ false ] [ ( false ) ] ] : ] [ ] bool { } func ID ( ) - }",
  "func ID ( ) : bool { var ID : bool return ID / - ( ID 123 / false / false ) * ID } func ID ( ) { }",
  "func * ( ) : bool { var ID : bool return ID / - ( ID 123 / false / false ) ID ID } func ID ( ) { }",
  "func return ( ) : bool { var ID : bool * ID / - ( ID 123 / false / false ) ID ID } func ID ( ) { }",
  "func ID ID ID : [ ] bool , ID : bool ) : bool { var ( : bool var ID : [ 123 / true * 123 ] int } func ID ( ) { }",
  "func ID ID ID : [ ] bool , ID : bool ) : bool { var } : bool var ID : [ 123 / true * 123 ] int } func ID ( ) { (",
  "func ID ID ID : [ ] bool , ID : bool ) : bool { var } : bool 123 ID : [ var / true * 123 ] int } func ID ( ) { (",
  "func ID ( ) { { if false * ID - - 123 / ( - ID ) - ID { } } print ID } ( ID func ) { }",
  "func 123 ( ) { { if false * ID - - ID / ( - ID ) - ID { } } print ID } ( ID func ) { }",
  "func 123 ( ) { { if false * ID - - ID / ( - ID ) - ID { } } print ID } ( ID func ) { }",
  "int ID ( ) { var ID : int var ID : [ false / ID ( 123 >= false ) * - - 123 ] func }",
  "int ID ( ) { var ID ) int var ID : [ false / ID ( 123 >= false : * - - 123 ] func }",
  "int [ ( ) { var ID ) int var ID : ID false / ID ( 123 >= false : * - - 123 ] func }",
  "func ID ( ) : int { var ID : int var ID : int print true if ( - ID ) - - 123 - 123 { ID } func } ( ) { }",
  "func ID ( ) : int { var ID : if var ID : int print true int ( - ID ) - - 123 - 123 { ID } func } ( ) { }",
  "func ID ( ) { var ID : bool if ( ( 123 } ID [ ( ( false ) ) ] [ ID ] ) ) { * call ID ( ) }",
  "func ID ( ) { var ID ( bool if ( ( 123 } ID [ : ( false ) ) ] [ ID ] ) ) { * call ID ( ) }",
  "( ID ( ) { var ID ( bool if ( ( 123 } ID [ : ( false ) ) ] [ ID ] ) ) { * call ID func ) }",
  "func ID ( ) : [ ] int { var ID : [ 123 * true - ( ( * ID ) ) ] bool var ID : [ ] int } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : [ 123 * true int ( ( * ID ) ) ] bool var ID : [ ] - } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : [ 123 * true int - ( * ID ) ) ] bool var ID : [ ] ( } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool ) { var ID : int } func ID ( ID : int , ID : [ - ( - - - ID ] ) int ) { }",
  "func ID ( ID : [ ] int , ID ID bool ) { var ID : int } func ID ( ID : int , ID : [ - ( - - - : ] ) int ) { }",
  "func ID ( ID : [ : int , ID ID bool ) { var ID ] int } func ID ( ID : int , ID : [ - ( - - - : ] ) int ) { }",
  "func ID ( ) { var ID : bool var ID : bool ID ( ) [ - { false ) ] [ ( false ) ] = ID { } } func ID ( ) ( }",
  "func ID ( ) { var ID : bool var ID : bool ID ( ) [ - { false ) ] [ ( } ) ] = ID { } } func ID ( ) ( false",
  "( ID ( ) { var ID : bool var ID : bool ID ( ) [ - { false ) ] [ func } ) ] = ID { } } func ID ( ) ( false",
  "func ID ( ) { var ID : [ ( - } ID ( ) [ 123 ] [ true ] ) ] [ ] int var ID : int - func ID ( ) { }",
  "func ID ( ) { var ID : - ( - } ID ( ) [ 123 ] [ true ] ) ] [ ] int var ID : int [ func ID ( ) { }",
  "func ID ( ) { var ID : - ( - } ID ( ) [ 123 ] [ int ] ) ] [ ] int var ID : true [ func ID ( ) { }",
  "func ID ( ID : bool ] ID : int ) : int { var ID : [ , bool var ID : [ ] int return ID } func ID ( ) { }",
  "func ID ( ID : bool ] ID : int ) : int { var ID , [ : bool var ID : [ ] int return ID } func ID ( ) { }",
  "func ID ( ID : bool ] ID : int ) : int { var ID , [ : bool var ID : [ ] int ( ID } func ID return ) { }",
  "func var ( ID : [ ] [ ] int , ID : int , ID : int ) : int { var ID : int var ID : bool { ID ID : int var ID : int } } func ID ( ) { }",
  "func var ( ID : [ ] [ ] int , ID : int , ID : int : ) int { var ID : int var ID : bool { ID ID : int var ID : int } } func ID ( ) { }",
  "func var int ID : [ ] [ ] int , ID : int , ID : int : ) int { var ID : int var ID : bool { ID ID : ( var ID : int } } func ID ( ) { }",
  "func ID ( ID : [ } bool , ID : bool , ID : int ) : int { var ID : [ ID ( 123 ) ] int ]",
  "func ID ( ID ) [ } bool , ID : bool , ID : int : : int { var ID : [ ID ( 123 ) ] int ]",
  "func ID ( ID ) [ } bool , ID : bool , ID : int : : int { var ID : [ ID ( 123 ) ] int ]",
  "func ID ( ID : bool ) { var ID : int if ID ( ) * - [ ( ID ( false ) ) ] [ ID ] { } }",
  "func ID ( ID : bool false { var ID : int if ID ( ) * - [ ( ID ( ) ) ) ] [ ID ] { } }",
  "func ID ( ID : bool false { int ID : var if ID ( ) * - [ ( ID ( ) ) ) ] [ ID ] { } }",
  "func ID ( ID : [ ] - ID [ - true - [ - - ID ] [ ( - - - ID ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] - ID [ - true - { - - ID ] [ ( - - - ID ) ] ] int ) { } func ID ( ) [ }",
  "- ID ( ID : [ ] - ID [ - true func { - - ID ] [ ( - - - ID ) ] ] int ) { } func ID ( ) [ }",
  "func ID ( int : bool ) : bool { var ID : ID print ID [ ID [ - ( ID ) ] [ ID ] ] [ ID ] }",
  "func ID ( int : bool ) : bool { var [ : ID print ID [ ID [ - ( ID ) ] ID ID ] ] [ ID ] }",
  "func ID ( int : bool ) : bool { var [ ] ID print ID [ ID [ - ( ID ) : ID ID ] ] [ ID ] }",
  "func ID ( ID : int : ID : int ) { var ID , [ ID ( ) [ - ID ] ] int }",
  "func ID ( ID int int : ID : int ) { var ID , [ ID ( ) [ - ID ] ] : }",
  "ID ID ( ID int int : func : int ) { var ID , [ ID ( ) [ - ID ] ] : }",
  "func ID ( ) { var ID : int } func ID ( ) : int , ID : [ ] [ ( false ID ] int ) { }",
  "func ID ( ) { var ID : int ID func ID ( ) : int , } : [ ] [ ( false ID ] int ) { }",
  "func ID ) ( { var ID : int ID func ID ( ) : int , } : [ ] [ ( false ID ] int ) { }",
  "func ID ( } { var ID : bool print ID [ ID ( - ID ) ] ID = ID )",
  "func ID ID } { var ( : bool print ID [ ID ( - ID ) ] ID = ID )",
  "ID ID ID } { var ( : bool print ID [ ID ( - ID ) ] func = ID )",
  "func ID ( ) : [ { var ID : bool ID ( ( true - ID + ( ( ID ) ) ) ) ] bool var ID : [ ] [ ] bool }",
  "func ID ( ) : [ { var ID : bool ID ( ( true - ID + ( ( ID ) ) ) ) ] ] var ID : [ ] [ bool bool }",
  "func ID ID ) : [ { var ID : bool ( ( ( true - ID + ( ( ID ) ) ) ) ] ] var ID : [ ] [ bool bool }",
  "func ID ( ID : int ) ID : [ ( ID / - ( ( ID ) ) * ID ) ] int , ID : int , { } func ID ( ) { }",
  "func ID ( ID : int ) ID : [ ( } / - ( ( ID ) ) * ID ) ] int , ID : int , { ID func ID ( ) { }",
  "func ID ( ID : ) ) ID : [ ( } / - ( ( ID ) ) * ID ) ] int , ID : int , { ID func ID ( int { }",
  "func ID ( - : bool , ID : [ ( ( ID [ ( ID 123 ) ] ) ) ] bool , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( - : bool , ID : [ ( ( ID [ ( ID 123 ) ] func ) ] bool , ID : [ ] int ) { } ) ID ( ) { }",
  "func ID ( - : bool , ID : [ ( ( ID [ ( ID 123 ) ] func ) ] bool , ID : [ ] int ) { } ) ID ( ) { }",
  "func ID ( ID : [ false * ( false < 123 or ( true ) or ] ID ) ) ( int ) { }",
  "func ) ( ID : [ false * ( false < 123 or ( true ) or ] ID ) ID ( int ) { }",
  "func ) ( ID : [ false * ( false ID 123 or ( true ) or ] < ) ID ( int ) { }",
  "func ID ( ) : int { var ID : int var ID : [ ] [ - - ( - ID } ] bool )",
  "func { ( ) : int ID var ID : int var ID : [ ] [ - - ( - ID } ] bool )",
  "( { func ) : int ID var ID : int var ID : [ ] [ - - ( - ID } ] bool )",
  "func ID ( ID : ] ] int , ID : int ) : int { { var ID : [ - ID ( ) [ [ ] int } call ID ( ) }",
  "func ID ( ID : ] ] int , ID : int ) : int { { var ( : [ - ID ID ) [ [ ] int } call ID ( ) }",
  "func ID ( ID ID ] ] int , ID : int ) : int { { var ( : [ - ID : ) [ [ ] int } call ID ( ) }",
  "func ID ( ID : int , ID : bool ) { while ID ( false + ID ( ) - ( ( - ID ( ) ) { } } func ID ) ) { }",
  "func ID ( ID : int , ID : bool while { ) ID ( false + ID ( ) - ( ( - ID ( ) ) { } } func ID ) ) { }",
  "func ID ( ID : int , ID : bool while { ) ID ( false + ID ( ) func ( ( - ID ( ) ) { } } - ID ) ) { }",
  "123 ID ( ) : [ false + ID ( ( false * func ) ) ] bool { }",
  "123 ID ( ) : [ false ) ID ( ( false * func ) + ] bool { }",
  "123 ID ( ) bool [ false ) ID ( ( false * func ) + ] : { }",
  "func ID ( ) { ID [ true / - - - and - false 123 - - 123 + false and - 123 ] [ ( ( 123 ) ) ] = ( - - - ID ) while ID { } } func ID ( ) { }",
  "func ID ( ) { ID [ true / - - - and - false 123 - - 123 + false and - 123 ] [ ( ( 123 ) ID ] = ( - - - ID ) while ) { } } func ID ( ) { }",
  "func ID ( ) { ID [ true / - - - and - false 123 - - 123 + false and - 123 ] [ ( ( 123 ) { ] = ( - - - ID ) while ) { } } func ID ( ) ID }",
  "func ID ( } : int ) : bool { ID ( 123 * - ( false * 123 * true ) ) = ID while ( - 123 ) { } } func ID ( ) { ID",
  "func ID ( } : int ) : bool { ID ( 123 * - ( false * 123 * true ) ) = ID while ( - 123 ) { } ID func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : int ID var ID : [ ] [ ] bool var ID : int { var { : bool var ID : [ ] int } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : int ID var ID : [ ] [ ] bool var ID : func { var { : bool var ID : [ ] int } } int ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : int ID var ID : [ ] [ ] bool var ID : func { var } : bool var ID : [ ] int { } int ID ( ) { }",
  "func ID ( ) { var ID : [ false + ID ( ) + ( ( - { ) ) ] int } func ID ( ) ID }",
  "func ID ( ) { var ID : [ false + ID ( ) + ( ( - { ) ) ] int } func ID ( ) } ID",
  "func ID ( + { var ID : [ false + ID ( ) ) ( ( - { ) ) ] int } func ID ( ) } ID",
  "func ID ( ) : [ ] bool { var ID : int var ID : ( - ID [ ID ] ] [ ] int } func ID [ ) { }",
  "func ID - ) : [ ] bool { var ID : int var ID : ( ( ID [ ID ] ] [ ] int } func ID [ ) { }",
  "func ID - ) int [ ] bool { var ID : int var ID : ( ( ID [ ID ] ] [ ] : } func ID [ ) { }",
  "func ID ( , : int , ID : bool ID ID : int ) : bool { var ID : bool { } ID [ true ] [ - ( - ( - - - ( ID ) ) ) ] = 123 }",
  "func ID - , : int , ID : bool ID ID : int ) : bool { var ID : bool { } ID [ true ] [ - ( ( ( - - - ( ID ) ) ) ] = 123 }",
  "func ID - , : int , ID : bool ID ID : int ) : bool { var ID : bool { } ID [ true ] [ = ( ( ( - - - ( ID ) ) ) ] - 123 }",
  "func ID ( ID : [ ] bool , ID : bool , ID : bool ) { var ID : [ ID ( 123 ] ] int var ID : [ ] [ ] [ ] int } func ID [ ) { }",
  "func ID ( ] : [ ] bool , ID : bool , ID : bool ) { var ID : [ ID ( 123 ID ] int var ID : [ ] [ ] [ ] int } func ID [ ) { }",
  "func ID ( ] : [ ] bool , ID : bool , ID : bool ) { var ID : [ ID ( 123 ID int ] var ID : [ ] [ ] [ ] int } func ID [ ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] int , ID : [ ] int ) } ID ( ) [ ID ] = true while 123 { } { func ID ( ) { }",
  "func ID ( ID : bool , } : [ ] [ ] int , ID : [ ] int ) } ID ( ) [ ID ] = true while 123 { } { func ID ( ) { ID",
  "func ID ( ID : bool , } : [ ] [ ] int , ID : [ ] int ) } ID ( ) [ ID ] = true while { 123 } { func ID ( ) { ID",
  ") ID ( ID : [ ] [ ( ID [ ( - false func ] ) ] int ) { }",
  ") ID ( ID : [ ] [ ( ] [ ( - false func ] ) ID int ) { }",
  "func ID ( ID : ID ] int ) { while true * - [ ( ) + ID [ ID ] + - ( ( ID ) ) { } }",
  "func ID ( ID : ID ] int ) { while true * - [ ( ) + ID [ ID ] + - ( ( ID ) ) { } }",
  "func [ ( ID : ID ] int ) { while true * - ID ( ) + ID [ ID ] + - ( ( ID ) ) { } }",
  "func ID ( ) : [ ] bool { { var ID : int var ID : int } } func ID ( ID : [ ] int ] ID : [ , bool ) { }",
  "func ID ( ) : [ ] bool { { var ID : int var ID : int } } func ID ( ID : [ ] int : ID ] [ , bool ) { }",
  "func ID ( ) : [ ] bool { { var ID : int var ID : int ID } func ID ( ID : [ ] int : } ] [ , bool ) { }",
  "func ID ( ID : [ ] int ) : [ : bool { var ID ] [ ( true * ( - ( true ) ) / ( ID ) ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] int { : [ : bool ) var ID ] [ ( true * ( - ( true ) ) / ( ID ) ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] int { : [ : bool ) var ID ] [ ( true * ( - ( true ) ) / ( ID ) } ] [ ] bool } func ID ( ) { )",
  "func ID ( ) { } func ID ( ) { var ID : bool var true : bool print ID - - ID while ( - ( ID ) ) { } }",
  "func ID ( ) { } print ID ( ) { var ID : bool var true : bool func ID - - ID while ( - ( ID ) ) { } }",
  "func ID ( ) { } print ID - ) { var ID : bool var true : bool func ID - ( ID while ( - ( ID ) ) { } }",
  "func ID - ID : [ ( ( ID / false * ID ( ) - ID ) ] bool ) { }",
  "func ID - ID : [ ( ( ( / false * ID ID ) - ID ) ] bool ) { }",
  "func ID - ID : [ ( ( ( / false * ID ID ) - ID ) ] bool ) { }",
  "func ID ( ) : bool , ID : bool ) : [ ID ( ID ( ID ) ID ] [ ] bool { }",
  "func ID ] ) : bool , ID : bool ) : [ ID ( ID ( ID ) ID ( [ ] bool { }",
  "[ ID ] ) : bool , ID : bool ) : [ ID ( ID ( ID ) ID ( func ] bool { }",
  "func func ( ID : int ) : int { var ID : bool call ID ( ) } ID ID ( ) { var ID : bool }",
  "func func ( } : int ) : int { var ID : bool call ID ( ) ID ID ID ( ) { var ID : bool }",
  "func ID ( ) : [ ] bool { var ID : 123 return ( - ( bool ) ) } func ID ( ) { }",
  "123 ID ( ) : [ ] bool { var ID : func return ( - ( bool ) ) } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : func return ( - ( bool ) ) } 123 ID ( ) { }",
  "func ID ( ID int int , ID : : ) { var ID : int while ID ( ) [ - - ID ] { } }",
  "func ID ( ID int int , ID : : ) { var ID : int ) ID ( while [ - - ID ] { } }",
  "func ID ( ID int int , ID : : ) { var ID : int { ID ( while [ - - ID ] ) } }",
  "func ID ( ID ( bool , ID : [ ] [ ( - ( ID ( : true ) ) ) ) ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID ( bool , ID : [ ] [ ( - ( ID ( : bool ) ) ) ) ] int , ID : true ) { } func ID ( ) { }",
  "func ID ( ID ( bool , ID bool [ ] [ ( - ( ID ( : : ) ) ) ) ] int , ID : true ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( ( ID [ - ( ID ) ) [ - ( ID ) ] ) ) ] bool ] { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( ( ID [ - ( ID ) ) [ - ( ID ) ] ) ) ] bool ] { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ( ( ID [ - ( ID ) ) [ - func ID ) ] ) ) ] bool ] { } ( ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : call { { var ID : int var ID : bool call ID ( ) int ID ( ) } ID = 123 }",
  "func ID ( ID : int , ID : bool ) : call { { var ID : int var ID : bool call ID ( ) int ID ( ) } ID = 123 }",
  "func } ( ID : int , ID : bool ) : call { { var ID : int var ID : bool call ID ( ) int ID ( ) ID ID = 123 }",
  "func ID ( ) : bool { var ID : int return ID ( ) ) - - ID ( + [ true ] [ false ] - ( ID ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int ( ID return ) ) - - ID ( + [ true ] [ false ] - ( ID ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int ( ID return ) ) - - ID ( + [ true ] [ false ] - ) ID ) } func ID ( ( { }",
  "func ID , ID : bool , ID : [ ID ( ) [ 123 * false + - - - - true - false ] ] bool ( ID : bool ) { }",
  "func ID , ID : bool , ID : [ ID ( ) [ + * false 123 - - - - true - false ] ] bool ( ID : bool ) { }",
  "ID ID , ID : bool , ID : [ ID ( ) [ + * false 123 - - - - true - false ] ] bool ( func : bool ) { }",
  "func ID ( ) : int ] var ID : int var ID : [ ID / ID ( ) [ ( ID ) { [ false ] ] [ ] bool } func ID ( ) { }",
  "( ID ( ) : int ] var ID : int var ID : [ ID / ID func ) [ ( ID ) { [ false ] ] [ ] bool } func ID ( ) { }",
  "( ID ( ) : int ] var ID : int var ID : [ ID / ID func ) [ ( ID ) [ { false ] ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { ID [ ID * ID [ ] ID [ ( ( ID ) ) ] / false ] = ID }",
  "func ID ( ID : int , ID : bool ) false ID [ ID * ID [ ] ID [ ( ( ID ) ) ] / { ] = ID }",
  "func ID ( ID : int , ) : bool ) false ID [ ID * ID [ ] ID [ ( ( ID ) ID ] / { ] = ID }",
  "func ID ( ID bool int , ID : int , ID : : ) { var ID : bool if ID [ - - - - 123 ] { } } func ID ( ) { }",
  "func ID ( ID bool int - ID : int , ID : : ) { var ID : bool if ID [ - - - , 123 ] { } } func ID ( ) { }",
  "func ID ( ID bool int - ID : int , ID : : ) { func ID : bool if ID [ - - - , 123 ] { } } var ID ( ) { }",
  "{ ID ( ) func var ID : int print ( - - ( - ID / 123 ) ) } func ID ( ) { }",
  "{ ID ( ) func var ID : ( print ( - - ( - ID / 123 ) ) } func ID int ) { }",
  "func ID ( ) { var ID : int ID ( - ( - ( ( ( - false ) ) ) ) } = false } func ID ( ) { )",
  "func ID ( ) { var ID : int ID ( - ( - } ( ( - false ) ) ) ) } = false ( func ID ( ) { )",
  "func ID ( ) : int { ( ID ( ) { if ( true * false + true + call ID ) ) { } ID = false } }",
  "func ID ( ) : int { ( ID ( ) { if ( } * false + true + call ID ) ) { } ID = false true }",
  "func int ( ) : ID { ( ID ( ) { if ( } * false + true + call ID ) ) { } ID = false true }",
  "func ID ( ID : [ ] [ ] [ - 123 / ID ( ) [ - false ] [ - 123 ] * - false ] bool ) { } func ID ( ) } {",
  "func ID ( ID : [ ] [ ] [ - 123 false ID ( ) [ - / ] [ - 123 ] * - false ] bool ) { } func ID ( ) } {",
  "func ID ( ID false [ ] [ ] [ - 123 : ID ( ) [ - / ] [ - 123 ] * - false ] bool ) { } func ID ( ) } {",
  "func ID ( ID : bool , ID : [ true ] ( true and ( ID ) ) ] [ ] [ * [ ] bool ) { }",
  "func ID ( ID : bool , ] : [ true ] ( true and ( ID ) ) ] [ ] [ * [ ID bool ) { }",
  "func ID ( ID : int , ID : ) , ID : bool ) { var ID : int if - 123 or ( - ID ) or ID { } print ( - ( ID bool ) }",
  "func ID ( ID : int , ( : ) , ID : bool ) { var ID : int if - 123 or ( - ID ) or ID { } print ( - ID ID bool ) }",
  "func ID ( ID : int , ( : ) , ID : { ) bool var ID : int if - 123 or ( - ID ) or ID { } print ( - ID ID bool ) }",
  "func ID ( ID : bool , ID : int ) : 123 ] bool { var ID : bool ID ( ) [ ID ] [ [ ] = ( - false ) print ( - ID ) }",
  "func ID ( - : bool , ID : int ) : 123 ] bool { var ID : bool ID ( ) [ ID ] [ [ ] = ( ID false ) print ( - ID ) }",
  "func ID ( - : bool , ID : : ) : 123 ] bool { var ID int bool ID ( ) [ ID ] [ [ ] = ( ID false ) print ( - ID ) }",
  "func ID ( ID : bool , ID : [ ] [ ] bool , ID : bool ) { var } : [ true * 123 / 123 ] [ ] bool ID",
  "func ID ( ID : bool , ID : [ ] [ ] bool , ID : bool ) { [ } : var true * 123 / 123 ] [ ] bool ID",
  ") ID ( ID : bool , ID : [ ] [ ] bool , ID : bool func { [ } : var true * 123 / 123 ] [ ] bool ID",
  "func ID ( ID : bool , ID : bool , ( : bool ) { var ID : [ false - - ( ID ID ) ) ] [ ] int var ID : bool }",
  "func ID ( ID : bool , ID : bool , var : bool ) { var ID : [ false - - ( ID ID ) ) ] [ ] int ( ID : bool }",
  "func ID ( ID : bool , ID : int , ID { int ) : var ID : int }",
  "func ID ( ID : ID , bool : int , ID { int ) : var ID : int }",
  "func ID ( ID : ID , bool : int , ID { int ) : var ID : int }",
  "func [ ( ) { return ( ID ( ( ID ID ID ] [ false ] ) ) ) } func ID ( ) { }",
  "func [ ( ) { return ( ID ( ( ID ID ID ) [ false ] ) ] ) } func ID ( ) { }",
  "func [ ( ) { return ( ID ( ( ID ID ID ) [ false ] ) ] ) } func ID ( ) { }",
  "func ID ( ) : int { { call ID [ ID ( ) [ ID * ( ID ) ] ( - - ( - - ID ) ] ) } } func ID ( ) { }",
  "func ID ( ) : int { { call ID [ ID ( ) [ ID * ( ID ) ] ( ) - ( - - ID ) ] - } } func ID ( ) { }",
  "func ID ( ) : int { { call ID [ ID ( ) [ ID * ( ID ) ] ( ) - ( ( - ID ) ] - } } func ID - ) { }",
  "func ID ( - : [ ] bool , ID : bool ) { var ID : bool var ID : int return false / ( - ID - false ) * false } func ID ( ) { }",
  "func ID ( - : [ ] bool , ID : bool ) { var ID : bool var ID : false return false / ( - ID - int ) * false } func ID ( ) { }",
  "func ID / - : [ ] bool , ID : bool ) { var ID : bool var ID : false return false ( ( - ID - int ) * false } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : bool var ID : [ ( [ ] ID ( ) ) ] bool }",
  "func ID ( bool : int ) : int { var ID : bool var ID : [ ( [ ] ID ( ) ) ] ID }",
  "func ID ( bool ] int ) : int { var ID : bool var ID : [ ( [ : ID ( ) ) ] ID }",
  "func ID ( ID : [ - ( false * ( 123 * ID [ ( false ) ] / [ ) ) ] 123 ] bool ) { }",
  "( ID func ID : [ - ( false * ( 123 * ID [ ( false ) ] / [ ) ) ] 123 ] bool ) { }",
  "( ID func ID : [ - ( false * ( 123 * ID [ ( false ) ] / [ ) ) ] 123 ] bool ) { }",
  "func ID ( ) : int { var ID bool int var ID : : call ID ( ) return } func ID ( ) : [ ] int { }",
  "func ID ( ) : int { int ID bool var var ID : : call ID ( ) return } func ID ( ) : [ ] int { }",
  "func ID ( ) : int { int ID bool var var ID : : call ID ( ) return } func ID ( ) : [ ] int { }",
  "func ID ( ) : int { var ID : { 123 <= true / - true - ( ( ID ) ) ] [ ] bool var ID : int } func ID ( ) [ }",
  "func ID ( ) : int { var ID : { bool <= true / - true - ( ( ID ) ) ] [ ] 123 var ID : int } func ID ( ) [ }",
  "func ID ( ) : int : var ID { { bool <= true / - true - ( ( ID ) ) ] [ ] 123 var ID : int } func ID ( ) [ }",
  "func ID ( ID : bool , ID print bool ) : bool { var ID : bool : true * ID ( ) / ( ( true ) ) }",
  "func ID ( ID : bool bool ID print bool ) : , { var ID : bool : true * ID ( ) / ( ( true ) ) }",
  "func ID ( ID : bool bool / print bool ) : , { var ID : bool : true * ID ( ) ID ( ( true ) ) }",
  "func ID ( ID : bool , ID : int , ID : int ) : [ ID ) ( - ( - ID ) ) ( ] [ ] bool { }",
  "func ID ( ID : bool [ ID : int , ID : int ) : [ ID ) ( - ( - ID ) ) ( ] , ] bool { }",
  "func ID ( ID : bool [ ID : int , ID : int ) : [ ID ) ( - ( - ID ) ) ( ] , ] bool { }",
  "func ID ( ID : , ] int , ID : [ ] int [ ID : int ) : bool { var ID : int } func ID ( ID : bool ) { }",
  "func ID ( ID : , ] int , ID : [ ] int [ ID : int ) : bool } var ID : int { func ID ( ID : bool ) { }",
  "func ID ( ID : , ] int , ID : [ ] int [ ID : int ) : bool } var bool : int { func ID ( ID : ID ) { }",
  "func ID ( ) : bool { print - ) * - ( ID ( - ID ) ID * - - ID }",
  "func ID ( ) : bool { print - ) * - ( } ( - ID ) ID * - - ID ID",
  "func ID : ID ( bool , ID : [ ] int , ID : int ) { var ID : bool var ID : [ ID ( ) ] [ ] int }",
  "func ID : ID ( int , ID : [ ] bool , ID : int ) { var ID : bool var ID : [ ID ( ) ] [ ] int }",
  "func ID : ID ( int , ID : [ ] bool , ID : int ) { var ID : ( var ID : [ ID bool ) ] [ ] int }",
  "func ID ( ID : bool , ID : ) false * - - - ( - false * ( - ID ) [ / ID ] int ) { }",
  "func ID ( ID : bool , ID : ) false * - - - ( - { * ( - ID ) [ / ID ] int ) false }",
  "func ID ( ID : bool } ID : ) false * - - - ( - { * ( - ID ) [ / ID ] int ) false ,",
  "func ID ( ID : [ ( - ( ( false ID * ) ) ) ] int ) { }",
  "func ID ( ID : [ ( - ( ( false ID * ) ) ) { int ) ] }",
  "func - ( ID : [ ( ID ( ( false ID * ) ) ) { int ) ] }",
  "func ID ( ID : [ ( ( ID [ true * false * - 123 ] [ false ] ) ) ] bool ) { func } ID ( ) { }",
  "func ) ( ID : [ ( ( ID [ true * false * - 123 ] [ false ] ) ) ] bool ) { func } ID ( ID { }",
  "func ) ( ID : [ ( ( ID [ true * false * - 123 ] [ false ] ) ) ] bool ) { func } ID ( ID { }",
  "func ID ( ID : bool , ID : int ) { var ID : int var ID : bool call ID ( ( } ( ID ) ) ) ) while ID { } (",
  "func ID ( ID : bool , ID : int ) { var var : int ID ID : bool call ID ( ( } ( ID ) ) ) ) while ID { } (",
  "func ID ( ID : bool , ID : int ) { var var : int { ID : bool call ID ( ( } ( ID ) ) ) ) while ID ID } (",
  "func ID ( ) : ID { var ID : bool } func int ( ID : [ ( ( ID ) ) ] int ) { }",
  "func ID ( ) : ID { var ID : int } func int ( ID : [ ( ( ID ) ) ] bool ) { }",
  "func ID ( ID : bool , : : [ ] bool ) ID int { var ID : [ ( ( ID ) ) ] [ ] int var ID : [ ] int }",
  "func ID ( ID [ bool , : : [ ] bool ) ID int { var ID : [ ( ( ID ) ) ] : ] int var ID : [ ] int }",
  "func ID ( ID [ bool , : : [ ID bool ) ID int { var ] : [ ( ( ID ) ) ] : ] int var ID : [ ] int }",
  "func ID ( ID : int , ID : [ ] ] ] [ ] int ) { var ID : [ ( ID ) ] [ [ bool var ID : bool }",
  "func ID ( ID : int , ID : [ ] ] ] [ ] int ) { var ID : [ ( ID ) ] [ [ var bool ID : bool }",
  "func [ ( ID : bool ) : bool { var ID : ID ( ( ( ( ID ) ) ) ) ] [ ] bool } func ID ( ) { }",
  "func [ ( ID : bool ) : bool { var ID : ID ( ( ( ( ID { ) ) ) ] [ ] bool } func ID ( ) ) }",
  "func [ ( ID : bool ) : bool { var ID : ID ( ( ( ) ID { ) ( ) ] [ ] bool } func ID ( ) ) }",
  "func ID ( ID : int , ID : bool ) : [ func int { while ( 123 / ID * ID ) { } call ID ( ) } ] ID ( ) { }",
  "func ID ( ID : int , ID : bool ) ) [ func int { while ( 123 / ID * ID : { } call ID ( ) } ] ID ( ) { }",
  "func ID ( ID : int , ID : bool ) ) [ func int } while ( 123 / ID * ID : { { call ID ( ) } ] ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : bool ) { ID var : [ ] bool return } func ID ( ) { var ID : int }",
  "func ID ( ID : int , ID : int , ID : bool ) { ID var : [ ] bool return } func } ( ) { var ID : int ID",
  "func ID ( ID : int , ID : int , ID : bool ) { ID var : [ ] bool return } func } ( ) { var ID : int ID",
  "func ID ( ) : bool { var ID : int { var ID : bool ID ) ) = - ( - ( true ( ) } }",
  "func ID ( ) : bool { var ID : int { var ID : bool ID ) ) = - ( - ( true ( ) } }",
  "func ID ( ) : bool { var ID : int { var bool : ID ID ) ) = - ( - ( true ( ) } }",
  "func ID ( ) : [ ] [ ] int { var ID : [ ] int var ID : [ true - ] ID [ ] int }",
  "func int ( ) : [ ] [ ] int { var ID : [ ] int var ID : [ true - ] ID [ ] ID }",
  "func ID ( ) : [ ( false / ID / ( - ID [ ( ID bool ] [ ID ] ) ) ] ) { } func ID ( ) { }",
  "func ID ( ) : [ ( false / ID / ( - ID [ ( ID bool ] [ ID ] ) ) ] ) { } func ID ( ) { }",
  "func ID ( ) : [ ( false ) ID / ( - ID [ ( ID bool ] [ ID ] / ) ] ) { } func ID ( ) { }",
  "func ID ( ) : bool { while ( - - - 123 - ( ID } ) { ) } func ID ( ) { }",
  "func ID ( ) : bool { while ( - - - 123 ID ( - } ) { ) } func ID ( ) { }",
  "func ID ( ) : bool { while ( ID - - 123 - ( - } ) { ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ true and ( ( - - - ID ID ) ] [ ] [ ] bool , ) : int ) { }",
  "func ID , ID : int , ID : [ true and ( ( - - - ID ID ) ] [ ] [ ] bool ( ) : int ) { }",
  "func ID , ID : : , ID : [ true and ( ( - - - ID ID ) ] [ ] [ ] bool ( ) int int ) { }",
  "func ID ( [ : bool ) : int { var ID : bool var ID : [ ] ID ( ID ) ] bool }",
  "func ID ( [ : bool ) : int { var ID : bool var ID ) [ ] ID ( ID : ] bool }",
  "func ID ( [ : bool ) : int { var ID : bool var ID ) [ bool ID ( ID : ] ] }",
  "func ID ( } : [ - ( ( 123 * true * ID ( ) ) ) ] int { )",
  "func ID ( : } [ - ( ( 123 * true * ID ( ) ) ) ] int { )",
  "func ID ( : } ) - ( ( 123 * true * ID ( ) ) [ ] int { )",
  "func ID ( ID : [ ( - - ( - - ( ) - false ( ) ) ) ] bool ) { }",
  "func ID ( ID : [ ( - - ( - - ( ) - false ( ) ) ) ] bool ) { }",
  "func ID - ID : [ ( - ( ( - - ( ) - false ( ) ) ) ] bool ) { }",
  "[ ID ( ) : func ] int { var ID : [ ] [ ( 123 - ( ID ) ) ] bool }",
  "[ bool ( ) : func ] int { var ID : [ ] [ ( 123 - ( ID ) ) ] ID }",
  "[ bool ( ] : func ] int { var ID : [ ) [ ( 123 - ( ID ) ) ] ID }",
  "func ID ( ID : int ) : [ ID ( ) [ ID [ ( ( ID ) ) [ ] false ] ] ] [ ] int { } func ID ( ) { }",
  "func ID [ ID : int ) : ( ID ( ) [ ID [ ( ( ID ) ) [ ] false ] ] ] [ ] int { } func ID ( ) { }",
  "func ID [ ID : int ) : ( ID ( ) [ ID [ ( { ID ) ) [ ] false ] ] ] [ ] int ( } func ID ( ) { }",
  "func ID } ID : [ - ( - ID ( ) != ( false ) ) ] [ ] int ) { } func ID ( ) { (",
  "func false } ID : [ - ( - ID ( ) != ( ID ) ) ] [ ] int ) { } func ID ( ) { (",
  "func false } ID : [ - ( - ID ( ) ) ( ID ) ) ] [ ] int != { } func ID ( ) { (",
  "func ID ( ID >= [ ] [ ID [ - true * - 123 : ID ] [ - ( true ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ID >= [ ] [ ID [ - true * - 123 ( ID ] [ - : true ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ID >= [ ] ( ID [ - true * - 123 [ ID ] [ - : true ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ( 123 ) - ID ( - ID [ ID ] [ ( ID ) ] ) * ] int { }",
  "func ID ( ) : [ ( 123 ) - ID ( - ID [ ID } [ ( ID ) ] ) * ] int { ]",
  "func ID ( ) : [ ( 123 ) ID - ( - ID [ ID } [ ( ID ) ] ) * ] int { ]",
  "func ID ( ID : int , ID : bool ) { var ID : bool ID var : bool return }",
  "func ID ( , : int ID ID : bool ) { var ID : bool ID var : bool return }",
  "func ID ( , : int ID ID : bool ) { var var : bool ID ID : bool return }",
  "func ID ( ID : bool , ID : int ) ) [ ] bool { while - ( 123 * ( - - ID ) : { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) ) [ ] bool { while - ( 123 * ( - - ID ) : { } } func ID ( ) { }",
  "while ID ( ID : bool , ID : int ) ) [ ] bool { func - ( 123 * ( - - ID ) : { } } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool ) { var { : bool ID ID [ - 123 ] = ID if true { } } call ID ( ) }",
  "func ID ( ID : [ ] int , ID : bool ) { var { : bool - ID [ ID 123 ] = ID if true { } } call ID ( ) }",
  "func ID ( ID : [ ] } , ID : bool ) { var { : bool - ID [ ID 123 ] = ID if true { } } call ID ( ) int",
  "func ID ( [ : [ ] int , ID : [ ] int ) { var ID : bool var ID : ID ] bool return - ID }",
  "func ID ( [ : [ ] int , ID : ID ] int ) { var ID : bool var ID : [ ] bool return - ID }",
  "func ID ( [ : [ ] int , int : ID ] ID ) { var ID : bool var ID : [ ] bool return - ID }",
  "func ID ( ) / var ID : int var ID : bool if 123 + true { ( ID ) { } print ( - - false ) }",
  "func ID ( ) / var print : int var ID : bool if 123 + true { ( ID ) { } ID ( - - false ) }",
  "func - ( ) / var print : int var ID : bool if 123 + true { ( ID ) { } ID ( ID - false ) }",
  "func ID ( ) : bool } var ID : bool if false / 123 + ( - ID ) + ID { } call ID ( ) {",
  "func ID ( ) : bool } var ID : bool if false / 123 + ( - ID ) + { { } call ID ( ) ID",
  "func ID ( ) } bool } var ID : bool if false / 123 + ( - ID ) + { { : call ID ( ) ID",
  "func ID ( ) ( var ID : bool var ID : bool call ID ( ) print ID { 123 / ( ID ) ) }",
  "func ID ( ) ( var ID : bool var ID : bool 123 ID ( ) print ID { call / ( ID ) ) }",
  "var ID ( ) ( var ID : bool func ID : bool 123 ID ( ) print ID { call / ( ID ) ) }",
  "func ID ( ID : int , ID : { ] bool , ID : bool ) { var ID : int var ID : [ ] [ ] bool while - ID { } ID = - 123 } func ID ( ) [ }",
  "func ID ( ID : int , ID : : ] bool , ID : bool ) { var ID { int var ID : [ ] [ ] bool while - ID { } ID = - 123 } func ID ( ) [ }",
  "func ID ( ID : int , var : : ] bool , ID : bool ) { var ID { int ID ID : [ ] [ ] bool while - ID { } ID = - 123 } func ID ( ) [ }",
  "func ID ( ID : [ ) ( ) / true > ID ( ( - ( ID ) ) ) ] [ ] int ) { } func ID ( ID { }",
  "func ID ( ID : [ ) ( ) / true > ID ( ( } ( ID ) ) ) ] [ ] int ) { - func ID ( ID { }",
  "func ID ( ID : [ ) ( ) / true > ID ( ( } ( ID ) ) ) ] [ ] int ) { - func ID ( ID { }",
  "func ID ( ) ] [ ] [ : [ ] int { var ID : [ ] int var ID : bool }",
  "func ID ( ) ] [ ] [ : [ ] int { var ID : [ ] int var ID : } bool",
  "func ID ( int ] [ ] [ : [ ] ) { var ID : [ ] int var ID : } bool",
  "func ID ( ) ID [ : * 123 * ( ID ( ) [ ( ( ( ( ID ) ) ) ) ] ) ] int { } func ID ( ) { }",
  "func ( ( ) ID [ : * 123 * ( ID ( ) [ ( ( ( ( ID ) ) ) ) ] ) ] int { } func ID ID ) { }",
  "func ( ( ) ID [ : * 123 * ( ID ( ) [ ( ( ( ) ID ) ( ) ) ] ) ] int { } func ID ID ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] int ) { var ID : bool { var ID : int var ID : [ ] [ } [ ] bool } ] func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] int ) { var ID ID bool { var : : int var ID : [ ] [ } [ ] bool } ] func ID ( ) { }",
  "func ID : ID ( bool , ID : bool , ID : [ ] int ) { var ID ID bool { var : : int var ID : [ ] [ } [ ] bool } ] func ID ( ) { }",
  "func ID ( [ : ) - - false >= false - ( ( ID ) + true ) ] bool { } func ID ( ) { }",
  "func ID ( [ : ) - - false >= false - ( ( ID ) + true ) ] bool { } func ID ( ) { }",
  "func ID ( ) : var ID : [ ] [ ] bool { var ID { int var ID : bool } return true }",
  "func ID true ) : var ID : [ ] [ ] bool { var ID { int var ID : bool } return ( }",
  "func ID true ) : var ID : } ] [ ] bool { var ID { int var ID : bool } return ( [",
  "func ID ( ) { print ID ( ) [ ID [ false <= - ( - - ID ) - [ ] ( true ) ] ] print - false } func ID ( ) { }",
  "func ID ( ) { print ID ( ) [ ID [ false <= - ( - - ID ) - [ ] ( true ) ] ] print - false } func ID ) ( { }",
  "func ID return ID : bool ) : bool { var ID : [ ] [ ] int var ID : bool ( } func ID ( ) { var ID : bool var ID : bool }",
  "bool ID return ID : bool ) : bool { var ID : [ ] [ ] int var ID : bool ( } func ID ( ) { var ID : bool var ID : func }",
  "bool ID return ID : bool var : bool { var ID : [ ] [ ] int ) ID : bool ( } func ID ( ) { var ID : bool var ID : func }",
  "func ID ( ) ) int { var ID : [ ( ( - ID * ( ( false ) : / true ) ) ] [ ] [ ] bool }",
  "func ID ( ) ) int { var ID : [ ( ( - ID * ( ( false ) : / true ) ) ] [ ] [ ] bool }",
  "func ID ( ) ) int { var ID : [ ( ( - ID * ( ( false ) bool / true ) ) ] [ ] [ ] : }",
  "func ID ( ) { var ID : int ID ( ID ( = false * ( - ( ( ID ) ) ) ) ) - ( - true ) while ( ID ) { } }",
  "func ID ( ) { var ID : int ID ( ) ( = false * ( - ( ( ID ID ) ) ) ) - ( - true ) while ( ID ) { } }",
  "func ID ( ) { var ID : int ID ) ) ( = false * ( - ( ( ID ID ) ) ) ) - ( - true ) while ( ID ( { } }",
  "func ID ( ) : [ false - 123 / ID ( ) [ ( false ) ] - ] - - ( ( ( false ) ) ) - [ ] bool { }",
  "func ) ( ) : [ false - 123 / ID ( ) [ ( false ) ] - ] - - ( ( ( false ID ) ) - [ ] bool { }",
  "func ) ( ) : [ false - / 123 ID ( ) [ ( false ) ] - ] - - ( ( ( false ID ) ) - [ ] bool { }",
  "func ID ( ID : bool , ID : [ ] bool ) { { var ID : bool var ID : [ ( ID ] ) int } if - ID { } }",
  "func ID ( ID : bool , ID : [ ] bool ) { { } ID : bool var ID : [ ( ID ] ) int } if - ID { var }",
  "func ID ( ID : bool , ID : [ ] bool ) { { ] ID : bool var ID : [ ( ID } ) int } if - ID { var }",
  "func ID ( - : int ) { if ID ID ( ) or ( ID ) or ID { } ID = - - false }",
  "func ID ( - : int ) { if ID ) ( ) or ( ID ID or ID { } ID = - - false }",
  "func ID ( - : int ) { if ID ) ( ) or ( ID ID or ID { } ID = - - false }",
  "func ID ( ID : int , ID : ) int { }",
  "func ID ( ID ID int , : : ) int { }",
  "func ID ( ID : int , : ID ) int { }",
  "func ID ( ID : bool , ID : int , ID : [ ] int ) ID var ID : bool { ( ( false ) ) = - ( 123 ) while - ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ] int ) ID var ID : bool { ( ( false ) ) = - ) 123 ( while - ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ] int = ID var ID : bool { ( ( false ) ) ) - ) 123 ( while - ID { } } func ID ( ) { }",
  "func ID ( ) : [ ] 123 { var ID : bool var ID : bool { ID [ - bool ] = - - true ID = ( 123 ) } call ID ( ) }",
  "func ID ] ) : [ ( 123 { var ID : bool var ID : bool { ID [ - bool ] = - - true ID = ( 123 ) } call ID ( ) }",
  "func ID ] ) = [ ( 123 { var ID : bool var ID : bool { ID [ - bool ] : - - true ID = ( 123 ) } call ID ( ) }",
  "( ID ( ID : int , ID : [ func true * ID ( ID ) ) ] int ) { }",
  "( ID ( ID : int , ID : [ func true * ID ( ID ) ) ] int ) { }",
  "func ID ( ) : int { var ID : int var ID : ] } func ID ( ID : bool ) : [ 123 / ID bool bool { }",
  "func } ( ) : int { var ID : int var ID : ] } func ID ( ID : bool ) : [ 123 / ID bool bool { ID",
  "func } ( { : int ) var ID : int var ID : ] } func ID ( ID : bool ) : [ 123 / ID bool bool { ID",
  "func ID ( ID : bool ) { var ID : [ ] [ false * ( - ID ( ) bool * ( ( - - - - ID ) ) ] [ ] ) var ID : bool }",
  "func ID ( ID : bool ) { var ID : [ ] [ false * ( - ID ( ) bool * ( [ - - - - ID ) ) ] ( ] ) var ID : bool }",
  "func ID ( ID : bool ) { var ID : [ ] var false * ( - ID ( ) bool * ( [ - - - - ID ) ) ] ( ] ) [ ID : bool }",
  "func ID ( ) { var ID : ID ] [ ] int var ID : [ ( 123 * ( - true ) * 123 ) ] int } func [ ( ) { }",
  "func ID ( ) { var ID : ID ] [ ] int var ID : [ ( 123 * ( { true ) * 123 ) ] int } func [ ( ) - }",
  "func ID ( ) { var ID : ID * [ ] int var ID : [ ( 123 * ( { true ) ] 123 ) ] int } func [ ( ) - }",
  "func ID ( ID : int , ID : [ ( ( ( ( ID ) ) ) ) ] bool , ID : int ) { } func ID ( ) } {",
  "func ID ( ID : int , ID : [ ( ( ( ( ) ID ) ) ) ] bool , ID : int ) { } func ID ( ) } {",
  "func ID ( ID : int [ ID : , ( ( ( ( ) ID ) ) ) ] bool , ID : int ) { } func ID ( ) } {",
  "func ID ( ) : int { var ID : [ ] int var } : [ ] [ ] bool return ID",
  "func return ( ) : int { var ID : [ ] int var } : [ ] [ ] bool ID ID",
  "func return ( ) : int { var ID : [ ] int var } : [ ] [ ] bool ID ID",
  "func ID ( ) : int { var ID : [ ] [ ] bool var ID : [ ID [ func ID ) ] ] [ ] [ ] [ ] int } ( ID ( ) { }",
  "func ( ID ) : int { var ID : [ ] [ ] bool var ID : [ ID [ func ID ) ] ] [ ] [ ] [ ] int } ( ID ( ) { }",
  "ID ( func ) : int { var ID : [ ] [ ] bool var ID : [ ID [ func ID ) ] ] [ ] [ ] [ ] int } ( ID ( ) { }",
  "func ID ( ) { var ID : [ ] ID ID ( ( - ( ( ID ) ) ) ) ] int var ID : bool } func [ ( ) { }",
  "] ID ( ) { var ID : [ func ID ID ( ( - ( ( ID ) ) ) ) ] int var ID : bool } func [ ( ) { }",
  "] ID ( ) { var ID : [ func ID ID ( ( var ( ( ID ) ) ) ) ] int - ID : bool } func [ ( ) { }",
  "func ID ( ID : [ - ID ( ) [ ID ( ( false ) ) ] ] bool ) { } func ) ( ID { }",
  "func ID ( ID : [ - ID ( ) [ ID ( ( false ) ) ) ] bool ] { } func ) ( ID { }",
  "func ID ( ) { - ID : bool var ID : bool call ID ( var - ( ( ( ( - 123 ) ) ) ) ) }",
  "func ID ( ) { - ID : bool var ID : bool call ID ( var - ( ( ( ( - 123 ) } ) ) ) )",
  "func ID ( ) { ID ID : bool var - : bool call ID ( var - ( ( ( ( - 123 ) } ) ) ) )",
  "func ID ( ) : bool { var ID : [ ] [ 123 / ( ( - - 123 ) ) / false bool ] var ID : bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] [ 123 / ( ( bool - 123 ) ) / false - ] var ID : bool } func ID ( ) { }",
  "func ( ID ) : bool { var ID : [ ] [ 123 / ( ( bool - 123 ) ) / false - ] var ID : bool } func ID ( ) { }",
  "func ID ( ) ( } func ID ( ID : [ - ID ( ID { ) [ 123 ] ) ] [ ] int ) { }",
  "func ID ( ) ( } func ID ( ID : [ - ID ) ID { ( [ 123 ] ) ] [ ] int ) { }",
  "ID ID ( ) ( } func func ( ID : [ - ID ) ID { ( [ 123 ] ) ] [ ] int ) { }",
  "func ID ( ID : int , ID : bool , ID ID bool ) : int { { var ID : int } while : { } } func ID ( ) { }",
  "func ID ( ID : while , ID : bool , ID ID bool ) : int { { var ID : int } int : { } } func ID ( ) { }",
  "int ID ( ID : while , ID : bool , ID ID bool ) : int { { var ID : int } func : { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int ID [ ( - 123 / ID ( ) ) ] = 123 - ( - ( print ( false ) ) ) }",
  "func ID ( ) : bool { ID ID : int var [ ( - 123 / ID ( ) ) ] = 123 - ( - ( print ( false ) ) ) }",
  "func ID ( ) : bool { ] ID : int var [ ( - 123 / ID ( ) ) ID = 123 - ( - ( print ( false ) ) ) }",
  "+ ID ( ) { var ID : [ ( ID [ true * false - - true func ( false ) ] ) ] [ ] bool }",
  "+ ID ( ) { var ID : [ ( ID [ true * false - - true func ( false ) ] ) ] [ ] bool }",
  "+ ID ( [ { var ID : [ ( ID ) true * false - - true func ( false ) ] ) ] [ ] bool }",
  "func ID } ) { while 123 * ( - ID ( ID ( ) ) ) * ( ( ID ) ) { } ID = ( - false ) ( func ID ( ) { }",
  "func ID } ) { while 123 * ( - ID ( ID ( ) ) ) * ( ( ID ) ) { } ID } ( - false ) ( func ID ( ) { =",
  "func ID } false { while 123 * ( - ID ( ID ( ) ) ) * ( ( ID ) ) { } ID } ( - ) ) ( func ID ( ) { =",
  "} ID ( ) { var ID : bool print ( ID ( ( 123 ) ) ) func",
  "} ID ) ) { var ID : bool print ( ID ( ( 123 ) ) ( func",
  "} ID ) ) bool var ID : { print ( ID ( ( 123 ) ) ( func",
  "ID ID ( ID : [ ( - ( - ( ID ( func ) ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "ID ID ( ID : [ ID - ( - ( ( ( func ) ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "ID ID ( ID : [ ID - ( - ( ( ( func ) ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : ID ( - 123 / ( false - [ - - ( ( false ) ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : ID ( - 123 / ( false - [ - - ( ( false ) ) ) ) ] bool { { } func ID ( ) ) }",
  "func ID ( bool : int , ID : ID ( - 123 / ( false - [ - - ( ( false ) ) ) ) ] ID { { } func ID ( ) ) }",
  "func ID ( ) : bool { var ID : int return } - ID ( ) { var ID : [ func ID ] int var ID : int }",
  "func ID ( ) : bool { var ID : int : } - ID ( ) { var ID return [ func ID ] int var ID : int }",
  "func ID ( ) : bool { var ID : int : } - ID ( ) { var ID return [ func ID ] int var ID : int }",
  "func ID ( ) { [ ID : [ ( - - ( - true / - true ) ) ] var ] [ ] int }",
  "func ID ( ) { [ ID : [ ( - - ( - true ] - true ) ) / var ] [ ] int }",
  "func ID ( ) ) [ ID : [ ( - - ( - true ] - true { ) / var ] [ ] int }",
  "func ID ( ) ID int { } func ID ( ID : int , ID : bool , ID : int ) : bool { var : : [ - - - ( - false ) ] [ ] bool var ID : bool }",
  "func ID ( ) ID int { } func ID : ID : int , ID : bool , ID : int ) : bool { var : ( [ - - - ( - false ) ] [ ] bool var ID : bool }",
  "func ID ( ID : { ] [ ( ( true / - false * ( ( false ) ) ) ) ] [ ] int ) [ } func ID ( ) { }",
  "func ID ( ID : { ) [ ( ( true / - false * ( ( false ) ) ) ] ] [ ] int ) [ } func ID ( ) { }",
  "func ( ( ID : { ) [ ( ( true / - false * ID ( false ) ) ) ] ] [ ] int ) [ } func ID ( ) { }",
  "func ID ( ) : { int var ID : [ false + 123 / ID ( ) / ( ( ID ) ) - true ] int } func ID ( ) { }",
  "func ID ( ( : { int var ID : [ false + 123 / ID ) ) / ( ( ID ) ) - true ] int } func ID ( ) { }",
  "func ID } ( : { int var ID : [ false + 123 / ID ) ) / ( ( ID ) ) - true ] int } func ID ( ) { (",
  "func ID ( ) { var ID : bool { var call : int var ID : bool } ID ID ( ID [ false ] ) } func ID ( ) { }",
  "func ID ( ) { var ID var bool { : call : int var ID : bool } ID ID ( ID [ false ] ) } func ID ( ) { }",
  "func ID ( ) { ID ID var bool { : call : int var var : bool } ID ID ( ID [ false ] ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( [ - true + ID false - - ID ] [ 123 ] ) ] [ ] bool var ID : [ ] [ ] [ ] int }",
  "func ID ( ) { var ID ID [ ( [ - true + ID false - - : ] [ 123 ] ) ] [ ] bool var ID : [ ] [ ] [ ] int }",
  "func ID ( ) { var ID ID [ ( var - true + ID false - - : ] [ 123 ] ) ] [ ] bool [ ID : [ ] [ ] [ ] int }",
  "func ID func ) { var ID : int var ID : int while ( false + ID ( ) - ( 123 ) ) { } print - ID } ( ID ( ) { }",
  "func ID func ) { var ID : int var ID : int while ( false + ID ( ) - } 123 ) ) { } print - ID } ( ID ( ) { (",
  "func ID func ) { ID ID : int var ID : int while ( false + ID ( ) - } 123 ) ) { } print - ID } ( var ( ) { (",
  "func ID ( ) { var ID : [ ] [ ] int var ID : ( { var ID : int ID [ bool - false ) ] [ - ID ] = - ID } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] int var ID : ( { var ID : int ID [ bool - false ) ] [ - ID ] = - ID } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] int var ID : ( { var ID : int ID [ bool - false ) ] [ - ID ] = - ID } } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : [ ] int { var ID : bool return true - } } } func ID ( ) { ID",
  "func ID ( ID : [ ) : int { var ID : int ] int { var ID : bool return true - } } } func ID ( ) { ID",
  "{ ID ( ID : [ ) : int { var ID : int ] int { var ID : bool return true - } } } func ID ( ) func ID",
  "func ID ( ID : [ ] bool , ID : , ID ( ) [ ID ( ) [ - ( - ( false ) ) ] ] [ - true ] ] int [ ID : int ) { }",
  "func ID ( ID : [ ] bool , { : , ID ( ) [ ID ( ) [ - ( - ( false ) ) ] ] [ - true ] ] int [ ID : int ) ID }",
  "func ID ( ID : [ ] bool , { : , ID ( ) [ ID ( ) [ - ( ) ( false ) ) ] ] [ - true ] ] int [ ID : int - ID }",
  "func ID ( ID : bool , ID ) bool , ID : bool : : int { var ID : bool call ID ( ) }",
  "func ID ( : : bool , ID ) bool , ID : bool : : int { var ID ID bool call ID ( ) }",
  "func ID ( : : bool , ) ID bool , ID : bool : : int { var ID ID bool call ID ( ) }",
  "func ID ( ID : int , ID : bool ) { if - false * ID ( ) [ - ID { [ 123 ] / ( - - ( ( - - false ) ) ) ] } } func ID ( ) { }",
  "func ID ( ID ) int , ID : bool ) { if - false * ID ( ) [ - ID { [ 123 ] / ( - - ( ( - - false : ) ) ] } } func ID ( ) { }",
  "( ID ( ID ) int , ID : bool ) { if - false * ID ( ) [ - ID { [ 123 ] / ( - - ( func - - false : ) ) ] } } func ID ( ) { }",
  "func ID - ) : int { call ID ( ) while - false ( ( false * true ) { } }",
  "func ID - ) : int { call ID ( ) while - false ( } false * true ) { ( }",
  "func ID - ) : int { call ID ( ) while - false ( } ) * true false { ( }",
  "func ID ( : { var ID : int { var ID ) bool var ID : int return } ID ( ) = ID } func ID ( ) { }",
  "func ID ( : { var ID : int { ( ID ) bool var ID : int return } ID var ) = ID } func ID ( ) { }",
  "func ID ( : { var ID : int { ( ID ) bool var ID : int return } ID var ) = ID } } ID ( ) { func",
  "func ID ( ) : - { call ID ( ) print 123 / bool ( ( - ID ) ) / ( true ) }",
  "func ID ( ) : - { call ID ( ) print 123 / bool ( ( ) ID ) ) / ( true - }",
  "func ID ( ) { var ID : int ID = ( - ID 123 ) / false * - ID - 123 call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : int ) = ( - ID 123 ) / false * - ID - 123 call ID ( ID } func ID ( ) { }",
  "func ID ( ) { var ID : int ) = ( - ID 123 ) / false * - ID - 123 call ID ( ID func } ID ( ) { }",
  "func ID ( ID : int , ID : int ) { } ID ID ( ID : bool , func : bool , ID : [ ] bool ) { call ID ( ) { } }",
  "func ID ( ID : int , ID : int ) ID } { ID ( ID : bool , func : bool , ID : [ ] bool ) { call ID ( ) { } }",
  "func ID ( ID : int , ID : int ) ID ) { ID ( ID : bool , func : bool , ID : [ ] bool ) { call ID ( } { } }",
  "- ID ( ID : [ ] bool ) { var ID : int return ( - ( func - ID ) ) }",
  "- ID ( ID : [ ] bool ) { var ID : - return ( - ( func int ID ) ) }",
  "- ID ( ID : [ ] ID ) { var ID : - return ( - ( func int bool ) ) }",
  "func ID ( ID : [ true + ( true * ( ( 123 bool ) ) ] ) ) { }",
  "func ID ( ID : [ true + ( true ] ( ( 123 bool ) ) * ) ) { }",
  "func ( ( ID : [ true + ( true ] ID ( 123 bool ) ) * ) ) { }",
  "func ID ( ) { var ID : : return } func ID ( ID int bool , ID : bool , ID : int ) : bool { var ID : [ ] [ ] int }",
  "func ID ( ) { var ID ID : return } func ID ( : int bool , ID : bool , ID : int ) : bool { var ID : [ ] [ ] int }",
  "func ID ( ) { var ID ID : return } func ID ( : int bool , ) : bool , ID : int ID : bool { var ID : [ ] [ ] int }",
  "func ID ( ) : return ] int { var ID : int var ID : [ ] int [ ID [ - ( true ) ] }",
  "func ID ( ) : return int int { var ID : int var ID : [ ] ] [ ID [ - ( true ) ] }",
  "func ID ( ) : return int int { var ID : int var true : [ ] ] [ ID [ - ( ID ) ] }",
  "func ID ( ID : [ 123 <= 123 - ) ( false * ID ) ] bool ID { }",
  "func ID ( ID : [ 123 <= 123 - ) ( * false ID ) ] bool ID { }",
  "func ID ( ID : [ 123 <= 123 - ) ( * false ] ) ID bool ID { }",
  "func ID ( ID : int , ID : int , ID true int ) { var ID : int ID ( ) [ - ( - ( - ID ) ) ] [ false ] = : call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID true int ) { ID var : int ID ( ) [ - ( - ( - ID ) ) ] [ false ] = : call ID ( ) } func ID ( ) { }",
  "func ID ( ID : int , : : int , ID true int ) { ID var : int ID ( ) [ - ( - ( - ID ) ) ] [ false ] = ID call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int var ID : bool print ID ( ) ID ( / ) / ID while ( - ID ) { } }",
  "func ID ( ) { var ID : [ ] int var ID : bool print ID ( ) ID ( / ) / ID while ( - ID ) { } }",
  "func ID ( ] { var ID : [ ) int var ID : bool print ID ( ) ID ( / ) / ID while ( - ID ) { } }",
  "func ID ( ID : int , ID : [ ] bool , ID : [ false / ( ID [ ID ] [ ( false ) ] ) ] bool ) { } func ( ID ) { }",
  "func ) ( ID : int , ID : [ ] bool , ID : [ false / ( ID [ ID ] [ ( false ID ] ) ] bool ) { } func ( ID ) { }",
  "func ) ( ID : ID , ID : [ ] bool , ID : [ false / ( int [ ID ] [ ( false ID ] ) ] bool ) { } func ( ID ) { }",
  "func ID ( ) : bool { var ID : func var ID : [ ] [ 123 * ( ( true ) ) ] [ ] bool } bool ID ( ) { }",
  "func ID ( ) : bool { var ID : func var ID : [ ] [ 123 * ( ( true ) ) ] bool ] bool } [ ID ( ) { }",
  ") ID ( ) : bool { var ID : func var ID : [ ] [ 123 * ( ( true func ) ] bool ] bool } [ ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : [ ] int ] [ }",
  "func ID ( ID : ] ) : bool { var ID : [ ] int bool [ }",
  "func ID int ID : ] ) : bool { var ID : [ ] ( bool [ }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var ID : - print - ( - int - - - ID ) if true { } }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var ID : - print - ( - int - - - ID ) if true { } }",
  "func ID ( ID : bool , ID : bool , ID : bool ) - var ID : - print - ( - int - - { ID ) if true { } }",
  "func ID ( ) : bool { var ID : int var ID : [ ] int return } func ID ( ID : bool , ID : ID , int : [ ] [ ] [ ] [ ] int ) { }",
  "func ID ( ) : bool { var ID : int var ID : [ ] int return } func ID ( ID : bool ] ID : ID , int : [ ] [ ] [ , [ ] int ) { }",
  "func ID ( ] : bool { var ID : int var ID : [ ] int return } func ID ( ID : bool ) ID : ID , int : [ ] [ ] [ , [ ] int ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ] [ ID [ ) + - - 123 - ID ] ( ] [ ] int ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ] [ ID [ ) + - [ 123 - ID ] ( ] - ] int ) { }",
  "func ID ( ID : int [ ID : bool , ID : [ ] , ID [ ) + - [ 123 - ID ] ( ] - ] int ) { }",
  "func ID ( ID : [ ] [ ] int , ID [ int ) : : ( ( ID ) ) ] int { } func ID ( ) { }",
  "func { ( ID : [ ] [ ] int , ID [ int ) : : ( ( ID ) ) ] int { } func ID ( ) ID }",
  "func { ( ID : [ ] [ ] int , ID [ int ) : : ( ( ID ) ) ] int { } func ) ( ID ID }",
  "func ID ( ) : bool { var ID : bool var } : int { { return ( false ) } } ID func ID ( ) { }",
  "func ) ( ID : bool { var ID : bool var } : int { { return ( false ) } } ID func ID ( ) { }",
  "func ) ( ID : bool { var ID : bool } } : int { { return ( false ) } } ID func ID ( ) { var",
  "func ID ( } : bool , ID : bool ) { var ID : int call ID ( ) call ID ( - ID ) ID func ID ( ) { }",
  "func ID ( } : bool , ID : bool ) { var ID : int ID ID ( ) call ID ( - ID ) call func ID ( ) { }",
  ") ID ( ) { var ID : bool var ID : int if false / ( false - ( - ID ) ) * - - ( ID func { } }",
  ") ID ( ) { var ID : bool var ID : int if { / ( false - ( - ID ) ) * - - ( ID func false } }",
  ") ID ( ) { : ID : bool var ID var int if { / ( false - ( - ID ) ) * - - ( ID func false } }",
  "func ID ( ID : [ - - ) ID ( ( [ - ( ID ) ] ) ] int ) { }",
  "func ID ( int : ID , ID : [ true / - - ( 123 * ( - ID ) ) * ( ID ) ] bool ) { }",
  "func ID : int : ID , ID ( [ true / - - ( 123 * ( - ID ) ) * ( ID ) ] bool ) { }",
  "func ID ( ID : ( ) : int { var ID : [ ] [ 123 / ID int ( 123 ) ) * - - - - - false ] [ ] bool var ID : [ ] int }",
  "func ID ( ID : ( ) : int { var ID : [ ] [ 123 / ID int ( 123 ) ) * - - - - - false ] [ ] bool var ID : [ ] int }",
  "func ID ( ID : ( ) : int { var ID - [ ] [ 123 / ID int ( 123 ) ) * - : - - - false ] [ ] bool var ID : [ ] int }",
  "func ID ( ID : bool , ID : [ ID * ( int > - ID ) ] [ ] [ ] [ ] int , ID : [ ] true ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID * ( int > - ID ) ] , ] [ ] [ ] int [ ID : [ ] true ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID * ( int > - ID ) ] , ] [ ] [ ] int [ ID : [ ] true ) { } func ID ( ) { }",
  "func ID ( ) { var ID } int ID ( - ID [ true / false ] [ false ] ) = false ID = - ( ID ) : func ID ( ) { }",
  "func ID ( ) { var ID - int ID ( } ID [ true / false ] [ false ] ) = false ID = - ( ID ) : func ID ( ) { }",
  "func ID ( ID : int , ID : [ 123 * - false [ - - ( ID ) ] [ false ] ] [ ] bool , ID : bool ) { }",
  "func ID ( ID : int , ID : [ 123 * - false [ - - ( ID ) ] [ : ] ] [ ] bool , ID false bool ) { }",
  "func ID ( ID : int , ] : [ 123 * - false [ - - ( ID ) ] [ : ID ] [ ] bool , ID false bool ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : int ( ID : [ var - - 123 ) ] bool } func ID ( ) { }",
  "func ID ( ID : int ID ID : bool ) { var ID : int ( ID : [ var - - 123 ) ] bool } func , ( ) { }",
  "func ID ( ID : int ID ID : bool ] { var ID : int ( ID : [ var - - 123 ) ) bool } func , ( ) { }",
  "func ID ( ID : int , ID : bool ) : int { var ID : bool ( ID : bool ID ( ) = ( ( ( var ( false ) ) ) ) ) }",
  "func ID ( ID : int , ID : bool ) : int ) var ID : bool ( ID : bool ID ( ) = ( ( ( var ( false ) { ) ) ) }",
  "func ID ( ID : ( , ID : bool ) : int ) var ID : bool ( ID : bool ID ( ) = int ( ( var ( false ) { ) ) ) }",
  "func ID ( ) { var ID : bool call ID ID ( ( ( ID ) ) ) }",
  "func ) ( ) { var ID : bool call ID ID ( ( ( ID ID ) ) }",
  "func ) ( ) { call ID : bool var ID ID ( ( ( ID ID ) ) }",
  "func ID ( ID : [ ( ( ( ID ( ) int false + false ) ) ) ] - ) { }",
  "func ID ( ID : [ ( ( ( ID ( ) int false + false ) ) ] ) - ) { }",
  "func ID ( ID : [ ( ( ( ID ( { int false + false ) ) ] ) - ) ) }",
  "func ID ( while : int { ) ID [ true - ID ( - - ID ) + ( ( - 123 ) ) ] { } } func ID ( ) { }",
  "func ID ( while : int { ) ID [ true - ID } - - ID ) + ( ( - 123 ) ) ] { } ( func ID ( ) { }",
  "func ID ( while : int { ) ID [ true - ID } - - ID ) + ( ( - 123 ) } ] { ) ( func ID ( ) { }",
  "func ID ( ) { var ID : bool ID [ - ( ID [ ( ( ID } ) ] [ - ID ] ) ] [ ID ] = ID if false { } )",
  "func ID ( ) { var ID : bool ID [ - ( ID [ ( ( ID } ) ] [ - ID ] ) ] [ if ] = ID ID false { } )",
  "func { ( ID : bool ) : int ID call ID ( ) }",
  "func { ( ID : bool ) ID int : call ID ( ) }",
  "func { ( ID : bool ) int ID : call ID ( ) }",
  "func ID ( ID : bool , ID ( int ) { if ( ( false / : ID ) ) ) { } }",
  "func ID ( ID : bool , ID ( int : { if ( ( false / ) ID ) ) ) { } }",
  "func ID ( ID : bool } ID ( int : { if ( ( false / ) ID ) ) ) { , }",
  "func ID ( ) { var ID : bool var ID : [ ] return int ID ( ) + - - - false }",
  "func ID ( ) { var ID : ] var ID : [ bool return int ID ( ) + - - - false }",
  "func ID ( false { var ID : ] var ID : [ bool return int ID ( ) + - - - ) }",
  "func ID ( ID : int ) : [ } bool { return ]",
  "func ID ( ID : int { : [ } bool ) return ]",
  "func ID ( ID : int { : ) } bool [ return ]",
  "ID ID ( ) : int { var ID : bool var ID : bool print true / true - false != false } func func ( ) { }",
  "ID ID ( ) : int { var ID : bool var ID : bool print true / true } false != false } func func ( ) { -",
  "ID ID ( ) : int { var } : bool var ID : bool print true / true ID false != false } func func ( ) { -",
  "func ID ( ID - [ false / true : false / ( true / ( ID ) / - 123 ) ] int ) { } func ID ( ) { }",
  "func ID ( ID - [ false / true : ( / false true / ( ID ) / - 123 ) ] int ) { } func ID ( ) { }",
  "func ID ( ID - [ / / true : ( / false true false ( ID ) / - 123 ) ] int ) { } func ID ( ) { }",
  "func ( ( ID : [ ] bool , ID : int , ID : bool ) : [ ID ID ) [ true ] ] [ ] [ ] bool { } func ID ( ) { }",
  "func ( ( ID : [ ] bool , ID : int , ID : bool ) : [ ID ID ) [ true ] ] [ ] [ ] { bool } func ID ( ) { }",
  "func ( ( ID : [ ] bool , ID : int , ID : bool ) : [ ID ID ) [ true ] ] [ ] ID ] { bool } func [ ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] int ) { ID ( ) = - ) true * ( ( - true ) - } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] int ) { ID ( ) = - ) true * ( ( - true ) - } func ID ( ) { }",
  "func ID ( ID : bool ) ID : bool , ID : [ ] int ) { ID ( ) = - ) true * ( ( - true ) - } func ID ( , { }",
  "func ID ( ) : [ - false + ( ID ( false , ( 123 ) ) ) + - ID ] ) ] [ ] int { } func ID ( [ { }",
  "func ID ( ) : [ func false + ( ID ( false , ( 123 ) ) ) + - ID ] ) ] [ ] int { } - ID ( [ { }",
  "func ID ( ) : int { var - : [ ID [ - - ID ( ) [ ID ] [ ID ( - ID ) ] ] ] int var ID : [ ] int }",
  "func - ( ) : int { var - : [ ID [ - - ID ( ) [ ID ] [ ID ( ID ID ) ] ] ] int var ID : [ ] int }",
  "func - ( ) : int { var - : [ ID [ - - ID ( ) [ ID ] [ var ( ID ID ) ] ] ] int ID ID : [ ] int }",
  "} ID ( ) : [ ID ( ) [ ID / true * 123 + ID + - ID ] [ ID ] ] int { func",
  "} ID ( ) : [ ID ( * [ ID / true ) 123 + ID + - ID ] [ ID ] ] int { func",
  "} ID ( ) : ( ID [ * [ ID / true ) 123 + ID + - ID ] [ ID ] ] int { func",
  "func ID ( ID : bool ID ID : [ 123 < - ID ( ( ( ID ) ) ) ] int , , : bool ) { }",
  "ID ID ( ID : bool ID ID : [ 123 < - ID ( ( ( func ) ) ) ] int , , : bool ) { }",
  "ID ID ( ID : bool ID ID } [ 123 < - ID ( ( ( func ) ) ) ] int , , : bool ) { :",
  "func ID ( ID : bool ) { return } func ) ( ID : bool ID : int { var ID : bool return }",
  "func ID ( ID : func ) { return } bool ) ( ID : bool ID : int { var ID : bool return }",
  "func ID ( ID : func ) { return } var ) ( ID : bool ID : int { bool ID : bool return }",
  "func ID ( ) : [ - - ( ( - ID [ 123 ] ) ) ] int { } func } ( ) { ID",
  ") ID ( ) : [ - - ( ( - ID [ 123 ] ) func ] int { } func } ( ) { ID",
  ") ID ( ) : [ - - ( ( - ID [ 123 ] int func ] ) { } func } ( ) { ID",
  "func ID ( ) { { var ID : [ func / ID [ ( true ) ] ] int } } 123 ID ( ) { }",
  "func ID ( ) { { var ID : [ func / ID [ ( true ) ] ] int } } 123 { ( ) ID }",
  "func ID ( ) { { var ID : [ func / ID [ ( true ) ] ] int } } 123 ( { ) ID }",
  "func ID ( ID [ int ) { var ID : : ] int var ID : int return ID ( ( false ) ) }",
  "func ) ( ID [ int ID { var ID : : ] int var ID : int return ID ( ( false ) ) }",
  "func ) ( ID [ int var { var ID : : ] int ID ID : int return ID ( ( false ) ) }",
  "func ID ( ID : [ ] int , ID func bool , ID : [ ] [ ] [ false / ( false ) ] [ ] bool ) { } : ID ( ) { }",
  "func ID ( ID : [ ] int , ID func bool , ID : [ ] [ ] [ false / ( false ) ] [ ] bool } { } : ID ( ) { )",
  "func ID ( ID bool [ ] int , ID func : , ID : [ ] [ ] [ false / ( false ) ] [ ] bool } { } : ID ( ) { )",
  "func ID ( ID : int , ID : int ) ID : bool ) { ID ( ) [ - - - ID ( ) ] = ID while ID { } } func ID ( , { }",
  "func ID ( ID : , , ID : int ) ID : bool ) { ID ( ) [ - - - ID ( ) ] = ID while ID { } } func ID ( int { }",
  "func ID ( ID : , , ID : int ) ID : bool ) { ID ( ) [ - - - ID ( ) ] = ID while ID { } } func ID } int { (",
  "func ID ( ID : int , ID : [ ) : int - ( ID / ID / - ( ( ID ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( ID : int ) ID : [ ) : int - ( ID / ID / - ( ( ID ) ) , ] bool { } func ID ( ) { }",
  "func ID ( ID : int ) ) : [ ) : int - ( ID / ID / - ( ( ID ) ) , ] bool { } func ID ( ID { }",
  "( ID ( ID : bool , ID : [ ( ID func ) [ false * - ID ] [ ( ID ) ] ) ] bool , ID : bool ) { } func ID ( ) { }",
  "( ID ( ID : bool , ID : [ ( ID func ) ) false * - ID ] [ ( ID ) ] ) ] bool , ID : bool ) { } func ID ( [ { }",
  "} ID ( ID : bool , ID : [ ( ID func ) ) false * - ID ] [ ( ID ) ] ) ] bool , ID : bool ) { } func ID ( [ { (",
  "func ID ( ) { var bool : ID return ID [ ( - ( ID ) ) ] [ ID ] } func ID ( ) { }",
  "func ID ID ) { var bool : ID return ID [ ( - ( ID ) ) ] [ ( ] } func ID ( ) { }",
  "func ID ID ) { var bool ID ID return : [ ( - ( ID ) ) ] [ ( ] } func ID ( ) { }",
  "func ID ( ) { var ID : { - - ID ( - - ( 123 ) ) ] bool var ID : [ ] bool } func ID ( ) [ }",
  "func ID ( ) { var ID : { - - ID ( - - ( 123 ) ) ] bool var ID : [ [ bool } func ID ( ) ] }",
  "func ID ( ) { var ID : { - - bool ( - - ( 123 ) ) ] ID var ID : [ [ bool } func ID ( ) ] }",
  "func ID ( ) { var ID : bool var ID : [ ID - - ( ) [ - ID ] ] [ ] bool }",
  "func ID ( ) { var ID : bool var ID : [ ID - - ( } [ - ID ] ] [ ] bool )",
  "func var ( ) { var ID : bool ID ID : [ ID - - ( } [ - ID ] ] [ ] bool )",
  "func ID ( ) : bool { ID = and / 123 123 ( ( - - ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ) : bool { ID = and / 123 123 ( ( - - ( ID ) ) ) } func ID ( ) { }",
  "func ID ( ) } bool { ID = and / 123 123 ( ( - - ( ID ) ) ) : func ID ( ) { }",
  "func ID ( ) : int { var ID ) int call ID ( - - - ID [ true ] ) { } } func ID ( : { }",
  "func ID ( ) : int { var ID ) int call ID ( - - - ID ] true [ ) { } } func ID ( : { }",
  "func ID ( ) : int { var ID ) int call ID ( - - - { ] true [ ) { } } func ID ( : ID }",
  "func ID ( ) : int { call ID ( ( ( ( ) true ) ) ( ) ) } func ID ( ) { }",
  "func ID ( ) : int { call ID ( ( ( ( { true ) ) ( ) ) } func ID ( ) ) }",
  "func ID ( ) : int { call ID ( ( ( ( { true ) func ( ) ) } ) ID ( ) ) }",
  "func ID ( , : [ ] bool ID ID : bool , ID : int ) { var ID : int call ID ( - ID ) call ID ( ) }",
  "func ID ( , : [ ] bool ID ID : bool , ID : int ) { var ID : int } ID ( - ID ) call ID ( ) call",
  "func ID ( , : [ ] bool ID ID : bool , ID : int ) - var ID : int } ID ( { ID ) call ID ( ) call",
  "func ID ( ID : [ ID [ - true * + false ( ID ) - ( 123 ) ] [ - false ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ID [ - true * + false ( ID ) - ( 123 ) [ ] - false ] ] int ) { } func ID ( ) { }",
  "func ID ( ( : [ ] [ ] int , ID : bool ) { print ID ID ) [ ( - ( ID ) ) ] }",
  "func ID ( ( : [ ] ] ] int , ID : bool ) { print ID ID ) [ ( - ( ID ) ) [ }",
  "func ID ( ID : [ ] ] ] int , ID : bool ) { print ( ID ) [ ( - ( ID ) ) [ }",
  "func ID ( ) { var ID : [ ID 123 false < - [ / - ID ] ] [ ] bool var ID : bool }",
  "func ID [ ) { var ID : ( ID 123 false < - [ / - ID ] ] [ ] bool var ID : bool }",
  "/ ID [ ) { var ID : ( ID 123 false < - [ func - ID ] ] [ ] bool var ID : bool }",
  "func ID ( ID * [ true : ( - ID ( ) [ ( - ( - ID ) ) ] ) ] bool ) { }",
  "func ( ( ID * [ true : ( - ID ( ) [ ID - ( - ID ) ) ] ) ] bool ) { }",
  "func ( ( ID * [ true : ( - ID ( ) [ ID - ( - ID ) ) { ) ] bool ) ] }",
  "func ID ( ) { var ID : bool var ID : int print true / ( - - false / false ) / ( ID ) print - ( - ( ) } func ID ID ) { }",
  "func ID ( ) { var ID : bool var ID : int print true / ( - - { / false ) / ( ID ) print - ( - ( ) } func ID ID ) false }",
  "func ID ( ) { var ID : bool var ID : int print true / ( - - { / false ) ( ( ID ) print - / - ( ) } func ID ID ) false }",
  "func - ( ) { var ID : bool ID [ - - - true == ( ( ID 123 ) ) ] = ID print ID }",
  "func - ( ) { var ID : bool ID [ - - - true == ( ( } 123 ) ) ] = ID print ID ID",
  "func - ( var { ) ID : bool ID [ - - - true == ( ( } 123 ) ) ] = ID print ID ID",
  "func ID ( ID : - 123 * ID ( ) [ 123 * true + ID ( ) ] bool ) { }",
  "func ID ( ID : ID 123 * ID ( ) [ 123 * true + - ( ) ] bool ) { }",
  "func ID ( ID : bool 123 * ID ( ) [ 123 * true + - ( ) ] ID ) { }",
  "func ID ( ) { print - false - ( - ( - ID * - ( ( * true ) ) / ( true ) ) ) / - 123 }",
  "func ID ( ) ( print - false - ( - ( - ID * - ( { * true ) ) / ( true ) ) ) / - 123 }",
  "func ID ( ) : int { var ID : [ false : true - - false / - ID * false - - ( false ) ] int var ID >= bool }",
  "func - ( ) : int { var ID : [ false : true - - false / - ID * false ID - ( false ) ] int var ID >= bool }",
  "func - ( ) : int { var ID : [ false : true var - false / - ID * false ID - ( false ) ] int - ID >= bool }",
  "func } ( ) : int { ID ( true / ( true + ID [ - ( - 123 ) ] [ - ID ] ) ) = - true ID",
  "func } ( ) : int { ID = true / ( true + ID [ - ( - 123 ) ] [ - ID ] ) ) ( - true ID",
  "func } ( ) : int { ID = true / ( true + true [ - ( - 123 ) ] [ - ID ] ) ) ( - ID ID",
  "func ID ( ID : int , ID : } , ID : int ) : bool { var ID : [ ] int print ( true ) bool",
  "func ID ( ID : int , ID : } , ID : int ) : bool { var ID : [ ] print int ( true ) bool",
  "func ID ( ID : int , ID : } , ID : int ) : bool { var ID : [ ] print int ( true ) bool",
  "func ID ( ID : bool , ID : int ) : [ ID [ ID * true + true - false ] ] [ ] int } {",
  "func : ( ID : bool , ID ID int ) : [ ID [ ID * true + true - false ] ] [ ] int } {",
  "func : ( ID : bool { ID ID int ) : [ ID [ ID * true + true - false ] ] [ ] int } ,",
  "func ID ( ID : bool , ID : int ) { call ID ( ) call ID ( ) } func ID ( ID : - [ false ] bool ) { }",
  "] ID ( ID : bool , ID : int ) { call ID ( ) call ID ( ) } func ID ( ID : - [ false func bool ) { }",
  "] ID ( ID : bool , ID call int ) { call ID ( ) : ID ( ) } func ID ( ID : - [ false func bool ) { }",
  "func ID ( ID { } func ID ( ID : int , ) : [ ID [ false >= 123 ] [ true ] ] [ ] [ ] int , ID : [ ] [ ] bool ) { }",
  "func ID ( ID { } func { ( ID : int , ) : [ ID [ false >= 123 ] [ true ] ] [ ] [ ] int , ID : [ ] [ ] bool ) ID }",
  "func ID ( ID { } func { ( ID : int , ) : [ ID [ false >= 123 ] [ true ] ] [ ] [ ] int , ID : [ ] [ ] bool ) ID }",
  "func ID ( ) { if - true - false / ID ( ( ( ) ( ID ) - ) ) { } } func ID ( ) { }",
  "func ID ( ) { if - true - false / ID ( ( ( ) ( ID ) - ) ) { } } func ID ( ) { }",
  "func ID ( ) { if - true - false / ID ( } ( ) ( ID ) - ) ) { ( } func ID ( ) { }",
  "func ID ( ID : bool , ID * [ true / - ( ( - true + false ) ) : - - - false ] [ ] int ) { } func ID ( ) { }",
  ") ID ( ID : bool , ID * [ true / - ( ( - true + false ) ) : - - - false ] [ ] int ) { } func ID ( func { }",
  ") ID ( ID : bool , ID * [ true / - ( } - true + false ) ) : - - - false ] [ ] int ) { } func ID ( func { (",
  "func ID ( ) { var ID : [ - ) * - ( - ( ( ( ( ( - - ( ( - false ) ) ) ) ) true ) ) ] bool }",
  "func ID ( ) { var ID : [ - ) * - ( - ( ( ( ( ( - - ( ( - false ) ) bool ) ) true ) ) ] ) }",
  ": ID ( ) { var ID func [ - ) * - ( - ( ( ( ( ( - - ( ( - false ) ) bool ) ) true ) ) ] ) }",
  "func ID ( int : [ - - true * - - ID ( - true * true * ID ) ] [ ] ID ) { }",
  "func ID ( int - [ : - true * - - ID ( - true * true * ID ) ] [ ] ID ) { }",
  "func int ( ID - [ : - true * - - ID ( - true * true * ID ) ] [ ] ID ) { }",
  "func ID [ ) : int { var ID : [ ID ( ID [ ID ] ] [ ( ID ) ] ] [ ] int } func ID ( ) { }",
  "func ID [ ) : int { var [ : ID ID ( ID [ ID ] ] [ ( ID ) ] ] [ ] int } func ID ( ) { }",
  "func ID [ ) : int { var [ : ID ID ( ID [ ID ] ] [ ( ID ) ] ] [ ] int } func ID ( { ) }",
  "func ID ( ) : [ ] [ false / ( ( ID ID ID ] [ false ] ) ) ] [ ] bool { } func [ ( ) { }",
  "func ID ( ) : [ ] [ false / ( ( ID ID ID } [ false ] ) ) ] [ ] bool { ] func [ ( ) { }",
  "func ID ( ) : [ ] [ false / ( ( ID ID ID } [ false ] ) ) ] [ ] bool { ] func [ ( ) { }",
  "func ID ( ID : [ ( - ) * true - true / ( ID ) + - - ( ID ) ) ] int false { }",
  "func ID ( ID : [ ( - ) * true - true / ( ID ) + - - ( ID ) ) ] int false { }",
  "func ID ( ID : [ ( - ) * true - ( / ( ID ) + - - true ID ) ) ] int false { }",
  "func ID ( ID : [ ] int , ID [ [ - ID [ ( - ( ID ) ) ] ] : ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID [ [ ID ID [ ( - ( - ) ) ] ] : ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID [ [ ID ID [ ( - ( - ) ) ] ] : ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : ] if ( ID [ - ( - - 123 ) int [ 123 ] ) { } }",
  "func ID ( ) { var ID : [ ] bool ] ID : ] if ( ID [ - ( - - 123 ) int [ 123 var ) { } }",
  "func ID ( ) { var ID : [ ] bool ] ID : ] if ( ID [ ( - - - 123 ) int [ 123 var ) { } }",
  "func ID ( ID : bool , ID : bool ) var [ ] int { : ID : [ ] bool return }",
  "func ID ( ID : bool , ID : bool ) var [ } int { : ID : [ ] bool return ]",
  "func ID ( ID : bool , ID : : ) var [ } int { bool ID : [ ] bool return ]",
  "func ID ( ID : [ , ID : bool , ID : bool ) { var ID : int ] int var ID : [ 123 - - - ( - - ID ) ] bool }",
  "func ID ( ID : [ , ID ID bool , ID : bool ) { var ID : int ] int var ID : [ 123 - - - ( - - : ) ] bool }",
  "func ID ( ID : [ , ID ID bool , ID : bool ) { var ID : int ] int var ID ( [ 123 - - - : - - : ) ] bool }",
  "func ID ( ID : [ ] bool ) { while false >= ID / - ( - ID ) * ID { } if - ID { } } func ID ) ( { }",
  "func ID ( ID : [ ] bool ) { { false >= ID / - ( - ID ) * ID { } if - ID { } } func ID ) ( while }",
  "func ID ( ID : [ ] bool ) { { false >= ID ID - ( - ID ) * / { } if - ID { } } func ID ) ( while }",
  "func ID ( ID : [ false ] ( - - ID [ - ID + ) + false ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ false ] ( - - ID [ - ID + ) + false ] int ) { } func ID ( ) { }",
  "func ID int ID : [ false ] ( - - ID [ - ID + ) + false ] ( ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID int [ ID ( - - - - ID ) ] : ) { }",
  "func ID ( ID : int , ID : bool , ID int [ ID ( - ) - - ID ) ] : - { }",
  "func ID ( ID : int , ID : bool , ID int [ ID ( - ) - - ID ) ] : - { }",
  "func ID ( ) { var ID : bool return ID { ) [ ( ( ( ID ) ) ) ] } func ID ( ) ( }",
  "func ID ( ) { var ID : bool return ID { ) [ ( ( ( ID } ) ) ] ) func ID ( ) ( }",
  "func ID ( ) { var ID : bool return ID { ) [ ( ( ( ID } ) ID ] ) func ) ( ) ( }",
  "func ID ( ) : bool { var ID : [ - ( true + ID [ ] ID ] [ true ] + 123 ) ] [ - bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ - ( true ] ID [ ] ID ] [ true ] + 123 ) + [ - bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ - ( true ] ID [ ] ID ] [ true ] + 123 ) + [ - bool } func ID } ) { (",
  "func ID true ) { var ID : bool ID ( false / ( * ID [ false ] ) = ( - 123 ) }",
  "func ID true ) { var ID : ) ID ( false / ( * ID [ false ] ) = ( - 123 bool }",
  "func ID true ) { var ID : ) ID ( false / ( * ID ) false ] [ = ( - 123 bool }",
  "func ID ( ) : bool { var ID : int while ( false ) - - true ) { } while - - ( ( ( ID ) ) - { } }",
  "func ID ( ) : bool { } ID : int while ( false ) - - true ) { } while - - ( ( ( ID ) ) - { var }",
  "func ID ( ) : bool { } ID : int while ( false ) - ) true - { } while - - ( ( ( ID ) ) - { var }",
  "func ID ( ) : [ - ( ( ( ( ) ) ) ) ) ] int { } func ID ( 123 { }",
  "func ID ( ) : [ - ( ( ( ( ) ) ) ) ) ] int { } func ID ( 123 { }",
  "func ID ( ) : [ - ( ) ( ( ) ) ) ( ) ] int { } func ID ( 123 { }",
  "func ID ( ) { var ID } int var ID : [ ] bool return } func ID ( ) { var ID : bool var ID : bool if ID { } :",
  "bool ID ( ) { var ID } int var ID : [ ] func return } func ID ( ) { var ID : bool var ID : bool if ID { } :",
  "bool ID ( ) : var ID } int var ID : [ ] func return } func ID ( ) { var ID : bool var ID : bool if ID { } {",
  "func ID ( ID : bool , ID : int , ID : [ ] int ) { if - ( ID ( ( ID ) ) ) { } call ID ( ) } func - ( ) { }",
  "func ID ) ID : bool , ID : int , ID : [ ] int ) { if - ( ID ( ( ID ) ) ) { } call ID ( ( } func - ( ) { }",
  "- ID ) ID : bool , ID : int , ID : [ ] int ) { if func ( ID ( ( ID ) ) ) { } call ID ( ( } func - ( ) { }",
  "func ID ( ) { var ID : [ 123 / ID [ ID [ - true ] ] [ - int ID ] * ID ] - var ID : bool }",
  "func ID ( ) { var ID : [ 123 / ID [ ID [ - true ] ] [ - ] ID int * ID ] - var ID : bool }",
  "func ID ( ) { var ID : bool } ID + true >= - - ID [ ID ] [ - - 123 ] ID = false print",
  "func ID ( ) { var ID : bool } ID + true >= false - ID [ ID ] [ - - 123 ] ID = - print",
  "func ID ( ) { var ID : bool } ID + true >= false [ ID [ ID ] - - - 123 ] ID = - print",
  "func ID ( ID : [ - ( ( - 123 } - ID ( ( ID ) ) * ID ) ) ] bool ) { *",
  "func ID ( ID ] [ - ( ( - 123 } - ID ( ( ID ) ) * ID ) ) : bool ) { *",
  "func ID ( ID ] [ : ( ( - 123 } - ID ( ( ID ) ) * ID ) ) - bool ) { *",
  "func ID ( ) : [ ( ID ( ID [ ( ( ID { ) ] ) ) ] int ) }",
  "func ID ( ) : [ ( ID ( } [ ( ( ID { ) ] ) ) ] int ) ID",
  "func ID ( ID : [ - true / - ) ( ID [ ( ID ) ] [ ID ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ - true / - ) ( ID [ ( ID ) ] [ { ] ] int ) { } func ID ( ) ID }",
  "func ID ( ID : [ - true / func ) ( ID [ ( ID ) ] [ { ] ] int ) { } - ID ( ) ID }",
  "func ID ( ID : bool ( ID : int , ID : bool ) : int { var ID : bool if ( - 123 ) { } print , 123 ) }",
  "func ID ( ID : bool ( 123 : int , ID : bool ) : int { var ID : bool if ( - 123 ) { } print , ID ) }",
  "func ID ( ID : bool ( ( : int , ID : bool ) : int { var ID : bool if 123 - 123 ) { } print , ID ) }",
  "func ( ( ID : [ ( true * true * - ID ( ( - ID ) ) ) ] bool ) { } func ID ID ) { }",
  "func ( ( - : [ ( true * true * ID ID ( ( - ID ) ) ) ] bool ) { } func ID ID ) { }",
  "func ( ( - : [ ( true * true * ID ID ( ( - ID ) ) { ] bool ) ) } func ID ID ) { }",
  "func ID ( ID : ) , ID : [ ] bool int { ID ( ) = false / 123 / - 123 }",
  "func ] ( ID : ) , ID : [ ID bool int { ID ( ) = false / 123 / - 123 }",
  "func ] ( ID : ) , ID : [ 123 bool int { ID ( ) = false / ID / - 123 }",
  "func ID ( ] : int , ID : [ ] bool , ID : int ) { call ID ( ) ID ( ) [ ID ID [ true ] = ID } func ID ( ) { }",
  "func int ( ] : int , ID : [ ] bool , ID : ID ) { call ID ( ) ID ( ) [ ID ID [ true ] = ID } func ID ( ) { }",
  "func int ( ] : int , ID : [ ] bool , ID : ID ) { call ID ( ) ID ( ) [ ID ID [ ) ] = ID } func ID ( true { }",
  "func ID } ) { var ID : bool while ( 123 - true - - true ) { } while ( ID ) { } } func ID ( ) { (",
  "func ID } ) { var ID : bool while ( 123 - true - - true ) { } while } ID ) { ( } func ID ( ) { (",
  ") ID } ) { var ID : bool while ( 123 - true - - true ) { } while } ID func { ( } func ID ( ) { (",
  "func ID ( ID : bool , ID : int ) : int { var ID : [ ID ( ) [ ID ID ) ] [ ID ] ] bool var ( : int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { var ( : [ ID ( ) [ ID ID ) ] [ ID ] ] bool var ( : int } func ID ID ) { }",
  "func ID ( 123 { call ID ( ( ( ID * ( ) ) ) ) ) }",
  "func ID ( 123 { call ID ( ( ( ID ) ( ) * ) ) ) }",
  "func ID ( 123 { call ID ( ( ( ID ) ( ) * ) ) ) }",
  "{ ID ( ) func var ID : int return } func ID ( ) : bool { var ID : int var ID : bool return }",
  "{ ID ( ) func var ID : int return } func return ( ) : bool { var ID : int var ID : bool ID }",
  "{ ID ( ) func var ID : bool return } func return ( ) : bool { var ID : int var ID : int ID }",
  "func ID ( ) : bool { var ID : [ { false ) * ( ( - false ) ) / - ID ] bool var ID : int } func ID ( ) ( }",
  "func * ( ) : bool { var ID : [ { false ) ID ( ( - false ) ) / - ID ] bool var ID : int } func ID ( ) ( }",
  "func * ( ) : bool { var ID : [ { false ) ID ( ( - false ) ) ID - ID ] bool var ID : int } func / ( ) ( }",
  "func ID ( ) { var ID ( bool call ID : ) return - false * ID - ID ( ) - false } func ID ( ) { }",
  "func ID ( - { var ID ( bool call ID : ) return - false * ID ) ID ( ) - false } func ID ( ) { }",
  "func ID ( - { var ID ( bool call ID : ) return - false ) ID ) ID ( * - false } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID ( [ ( false / true * true - - : ( ( - ( 123 ) ) ) ) ) ] [ ] [ ] bool }",
  "func ID ( ) { var ID : var bool ID ( [ ( false / true * true - - : ( ( - ( 123 ) ) ) ) ) ] [ ] [ ] bool }",
  "func ID ( ) { var ID : var bool ID ( [ ( false / true * [ - - : ( ( - ( 123 ) ) ) ) ) ] true ] [ ] bool }",
  "func ( ( ) { var ID : [ ] [ ] int var ID : bool if ( - ID ( ( 123 ) ) ) ) { } } func ID ( ) { }",
  "func ( ( ) { var ID : [ ] [ ] } var ID : bool if ( - ID ( ( 123 ) ) ) ) { } } func ID ( ) { int",
  "func ( ( ) { var ID : [ ] [ ] } var ID : bool if ( - ID ( ( 123 ) ) ) ) { } } func ID ( ) { int",
  "func ID ( ) { var ID : ID var bool : bool ID ( ID ( ( ( ID ) ) ) ) = ( - true ) }",
  "func ID ( ) { var ID ( ID var bool : bool ID : ID ( ( ( ID ) ) ) ) = ( - true ) }",
  "func ID ( ) { var ID ( ID var bool : } ID : ID ( ( ( ID ) ) ) ) = ( - true ) bool",
  "func ID ( ID : bool ) : int { while ID ( - - - 123 / ) ( ( ( ( ID ) ) ) ) / ( 123 ) - { } } func ID ( ) { }",
  "func ID func ID : bool ) : int { while ID ( - - - 123 / ) ( ( ( ( ID ) ) ) ) / ( 123 ) - { } } ( ID ( ) { }",
  "func ID func ID : bool ) : int { while ID ( - - - 123 / ) ( ( ( ( } ) ) ) ) / ( 123 ) - { ID } ( ID ( ) { }",
  "func ID ( ID : bool , var : bool ) : [ ] int { var ID : bool } func ID ( ) { ID ID : bool var ID : bool }",
  "func ID ( ID : bool , var : bool ) ( [ ] int { var ID : bool } func ID : ) { ID ID : bool var ID : bool }",
  "func ID ( ) : bool { var ID : bool while - - func [ ( false ) ] [ ID ] { } } ID ID ( ) { }",
  "func ID ( ) : bool { var ID : bool while - - func [ ( false ) ] [ ID ] { } } ID ID ( ) { }",
  "func ID ( ) : bool { var ID : bool while - - func [ ( false ) ] [ ID ] { } } } ID ( ) { ID",
  "func ID ( ) : int { var ID : } while 123 * ( false + false / ID * - - ID + ( - ID ) ) { bool { } }",
  "func ID ( ) : int { var ID : } while 123 * ( bool + false / ID * - - ID + ( - ID ) ) { false { } }",
  "func ID ( ) : int { var ID : } while 123 * false bool + false / ID * - - ID + ( - ID ) ) { ( { } }",
  "func ID ( ) : bool { var [ : int ID ID true / - - - ( ID ) ] [ ( ( 123 ) ) ] = ID { } } func ID ( ) { }",
  "func ID ( ) ) bool { var [ : int ID ID true / - - - ( ID ) ] [ ( ( 123 ) : ] = ID { } } func ID ( ) { }",
  "func ID ( ) ) bool { true [ : int ID ID var / - - - ( ID ) ] [ ( ( 123 ) : ] = ID { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] int if - ( ( 123 ) } { ) ID = ID }",
  "func ID ( ) : bool ( var ID : bool var ID : [ ] int if - { ( 123 ) } { ) ID = ID }",
  "func ID ( ) : bool ( var ID : bool var ID : [ ] int if - { = 123 ) } { ) ID ( ID }",
  "func ID ( ID : int ) { var ID : } ] int var ID : [ ] int while false * ( ( 123 ) ) * true { } call ID ( ) } func ID ( ) { [",
  "func ID ( ID : int ) { var ID : } ] int var ID : [ ] int ( false * ( while 123 ) ) * true { } call ID ( ) } func ID ( ) { [",
  "func ID ( ) : int { var ID true int } func ID ( ) { print : / ( - ( ( ID ) ) ) }",
  "var ID ( ) : int { func ID true int } func ID ( ) { print : / ( - ( ( ID ) ) ) }",
  "var ID ( ) : int { func ID true int } func ID ( ) { print : / ( - ( ( ID ) ) ) }",
  "func - ( ID : [ false - ID ID * - ( false / ID / ( - 123 ) ) * ID ] bool ) { } func ID ( ) { }",
  "func - ( ID : [ false - ID / * - ( false ID ID / ( - 123 ) ) * ID ] bool ) { } func ID ( ) { }",
  "func - ( ID : false false - ID / * - ( [ ID ID / ( - 123 ) ) * ID ] bool ) { } func ID ( ) { }",
  "func ID { ID : bool , ID : [ ] [ ] int , ID : bool ) { ( var ID : bool return } }",
  "func ID ( ) : [ - - ( ( ( true * - bool ) ) ) ] true { }",
  "func * ( ) : [ - - ( ( ( true ID - bool ) ) ) ] true { }",
  "func * ( ) : [ - - ( ( ( - ID true bool ) ) ) ] true { }",
  "func ID ( ) : } { var ID : bool { var ID : int var ID : int if ( - ID ) { } int } func ID ( ) { }",
  "func ID ( ) : } { var ID : bool { var ID var int : ID : int if ( - ID ) { } int } func ID ( ) { }",
  "func ID ( ) if } { var ID : bool { var ID var int : ID : int : ( - ID ) { } int } func ID ( ) { }",
  "func ID ( ID : int ) ) int { var ID : bool var ID : [ ] [ - - ( ID : ] int }",
  "func ID ( ID : int ) ) int { int ID : bool var ID : [ ] [ - - ( ID : ] var }",
  "func ID ( ID : int ) int ) { int ID : bool var ID : [ ] [ - - ( ID : ] var }",
  "func ID ( ID : [ - false / ( true * - - - ( ID ) * ID bool ] [ ] ) ) { }",
  "func ID ( ID : [ - false / ] true * - - - ( ID ) * ID bool ( [ ] ) ) { }",
  "func ID ( ID : [ - ID / ] true * - - - ( ID ) * false bool ( [ ] ) ) { }",
  "func ID ( [ : ) ] [ ] [ - true * ( ( ( - ( - - ID ) ) ) / true ) ] [ ] [ ] bool { }",
  "func ] ( [ : ) ] [ ID [ - true * ( ( ( - ( - - ID ) ) ) / true ) ] [ ] [ ] bool { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : [ ] bool { var ID : [ ( ( ID ) ) ] int var ID : [ ] } ] int [",
  "func ID ( ID : bool , ID : bool , ID : int ) : [ ] bool { var ID : [ ( ( ID ) ) ] int var ID : [ ] } ] int [",
  "func ID ( ) { while ID [ ID [ ID ( ) * - 123 ] [ if ( 123 ) ) ] ] { } ( ID { } }",
  "func ID ( ) { while ID [ ) [ ID ( ) * - 123 ] [ if ( 123 ) ID ] ] { } ( ID { } }",
  "func ID ( ) { if ID ( - 123 / ID ( ) [ ( ID ) ] ) { ( call ID ( ) } func ID } ) { }",
  "func ID ( ) { if ID ( - 123 ( ID ( ) [ ( ID ) ] ) { / call ID ( ) } func ID } ) { }",
  "func ID ( ) { if ID ( - 123 ( ( ( ) [ ( ID ) ] ) { / call ID ID ) } func ID } ) { }",
  "func ID 123 ID : bool ) : [ ( and ID [ ID [ - 123 ] ] ] bool { }",
  "func ID 123 ID : bool ) ] [ ( and ID [ ID [ - 123 ] ] : bool { }",
  "func ID 123 ID : bool ) ] [ ( and ID [ ID [ - 123 ] ] : bool { }",
  "func } ( ID : int , ID : bool ) : int { return - ( ID [ ( ID ) ] ) ID",
  "func } ( ( : int , ID : bool ) : int { return - ID ID [ ( ID ) ] ) ID",
  "func } ( return : int , ID : bool ) : int { ( - ID ID [ ( ID ) ] ) ID",
  "func ID ( ID : int , ID 123 [ : * ID < ( false and - ID ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID 123 [ : * ID < ID false and - ID ) ] bool ) { } func ( ( ) { }",
  "] ID ( ID : int , ID 123 [ : * ID < ID false and - ID ) func bool ) { } func ( ( ) { }",
  "func ID ( ) : int { ( ID : [ ] int } func ID var ) : [ ID [ ( ( ( ( 123 ) ) ) ) ] [ ( - ( true ) ) ] ] bool { }",
  "func ID ( ) : int { ( ID : [ ] } } func ID var ) : [ ID [ ( ( ( ( 123 ) ) ) ) ] [ ( - ( true ) ) ] ] bool { int",
  "func ID ( ) : ) { ( ID : [ ] } } func ID var int : [ ID [ ( ( ( ( 123 ) ) ) ) ] [ ( - ( true ) ) ] ] bool { int",
  "func ID ( ) : [ - ID [ ID [ false < - ( func ) ] ] [ ( ( 123 ) ) ] ] bool { } ID ID ( ) { }",
  "func ID ( ) : [ - } [ ID [ false < - ( func ) ] ] [ ( ( 123 ) ) ] ] bool { } ID ID ( ) { ID",
  "func ID ( ) : [ - } [ 123 [ false < - ( func ) ] ] [ ( ( ID ) ) ] ] bool { } ID ID ( ) { ID",
  ") ID ( ID : [ ] [ ID / ID ( ID ( false ) func ] bool ) { }",
  ") ID ( ID : [ ] [ ID / ID ( ID ( false ) func ] bool ) { }",
  ") ID ( ID : [ ] [ ID / ID ( ID { false ) func ] bool ) ( }",
  "func ID ( ID : int , ID : int ) : int { var ID : bool var ID : bool { var ID : [ ] } ID ] bool } [",
  "func ID ( ID : int , ID : int ) : int { var ID : bool var ID ID bool { var ID : [ ] } : ] bool } [",
  "func ID ( ID : int , { : int ) : int ID var ID : bool var ID ID bool { var ID : [ ] } : ] bool } [",
  "func ID ( ) : int { var ( : [ ID ( ID ( false ) ) ) ] int }",
  "func ID ( ) : ) { var ( : [ ID ( ID ( false int ) ) ] int }",
  "func ID ( ) : ) { var ( : [ ID ( ID ( int false ) ) ] int }",
  "func ) ( ) : [ ID ( ID [ ( 123 * 123 ) ] ID ] int { }",
  "func ) ( ) : [ ID ( ID [ ( 123 * 123 ) ] ID ] int { }",
  "func ) ( ) : [ ID ( ID [ ( 123 } 123 ) ] ID ] int { *",
  "func ID ( ) { var ID : int call ID ( - - ID ( ) [ - ( func ) ] ) call ID ( ) } ID ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( - - ID ( ) [ - ( func ) ] ) call ID ( ) } ID ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( - - ID ( ) ID - ( func ) ] ) call ID ( ) } [ ID ( ) { }",
  "] ID ( ID : [ ] int ) : [ func [ ] bool { var ID : int var ID : [ ] int return - ( ( - false ) ) }",
  "] ID ( ID : [ ] int ) : [ func [ ] bool { : ID var int var ID : [ ] int return - ( ( - false ) ) }",
  "] ID ( ID : [ ] int ) : [ func [ ] bool { : ] var int var ID : [ ID int return - ( ( - false ) ) }",
  "func ID ( ID : bool , ID : bool , ID : int ) { if - ID ) ) * - ( 123 ( * false { } while ( - ID ) { } } func ID ( ) { }",
  "( ID func ID : bool , ID : bool , ID : int ) { if - ID ) ) * - ( 123 ( * false { } while ( - ID ) { } } func ID ( ) { }",
  "( ID func ID : bool , ID : bool , ID : int ) { if - ID - ) * - ( 123 ( * false { } while ( ) ID ) { } } func ID ( ) { }",
  "func ID ( ) { ID func ID ( ) { call } ( ) print ( ( 123 ) ) }",
  "func ID ( ) { ID ) ID ( ) { call } ( func print ( ( 123 ) ) }",
  "func ID ( ) { ID ) ID ( ) { call } ( func print ( ( 123 ) ) }",
  "func ID ( ) : [ - ID / - - ID ( ID / true * ID ) } ID ] int { / func ID ( ) { }",
  "func ID ( ) : [ - ID / - - ID ( ID / true * ID ) ] ID } int { / func ID ( ) { }",
  "func ID ( ID : [ ( - - ( 123 * true / ( ( - - ( - ID ) ) ) ) ) ) [ ] [ ] int ] { }",
  "func ID ( - : [ ( - - ( 123 * true / ( ( - - ( ID ID ) ) ) ) ) ) [ ] [ ] int ] { }",
  "/ ID ( - : [ ( - - ( 123 * true func ( ( - - ( ID ID ) ) ) ) ) ) [ ] [ ] int ] { }",
  "func ID ( ID : { ] [ ] [ ] [ false + true / 123 ] int , ID : bool , ID : bool ) [ } func ID ( ) { }",
  "func ID ( ID : { ] [ ] bool ] [ false + true / 123 ] int , ID : bool , ID : [ ) [ } func ID ( ) { }",
  "func ID ( bool : { ] [ ] ID ] [ false + true / 123 ] int , ID : bool , ID : [ ) [ } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) : [ - ID [ - ID / ID / ID ] [ ] ID ) ] ] [ ] [ ] [ ( int { } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) : [ - ID [ - ID / ID / ID ] [ ] ID ) ] { [ ] [ ] [ ( int { } func ID ( ) ] }",
  "func ID ( ID : [ ] bool ) : [ - ID ] - ID / ID / ID ] [ ] ID ) ] { [ ] [ ] [ ( int { } func ID ( ) [ }",
  "func ID ( ) : bool { ID ( ) [ ID [ ID * ID ] ] [ ( ( ) ] = - false if ( ID ) { } } func ID true ) { }",
  "func ID ( ) : bool { ID ( ) [ ID [ ID ] ID ] ] [ ( ( ) * = - false if ( ID ) { } } func ID true ) { }",
  "func ID ( ) : bool { ID ( ) ] ID [ ID ] ID ] [ [ ( ( ) * = - false if ( ID ) { } } func ID true ) { }",
  "func ( ( ID : [ - ID ( ( ID ID [ ( - ID ) ] [ ID ] ) ) ) ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ( ( ID : [ - ID ( ( ID ID [ ( - ID ) ] [ ID ] ] ) ) ) [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "] ( ( ID : [ - ID ( ( ID ID [ ( - ID ) ] [ ID ] ] ) ) ) [ ] [ func [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { call ID ( ) - true - false * ID ( ID ) * ( - - true ) if ID { } }",
  "func ID ( ) { call ID ( ) - true - false * ID ( ID ) * ( - - true ) if { ID } }",
  "func ID ( : ID [ ] int ) { return }",
  "return ID ( : ID [ ] int ) { func }",
  "return ID ( : int [ ] ID ) { func }",
  "func ID ( - : bool { var ID : bool return ) ( 123 * - ( ID ) ) } func ID ( ) { }",
  "- ID ( - : bool { var ID : bool return ) ( 123 * func ( ID ) ) } func ID ( ) { }",
  "- ID ( - : bool { var ID : bool return ) ( 123 * func ( ID ) ) { func ID ( ) } }",
  "func ID ( ID : bool ) : [ ( - false / ID [ 123 ] [ 123 ] ) ] bool } } func ID ( ) { {",
  "func ID ( ID : bool ) : [ ( - false / ID [ 123 ] [ 123 ] ) ] bool } } func ID ( ) { {",
  "func ID ( ID : bool ) : [ ( - false / ID [ bool ] [ 123 ] ) ] 123 } } func ID ( ) { {",
  "func ID ( ID : ID , bool : int ) : int { { var ID : bool var ID : [ ] bool { var ID : int } } }",
  "func ID ( } : ID , bool : int ) : int { { var ID : bool var ID : [ ] bool { var ID : int } } ID",
  "func ID bool ID : int , ID : [ ( ID * ID [ ID ] [ - - 123 ] ) ] ( , ID : [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ) ID : int , ID : [ ( ID * ID [ ID ] [ - - 123 ] ) ] ( , ID : [ ] [ ] int bool { } func ID ( ) { }",
  "func ID ) ID : int , ID : [ ( ID * [ ID ID ] [ - - 123 ] ) ] ( , ID : [ ] [ ] int bool { } func ID ( ) { }",
  "func ID ( ) { bool ID : bool } func ID ( ID : bool ) : bool { var ID : [ ( - ( ( ID ) ) ) ] [ ] [ ] int var ID : var }",
  "func ID ( ) { bool ID : bool } func ID ( ID : bool ) : bool { ( ID : [ ( - var ( ID ) ) ) ] [ ] [ ] int var ID : var }",
  "func ID ( ) { bool ID : bool } func ID ( ID : bool ) : bool { ( ID : [ ( - var ( ID ) ) ) var [ ] [ ] int ] ID : var }",
  "func ID ( ) : bool { var ID : [ ] int print - false and ( ) ID ) and ( ( ( true ) ) ) call ID ( - } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] int print - false and ( ) ID ) and ( ( ( true ) ) ) call ID ( - } func ID ( ) { }",
  "func ID ( ) : ] { var ID : [ bool int print - false and ( ) ID ) and ( ( ( true ) ) ) call ID ( - } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ true - ID ( ID ( - ID ) ) ] [ ] func ) { } bool ID ( ) { }",
  "func ID ( ID : bool , ID : [ true - ID ( ID ( - ID ) ) ] [ ] func { { } bool ID ( ) ) }",
  "func ID ( ID : bool , ID : [ ) - ID ( ID ( - ID true ) ] [ ] func { { } bool ID ( ) ) }",
  "func ID ID ID : [ ] int ) { var ID : int var ( : bool call ID ( - - - - ( ( ( - true ) ) ) ) call ID ( ) } func ID ( ) { }",
  "func ID ID ID : [ ] int ) { ID ID : int var ( : bool call ID ( - - - - ( ( ( - true ) ) ) ) call var ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] bool ) : 123 { var ID : int var ID : bool if bool { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] bool ) : 123 { var ID : { var ID : bool if bool int } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] bool ) : 123 { var ID : { var ID : bool if bool int } } func ID ( ) { }",
  "func : ( ID : int , ID : bool , ID : [ ] int ) : bool { var ID ID int } func ID ( ) { var ID : [ ] int }",
  "func : ( ID : int , ID : bool , ID : [ ] int ) : bool { var ID ID int } func ID ( ) { var ID : [ ] int }",
  "func : ( ID : int , ID : bool , ID : [ func int ) : bool { var ID ID int } ] ID ( ) { var ID : [ ] int }",
  "func ID ( ID : bool ) { print ( ( - - - ID [ false ] [ - 123 ) ] ) } func ID ( ) { }",
  "func ID ( ID : bool ) { print ( ( - - - ID [ false ] [ - 123 ) ] ) } func ID ( ) { }",
  "func ID ( ID : bool ) { print ( ( - - - ID [ false ] 123 - [ ) ] ) } func ID ( ) { }",
  "func ID ( ID : [ ] ID ] int , ID : [ true * - - 123 * ( ( ( [ ) ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID func ID : [ ] ID ] int , ID : [ true * - - 123 * ( ( ( [ ) ) ) ] [ ] int ) { } ( ID ( ) { }",
  "func ID func ID : [ , ID ] int ] ID : [ true * - - 123 * ( ( ( [ ) ) ) ] [ ] int ) { } ( ID ( ) { }",
  "func ID ( ID : bool func ID : int , ID : [ - true + ( - - ( ID ) ) ] [ ] int ) { } , ID ( ) { }",
  "func ID ( ID : bool func ID : int , ID : [ - true + ( - - ( ID ) ) ] { ] int ) { } , ID ( ) [ }",
  "func ID ( ID : bool func ID : int , ID : ( - true + ( - - ( ID ) ) ] { ] int ) { } , ID [ ) [ }",
  "func ID ( ) { var ID : [ - 123 bool ] ID [ true / ( false ) * - false ] = true } func ID ( ) { }",
  "func ID - ) { var ID : [ - 123 bool ] ID [ true / ( false ) * ( false ] = true } func ID ( ) { }",
  "func ID - ) { var ID : [ - 123 bool ] ID { true / ( false ) * ( false ] = true } func ID ( ) [ }",
  "func ID ( ID { call ) ( ) return ( ( ( 123 ) ) ) } func ID ( ) { }",
  "func ID ( ID { call ) ( ) return ( ( ( 123 func ) ) } ) ID ( ) { }",
  ") ID ( ID { call func ( ) return ( ( ( 123 func ) ) } ) ID ( ) { }",
  "func ] ( ID : [ ID [ ( ( ( - ( ID ) ) ) ) ] ID bool ) { } func ID ( ) { }",
  "func ] ( ID : [ ID [ ( ( ( - ( ID ) ) ID ) ] ) bool ) { } func ID ( ) { }",
  "func ] ) ID : [ ID [ ( ( ( - ( ID ) ) ID ) ] ) bool ( { } func ID ( ) { }",
  "func ID ( ) { while false / ( ( ID [ ID ] ) ) { } ID = - ( ( 123 ) ) } func ID ( ) } {",
  "func ID ( ) { while false / ( ( ID ID ID ] ) ) { } ID = - ( ( 123 ) ) } func [ ( ) } {",
  ") ID ( ) { while false / ( ( ID ID ID ] ) func { } ID = - ( ( 123 ) ) } func [ ( ) } {",
  "func ID ( ) : bool { var ID : ID ] bool var ID : bool if false / - ID [ true ] [ [ ] / ( ID ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : ID ] if var ID : bool bool false / - ID [ true ] [ [ ] / ( ID ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : ID ] if var ID : bool bool false / - ID [ true ] [ [ ] { ( ID ) { } } func ID ( ) / }",
  "func ID ( ID : [ ] ) , ID : int ) { call ID ( ) while ( ID ( bool ) { } }",
  "func ID ( ID : [ ] ) , ID : int ) { call ID ( bool while ( ID ( ) ) { } }",
  "func ID ( ID : [ ] ) , ID : bool ) { call ID ( int while ( ID ( ) ) { } }",
  "func ID ( ) : int { var ID : [ ] bool var ID : [ true / ( ( ( ) ) ) ) / ( ID ) ] bool } func ID ( ID { }",
  "func ID ( ) : int { var ID : [ ] bool var ID : [ true / ( ( ( ) ) bool ) / ( ID ) ] ) } func ID ( ID { }",
  "func ID ( ) : int { var ID : [ ] bool var ID : [ true / ( ( ( ) ) bool ) / ( ID ] ) ) } func ID ( ID { }",
  "func ID ) ID : [ ] [ ] [ ] bool ) : int { var ID : bool var ID : int return } func ID ( ID : int ( { }",
  "func ID ) ID : [ ] [ ] [ ] bool ) : int { var ID : bool var ID : return int } func ID ( ID : int ( { }",
  "func ID ) ID : [ ] [ ] [ ] : ) : int { var ID bool bool var ID : return int } func ID ( ID : int ( { }",
  "func ID ( ) : [ ( - ( ( ID ID ( ) ) ) ) ] int { }",
  "func ) ( ) : [ ( - ( ( ID ID ( ) ) ID ) ] int { }",
  "func ID ( ) { } func ID } ID : int ) { var ID : [ 123 * ( ( ID ) ) * 123 ] bool (",
  "func ID ( * { } func ID } ID : int ) { var ID : [ 123 * ( ( ID ) ) ) 123 ] bool (",
  "func ID ( * { } func ID } var : int ) { ID ID : [ 123 * ( ( ID ) ) ) 123 ] bool (",
  "func ID ( ID : int ) var [ ] bool { : ID : bool { var ID : int var ID : [ 123 ] int } } func ID ( ) { }",
  "func ID ( ID : int ) var [ ] func { : ID : bool { var ID : int var ID : [ 123 ] int } } bool ID ( ) { }",
  "func ID ( ID : int ) var [ ] func { : ID : bool { ( ID : int var ID : [ 123 ] int } } bool ID var ) { }",
  "( ID ( ID : [ ID / false != - ( ( - ( - ( ( func false ) ) ) ) ) ) ] [ ] int ) { } func ID ( ) { }",
  "( ID ( ID : [ ID / false != - ( ( - ( - ( ( func false ) ) func ) ) ) ] [ ] int ) { } ) ID ( ) { }",
  "( ) ( ID : [ ID / false != - ( ( - ( - ( ( func false ID ) func ) ) ) ] [ ] int ) { } ) ID ( ) { }",
  "func ID ( ID : [ - - - ( ID [ ( true * ( - - true ) ) ) ] [ ID ] ] [ ] bool ) { }",
  "func ID ( ID : [ - - - ( ID [ ( true * ( - - true ) ) ) ] [ { ] ] [ ] bool ) ID }",
  "func ID ( ID : [ - - - ( ID [ ( true * true - - ( ) ) ) ] [ { ] ] [ ] bool ) ID }",
  "func ID ( ) : bool { print ID * ID true - ID ( - ) }",
  "ID func ( ) : bool { print ID * ID true - ID ( - ) }",
  "ID func ( ) ( bool { print ID * ID true - ID : - ) }",
  "func ID ( ID : { , ID : bool ) : bool int var ID : int var ID : bool }",
  "int ID ( ID : { , ID : bool ) : bool func var ID : int var ID : bool }",
  "int ID ( ID : { , ID : bool ) : bool func var ID : int var ID : bool }",
  "func ID ( ID true [ ] int ) : bool { var ID : int print - : / ( - ID ) * - - 123 if false { } } func ID ( ) { }",
  "func ID ( ID true [ ] int ) : bool { var ID : int print - : / ( - ID ) * - - 123 if false { } } { ID ( ) func }",
  "func ID ( ID true [ ] int ) ) bool { var ID : int print - : / ( - ID ) * - - 123 if false { } } { ID ( : func }",
  "func ID ( ) : int { var ID : int var ID ( [ ] int ID : ( true ) ) = ID { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID ( [ ] int ID : ( true ) ) = ID { } } func ID ( ) { }",
  "func ID : ) : int { var ID : int var ID ( [ ] int ID ( ( true ) ) = ID { } } func ID ( ) { }",
  "func ID ( ( { var ID : [ false / ) ( ( ID ) ) ) ] bool } func ID ( ) { }",
  "func ID ( ( { var ID : [ false / ) ( ( ID ) ) ) ] bool } func ID ( ) { }",
  "func ( ID ( { var ID : [ false / ) ( ( ID ) ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int , ID : bool ) : ] ] [ ID [ ID [ [ false ] ] bool { }",
  "[ ID ( ID : bool , ID : func ] int , ID : bool ) : ] ] [ ID [ ID [ [ false ] ] bool { }",
  "[ ID ( ID : bool , ID ID func ] int , ID : bool ) : ] ] [ : [ ID [ [ false ] ] bool { }",
  "func ID ( { : [ ( true / - false - ( ID ( ) ) ) ] bool ) }",
  "func - ( { : [ ( true / ID false - ( ID ( ) ) ) ] bool ) }",
  "func - ( { : [ ( true / ID ID - ( false ( ) ) ) ] bool ) }",
  "func ID ( : : int { var ID : int var ID : int return } func ID ( ID : int , ID : int , ID : bool ) ) [ ] int { }",
  "func ID int : : ( { var ID : int var ID : int return } func ID ( ID : int , ID : int , ID : bool ) ) [ ] int { }",
  "func int int : : ( { var ID : int var ID : int return } func ID ( ID : int , ID : ID , ID : bool ) ) [ ] int { }",
  "func ID ( ) { var ID ( [ ( ( ( ( : false ) ) ) ) ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID ( ) ( ( ( ( : false ) ) ) [ ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID ( ) ( ( ( ( ) false ) ) ) [ ) ] bool } func ID ( : { }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ ( ] ( - ID ) ) - [ ] bool }",
  "func ID ] ID : bool , ID : bool ) { var ID : [ ( ] ( - ID ) ) - [ ( bool }",
  "func ID ] ID : bool , ID : bool ) { - ID : [ ( ] ( var ID ) ) - [ ( bool }",
  "func ID ( ) { var int : [ ] ID return ID ( ) [ ( ID ) ] } func ID ( ) { }",
  "func ID ( ) { var int : [ ] ID return ID ( ) [ ( ID ) ( } func ID ] ) { }",
  "func ID ( ) { var int : [ ] ID return ID ( ) [ ( ID ) ( } { ID ] ) func }",
  "func ID ( ID : bool , ID : [ ID ( ) [ true + - ( ( - - ID ) ) ] ] [ ) bool ) { } func ID ( ] { }",
  "func ID ( ID : bool , ID : [ ID [ ) [ true + - ( ( - - ID ) ) ] ] ( ) bool ) { } func ID ( ] { }",
  "func ID ( ID : bool , ID : int ) { if ( ID [ - - ( ) false ( ) ] ) { } if true { } }",
  "func ID ( } : bool , ID : int ) { if ( ID [ - - ( ) false ( ) ] ) { } if true { ID }",
  ") ID ( } : bool , ID : int ) { if ( ID [ - - ( ) false ( ) ] func { } if true { ID }",
  "false ID ( ID : [ true - - - ID ( ) ] [ ] [ func ] int ) { } func ID ( ) { }",
  "false ID ( ] : [ true - - - ID ( ) ID [ ] [ func ] int ) { } func ID ( ) { }",
  "false ID ( ] : [ true - - - ID ( ) ID [ ] [ func ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) : [ ] bool { var ID : [ ] int ID ID : int { var ID : int var var : bool } } func ID ( ) { }",
  "func ID ( ID : bool , ID : ) ] int [ : [ ] bool { var ID : [ ] int ID ID : int { var ID : int var var : bool } } func ID ( ) { }",
  "func ID ( ID : bool , ID : ) ] int [ : [ ] bool { } ID : [ ] int ID ID : int { var ID : int var var : bool } } func ID ( ) { var",
  "func ID ( ) : bool { call ) ( ) return ( ( ID ( ID ID ) ) }",
  "func } ( ) : bool { call ) ( ) return ( ( ID ( ID ID ) ) ID",
  "func ID ( ID : int ) : ID { ID [ bool [ ( false ) ] ] = ( - true ) }",
  "} ID ( ID : int ) : ID { ID [ bool [ ( false ) ] ] = ( - true ) func",
  "} ID ( ID : int ) : ID { ID [ bool [ ( false ) ] ] ) ( - true = func",
  "func ID ( ID : bool ) { var ID ) int if ID ( ( - ID : ) { } if ( - - true ) { } } func ID ( ) { }",
  ": ID ( ID func bool ) { var ID ) int if ID ( ( - ID : ) { } if ( - - true ) { } } func ID ( ) { }",
  ": ID ( ID func bool ) { var ID ) int if ID ( ( - ID : ) { } if ( - - true ) { } } func ID ( ) { }",
  "{ ID ( ID : int ) : int func var ID : [ ] bool var ID : bool print ID - ( 123 ) + ID }",
  "] ID ( ID : int ) : int func var ID : [ { bool var ID : bool print ID - ( 123 ) + ID }",
  "] ID ( ID : int ) ID int func var : : [ { bool var ID : bool print ID - ( 123 ) + ID }",
  "func ID ( ) : - { print false / ID ( ) int true * ( - ID ) * ID }",
  "func ID ( ) : - { print false / ID ( ) int true * ID - ( ) * ID }",
  "func ID ( ) : - { print false / ID ( ) int true * ID ID ( ) * - }",
  "func ID ( ) { var ID : [ ( ID / ( true + ID ) * ID ) ] bool var false : bool } func ID ( ) { }",
  "func ID ( ) ID var ID : [ ( { / ( true + ID ) * ID ) ] bool var false : bool } func ID ( ) { }",
  "func ID ( ) ID var ID : [ : { / ( true + ID ) * ID ) ] bool var false ( bool } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : [ - * ID [ ( ( 123 false ) ) ] ] int var ID : int }",
  "func ID ( ) : [ ] bool { var ID : [ - * ID [ ( ( 123 ID ) ) ] ] int var false : int }",
  "func ID ( ) : [ ] bool { var ID : [ int * ID [ ( ( 123 ID ) ) ] ] int var false : - }",
  "func ID ( ID ] [ ID - ( ( ( ( false ) ) ) ) - ID ] [ ] [ : bool ) { }",
  "func ( ID ID ] [ ID - ( ( ( ( false ) ) ) ) - ID ] [ ] [ : bool ) { }",
  "func ID ( ID : int ) { var ( : bool var ID : [ - ( ID ID true ) ) ] int }",
  "func ID ( ID true int ) { var ( : bool var ID : [ - ( ID ID : ) ) ] int }",
  "- ID ( ID true int ) { var ( : bool var ID : [ func ( ID ID : ) ) ] int }",
  "func ID ( ) { var ID : false ] [ ] [ [ / - true - - ID [ true ] [ ID ] ] bool } func ID ( ) { }",
  "func ID ( ) { var ID [ false ] : ] [ [ / - true - - ID [ true ] [ ID ] ] bool } func ID ( ) { }",
  "func ID ( ID { var ID [ false ] : ] [ [ / - true - - ID [ true ] [ ID ] ] bool } func ) ( ) { }",
  "func ID ( ID : [ - 123 * false > true / ( false and - - } ) ] int ) { } func ID ( ) { true",
  "- ID ( ID : [ - 123 * false > true / ( false and func - } ) ] int ) { } func ID ( ) { true",
  "false ID ( ID : [ - 123 * - > true / ( false and func - } ) ] int ) { } func ID ( ) { true",
  "func ID ( ) { ID [ - - ( - ID ( ) [ - ( ID ID ) ) ] ) ] [ - ( ] = ( ID ) while false { } }",
  "func ID ( ) { ID [ ) - ( - ID ( ) [ - ( ID ID ) ) ] - ] [ - ( ] = ( ID ) while false { } }",
  "func ID ( ) { ID ( ) - ( - ID ( ) [ - ( ID ID ) ) ] - ] [ - [ ] = ( ID ) while false { } }",
  "func ID ( ID : - ] [ ( [ ID ( ) [ 123 ] [ ID ] ) ] [ ] int ) { }",
  "func ID ( ID : - ] [ ( [ ID 123 ) [ ( ] [ ID ] ) ] [ ] int ) { }",
  ") ID ( ID : - ] [ ( [ ID 123 ) [ ( ] [ ID ] ) ] [ ] int func { }",
  "func ID ( ) and [ ] int { call ID ( true / true / 123 : ID ) ID = ID } func ID ( ) { }",
  "func ID ( ) and [ ] int { call ID ( true / / true 123 : ID ) ID = ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : bool { var ID ( [ ID ( ) * - - : true ) * - 123 ] int }",
  "( ID ( ID : bool , ID : int ) : bool { var ID ( [ ID func ) * - - : true ) * - 123 ] int }",
  "( ID ( ID : bool int ID : , ) : bool { var ID ( [ ID func ) * - - : true ) * - 123 ] int }",
  "func ID ( ) { var ID : int var ID : [ ID ( ) * ( - ( ID ) ) ] [ ID bool } func ] ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ID ( ) * ( - ( ID ) ) ] [ ID bool } func ] ( } { )",
  "func ID ( ) { var : ID int var ID : [ ID ( ) * ( - ( ID ) ) ] [ ID bool } func ] ( } { )",
  "func ID ( ID : [ ] [ ] int , ID : bool , ID : [ ] ID ( ) [ - false ] ] [ - int ) { }",
  "func ID ( ID : [ : [ ] int , ID ] bool , ID : [ ] ID ( ) [ - false ] ] [ - int ) { }",
  "func ID ( ) : int { var ID : int { var ID : / ( false [ - true ) ] int var ID : bool } }",
  "func { ( ) : int ID var ID : int { var ID : / ( false [ - true ) ] int var ID : bool } }",
  "func { ( ) : int ID var ID : int { var ID : / ( false int - true ) ] [ var ID : bool } }",
  "func ID ( ID : bool ) : int { var ID : [ ( } ( ) [ 123 ] [ 123 ] ) ] [ ] int var ID : int ID func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : [ ( } 123 ) [ ( ] [ 123 ] ) ] [ ] int var ID : int ID func ID ( ) { }",
  "func ID ( ID : bool ) [ int { var ID : [ ( } 123 ) [ ( ] : 123 ] ) ] [ ] int var ID : int ID func ID ( ) { }",
  "func ID ( ) { var ID : bool print ( - - ( - ID [ ID ] [ ( ) - ID ) ] ) - { } }",
  "func ID ( ) ) var ID : bool print ( - - ( - ID [ ID ] [ ( { - ID ) ] ) - { } }",
  "func ID ( ) ) var ID : bool print ( - - ( - ID [ ID ] [ ( { - ID ) ] ) - { } }",
  "func ID ( : ) [ ] int { }",
  "func ID ( [ ) : ] int { }",
  "func ID ( [ ) } ] int { :",
  ") ID ( func : bool { var ID : bool var ID : [ - true / ID * ID ( 123 ) ] int } func ID ( ) { }",
  ") ID ( func : bool { var ID : bool var ID : [ - true / ID * ID ID 123 ) ] int } func ( ( ) { }",
  "func ID ( ) { var ID : bool var ID : int print ( ID ) true ] [ ID = ( - 123 ) }",
  "func ID ( ) { var ID : bool var ID : int print ( ID ) true - [ ID = ( ] 123 ) }",
  "func ID ( ) { var ID : bool var ID : int print ( ID ) true - [ ID = ( ] 123 ) }",
  "func ID ( ID : bool , ID : [ ( - - * ( 123 - 123 * ID ) ) ] int ) { }",
  "func ID ( ID : bool , ID : [ ( - - * ( 123 - 123 * ID ) ) ] int ) { }",
  "func , ( ID : bool ID ID : [ ( - - * ( 123 - 123 * ID ) ) ] int ) { }",
  "func ID ( ) : [ ] int { var [ : ID - - ID * ID ( ) [ - - ( 123 ) ] [ ID ] / ID ] bool }",
  "func ID ( ) : [ ID int { var [ : ID - - ] * ID ( ) [ - - ( 123 ) ] [ ID ] / ID ] bool }",
  "func ID ( ) : } ID int { var [ : ID - - ] * ID ( ) [ - - ( 123 ) ] [ ID ] / ID ] bool [",
  "func ID ( ) { { var + : int var ID : int print - true * - true ID - ID + ( true ) print - - false } call ID ( ) }",
  "+ ID ( ) { { var + : int var ID : int print - true * - true ID - ID func ( true ) print - - false } call ID ( ) }",
  "+ { ( ) ID { var + : int var ID : int print - true * - true ID - ID func ( true ) print - - false } call ID ( ) }",
  "func ID ( ID : bool , ID : ( ] bool ) : int { var ID : bool } func ID [ ID : [ ] int , ID : bool ) { }",
  "func ID ( ID : bool , ID : ( ] bool ) : int { var ID : bool int func ID [ ID : [ ] } , ID : bool ) { }",
  "func ID [ ID : [ ] int , ID : [ ] bool , ID : ( ] int ) : int { return 123 / ID }",
  "func ID [ ID : [ { int , ID : [ ] bool , ID : ( ] int ) : int ] return 123 / ID }",
  "func ID [ ID : [ { int , ID : [ return bool , ID : ( ] int ) : int ] ] 123 / ID }",
  "] ID ( ID : [ 123 / ID [ ( ( ID ) ) ] func [ ] bool ) { }",
  "] ID ( ID : [ ID / ID [ ( ( 123 ) ) ] func [ ] bool ) { }",
  "] } ( ID : [ ID / ID [ ( ( 123 ) ) ] func [ ] bool ) { ID",
  "func var ( ID : bool , ID : bool ) : bool { var ID : bool ID ID : int while - - ( ( - ID ) ) { } }",
  "func var ( ID : bool , ID : bool ) : bool { var ID : bool ID ID : int while ID - ( ( - - ) ) { } }",
  "func var ( ID : bool : ID : bool ) : bool { var ID , bool ID ID : int while ID - ( ( - - ) ) { } }",
  "func ID ID ID : int , ID : int ) { print ID / ( [ true * true ] [ - true ] { } }",
  "func ID ID ID : int , ID : int ) { print ID / ( [ true * true ] [ true - ] { } }",
  "func ID ID ID : int , ID : int ) { print ID / ( [ true * true ] [ } - ] { true }",
  "ID ID ( ID : bool ) : bool { var ID : int { var func : int call ID ( ) ID [ - 123 ] = 123 } { } } func ID ( ) { }",
  "ID ID ( ID : bool ) : bool { var ID : int { var func : int call ID ( ) ID [ - 123 ] = { } { } } func ID ( ) 123 }",
  "ID ID ( ID : bool ) : bool { var ID : int { var func : int call ID ( = ID [ - 123 ] ) { } { } } func ID ( ) 123 }",
  "func ID ( ) { var bool : [ false + - ID [ ( ID ) ] + - false ] ID }",
  "ID ID ( ) { var bool : [ false + - ID [ ( func ) ] + - false ] ID }",
  "ID ID ( ) { var bool : [ false + ( ID [ - func ) ] + - false ] ID }",
  "func ID ( ID : [ ( ID ( ) [ - } / ( true ) ] ) ] [ ] bool ) { 123",
  "func ID ( ID : [ ( ID ( ) [ - } / ( ) ) ] ) ] [ ] bool true { 123",
  "ID ID ( func : [ ( ID ( ) [ - } / ( ) ) ] ) ] [ ] bool true { 123",
  "func ID ( ) : bool { ID ( ) [ - 123 ) ( - 123 <= ] = ID print - 123 }",
  "func ID ( ) : bool { ) ( ) [ - 123 ID ( - 123 <= ] = ID print - 123 }",
  "func ID ( - : bool { ) ( ) [ - 123 ID ( - 123 <= ] = ID print ) 123 }",
  "func ID ( ID : bool , ID : [ ] [ 123 > ID ] ) [ - ID ] ( bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : bool ID ID : [ ] [ 123 > ID ] ) [ - ID ] ( bool , , : int ) { } func ID ( ) { }",
  "func ID ( ID : bool ID ] : [ ] [ 123 > ID ] ) [ - ID ID ( bool , , : int ) { } func ID ( ) { }",
  "func ID ( ) : [ ID / - - } - 123 * ( ( ID ) ) ] int { } func ID ( ) { -",
  "func ID ( ) : [ ID / - - ) - 123 * ( ( ID ) } ] int { } func ID ( ) { -",
  "func ID ( ) : [ ID / - - ) - 123 * ( - ID ) } ] int { } func ID ( ) { (",
  "func ID ( ) { var ID : [ - false ) - false / ( false / ID / ID / ] int var ID : int }",
  "func ID ( ) { var ID : [ - false ) - false / ( false / ID / ID / ] int var ID : int }",
  "func ID ( ) { var ID : [ - / ) - false false ( false / ID / ID / ] int var ID : int }",
  "func ID ( ID : bool , ID : [ true / ID - ( ( [ ) ) ] false ] int ) { }",
  "func ID ( ID : bool , ID : [ true / ) - ( ( [ ) ) ] false ] int ID { }",
  "func ID , ID : bool ( ID : [ true / ) - ( ( [ ) ) ] false ] int ID { }",
  "func ID ( ID : ) ( ( true / ( ID ( ) ) * 123 [ ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : ) ( ( true / 123 ID ( ) ) * ( [ ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : ) ( ( true / 123 ID ( ) ) * func [ ) ] [ ] bool ) { } ( ID ( ) { }",
  "func ID ( ) { var ID : [ 123 * ID [ ID [ ( ID ) ] ] [ - - true ] * bool ] [ ] 123 }",
  "func ID ] ) { var ID : [ 123 * ID [ ID [ ( ID ) ] ] [ - - true ] * bool ( [ ] 123 }",
  "func ID ] ) { var ID : [ 123 * ID [ ID [ ( ID ] ] ] [ - - true ) * bool ( [ ] 123 }",
  "func ID ( ID : bool ) { { var ID : ID ] int var [ : bool { var ID : bool var ID : [ ] bool } } }",
  "func ID ( ID : bool ) { { var ID : ID bool int var [ : ] { var ID : bool var ID : [ ] bool } } }",
  "func ID ( ID : bool ) { { var bool : ID ID int var [ : ] { var ID : bool var ID : [ ] bool } } }",
  "func ID ( ) { var ID : bool var ID : [ ] int return - true and ( - ID ) and ID } ID func ( ) { }",
  "func ID ( ) { var ID : ( var ID : [ ] int return - true and ( - ID ) and ID } ID func bool ) { }",
  "func ID ( ) { var ID : ( var ( : [ ] int return - true and ID - ID ) and ID } ID func bool ) { }",
  "func ID ( ) { ( ID call ) } func ID ( ) { var ID : [ ] int ID ( ) [ ID ] [ - ( ID ) ] = - ( ID ) }",
  "func ID ( ) { ( ID call ) } func ID ( ) { var ID : [ ] int ID ( ) [ ID ] [ - ( ID ) ] = - ( ID ) }",
  "func ID ( ) { ( ID call ) } func ( ( ) { var ID : [ ] int ID ID ) [ ID ] [ - ( ID ) ] = - ( ID ) }",
  "ID func ( ID : [ ] [ true * ID < - ( ( true ) ) ] bool ) { } func ID ( ) { }",
  "ID func ( ID : [ ] [ true * ID func - ( ( true ) ) ] bool ) { } < ID ( ) { }",
  "ID func ( ID : [ ] [ true * ID func - ( ( < ) ) ] bool ) { } true ID ( ) { }",
  "func ID ( ) : int { if ID ( } / ID ( ID ) ) { ID }",
  "func ID ( ) : int { if ID ( } / ID ( ID ) ) { ID }",
  "func ID ( ) : int { if ID ( } ID ID ( / ) ) { ID }",
  "func ID ( ) : } func ID ( ID : int , ID : int , ID : int ) { var ID : bool var ID { bool }",
  "func ID ( ) : } func ID ( ID : int , ID : int , ID : int ) { var ID : bool var ID { bool }",
  "func ID ( ) : } func , ( ID : int , ID : int ID ID : int ) { var ID : bool var ID { bool }",
  "func ID ( ] : [ ID [ ( 123 * true and true < ( ID ) ) ] bool ) { }",
  "func ID [ ] : ( ID [ ( 123 * true and true < ( ID ) ) ] bool ) { }",
  "func ID [ ] : ( ID [ ( 123 ( true and true < * ID ) ) ] bool ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : { ) { var ID : int call ID ( ) if - ID { } } func ID ( ) bool }",
  "func ID ( ID : bool , ID : } ] bool , ID : { ) { var ID : int call ID ( ) if - ID { } } func ID ( ) bool [",
  "func ID ( ID : bool , ID : bool ) { ID [ ID ( ) ] - 123 ] [ ID ] [ = ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { ID [ ID ( ) ] - 123 ] [ ID ] [ = ID { func ID ( ) } }",
  "func ID ( ID : bool , ID : bool ) { ID [ ID ( ) ] - 123 ] [ ID { [ = ID ] func ID ( ) } }",
  "func ID false ) : [ - ( * ID [ ( - true / - ID * ( - - ( ID ) ) ) ] [ false ] ] int { }",
  "func ID false ) : [ - ( * ID [ ( - true / - ID * ( - - ( ID ) ) ) ] [ false ] ] int { }",
  "func ID ( ) : bool { var ID : bool return - ( false + 123 / ( * ID 123 ) - ( ID ) ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool return - ( false + 123 / ( * ID 123 ) - ( ID ( ) } func ID ) ) { }",
  "func ID ( ) : bool { var ID : bool return - ( false + 123 / ( * } 123 ) - ( ID ( ) ID func ID ) ) { }",
  "func ID ( ID : ] ] [ ID / true + - - - ID ( ( ( true ) ) ) ] [ [ [ ] bool ) { } func ID ( ) { }",
  "func ID ( ( : ] ] [ ID / true + - - - ID ID ( ( true ) ) ) ] [ [ [ ] bool ) { } func ID ( ) { }",
  "func ID / ( : ] ] [ ID ( true + - - - ID ID ( ( true ) ) ) ] [ [ [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool ) { ID ID : bool var var : int { } { var ID : [ ] bool } }",
  "ID ID ( ID : [ ] int , ID : bool ) { ID func : bool var var : int { } { var ID : [ ] bool } }",
  "ID ID ( ID : [ ] } , ID : bool ) { ID func : bool var var : int { int { var ID : [ ] bool } }",
  "func ID ( ) { var ID ) int print - ( - ID ( 123 ) ) call ID ( : }",
  "func ID ( ) { var ID ) int print - ( ( ID - 123 ) ) call ID ( : }",
  "func ID int ) { var ID ) ( print - ( ( ID - 123 ) ) call ID ( : }",
  "func ID ( ID : int , ID : ID ) : int { var ID : [ ] int var ID : bool ID = ID } func int ( ) { }",
  "func ID ( ID : int , ID : ID ) : int { var ID ID [ ] int var : : bool ID = ID } func int ( ) { }",
  ": ID ( ID func [ ] int , ID : int , ID : bool ) { var ID : [ ID ( ID ) ] [ ] bool var ID : int }",
  ": ) ( ID func [ ] int , ID : int , ID : bool ID { var ID : [ ID ( ID ) ] [ ] bool var ID : int }",
  ": ) ( ID func [ ID int , ID : int , ID : bool ID { var ID : [ ] ( ID ) ] [ ] bool var ID : int }",
  "func ID ( ) : bool { var ID : [ ID [ - 123 or - true or - - 123 ] [ ID ] ] : var ID int int } func ID ( ) { }",
  "func ID ( ] : bool { var ID : [ ID [ - 123 or - true or - - 123 ] [ ID ) ] : var ID int int } func ID ( ) { }",
  "func ID ( ] : bool { var ID : [ ID [ - 123 or - true or - - 123 ] ID ID ) ] : var ID int int } func [ ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ( 123 / - ( ( false ) ] * ID ) ) [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID ] [ ] [ ( 123 / - ( ( false ) : * ID ) ) [ ] [ ] bool ) { } func ID ( ) { }",
  "ID ID ( func : bool , ID ] [ ] [ ( 123 / - ( ( false ) : * ID ) ) [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ false < - ( } 123 / ( ( ( ( true ) ) ) ) ) ] bool { } func ID ( ) { -",
  "func ( ( ) : [ false < - ( } 123 / ( ( ( ID true ) ) ) ) ) ] bool { } func ID ( ) { -",
  "func ( ( ) : [ false < - ( } 123 / ( ( ( ID true ) ) ) { ) ] bool { } func ID ( ) ) -",
  "] ID ( ) : [ ] int { var ID : [ ID ( ( ( - ( ID ) ) ) ) func [ ] bool } func ID ( ) { }",
  "] [ ( ) : [ ] int { var ID : [ ID ( ( ( - ( ID ) ) ) ) func ID ] bool } func ID ( ) { }",
  "] ) ( ) : [ ] int { var ID : [ ID ( ( ( - ( ID [ ) ) ) func ID ] bool } func ID ( ) { }",
  "func ID ( ) { { call - ( false * ID [ ID ID true + ( ( ( ID ) ) ) ] [ ID ] ) { } } ID = - ID }",
  "func ID ( ) { { call - ( false * ID [ ID ID true + ( ( ( ID ) ] ) ) [ ID ] ) { } } ID = - ID }",
  ") ID ( ) { { call - ( false * ID [ ID ID true + ( ( ( ID ) ] ) ) [ ID ] func { } } ID = - ID }",
  "func ID ( ) { var ID : bool var ID : true ] int call ID ( [ / - true / ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : true ] int true ID ( [ / - call / ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : ( ] int true ID true [ / - call / ID ) } func ID ( ) { }",
  "- ID ( ) : [ ] [ ] bool { var ID : int var ID : [ - - ID [ func ID ] ] [ ] int } func ID ( ) { }",
  "- ID ( ) : [ ] [ ID bool { var ID : int var ID : [ - - ] [ func ID ] ] [ ] int } func ID ( ) { }",
  "- ID ( ) : [ ] [ ID ID { var ID : int var ID : [ - - ] [ func bool ] ] [ ] int } func ID ( ) { }",
  "func ID ) ) { var ID : int if ( - ID [ ( ( - - ID ) ( ] ) { } { } }",
  "func ID ) ) : var ID { int if ( - ID [ ( ( - - ID ) ( ] ) { } { } }",
  "func ID ) ) : - ID { int if ( - ID [ ( ( var - ID ) ( ] ) { } { } }",
  "func ID ( ID : ] ( ID ( true * ID [ false ] ) ) ] [ [ int ) { } func ID ( ) { }",
  "func * ( ID : ] ( ID ( true ID ID [ false ] ) ) ] [ [ int ) { } func ID ( ) { }",
  "func * true ID : ] ( ID ( ( ID ID [ false ] ) ) ] [ [ int ) { } func ID ( ) { }",
  "func ID ( ID ] [ : bool ) : [ true / - - - true / - - 123 - ID ] bool { }",
  "func ID ( ID ] [ : true ) : [ true / - - - bool / - - 123 - ID ] bool { }",
  "func ID ( ID ] [ : true ) : [ true / - - - } / - - 123 - ID ] bool { bool",
  "func ID ( ID : int ) : [ ( - 123 * - - - 123 * ( 123 ) ) ] [ ] ID { } func bool ( ) { }",
  "func ID ( ID : int - : [ ( ) 123 * - - - 123 * ( 123 ) ) ] [ ] ID { } func bool ( ) { }",
  "func ID ( ) : [ - - false / ID [ 123 * false - ( ( ( 123 ) ) ) + ( - ( ( ( ID ) ) ) ) ] [ ID ] ] int } { func ID ( ) { }",
  "func ID ( ) : [ - - false { ID [ 123 * false - ( ( ( 123 ) ) ) + ( - ( ( ( ID ) ) ) ) ] [ ID ] ] int } / func ID ( ) { }",
  "func ID ( ) ] [ - - false { ID [ 123 * false - ( ( ( 123 ) ) ) + ( - ( ( ( ID ) ) ) ) ] [ ID : ] int } / func ID ( ) { }",
  "func ID : ID : int , ID ( int , ID : bool ) { }",
  "ID ID : ID : int , func ( int , ID : bool ) { }",
  "ID ID : ID : int , func ( int ) ID : bool , { }",
  "func ID ( ) : bool { var ID : ) var ID : bool ID ( 123 / ID - ( ( - false int ) - - ID ) = ( ( - false ) ) if ( false ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID int ) var ID : bool ID ( 123 / ID - ( ( - false : ) - - ID ) = ( ( - false ) ) if ( false ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID int ) var ID : bool ID ( 123 / ( - ( ( - false : ) - - ID ) = ( ID - false ) ) if ( false ) { } } func ID ( ) { }",
  "func ID ( ID : [ true * ( false * - ( { ( ( ID ) ) ) ) / 123 ] int ) - } func ID ( ) { }",
  "func ID ( ID : [ true * ( false * - ( { ( ( ID ) ) ) ) / 123 ] int ) - ( func ID } ) { }",
  "func ID ( ID : [ ] * ( false * - ( { ( ( ID ) ) ) ) / 123 true int ) - ( func ID } ) { }",
  "func ID ( / : [ ID [ false ID false and 123 / ( ID ) / - false and ( ID ) ] ] int ) { }",
  "func ID ( / : [ ID [ false ID false and 123 / ( ID and / - false ) ( ID ) ] ] int ) { }",
  "func ID ( / : [ ID [ false ID false and 123 / ( ID and ] - false ) ( ID ) ] / int ) { }",
  "func ID ( ID : [ ID [ ID * ID ( ID ( ) ) ] ID * [ ID ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ID [ ID * ID ( ID ( ) ) ] ID * [ ID ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( [ : [ ID [ ID * ID ( ID ( ) ) ] ID * ID ID ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID [ : - - - ID ( ) [ ( ( ( ID ) ) ) ] [ ID ] ] int ) { } func ID ( ) { }",
  "func ID ) ID : bool , ID : int , ID [ : - - - ID ( ) [ ( ( ( ID ) ) ) ] [ ID ] ] int ) { } func ID ( ( { }",
  "func ID ) , : bool ID ID : int , ID [ : - - - ID ( ) [ ( ( ( ID ) ) ) ] [ ID ] ] int ) { } func ID ( ( { }",
  "func ID ( ID : { , ID : [ ID ( ) [ true / - false / - false ] ] bool , ID : bool ) int } func ID ( ) { }",
  "func ID ( ID : { , bool : [ ID ( ) [ true / - false / - false ] ] ID , ID : bool ) int } func ID ( ) { }",
  "func ID ( ID : { , bool : [ ID ( ) [ true / - false / - false func ] ID , ID : bool ) int } ] ID ( ) { }",
  "func ID false ) : [ ] [ 123 / ID [ - ( ( * - ID * - 123 ) ] [ ( 123 ) ] ] int { }",
  "* ID false ) : [ ] [ 123 / ID [ - ( ( func - ID * - 123 ) ] [ ( 123 ) ] ] int { }",
  "* ID false ) : [ ] [ 123 / ID ] - ( ( func - ID * - 123 ) ] [ ( 123 ) ] [ int { }",
  "func ID ( ID : [ ] bool ) : [ ( - ( ( ID ) ) ) ] [ int ] { }",
  "{ ID ( ID : [ ] bool ) : [ ( - ( ( ID ) ) ) ] [ int ] func }",
  "{ ID ( ID : ) ] bool ) : [ ( - ( ( ID ) [ ) ] [ int ] func }",
  "func ID ( ) : bool - print 123 { ID [ true * - 123 / ( false ) ] } func ID ( ) { }",
  "func ID ( ) : bool - print 123 { ID [ true * - 123 / ( false ) ( } func ID ] ) { }",
  "123 ID ( ) : bool - print 123 { ID [ true * - func / ( false ) ( } func ID ] ) { }",
  "func ID ( ) : false { if bool / - ID [ - 123 * ( - false ) / ID ] [ ID ] { } }",
  "func ID ( ) : false { if bool / - ID [ - - * ( 123 false ) / ID ] [ ID ] { } }",
  "func ID ( ) : false { if bool / - ID ] - - * ( 123 false ) / ID [ [ ID ] { } }",
  "func ID ( ID : bool , ID : [ ) [ ] int , ID : int ) { ID ( ] [ - - false ] = ID } func ID ( ) { }",
  "] ID ( ID : bool , ID : [ ) [ ] int , ID : int ) { ID ( ] [ - - false func = ID } func ID ( ) { }",
  "] ID ( ID : bool , ID : [ ) [ ] int , ID : int ) { ID ( ] [ - - false func = ID } func ID ( ) { }",
  ") ID ( ID : [ ID [ - ( ( 123 * ( - 123 ) ) func ] ] bool ) { }",
  ") ID 123 ID : [ ID [ - ( ( 123 * ( - ( ) ) func ] ] bool ) { }",
  ") ID 123 ID : [ ID [ - bool ( 123 * ( - ( ) ) func ] ] ( ) { }",
  ") ID ( ID : bool , ID : int ) : bool { print ( ID ( ( - ( - 123 ) func ) ) print ( ID ) }",
  ") ID ( ID : bool , ID : int ) : bool { print ( ID print ( - ( - 123 ) func ) ) ( ( ID ) }",
  "ID ID ( ) : [ ] bool { var func : bool ID ( - - ( true ) ) = true ID = ID } func ID ( ) { }",
  "ID ID ( ) : ) ] bool { var func : bool ID ( - - ( true [ ) = true ID = ID } func ID ( ) { }",
  "ID ID bool ) : ) ] ( { var func : bool ID ( - - ( true [ ) = true ID = ID } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ ] int , ID : int ID { var ID : bool call ID ( - - - ID ) call ) ( ) }",
  "func ID ( ID : [ ] [ ] [ ] int , ID : int ID { var ID : bool call - ( - ID - ID ) call ) ( ) }",
  "func ID ( ID : [ ] [ ] [ ] int , } : int ID { var ID : bool call - ( - ID - ID ) call ) ( ) ID",
  "func / ( ID : [ false ID ID [ ID ( ) * ID / ID ] [ - - ( ID ) ] ] int ) { }",
  "func ID ( ) : bool { var ID : int var ID : bool while } ID ( ID ( ) ) { - } func ID ( ) { }",
  "func ID ( var : bool { var ID : int ) ID : bool while } ID ( ID ( ) ) { - } func ID ( ) { }",
  "func ID { var : bool { var ID : int ) ID : bool while } ID ( ID ( ) ) ( - } func ID ( ) { }",
  "func ID ( ) { if ( ( ( ( } ( ID ) ) ) ) ) { } -",
  "func ID ( ) { if ( ( ( ( } ( ID ) ) ) ) ) { } -",
  "func ID ( ) { if ( ( ( ( } ( ID ) ) ) ) ) { } -",
  "func ID ( ) { var ID : [ ( ID [ - ] + ( ID ) ] [ ID ID ) ] bool var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : ( ( ID [ - ] + [ ID ) ] [ ID ID ) ] bool var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : ( ( ID [ - ] + [ ID ) ] [ ID ID ) ] bool var ID : [ ] { } func ID ( ) bool }",
  "func ID ( ) : } { var ID : int call ID ( ) return int func ID ( ) { var ID : [ ( - true ) ] bool }",
  "func ID ) ) : } { var ID : int call ID ( ) return int func ID ( ( { var ID : [ ( - true ) ] bool }",
  "func ID ) ) : } { var ID : int call bool ( ) return int func ID ( ( { var ID : [ ( - true ) ] ID }",
  "func ID ( ) { var ID : [ ] } var ID : [ - ( ( ID ) ) ] int bool func ID ( ) { }",
  "func ID ( { { var ID : [ ] } var ID : [ - ( ( ID ) ) ] int bool func ID ( ) ) }",
  "func ID [ { { var ID : ( ] } var ID : [ - ( ( ID ) ) ] int bool func ID ( ) ) }",
  "func ID ( ID - int , ID : [ ] [ ( : ( - ID ( ) ) ) ] int ) { }",
  "func ID ( ID - int , ID : [ ] [ ( : ( - ID ( ) ) ) ] int ) { }",
  "func ID ( ID - [ , ID : int ] [ ( : ( - ID ( ) ) ) ] int ) { }",
  "func ID ( ID : bool , ID : int ) ID var { : bool var ID : bool }",
  "func ID ( ID : bool ) ID : int , ID var { : bool var ID : bool }",
  "func ID ( ID : bool ) ID : int , ID var { : bool var ID : bool }",
  "func ID ( ID : bool , ID : int ) : int { var ID : [ ] [ ( ID ) [ [ ] [ ] ] ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { var ID : [ ] [ ID ( ) [ [ ] [ ] ] ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : ID , ID : int ) : int { var bool : [ ] [ ID ( ) [ [ ] [ ] ] ] [ ] [ ] bool } func ID ( ) { }",
  "func ID false ) { var ID : bool while - - ID / ( false * ( ( ( ) ) ) { } }",
  "func ID ) ) { var ID : bool while - - ID / ( false * ( ( ( ) ) false { } }",
  "func ID ) ) { var ID : bool false - - ID / ( while * ( ( ( ) ) false { } }",
  "func ID ( ID : int , ID : int , ID : [ ID int false - 123 / - - ( - ID ) * ID ] [ ] / ) { }",
  ": ID ( ID func int , ID : int , ID : [ ID int false - 123 / - - ( - ID ) * ID ] [ ] / ) { }",
  ": ID ( ID func int / ID : int , ID : [ ID int false - 123 , - - ( - ID ) * ID ] [ ] / ) { }",
  "func ID ( ) : [ ] int { var ID : int if true * true * ( ID func { } } ) ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : int if true * true * ( ID func { } } ) ID ( ) { }",
  ") ID ( ) : [ ] int { var ID : int if true * true * ( ID func { } } func ID ( ) { }",
  "func ID ( ( { var ID : int var ID : [ ( - ( ) false ) ) ) ] [ ] int } func ID ( ) { }",
  "func ID ID ) : [ - ID [ ( / ( - ( true ) ) / ID ] [ false ] ] [ ] [ ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ID ) : [ - ID [ ( / ( - ( true ) ) / ID ] [ false ] ] [ ] [ ] [ ] [ ] ) { } func ID ( bool { }",
  "func ID ( ) : [ ] [ ] int { { var ID : bool if ID [ - 123 ] { } call ID ( ID } } func ) ( ) { }",
  "func ID ( ) : [ ] [ ] int { { var ID : bool if ID [ - 123 ] { } call ID ( ID } } func ) ( ) { }",
  "func ID ( ) : [ ] [ ] int { { var ID : bool if ID [ - 123 ] { } call ID ( ID } } func } ( ) { )",
  "func ID ( ID : [ ] bool , ID : [ - ID [ [ / - true + - ( false ) ] [ ID ] ] [ ] true ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ - ID [ [ / - true + ( ( false ) ] [ ID ] ] [ ] true ] int ) { } func ID - ) { }",
  "func ID ( ID : [ ] bool , ID : [ - ID [ [ / - true + ( ( false ) ] [ ID ] ] [ ] true ] int ) { } func ID - } { )",
  "func ID ( ) bool bool { var ID : bool var ID : : ID ( ( ( ID ) ) ) = 123 }",
  "func ID ( ) } bool { var ID : bool var ID : : ID ( ( ( ID ) ) ) = 123 bool",
  "func ID ( ) } bool { var ID : bool var ID : : ID ( ( ( ID ) ) ) = 123 bool",
  "func ID ( ) { var ID : int print true - - - ( ID ) ) - ( false }",
  "func ID ( ) { var ID : int ( true - - - print ID ) ) - ( false }",
  "func ID ( ) { var ID - int ( true - - : print ID ) ) - ( false }",
  "func ID ( ID : [ ] int ) : ) { var ID : int var ID : [ true + - true + ( - - ( false ) bool ] int } func ID ( ) { }",
  "func : ( ID : [ ] int ) : ) { var ID ID int var ID : [ true + - true + ( - - ( false ) bool ] int } func ID ( ) { }",
  "func : ( [ : [ ] int ) : ) { var ID ID int var ID : ID true + - true + ( - - ( false ) bool ] int } func ID ( ) { }",
  "func ID ( ( { var ID : [ ID ) ( - true >= ID ) ) ] bool var ID : int }",
  "func ID ( ( { var ID : [ >= ) ( - true ID ID ) ) ] bool var ID : int }",
  "func ID ( ( { var ID : [ >= ) ( - true ID ID ) ) ] bool var ID : int }",
  "func ID ( ID : false - ( ID ( ) [ [ * true / ( true ) ] ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : false - ( ID ( ) [ [ * true / ( true ) ] ) ) [ ] bool ] { } func ID ( ) { }",
  "func ID ( ( : false - ( ID ID ) [ [ * true / ( true ) ] ) ) [ ] bool ] { } func ID ( ) { }",
  "func ID ( and : int ) { var ID : bool print ( false and ID - ( 123 ) ID false ) }",
  "func ID ( and : int ) { var ID : bool print ( } and ID - ( 123 ) ID false ) false",
  "func ID ( and : int ) { var ID : bool and ( } print ID - ( 123 ) ID false ) false",
  "func ID ( ) : int { if - } + - ( true * ( ID ) ) + - ID { false } func ID ( ) { }",
  "func ID ( ) + int { if - } + - ( true * ( ID ) ) : - ID { false } func ID ( ) { }",
  "func ID ( ) + int { ) - } + - ( true * ( ID ) ) : - ID { false } func ID ( if { }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ - false - ( ) - ( ( ( ( ID ) ) ) ) ) ] bool } func ID ( - { }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ - false - ( ) - ( ( ( ( ID ) ) ) ) ) ] bool } func ID ( - { }",
  "func ID ( ID : bool , false : bool ) { var ID : [ - ID - ( ) - ( ( ( ( ID ) ) ) ) ) ] bool } func ID ( - { }",
  "func ID ( ID : int ) : { - true * false / - - - ( - - ID ) ] bool { } func ID ( ) [ }",
  "func ID ( ID : ID ) : { - true * false / - - - ( - - int ) ] bool { } func ID ( ) [ }",
  "func ID ( ID : ID ) : { - true ] false / - - - ( - - int ) * bool { } func ID ( ) [ }",
  "func ID ( ) { if ID [ ( ( ( 123 ID ) ) ] { } ID = - - ) }",
  "func ID ( ) { if ID [ ( ( ( 123 ID ) ID ] { } ) = - - ) }",
  "func ID ( ) { if ID [ ( ( ( 123 ID ) ID ] { } = ) - - ) }",
  "func ID ( ) { var ID : - var ID : bool ID = - ( false int ID - ( - ID ) ) { } }",
  "func ID ( ) { : ID : - var ID var bool ID = - ( false int ID - ( - ID ) ) { } }",
  "func ID ( ) { : ID : - var ID ID bool ID = - ( false int ID - ( - var ) ) { } }",
  "func ID ( ) : bool { var ID ) int var ID : int print - - false / - ID [ ( ID : ] }",
  "func ID ( ) : bool { var ID ) int var ID : int print - - false / - ID [ ( ID : ] }",
  "func ID ) ( : bool { var ID ) int var ID : int print - - false / - ID [ ( ID : ] }",
  "func ID ( ID : [ ] int ) { } func ID ( ID { var ID : int var ) : bool }",
  "func ID ( int : [ ] ID ) { } func ID ( ID { var ID : int var ) : bool }",
  "func ID ( int : [ ] ID ) func } { ID ( ID { var ID : int var ) : bool }",
  "func ID ( ID : bool , ID : int , ID : int ) { ID ( ( false and 123 and false ) ) = false } false } func ID ( ) { print",
  "func ID ( ID : ) , ID : int , ID : int ) { ID ( ( false and 123 and false ) ) = false } false } func ID ( bool { print",
  "func ID ( ID : ) , ID : int , ID : false ) { ID ( ( false and 123 and false ) ) = int } false } func ID ( bool { print",
  "func ID ( ) : var ID : bool return } func ID ( ) { var ID : bool var ID { int }",
  "func ID ( ) : var ID : ( return } func ID bool ) { var ID : bool var ID { int }",
  "func var ( ) : var ID : ( return } func ID bool ) { ID ID : bool var ID { int }",
  "func ID ( ) { var ID : bool var ID : bool call ) ( ID call ID ( ID [ ( false ) ] ) }",
  "func ID ( ) ( var ID : bool var ID : bool call ) ( ID call ID ( ID [ { false ) ] ) }",
  "func ID ( ) ( var ID : bool var ID : bool call ) ( ID call ID ( ID [ { false ) ] ) }",
  "func ID ( ID : int , ID ID int ) : int { var ID : [ ] [ - ( : ) ] int } func ID ( ) { }",
  "func ID ( ID : int , ID ID int ) : int { ) ID : [ ] [ - ( : var ] int } func ID ( ) { }",
  "func ID ( ID : int , ID ID int ) : int { ) ID : [ ] [ - ( ) var ] int } func ID ( : { }",
  "func ID ( ) : [ ] bool { { var ID : [ ID / ID ( : [ - ( ID ) ] ] int var ID ) int } call ID ( ) }",
  "func ID ( ) : [ ] bool { { var ID : [ ID / ID ( : int - ( ID ) ] ] int var ID ) [ } call ID ( ) }",
  "] ID ( ) : [ func bool { { var ID : [ ID / ID ( : int - ( ID ) ] ] int var ID ) [ } call ID ( ) }",
  "func ID ( ID : int - { print 123 / ( ( ( ) ID ) ) ) / ( - 123 ) } func ID ( ) { }",
  "func ID ( ID : int - { print 123 / ) ( ( ) ID ) ( ) / ( - 123 ) } func ID ( ) { }",
  "func ID ( ( : int - { print 123 / ) ( ( ) ID ) ( ) / ID - 123 ) } func ID ( ) { }",
  "func ID ( ID : ID , ID : bool , ID : bool ) { print ( ( - - ( ( bool ) ) ) ) }",
  "func ID ( ) : ID , ID : bool , ID : bool ID { print ( ( - - ( ( bool ) ) ) ) }",
  "func ID ( ) print ID , ID : bool , ID : bool ID { : ( ( - - ( ( bool ) ) ) ) }",
  "func ID ( ) { var - : int return ID - ( ( ( ( true ) ) ) ) } func ID ( ) { }",
  "func int ( ) { var - : ID return ID - ( ( ( ( true ) ) ) ) } func ID ( ) { }",
  "func int ( ) { var ID : ID return - - ( ( ( ( true ) ) ) ) } func ID ( ) { }",
  "func ID ( ) : int ID : bool { var ID : [ false and - - - 123 * ID / false and - ID ] int } func ID ( ) { }",
  "func ID ( ) : int ID : bool { var ID : [ false and - - - int * ID / false and - ID ] 123 } func ID ( ) { }",
  "func ID ( ) : int ) : bool { var ID : [ false and - - - int * ID / false and - ID ] 123 } func ID ( ID { }",
  "func ID ( ) ID [ ] bool { call : ( ) } func ID ( ID : int , ID : bool , ID : bool ) : [ ] bool { }",
  "func ID ( ) ID [ ] bool { ) : ( call } func ID ( ID : int , ID : bool , ID : bool ) : [ ] bool { }",
  "func ID ( ) ID [ ( bool { ) : ( call } func ID ] ID : int , ID : bool , ID : bool ) : [ ] bool { }",
  "func ID ( } : bool { var ID : bool var ID : [ ] [ ] bool ID ( ) [ 123 ] = ID )",
  "123 ID ( } : bool { var ID : bool var ID : [ ] [ ] bool ID ( ) [ func ] = ID )",
  "123 ID ID } : bool { var ID : bool var ( : [ ] [ ] bool ID ( ) [ func ] = ID )",
  "func ID ( ) { print ( ID } ( ( - false ) ) ] [ ( ( - ID ) ) ] ) print true [",
  "func ID ] ) { print ( ID } ( ( - false ) ) ] [ ( ( - ID ) ) ( ) print true [",
  "func ID ] ) { print ( ID } ( ( - true ) ) ] [ ( ( - ID ) ) ( ) print false [",
  "func ID ( ) : [ ] bool { var ID : [ true + ( false / ID * ( - - ( true ] ) ) - ID ] [ ) bool var ID : bool }",
  "func ID ( ) : [ ] bool { var ID : [ true + ( false / ID ( ( - - * true ] ) ) - ID ] [ ) bool var ID : bool }",
  "func ID ( ) : [ ] bool { var ID : [ true + ( false / ( ( ID - - * true ] ) ) - ID ] [ ) bool var ID : bool }",
  "func ID ( ID : bool ) { var ID : bool call } ( ID ( ) [ ID ] [ ( 123 ) ] ) print 123 } func ID ( ) { ID",
  "func ID ( ID : bool ) { var ID : bool call } ( ID ( ) [ ID ] 123 ( 123 ) ] ) print [ } func ID ( ) { ID",
  "func ID ( ID : bool ) { var ID : bool { } ( ID ( ) [ ID ] 123 ( 123 ) ] ) print [ } func ID ( ) call ID",
  "func ID ( ID : int , int : [ ] bool ) : [ ] int { var ID : [ ( false ) ] bool var ID : [ ] [ ] ID } func ID ( ) { }",
  "func ID ( ID [ int , int : [ ] bool ) : [ ] int { var ID : [ ( false ) ] bool var ID : [ ] : ] ID } func ID ( ) { }",
  "func ID ( ID [ int , int : [ ] bool ) : [ ] int { var ID : [ ( false ) ] ( var ID : [ ] : ] ID } func ID bool ) { }",
  "func ID ID ID : int , ID : int , ( : bool ) : bool { var ID : int print 123 * - ID } func ID ( ) { }",
  "func ID ID ID : int , } : int , ( : bool ) : bool { var ID : int print 123 * - ID } func ID ( ) { ID",
  "func ID ID ID ) int , } : int , ( : bool ) : bool { var ID : int print 123 * - ID } func ID ( : { ID",
  "} ID ( ) { var ID : bool var ID : bool } func ID ( ) { return func",
  "} ID ( ) { var ID ID bool var : : bool } func ID ( ) { return func",
  "} ID ( ) { var ID ID bool var : func bool } : ID ( ) { return func",
  "func ID ( ) { var ID : [ ] int if 123 * ID - true * true / ID + - ( - { ) { } while - ID { } } func ID ( ) ID }",
  "func ID ( ) { var ID : [ * int if 123 ] ID - true * true / ID + - ( - { ) { } while - ID { } } func ID ( ) ID }",
  "func ID ( ) { var ID : [ * int if 123 ] ID - { * true / ID + - ( - true ) { } while - ID { } } func ID ( ) ID }",
  "func { ( ) ID var ID : bool var ID : bool call ID ( - ( ( ID ) ) ) { } } func ID ( ) { }",
  "bool { ( ) ID var ID : func var ID : bool call ID ( - ( ( ID ) ) ) { } } func ID ( ) { }",
  "bool { ( ) func var ID : func var ID : bool call ID ( - ( ( ID ) ) ) { } } ID ID ( ) { }",
  "func ID ( ) : bool { ] ID [ 123 / true / - - ( ID ) print } func ID ( ) { }",
  "func ID ( ) : bool { ] ID [ 123 / true / - - ( ID ) print } func ID ( ) { }",
  "func ID ( ) : bool { ] ID [ 123 / true ( - - / ID ) print } func ID ( ) { }",
  "func ID ( ID : int ) { call int ( ) } func ID ( ) : [ ] ID { { print true while ID { } } call ID ( ) }",
  "func ID ( ID : int ) { call int ( ( } func ID ) ) : [ ] ID { { print true while ID { } } call ID ( ) }",
  "func ID ( ID : int ) { call int ( ( } func ID ) ) : [ ] ID { { print true while } { ID } call ID ( ) }",
  "func ID ( ID : [ 123 * ID ( ) [ ( ID > - 123 ) } ] bool ) { ] func ID ( ) { }",
  "func ID ( ID : [ * 123 ID ( ) [ ( ID > - 123 ) } ] bool ) { ] func ID ( ) { }",
  "func > ( ID : [ * 123 ID ( ) [ ( ID ID - 123 ) } ] bool ) { ] func ID ( ) { }",
  "func int ( ID : ID , ID : int , ID : [ ] [ ] [ - ( ID ( ) ) ] int ) { } func ID ( ) { }",
  "func int ( int : ID , ID : int , ID : [ ] [ ] [ - ( ID ( ) ) ] ID ) { } func ID ( ) { }",
  "func int ( int : ID ) ID : int , ID : [ ] [ ] [ - ( ID ( , ) ] ID ) { } func ID ( ) { }",
  "func ID ( 123 : bool { var ID : [ - - - ( ( ( - ) ) ) ) ] [ ] int }",
  "ID func ( 123 : bool { var ID : [ - - - ( ( ( - ) ) ) ) ] [ ] int }",
  "ID func ( ID : bool { var 123 : [ - - - ( ( ( - ) ) ) ) ] [ ] int }",
  "func ID ( ID : bool , ID : int ) : [ ] int - return ( { - ID ) } func ID ( ) { }",
  "func ID ] ID : bool , ID : int ) : [ ( int - return ( { - ID ) } func ID ( ) { }",
  "func ID ] ID : , bool ID : int ) : [ ( int - return ( { - ID ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) false bool { var ID : bool print ID [ 123 * - true * : ] [ ID ] }",
  "func ID ( ID : int , ID : bool ) false bool { var ID : bool print ID 123 [ * - true * : ] [ ID ] }",
  "func ID ( ID : int , ID : bool ) false bool { var ID : print bool ID 123 [ * - true * : ] [ ID ] }",
  "func ID ( ) : bool { var ID ID bool var : : int return }",
  "func ID ( : : bool { var ID ) bool var ID : int return }",
  "func ID ( ID : bool ) : int { var ID : [ ] [ 123 - - ID + ID ID int var ] : [ ] int }",
  "func ID ( ID : bool ) : ID { var ID : [ ] [ 123 - - int + ID ID int var ] : [ ] int }",
  "func : ( ID : bool ) : ID { var ID : [ ] [ 123 - - int + ID ID int var ] ID [ ] int }",
  "( ID func ID : int , ID : bool , ID : bool ) { call ID ( ID / true * - ( ( false ) ) ) }",
  "( ID func ID : int , ID : bool , ID : bool ) { call ID ( ID - true * / ( ( false ) ) ) }",
  "func ID ( ) { var ID : bool var ID : int ID - ( ( ID / ID / ID ) ) = ID { } }",
  "func ID ( ) { var ID : bool var ID / int ID - ( ( ID / ID : ID ) ) = ID { } }",
  "func ID ( ) { var ID : bool var ID / int ID - ( ( ID / ID } ID ) ) = ID { : }",
  "func ID ( ) : int { var ID : bool print ) / true / true - ID ( ID - ID }",
  "func ID ( ) - int { var ID : bool print ) / true / true - ID ( ID : ID }",
  "func ID ( ) - int { var ID : bool print ) - true / true / ID ( ID : ID }",
  "{ ID ( ID : bool , ID : int ) { while ID ( ( ( ID ) ) ) { } } func ID ( ) func }",
  "{ { ( ID : bool , ID : int ) { while ID ( ( ( ID ) ) ) ID } } func ID ( ) func }",
  "{ { ( ID : bool , ID : int ) { while ID ( ( ) ID ) ) ( ID } } func ID ( ) func }",
  "func ID ( ) : int { var ID : [ false * - ( 123 : ( - ID ) ) / ID ] [ ] [ ] bool var ID * int } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ false * - ( 123 : [ - ID ) ) / ID ] ( ] [ ] bool var ID * int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ false * - ( 123 : [ - ID ) ) / ID ] ( ] [ ] int var ID * int } func ID ( ) { }",
  "func ID ( ) { call ID ( ) ID func ID ( } : bool ) { var ID : int if - ( ( ( ID ) ) ) { } }",
  "func ID ( ) { } ID ( ) ID func ID ( } : bool ) { var ID : int if - ( ( ( ID ) ) ) { } call",
  "func ID ( ) { } - ( ) ID func ID ( } : bool ) { var ID : int if ID ( ( ( ID ) ) ) { } call",
  "func [ ( ) : int { var ID : ID ( 123 / ( true ) * - 123 ) ] bool var ID : bool } func ID ( ) { }",
  "func [ ( ) : int { var ID : ID ID 123 / ( true ) * - 123 ) ] bool var ID : bool } func ( ( ) { }",
  "func [ ID ) : int { var ID : ID ( 123 / ( true ) * - 123 ) ] bool var ID : bool } func ( ( ) { }",
  "func ID ( ) { var true : bool print ( ( ID ( ) [ ID ] [ ID ] ) ) } func ID ( ) { }",
  "ID ID ( ) { var true : bool print ( ( ID ( ) [ ID ] [ func ] ) ) } func ID ( ) { }",
  "ID ID ( ) { var true : bool print ( ( ( ID ) [ ID ] [ func ] ) ) } func ID ( ) { }",
  "func ID : ) ( [ - 123 or ( ( ( true ) ) ) ] int { }",
  "{ ID : ) ( [ - 123 or ( ( ( true ) ) ) ] int func }",
  "ID { : ) ( [ - 123 or ( ( ( true ) ) ) ] int func }",
  "func ID ( ) { var ID : int var ID : bool call ID func ( 123 - true / true ) ) print - - - - ( - - - ID ) } ( ID ( ) { }",
  "func ID ( ) { var ID : int var ID : - call ID func ( 123 - true / true ) ) print - - - - ( - bool - ID ) } ( ID ( ) { }",
  "func ID ( ) { var ID : int var ID : - call ID func ( 123 bool true / true ) ) print - - - - ( - - - ID ) } ( ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : [ ( ( 123 * ( true ) ) ) ] [ ] bool func ID : bool } var ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : [ ( ( 123 * ) true ) ) ( ] [ ] bool func ID : bool } var ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : [ ( ( * 123 ) true ) ) ( ] [ ] bool func ID : bool } var ID ( ) { }",
  "func ID ( ID : bool , ] : [ ID [ ] int , ID : bool ) { var ID : [ ] int var ID : int if true { } } func ID ( ) { }",
  "func : ( ID : bool , ] ID [ ID [ ] int , ID : bool ) { var ID : [ ] int var ID : int if true { } } func ID ( ) { }",
  "func : ( ID : bool , ] ID [ ID [ ] int : ID , bool ) { var ID : [ ] int var ID : int if true { } } func ID ( ) { }",
  "func ID ( ) : int { while { false * - ID ( ( ID ) ) { } } }",
  "( ID func ) : int { while { false * - ID ( ( ID ) ) { } } }",
  "( ID func ) : int { while { false * - ID ( ( { ) ) ID } } }",
  "func ID ( ) : bool true var ID : [ ] bool var ID : int while ID ( ( ( ( { ) ) ) ) { } if ID { } }",
  "func ID ( ) : bool { var ID : [ ] bool ID ID : int while ID ( ( ( ( true ) ) ) ) { } if var { } }",
  "func bool ( ) { var ID : int var ID : ID print false * ID / false + true / false + 123 { } }",
  "func bool ( ) { var ID : int var ID : ID print false } ID / false + true / false + 123 { } *",
  "func bool ( ) { ID ID : int var ID : ID print false } var / false + true / false + 123 { } *",
  "func ID ( ID : int , ID : [ ( 123 * ( false ) * true ) ] int , ID : int ID { } func ) ( ) { }",
  "func ID ( ID : int , ID : ) ( 123 * ( false ) * true ) ] int , ID : int ID { } func [ ( ) { }",
  "( ID ( ID : int , ID : ) ( 123 * ( false ) * true ) ] int , ID : int ID { } func [ func ) { }",
  "func ID ( - : [ ( true / ID * ID ID ( ID ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] var , ID : int , ID : int ) { var ID : [ ] [ ] int { int ID : [ ] bool var ID : int } } func ID ( ) { }",
  "func ID } ID : [ ] var , ID : int , ID : int ) { var ID : [ ] [ ] int { int ID : [ ] bool var ID : int ( } func ID ( ) { }",
  "func ID } ID : ) ] var , ID : int , ID : int [ { var ID : [ ] [ ] int { int ID : [ ] bool var ID : int ( } func ID ( ) { }",
  "func ID ( ) { } ID : int { { var ID : [ ] [ ] bool var ID : bool while ID { } if false { } } var } func ID ( ) { }",
  "func ID ( ) { } ID : int { { var ID : [ ] [ ] bool var ID : bool while ID { } if false { } } var } func ID ( ) { }",
  "func ID ( ) { } ID : int { { var ID : [ ] [ ] bool var ID : bool while ID { } if false { } } var } func ID ( ) { }",
  "func ID ( ID : [ ] } ) { if ( ( 123 + ID ) ) { } int",
  "func ID ( ID : [ } ] ) { if ( ( 123 + ID ) ) { } int",
  "func ID ( ID : [ } ] ) + if ( ( 123 { ID ) ) { } int",
  "func ID ( ) : int { var ID ) bool return - ( ID ( - 123 ) ) } func ID ( : { }",
  "func return ( ) : int { var ID ) bool ID - ( ID ( - 123 ) ) } func ID ( : { }",
  "func return ( ) : int { var ID ) bool } - ( ID ( - 123 ) ) ID func ID ( : { }",
  "func ID ( ) : ( ID ( ( - false / ID [ ( ( [ - ID ) ) ) ] ) ) ] [ ] [ ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : ] ID ( ( - false / ID [ ( ( [ - ID ) ) ) ( ) ) ] [ ] [ ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : ] ID ( ( - false ( ID [ ( / [ - ID ) ) ) ( ) ) ] [ ] [ ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : int { - ID : int while 123 and - ID [ ( - var 123 ) ] { } } func ID ( ) { }",
  "- ID ( ) : int { - ID : int while 123 and - ID [ ( func var 123 ) ] { } } func ID ( ) { }",
  "- ID ( ) : int { - ID : int while 123 and - ID [ ( func var 123 ) ] } { } func ID ( ) { }",
  "func ID ] ID : int , ID : [ - true * - true - ID [ - ID ] - true ( bool , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ] ID : int , ID : [ - true * - true - ID [ - ID ] - true ( bool , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID [ - - ID [ - - ( - ID ) ] ] func int ) { } ] ID ( ) { }",
  "func int ( ID : [ ] [ ID [ - - ID [ - - ( - ID ) ] ] func ID ) { } ] ID ( ) { }",
  "func ID ( ) { } ID : [ - ID / ( ID or ( - - ID ) ) ] bool var",
  "func ID ( ) { ID ID : [ - } / ( ID or ( - - ID ) ) ] bool var",
  "func ID ( ) { ID ID : [ - ID / ( } or ( - - ID ) ) ] bool var",
  "func ) ( ID : [ ] int { } func ID ( ) : bool { var ID : int return - ID ( ) }",
  "func ) ( ID : [ ] int ( } func ID { ) : bool { var ID : int return - ID ( ) }",
  "func ) ( ID : [ ] int ( } func ID { ) : bool ) var ID : int return - ID ( { }",
  "( ID ( ) : [ func false - ( false * ID * 123 ) ) ] int { } func ID ( ) { }",
  "( ) ( ) : [ func false - ( false * ID * 123 ) ) ] int { } func ID ( ID { }",
  "( ) ( ) : [ func false - ( false * ID * 123 ) ) ] int { } func ID ( } { ID",
  "func ID ( ID : int , ID : ID , ID : [ ID ( ) / ( true > ID ) / bool ] [ ] bool ) { }",
  "func ID ( ID : int , ID [ ID , ID : [ ID ( ) / ( true > ID ) / bool ] : ] bool ) { }",
  "func ID ( } : int , ID : int , ID : [ ID ( ) [ 123 - - - 123 ] ] int ) { ID func ID ( ) { }",
  "func ID - } : int , ID : int , ID : [ ID ( ) [ 123 ( - - 123 ] ] int ) { ID func ID ( ) { }",
  "func ID - } : int , { : int , ID : [ ID ( ) [ 123 ( - - 123 ] ] int ) ID ID func ID ( ) { }",
  "( ID func ID : bool , ID : [ ] [ ( ID [ ID ( ) ] [ ID ] ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { print ( - false ID ID ( ) * ( - * ) ) { } }",
  "func ( ( ) : bool { print ID - false ID ID ( ) * ( - * ) ) { } }",
  "func ( ( ) : bool { print ID - false ) ID ( ID * ( - * ) ) { } }",
  "func ID ( ID : int , ID : bool , ID : int ) : bool { ID [ ID [ ( ID ) ] [ - ID ] ] [ ( } ) ] = ID } func ID ( ) { true",
  "func ID ( ID : int , ID : bool , ID : int ) : } { ID [ ID [ ( ID ) ] [ - ID ] ] [ ( bool ) ] = ID } func ID ( ) { true",
  "func ID ( ID : int , ID : bool , ID : int ) : } { ID [ ID [ ( ID ) ] [ - ID ] ] [ ( bool func ] = ID } ) ID ( ) { true",
  "func ID ( ) { var ID : int var ] : [ ( ID ( - ( ( ( - ( ID ) ) ) ) ) ) ID [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : int var ] : [ ( ID ( - ( ( ( - { ID ) ) ) ) ) ) ID [ ] [ ] int } func ID ( ) ( }",
  "func ID ( ) { return - - ( 123 > - ID [ ID ( - ) ] ) }",
  "[ ID ( ) { return - - ( 123 > - ID func ID ( - ) ] ) }",
  "[ ID ( ) { return - func ( 123 > - ID - ID ( - ) ] ) }",
  "func ID ( ID : bool , ID : int , ID : int ) { return 123 * - ( false * true - - ( ) ) * ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) { return 123 * - ( false * ID - - ( ) ) * true } func ID ( ) { }",
  "func ID ( ID : bool , ID - int , ID : int ) { return 123 * - ( false * ID - : ( ) ) * true } func ID ( ) { }",
  "func ID ) ID : bool ( { var ID : int call ID ( ) { var ID : bool { var ID : int } ID = ID } }",
  "func ID ) ID : bool ( { var ID : int call ID ( ) { var ID : bool { var ID : int } ID = ID } }",
  "func ID ID ID : bool ( { var ID : int call ) ( ) { var ID : bool { var ID : int } ID = ID } }",
  "func ID ( : : bool , ID ID [ ( ( - ( true / true ) ) ) ] [ ] bool , ID : bool ) { }",
  "func ID ( : : bool , ID ID [ ( ( - ( true , true ) ) ) ] [ ] bool / ID : bool ) { }",
  "func ID ( : : bool ] ID ID [ ( ( - ( true , true ) ) ) ] [ , bool / ID : bool ) { }",
  "func ( ID ID : [ ] int ) : [ ( ( - false - 123 + 123 ) ) ] bool { } func ID ( ) { }",
  "func ( ID ID : [ ] int 123 : [ ( ( - false - 123 + ) ) ) ] bool { } func ID ( ) { }",
  "func ( ID ID : [ ] int 123 : [ ( ( - ID - 123 + ) ) ) ] bool { } func false ( ) { }",
  "func ID ( ID : [ ( true - ID [ - ( ID ) ] [ ( ) ( - ( - ( - 123 ) - ) ) ] + ( - ID ) ) ] int ) { }",
  "func ID ( ID : [ true ( - ID [ - ( ID ) ] [ ( ) ( - ( - ( - 123 ) - ) ) ] + ( - ID ) ) ] int ) { }",
  "func ID ( ID : [ int ( - ID [ - ( ID ) ] [ ( ) ( - ( - ( - 123 ) - ) ) ] + ( - ID ) ) ] true ) { }",
  "func ID ( ) { : ID : bool var ID var [ false * false + true * ID ( ) * ID ] bool }",
  "func ID ( ) { : ID : bool var ID var [ false * false + true * ID ( ) * ID ] bool }",
  "func ( ( ) { : ID : bool var ID var [ false * false + true * ID ID ) * ID ] bool }",
  "func ID ( ID : bool , ID : bool , : ID int ) { var ID : int var ID : bool return ID ( true ) }",
  "func ID ( ID : bool , ID ID bool , : ID int ) { var ID : int var ID : bool return : ( true ) }",
  ") ID ( ID : bool , ID ID bool , : ID int func { var ID : int var ID : bool return : ( true ) }",
  "func ID ( ID : [ ] [ ( - true false + ( - ) ) ] bool ) { }",
  "func ID ( ID : [ ] [ ) - true false + ( - ( ) ] bool ) { }",
  "( ID ( ID : [ ] [ ) - true false + ( - func ) ] bool ) { }",
  "func ID ( ) { { } return } func ID ( ) { var ID : [ ID ( ) [ false ] bool true ] ] bool var ID : [ }",
  "func ID ( ) { { } return } func ID ( ) { var ID : [ ID ( ) [ false ] bool true ] ] bool var ID : [ }",
  "func ID ( ) { { ] return } func ID ( ) { var ID : [ ID ( ) [ false } bool true ] ] bool var ID : [ }",
  "func ID ( ) { var ID : bool var ID ) [ ( - ( ID ( ) : ) ] [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ] ) [ ( - ( ID ( ) : ) ] [ ID int } func ID ( ) { }",
  "func ] ( ) { var ID : bool var ID ) [ ( - ( ID ( ) : ) ] [ ID int } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] int { var ID : } while ID ( - false ) { } } func ID ( ) { int",
  "func ( ( ID : int ) : [ ] int { var ID : } while ID ( - false ) { } } func ID ID ) { int",
  "func ( ( ID : ID ) : [ ] int { var ID : } while ID ( - false ) { } } func int ID ) { int",
  "func ID ( ) : int { var ID : int 123 ID : int { if ID ( - ( - 123 ) ) { } } while var { } }",
  "func ID ( ) : int { var ID : int 123 ID var int { if ID ( - ( - 123 ) ) { } } while : { } }",
  "func ID ( ) : int { var ID } int 123 ID var int { if ID ( - ( - 123 ) ) { : } while : { } }",
  "func ID ( ID : [ ID ( ID ( false * 123 + false ) func ] bool ) { } ) ID ( ) { }",
  "func ID ( ID : [ ID ( } ( false * 123 + false ) func ] bool ) { ID ) ID ( ) { }",
  "func ID ( ID : [ ID ( } ( false * 123 + false ] func ) bool ) { ID ) ID ( ) { }",
  "func ID ( ) ID call { ( ) return ID ( ) [ 123 + ( ( ( ( - true ) ) ) ) + ( 123 ) ] [ 123 ] }",
  "123 ID ( ID : int , ID : int ) { var ID : int var ID : [ ID [ ( 123 ) ] [ ( - - func ) ] ] bool }",
  "123 ( ( ID : int , ID : int ) { var ID : int var ID : [ ID [ ( 123 ) ] [ ID - - func ) ] ] bool }",
  "123 ( ( ID : int , ID : int ID { var ID : int var ID : [ ) [ ( 123 ) ] [ ID - - func ) ] ] bool }",
  "func bool ( ID : ID ) { var ID : [ ] [ ( - ( - ID ) ) ] [ ] int var ID : int } func ID ( ) { }",
  "func bool ( ID : ID ) int var ID : [ ] [ ( - ( - ID ) ) ] [ ] { var ID : int } func ID ( ) { }",
  "func bool ( ID : ID ) int var ID : [ } [ ( - ( - ID ) ) ] [ ] { var ID : int } func ID ( ) { ]",
  "func ID ( ID : int ) { var ID : bool ID [ ID [ ( ID ) ] [ ( false ) ] ] = - - ( - - - ( ID ) ) ) if ( - ( true ) { } }",
  "func ID ( ID : int ) { var ID : bool ID [ ID [ ( ID ) ] [ ( false ) ] ] - - - ( = - - ( ID ) ) ) if ( - ( true ) { } }",
  "func ID ( - : int ) { var ID : bool ID [ ID [ ( ID ) ] [ ( false ) ] ] - - ID ( = - - ( ID ) ) ) if ( - ( true ) { } }",
  "func ID ( ) : [ - 123 + ) ( ( ( true ) - ) ] [ ] [ ] int { }",
  "func ID ( ) true [ - 123 + ) ( ( ( : ) - ) ] [ ] [ ] int { }",
  "func ID ( ) true [ - 123 + ) ( ( ( : ) [ ) ] - ] [ ] int { }",
  "func ID ( [ : int , ID : bool ) { } func ID ( ) { var ID : ID ] [ ] [ ( ( ( - ID ) ) ) ] bool }",
  "func ID ( [ : int , ID : bool ) { } func ID ( ) { var ID : ID ] [ ] [ ( ( ) - ID ( ) ) ] bool }",
  ") ID ( [ : int , ID : bool ) { } func ID ( ) { var ID : ID ] [ ] [ ( ( ) - ID ( func ) ] bool }",
  "func ID ( ID : bool ) ID : int , ID : [ false * ( ID ( ) [ - ( false ) ] ) ] [ ] [ ] int , { } func ID ( ) { }",
  "func ID ( ID [ bool ) ID : int , ID : [ false * ( ID ( ) [ - ( false ) ] ) ] [ ] : ] int , { } func ID ( ) { }",
  "func ID ( ID [ bool ) ID ) int , ID : [ false * ( ID ( ) [ - ( false ) ] ) ] [ ] : ] int , { } func ID ( : { }",
  "func ID ( ID : int , ID : [ ] [ ] int : ID , bool ) : int { var ID : int call ID ( ) call ID ( ) } func ID ( ) { }",
  "func ID : ID : int , ID : [ ] [ ] int : ID , bool ) : int { var ID ( int call ID ( ) call ID ( ) } func ID ( ) { }",
  "func ID : ID : int , ID : [ ] [ ] int : ID , ID ) : int { var ID ( int call ID ( ) call ID ( ) } func bool ( ) { }",
  "func ID ( ) { var ] : bool var ID : int call ID ( ( - ID [ false ] [ ID ID ) ) while ID { } } func ID ( ) { }",
  "func ID ( ) { var ] : bool ) ID : int call ID ( ( - ID [ false ] [ ID ID ) var while ID { } } func ID ( ) { }",
  "- ID ( ) { var ] : bool ) ID : int call ID ( ( func ID [ false ] [ ID ID ) var while ID { } } func ID ( ) { }",
  "func ID ( : : bool , ID ID [ ] [ ] [ ] int , ID : bool ) : [ ( - ( ( ( ID ) ) ) ) ] [ ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( : : bool , ID ID [ ] [ ] [ ] int , ID : bool ) : [ ( - ( ( ( ID ) ) ) ) ] [ ] [ ] [ ] int { } ID func ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : bool while ID [ ( - - - ID ] [ ( ID ) ] { } { } } func ID - ) { }",
  "func ID ( ) : bool ID var ID : int var ID : bool while ID [ ( - - - ID ] [ ( { ) ] { } { } } func ID - ) { }",
  "func ID ( ) : bool ID var ID : int var [ : bool while ID [ ( - - - ID ] ID ( { ) ] { } { } } func ID - ) { }",
  "func ID ( ( : [ - - ( ID ID ( false ) ) ) ] int ) { }",
  "func ID ( ( : [ - - ( ID ID ( } ) ) ) ] int ) { false",
  "func ID ( ( : ( - - ( ID ID [ } ) ) ) ] int ) { false",
  "func ID { ID : bool , ID : [ ] int ) ( ID ( ) [ true <= - ID ] = ID { } } func ID ( ) { }",
  "func ID { ID : bool , ID : [ ] int ) ( ID ( ) [ true <= - ID ] = ID { } } func ID ( ) { }",
  "func ID { ID ) bool , ID : [ ] int : ( ID ( ) [ true <= - ID ] = ID { } } func ID ( ) { }",
  "( ID ( ID : [ - true < ( - ( false + - true ) ) ] bool ) { } func ID func ) { }",
  "( ID ( ID : [ - true < ( - ( false + - true ) ) ] bool ) { } func ID func ) { }",
  "func ID ( ) { var ID ID [ ] bool print : ( ) [ true / - ( ID ) ] [ ID ] print ( ID ) }",
  "func ID ( ) { var } ID [ ] bool print : ( ) [ true / - ( ID ) ] [ ID ] print ( ID ) ID",
  "func ID ( ) { var } ID [ [ bool print : ( ) ] true / - ( ID ) ] [ ID ] print ( ID ) ID",
  "func ID ( ID : int , ID : [ * ID ( ) [ true * - - 123 ( - true ] ) ] int ) { }",
  "func ID ( ID : int , ID : [ * ID ( ) [ true * - - 123 ( - ] true ) ] int ) { }",
  "func ID ( ) : int , ID : [ * ID ( ) [ true * - - 123 ( - ] true ) ] int ID { }",
  "{ ID ( ) : [ ID * ( ( - ( - - false ) ) ) / 123 ] [ ] int func } func ID ( ) { }",
  "{ ID ( ) : [ ID * ( ( - ( - - false ) ) ) / 123 ] [ ] int func } func ID { ) ( }",
  "{ ID ( ) : ( ID * ( ( - [ - - false ) ) ) / 123 ] [ ] int func } func ID { ) ( }",
  "func ID ( ID : bool , ID : [ ID - - true == ( false ) ] [ ] [ ] int , ID : [ ] int ) { func } ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID - - true == ( false ) { [ ] [ ] int , ID : [ ] int ) ] func } ID ( ) { }",
  "func ID } ID : bool , ID : [ ID - - true == ( false ) { [ ] [ ] int , ID : [ ] int ) ] func ( ID ( ) { }",
  "func ID ( ID : int , + : int , ID : int ) : bool { call ID ( ( 123 ID ID - 123 ) ) call ID ( ) }",
  "func ID ( ID : int , + : int , ID : int ) : bool { call ID ( ( 123 ) ID - 123 ) ) call ID ( ID }",
  "func ID ( ) : [ ID ( ] [ - - - - ID [ false ] [ ID ] ] [ - - ID ] ] [ ] [ ) bool { }",
  "func ID ( ) : [ ID ( ] [ - - - - ID [ ID ] [ false ] ] [ - - ID ] ] [ ] [ ) bool { }",
  "func ID ( ) : [ ID ( ] [ - - - - ID ] ID ] [ false ] ] [ - - ID ] [ [ ] [ ) bool { }",
  "func ID ( ) : : { var ID bool [ ] [ ID ( - true * ( ID ) / ( - ( - ID ) ) ) ] int }",
  "func ID ( ) : : { var ID bool [ ] [ ID ( - ) * ( ID ) / ( - ( - ID ) true ) ] int }",
  "func ID ( ) : : { var ID bool [ ] [ ID int - ) * ( ID ) / ( - ( - ID ) true ) ] ( }",
  "func ID ( ) ( while false / ( ID ( ID * { ( ( ( 123 ) ) ) ) / 123 ) ) * - 123 { } } func ID ( ) { }",
  "func ID ( ) ( while false / ( ID ( 123 * { ( ( ( 123 ) ) ) ) / ID ) ) * - 123 { } } func ID ( ) { }",
  "func } ( ) ( while false / ( ID ( 123 * { ( ( ( 123 ) ) ) ) / ID ) ) * - 123 { } ID func ID ( ) { }",
  "func ID ( ) : [ 123 + ( ID [ - - true * - ( - { ) * ID ] [ ID ] ) ] [ ] bool ID }",
  "func ID ( ) : [ 123 + } ID [ - - true * - ( - { ) * ID ] [ ID ] ) ] [ ] bool ID (",
  "func ID ( ID : bool , ID : [ ID ( - [ - - ( true ) ] [ ( ( ) ( ID ) ) ) ] ] int ) { }",
  "func ID ( ID ) bool , ID : [ ID ( - [ - - ( true ) ] [ ( ( ) ( ID : ) ) ] ] int ) { }",
  "func ID - ID ) bool , ID : [ ID ( - [ - ( ( true ) ] [ ( ( ) ( ID : ) ) ] ] int ) { }",
  "func ID ( ID : bool , ID : int , ID : [ 123 / * 123 and 123 - ( ID ) ] int ) { }",
  "func ID ID ID : bool , ( : int , ID : [ 123 / * 123 and 123 - ( ID ) ] int ) { }",
  "func ID ID ID : bool , ( : int , ID : [ 123 / * 123 and 123 - ( ID ) ] int ) { }",
  "func ID ( ) : bool { var ID - [ - ID [ - false * false / ( - ( ID ) ) ] [ : ( 123 ) ] ] [ ] int }",
  "func ID ( ) : bool { var ID - [ - ID [ - false * false / ( - ( ID ) ) ] [ : ( 123 ) ] ] [ ] int }",
  "func ID ( ) : bool { var ID - [ - ID [ - ID * false / ( - ( false ) ) ] [ : ( 123 ) ] ] [ ] int }",
  "func ID ( ) { ID [ ( true + ID [ - 123 ] [ ( ] ) ] = 123 - ID ) } func ID ( ) { }",
  "func ID ( ) { ID [ ( true + ID [ - 123 ] [ ( ] ) ] = 123 - ID ) ID func } ( ) { }",
  "func ID ( ID : bool , ID : int ) : bool { var ID : [ ] int var ID : } while ID * ID { } int func ID ( ) { }",
  "func ID ( ID : bool , [ : int ) : bool { var ID : ID ] int var ID : } while ID * ID { } int func ID ( ) { }",
  "func ID ( ID : bool , [ : int ) : bool { var ID : ID ] int } ID : var while ID * ID { } int func ID ( ) { }",
  "func ID ( ID ] bool , ID : [ : bool , ID : [ - true / ( ID / - false ) * true ] int ) { } func ID ( ) { }",
  "func ID ( ID ] bool , ID : [ : bool , ID : [ - true / true ID / - false ) * ( ] int ) { } func ID ( ) { }",
  "func ID ( ID ] bool ) ID : [ : bool , ID : [ - true / true ID / - false ) * ( ] int ) { } func ID ( , { }",
  "func ) ( ID { var ID : int return false and - - ( true * true * true ) }",
  "func ) } ID { var ID : int return false and - - ( true * true * true ) (",
  "func ) } ID { var ID : int return false and - - ( true true true * * ) (",
  "func ID ( ID : ] , ID : int ) : [ - ID [ - ( 123 ) int ] bool { }",
  "func ID ( ID : ] , ID int : ) : [ - ID [ - ( 123 ) int ] bool { }",
  "func ID : ID : ] , ID int ( ) : [ - ID [ - ( 123 ) int ] bool { }",
  "func ID ( ID : bool , ID : [ ID [ ( - ( ( false ) ) ) ] [ ( true ) ] ] } ] bool , ID : [ ] int ) { } func ID ( ) { [",
  "func ID ( ID ID bool , : : [ ID [ ( - ( ( false ) ) ) ] [ ( true ) ] ] } ] bool , ID : [ ] int ) { } func ID ( ) { [",
  "func ID ( ID : int bool ID : int , ID : , ) : [ ID ( - - ID [ ( ( ( ID ) ) ) ] [ 123 ] ) ] [ ] bool { }",
  "func ID ( ID : int bool ID : int , ID : , ) : [ ID bool - - ID [ ( ( ( ID ) ) ) ] [ 123 ] ) ] [ ] ( { }",
  "func ID ( ID : int bool ID : int , ID : , ) : [ ( bool - - ID [ ( ID ( ID ) ) ) ] [ 123 ] ) ] [ ] ( { }",
  "func ID ( ID : [ ( true * ( 123 * - - ( ( [ ID ) ) ) ) ) ] [ ] [ ] ( ] bool ) { }",
  "func ID ( ID * [ ( true * ( 123 : - - ( ( [ ID ) ) ) ) ) ] [ ] [ ] ( ] bool ) { }",
  "func ID ( ID * [ ( true * ( 123 : - - ( ( [ ID ) ) ) ) ) { [ ] [ ] ( ] bool ) ] }",
  "func ID ( ) : int bool var ID : { var ID : int while ID * ID [ false ] / ID { } while ID { } } func ID ( ) { }",
  "func ID ( ) : int bool var ID : { var ID : int ( ID * ID [ false ] / ID { } while ID { } } func ID while ) { }",
  "func ID ( ) : int bool { ID : { var ID : int ( ID * ID [ false ] / ID { } while ID { } } func ID while ) var }",
  "func ID ( ID : int , ID : bool ) { var ID : bool var ID : int { var ID : int var ID : bool while ( ( 123 ) ) } } ID = false } } func ID ( ) { {",
  "func { ( ID : int , ID : bool ) { var ID : bool var ID : int { var ID : int var ID : bool while ( ( 123 ) ) } } ID = false } } func ID ( ) { ID",
  "func { ( int : int , ID : bool ) { var ID : bool var ID : ID { var ID : int var ID : bool while ( ( 123 ) ) } } ID = false } } func ID ( ) { ID",
  "func ID ( ) : bool { var ID : int var ID : int ID [ - - 123 - true * ID / ( ( false - ) ] [ - ( - ) ( ID ) ) ] = - - 123 }",
  "func [ ( ) : bool { var ID : int var ID : int ID ID - - 123 - true * ID / ( ( false - ) ] [ - ( - ) ( ID ) ) ] = - - 123 }",
  "func [ ( ) : ID { var bool : int var ID : int ID ID - - 123 - true * ID / ( ( false - ) ] [ - ( - ) ( ID ) ) ] = - - 123 }",
  "func ID ( ID : int , ID : [ ] [ ID ( - ( ID ( - ) ) ) ] [ ] bool , ID : [ ] bool ) { }",
  "func ID ( [ : int , ID : [ ] [ ID ( - ( ID ( - ) ) ) ] ID ] bool , ID : [ ] bool ) { }",
  "func ID ( - : int , ID : [ ] [ ID ( - ( ID ( [ ) ) ) ] ID ] bool , ID : [ ] bool ) { }",
  "func ID ( ) { var ID : [ ( ( - ID ( ) ) ) false ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( ( - ID ( ) ) bool false ] ) var ID : int } func ID ( ) { }",
  "func ID ( ) { var ] : [ ( ( - ID ( ) ) bool false ID ) var ID : int } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID ( [ false * - ID / - ( ID ) ] ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID ( [ false * - ID / - ( ID ) ] ( ] [ ] [ ] bool ) { } func ID ) ) { }",
  "func ID ( ID : int , ID : [ ID ( [ false * - ID / - ( ID ) ] ( func [ ] [ ] bool ) { } ] ID ) ) { }",
  "func ID ( ID : [ ] [ - ID ( ID [ ID ( ) ] [ - ID ] ) ] int ) } {",
  "func ID ( ID : [ ] [ - ID ( ID [ ID ( ) ] [ - ID ] ) ] int ) } {",
  "func [ ( ID : [ ] ID - ID ( ID [ ID ( ) ] [ - ID ] ) ] int ) } {",
  "func ID ( ID : int , ID : [ ] bool , ID : bool ) ID var { : int }",
  "func { ( ID : int , ID : [ ] bool , ID : bool ) ID var ID : int }",
  "func { ( ID : int , ID : [ ] bool int ID : bool ) ID var ID : , }",
  "func ID ( ) { var ID : int var ID : { while ID [ - false * ID / - ID ] { } if ID int } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : { while ID } - false * ID / - ID ] { } if ID int } [ func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : { while ID } - false * ID / { ID ] - } if ID int } [ func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ] } var ID : bool call ID ( ) ID ( - ID ) = - - 123 } func ID ( ) { int",
  "func ID ( ID : bool ) { var ID : [ ] } var ID : bool call - ( ) ID ( - ID ) = - ID 123 } func ID ( ) { int",
  "func ID ( ID : bool ) { var ID : [ ] } - ID : bool call var ( ) ID ( - ID ) = - ID 123 } func ID ( ) { int",
  "func ID [ ID : bool , ID : int , ID : bool ) { var ID : ( - ID ( ( ID ) ) ] [ ] [ ] int var ID : [ ] [ ] [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID [ ID : bool , ID : int , ID : bool ) { var ID : ( - ID ( ( ID ) ) ] [ ] [ ] int var ID : [ ] [ ] ] [ [ ] [ ] bool } func ID ( ) { }",
  "func ID [ ID : bool , ID : int , ID : bool ) { var ID : ( - ID ( ( ID ) ) ] [ ] [ ] int var ID : [ ] [ ] ] [ [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ 123 true ID [ - ID ( true ) ] [ ( ( 123 ) ) ] / / ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( true : [ 123 true ID [ - ID ( ID ) ] [ ( ( 123 ) ) ] / / ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : bool if ( 123 / { ID ) { } ID = - ( ( ID ) ) } func ID ( ) - }",
  "func ID ( ID : int , ID : int ) { var ID : bool func ( 123 / { ID ) { } ID = - ( ( ID ) ) } if ID ( ) - }",
  "func ID ( ID : int , ID : int bool { var ID : ) func ( 123 / { ID ) { } ID = - ( ( ID ) ) } if ID ( ) - }",
  "func ID ( ID : ) , ID : [ ] int , ID : [ - false + ID [ ID ] [ ( - - ID int ] + 123 ] bool ) { }",
  "func ID ( ID : ) , ID : [ ] int , false : [ - ID + ID [ ID ] [ ( - - ID int ] + 123 ] bool ) { }",
  "func ID ( ) = bool { var ID : bool var ID : bool print ID [ false * - 123 * ID ] ID : - 123 }",
  "func ID ( ) ID bool { var ID : bool var ID : bool print = [ false * - 123 * ID ] ID : - 123 }",
  "func ID ( ) ID bool { var ID : bool var ID : bool print = [ false * - 123 * - ] ID : ID 123 }",
  "func ID ID ) : bool { var ID : [ ] [ ] bool { var ID : bool if 123 * true { } } print ( ( ) }",
  "func ID ID ) : bool { var ID print [ ] [ ] bool { var ID : bool if 123 * true { } } : ( ( ) }",
  "func ID ID ) : { { var ID print [ ] [ ] bool { var ID : bool if 123 * true bool } } : ( ( ) }",
  "func ID ( ID : int , ID : [ 123 <= ID [ ] * ( ( - ID ) ) ] true bool ) { }",
  "func ID ( ID : int , ID : [ 123 <= ID [ ] * ( ( - ID ] ) ) true bool ) { }",
  "func ID ( ID : int , ID : [ ) <= ID [ ] * ( ( - ID ] ) ) true bool 123 { }",
  "func ID ( ) { var ID : bool var ( : int while ID [ 123 / ID ID ) / ID ] { } }",
  "func ID ( ) { } ID : bool var ( : int while ID [ 123 / ID ID ) / ID ] { var }",
  "func ID ( ) { } ID : ID var ( : int while ID [ 123 / bool ID ) / ID ] { var }",
  "func ID ( ID : int ) ] bool { while ID [ - ( ID ) ] [ ( - ( - - ID ) ) : { } while 123 { } }",
  "func ID ( ID : int ) ] bool { while ID [ - ( ID ) ] [ { - ( - - ID ) ) : ( } while 123 { } }",
  "func ID ( ID : int ) ] bool { while ID [ - ( ID ) ] [ { - ( - - ID ) ) ( : } while 123 { } }",
  "func ID ( ID : int , ID : [ ] int ) : int { { var ID : int var ID ( [ : false ) ] int } } func ID ( ) { }",
  "func ID ( ID : int , ID ) [ ] int ) : int { { var ID : int var ID ( [ : false ) ] int } } func ID ( : { }",
  "func ID ( ID : int , ID ) { ] int ) : int [ { var ID : int var ID ( [ : false ) ] int } } func ID ( : { }",
  "func ID ( ) var int { var ID : bool : ID : [ ] bool print ID [ false * ID ] }",
  "func ID ( ) var int { var ID : bool : ID : bool ] [ print ID [ false * ID ] }",
  "func ID ( ) var int { var ID : bool : ID : bool ] [ print ID [ false * ID ] }",
  "func ID ( ) : bool { { var ID : [ ] bool var ID : [ 123 + 123 * - - - / ID ID false ] int } ID = ID }",
  "func ID ( ) : ID { { var ID : [ ] bool var ID : [ 123 + 123 * - - - / ID ID false ] int } ID = bool }",
  "func ID ( ) ] ID { { var ID : [ : bool var ID : [ 123 + 123 * - - - / ID ID false ] int } ID = bool }",
  "func ID ( ) : int { var ID : int var ID : [ ( false / ID ( ) [ false ] [ 123 ] ( ] [ ] bool } func ID ) ) { }",
  "func ID ( ) : int { var ID : int var { : [ ( false / ID ( ) [ false ] [ 123 ] ( ] [ ] bool } func ID ) ) ID }",
  "func ID false ) : int { var ID : int var { : [ ( ( / ID ( ) [ false ] [ 123 ] ( ] [ ] bool } func ID ) ) ID }",
  "func ID ( ) ( bool { ID : ) [ ID - ( false <= true ) ] = ( - true ) call ID ( ) }",
  "func ID ( : ( bool { ID ) ) [ ID - ( false <= true ) ] = ( - true ) call ID ( ) }",
  "func ID ( : ( bool { ID ) true [ ID - ( false <= ) ) ] = ( - true ) call ID ( ) }",
  "func ID ( ) { return - ID ( ) ID ( true * 123 - ) }",
  "func ID ( ) { return - true ( ) ID ( ID * 123 - ) }",
  "func ID ( ID : bool , ID : [ ] bool , ID : [ ] bool ) : int { var ID : [ [ int var ID : ] ] int }",
  "func ID ( ID : bool , ID : [ [ bool , ID : [ ] bool ) : int { var ID : ] [ int var ID : ] ] int }",
  "func ID ( ID : bool , ID [ : [ bool , ID : [ ] bool ) : int { var ID : ] [ int var ID : ] ] int }",
  "ID ID ( ) : int { var ID : [ ] bool var ID : [ ] int call ID ( ) func ( false ) = ( - ( ID ) ) }",
  "ID ID ( ) : int { var ] : [ ID bool var ID : [ ] int call ID ( ) func ( false ) = ( - ( ID ) ) }",
  "ID ID ( ) : int { var ] : [ ID bool var ID : [ ] int call ID ( ) ( func false ) = ( - ( ID ) ) }",
  "func ID ( ID : bool ) : bool { var ID : [ ( false * ( - - ( ) 123 ) ) ] bool } func ID ( ) { }",
  "( ID ( ID : bool ) : bool { var ID : [ ( false * ( - - func ) 123 ) ) ] bool } func ID ( ) { }",
  "( ID ( ID bool bool ) : bool { var ID : [ ( false * ( - - func ) 123 ) ) ] : } func ID ( ) { }",
  "func ID ( ) { var ID - int var ID : bool print true / 123 : 123 * ( ID ) * 123 - - ( ID ) } func ID ( ) { }",
  "func ID ( ) { var ID - int var ID : bool print true / 123 : 123 - ( ID ) * 123 - * ( ID ) } func ID ( ) { }",
  "func ID ( ) { var ID - int var ID : bool print true / 123 : 123 - ( ) ) * 123 - * ( ID ) } func ID ( ID { }",
  "func ID ( ID : [ ] bool , ID : return , ID : [ ] bool ) { { var ID : int bool 123 } { } }",
  "func ID ( ID var [ ] bool , ID : return , ID : [ ] bool ) { { : ID : int bool 123 } { } }",
  "func ID ( ID var [ ] bool bool ID : return , ID : [ ] bool ) { { : ID : int , 123 } { } }",
  "func ID ( ) : bool { ID [ 123 + 123 * ( 123 / ( ID = ) - ( 123 ) ] [ - ( true ) ] ) ID if ID { } }",
  "func ID ( ) : bool { ID [ 123 + 123 * ( 123 / ( ID = ) ( ( 123 ) ] [ - - true ) ] ) ID if ID { } }",
  "func ID ( ) : bool { ID [ 123 + 123 * ( 123 / } ID = ) ( ( 123 ) ] [ - - true ) ] ) ID if ID { ( }",
  "func ID ( false { { var ID : [ ( ID [ ID ] ) ] int } ID = ) } func ID ( ) { }",
  "func ID ( false { { var ID : [ ( ID [ ID ] ) ] int } ID = ) } func ID ( ) { }",
  "func ID ( false { { var ID : [ ( ID [ ID ] ) ] int } ID = ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ - false / ( ID [ ( ] ) ] ) ] [ ID int } func ID ( ) { }",
  "func ID ( ) { var ID : ] - false / ( ID [ ( [ ) ] ) ] [ ID int } func ID ( ) { }",
  "func ID ( ) { var ] : ] - false / ( ID [ ( [ ) ID ) ] [ ID int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int return ID [ ( ID ( ) ) ] [ - ( ( ( ) ID ) ) ) ( ] } func ID ( ) { }",
  "func ID ( ) ( bool { var ID : int return ID [ ( ID ( ) ) ] [ - ( ( ( ) ID ) ) ) ( ] } func ID : ) { }",
  "func ID ( ) ( bool { var ID : int return ID [ } ID ( ) ) ] [ - ( ( ( ) ID ) ) ) ( ] ( func ID : ) { }",
  "func ID ( { : int , ID : int ) { var ID : [ ] [ ID [ ( ID ) ] [ - ( false ) ] ] int var ID : [ ] int } func ID ( ) ID }",
  ") ID ( { : int , ID : int func { var ID : [ ] [ ID [ ( ID ) ] [ - ( false ) ] ] int var ID : [ ] int } func ID ( ) ID }",
  ") ) ( { : int , ID : int func { var ID : [ ] [ ID [ ( ID ID ] [ - ( false ) ] ] int var ID : [ ] int } func ID ( ) ID }",
  "func ID ( ) : } { while ID / ( - ( ID ( ) ) ) { int } func ID ( ) { }",
  "func ID ( ) : ( { while ID / ( - } ID ( ) ) ) { int } func ID ( ) { }",
  "func ID ( ) : ( } while ID / ( - } ID ( ) ) ) { int { func ID ( ) { }",
  "func ID ( ) : bool { var ID : ) return ID ( - 123 * - - 123 * ID ) } func ID ( bool { }",
  "func ID ( ) : bool { var ID 123 ) return ID ( - : * - - 123 * ID ) } func ID ( bool { }",
  "func ID ( ) return bool { var ID 123 ) : ID ( - : * - - 123 * ID ) } func ID ( bool { }",
  "func ID ( : : bool , ID ID int ) { return }",
  "func ID ( : ID bool , : ID int ) { return }",
  "func : ( : ID bool , ID ID int ) { return }",
  "func ID ( ) { ID ID : int var var : int call ID ( ) return ( ( ID ) ) }",
  "func ID ( ) call ID ID : int var var : int { ID ( ) return ( ( ID ) ) }",
  "func ID ( ) call ID ID : int var var : return { ID ( ) int ( ( ID ) ) }",
  "func ID ( ) : [ ] bool { return / false - false + true / - - ID - ( - true ) }",
  "func ID ( ) : [ - bool { return / false ] false + true / - - ID - ( - true ) }",
  "func ID ( ) : [ - bool { return / false ] false + true / true - ID - ( - - ) }",
  "ID ID ( ID : [ - - ( ID ( - ( func ) ) ) ] int ) { }",
  "int ID ( ID : [ - - ( ID ( - ( func ) ) ) ] ID ) { }",
  "int ID ( ID : [ - - ( ID ( - ( func ) ) ) ] ID ) { }",
  "func ID while ID : int , ID : int ) : int { ( ID ( ) [ ID ( ) ] [ ID ] { } if ( ( ID ) ) { } } func ID ( ) { }",
  "func ID while ID : int , ID : int ( : int { ( ID ) ) [ ID ( ) ] [ ID ] { } if ( ( ID ) ) { } } func ID ( ) { }",
  "func ID while : ID int , ID : int ( : int { ( ID ) ) [ ID ( ) ] [ ID ] { } if ( ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] { bool var ID : [ ( ( ID ) ) ] int }",
  "func ID ( ID : int ) : var ] { bool [ ID : [ ( ( ID ) ) ] int }",
  "func ID ( ID : int ) ) var ] { bool [ ID : [ ( ( ID ) : ] int }",
  "func ID ( [ : int ) : [ ] int { var ID : [ ( ID ID true ] [ - ( - true ) ] ) ] int var ID : bool }",
  "func ID ( [ : int ) : [ ] int { var ID : [ ( ID ID true ] [ - ( - ] ) ] ) true int var ID : bool }",
  "func ID ( [ : int ) : [ - int { var ID : [ ( ID ID true ] [ ] ( - ] ) ] ) true int var ID : bool }",
  "func { ( ) { var ID : int var ID : [ ] bool } func ID ( ID : bool , ID : bool , ID : [ ] [ ] bool ) ID }",
  "func { ( ) { var ID : int var ID : [ ] bool } func ) ( ID : bool , ID : bool , ID : [ ] [ ] bool ID ID }",
  "func ID ( ID : bool ) : bool { while ID [ ID [ - - true ] ( [ ] - - true ) ] { } while 123 { } }",
  "func ID ( ID : bool ) : bool { while ID [ { [ - - true ] ( [ ] - - true ) ] { } while 123 ID } }",
  "func ID ( ID : bool ) : bool { while ID [ { [ - - true ] ( [ ] - - true while ] { } ) 123 ID } }",
  "func ID int ID : [ 123 / ( ( - ID ( ) / ( ( false ) ) / - 123 ) ) * ID ] ( ) { }",
  "func ID int ID : [ 123 / ( ( - ID ( ) / ( ( false ) ) / - ) ) 123 * ID ] ( ) { }",
  "func ID int ID : [ 123 * ( ( - ID ( ) / ( ( false ) ) / - ) ) 123 / ID ] ( ) { }",
  "func ID ( ID : int , ID : [ ] bool , ID int int ) : : { var ID : int var ID : [ ID ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool , ID int int ) : : { var ID : int var ID : [ ID ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] bool , ID int int ) : : { var ID : int var ID : [ ID ] ( } func ID bool ) { }",
  "func ID ( ) : int { var ID : int var ID ] bool ID [ ( ID ( ) ) : = ID }",
  "func ID ( ) : int { var ID : int var ID bool ] ID [ ( ID ( ) ) : = ID }",
  "func ID ( ) : int { var ID : int var ID bool ] ID [ ( ID ( ) ) : = ID }",
  "func ID ( ID : func - - ID [ - false * true * ID ( ) ] [ false ] ] int ) { } [ ID ( ) { }",
  "func * ( ID : func - - ID [ - false * true ID ID ( ) ] [ false ] ] int ) { } [ ID ( ) { }",
  "func * ( ID : func - - ID [ - false * true ID ] ( ) ID [ false ] ] int ) { } [ ID ( ) { }",
  "func ID ( ) : ] { var ID : bool var ID : [ bool int print - ( true / - - ( ( ( false ) ) ) ) }",
  "func ID ( ) bool ] { var ID : : var ID : [ bool int print - ( true / - - ( ( ( false ) ) ) ) }",
  "- ID ( ) bool ] { var ID : : var ID : [ bool int print func ( true / - - ( ( ( false ) ) ) ) }",
  "func ID ( ) : [ ( true - ( false - true * ID ) + bool ) ] 123 { }",
  "func ID ( ) : [ ] true - ( false - true * ID ) + bool ) ( 123 { }",
  "func ID ( ) : [ ] true - ( bool - true * ID ) + false ) ( 123 { }",
  "func ID ( ID : [ 123 * ID [ ( - ( ( - ( false ) ) ) ) ] ] [ ] ( ) { } func ID int ) { }",
  "func ID ( ID : [ 123 * ID [ ( - ( ( - ( false ) ) ) ) ] ] [ ] ( ) { } func ID int ) { }",
  "func ID ( ID : [ 123 ( ID [ ( - ( * - ( false ) ) ) ) ] ] [ ] ( ) { } func ID int ) { }",
  "func ID ( ID : int , ID : bool , ID ( int ) : int { { var ID : bool } } func ID : ID : bool ) { }",
  "func } ( ID : int , ID : bool , ID ( int ) : int { { var ID : bool } ID func ID : ID : bool ) { }",
  "func } ( ID : int , ID : bool , ID ( int ) ) int { { var ID : bool } ID func ID : ID : bool : { }",
  "func ID ( ) { var ID : int while ID / ) ( - ( ID ( ) ) { } print true } func ID ( ) { }",
  "func ID ( ) { var ID ) int while ID / : ( - ( ID ( ) ) { } print true } func ID ( ) { }",
  "func ID ( ) { var ID ) int while ID / : ( - ( ID } ) ) { ( print true } func ID ( ) { }",
  "func ID ( ) : ( { call ID int ) }",
  "func ID ( ) { ( : call ID int ) }",
  "func ) ( ) { ( : call ID int ID }",
  "func ID ( ) { var ID : bool var ] : [ ] [ ID int print ID ( ) [ true ] }",
  "func ID ( ) { var ID : bool var [ : ID ] [ ] int print ID ( ) [ true ] }",
  "ID ID ( ) { return - - - - true - - ID ( ) [ ( ( ( ( ID ) ) ) ) ] - - func } func ID ( ) { }",
  "ID ID ( ) { return - - - - true ID - - ( ) [ ( ( ( ( ID ) ) ) ) ] - - func } func ID ( ) { }",
  "ID ID ( ) { return - - - - true ID - - ( ) [ ) ( ( ( ID ) ) ( ) ] - - func } func ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( ) while ID [ ID ( ) [ ( ) 123 ( ) ] ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( ) while ID [ ID ( ) [ ( ) 123 ( ) ] ] { } } func ID ( ) { }",
  "func ID ( ) [ var ID : int call ID ( ) while ID { ID ( ) [ ( ) 123 ( ) ] ] { } } func ID ( ) { }",
  "func ID ( ID bool [ ] : , ID : int , ID : int ) : [ ] bool { return - ( - ID ) }",
  "func ID ( ID bool [ ] : , ID : int , ID : int ) : [ ] bool { return - ( - ) ID }",
  "func ID ( ) { var ID : [ ] bool ID ( ( - ( ID } ) ) = ID )",
  "func ID ( ) { var } : [ ] bool ID ( ( - ( ID ID ) ) = ID )",
  "func ID ( ID : bool ) : int { var ID : int bool ID : bool { var ID : var ID [ - - true ] = ID } }",
  "func ID ( ID : bool ) : int { var ID : ID bool ID : bool { var int : var ID [ - - true ] = ID } }",
  "func ID ( ID : bool ) : int { var ID : ID bool ID : ID { var int : var bool [ - - true ] = ID } }",
  "func ID ( ID : bool , ID : bool ] : bool { return ( ID ( ) [ ( - ID ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ] : bool { return ( ID ( ) [ ( - ID ) ) ) } func ID ( ) { }",
  "func ID ( [ : ) ID / - true != - ID ( ) [ - ID ] [ ( ID ) ] ] bool { }",
  "func ID ( [ : ) ID / - true != - ID ID ) [ - ( ] [ ( ID ) ] ] bool { }",
  "func ID ( ID : ) ID / - true != - ID ID ) [ - ( ] [ ( [ ) ] ] bool { }",
  "func ID ID ) { var ID : [ ] [ ] bool var ID : bool return } func ID ( ( : bool , ID : int ) { }",
  "func ID ID { ) var ID : [ ] [ ] bool var ID : bool return } func ID ( ( : bool , ID : int ) { }",
  "func ID ID { ) var ID : [ ] [ ] bool var ID : bool return func } ID ( ( : bool , ID : int ) { }",
  "func ID ( ) { var ID : print var ID : bool { int ( ID [ ( ( ( ID ) ) ) ] [ - - true ] ) } } func ID ( ) { }",
  "func ID ( ) { var ID : print ) ID : bool { int ( ID [ ( ( ( ID var ) ) ] [ - - true ] ) } } func ID ( ) { }",
  "func ID ( ) { var ID : print ) ID : bool { int ( ID [ ( ( ( ID var ) ) ] [ - - true ] ) } func } ID ( ) { }",
  "func ID ( , : [ ] int ID ID : bool ) : int { }",
  "func ID ( , : [ ] int ID ID : bool ) : int } {",
  "func ID ( , : [ ] int ID ID int bool ) : : } {",
  "func ) ( ID : bool , ID : [ ] int , ID : [ ] [ ] int ) : bool { var ID : bool return - ( ID ID } func ID ( ) { }",
  "func ) ( ID : bool , ID : [ ] int , ID : [ ] [ ] int ) : bool { var ID : bool return ID ( ID ID } func - ( ) { }",
  "func ) ( ID : bool , ID : [ ] int ] ID : [ , [ ] int ) : bool { var ID : bool return ID ( ID ID } func - ( ) { }",
  "func ID ( ID : bool , ID : int ) : ID ] [ ] int { var [ : int var ID : bool return ID }",
  "func ID ( ID : bool , ID : int ) : ID [ [ ] int { var ] : int var ID : bool return ID }",
  "func ID ( bool : bool , ID : int ) : ID [ [ ] int { var ] : int var ID : ID return ID }",
  "func ID / ID : [ - 123 ( 123 + ( ID [ ( 123 ) ] ) - 123 ] [ ] bool ) { } func ID ( ) { }",
  "func ID / ID : [ - 123 123 ( + ( ID [ ( 123 ) ] ) - 123 ] [ ] bool ) { } func ID ( ) { }",
  "func ID / ID : [ - 123 123 ( + ID ( [ ( 123 ) ] ) - 123 ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : func , ID : bool , ID : [ ] [ ] [ ( false * ID / true ) ] int ) { } int ID ( ) { }",
  "func ID ( ID : func , ID : bool , ID : [ ] [ ] [ ( false * ID / true ) ] int ) { } int ID ( ) { }",
  "func ID ( ID , func , ID : bool : ID : [ ] [ ] [ ( false * ID / true ) ] int ) { } int ID ( ) { }",
  "func ID ( ID : bool ) ID : [ - 123 + ID [ ID [ - ID ] [ ID ] ] [ ( ( ID , ) ] - ID ] bool ) { }",
  "func ID ( ID : bool ) ID ] [ - 123 + ID [ ID [ - ID ] [ ID ] ] [ ( ( ID , ) ] - ID : bool ) { }",
  "func ID ( ID 123 bool ) ID ] [ - : + ID [ ID [ - ID ] [ ID ] ] [ ( ( ID , ) ] - ID : bool ) { }",
  "func ID ( ) { var ID : int - ID : [ - false / - ID ( var ( - - - - ID ) ) * ( - ID ) ] [ ] [ ] int }",
  "func ID ( ) { var ID : int - ID : [ - false / - ID ( var ( - - - - ID ) ) * ( - [ ) ] ID ] [ ] int }",
  "func - ( ) { var ID : int ID ID : [ - false / - ID ( var ( - - - - ID ) ) * ( - [ ) ] ID ] [ ] int }",
  "func ID ( ) { var ID : int var ID : bool ID [ 123 / ( ( * ) ) false ID ] [ - ( 123 ) ] = ( true ) }",
  "func ID ( ) { var ID : int var ID : bool ( [ 123 / ID ( * ) ) false ID ] [ - ( 123 ) ] = ( true ) }",
  "func ID ( int { var ID : ) var ID : bool ( [ 123 / ID ( * ) ) false ID ] [ - ( 123 ) ] = ( true ) }",
  "func ID ( ) { var ID : bool var ] : int print ID ( ) [ ID ( ) [ ( ( - ( ( 123 ) ) ) ) ] [ ( 123 ) ID ] call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ] : int print ID ( ) [ ID ( ) [ ( ( - ( ) 123 ( ) ) ) ] [ ( 123 ) ID ] call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ] : int print ID ( ) [ ID ( ) [ ( ( - ( ) 123 ( ) ) ) ] [ ( 123 ) ID ] call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ true / ID [ false * ] [ - - - - false ] [ ( 123 ) ] ] ] [ ] [ ID int ) { }",
  "func ID ( ID : [ true / ID [ [ * ] false - - - - false ] [ ( 123 ) ] ] ] [ ] [ ID int ) { }",
  "func ID ( ID : [ true / ID [ [ * ] false - - - - false ] [ ( 123 ) ] ] ] [ ] [ ID int ) { }",
  "func ID ( ) { var / : [ 123 / ID [ ID * true ID ( - ID ) ] [ 123 ] * ( ( ( ( true ) ) ) ) ] [ ] int var ID : [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) { var / : [ 123 / ID [ ID * true ID ( - ID ) ] [ 123 ] * ( ( ( ( true ) ) ) ) ] [ ] int var ID : [ ] [ ] int } func ID ( ) { }",
  "( ID func ) { var ID : int return } func ID ( ID : [ ] [ ] int , ID : bool ) { var ID : int }",
  "( ID func ) { [ ID : int return } func ID ( ID : var ] [ ] int , ID : bool ) { var ID : int }",
  "func ID ( ID : bool ) : int { ID ID : [ ] int while ( 123 / var ) { } }",
  "func ID ( ) : bool ) : int { ID ID : [ ] int while ( 123 / var ID { } }",
  "func ID ( ) : bool ) : int while ID ID : [ ] int { ( 123 / var ID { } }",
  "func ID ( ID : int , , : bool ID ID : bool ) : bool { var ID : [ ] [ ] int while true { } }",
  "func ID ( ID : int , var : bool ID ID : bool ) : bool { , ID : [ ] [ ] int while true { } }",
  "func ID ( ID : int , var : bool ID ID : bool ) : bool { , : ID [ ] [ ] int while true { } }",
  "func ID ( ) { var - : [ ID ( ) [ ID ( - ID ( - ( ID ) ) ) ] [ false ] ] bool }",
  "func ID ( ) { var - : [ ( ( ) [ ID ( - ID ID - ( ID ) ) ) ] [ false ] ] bool }",
  "func ID ( ) { var - : [ ( ( ) [ ID ( - ID ID false ( ID ) ) ) ] [ - ] ] bool }",
  "func ID ( ) { return } func ID ) ( { var ID : bool ID ( - false * ( ID ) ) = - ID }",
  "func ID ( ) { return } var ID ) ( { func ID : bool ID ( - false * ( ID ) ) = - ID }",
  "func ID ( ) { return } = ID ) ( { func ID : bool ID ( - false * ( ID ) ) var - ID }",
  "func ID ( ) : int { var ID int : return - 123 / ID ( ) [ ( - ( ID ) ) ] / 123 }",
  "func ID ( ) : int { ( ID : int return - 123 / ID ( ) [ var - ( ID ) ) ] / 123 }",
  "func ID ( ID ] bool , ID : bool ) : [ ID ( ID ( ) [ - ID ] [ ID : ) ] bool { } func ID ( ) { }",
  "func ID ( ID ] bool , ID } bool ) : [ ID ( ID ( ) [ - ID ] [ ID : ) ] bool { : func ID ( ) { }",
  "func ID ( ID ] bool , func } bool ) : [ ID ( ID ( ) [ - ID ] [ ID : ) ] bool { : ID ID ( ) { }",
  "func : ( ID : int , ID : bool , ID : bool ) { var ID ID int var ID : int } func ID ( ID : bool ) { }",
  "func : ( ID : int , ID : bool , ID : bool func { var ID ID int var ID : int } ) ID ( ID : bool ) { }",
  "func : ( ID : int , ID : bool , ID : bool ID { var func ID int var ID : int } ) ID ( ID : bool ) { }",
  "func ID ( ) : [ ] int { print false / false != false } ID ( true ) } func ID ( ) { *",
  "func ID ( ) : [ ] int { print false / true != false } ID ( false ) } func ID ( ) { *",
  "func ID ( ) : [ ] int { print * / true != false } ID ( false ) } func ID ( ) { false",
  "func ID ( ID : } , ID : [ true * - ID ( ) [ ( ( false ) ) ] ] bool , ID : [ ] int ) { int",
  ": ID ( ID : } , ID : [ true * - ID ( ) [ ( ( false ) ) ] ] bool , ID func [ ] int ) { int",
  ": ID ( ID : } , ID : [ true ( - ID ( ) [ * ( false ) ) ] ] bool , ID func [ ] int ) { int",
  "func ID ( ID : int ) : bool { var ID : bool print false + - - ) - ( ID ( ) }",
  "func ID ( ID : int ) : bool { ) ID : bool print false + - - var - ( ID ( ) }",
  "func ID ( ID : int ) : bool { ) ID : ( print false + - - var - bool ID ( ) }",
  "func ID ( ID : [ ] int [ ID : [ false - ID ( ID ( ) ) + ID ] [ ] [ ] int , ID : , ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int [ ID : [ false - ID ( ID ( ) ) + ID ] [ ] [ ] int , ID : , ] bool ) { } { ID ( ) func }",
  "func ID ( ID : [ ] int [ ID : [ false - ID ( ID } ) ) + ID ] [ ] [ ] int , ID : , ] bool ) { ( { ID ( ) func }",
  "func ID ( ) { var ID : int if false / - ] - ID [ ( 123 ) false - - - ID { } }",
  "func ID ( - { var ID : int if false / - ] - ID [ ( 123 ) false - - ) ID { } }",
  "func ID ( - { var ID : int if false / - ] - ID [ ( 123 ) false - - ) { ID } }",
  "ID ID ( ) : [ - ID ( ) [ ID [ false - func ] ] ] [ ] bool { }",
  "ID ID ( } : [ - ID ( ) [ ID [ false - func ] ] ] [ ] bool { )",
  "ID ID false } : [ - ID ( ) [ ID [ ( - func ] ] ] [ ] bool { )",
  "func ID ( ) { var - : bool if ID ( ID - true / ( false ) * - - - ( ID ) ) { } }",
  "func ID ( ) { var - : bool if ID } ID - true / ( false ) * - - - ( ID ) ) { ( }",
  "func ID ( ) { var - : bool if ID } ID - true / ( false ) * - - - ( ID ) ) ( { }",
  "func ID ID ) : bool { var ID : bool { call ID ( true * ( ( ) / ID ) } }",
  "func ID ID ) : bool ( var ID : bool { call ID { true * ( ( ) / ID ) } }",
  "func ID ID ) : bool ( var ID : bool { call ID { true * ( ( ) / ID ) } }",
  "func ID ( ) : int { while 123 + - ( true - false + ( true ) - - ( ( ID ) ) - ( * - false ) ) { } call ID ( ) }",
  "func ID ( ) : int { while - + - ( true 123 false + ( true ) - - ( ( ID ) ) - ( * - false ) ) { } call ID ( ) }",
  "func ID ( ) : bool { } func ID ( ) { var ID : [ ID * ID [ ] 123 ) ( / 123 ] bool var ID : bool }",
  "func ID ( ) : bool { } func ID ( ) { var ID : [ ID * ID [ ] 123 ) ( / 123 ] bool var ID : bool }",
  "func ] ( ) : bool { } func ID ( ) { var ID : [ ID * ID [ ID 123 ) ( / 123 ] bool var ID : bool }",
  "func ID ( ID : bool , [ : ID ( 123 * ID ( ) [ true ] [ 123 ] ) ] int ) { }",
  "} ID ( ID : bool , [ : ID ( 123 * ID ( ) [ true ] [ 123 ] ) ] int ) { func",
  "} ID ( ID : bool , [ : ID ( 123 * ID ( ) [ true ] ) 123 ] ) ] int [ { func",
  "func ID ( ) { ( ID : int print ID [ 123 / ( - true ) ] [ - ( ( - var ( ( ( - ID ) ) ) ) ) ) ] ID = true }",
  "func ID ( ) { ( ID : int print ID [ 123 / ( - true ) ] [ - ( ( - var ( ( ( - ID ) ) ) ] ) ) ) ID = true }",
  "func ID ( ID : int ) { var ID : [ ID ( true - true * 123 / ] ID ) ) ( [ ] int var ID : bool }",
  "func ID ( true : int ) { var ID : [ ID ( ID - true * 123 / ] ID ) ) ( [ ] int var ID : bool }",
  "func ID ( true : int ) { var ID : [ ID ( ID - ( * 123 / ] ID ) ) true [ ] int var ID : bool }",
  "func ID ( ) : [ ] int { var ID : ID var int : [ - - false / ( ID ) ] bool }",
  "func ID ( ) : [ ] int { var ID : ID var int } [ - - false / ( ID ) ] bool :",
  "func ID ( ) : [ ] int { var ID : ID var int } [ - : false / ( ID ) ] bool -",
  "func ID ( ) ( var ID : int if ID [ false / { ID ) ] { } }",
  "func ID ( ) ( var ID : int if { [ false / ID ID ) ] { } }",
  "func ID ( ) ( var ID : int if { [ false / ID ID ) ] { } }",
  "func ID ( ) : bool } var ID : bool var ID : [ ] bool while - ID ( ) [ ( 123 ) ] { { }",
  "func ID ( ) : bool [ var ID : bool var ID : } ] bool while - ID ( ) [ ( 123 ) ] { { }",
  "func ID ( ) : bool [ var ID : bool var ID : } ] bool while - ID ( ) [ ( ) 123 ] { { }",
  "func ID ( ) : int { var : ID bool var ID : int { var ID : bool return true * ( - ( ID ) ) } print false } func ID ( ) { }",
  "func } ( ) : int { var : ID bool var ID : int { var ID : bool return true * ( - ( ID ) ) } print false ID func ID ( ) { }",
  "func } ( ) : int { bool : ID var var ID : int { var ID : bool return true * ( - ( ID ) ) } print false ID func ID ( ) { }",
  "func ID ( ) : [ 123 * 123 < - - false } ( 123 / ID ) ] int { } func ID ( ) { *",
  "func ID ( ) : [ 123 * 123 < - - false } ( 123 / ID ) ] int { } func ID ( ) { *",
  "func ID ( ) : [ 123 * 123 < - - false } ( 123 / ID ) func int { } ] ID ( ) { *",
  "func 123 ( ID : [ ] [ ID / - ID [ ID [ ( - ID ) ] ] / ID ] int ) { } func ID ( ) { }",
  "func 123 ( ID : - ] [ ID / [ ID [ ID [ ( - ID ) ] ] / ID ] int ) { } func ID ( ) { }",
  "func 123 ( ID : - ] [ ID / [ ID [ ID [ ( - ID ) ID ] / ID ] int ) { } func ] ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { ID [ 123 * 123 or ( false or 123 ] [ - 123 ] = - ( true ) ID = ( - - ( ( ID ) ) ) } func ID - ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { ID [ 123 * 123 or ( false or 123 ] [ - 123 ] = - ( true ) ID = ( - - ( ( ID ) ) ) } func ID - ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { ID [ 123 * 123 or ( false or 123 ] [ - 123 ] = - ( true ) ID = ( - - ( ( } ) ) ) ID func ID - ) { }",
  "func ID ( ) : [ * ( ID [ 123 ( ( ( ( false ) ) ) * true ] ) ) ] int { }",
  "func ) ( ) : [ * ( ID [ 123 ( ( ( ( false ) ) ID * true ] ) ) ] int { }",
  "func ) ( ) : [ * ( ID [ 123 ( ( ( ( false ) ) ID * true ] ) ) ] int { }",
  "func ID ( ) : bool { ID ( ( ) ( ( ID ) ) - ) = - - - - ID }",
  "func ID ( ) : bool { ID ( ( ) - ( ID ) ) ( ) = - - - - ID }",
  "func ID ( ) : ID { bool ( ( ) - ( ID ) ) ( ) = - - - - ID }",
  "func ID ( ) : int { true ID : int ID = - ( var * - false * - ID ) } func ID ( ) { }",
  "func ID ( ) : int { true ID : int ID = - ( var * - false * ) ID - } func ID ( ) { }",
  "func ID ( ) : int { true ID : int ID = - ( var * - false * ) ID - ID func } ( ) { }",
  "func ID ( ID : [ ] ) ) { var ID : int var ID : [ ] int print true / ( ID int / ( - ID ) call ID ( ) }",
  "func ID ( ID : : ] ) ) { var ID [ int var ID : [ ] int print true / ( ID int / ( - ID ) call ID ( ) }",
  "] ID ( ID : : ] ) ) { var ID [ int var ID : [ func int print true / ( ID int / ( - ID ) call ID ( ) }",
  "func 123 ( ) : [ ] bool { if true * - ( ID == - ID ) / - ( true ) { } }",
  "func 123 ( ) : [ ] bool { if / * - ( ID == - ID ) true - ( true ) { } }",
  "func ID ( ) { var ID : int if false - - / ( - ID ( ) ) - ( ( - true ( ID ) ) ) { } print false }",
  "func ID ( ) { var ID : int if false - - / ( - - ( ) ) ID ( ( - true ( ID ) ) ) { } print false }",
  ") ID ( func { var ID : int if false - - / ( - - ( ) ) ID ( ( - true ( ID ) ) ) { } print false }",
  "func ID ( ID : int , ID : int ) : [ ] int { var ID : int false func ID ( ID : [ - } ] bool ) { }",
  "func ID ( ID : int , ID : int ) : [ ] int { var ID : } false func ID ( ID : [ - } ] bool ) { int",
  "func ID ( ID : int , ID : int ) : [ ID int { var ] : } false func ID ( ID : [ - } ] bool ) { int",
  "func ID ( ID : [ 123 * - - ID [ ID ( ) [ - 123 ] ] [ ID ] * } false ] int ) { - func ID ( ) { }",
  "func ID ( ID : [ 123 * - - ID [ ID - ) [ - 123 ] ] [ ID ] * } false ] int ) { ( func ID ( ) { }",
  "func ID ( ID : [ 123 * - - ID [ ID - ) [ - 123 ] ] [ ID ] * } ( ] int ) { ( func ID false ) { }",
  "] ID ( ) : [ ID ( - ( ID [ ( ( false ) ) ] ) ) ] [ func bool { }",
  "] ID ( ) : - ID ( [ ( ID [ ( ( false ) ) ] ) ) ] [ func bool { }",
  "] ID ( ] : - ID ( [ ( ID [ ( ( false ) ) ) ) ) ] [ func bool { }",
  "ID ID ( ID : int , ID : int , ID : bool ) { call func ( ) }",
  "ID ID ( ID : int , ID : int , ID : bool ) { call func ( ) }",
  "ID ID ( ID : int , ID : int , ID : bool ) { call func ( ) }",
  "func ID ( ) { var ID : bool } func ID ID ID : [ ] bool ) : bool { var ID : bool var ( : int { } { } }",
  "func ID ( ) { var ID : bool } bool ID ID ID : [ ] func ) : bool { var ID : bool var ( : int { } { } }",
  "func ID ( ) { var bool : bool } bool ID ID ID : [ ] func ) : ID { var ID : bool var ( : int { } { } }",
  "func ID ( ID : bool ) int int { { var ID : int var ID : bool { var ID : : var ID : [ false ] bool } } { } } func ID ( ) { }",
  "func ID ( ID : ) bool int int { { var ID : int var ID : bool { var ID : : var ID : [ false ] bool } } { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int ( ID : int } func ID ( ) : [ - - var 123 ) ] bool { }",
  "func ID ( ) : bool { var ID : int ( ID : int } func ID ( ) : [ - - var 123 ) ] bool { }",
  "func ID ( ) : bool ( var ID : int ( ID : int } func ID { ) : [ - - var 123 ) ] bool { }",
  "func ID ( ) : ID { var ID : int var bool : [ ID ( ) [ true * ( ID ) ] [ ID ] ] bool }",
  "func ID ( ) : ID { var ID : int var bool ID [ : ( ) [ true * ( ID ) ] [ ID ] ] bool }",
  "func ID ( ) : ID { var ID : int var bool ID ] : ( ) [ true * ( ID ) [ [ ID ] ] bool }",
  "func ID { ID : int , ID : [ ] int ) : bool { while 123 * ( true ) * true { } if 123 ( } }",
  "func ID { ID : int , ID : [ ] : ) int bool { while 123 * ( true ) * true { } if 123 ( } }",
  "func ID { ID : int , ID : [ ] true ) int bool { while 123 * ( true ) * : { } if 123 ( } }",
  "func ID ( } : int , ID : bool ) { { return ID [ ( ID ) ] } ID",
  "func ID ( } ID int , ID : bool ) { { return ID [ ( : ) ] } ID",
  "func ID ( } ID : , ID : bool ) { { return ID [ ( int ) ] } ID",
  "func ID ( ID : int , ID : int , ID : false - ID [ ( [ ) ] [ ID ] ] bool ) { }",
  "func ID ( ID : int , ID : int , ID : ] - ID [ ( [ ) false [ ID ] ] bool ) { }",
  "func ID ( ID : int , ID : ID , int : ] - ID [ ( [ ) false [ ID ] ] bool ) { }",
  "func ID ( ID : int , ID : int ) : int { var ID : bool return ( func ID ( ) : bool { var ID : bool ID = 123 call ID } ) }",
  "func ID ( ID : int , ID : int ) 123 int { var ID : bool return ( func ID ( ) : bool { var ID : bool ID = : call ID } ) }",
  "func ID ( ID : int , ID : int ) 123 : { var ID int bool return ( func ID ( ) : bool { var ID : bool ID = : call ID } ) }",
  "func ID ( ID : [ ] bool ) : false { return ( - bool and true ) }",
  "func ID ( ID : [ ] bool ) : true { return ( - bool and false ) }",
  "func ID ( ID and [ ] bool ) : true { return ( - bool : false ) }",
  "func ) ( ID { var ID : bool } func ID ( ID : bool , ID : int ) { return }",
  "func ) ( ID { var ID : bool } func ID ( ID : bool , ID : int ) { return }",
  "func ) ( ID { var ID : bool } func ID : ID : bool , ID ( int ) { return }",
  "func ID ( ID : [ 123 * - - ( false / - ) ( - 123 ) ) ) / 123 ] [ ] int ( { }",
  "func ID ( ID : [ 123 * - - ( false / - ) [ - 123 ) ) ) / 123 ] ( ] int ( { }",
  "func ID - ID : [ 123 * - - ( false / - ) [ ( 123 ) ) ) / 123 ] ( ] int ( { }",
  "func ID ( ID : bool , ID : { ) : int bool var ID : bool return }",
  "func ID ( ID } bool , ID : { ) : int bool var ID : bool return :",
  "func ID ( ID : int , ID : ( , ID : int ) : [ - ( ( int - ID ) ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : ( , ID : int ) : [ - ( ( int - ID ) ) ) ] [ ] bool ID } func { ( ) { }",
  "func ID ( ID : int , ID : ( , ID : int ) : [ - ( ( int - ID ) ) ) ] [ ] bool ID } func { ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : int { var ID : int var } : [ ( ID ) ] [ ] bool ID func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int [ : int { var ID : int var } : [ ( ID ) ] ) ] bool ID func ID ( ) { }",
  "func ID int ID : bool , ID : bool , ID : int [ : ( { var ID : int var } : [ ( ID ) ] ) ] bool ID func ID ( ) { }",
  "func ( ID ) { print ( - ( - false - ( - - ID ) ) ) ID = ( 123 ) } func ID ( ) { }",
  "func ( ID ) ( print ( - ( - false - { - - ID ) ) ) ID = ( 123 ) } func ID ( ) { }",
  "func ( ID ) false print ( - ( - ( - { - - ID ) ) ) ID = ( 123 ) } func ID ( ) { }",
  "- ID ( ) { print ID ( ID [ func ( ID ) ] ) } func ID ( ) { }",
  "- ID ( ) { print ID ( ID [ func ( ID ) ] ) } func ID ( ) { }",
  ") ID ( - { print ID ( ID [ func ( ID ) ] ) } func ID ( ) { }",
  "func ID ( ) ( call ID ( false / ( { ( ID ) ) ) / true ) }",
  "func ) ( ) ( call ID ( false / ( { ( ID ) ) ) / true ID }",
  "/ ) ( ) ( call ID ( false func ( { ( ID ) ) ) / true ID }",
  "func ID ( ) : ( { var ID : [ ] [ ] int } func ID bool ID : [ true / ID ] [ ] bool ) { }",
  "func ID ( ) : ( { var ID : [ ] [ ] int } func ID bool ID : [ true / ID ] [ ] bool ) { }",
  "func ID ( ) : ( { var ID : [ ] [ ] int } func ID bool ID : ] true / ID [ [ ] bool ) { }",
  "func ID ( ID : int ) : [ ] int { var ID : int var ID : int } ] ID ( ID : bool , ID : [ ( ID ) ] int , ID : [ func bool ) { }",
  "func ID ( ID : int ) : [ ] int { var ID : int var ID : int } ] ID ( ID : bool , ID : [ ( ID ) ] int , ID : [ func bool ) { }",
  "func ID ( ID : int ) : [ ] int { var ID : int var ID : int } ] ID ( ID : bool , ID : [ ( ID ) ] int , ID : [ func bool ) { }",
  "func ID ( ID : bool , ID : [ ] [ ID ( ( - ( - ( ( ID ) ) ) ) ) ] : , ID int [ ] int ) { }",
  "func ID ( ID : bool , ID : [ ] [ ID ( ( - ( - ( ( ID ) ) ) ) ] ) : , ID int [ ] int ) { }",
  "func ID ( ) : bool { var ID : [ ] [ ( ID - false * ID / - - ID + ( 123 : ) ] int var ID ) int }",
  "func ID ( ) : bool { [ ID : [ ] var ( ID - false * ID / - - ID + ( 123 : ) ] int var ID ) int }",
  "func ID ( ) : bool { [ ID : [ ] var ( ID - false * ID / - - ID + ( 123 : ) ] int var ID ) int }",
  "func ID ( ) : [ ] [ ( true / - ID / ID - } false - ( - - true ) ) ] int { } func ID ( ) { -",
  "func ID ( ) : [ ] [ ( true / - ID / ID - } false ] ( - - true ) ) - int { } func ID ( ) { -",
  "func ID ( ) : [ ] - ( true / - ID / ID - } false ] ( - [ true ) ) - int { } func ID ( ) { -",
  "func ID ( ) { var ID : bool var ID : bool ID = ID / false / ( - ( 123 ) ) ) = ( ( ID ) ) } func ID ( ID { }",
  "func ID ( ) { var : : bool var ID ID bool ID = ID / false / ( - ( 123 ) ) ) = ( ( ID ) ) } func ID ( ID { }",
  "func ID ( ) { var : : bool var ID ID bool ID = ID / false / ( - ( 123 ) ) ) = ( ( ID ) ) } func ID ( ID { }",
  "func ID ( ) : int { var ID : ID { var ID : int var bool : bool } print ( false ) }",
  "func ID ( ) : int { var ID : ID { var ID : int var bool : bool } print ( false ) }",
  "func ID ( ) : int { var ID : ID { var ID bool int var : : bool } print ( false ) }",
  "func ID ( ) { var ID : [ ] int } func ID ( { ) var ID : bool }",
  "func ID ( ) { var ID bool [ ] int } func ID ( { ) var ID : : }",
  ") ID ( func { var ID bool [ ] int } func ID ( { ) var ID : : }",
  "func ID ( ID : bool , ID : [ ] [ ( / - - ID [ ID ] * ID ] bool ) { } func ID 123 ) { }",
  "func ID ( ID : bool , ID : [ ] [ { / - - ID [ ID ] * ID ] bool ) ( } func ID 123 ) { }",
  "func ID ( ID : int , ID : int , ID : bool ( { call ID ( false * false / - ID ) { } } func ID ) ) { }",
  "func ID ( ID : int , ID : int , ID func bool ( { call ID ( false * false / - ID ) { } } : ID ) ) { }",
  "func ID ( ID : : , ID int int , ID func bool ( { call ID ( false * false / - ID ) { } } : ID ) ) { }",
  "func ID ( ) { ID [ - 123 and ( ( - - } ) ) ] [ ID ] = true { } true",
  "func ID ( ) { ID [ - 123 and ( ( - - } ) ) ] [ ID ] = true { } true",
  "func ID ) ( { ID [ - 123 and ( ( - - } ) ) ] [ ID ] = true { } true",
  "func ID ) ID : [ true + ID [ ID [ ID ( ( ] ] [ ID ] ] bool ) { }",
  "func ID ) ID : [ true + ID [ ID [ ID ( ( ID ] [ ] ] ] bool ) { }",
  "func ID ) ID : [ true + ID [ ] [ ID ( ( ID ID [ ] ] ] bool ) { }",
  "func ID ( ID : ID ) : [ true * true / ( true * ID [ int ] [ ID ] / - ( ID ) ) ] [ ] [ ] bool { }",
  "func ID ( ID : ID ) : [ true * true / ( true * ID [ int ] [ ID ] / - ( ID } ) ] [ ] [ ] bool { )",
  "func ID ( ID ) ID : : [ true * true / ( true * ID [ int ] [ ID ] / - ( ID } ) ] [ ] [ ] bool { )",
  "func ID ( ID - bool , ID : [ ID * ID - : 123 + 123 and - false and ( ID ) ] int ) { }",
  "func ID ( ID - bool , ID : [ ID * ID - : 123 + 123 and - false and ( { ) ] int ) ID }",
  "func ID ) ID - bool , ID : [ ID * ID - : 123 + 123 and - false and ( { ( ] int ) ID }",
  "func ID ( ID : [ - ) - ID [ ( ( ID ) - ] ] int ) { } func ID ( ) { }",
  "func ID ( int : [ - ) - ID [ ( ( ID ) - ] ] ID ) { } func ID ( ) { }",
  "func ID ( int : [ - ) - ID ] ( ( ID ) - [ ] ID ) { } func ID ( ) { }",
  "[ ID ( ID : [ ] int , ID : int , ID : int ) : [ ( false < ID ) ] func ] bool { }",
  "[ ID ( ID : [ ] : , ID : int , ID int int ) : [ ( false < ID ) ] func ] bool { }",
  ": ID ( ID : [ ] : , ID [ int , ID int int ) : [ ( false < ID ) ] func ] bool { }",
  "func ID ( ) { var ID : [ ] [ ID [ ID ( ) [ 123 ] ] [ ID ] ] bool var ID : } } func ID ( ) { bool",
  "func ID ( ) { var ID : [ ] [ ID [ ID ( ) [ 123 ] ] [ ID ] ] } var ID : } bool func ID ( ) { bool",
  "func ID ( ) { var ID : [ ] [ ID [ ID ( ) [ 123 ] ] [ ID ] ] } var ID : } bool func ID ( ) { bool",
  "func ID ( ID : bool : ) bool { while ID [ false / - 123 + 123 - true ] [ ID ] { } { } }",
  "func ID ( ID : bool : ) false { while ID [ bool / - 123 + 123 - true ] [ ID ] { } { } }",
  "func ID ( ID : bool : ) false { ID ID [ bool / - 123 + 123 - true ] [ while ] { } { } }",
  "func ID ( ) : [ 123 and ID [ true / - ID ( - ( - - ( false ) ) ) } and true ] [ ] bool { ]",
  "func ID ( true : [ 123 and ID [ ) / - ID ( - ( - - ( false ) ) ) } and true ] [ ] bool { ]",
  "123 ID ( true : [ func and ID [ ) / - ID ( - ( - - ( false ) ) ) } and true ] [ ] bool { ]",
  "func ID ( ) { var ID : [ - ( ( [ - 123 * ( - ( - - ( ID ) ) ) * ID ] ) ] int } func ID ID ) { }",
  "func ID ( ) ) var ID : [ - ( ( [ - 123 * ( - ( - - ( ID ) ) { * ID ] ) ] int } func ID ID ) { }",
  "func ID ( ID : int ) { var ID int : var ID : [ - - - ID [ ID ] [ ( ( 123 ) ) ] ] [ ] bool }",
  ": ID ( ID func int ) { var ID int : var ID : [ - - - ID [ ID ] [ ( ( 123 ) ) ] ] [ ] bool }",
  "func ID ( ID : bool ) = { var ID : bool ID ( ) [ ( ( 123 ) ) ] [ false ] = ID ID = - ( ID ) } ID { 123 } func ID ( ) { }",
  "func ID ( ID : bool ) = { var ID : bool ID ( ) [ ( ( 123 ) ) ] [ false ] = ID ID = - ( ID ) } ID } 123 } func ID ( ) { {",
  "func ID ( ID : bool ) = { var ID = bool ID ( ) [ ( ( 123 ) ) ] [ false ] = ID ID : - ( ID ) } ID } 123 } func ID ( ) { {",
  "func ID ( ) { return } func ID ( ID : bool , ID : [ ] [ ] int , ID : int ) { var ] : [ ID int var ID : bool }",
  ": ID ( ) { return } func ID ( ID func bool , ID : [ ] [ ] int , ID : int ) { var ] : [ ID int var ID : bool }",
  ": ID ( ) { return } func ID ( ID ID bool , func : [ ] [ ] int , ID : int ) { var ] : [ ID int var ID : bool }",
  "func ID ( ID : ] [ int ) : int { while ID ( 123 / ID ) { } while - - ID { } }",
  "func ID ( ID : { [ int ) : int ] while ID ( 123 / ID ) { } while - - ID { } }",
  "func { ( ID : { [ int ) : int ] while ID ( 123 / ID ) { } while - - ID ID } }",
  "{ ID ( ) : int func print - 123 * ID ( ) [ ( ID ) ] / 123 } func ID ( ) { }",
  "{ ID ( ) : int func print - 123 * ID ( ) [ ( ID func ] / 123 } ) ID ( ) { }",
  "{ ID ( ) : int func print - 123 * ID ( ) [ ( ID func ] ( 123 } ) ID / ) { }",
  "func ID ( ID : int ) : [ ] [ - - false / ) ID [ 123 ] ( / ID ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : int ) : [ ] [ - - false / ID ID [ 123 ] ( / ID ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : ) ) : [ ] [ - - false / ID ID [ 123 ] ( / ID ] [ ] [ ] int { } func ID ( int { }",
  "func ) ( ID : bool { var ID : bool call ID ( ) return }",
  "func ) ( ID : bool { } ID : bool call ID ( ) return var",
  "func ) ( ID } bool { : ID : bool call ID ( ) return var",
  "var ID ( ) { func ID : [ ID ( ID ( false / - false ) ) ] bool }",
  "var ID / ) { func ID : [ ID ( ID ( false ( - false ) ) ] bool }",
  "var ID ID ) { func / : [ ID ( ID ( false ( - false ) ) ] bool }",
  "func ID ( ID ID bool , ID : int ) { var : : [ ( ( false ) ) ] int var ID : bool } func ID ( ) { }",
  "func ID ( [ ID bool , ID : int ) { var : : ID ( ( false ) ) ] int var ID : bool } func ID ( ) { }",
  "func ID ( [ ID bool , ID : int ) { var : : ID ( ( false ) ) ] int var ID : bool } func ID ( ) { }",
  "func ID ( ID : [ ] int , ) : [ - ID [ true - ( ID ) ] ] [ ] int , ID : bool ID { } func ID ( ) { }",
  "{ ID ( ID : [ ] int , ) : [ - ID [ true - ( ID ) ] ] [ ] int , ID : bool ID { } func ID ( ) func }",
  "{ ID ( ID : [ ] int , ) [ [ - ID : true - ( ID ) ] ] [ ] int , ID : bool ID { } func ID ( ) func }",
  "func ID ( ID : bool , ID : int , ID : int ) : [ ID [ ID ( ID ( ] [ ( ) ID ) ) ] ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : [ ID [ ID ( ID ( ] [ ( ) ID ) { ] ] bool { } func ID ( ) ) }",
  "func ID ( ID : bool , ID int : , ID : int ) : [ ID [ ID ( ID ( ] [ ( ) ID ) { ] ] bool { } func ID ( ) ) }",
  "func ID ( ) { var ID : bool var ID : int ID ( ( false ID ( 123 ) / - ( - ( ( * ) ) ) ) ) = ID call ID ( ) } func ID ( ) { }",
  "func ID var ) { var ID : bool ( ID : int ID ( ( false ID ( 123 ) / - ( - ( ( * ) ) ) ) ) = ID call ID ( ) } func ID ( ) { }",
  "func ID var ) { var ID : bool ( ID : int ID ( ( false ID ( 123 ) / - ( ) ( ( * ) ) ) ) - = ID call ID ( ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int , ID : int ) { var ID ID [ ] [ - - ID ] [ ] [ ] int var ID : int } func : ( ) { }",
  "func ID ( ID : [ ] bool , ID : int , ID : int ) { var ID ID func ] [ - - ID ] [ ] [ ] int var ID : int } [ : ( ) { }",
  "func ID ( ID : [ ] bool , ID : int , ID : int ) { var ID ID func ] [ - - ID ] ) ] [ ] int var ID : int } [ : ( [ { }",
  "func ID ( ) : [ ] int { } func - ( ID : bool ) { ID ( ( ID true ) ) = ( - 123 ) ID = false }",
  "func ID ( ) : [ ] int { } func - ( ID : bool ) { ID ( ( ID true ) ) = ( - 123 ) ID false = }",
  "func ID ( ) : [ ] int { } func - ( ID : bool ) ) ID ( ( ID true { ) = ( - 123 ) ID false = }",
  "func ID ( ID : [ ] bool ) ( [ false * - ID [ ID ( - ( ID ) ) ] / - : true ) ] [ ] int { } func ID ( ) { }",
  "func ID * ID : [ ] bool ) ( [ false ( - ID [ ID ( - ( ID ) ) ] / - : true ) ] [ ] int { } func ID ( ) { }",
  "( ID * ID : [ ] bool ) ( [ false ( - ID [ ID ( - ( ID ) ) ] / - : true ) ] [ ] int { } func ID func ) { }",
  "func ID ( ) { var ID ] bool } func ID ( ) : [ : int { call ID ( false + - ID + - ( - - ( 123 ) ) ) { } }",
  "func ID ( ) { var ID ] bool } func ID ( ) : [ : int { call ID ( false + - ID + - ( - - ( 123 ) ) ) { } }",
  "func ID ( ) : var ID ] bool } func ID ( ) { [ : int { call ID ( false + - ID + - ( - - ( 123 ) ) ) { } }",
  "func ID ID ) { var ID : int { var ( : [ ] int ID ( ( - ID ) ) = ID } { } }",
  "func ID ID ) { var ID : int { var ( : [ ] int ID ( ( - ID ) ) = ID } { } }",
  "func ID ) ) { var ID : int { var ( : [ ] int ID ( ( - ID ID ) = ID } { } }",
  "func ID ( ID : bool , ID : [ true * ID [ ( ID ( ) ) { ] int , ID : bool ) ] } func ID ( ) { }",
  "func [ ( ID : bool , ID : ID true * ID [ ( ID ( ) ) { ] int , ID : bool ) ] } func ID ( ) { }",
  "func [ ( ID ID bool , ID : ID true * ID [ ( ID ( ) ) { ] int , : : bool ) ] } func ID ( ) { }",
  "func ID ( ) : int { / ID : [ ] int return - ( 123 * - 123 var true ) } func ID ( ) { }",
  "( ID func ) : int { / ID : [ ] int return - ( 123 * - 123 var true ) } func ID ( ) { }",
  "( ID func ) : int { / ID : [ ] int return - ID 123 * - 123 var true ) } func ( ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ] int , ID ) int : : int { var ID : int return }",
  "var ID ( ID : [ ] bool , ID : [ ] int , ID ) int : : int { func ID : int return }",
  "var ID ( ID : , ] bool [ ID : [ ] int , ID ) int : : int { func ID : int return }",
  "func ID ( ) : int ID var ID : int var ID : [ ID ( 123 + { ) ] int }",
  "func ID int ) : ( ID var ID : int var ID : [ ID ( 123 + { ) ] int }",
  "func ID int ) : ( ID var ID : int var ID : [ ID ( 123 + { ) ] } int",
  "func ID ( ID : [ : int ) ] int { var ID : bool while ( 123 / ( ( - ID ) ) ) { } }",
  "func ID ( ID : [ : int ) ] int { var ID : bool while ( 123 ( ( / - ID ) ) ) { } }",
  "func ID ( ID : { : int ) ] int { var ID : bool while ( 123 ( ( / - ID ) ) ) [ } }",
  "func ID ( ID : } ) : bool { var ID : int var ID : int if ID ( ) [ 123 ] { } } func ID ( ) { bool",
  "func ID ( ID : } ) : bool { var ID : int var ID : int if ID ( func [ 123 ] { } } ) ID ( ) { bool",
  "func ) ( ID : } ) : bool { var ID : int var ID : int if ID ( func [ 123 ] { } } ) ID ( ID { bool",
  "func ( ( ) : [ false / - - true - true / - ID - false ) ] int { }",
  "func ( ( ) : [ false / - - true - { / - ID - false ) ] int true }",
  "func ( ( ) : [ false ] - - true - { / - ID - false ) / int true }",
  "func ID var ID : [ ] bool ) { ( ID : [ ( - - - 123 / ( - 123 ) / - - ( ID ) ) ] bool }",
  "func ID var ID : ] [ bool ) { ( ID : [ ( - - - 123 / ( - 123 ) / - - ( ID ) ) ] bool }",
  "func ID var ID : ] [ bool ) { ( ID : [ ( - - - 123 / ( - 123 ) / - - ( ID ) ) ] bool }",
  "func ID ( ) { call ID ( ) return } bool ID ( ID : func ) { var ID : int if ( - ID ) { } print 123 }",
  "func if ( ) { call ID ( ) return } bool ID ( ID : func ) { var ID : int ID ( - ID ) { } print 123 }",
  "func if ( ) { call ID ( ) return } bool ID ( ID : func ) { var ID : int ID ( - ID ) { } print 123 }",
  "{ ID ( ) : int func print - ( true / 123 - ( false ) - - ( ( 123 ) ) ) print - 123 }",
  "{ ID ( ) : int 123 print - ( true / func - ( false ) - - ( ( 123 ) ) ) print - 123 }",
  "{ ID ( ) : int 123 print - ( true / ) - ( false ) - - ( ( 123 ) func ) print - 123 }",
  "func ID ( ID : int : ID : int , ID : int ) , [ ] int { var ID : int var ID : [ ] [ ] bool { } { } }",
  "func ID ( ID : int : ID : int , ID : int ) , [ ] int { var ID : int var ID : [ ] [ ] bool { } { } }",
  "func ID ( ID : : : ID int int , ID : int ) , [ ] int { var ID : int var ID : [ ] [ ] bool { } { } }",
  "func ID ( ) : int { call int ( ) { var ID : bool } } func ID ( ID : ID ) { call ID ( ) }",
  "func ID ( ) : int { call int bool ) { var ID : ( } } func ID ( ID : ID ) { call ID ( ) }",
  "func ID ( ) { while 123 > ( ( - true ) - 123 ) - { } ID = false } func ID ( ) { }",
  "func ID ( ) { while ( > ( ( - true ) - 123 ) - { } ID = false } func ID 123 ) { }",
  "func ID ( ) { while ( > ( ( - true ) - 123 } - { } ID = false ) func ID 123 ) { }",
  "func ID ( ID [ bool ) : [ ] bool { var ID : : ] [ ] bool return ID ( ) }",
  "func ID ( ID [ bool ) : return ] bool { var ID : : ] [ ] bool [ ID ( ) }",
  "func ID ( ID [ bool ) : ( ] bool { var ID : : ] [ ] bool [ ID return ) }",
  "[ ID ( ) : int { var ID : int print ID func true * ( ID ) ] [ ID ] }",
  "[ ID ( ) var int { : ID : int print ID func true * ( ID ) ] [ ID ] }",
  "func ID ] ) : [ ( ID [ - false < ( ( ( true ) ) ) ( [ ( ( 123 ) ) ] ) ] int { } func ID ( ) { }",
  ") ID ] ) : [ ( ID [ - false < ( ( ( true ) ) ) ( [ ( ( 123 ) func ] ) ] int { } func ID ( ) { }",
  ") ID ] ) : true ( ID [ - false < ( ( ( [ ) ) ) ( [ ( ( 123 ) func ] ) ] int { } func ID ( ) { }",
  "func ID ( ) func int { if false - false * - 123 / ( ID ) + ID { } } : ID ( ) { }",
  "func ID ( ) func int { if false } false * - 123 / ( ID ) + ID { - } : ID ( ) { }",
  "func ID ( ) func int { if false } false * - 123 / ( ID ) + ID { - } : ID ( ) { }",
  "func ID ( ID : } - ID [ ID ( ( ID ) ) ] ] bool ) { } func ID ( ) { [",
  "func ID ( ID : } - ID [ ID bool ( ID ) ) ] ] ( ) { } func ID ( ) { [",
  "func ID ( ID : } - ID ( ID bool [ ID ) ) ] ] ( ) { } func ID ( ) { [",
  "func ID ( ) : [ ] bool { while ( - ( ( - ( - ( } - ID ) ) ) ) ) ) { } (",
  "func ID ) ) : [ ] bool { while ( - ( ( - ( - ( } - ID ) ) ) ) ) ( { } (",
  "func ID ) ) : [ ] bool ) while ( - ( ( - ( - ( } - ID ) ) ) ) { ( { } (",
  "func ID ( ID { var ID : bool var ) : [ ] bool return }",
  "func ID ( ID { var ID : return var ) : [ ] bool bool }",
  "var ID ( ID { func ID : return var ) : [ ] bool bool }",
  "func ID ( ID : int , ID : bool ) { var ID : bool var ID : bool if ( ( ID ) } { } ) func ID ( ) { }",
  "func ID ( } : int , ID : bool ) { var ID : bool var ID : bool if ( ( ID ) } { ID ) func ID ( ) { }",
  "func ID ( } : int bool ID : , ) { var ID : bool var ID : bool if ( ( ID ) } { ID ) func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool { var ID : [ 123 - - ( bool ID ) ) ] [ ] [ ] [ ] bool var ID : ( } while true { } }",
  "func ID ( ] { var ID : [ ) bool { var ID : [ 123 - - ( bool ID ) ) ] [ ] [ ] [ ] bool var ID : ( } while true { } }",
  "func ID ( ] { var ID : [ ) bool { var ID : [ 123 - - ( bool ID ) : ] [ ] [ ] [ ] bool var ID ) ( } while true { } }",
  "func ID true ) : int { var ID : [ true - 123 / ( ( ( ) ) / - - true - ID ] bool } func ID ( ) { }",
  "func ID true ) : int { var ID : [ true - 123 / ( ( ( ) ) / - - true } ID ] bool } func ID ( ) { -",
  "func ID ( ID : bool ) var [ ] int { var ID : int : ID : int call ID ( true / ( ID ) ) { } }",
  "func ID ( ID : bool ) var [ ] int call var ID : int : ID : int { ID ( true / ( ID ) ) { } }",
  "func ID ( ID : bool ) var [ ] int call var ID : int : ID : ( { ID ( true / int ID ) ) { } }",
  "func ID ( ID : int , ID : int , ID : [ ] ) bool { var ID : int var ID : [ false and 123 ] [ ] bool }",
  "func ID ( ID : int , ID : int , ID : [ ] ) bool { ] ID : int var ID : [ false and 123 var [ ] bool }",
  "func ID ( ID : int , ID : int , ID : [ ] ) bool { ] ID : int [ ID : [ false and 123 var var ] bool }",
  "func ID ( ID : [ 123 - false and true / false - - ID [ - ( ) ) ] ] bool false { }",
  "func ID ( ID : ) 123 - false and true / false - - ID [ - ( ) [ ] ] bool false { }",
  "func ID ( ID : ) 123 - false and true / false - - ( [ - ID ) [ ] ] bool false { }",
  "func ID ( ID { return } func ID ( ID : [ ] bool ) { ID = ) * ( ( ID ) ) }",
  "func ID ( ID { return } func ID ( ID : [ ] bool ) * ID = ) { ( ( ID ) ) }",
  "func ID ( ID ( return } func ID ( ID : [ ] bool ) * ID = ) { ( { ID ) ) }",
  "} ID ( ID : bool ) : [ ] bool { var ID : int ID [ ( false ) ] = ID while 123 { } func func ID ( ) { }",
  "} ID ( ID : bool ) : [ ] bool { var ID : int ID ( ( false ) ] = ID while 123 { } func func ID [ ) { }",
  "} ID ( ID : bool ) } [ ] bool { var ID : int ID ( ( false ) ] = ID while 123 { } func func ID [ ) { :",
  "func ID ( ID : int ) { var ID : [ ] int var ID and [ ID ( ) * true : ( ID ) and - ( ID ) ] int }",
  "func ID ( ID : int ) { var ID : [ ] int var ID and [ ID ( ) * true : and ID ) ( - ( ID ) ] int }",
  "func ID ( ID : int ) [ var ID : { ] int var ID and [ ID ( ) * true : and ID ) ( - ( ID ) ] int }",
  "func ID ( ID : [ - ( ) true / ( ID / false / ID - / ID ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ - ( ) true / ( ID / false / ] - / ID ) ] [ ID [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ - ( ) true / ( ID / false / ] ] / ID ) ] [ ID [ - int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool return ID ( ) [ ( - { - false ) ) ] [ ID ] } func ID ( ) ( }",
  "func ID ( ) : int { var ID : bool return ID ( ) ( ( - { - false ) ) ] [ ID ] } func ID ( ) [ }",
  "func ID ( ) : int { var ID : bool } ID ( ) ( ( - { - false ) ) ] [ ID ] } func ID ( ) [ return",
  "func ID ( ID : bool - ID : int ) { var ID : [ true - false * - ID ( ) / false , true ] int var ID : int }",
  "func ID ( ID : bool - - : int ) { var ID : [ true ID false * - ID ( ) / false , true ] int var ID : int }",
  "func ID ( ID : bool - - : int ) { var ID : [ true ID false * - ID ( ) / ID , true ] int var false : int }",
  "func ID ( ) : int { var ID : bool return ID ( ) [ - - false * - true / ( ] [ false - ( ( false ) ) ) ] } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool return ID ( ) [ - - false * - true / ( ] [ false - ( ( false ) ) ) ] } func ID ( ) { }",
  "func ID ( ID : int , ID : int * : bool { var ID : [ ] [ ] [ 123 / ID ) - ID ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : int * : { { var ID : [ ] [ ] [ 123 / ID ) - ID ] int } func ID ( ) bool }",
  "func ID ( ID : int , ID : int * : { { var ID : [ ] [ ] [ 123 } ID ) - ID ] int / func ID ( ) bool }",
  "func ID ( ID : bool , ID : int , ID : [ - 123 * ID or true / true } - ID ] bool ) { } func ID ( ) { or",
  "func ID ( ID : bool , ID : int , ID : [ } 123 * ID or true / true } - ID ] bool ) { - func ID ( ) { or",
  "func ID ( ID : bool , ID : int , ID : [ } 123 * ID or true / or } - ID ] bool ) { - func ID ( ) { true",
  "func ID ( ID : [ ] [ ID ( false / - ID * ID [ ID ] ) ] int { ) }",
  "func ID ( ( : bool { call ID ( ) { var ID : int { { { ID = 123 } if true { } } print ) ID ) } } }",
  "func ID ( ( : bool { call ID ( ) { var ID : int { { { ID = 123 } if true { } } print ) ID ) } } }",
  "func ID ( ( : bool { call { ( ) { var ID : int { { { ID = 123 } if true ID } } print ) ID ) } } }",
  "func ] ( ID : [ - true * ID [ ( ID ( - ( ( true ) ) ) ) ] [ 123 ] / ( ID ) ] [ ID [ ] [ ] int ) { } func ID ( ) { }",
  "func ] ( ID : [ - true * ID [ ( ID ( - ( ( ) ) ) ) ) ] [ 123 ] / ( ID true ] [ ID [ ] [ ] int ) { } func ID ( ) { }",
  "func ] ( ID : ] - true * ID [ ( ID ( - ( ( ) ) ) ) ) ] [ 123 ] / ( ID true ] [ ID [ ] [ [ int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool print 123 > ( - } ID ( ) ) ) { ( }",
  "func ID ( : { var ID ) bool print 123 > ( - } ID ( ) ) ) { ( }",
  "= ID ( ) : bool { { } ID func ID ( 123 + - ID - ( - true ) ) } func ID ( ) { }",
  "= ID ( ) : bool { { } true func ID ( 123 + - ID - ( - ID ) ) } func ID ( ) { }",
  "{ ID ( ) : bool { { } true func ID ( 123 + - ID - ( - ID ) ) } func ID ( ) = }",
  "func ID ( ) : [ ID [ - ( ( - ( - ( ID ) ) ) ) ] [ ] ] int { }",
  "func ID ( ) : [ ID [ ( ( - - ( - ( ID ) ) ) ) ] [ ] ] int { }",
  "func ID ] ) : [ ID [ ( ( - - ( - ( ID ) ) ) ) ( [ ] ] int { }",
  "func ID ( ID : int , ID : bool ) : int { var ID : bool var ID : true - ID [ - - [ ] [ false ] ] [ ] int }",
  "func ID ( ID : int , ID : bool ) : ID { var int : bool var ID : true - ID [ - - [ ] [ false ] ] [ ] int }",
  "func ID ( ID : int , ID : bool ) : ID { var int : bool var ID : true - ] [ - - [ ID [ false ] ] [ ] int }",
  "func ID ( ) { var ID : int ( - true + ( false - ID ( ) + - ID ) - ID if print 123 ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int ( + true + ( false - ID ( ) - - ID ) - ID if print 123 ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID ID [ ] bool ) { var ID : [ ( false > : ) ] [ ] bool }",
  "func ID ( [ : bool , ID ID [ ] bool ) { var ID : ID ( false > : ) ] [ ] bool }",
  "func ID ( [ : : , ID ID [ ] bool ) { var ID : ID ( false > bool ) ] [ ] bool }",
  "func ID ( ) : int { var ID ] bool } func ID ( ID : [ : int , ID : int ) : [ ( true ) ] int { }",
  "func ID ( ) : int { var ID ] ] } func ID ( ID : [ : int , ID : int ) : [ ( true ) bool int { }",
  "func ID ( ) : int { var ID ] ] } func ID ( ID : [ : int , ID : int ) : [ { true ) bool int ( }",
  "func ID ( ID : int ) var { ID : bool var ID : [ ] int return ( ID [ ID ] ) }",
  "func ID ( ID : int bool var { ID : ) var ID : [ ] int return ( ID [ ID ] ) }",
  "func ID ( ID : int bool var { ID : ) ID var : [ ] int return ( ID [ ID ] ) }",
  "ID ID ( func : bool , ID : bool ) { var ID : bool return ( ( ID ) ) } func ID ( ) { }",
  "ID ID ( func : bool , ID : bool ) { var ID : bool return ( ( ID ) ) } func ID ( ) { }",
  "ID ID ( func : bool , ID : bool ) { ID ID : bool return ( ( ID ) ) } func var ( ) { }",
  "func ID ( ID : bool ) : int { ID ( ) [ - ID * ID ( ( ( ID ) } ) / false ] = ( ID ) print ID )",
  "func ID ( ID : bool ) : int { ID ( ( [ - ID * ID ( ( ( ID ) } ) / false ] = ) ID ) print ID )",
  "func ID ( ID : ( ) : int { ID ( ( [ - ID * ID bool ( ( ID ) } ) / false ] = ) ID ) print ID )",
  "func ID ( true : bool , ID : bool ) : [ ] bool { var ID : int var ID : int { var ID : bool print 123 if ( ID ) { } } while false { } }",
  "func ID ( true : bool , ID : bool ) : [ var bool { var ID : int ] ID : int { var ID : bool print 123 if ( ID ) { } } while false { } }",
  "func ID ( ID : [ * ID <= ID * false ( ( true ) ) ] [ ] [ ] int ) { } func ID ( ) { }",
  ") ID ( ID : [ * ID <= ID * false ( ( true func ) ] [ ] [ ] int ) { } func ID ( ) { }",
  ") int ( ID : [ * ID <= ID * false ( ( true func ) ] [ ] [ ] ID ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : int { var ID : bool var } : bool return ID",
  "func ID ( ID : bool , ID : bool ) : int { var ID ID bool var } : bool return :",
  "func ID ( ID - [ ] [ ] int ) { while - - ID ( ) [ : - ID ] [ true ] { } { } }",
  "func ID ( ID - [ ] [ ] int ) { : - - ID ( ) [ while - ID ] [ true ] { } { } }",
  "func ID ( ID : [ ID [ ( - - false ] - ID ) ] * bool ) { } func ID ( ) { }",
  ") ID ( ID : [ ID [ ( - - false ] - ID ) ] * bool func { } func ID ( ) { }",
  ") ID ( ID : [ ID [ ( - - func ] - ID ) ] * bool false { } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID } int return : func ID ( ID : int ) { var ID : int var ID : bool }",
  "func ID ( ID : int , ID : int ) { var ID } int return : func ID ( ID : int ) { var ID : int var ID : bool }",
  "func ID ( ID : int , int : int ) { var ID } int return : func ID ( ID : int ) { var ID : ID var ID : bool }",
  "func ID ( ID : bool ) { if - ID [ true * - ( ID ) { [ ID ] ] } } func ID ( ) { }",
  "func ID ( ID : { ) bool if - ID [ true * - ( ID ) { [ ID ] ] } } func ID ( ) { }",
  "- ID ( ID : { ) bool if - ID [ true * func ( ID ) { [ ID ] ] } } func ID ( ) { }",
  "- ID ( ) { var ID : int print ID ( - - ( func ( ID ) ) ) } func ID ( ) { }",
  "- ID func ) { var ID : int print ID ( - - ( ( ( ID ) ) ) } func ID ( ) { }",
  "func ID func ) { var ID : int print ID ( - - ( ( ( ID ) ) ) } - ID ( ) { }",
  "func ID ( ID : bool , ID : [ - ID ( ) [ - ) ID ( ) / false ] [ ID ] ] int - { } func ID ( ) { }",
  "func ID ( ID : bool , / : [ - ID ( ) [ - ) ID ( ) ID false ] [ ID ] ] int - { } func ID ( ) { }",
  "func ID ) ID : bool , / : [ - ID ( ) [ - ( ID ( ) ID false ] [ ID ] ] int - { } func ID ( ) { }",
  "func ID ( ID : int false ID : bool ) : bool { if , / 123 and ( ID ) and ID { } while ( false ) { } } func ID ( ) { }",
  "func { ( ID : int false ID : bool ) : bool ID if , / 123 and ( ID ) and ID { } while ( false ) { } } func ID ( ) { }",
  "func ID ( ) : int print var ID : int } func ID ( ) { { ( - false ) }",
  "func ID ( ) : int print var int : ID } func ID ( ) { { ( - false ) }",
  "[ ID ( ID : [ ( 123 / ID func ID ( ) [ - true ] ] ) ] int ) { }",
  "[ ID ( ID : [ func 123 / ID ( ID ( ) [ - true ] ] ) ] int ) { }",
  "[ ( ( ID : [ func 123 / ID ID ID ( ) [ - true ] ] ) ] int ) { }",
  "func ID ( ID : ) ] int , ID : [ ( 123 * - - - ( true ) * ( false [ ) ] int , ID : bool ) { }",
  "func ID ( ID : ) ] int , ID : [ ( 123 } - - - ( true ) * ( false [ ) ] int , ID : bool ) { *",
  "func ID ( ID : ) 123 int , ID : [ ( ] } - - - ( true ) * ( false [ ) ] int , ID : bool ) { *",
  "func ID ( ) { var ID : [ ] [ false / 123 - false 123 false * ID + / ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ID / 123 - false 123 false * false + / ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ID / 123 - false 123 false bool false + / ] [ ] * } func ID ( ) { }",
  "func ID ( ) { var ID : [ false * - - ( ID ( ) [ - ( ( ID ) ) ] [ ID ] ) * - - - [ - 123 ] [ ] bool var ID : - ] [ ] bool }",
  "func ID ( ) { var ID : [ false * - - ( ID ( ) [ - ( ] ID ) ) ] [ ID ] ) * - - - [ - 123 ] [ ] bool var ID : - ] [ ( bool }",
  "func ID ( ID : bool , ID : [ false / - - - true [ true / ID ( ) + ( false ) ] [ ] - ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : + false / - - - true [ true / ID ( ) [ ( false ) ] [ ] - ] bool , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : + { / - - - true [ true / ID ( ) [ ( false ) ] [ ] - ] bool , ID : int ) { } func ID ( ) false }",
  "func - ( ) { while ID ID [ - true * ( ID ) ] { } while ID { } } func ID ( ) { }",
  "func - ( ) { while ID ) [ - true * ( ID ID ] { } while ID { } } func ID ( ) { }",
  "] - ( ) { while ID ) [ - true * ( ID ID func { } while ID { } } func ID ( ) { }",
  "ID func ( ) { var ID : int var ID : int call ID ( ) return false * 123 != ( ID ) }",
  "ID func ( ) { var ID : int var 123 : int call ID ( ) return false * ID != ( ID ) }",
  "ID func ( ) { var ID : != var 123 : int call ID ( ) return false * ID int ( ID ) }",
  "func ID ( ) { var ID : int var ID : [ bool [ ] ] }",
  "func ID ( ) { var ID : int var ID : [ bool [ ] ] }",
  "func ID ( ) { var ID var int : ID : [ bool [ ] ] }",
  "func ID ( ) { while ( - ID / false - - ID - ) * false / ID - ( ID ) { } { } } func ID ( ) { }",
  "func ID ( ) { while ( - ID / false - - ID - ) * false / ID - ( ( ) { } { } } func ID ID ) { }",
  "( ID ( ) { while func - ID / false - - ID - ) * false / ID - ( ( ) { } { } } func ID ID ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) { var ID } [ ( ( ID ) ) ] int } func ID ( ) { :",
  "func ID ( ID : ] , ID : [ ] bool ) { var ID } [ ( ( ID ) ) bool int } func ID ( ) { :",
  "func ID ( ID : ] , ID : [ ] bool ) { var ID bool [ ( ( ID ) ) } int } func ID ( ) { :",
  "func ID ( ID : [ ] : , ID bool bool , ID : bool ) : int { var ID : int }",
  "func ID ( ID : [ ] : , ID bool bool { ID : bool ) : int , var ID : int }",
  "func ID ( ID : [ ] : int ID bool bool { ID : bool ) : , , var ID : int }",
  "func ID ( ) : bool { call ID ( ID and - false * ( ( - 123 ) and ID ) call ID - ) } func ID ( ) { }",
  "func ID ( ) : bool { ) ID ( ID and - false * ( ( - 123 ) and ID ) call ID - call } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : [ ( } ID ( ) [ ID ] [ ( - ( - 123 ) ) ] ) ) ] int { (",
  "func ID ( ID : int , ID : int ) ] [ ( } ID ( ) [ ID : [ ( - ( - 123 ) ) ] ) ) ] int { (",
  "func ID ( ID : int , ID : int ) ] [ ( } ID ( ) [ ID : [ ( - ( - ) 123 ) ] ) ) ] int { (",
  "func ID ( ID : int : ID : [ ] bool , ID : [ ] bool ) : [ ] int { var ID , int { return } }",
  "func ID ( ID : [ : ID : [ ] bool , ID : [ ] bool ) : int ] int { var ID , int { return } }",
  "func ID ( ID : [ : ID : [ ] bool , ID : [ ] bool ) : int ] int { var ID , int { return } }",
  "func ID ( ) { var ID : int var ID : int print ID ( ) } ( ID ) ] } func ID ( ) { [",
  "func ID ( ) { var ID : int var ID : int print ID ( ) } ( ID ) ] } func ) ( ID { [",
  "func ID ( ) { var ID : int var } : int print ID ( ) ID ( ID ) ] } func ) ( ID { [",
  "func ID ( ) } var ID : int if ( true / ( ( - 123 ) ) * ID ) { { while true { } } func ID ( ) { }",
  "func { ( ) } var ID : int if ( true / ( ( - 123 ) ) * ID ) { { while true ID } } func ID ( ) { }",
  "func { ( { } var ID : int if ( true / ( ( - 123 ) ) * ID ) { { while true ID } } func ID ( ) ) }",
  "func ID ( ID : bool , ID : int ) { { var ID : int var ID : [ ] bool return func } } ID ID ( ) { }",
  "func ID ( var : bool , ID : int ) { { var ID : int ID ID : [ ] bool return func } } ID ID ( ) { }",
  "func ID ( var : bool , ID : int ) { { var int : ID ID ID : [ ] bool return func } } ID ID ( ) { }",
  "func ID ( ID : int ) : } { var ID : int var ID : bool while ID ( ) - ID + - true { } } func ID ( ) { int",
  "func ID ( ID : int ) : } { var ID : int var ID : bool while ID ( ) - ID + - true { } } ( ID func ) { int",
  "func ID ( ID : ID ) : } { var ID : int var ID : bool while ID ( ) - ID + - true { } } ( int func ) { int",
  "func ID ( ID : [ - ( true } true + true * ( - - 123 ) / - ID - false ) ] [ ] bool ) { } func ID ( ) { *",
  "func ID ( ID : [ - ( true } true + true - ( * - 123 ) / - ID - false ) ] [ ] bool ) { } func ID ( ) { *",
  "func ID ( ID : ( - [ true } true + true - ( * - 123 ) / - ID - false ) ] [ ] bool ) { } func ID ( ) { *",
  "func ID ( ) : bool { var ID : [ - ID * ( ( ID ) ) * - 123 ] int { func ID ( ) } }",
  "func ( ID ) : bool { var ID : [ - ID * ( ( ID ) ) * - 123 ] int { func ID ( ) } }",
  "func ( ID ) : bool { var ID : [ - ID ( ( ( ID ) ) * - 123 ] int { func ID * ) } }",
  "func ID ( ID ID [ ] [ - 123 / - - ( true * - ( ID ) ) ] int ) { } func : ( ) { }",
  "func ID ( ID ID [ ( [ - 123 / - - ( true * - ] ID ) ) ] int ) { } func : ( ) { }",
  "func ID ( ID ID [ ( [ - ] / - - ( true * - 123 ID ) ) ] int ) { } func : ( ) { }",
  "func ID ( ID : [ ID - ( true true ( * / 123 / ID ) / ID ) + - - 123 ] [ ] [ ] [ ] bool ) { }",
  "func - ( ID : [ ID ID ( true true ( * / 123 / ID ) / ID ) + - - 123 ] [ ] [ ] [ ] bool ) { }",
  "{ - ( ID : [ ID ID ( true true ( * / 123 / ID ) / ID ) + - - 123 ] [ ] [ ] [ ] bool ) func }",
  "func ID ( ID - [ ] bool , ID : [ : ( ( ID ( ) ) ) ] [ ] int , ID : int ) { } func ID ( ) { }",
  "func , ( ID - [ ] bool ID ID : [ : ( ( ID ( ) ) ) ] [ ] int , ID : int ) { } func ID ( ) { }",
  "func , ( ID - [ ] bool ) ID : [ : ( ( ID ( ) ) ) ] [ ] int , ID : int ID { } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : [ ] int } ID ( ( ID ( ) ) ) call",
  "func ID ( ID : bool ) : int { var ID : ( ] int } ID ( ( ID [ ) ) ) call",
  "func ID ( ID : bool ) : int { var ID : ( ( int } ID ] ( ID [ ) ) ) call",
  "func ID ( ) { var ID : int print ( ( 123 / ( ( ( - ( ) true ) ( ) ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ) ( var ID : int print ( ( 123 / ( ( ( - { ) true ) ( ) ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : ) bool { var ID : [ ( ID ( ) [ - ( false ) ] ) ] int } func ID ( ) { }",
  "func ID ( ID : ) bool { var ID : [ ( ID ( ) ) - ( false [ ] ) ] int } func ID ( ) { }",
  "func ID ( ID : ) bool { var ID : [ ( ID ( ) ) - ( false [ ] ) ] int } func ID ( ) { }",
  "func ID ( ) : true - - ( ( ( ( [ ) ) ) ) ] int { }",
  "func ID ( ) : true - - ( ( ( ( [ ) ) ) ) ] int { }",
  "func ID ( ) : - true - ( ( ( ( [ ) ) ) ) ] int { }",
  "func ID ( ) : int { return ( - true + - ( ( ( ( - ( ( ( ID ) ) ) ) ) ) ) ) ( - - - - ( ID ) ) ) } func ID ( + { }",
  "func ID ( ) : int { return ( - true + - ( ( ( ( - ) ( ( ID ) ) ( ) ) ) ) ) ( - - - - ( ID ) ) ) } func ID ( + { }",
  "func ID ( ) : int { return ( ID true + - ( ( ( ( - ) ( ( - ) ) ( ) ) ) ) ) ( - - - - ( ID ) ) ) } func ID ( + { }",
  "func ID ( ) { / ID ( 123 call ( ( false * - 123 ) ) / ID ) }",
  "func ID ( ) { / ( ( 123 call ( ID false * - 123 ) ) / ID ) }",
  "func ID ( / { ) ( ( 123 call ( ID false * - 123 ) ) / ID ) }",
  "func ID ( ID bool [ ] int , ID : : ) { var ID : int var ID : int print false + ID { } } func ID ( ) { }",
  "func ID ( ID bool [ ] int , ID ID : ) { var : : int var ID : int print false + ID { } } func ID ( ) { }",
  "func ID ( ID bool [ ] int , ID ID : ) { var : : int var ID : int print false + ID { } } func ID ( ) { }",
  "func ID ( ) : bool { if ID [ false == true * ) ( ID / - 123 ] { } }",
  "func ID ( ( : bool { if ID [ false == true * ) ) ID / - 123 ] { } }",
  "func ID ( ( : bool { if * [ false == true ID ) ) ID / - 123 ] { } }",
  "func ( ID ID : bool , ID : [ ] bool , ID : bool ) { if true / false / true + ( - ( 123 ) ) { } print ( true ) }",
  "func ( ID ID : bool , ID : ( ] bool , ID : bool ) { if true / false / true + [ - ( 123 ) ) { } print ( true ) }",
  "func ( ID ID : bool , ID : ( ] bool , ID : bool ) { if / / false true true + [ - ( 123 ) ) { } print ( true ) }",
  "func ID ( ) : [ ] int { var ID : bool } ] ID ( ID : bool , ID : [ ] [ ( - - ( ( ID ) ) ) ] [ ] [ ] [ func [ ] bool , ID : [ ] bool ) { }",
  "func ID ( ) : [ ] int { var ID : bool } ] ID ( ID : bool , ID : [ - [ ( - ] ( ( ID ) ) ) ] [ ] [ ] [ func [ ] bool , ID : [ ] bool ) { }",
  "func ID ( ID : bool , ID : ( ID [ ) [ - ID - ID ( ) + ID ] [ ID ] ] int , ID : bool ) { }",
  "func ) ( ID : bool , ID : ( ID [ ) [ - ID - ID ( ID + ID ] [ ID ] ] int , ID : bool ) { }",
  "func ) ( ID : bool , ID : ( ID [ ) [ - ID - ID ( ID + ID ] [ ID ] ] int , ID : bool ) { }",
  "func ID ( ) { return } func ID ( ) true var ID : bool ID = true * - ( { ) * ( ID ) { } }",
  "func ID ( ) { return } func ID ( ) true var } : bool ID = true * - ( { ) * ( ID ) { ID }",
  "func ID ( ) { return } func ID ( ) true var } : bool ID = true * - { ( ) * ( ID ) { ID }",
  "func int ( ) : ID { var ID : int if ID ( ) [ ( 123 ) ] [ true ] { } ID = false } func ID ( ) { }",
  "func int ( ) : = { var ID : int if ID ( ) [ ( 123 ) ] [ true ] { } ID ID false } func ID ( ) { }",
  "func int ( ) : = { var ID : int if ID ( ) [ ] 123 ) ( [ true ] { } ID ID false } func ID ( ) { }",
  "func ID ( ID : int ) : [ - ID [ ( ( - ID ) ) ] [ false ] ] } { int",
  "func ID ( ID : int ) : [ - ID [ ( ] - ID ) ) ] [ false ( ] } { int",
  "func ID ( ID : int ) } [ - ID [ ( ] - ID ) ) ] [ false ( ] : { int",
  "int ID ( ) : func { var ID : int var ID : [ ] int return }",
  "int ID ( ) : func { var : : int var ID ID [ ] int return }",
  "int ID ( ) : func { var : : int var return ID [ ] int ID }",
  "func ID ( ] : [ ) [ ] bool { var ID : [ ID and - - ID and ( ( ( ( - - ID ) ) ) ) ] int var ID : [ ] bool }",
  "func ID ( ] : [ ) [ ] bool { var ID : [ ID and - - ID and ( ( ( ( - - ID ) ) ) var ] int ) ID : [ ] bool }",
  "func ID ( ] : - ) [ ] bool { var ID : [ ID and - - ID and ( ( ( ( [ - ID ) ) ) var ] int ) ID : [ ] bool }",
  "func ID ( ) { if - - ID * true + 123 / 123 + 123 * - false { } ) ID ( call } func ID ( ) { }",
  "func ID ( ) { if - - ID ) true + 123 / 123 + 123 * - false { } * ID ( call } func ID ( ) { }",
  "func ID ( ) { if - - ID ) true + { / 123 + 123 * - false 123 } * ID ( call } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : [ false + ( true * ] ( ID ) ) / ID ) ( [ ] [ ] bool , ID : bool ) { } func ID ( ) { }",
  "ID ID ( ID : [ ] [ ] bool , ID : [ false + ( true * ] ( ID ) ) / ID ) ( [ ] [ ] bool , func : bool ) { } func ID ( ) { }",
  "ID ID ( ID : [ ] [ ] bool , ID : [ false + ( ID * ] ( ID ) ) / true ) ( [ ] [ ] bool , func : bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ( true / ( true >= true + bool ) ) ] false ) { } func ID ( ) { }",
  "func ID ( ID : [ ( true / ( + >= true true bool ) ) ] false ) { } func ID ( ) { }",
  "func ID ( ID : [ ( true / ( + >= true true bool ) } ] false ) { ) func ID ( ) { }",
  "func [ ( ) { var ID : int if - - 123 / ID ID ( ID ) ] / false { } }",
  "func [ ) ( { var ID : int if - - 123 / ID ID ( ID ) ] / false { } }",
  "func ID ( ) { var ID : [ - ID [ true * true != ( - 123 ) ] [ - - ID ] ] [ [ ] ] int }",
  "func ID ( ) { var ID : [ - ID [ true * true != ( - 123 ) ] [ - ID - ] ] [ [ ] ] int }",
  "func ID ( ) { var ID : int ID [ false / false - ( ID ) ] = false } func ID ( ) } {",
  "func ID ( ) { var ID : int ID [ false / false - ( ID ) ] = false } func } ( ) ID {",
  "func ID ( = { var ID : int ID [ false / false - ( ID ) ] ) false } func } ( ) ID {",
  "func ID ( ) : int { while 123 ) ID / ( ( ID ) / { } call ID ( ) }",
  "func ID ( ) : int { ( 123 ) ID / ( while ID ) / { } call ID ( ) }",
  "func ID ( ) : int { ( 123 / ID / ( while ID ) ) { } call ID ( ) }",
  "func ID ( ) bool int { } func ID ( ID : int , ID : int ) : bool { var ID : : var ID : [ - - ( ID ) ] int }",
  "func ID ( ) bool int { } func ID ( ID : int , ID : int ) : bool { var ID [ : var ID : : - - ( ID ) ] int }",
  "func ID int ) bool ( { } func ID ( ID : int , ID : int ) : bool { var ID [ : var ID : : - - ( ID ) ] int }",
  "func ID ( ID : } ) { return } func ID ( ID : [ ] [ ID ( ) / ID ] bool ) { bool",
  "func ID ( ID : } ID { return } func ID ( ) : [ ] [ ID ( ) / ID ] bool ) { bool",
  "func ID ( ID : bool ID { return } func ID ( ) : [ ] [ ID ( ) / ID ] } ) { bool",
  "func ID ( ) { var ID : bool var ID : bool { var ID : [ ] [ true and ( ID ) and ID ] bool { call ID ( ) } func ID ( ) } }",
  "func ID ( ) { var ID : bool var ID : bool { var ID : [ ] [ true and ( ID ) and ID ] bool { call ID ( ) } func ID ( ) } }",
  "func ID ( ) { var ID : bool ] ID : bool { var ID : [ var [ true and ( ID ) and ID ] bool { call ID ( ) } func ID ( ) } }",
  "func ID ( ID : bool ) : int false print - ID ( false / { - false ) } func ID ( ) { }",
  "func ID ( ID : bool ) : int false print - false ( false / { - ID ) } func ID ( ) { }",
  "func ID ( ID : bool ) : ) false print - false ( false / { - ID ) } func ID ( int { }",
  "func ID ( ID : int { var ID : bool print ID ( ) [ true / ( ( ID ) ) ] [ ( ( ) ) ) ] }",
  "func ID ( ID : int { var ID : bool print ID ( ) [ true / ( ( ID ) ) ] [ ( ( ) ) ) ] }",
  "func ID ( ID : int ID var { : bool print ID ( ) [ true / ( ( ID ) ) ] [ ( ( ) ) ) ] }",
  "func ID ( ) { var ID : int var ID : [ ID [ [ ( ID ) ] ] - ] [ ] int } func ID ( ) { }",
  "func ID ( ID { var ID : int var ID : [ ) [ [ ( ID ) ] ] - ] [ ] int } func ID ( ) { }",
  "func ID ( ID { var ID : int var ID : [ ) [ [ ( ID ] ] ) - ] [ ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : ( var ID : bool if ID ( ) [ ( ( - int ( - ID ) ) ) ) ] [ false ] { } if true { } } func ID ( ) { }",
  "func ID ( ) } int { var ID : ( var ID : bool if ID ( ) [ ( ( - int ( - ID ) ) ) ) ] [ false ] { } if true { : } func ID ( ) { }",
  "func ID ( ) } int { var ID : ( var ID : bool if ID ( ) [ ( ( - int ) - ID ) ) ( ) ] [ false ] { } if true { : } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ID and ( ID [ bool ] ) ] true }",
  "func ID ( ( { var ID : bool var ID : [ ID and ) ID [ bool ] ) ] true }",
  "func ID ( ( ID var ID : bool var { : [ ID and ) ID [ bool ] ) ] true }",
  "func ID ( ) : [ - ( ( ( ID [ ID ] ) ) bool ] ) { } func ID ( ) { }",
  "func ID ( ) ID [ - ( ( ( ID [ : ] ) ) bool ] ) { } func ID ( ) { }",
  "func ID ( ) ID [ - ( ( ( ID [ : bool ) ) ] ] ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID ( 123 * ( - - ) / false ) ] [ ] int ) { }",
  "func ID ( ID int int , ID : [ ID ( 123 * ( - - ) / false ) ] [ ] : ) { }",
  "func ID ( ID int int , ID : [ ID ( 123 / ( - - ) * false ) ] [ ] : ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { call ID ( ) { } ID : [ ] int while ID { } var } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { call ID ( ) { } [ : ID ] int while ID { } var } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { call ID ( ) { } [ : ID while int ] ID { } var } func ID ( ) { }",
  "func ID ( ) { ID = true * 123 - false + ID ( ) [ ID ] [ true ) if 123 { } } func ID ( ] { }",
  "func ID ( ) { ID = true * 123 - false + ID ( ) [ ID ] [ true ) if 123 { } } func ID ( ] { }",
  "func ID ( ) { ID = true * 123 } false + ID ( ) [ ID ] [ true ) if 123 { - } func ID ( ] { }",
  "func ID ( ID : [ } [ ] int , ID : [ ] [ ] int , ID : bool ) { var ID : bool var ID : bool ] func ID ( ) { }",
  "func ID ( ID : [ } [ ] int , ID : [ ] [ ] int , ) : bool ) { var ID : bool var ID : bool ] func ID ( ID { }",
  "func ID ( ID : [ } [ ] int ID ID : [ ] [ ] int , ) : bool ) { var ID : bool var , : bool ] func ID ( ID { }",
  "func ID ( ) : int { var ID : [ call int var ID : bool ] ID ( ID [ ID ] ) } func ID ( ) { }",
  "func ID ( ) : int } var ID : [ call int var ID : bool ] ID ( ID [ ID ] ) { func ID ( ) { }",
  "func ID ( ) : int } var ID : } call int var ID : bool ] ID ( ID [ ID ] ) { func ID ( ) { [",
  "func ID ( ) : ID ( ( ( [ + ( - 123 ) - true ) ) ) ] bool { }",
  "func ID ( ) : ID ( ( ( [ + ( - 123 ] - true ) ) ) ) bool { }",
  "func ID ( ID : int , ID : bool , } : bool ) : [ 123 / ID [ - false ] [ false ] ] bool { ID",
  "func ID ( ID : int , ID : bool , } : bool ) : [ 123 / ID [ { false ] [ false ] ] bool - ID",
  "func ID ( ID : int , ID : bool , } : ] ) : [ 123 / ID [ { false ] [ false bool ] bool - ID",
  "func ID ( var { var ID : bool ) ID : int while ID ( ) [ ID ( ID ) ] { } }",
  "func ID ( var ) var ID : bool { ID : int while ID ( ) [ ID ( ID ) ] { } }",
  "func ID ( var ) var ID : { { ID : int while ID ( ) [ ID ( ID ) ] bool } }",
  "func ID ( ID : int , ID } int , ID : [ ] bool ) { :",
  "func ID ( ID , int , ID } int : ID : [ ] bool ) { :",
  "func ID { ID , int , ID } int : ID : [ ] bool ) ( :",
  "func ID ( ID : int , ID : [ true * ID [ - - ( 123 ) ] / ID ] int ) { } func ID } ) { (",
  "func ID ( ID : int , ID func [ true * ID [ - - ( 123 ) ] / ID ] int ) { } : ID } ) { (",
  "func { ( ) : bool ID while - ID [ - ID [ ( ID ) ] ] [ false ] { } }",
  "func { ( ) : bool ID while - ID ] - ID [ ( ID ) ] ] [ false [ { } }",
  "func { [ ) : bool ID while - ID ] - ID [ ( ID ) ] ] [ false ( { } }",
  "func ID ( ) ID [ ] int { var ID : [ : [ false + ID - true ] [ ( ( ( 123 ) ) ) ] ] bool }",
  "func ID ( ) ID [ ] : { var ID int [ : [ false + ID - true ] [ ( ( ( 123 ) ) ) ] ] bool }",
  "func ID ( ) ID [ ] : { var ID int [ : [ ( + ID - true ] [ ( false ( 123 ) ) ) ] ] bool }",
  "func false ( ID : bool , ID : [ ID ( - true * true * true + ( ( - ( - ( - ID ) ) ) ) + ( - true ) ) ] [ ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func false ( ID : bool , ID : [ ID ( - true * true } true + ( ( - ( - ( - ID ) ) ) ) + ( - true ) ) ] [ ] [ ] [ ] [ ] int ) { } func ID ( ) { *",
  "func false ( ID : bool , ID : [ ID ( - true * true } true + ( ( - ( - ( - ID ) ) ) ) * ( - true ) ) ] [ ] [ ] [ ] [ ] int ) { } func ID ( ) { +",
  "func ID ( ID : bool , ID : bool ) : [ ] [ ( ID [ } ( ( ( ( - true ) ) ) ) ] [ ID ] ) ] int { } func ID ( ) { -",
  "func ID ( ID : bool , ID : bool ) : [ ] [ ( ID [ } ( true ( ( - ( ) ) ) ) ] [ ID ] ) ] int { } func ID ( ) { -",
  "func ID ( ID : bool , ID : bool ) : [ ] [ ( ID ) } ( true ( ( - ( ) ) ) ) ] [ ID ] ) ] int { } func ID ( [ { -",
  "func ID ( ID int int ) { var ID : int var ID : [ ] : }",
  "func ID ( ID int int ) { : ID : int var ID var [ ] : }",
  "func ID ( ID int int ) { : ID : int var ] var [ ID : }",
  "func ID ( ) : int { while ID - ( ( 123 * ID ) ) ) ( - - 123 + { } } func ID ( ) { }",
  "func ID ( ) : int { while ID - ( ( 123 * ID ) ) ) ( - - 123 + { } } func ID } ) { (",
  "func ID ( ) : int { while ID - ( ( 123 * ID ) ) ) ( - - 123 + { } } func ID } ) { (",
  "func ID ( ) { var ID : [ ID [ - ID ( ID ) ( [ - ] ID ) ] ] [ ] [ ] [ ] [ ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID [ - ID ( ID ) func [ - ] ID ) ] ] [ ] [ ] [ ] [ ] bool var ID : bool } ( ID ( ) { }",
  "func { ( ) { var ID : [ ID [ - ID ( ID ) func [ - ] ID ) ] ] [ ] [ ] [ ] [ ] bool var ID : bool } ( ID ( ) ID }",
  "func ID ( ID ] [ ] int ) : [ : int { { } } func ID ( ) : [ ID ] bool { }",
  "func ID ( ID ] [ ] int ) : [ : int { { } } func ID ( ) : [ ID ] bool { }",
  "func ID ( } ] [ ] int ) : [ : int { { } } func ID ( ) : [ ID ] bool { ID",
  "func ID ( ID : bool , ID : int , ID : ) ID [ ( - - ID ) ] ] [ ] bool ) { } func ID ( [ { }",
  "func - ( ID : bool , ID : int , ID : ) ID [ ( - ID ID ) ] ] [ ] bool ) { } func ID ( [ { }",
  "func - ( ID : bool , ID : int , ID : ID ID [ ( - ID ) ) ] ] [ ] bool ) { } func ID ( [ { }",
  "func ID ( ) : bool { var ID : { if false - true / - - - - ID + true int } { } } func ID ( ) { }",
  "func true ( ) : bool { var ID : { if false - ID / - - - - ID + true int } { } } func ID ( ) { }",
  "func true ( ) : ID { var ID : { if false - bool / - - - - ID + true int } { } } func ID ( ) { }",
  "ID func ( ID : bool , ID : [ - ( ID [ true and - ( - false ) ] ) ] int , ID : int ) { }",
  "ID func ( ID : bool , - : [ - ( ID [ true and ID ( - false ) ] ) ] int , ID : int ) { }",
  "ID func ( ID : bool , - : , - ( ID [ true and ID ( - false ) ] ) ] int [ ID : int ) { }",
  "func ID ( ID : int , ID : [ ] func ] bool , ID : [ ( ( ( true ) ) ) ] bool ) { } [ ID ( ) { }",
  "func ID ( ID : true , ID : [ ] func ] bool , ID : [ ( ( ( int ) ) ) ] bool ) { } [ ID ( ) { }",
  "func ID ( ID : true , ID : [ ] func ] , bool ID : [ ( ( ( int ) ) ) ] bool ) { } [ ID ( ) { }",
  "func ID ( ) false var ID : [ false * - ID ( false + - ID - ( { ) ) / ( ID ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) false var ID : [ false * - ID : false + - ID - ( { ) ) / ( ID ) ] bool var ID ( int } func ID ( ) { }",
  "func ID ( ID : int , : ID int , ID : int ) { var ID : int var ID : int return - ( ID ) }",
  "func ID ( ID : int , : ID int , ID } int ) { var ID : int var ID : int return - ( ID ) :",
  "func ID int ID : int , : ID int , ID } int ) { var ID : int var ID : ( return - ( ID ) :",
  "func ID ( ID : bool , ID : [ ] [ } ( 123 >= ( ID ) ) ] int ) { ID",
  "func ID ( ID : bool , ID : [ 123 [ } ( ] >= ( ID ) ) ] int ) { ID",
  "} ID ( ID : bool , ID : [ 123 [ func ( ] >= ( ID ) ) ] int ) { ID",
  "func ID ( ID : [ ID ( 123 * ID ( ( ID ) ) ) ID / ] bool ) { } func ID ( ) { }",
  "func ID ( ID ] [ ID ( 123 * ID ( ( ID ) ) ) ID / : bool ) { } func ID ( ) { }",
  "func ID ( ID ] [ ID ( 123 * ID ( ( { ) ) ) ID / : bool ) { } func ID ( ) ID }",
  "func ID ( ) : [ ] bool { var ID : bool if ( { * ID [ - ( - ID ) ] ) { } while false true } }",
  "func ID ( ) : [ ] bool { var ID : bool if ( { * ID [ - ( - ID ) ] ) { } while false true } }",
  "func ID ( ) : [ ] bool { var ID : bool if ( { ID ID [ - ( - * ) ] ) { } while false true } }",
  "func ID ( ) : int { var ID : ID var ID : [ - ID ( ) [ bool ( ) ] [ ( - ( ID ) ) ] ] bool }",
  "func ID ( ) : int { var ID : ID var ID : [ - ) ( ) [ bool ( ) ] [ ( - ( ID ) ID ] ] bool }",
  "func ID ( ID : [ ] [ ] bool , true : [ ID * true / ( ID ) ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , true : [ ID * true / ( ID ) : int , ID ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , true : [ ID * true / ( ID ) : int , ID ] int ) { { func ID ( ) } }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : [ ] int if true ID - ( ID ) / / { } }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : / ] int if true ID - ( ID ) / [ { } }",
  "func ID ( ) : bool { var ID : [ ] bool var ID : } ] int if true ID - ( ID ) / [ { } /",
  "func ID ( ID : [ - 123 * ID ( - - true * ( ( / ID ) ) ) ( - 123 ) / ID ] int ) { }",
  "func ID ( ] : [ - 123 * ID ( - - true * ( ( / ID ) ) ) ( - 123 ) / ID ID int ) { }",
  "func ( ( ] : [ - 123 * ID ( - - true * ( ID / ID ) ) ) ( - 123 ) / ID ID int ) { }",
  "func ID ( ID : bool , ) : [ - ID ( ) [ ID ( ID ID ] ] [ ] bool , ID : bool ) { }",
  "func ID ( ID : bool , ) : [ - ID ( ) [ ID ( ID ID ] ] } ] bool , ID : bool ) { [",
  "func ID ( ID : bool , ) : [ - ID ( ID [ ID ( ) ID ] ] } ] bool , ID : bool ) { [",
  "func ID ( ) : int { { var ID : [ ] [ ] bool ID false = / - ID / ID } } func ID ( ) { }",
  "func ID ( int : ) { { var ID : [ ] [ ] bool ID false = / - ID / ID } } func ID ( ) { }",
  "func ID ( int : ) { { var ID : [ ] [ ] bool ID false = / - ID / ID } } func ID ( ) { }",
  "func ID ( ) { var ID : - ID ( ID [ true == true ] [ bool ( ( 123 ) ) ] ) = ID ID = 123 }",
  "func ID ( ) { var ID : ID ID ( - [ true == true ] [ bool ( ( 123 ) ) ] ) = ID ID = 123 }",
  "func ID ( ) { var ID ] ID ID ( - [ true == true : [ bool ( ( 123 ) ) ] ) = ID ID = 123 }",
  "func ID ( ) { var ID : int ID call ( ( ( ( true ) ) ) ) ID = ( ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : int ID call ( ( ( ( true ) ) ) ) ID ) ( ID ) } func ID ( = { }",
  "func ID ( call { var ID : int ID ) ( ( ( ( true ) ) ) ) ID ) ( ID ) } func ID ( = { }",
  "func ID ) ID : [ 123 + false * false / ID ( false * - ID ) + ( ID ) ] [ ] bool ( { }",
  "func ID ID ID : [ 123 + false * false / ID ( false * - ) ) + ( ID ) ] [ ] bool ( { }",
  "func ID ID ID : [ ) + false * false / ID ( false * - 123 ) + ( ID ) ] [ ] bool ( { }",
  "ID ID ( ) { var ID : bool return } func ID ( ID : [ ] bool , func : int , ID : [ ] int ) { }",
  "ID ID ( ) { var ID : ] return } func ID ( ID : [ bool bool , func : int , ID : [ ] int ) { }",
  "ID ID ( ) { var ID : ] return } func ID ( ID : [ bool bool , func : ) , ID : [ ] int int { }",
  "func ID ( ID : int , ID : bool ) { var ) : int } func ID ( ID { var ID : bool return }",
  "func ID ( ID : int , ID : bool ) { } ) : int var func ID ( ID { var ID : bool return }",
  "func ID ( ID : int , ID : bool ) var } ) : int { func ID ( ID { var ID : bool return }",
  "func ID ( ) { var ID ( int var ID : bool { var ID : [ ] [ ] int } while ( ID ) { } } func ID : ) { }",
  "func ID ( ) { var ID ( int var ID bool : { var ID : [ ] [ ] int } while ( ID ) { } } func ID : ) { }",
  "func ID ( ) { var ID { int var ID bool : { var ID : [ ] [ ] int } while ( ID ) ( } } func ID : ) { }",
  "func ID ( ) { } ID func ( ) { var ID : [ ID ( ( false ) ) ] [ ] int }",
  ") ID ( ) { } ID func ( ) { var ID : [ ID ( ( false func ) ] [ ] int }",
  ") ID ( ) { } ID func ( ) { var ID : [ ID ( ( false func ) ] [ ] int }",
  "func ID ( ) : int { var ID : int var ID return [ ] bool : - ID * ID ( ID ) * - ID } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID return [ ] bool : - ID * ID ( ID { * - ID } func ID ( ) ) }",
  "func ID ( ) : int { var ID : int ] ID return [ var bool : - ID * ID ( ID { * - ID } func ID ( ) ) }",
  "func ID ( ID : int ID { return - ) ( ID [ - ( - ( ( ID ) ) ) ] ) } func ID ( ) { }",
  ") ID ( ID : int ID { return - ) ( ID [ - ( - ( ( ID func ) ) ] ) } func ID ( ) { }",
  ") ID ( ID : int ID { return - ) ( ID [ - ( ) ( ( ID func ) ) ] - } func ID ( ) { }",
  "func ID ( ID { { var ID : int print ( ( ( ) ) ) ) if 123 { } } }",
  "func ID if ID { { var ID : int print ( ( ( ) ) ) ) ( 123 { } } }",
  "func ID if ID { { var ID ) int print ( ( ( ) ) ) : ( 123 { } } }",
  "func ID ( ID : int ) : int ID var ID : int while true / ID ( true ) / { { } }",
  "func ID ( ID : int ) : int ID var ID : int while true ( ID / true ) / { { } }",
  "( ID func ID : int ) : int ID var ID : int while true ( ID / true ) / { { } }",
  "func ID ( ID : bool , ID : int , ID : [ false [ ID ( ] * ID ) ] int ) { }",
  "func false ( ID : bool , ID : int , ID : [ ID [ ID ( ] * ID ) ] int ) { }",
  "func ID { ) : [ ( 123 / ( - ( ( ( ID ) ) ) ) ) ] [ ] [ ] int ( }",
  "func ID { ) : [ ( 123 / ( - ( ( ( ID ) ) ) ) ) ] [ ] [ } int ( ]",
  "func ID { ) : [ ( [ / ( - ( ( ( ID ) ) ) ) ) ] [ ] 123 } int ( ]",
  "func ID ( ID - [ : false - ID [ false and ( - ID ) and - ( ID ) ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID - [ : false - ID [ false and ( - ID ) and - ( ID ) ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID ( [ ] bool ID = - 123 - ID ( ) - - : ID ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID ( ) ] bool ID = - 123 - ID ( ) - - : ID [ } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID ( ) ] bool ID = - 123 - - ( ) ID - : ID [ } func ID ( ) { }",
  "func ID ( ID : [ true * false * > ID / true ( - ( - - - - 123 ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ true * false * > ID / ( true - ( - - - - 123 ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ true * false * > ID / ( true - ( - - - - 123 ) ) ] bool ) { } func ID ( ) { }",
  "func 123 ( ID : int ) : int { var ID : [ ID + ID ( ) [ - - ID ] + ( - ID ) ] bool var ID : [ ] int }",
  "func 123 ( ID : int ) : int { var ID : [ ID + ID ( ) [ - - ID ] + ( - ID ) ] bool var ID : [ int ] }",
  "ID 123 ( ID : int ) : int { var func : [ ID + ID ( ) [ - - ID ] + ( - ID ) ] bool var ID : [ int ] }",
  "func ID ( ) : [ ] bool { var ID : int if false / - ID [ [ ID ] - ID ] { } print false }",
  "func ID ( ) : [ ] bool { ID var : int if false / - ID [ [ ID ] - ID ] { } print false }",
  "func ID if ) : [ ] bool { ID var : int ( false / - ID [ [ ID ] - ID ] { } print false }",
  "func ID ( ( : [ ( - - true <= ID ) 123 ) ) ] int { }",
  "func ID ( ( : [ ( ID - true <= - ) 123 ) ) ] int { }",
  "func ID ( ID : int , ID : [ - ) ( true <= 123 * true * ( ID ) ID ] bool ) { }",
  "{ ID ( ID : int , ID : [ - ) ( true <= 123 * true * ( ID ) ID ] bool ) func }",
  "func ID : ) ( int { } func ID ( ) { return }",
  "func ID ) ) ( int { } func ID ( : { return }",
  "func ID ) ) : int { } func ID ( ( { return }",
  "func ID ( ) ( { return } call ID ( - - ID [ ID { ) ] ) }",
  "func ID ( ) ( { return } call ID ( - - ID [ ID { ) ] ) }",
  "func ID ( ) ( { return } call [ ( - - ID ID ID { ) ] ) }",
  "func ID ( ID : int , ID : bool , ID : bool ) { print ID [ true + ] true [ false ] }",
  "func ID , ID : int ( ID : bool , ID : bool ) { print ID [ true + ] true [ false ] }",
  "func ID , ID : int ( ID : bool , ID : bool ) { print ID [ true + ] true [ false ] }",
  "func ID ( ID bool : ) : bool { var ID : [ - ( ID ( - ( ( ID ) ) ) ) ] [ ] [ ] bool var ID : bool }",
  "func ID ( ID bool : ) : bool { var ID ( [ - ( ID ( - ( : ID ) ) ) ) ] [ ] [ ] bool var ID : bool }",
  "func ID ( ID bool : ) : bool { var ID ( [ - ( ID ( - ( : ID ) ) ) ] ) [ ] [ ] bool var ID : bool }",
  "func ID ( ) { { ID ( ) - ID / - ID ( ) and true } func ID ( ) print }",
  "func ID ( ) { { ID ( ) - ID / - ID ( ) and true } func ID ( ) print }",
  "func ID - ) { { ID ( ) ( ID / - ID ( ) and true } func ID ( ) print }",
  "func ID ( ID : bool , ID : int 123 : int { var ID : bool { print - ( ( ) ) ) if ID { } } if true { } }",
  "func ID ID ID : bool , ID : int 123 : int { var ( : bool { print - ( ( ) ) ) if ID { } } if true { } }",
  "func ID ID ID : bool ID , : int 123 : int { var ( : bool { print - ( ( ) ) ) if ID { } } if true { } }",
  "func ID ( ) : bool { var ID : bool { { ID : [ ( ID ( ) [ ID ] [ ( false ) ] ) ] bool } if true var } }",
  "func ID ( ) : bool { var ID ID bool { { : : [ ( ID ( ) [ ID ] [ ( false ) ] ) ] bool } if true var } }",
  "func ID ( ) : bool { var ID ID bool } { : : [ ( ID ( ) [ ID ] [ ( false ) ] ) ] bool } if true var } {",
  "func bool ( ID : [ - ( ID ( false or false or 123 ) ) ] ID ) { }",
  "func ID ( ID : [ - ( ID ( false ] false or 123 ) ) or bool ) { }",
  "func ID ( ) : int { var ID : bool } func ID ( ) { var ID : } while ( ID ) { int }",
  "func ID ( ) : int { ( ID : bool } func ID var ) { var ID : } while ( ID ) { int }",
  "func ID ( ) : int { ( ID : bool } func ID var ) { var ID : } while ( ID ) { int }",
  "func 123 ( ) : int { var ID : bool print ( ID [ ID ( ) ] [ ID ] ) ID = ID } func ID ( ) { }",
  "func 123 ( ) : int { var ] : bool print ( ID [ ID ( ) ] [ ID ID ) ID = ID } func ID ( ) { }",
  "[ 123 ( ) : int { var ] : bool print ( ID func ID ( ) ] [ ID ID ) ID = ID } func ID ( ) { }",
  "func - ( ) : int { var ID : int var ID : [ ] bool print true * ( ID 123 ) * true } func ID ( ) { }",
  "func - ( ) : int { var ID : int var ID 123 [ ] bool print true * ( ID : ) * true } func ID ( ) { }",
  "func - ( ) : int { var ID : int var ID 123 [ ] bool print true ) ( ID : * * true } func ID ( ) { }",
  "func ID ( ) { var ID ID int var ID : [ true * - false ] bool } func ID ( : : int ) { }",
  "func ID ( ) { var ID ID int ID var : [ true * - false ] bool } func ID ( : : int ) { }",
  "func ID ( * { var ID ID int ID var : [ true ) - false ] bool } func ID ( : : int ) { }",
  "func ID ( ) : [ ID - 123 + ID ( ) ] bool { var ID : bool { ID : int } func ID ( ) var }",
  "func ID ( ) : [ ID - 123 + ID ( ) ] bool { int ID : bool { ID : var } func ID ( ) var }",
  "func ID ( ) : [ ID - 123 + ID ( ) ] bool { ( ID : bool { ID : var } func ID int ) var }",
  "func ID ( ID : [ ( true / ( true ) ID ( ) [ 123 ] * ID * * 123 ) ] int ) { }",
  "func / ( ID : [ ( true ID ( true ) ID ( ) [ 123 ] * ID * * 123 ) ] int ) { }",
  "func / ( ID : [ ( true ID ( true ) ID ( ) [ 123 ] ) ID * * 123 * ] int ) { }",
  "func ID [ ID : ( ( ( - ( false - 123 + 123 ) ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID [ ID : ( ( ( - ( false - 123 + 123 ) func ) ] [ ] int ) { } ) ID ( ) { }",
  "func ID [ ID : ( ( ) - ( false - 123 + 123 ) func ) ] [ ] int ) { } ( ID ( ) { }",
  "func ID ( ) { var ID : [ ID [ - true - ( - ID ) + [ true ) ] [ ( ( false ) ) ] ] bool var ID : ( ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ) [ - true - ( - ID ) + [ true ) ] [ ( ( false ) ID ] ] bool var ID : ( ] bool } func ID ( ) { }",
  "func ID ( ) { var ID - [ ) [ : true - ( - ID ) + [ true ) ] [ ( ( false ) ID ] ] bool var ID : ( ] bool } func ID ( ) { }",
  "func ID - ID : int ) : bool { ID ( ) = ( - ID [ false ] [ ( ( - ( ID ) ) ] ) ID = ID }",
  "func ID - ID : int ) : bool { ID ( ) = ( - ID [ false ] [ ( ( - ( ID ) ) ] ) ID = ID }",
  "func ID - ID : int ) : bool { ID ( ) = ( - ID [ false ( [ ( ] - ( ID ) ) ] ) ID = ID }",
  "func ID ( ) : bool { var ID : int return ID ( ) * ) ID [ ID ] ( / ( true ) }",
  "func ID ( if : [ ] bool , ID : bool ) : bool { ID - ( ( true ) ) { } { } }",
  "func ID ( if : [ ] bool , ID : bool ) : bool { ID - ( ( true ) ) { } { } }",
  "func ID ( if : [ ] } , ID : bool ) : bool { ID - ( ( true ) ) { bool { } }",
  "func ID ( ) { if - - ( ID ( ( [ 123 ) ) ] [ ID ( ID ) ] ) { } }",
  "func ID ( ) { if - - ( ID ( ( [ 123 ) ) ] [ ID ( ID ) ] ) { } }",
  "func ID ( ID : [ ] int ) { if ( ID * ( ID } / ( - ( ID ) ) ) { } } func ID ( ) { )",
  "( ID ( ID : [ ] int ) { if func ID * ( ID } / ( - ( ID ) ) ) { } } func ID ( ) { )",
  "( ID ( ID : [ ] int ) { if func ID * ( ID ID / ( - ( ID ) ) ) { } } func } ( ) { )",
  "func ID ( ID : bool , ID : [ ( false * ID [ true - ( - ID ) ] * ( } ( ( - - ( 123 ) ) ) ) ) ) ] bool , ID : bool ) { (",
  "func ID ( ID : bool , ID : [ ( ( * ID [ true - ( - ID ) ] * ( } false ( - - ( 123 ) ) ) ) ) ) ] bool , ID : bool ) { (",
  "func ID ( ID : [ false > ( ID [ ID ( ID ) ] ) ] bool } { } func ID ( ) { )",
  "func ID ( ID : [ false > ( func [ ID ( ID ) ] ) ] bool } { } ID ID ( ) { )",
  "func ID ( ID : [ false > ( func [ ID ( ID ) ] ) ] ID } { } ID bool ( ) { )",
  "func ID ( ) { var ID : int while ID [ ( - 123 * ( - ID ) * ( ( ( 123 ) ) ) ) ] [ ID ] { } } ( ID func ) { }",
  "func ID ( ) ( var ID : int while ID [ ( - 123 * { - ID ) * ( ( ( 123 ) ) ) ) ] [ ID ] { } } ( ID func ) { }",
  "func ID ( ) [ var ID : int while ID [ ( - 123 * { - ID ) * ( ( ( 123 ) ) ) ) ] ( ID ] { } } ( ID func ) { }",
  "func ID ( ) { var ID : ) if false >= 123 and ID ( ) [ false ] { } call ID ( bool } func ID ( ) { }",
  "func ID ( ) { var ID : ) if false >= 123 and ID ( ) [ false ] { } ID ID ( bool } func call ( ) { }",
  "func ID ( ) { var ID : ) if false >= ( and ID 123 ) [ false ] { } ID ID ( bool } func call ( ) { }",
  "func ID - ID : [ false and ID [ ID / ( ( false ) * false ] [ ID ] ] bool ) { }",
  "func ID - ID : [ false { ID [ ID / ( ( false ) * false ] [ ID ] ] bool ) and }",
  "func ID - ID : [ false { ID [ ID / ( ( false * ) false ] [ ID ] ] bool ) and }",
  "func ID ( ID : [ ] bool , ID : * ID [ 123 [ - ( - - ( - 123 ) ) ] ] bool ) { } func ID ( ) { }",
  "[ ID ( ID : [ ] bool , ID : * ID [ 123 func - ( - - ( - 123 ) ) ] ] bool ) { } func ID ( ) { }",
  "[ ID ( ID ( [ ] bool , ID : * ID [ 123 func - ( - - ( - 123 ) ) ] ] bool ) { } func ID : ) { }",
  "func ID ( ) : [ ] int { var ID : int print ( ( { ( ) ) ) if false { } } func ID ( ) ID }",
  "func ID { ) : [ ] int { var ID : int print ( ( ( ( ) ) ) if false { } } func ID ( ) ID }",
  "func ID { ) : [ ] ID { var int : int print ( ( ( ( ) ) ) if false { } } func ID ( ) ID }",
  "func ID ( ) : int { if 123 and true - ID ( ( ID ) ) { ( ( - true ) ) + } } func ID ( ) { }",
  "func ID ( ) : int - if 123 and true - ID ( ( ID ) ) { ( ( { true ) ) + } } func ID ( ) { }",
  "func ID ( ) : int - if 123 and true - ID ( ( ID ) ) { ( ( { true ) ) + } } ID func ( ) { }",
  "func ID ( ID : [ - - ( false + true / ( - - 123 ) - ID ) ) bool ) { } func ID ( ] { }",
  "func ID ( ID : [ - - ( false + true / ( - - 123 ) - ID { ) bool ) ) } func ID ( ] { }",
  "func ID ( ID : [ - - ( false + { / ( - - 123 ) - ID { ) bool ) ) } func ID ( ] true }",
  "func ID ( ID : ( , ID : int ) { ID ( ) = false and int true ) and - ( ID ) call ID ( ) }",
  "func ID ( ID : ( , ID ) int ) { ID ( ) = false and int true : and - ( ID ) call ID ( ) }",
  "func ID ( ID : [ ] int ) : bool { var ID : int true ID : bool return var + ID ( ) }",
  "func ID ( ID : [ ] int ) : bool { var ID : int true ID : bool return var + ( ID ) }",
  "func ID ( ID : [ ] int ) : bool { var ID : int true ID : bool return var + ( ID ) }",
  "[ ID ( ) : int { var ID : func ID [ 123 * ( true / ( - - - false ) ) ] ] int }",
  "[ ID ( ) : int { var ID : ] ID [ 123 * ( true / ( - - - false ) ) ] func int }",
  "func ID ( ID : bool , ID : ] - ( ( ID ( 123 ) ) ) ] bool , ID : [ [ bool ) { }",
  "func ID ( ID : bool , ID : ] - ( ( ID ( 123 ] ) ) ) bool , ID : [ [ bool ) { }",
  "func ID ( ID : bool , ID : ] - ( ( ID ( 123 ] ) ) ) bool , ID : [ [ bool ) { }",
  "func ID ( ( : bool , ID : [ ] int , ID : int ) { return ( ( ID ID ) ) ) }",
  "func ID ( ( : bool , ID : [ ] int , ID : int ) { return ( ( ID ID ) ) ) }",
  ") ID ( ( : bool , ID : [ ] int , ID : int ) { return ( ( ID ID ) func ) }",
  "func ( ( ) { ID [ - - ID - - 123 * - ( - 123 ) ) ] [ false ] = false ID = ID }",
  "func ( ( ) { ID [ - } ID - - 123 * - ( - 123 ) ) ] [ false ] = false ID = ID -",
  "func ( ( ) { [ [ - } ID - - 123 * - ( - 123 ) ) ] ID false ] = false ID = ID -",
  "func ID ( ID : [ ] ] ID [ - - 123 / true / - ID ] [ true ] [ int ) { }",
  "func ID ( ID : [ ] ] ID [ - - / 123 true / - ID ] [ true ] [ int ) { }",
  "func true ( ID : [ ] ] ID [ - - / 123 ID / - ID ] [ true ] [ int ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { call } ( ) call ID ( ID [ ID ] ) } func ID ( ) { ID",
  "ID ID ( ID : int , ID : int , func : int ) { call } ( ) call ID ( ID [ ID ] ) } func ID ( ) { ID",
  "ID ID ( ID : int , ID : int , func : int ) { call } func ) call ID ( ID [ ID ] ) } ( ID ( ) { ID",
  "func ID ( ID : ) , ID : bool bool { var ID : [ ( - ( ID ) ) ] [ ] [ ] bool }",
  "func ID ( ID : ) , ID : bool bool { var ID : [ ( - ( ID ) ) ] [ ] [ ] bool }",
  "func ID ( ID : ID , ) : bool bool { var ID : [ ( - ( ID ) ) ] [ ] [ ] bool }",
  "func ID ( ID ) [ ] [ ] bool , ID : [ ( ID ( ) [ ( ID ) ] ) ] int , ID : [ ] bool : { }",
  "func ID ( ID ) [ ] [ ] bool , ID ] [ ( ID ( ) [ ( ID ) ] ) : int , ID : [ ] bool : { }",
  "func ID ( ID ) [ ] [ ( bool , ID ] [ ( ID ] ) [ ( ID ) ] ) : int , ID : [ ] bool : { }",
  "func ID ( ID : int ID ID : bool , ID : [ ] [ ] [ true * - , ( ) [ 123 ] [ - ID ] / ( ID ) ] [ ] int ) { }",
  "func ID ( ID : int 123 ID : bool , ID : [ ] [ ] [ true * - , ( ) [ ID ] [ - ID ] / ( ID ) ] [ ] int ) { }",
  "* ID ( ID : int 123 ID : bool , ID : [ ] [ ] [ true func - , ( ) [ ID ] [ - ID ] / ( ID ) ] [ ] int ) { }",
  "func ID ( ) { } func ID ( ) { var ID : bool call ID ( ) { var ID : [ ] [ var ID : bool ] int } }",
  "func ID ( ) { } func ID ( ) { var ID : ID call ID ( ) { var ID : [ ] [ var bool : bool ] int } }",
  "func ID ( ) { } func ID ( ) { var ID : ID call ID ( ) { var ID : [ ] [ var bool : bool ] int } }",
  "func ID ( ) : bool { var ID : int ID ( ID / ( ) ( ) ) ID = true } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int ID ( ID / ( ) ( ) ) ID = true } func ID ( ) { }",
  "func ID ( int : bool { var ID : ) ID ( ID / ( ) ( ) ) ID = true } func ID ( ) { }",
  "func ID ( ID : bool , bool : ID ) { }",
  "func ID ( ID : : , bool bool ID ) { }",
  "func ID : ID : ( , bool bool ID ) { }",
  "func ID ( ) : bool ( while ( { ( ( ( ID ) ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ) : bool ( while func { ( ( ( ID ) ) ) ) ) { } } ( ID ( ) { }",
  "func ID ( ) : } ( while func { ( ( ( ID ) ) ) ) ) { } } ( ID ( ) { bool",
  "func ID ( ID : int ) : bool { { var ID : [ ] [ ] bool ID ( ID ) = false if - ( - func ) { } } { } } 123 ID ( ) { }",
  "123 ID ( ID : int ) : bool { { var ID : [ ] [ ] bool ID ( ID ) = false if - ( - func ) { } } { } } func ID ( ) { }",
  "123 ID ( ID : int ) : bool { { var ID [ [ ] : ] bool ID ( ID ) = false if - ( - func ) { } } { } } func ID ( ) { }",
  ") ID ( func : int { if ( ( - ( false * ( ( ID ) ) / false ) ) ) { } } func ID ( ) { }",
  ") ID ( func : ( { if ( ( - int false * ( ( ID ) ) / false ) ) ) { } } func ID ( ) { }",
  ") ID ( func : ( { if ( ( - int false ( * ( ID ) ) / false ) ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : ] ] [ [ [ ID / false * true - ( 123 ) ] [ ] bool var ID : [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : ] ] [ [ [ ID / false * true - ( 123 ) ] [ ] bool var ID : [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ - } [ ID * ID ( ) * ( - - true ) ] [ ( true ) ] ] [ ] int ID",
  "func ID ( ) : int { var ID : [ - } [ ID * ID ( ) * ( - - [ ) ] [ ( true ) ] ] true ] int ID",
  "func ID ( ) : int { var ID : [ - } [ ID * ID ( ) * ( - - [ ) ] [ ( true ) ] ] true ] int ID",
  "func ID ( [ { var ID : int } func ID ( ID : [ ] int , ID : int , ID : int ) : ) ] int { }",
  "func ID ( [ { var ID : int } func ID ( ID : [ ] int , ID : int , ID : int ) : ) ] int { }",
  "func ID ( { [ var ID : int } func ID ( ID : [ ] int , ID : int , ID : int ) : ) ] int { }",
  "func ID ( ) { var ID : - [ false * - ID [ ( ID ) ] [ false ] ] [ ] int var ID : bool }",
  "func ID ( ) { var ID : - [ false * - ID [ ID ID ) ] [ false ] ] [ ] int var ( : bool }",
  "func ID ( ) { var ID : - [ false * - ID [ ID ID ) ] [ false ] ] [ ] int var ( : bool }",
  "func ID ( ID [ : ] bool ) : bool { var ID : int var ID : bool return }",
  "func ID ( ID ] : [ bool ) : bool { var ID : int var ID : bool return }",
  "func ID ( ID : int ) { { { var ID : int } return } return } func ID ( ) : int ID { }",
  "func ID ( ID : int ) { { { var ID : int } return } return } func ID ( ) : int ID { }",
  "func ID ( ID : : ) { { { var ID int int } return } return } func ID ( ) : int ID { }",
  "func ID ( ) { var ID : int } func ID ( ID : bool ) ID : [ ( ID ( ) ) ] bool , { }",
  "func ID ( ) { var ID : int } func ID { ID : bool ) ID : [ ( ID ( ) ) ] bool , ( }",
  "func ID ( ) { var ID ] int } func ID { ID : bool ) ID : [ ( ID ( ) ) : bool , ( }",
  "func ID { ) ( var ID : int var ID : bool call ID ( ) { } } func ID ( ) : int { ID = ID }",
  "func ID { ) ( var ID : int var ID : bool call ID ( ) { } } func ID ( ) : int { ID = ID }",
  "func ID { ) ID var ID : int var ID : bool call ( ( ) { } } func ID ( ) : int { ID = ID }",
  "func ID ( ID : int , ID ) int , ID : [ - ID [ - ( ID ) ] [ - ( ( false ) ) ] ] int : { }",
  "func ID ( ID : int , ID ) int , ID : [ - ID [ - ( ID ) ] } - ( ( false ) ) ] ] int : { [",
  "func : ( ID : int , ID ) int , ID ID [ - ID [ - ( ID ) ] } - ( ( false ) ) ] ] int : { [",
  "func ID ( ID : [ - - ( ID [ - ( ID ) ] ) ] bool ) { } func ID { ) ( }",
  "func ( ( ID : [ - - ID ID [ - ( ID ) ] ) ] bool ) { } func ID { ) ( }",
  "func ( ( ID : [ - - ID ID [ - ( ID ) ] ) ] bool ) func } { ID { ) ( }",
  "func ID : ID ( bool , ID : [ ] int , ID : int ) { var ID : int }",
  "func ID : int ( bool , ID : [ ] int , ID : int ) { var ID : ID }",
  "func ID : int ( bool , ID : [ ] int , ID : int ) { var ID : ID }",
  "func ID ( ) : int { while ( ID ( false * ID * ) 123 ) - { } ID = - ( ID ) }",
  "func - ( ) : int { while ( ID ( false * ID * ) 123 ) ID { } ID = - ( ID ) }",
  "func - ( ) : int { while ( ID ( false * ID * ) 123 ) } { } ID = - ( ID ) ID",
  "} ID ( ID : [ ( ID + ( - ( - ID ) ) - ID ) ] bool ) { func",
  "} ID ( ID : [ func ID + ( - ( - ID ) ) - ID ) ] bool ) { (",
  "} ID ( ID : [ func ID + ( - ( - { ) ) - ID ) ] bool ) ID (",
  "func ID ( ID : int , ID : bool func { var ID : bool var ID : [ 123 / ( ID ) ] int } ) ID ( ) { }",
  "func ID ( ID : int , ID var bool func { : ID : bool var ID : [ 123 / ( ID ) ] int } ) ID ( ) { }",
  "func ID ( ID : int , ID var bool func { : ID : bool var ID : [ 123 / } ID ) ] int ( ) ID ( ) { }",
  "func ID ( ID : [ ] / ID ( false / ( ( - ID ) ) [ ID ) ] bool ) { }",
  "func ID ( ID : [ ] / ID ( false / ( ( - ID ) ) [ ID ) ] bool ) { }",
  "func ID ( ID : [ ] / ) ( false / ( ( - ID ID ) [ ID ) ] bool ) { }",
  "func ID ( ID : int ) : [ ( ID ( ] / ID [ - ID ] [ ID ) / true ) ] bool { }",
  "func ID ( ID : int ) : [ ( ID ( ] / ID [ - ID true [ ID ) / ] ) ] bool { }",
  "( ID ( ID : int ) : [ ( ID func ] / ID [ - ID true [ ID ) / ] ) ] bool { }",
  "func ID ( ) { call ] ( ) while - ID [ ( ( ( true ) ) ) ] [ ( 123 ) ID { } }",
  "func ID ( ) { call ] ( ) while - ID [ ( ( ( true ) ) ) ] [ ID 123 ) ( { } }",
  "func ID ( ) { call ] ( ) while - ID [ ( ( ( true ) ) ) ] [ ID 123 ) ( } } {",
  "func ( ( ID : bool , ID : int ) { var ID : int call ID ( ) return ID ( ) [ - ( ( - ID ) ) ] [ - ID ] } func ID ID ) { }",
  "func ( ( ID : bool , ID : int ) { var ID : int call ID ( ) return ID ( ) [ - ( ( func ID ) ) ] [ - ID ] } - ID ID ) { }",
  "func ( ( ID : bool , ID ) int ) { var ID : int call ID ( : return ID ( ) [ - ( ( func ID ) ) ] [ - ID ] } - ID ID ) { }",
  "func ID ( ) { var ID : [ - var 123 * ID ( ) [ ( 123 ) ] [ - ID ] ] int - ID : bool }",
  "func ID ( ) { var ID : [ - var 123 * ID ( ) int ( 123 ) ] [ - ID ] ] [ - ID : bool }",
  "func ID ( ) { var ID : [ - var 123 int ID ( ) * ( 123 ) ] [ - ID ] ] [ - ID : bool }",
  "func ID ( ID : [ - true + ID { ) * ID [ ID ] / - true ] bool ) ( }",
  "func ID ( [ : ID - true + ID { ) * ID [ ID ] / - true ] bool ) ( }",
  "+ ID ( [ : ID - true func ID { ) * ID [ ID ] / - true ] bool ) ( }",
  "func bool ( ID : [ ] bool , ID : bool , ID : [ ] ID ) : [ ] [ ] int { var ID : [ ] int var ID : [ ] [ ] [ ] int }",
  "func bool ( ID : [ ] bool , ID : bool , ID : [ ] ID ) : [ ] [ ] int { var ID : [ ] int var ID : } ] [ ] [ ] int [",
  "func ID { ID : bool ) : int { { var ID : [ ] bool print false + true / 123 ID = 123 } while ID { } } func ID ( ) ( }",
  "func ID { ID : [ ) : int { { var ID : bool ] bool print false + true / 123 ID = 123 } while ID { } } func ID ( ) ( }",
  "func ID { ID : [ ) : int { { var ( : bool ] bool print false + true / 123 ID = 123 } while ID { } } func ID ID ) ( }",
  "] ID ( ) : [ - - ID [ - - ( ( false ) ) func [ ID ] ] [ ] bool { }",
  "] ID ( ) : [ - - ID [ - - ( ( false ) ) func [ ID ] ] [ ] bool { }",
  "func ID ( ) { : } func ID ( ID return [ ] int ) : bool { var ID : bool var ID : [ ] [ ] bool }",
  "func ID ( ) { : } func ID ( ID : [ ] int ) : bool { var ID return bool var ID : [ ] [ ] bool }",
  "func ID ( ) return : } func ID ( ID : [ ] int ) : bool { var ID { bool var ID : [ ] [ ] bool }",
  "func ID ( ) : bool { return ID ( ) [ - ( false * ( - ID ) * ID } ] ) func ID ( ) { }",
  "func ID ( ) : bool ID return { ( ) [ - ( false * ( - ID ) * ID } ] ) func ID ( ) { }",
  "func ID ( ) : bool ID ) { ( return [ - ( false * ( - ID ) * ID } ] ) func ID ( ) { }",
  "func ID ( ID ID bool ) : bool { var ID : int var : : bool return } func ID ( ID : [ ] int ) : int { }",
  "func ID ( ID ID bool ) : bool { var ID { int var : : bool return } func ID ( ID : [ ] int ) : int : }",
  "func ID ( ID ID bool ) : bool { var ID { } var : : bool return } func ID ( ID : [ ] int ) : int : int",
  "func ID ( if : int { call ID ( ID ( ID ( ) [ ID ] [ - ( ( - false ) ) ] ) ) ) false { } }",
  "func ID ( if : int { call ID ( ID ( ID ( ] [ ID ) [ - ( ( - false ) ) ] ) ) ) false { } }",
  "func ID ( if : int { call ID ( ID ( ID ( ] [ ID ) [ - ( ( ) false ) - ] ) ) ) false { } }",
  "func ID - ) : int { var ID : int call ID ( ) ID [ ( ( ID ) ) ] = ( - ( ( - - ID ) ) }",
  "func ID - ) : int { var } : int call ID ( ) ID [ ( ( ID ) ) ] = ( - ( ( - - ID ) ) ID",
  "func ID - ) : int { var } : int call ID ( ) ID [ ( ( ID ) ) ] = ( - ( ( - - ID ) ) ID",
  "func ID ID ID : int ) { var ID : bool call ID ( 123 * ( false - ( - ID ) ) / ( ( ) ) }",
  "func ID ID ID ( int ) { var ID : bool call ID ( 123 * ( false - ( - ID ) ) / : ( ) ) }",
  "func ID ( ) : bool { var ID : bool [ ID : int while ( ID ( ) [ true ] var - 123 ] ) { } }",
  "func ID ( ) } bool { var ID : bool [ ID : int while ( ID ( ) [ true ] var - 123 ] ) { : }",
  "func ID ( ) } bool { ] ID : bool [ ID : int while ( ID ( ) [ true var var - 123 ] ) { : }",
  "func ID ( ID : bool , ID : int , ID : [ true ID [ false * ID [ - ( ( - ) ) ] [ ID ] / true ] [ - false ] ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : int , ID : [ true ID [ false * ID [ ( - ( - ) ) ] [ ID ] / true ] [ - false ] ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : int / ID : [ true ID [ false * ID [ ( - ( - ) ) ] [ ID ] , true ] [ - false ] ] [ ] bool ) { }",
  "func ID ( ) : [ / 123 ID [ ID ( ) / ID <= false ] [ ( true ) ] * ID ] int { }",
  "func ID ( ) : [ / true ID [ ID ( ) / ID <= false ] [ ( 123 ) ] * ID ] int { }",
  "func - ( ) : int { { var ID : int print false / ( true + false + ID ) * ID 123 } if false { } }",
  "func - ( ) : int { { int ID : var print false / ( true + false + ID ) * ID 123 } if false { } }",
  "func - ( ) : int { { int ID : var print false / ( } + false + ID ) * ID 123 } if false { true }",
  "func ID ( ) : bool { var ID : int return ID ID - ( ( - - ( - ID ) ) ) ] [ [ ] } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int return ID ID - ( ( - - ( - ID ) ) ) ] [ [ ] } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int return ID ID - ( ( - [ ( - ID ) ) ) ] - [ ] } func ID ( ) { }",
  "func var ( ) { ID ID : bool var ID : int while ( - - ID * false / false ) { } if 123 { } }",
  "func ID ( true : [ ] [ - ID - ( ( - true ) ) ] int ) { } func ID ( ) { }",
  "func ID ( true : [ ] ID - ID - ( ( - true ) ) ] int ) { } func [ ( ) { }",
  "func ID ( true : [ ] - - ID ID ( ( - true ) ) ] int ) { } func [ ( ) { }",
  "func ID ID ) : bool { var ( : bool var ID : bool ID = ( 123 <= 123 ) }",
  "func ID ID ) : bool { var ( ID bool var : : bool ID = ( 123 <= 123 ) }",
  "func ID ( ID : [ ] false , ID : bool ) : [ true * - ID ( bool ) ] int { }",
  "func ID ( ID : [ ] false , ID : bool ) : [ true } - ID ( bool ) ] int { *",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : bool var ID : [ ] int while 123 / 123 / ) { } call ID ( ID }",
  "func ID ( ID : bool , ID : int int ID : bool ) { var ID : bool var ID : [ ] , while 123 / 123 / ) { } call ID ( ID }",
  "func ID ( ID : bool , ID : int int ID : bool ) { var ID : bool var ID : [ ] , ( 123 / 123 / ) { } call ID while ID }",
  "func ID ( ) : bool { call ID ( false * - ( ID or ID ) * ID ) 123 = ID } func ID ( ) { }",
  "func ID ( ) : bool { call ID ( false * - ( ID or ID ) ( ID ) 123 = ID } func ID * ) { }",
  "func ID ( ) : bool { call ID ( false * - ( ID or ID ) ( ID ) 123 = ID } * ID func ) { }",
  "func ID ( ) { print ( false / false * ID [ false ] [ true ] ) if false } } {",
  "func ID ( ) { print ( false / false * } [ false ] [ true ] ) if false ID } {",
  "func ID ( ) { print ( false / false * false [ false ] [ true ] ) if } ID } {",
  "func ID ID ID : [ ] int , ID : int , ID : [ ( false * ( ( ) * ( ( false ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID * ID : [ ] int , ID : int , ID : [ ( false ID ( ( ) * ( ( false ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool return true < ( 123 / - ) ) } func ID ( ID { }",
  "func } ( ) { var ID : bool var ID : bool return true < ( 123 / - ) ) ID func ID ( ID { }",
  "func } ( ) { var ID : bool var ID : bool return true < ( 123 / - ) ) ID func ID ( ID { }",
  "func ID ( ID : [ ] [ ID ( true - [ / ID ( ) - - false ) ] false ] int ) { }",
  "func ID ( ID : [ true [ ID ( ] - [ / ID ( ) - - false ) ] false ] int ) { }",
  "func ID ( ID : [ true [ ID ( ] - [ / ID ( ) - - false ) int false ] ] ) { }",
  "func ID ( ID : int , ID : [ ] [ ] } false - ( ( - ( false ) ) ) ] int , ID : int ) { } func ID ( ) { [",
  "func ID ( ID : int , ID : [ ] [ ] } false - ( ( - ( false { ) ) ] int , ID : int ) { } func ID ( ) ) [",
  "func ID ( ID : int , ID : [ ] [ ] } false - ( ( - : false { ) ) ] int , ID ( int ) { } func ID ( ) ) [",
  "func ID ( ID : [ ] bool , ID : [ ] [ ] bool , ( : int ) { print ( ( - - ( ( - - - ID ) ) ) ) if 123 { } } func ID ID ) { }",
  "func ID : ID : [ ] bool , ID : [ ] [ ] bool , ( ( int ) { print ( ( - - ( ( - - - ID ) ) ) ) if 123 { } } func ID ID ) { }",
  "func ID ( ) { if - - ( { ( ID ( ID ) ) ) ID } call ID ( ) }",
  "{ ID ( ) func if - - ( { ( ID ( ID ) ) ) ID } call ID ( ) }",
  "{ ID ( ) func if - - ( { ( ID ( ID ) ) ) ID } call ID ( ) }",
  "func ID - ) { var ID : bool if false / ( ( - ID ) ) / ( false { } while ID { } }",
  "func ID - ) { var ID : bool if false / ( ( - ID ) ) / ( } { } while ID { } false",
  "func ID - ) { var ID : bool if false / ( / - ID ) ) ( ( } { } while ID { } false",
  "func ID ( ) : int { var ID : int var ID : bool } func : ( ID ID bool ) : bool { var ID : [ ] bool var ID : int }",
  ": ID ( ) : int { var ID func int var ID : bool } func : ( ID ID bool ) : bool { var ID : [ ] bool var ID : int }",
  ": ID ( ) : int { var ID func int var ID : bool } func : ( ID ID bool ) : bool { var ID : [ ] int var ID : bool }",
  "func ID ( ID : int , ID : [ ] int , ID : int ) { print - - 123 * ID * ) ( 123 } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ID : int ) { print - - 123 * ID * ) ( 123 } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ID : int ) { print - - 123 * ID * ) ( 123 } func ID ( ) { }",
  "func ID ( ID : bool ) { while 123 - - ID * true - func ( ( false ) ) { } while - ( ID ) { } } - ID ( ) { }",
  "func ID ( ID : bool ) { while 123 - - ID * true - func ( ( false ) ) { } { - ( ID ) { } } - ID ( ) while }",
  "{ ID ( ID : bool ) { while 123 - - ID * true - func ( ( false ) ) { } func - ( ID ) { } } - ID ( ) while }",
  "func ID ( ) : [ - * 123 ID - 123 / ID ( ) - ( - true ) ] int { }",
  "func 123 ( ) : [ - * 123 ID - ID / ID ( ) - ( - true ) ] int { }",
  "func 123 ( } : [ - * 123 ID - ID / ID ( ) - ( - true ) ] int { )",
  "func ID ( ) : false { var ID : bool print ( - ID ( ) [ int ] ) }",
  "func ID ( ) : false { var ID : bool } ( - ID ( ) [ int ] ) print",
  ": ID ( ) func false { var ID : bool } ( - ID ( ) [ int ] ) print",
  "func ID ( ID : int , ID : bool , ID : bool ) - var ID : [ - 123 - { false / ( ID ) ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) - var ID : [ - 123 - { false / ID ( ) ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ] ID : bool ) - var ID : [ - 123 - { false / ID ( ) , int } func ID ( ) { }",
  "func ID ( ) { var 123 : [ 123 * false - - ( ID * ( 123 ) ) ] [ ] [ ] [ ] int var ID : [ ] [ ] bool }",
  "func ID ( ) { var 123 : : 123 * false - - ( ID * ( 123 ) ) ] [ ] [ ] [ ] int var ID [ [ ] [ ] bool }",
  "func ID ( ) { var 123 : : 123 ) false - - ( ID * ( 123 ) * ] [ ] [ ] [ ] int var ID [ [ ] [ ] bool }",
  "func ID ( ) : ( ID + - ( [ false / ID ) ) ] int { }",
  "func ID ( ) : ( ID + } ( [ false / ID ) ) ] int { -",
  "func ID ( ) : ( ID + } ( [ false / ID ) ] ) int { -",
  "func ) ( ID : [ ID [ ( false - ( false ) + - ID ) ] [ - - 123 ] ] bool ) { } func ID ( ID { }",
  "func ) ] ID : [ ID [ ( false - ( false ) + - ID ) ] [ - - 123 ( ] bool ) { } func ID ( ID { }",
  "func - ] ID : [ ID [ ( false - ( false ) + - ID ) ] [ - ) 123 ( ] bool ) { } func ID ( ID { }",
  "func ID ( ) { { while - false / ID ( - ( ( true ) ( ) { } } } func ID ) ) { }",
  "func ID ( ) { { { - false / ID ( - ( ( true ) ( ) while } } } func ID ) ) { }",
  "func ID ( ) { { { - false / ID ( - ( ( true ) ( ) while } } } func ID ) } { )",
  "func } ( ) : [ ] int { if true * - true * ID ( - true ) { } if ( ID ) { } ID",
  "func } ( ) : [ ] int * if true * - true { ID ( - true ) { } if ( ID ) { } ID",
  "func } ( ) : [ ] int * if true * - true ) ID ( - true ) { } if ( ID { { } ID",
  "func ID ( ) { print ID ( ID ( ID / true ID * ) ) }",
  "func ID ( ) { print ID ( ID ( ID } true ID * ) ) /",
  "func ID ( ) : int { var : : bool var ID : int } func ID ( ID ID bool , ID : bool , ID : int ) { }",
  "func ID ( ) var int { : : : bool var ID : int } func ID ( ID ID bool , ID : bool , ID : int ) { }",
  "func ID ) ( var int { : : : bool var ID : int } func ID ( ID ID bool , ID : bool , ID : int ) { }",
  "func ID ( ) : bool { ID [ 123 <= ( ( = ID ) ) ] - false if 123 { } } func ID ( ) { }",
  "func ID ( ) : bool { ID [ 123 <= ( ( { ID ) ) ] - false if 123 { } } func ID ( ) = }",
  "func ID } ) : bool { ID [ 123 <= ( ( { ID ) ) ] - false if 123 { } ( func ID ( ) = }",
  "func - ( ) : [ - ID ( ) + false * ( - ID 123 / ID * false ) ] bool { } func ID ( ) { }",
  "func - ( ] : [ - ID ( ) + false * ( - ID 123 / ID * false ) ) bool { } func ID ( ) { }",
  "func - ( ] : [ - ID ( ) + false * ( - ID * / ID 123 false ) ) bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ / / ( ( - ID false ID ) ) * - ( ( ( ID ) ) ) ] bool , ID : int ) { }",
  "func ) ( ID : int , ID : [ / / ( ( - ID false ID ) ) * - ( ( ( ID ) ) ID ] bool , ID : int ) { }",
  "func ID ) ( { var ID : int return - ID [ - ( - - ID ) ] }",
  "return ID ) ( { var ID : int func - ID [ - ( - - ID ) ] }",
  "return ID ) ( { var [ : int func - ID ID - ( - - ID ) ] }",
  "func ID ( ) : int { var ID : } ID [ - ( false / 123 ) ] [ false ] ] int [",
  "func ID ( ) : int { var ID : } ID [ - ( false / 123 ) ] [ false ] ] int [",
  "func ID ( [ : int { var ID : } ID ) - ( false / 123 ) ] [ false ] ] int [",
  "func ID ( ) : bool { var ID : int var ID : bool ID ( ( ID [ ( ID ) ] ID - - - ID ] ) ) = true while ( [ ) { } }",
  "func ID ( ) : bool { var ID : int var ID : bool ID ( ( while [ ( ID ) ] ID - - - ID ] ) ) = true ID ( [ ) { } }",
  "func ID ( ) : bool { [ ID : int var ID : bool ID ( ( while [ ( ID ) ] ID - - - ID ] ) ) = true ID ( var ) { } }",
  "func ID ( ID : [ ] bool , ID : [ ( ( bool [ true ] ) ) ] ID ) { } func ID ( ) { }",
  "func , ( ID : [ ] bool ID ID : [ ( ( bool [ true ] ) ) ] ID ) { } func ID ( ) { }",
  "func , ( ID : [ ] bool ID ID : [ ( ( bool [ true ID ) ) ] ] ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool ) : bool { var ID : true var ID : int if true * false * - int { } }",
  "func ID ( ID : [ { int , ID : bool ) : bool { var ID : true var ID : int if true * false * - int ] } }",
  "func ID ( ID : , { int [ ID : bool ) : bool { var ID : true var ID : int if true * false * - int ] } }",
  "func ID ( ) { var ID : bool var ID : [ ] bool call ID ( ) while { ( true ) ) { } } func ID ( ) ( }",
  "func ID ( ) { var ID : bool var ID : [ ] bool call ID ( ) while { ( true ) ) { } } func ID ( ) ( }",
  "func ID ( ) { var ID : bool var ID : [ ] ( call ID ( ) while { ( true ) ) { } } func ID ( ) bool }",
  "func ID ( ID : [ ] ( ) : bool { var ID : bool ID = - false / ID ( ) * false } func ID bool ) { }",
  "func ID ( ID : [ ] ( ) : bool { var ID : bool ID = - / false ID ( ) * false } func ID bool ) { }",
  "func - ( ID : [ ] ( ) : bool { var ID : bool ID = ID / false ID ( ) * false } func ID bool ) { }",
  "func ID ( ) { var ID : bool ) ID ( ) call ID ( - ( ( ( false ) ) call ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool ) ID false ) call ID ( - ( ( ( ( ) ) call ) } func ID ( ) { }",
  "func ID ( ) { var ID bool : ) ID false ) call ID ( - ( ( ( ( ) ) call ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID ] bool ) { var ID : int var ID : [ ] bool return } func ID ( ) : [ : int { }",
  "func ID ( ID : [ ] } , ID ] bool ) { var ID : int var ID : [ ] bool return bool func ID ( ) : [ : int { }",
  "func ID ( ID : [ ] } , ID ] bool ID { var ID : int var ID : [ ] bool return bool func ) ( ) : [ : int { }",
  "func ID ( ) : int { var ID : bool } ID : int while ( - - - ( - false ) ) { } call ID ( ) var",
  "func ID ( ) : int { var ID : ) } ID : int while ( - - - ( - false ) bool { } call ID ( ) var",
  "func ID ( ) : } { var ID : ) } ID : int while ( - - - ( - false ) bool { int call ID ( ) var",
  "func ID ( - : bool { ID [ ID ( ) != ID [ ) false ] ] [ 123 ] = ( ID ) } func ID ( ) { }",
  "func ID ( - : ID { ID [ ID ( ) != ID [ ) false ] ] [ 123 ] = ( ID ) } func bool ( ) { }",
  "func ID ( ) { call ID ( ID ( ) [ 123 + - ID [ - ( - ( ( ( ID ) ) ) ) ] [ ( - ID - ) ] ] ) }",
  "func ID ) ( { call ID ( ID ( ) [ 123 + - ID [ - ( - ( ( ( ID ) ) ) ) ] [ ( - ID - ) ] ] ) }",
  "func ID ) ( { call ID ( ID ( ) [ 123 + - ID [ ID ( - ( ( ( - ) ) ) ) ] [ ( - ID - ) ] ] ) }",
  "func ID ( ID : int , ID : int ) { var ID : bool ID [ ID ( true ) ] [ - false ] = ( - - - - ( - ID ) call ID - ) }",
  "func ID ( ID : int , ID false int ) { var ID : bool ID [ ID ( true ) ] [ - : ] = ( - - - - ( - ID ) call ID - ) }",
  "func ID ( ID false int , ID : int ) { var ID : bool ID [ ID ( true ) ] [ - : ] = ( - - - - ( - ID ) call ID - ) }",
  "func - ( ) : int { while true + ( ID ID [ ( ( 123 ) ) ] ) + ID { } ID = - - - ( - ID ) }",
  "func - ( ) : int ) while true + ( ID ID [ ( ( 123 ) { ] ) + ID { } ID = - - - ( - ID ) }",
  "func - ( ) : int ( while true + ( ID ID [ ( ) 123 ) { ] ) + ID { } ID = - - - ( - ID ) }",
  "func ID ( ID : int , ID : [ false * ( + * ID + ( - ID ) true false ) * ( true ) ] bool , ID : bool ) { }",
  "func ID ( ID : int , ID : [ false * ( + * ID + ( - ID ) true false bool * ( true ) ] bool , ID : ) ) { }",
  "func ID ( ID + int , ID : [ false * ( + * ID : ( - ID ) true false bool * ( true ) ] bool , ID : ) ) { }",
  "func ID ( - : bool , ID : [ true / true * ID ID ( ( - ( ID ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { while - - ( - ( ( ID - false func ) ) { } if - 123 { } } ) ID ( ) { }",
  "func ID ( ) { while - - ( - ( ( ID - false func ) ) { } if - ID { } } ) 123 ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ ] int var var ID : int { ID : bool while - 123 { } } call ID ( ) }",
  "func ID ( ) { var ID : bool var ID } [ ] int var var ID : int { ID : bool while - 123 { : } call ID ( ) }",
  "func ID ( ) { var ID : bool var ID } [ ] int var var ID : int { ID : bool while - 123 { : } call ID ( ) }",
  "func ID ( ID : int : ID , bool , ID : [ ( ( ID * ID ) ) ] [ ] bool ) { }",
  "func ID ( ID : int : ID , bool , ID : [ ( ( ID * ID ) ] ] [ ) bool ) { }",
  "func ID ( ID : int : ID , { , ID : [ ( ( ID * ID ) ] ] [ ) bool ) bool }",
  "func ID ( ID : bool , ID : [ ( ID ( ID ( ( ( 123 ) ) ) ) ) ] bool , ID : bool ) { } func ( ID ) { }",
  "func ID ) ID : bool , ID : [ ( ID ( ID ( ( ( 123 ) ) ) ) ) ] bool , ID : bool ( { } func ( ID ) { }",
  "func ID ( ) { call ID ( ) return ) func ID ( } { }",
  "func ID ( call { ) ID ( ) return ) func ID ( } { }",
  "func ) ( call { ) ID ( ) return ID func ID ( } { }",
  "func ID : ) ( bool { var ID : int while ( ( ( 123 ) ) ) { } }",
  "func ID : ) ( bool { var ID : int } ( ( ( 123 ) ) ) { } while",
  "func ID : ) ( bool { var ID : int } ( ( ( 123 ) ) ) } { while",
  "func ID ( ) : int { var ID : [ - ( false / ID ( ) + ID ) ] [ ID [ ] int var ] : int } func ID ( ) { }",
  "func ID [ ) : int { var ID : [ - ( false / ID ( ) + ID ) ] [ ID ( ] int var ] : int } func ID ( ) { }",
  "func ID [ ) : int { var ID : [ - ( false / ID ( ) ) ID + ] [ ID ( ] int var ] : int } func ID ( ) { }",
  "func ID ( ) { var ID : bool print - ( - 123 * - - - ( ( ( ( false ) ) ) ) * 123 false ) }",
  "func ID ( ) print var ID : bool { - ( - 123 * - - - ( ( ( ( false ) ) ) ) * 123 false ) }",
  "func ID ( ) print ) ID : bool { - ( - 123 * - - - ( ( ( ( false ) ) ) ) * 123 false var }",
  "func ID ( ID int : ) { var ID : int if 123 >= ( - - ID ) { } } func ID ( ) { }",
  "func ID ( ID int : ) { - ID : int if 123 >= ( var - ID ) { } } func ID ( ) { }",
  "func ID ( ID int : { { - ID : int if 123 >= ( var - ID ) { } } func ID ( ) ) }",
  "func ID ( ) : bool { var ID : int var } func ID ( ) { return ID : int }",
  "func ID ( ) : bool { var ID : int var } func ID ( : { return ID ) int }",
  "func { ( ) : bool ID var ID : int var } func ID ( : { return ID ) int }",
  "func ID ( } { if ( - true / ( - - false * ( ID ) ) / ID ) { } if - 123 { } )",
  "func ID ( } { if ( - true / ( - - false * ( ID ) if / ID ) { } ) - 123 { } )",
  "func ID ( ID : [ ] bool , ID - int ) : bool { while - - : ID [ ID ] { } }",
  "func ID ( ID : [ bool bool , ID - int ) : ] { while - - : ID [ ID ] { } }",
  "func ID ( ID : [ bool bool , ID - int ) : ] { while - - : ID [ ID ] { } }",
  "func ID ( ID : [ ] bool ] { var ID : [ 123 + 123 * ID ( - - ID ) * ID ] bool var ID : [ ] [ ) [ ] int } func ID ( ) { }",
  "func ID ( ID : [ ] bool ] { var ID : [ 123 + 123 * ID ( - - ID ) * ID ] bool var int : [ ] [ ) [ ] ID } func ID ( ) { }",
  "func ID ( ID : [ ] bool ] { var ID : [ 123 + 123 * ID ( - ] ID ) * ID ] bool var int : [ ] [ ) [ - ID } func ID ( ) { }",
  "func ID ( ID : int bool ID : , , ID : bool ) : int { print ( ( ( ( ID ) ) ) ) }",
  "func ID ( ID : int bool ID : , , ID : ) ) : int { print ( ( ( ( ID bool ) ) ) }",
  "func ID ( ID : ) bool ID : , , ID : ) ) : int { print ( ( ( ( ID bool ) ) int }",
  "func } ( ID : int ) { var ID : int while ( ID [ - 123 ] [ ( false ) ] ) { ID } func ID ( ) { }",
  "func } ( ID : int ) { ( ID : int while ( ID [ - 123 ] [ var false ) ] ) { ID } func ID ( ) { }",
  "func } ( ID : int ) { ( ID : int while ( ID [ - 123 false [ var ] ) ] ) { ID } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : bool ID [ ID ( = [ ( - - ID ) ] [ - ID ] ] ) ID ID = ( ( true ) ) }",
  "func ID ( ) : bool { var ID : int = ID : bool ID [ ID ( var [ ( - - ID ) ] [ - ID ] ] ) ID ID = ( ( true ) ) }",
  "func ID : ID : int , ID : int , ID ( [ ID / 123 + - - ID ( ) + ID ] bool ) { } func ID ( ) { }",
  "func ID : ID ID int , ID : int , ID ( [ ID / 123 + - - ID ( ) + ID ] bool ) { } func : ( ) { }",
  "func ID : ID ID int , ID : int , ID ( [ ID / 123 + - - ID ( ) + ID ] bool ) { } func : ( ) { }",
  "func ID ( ID : int , ID var bool ) : int { : ID : bool }",
  "func ID ( ID : int , ID var bool ) : int { : } : bool ID",
  "func ID ( ID : int , ID var : ) : int { : } bool bool ID",
  "func ID ( ID ID int ) { var ID : bool var ID : [ true - ID ( ( - ( false ) ) ) ] bool } func : ( ) { }",
  "func ID ( ID ID int ) { var ID : bool ID var : [ true - ID ( ( - ( false ) ) ) ] bool } func : ( ) { }",
  "] ID ( ID ID int ) { var ID : bool ID var : [ true - ID ( ( - ( false ) ) ) func bool } func : ( ) { }",
  "func ID ( ID : bool , ID : int ) : int ] [ ] int { var ID : int var ID : [ return - - ID }",
  "func ID ( { : bool , ID : int ) : int ] [ ] int ID var ID : int var ID : [ return - - ID }",
  "func ID ( { : bool , ID : int ) : int ] [ ] int ID var ID : int var ID : [ return - - ID }",
  "func ID ( ) : bool { } func ID ( ) { return - ID ( ] [ ID ) [ ( 123 ) ] }",
  "func ID ( ) : bool } } func ID ( ) { return - ID ( ] [ ID ) [ ( 123 ) ] {",
  "func ID ( ID : int , ID : int , ID : int ) ID print ID / ID [ ID ] * ID while ID { } } func { ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) ID print ID * ID [ ID ] / ID while ID { } } func { ( ) { }",
  "func ID ( ID : int , ID : [ - ID ] - ( - false * ID ) ] ] [ ] [ ] int , ID : [ [ [ ] [ ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ID : int , ID : [ - ] ] - ( - false * ID ) ] ] [ ] [ ] int , ID : [ [ [ ] [ ] [ ] [ ] [ ID bool ) { }",
  "func ID ( ID : bool , ID : ( ] [ ] int ) { return false / ID [ true ] * ( ( ( - ID ) ) ) } func ID [ ) { }",
  "func ID ( ID : * , ID : ( ] [ ] int ) { return false / ID [ true ] bool ( ( ( - ID ) ) ) } func ID [ ) { }",
  "func ID ( ID : * , ID : ( ] [ ] int ) { return ID / ID [ true ] bool ( ( ( - ID ) ) ) } func false [ ) { }",
  "func ID ( ID : int , ID : [ true * true } ( ID ( ( - - true ) ) ) ] bool ) { *",
  "func ID ( ID : int , ID : [ true * true } ( ID ( ( - - true ) ) ) ] bool ) { *",
  "func ID ( ID : int , ID : [ true ( true } * ID ( ( - - true ) ) ) ] bool ) { *",
  "func ID ( ) { if ( true / ID 123 [ / ID ] * - ( - ID ) ) { } } func ID ( ) { }",
  "func ID ( ) { if ( true / ID 123 [ / ID ] * - ( - ID ) ) { } ) func ID ( } { }",
  "func ID ( ) { if ( true / / 123 [ ID ID ] * - ( - ID ) ) { } ) func ID ( } { }",
  "false ID ( ) : int { var ID : int { while ID + true * func / ( ID ) + ID { } } } func ID ( ) { }",
  "false ID ( ) : int { ID ID : int { while ID + true * func / ( ID ) + ID { } } } func var ( ) { }",
  "false ID ( ) : int { ID ID : int { while ID } true * func / ( ID ) + ID { } + } func var ( ) { }",
  "func ID ( ) : ) ID * - ( - ( ( ( false ) ) ) [ / ID ] int { }",
  "func ID ( ) : ) ID * - ( - ( ( ( false ) ID ) [ / ) ] int { }",
  "func ID ( ) : ) ID * / ( - ( ( ( false ) ID ) [ - ) ] int { }",
  "func ID ( ) { var ID : [ ID ( ) [ ID } - ( ( 123 ) ) ) ] ] bool var ID : bool (",
  "func ID ( ) { var ID : [ ID ( ) [ ID } - ( ( 123 ) ) ) ] ] bool var ID : bool (",
  "( ID ( ) { var ID : [ ID ( ) [ ID } - ( ( 123 ) ) ) ] ] bool var ID : bool func",
  "func ID ( ID , bool : ID : int , ID : [ ( - false / ID [ true ] [ - ID ] * ( ID ) ) ] bool ) { }",
  "func ID ( ID , bool : ID : int , ID : [ ( - false / ID [ true ] [ - ID ] * ( ID ) ) ] bool ) { }",
  "func ID ( ID , bool : ID : int , ID : ) ( - false / ID [ true ] [ - ID ] * ( ID ) ) ] bool [ { }",
  "func ID ( ID { bool , ID : int , ID : bool ) : bool { var ID : bool var ID : int if - true { } if ID { } } func ID ( ) : }",
  "func ID ( ID { bool , ID : int , ID : bool ) : bool : var ID { bool var ID : int if - true { } if ID { } } func ID ( ) : }",
  "func ID ( var { bool , ID : int , ID : bool ) : bool : var ID { bool ID ID : int if - true { } if ID { } } func ID ( ) : }",
  "func ID ( ID : int , ID : int , ID : bool ) { var print : bool ID ( ) [ ID * ID ] [ ID ] = false ID ID } func ID ( ) { }",
  "func ID ID ID : int , ID : int , ID : bool ) { var print : bool ( ( ) [ ID * ID ] [ ID ] = false ID ID } func ID ( ) { }",
  "func ID ID ID : int , ID : int , ID : bool ) { var print } bool ( ( ) [ ID * ID ] [ ID ] = false ID ID : func ID ( ) { }",
  "func ID ( ID { int ) : var ID : bool var ID : [ true / false / - ( false ) ] int }",
  "func ID int ID { int ) : var ID : bool var ID : [ true / false / - ( false ) ] ( }",
  "func ID int ID { int ) : var ID : bool var ID : [ true / false / false ( - ) ] ( }",
  "func ID ( / { print - ID - true * - ( false ) - ID ) } func ID ( ) { }",
  "func ID ( / { print - ID - true * - ( false ) ID ID ) } func - ( ) { }",
  "func ID ( / { print - ID - true * - ID false ) ( ID ) } func - ( ) { }",
  "func ID ( ID : bool ) : int { var ID : [ - - ( ( ID ) } ] bool var ID : [ ] [ ] [ ] int ) func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : [ - - ( ( ID ) } ] bool var ID : [ ] [ ] [ ] int ) func ID ( ) { }",
  "func ID ( ID : bool [ : int { var ID : [ - - ( ( ID ) } ] bool var ID : [ ] ) ] [ ] int ) func ID ( ) { }",
  "func ID ( ) { if ) false and - true - 123 * ID / ID + - ID and ( ID ( ) { } print ( 123 ) } func ID ( ) { }",
  "func ID ( ) { if ) false ) - true - 123 * ID / ID + - ID and ( ID ( ) { } print ( 123 ) } func ID ( and { }",
  "func ID ( ) { ) ) false if - true - 123 * ID / ID + - ID and ( ID ( ) { } print ( 123 ) } func ID ( and { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : [ ] int { ID ID ( ) print call } }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : call ] int { ID ID ( ) print [ } }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : call ] int { ID ID ( ) print [ } }",
  "func ID ( ID : int , ID : int , ID ] [ ID [ ( ID ( ) ) : ] [ ] int ) { }",
  "func ID ( ID : int , ID ID int , ID ] [ ID [ ( : ( ) ) : ] [ ] int ) { }",
  "func ID ( ID : int , ID ID int , ID ) [ ID [ ( : ( ] ) : ] [ ] int ) { }",
  "func ID ) ) : [ - true >= - true and - 123 * ID ( ) * - - ( true ) ] int { } func ID ( ( { }",
  "func ID ) ) : [ - true >= - true and - 123 * ID ( ) * - func ( true ) ] int { } - ID ( ( { }",
  "func ID ) ) : [ - true >= - ( and - 123 * ID ( ) * - func ( true ) ] int { } - ID ( true { }",
  "func ID ( ) { var int : [ ( ID ( ) [ ( ( - ID ) ) ] [ ID ] ) ] ID }",
  "func ID ( ) { var int : [ ( ID ( ) [ ( ( - ID ) ) ] [ ID ] ) ] ID }",
  "func ID ( ) { var int : [ ID ( ( ) [ ( ( - ID ) ) ] [ ID ] ) ] ID }",
  "func ID ( ) { var ID : [ ] } call ID ( ) return bool func ID ( ID : int ) : int { call ID ( ) if ID { } }",
  "func ID ( ) { var ID : [ ] } call ) ( ID return bool func ID ( ID : int ) : int { call ID ( ) if ID { } }",
  "func ID ( ) { var ID : [ ] } call ) ( ID return bool func ID ( ID : int ) : int { call ID ( ) if } { } ID",
  "func ID ( ID : ( ] bool ) : int { var ID : bool print - ID [ ) [ ID ] [ 123 ] }",
  "func ID ( ID : ( bool ] ) : int { var ID : bool print - ID [ ) [ ID ] [ 123 ] }",
  "func ID ( ID : ( bool ] ) : int { var ID : bool print - ID [ ) [ ID ] [ 123 ] }",
  "ID ID ( ) { var ID : int var ID : bool func ( ( ( ( - true ) ) ) ) = true while ( ( ID ) ) { } } func ID ( ) { }",
  "} ID ( ) { var ID : int var ID : bool func ( ( ( ( - true ) ) ) ) = true while ( ( ID ) ) { } ID func ID ( ) { }",
  "} ID ( ) { var ID : int var ID : bool func ( ( ( ( - ) true ) ) ) = true while ( ( ID ) ) { } ID func ID ( ) { }",
  "func ID 123 ) { var ID : int ID = ( - ( ( - - - ( ( ( ID ) ) ) + ( ID ) ) ) }",
  "func ID 123 ) { var ID - int ID = ( - ( ( - : - ( ( ( ID ) ) ) + ( ID ) ) ) }",
  "func ID 123 ) { var ID - int ID = ( - ( ( - : - ( ( ( ID ) ) ) + ( ID ) ) ) }",
  "func ID ( ) { while ( ( true / false * ID [ - - - - true ] ) ) { } call ID ( ) } { ID ( ) func }",
  "func ID ( ) { while ( ( true / false * ID [ - - - - true ] ) ) { } call ID ( ) } { ID ( ) func }",
  "func ID ( ) : [ ] [ ] int { var ID : bool var ID : [ ] bool } func ID ( ID : bool , ID : bool { ID : bool ) , }",
  "func ID ( ) : [ ] [ ] int { var ID : bool var ID : [ ] bool } func ID ( ID : bool , ID : bool { ID : bool ) , }",
  "func ID ( ) : [ ID [ ] int { var ID : bool var ID : [ ] bool } func ] ( ID : bool , ID : bool { ID : bool ) , }",
  "func ID ( ) func var ID : int ID ( ) [ ID [ - ( ( ID ) ) ] ] = true } { ID ( ) { }",
  "func ID ( ) func var ID : int ID ( ) [ ID [ - ( ( ID ) ) ] ] = true } { ID ( ) { }",
  "func ID ( ) func var ID : int ID ( ) ] ID [ - ( ( ID ) ) [ ] = true } { ID ( ) { }",
  "func ID ( ) { - false + ( false * while false + - ID + - ( - false ) ) { } if ( false ) { } }",
  "func } ( ) { - false + ( false * while false + - ID + - ( - false ) ) { } if ( false ) { } ID",
  "func } ( ) { - false + ( false * while false + } ID + - ( - false ) ) { - if ( false ) { } ID",
  "func ID ( ID : bool ) { var ID : int { var ID : bool return } while ID ( ) [ true ] [ ) ] { } } func ID ( ID { }",
  "func ID ( ID : bool ) { var ] : int { var ID : bool return } while ID ( ) [ true ] [ ) ID { } } func ID ( ID { }",
  "int ID ( ID : bool ) { var ] : func { var ID : bool return } while ID ( ) [ true ] [ ) ID { } } func ID ( ID { }",
  "func ID ( ID : [ - false / ) ID ( ) [ ( - true ) ] [ 123 ] ] int - { } func ID ( ) { }",
  "func ID ( ID : [ int false / ) ID ( ) [ ( - true ) ] [ 123 ] ] - - { } func ID ( ) { }",
  "func ID ( ID : [ int false / ) ID ( ) [ ( - ] ) ] [ 123 ] true - - { } func ID ( ) { }",
  "func ID ( ID : int { ID ( ) [ ) ( ) * ( - ( true ) ) / - ( ( false ) ) ] = ( false ) while 123 { } }",
  "func ID ( ID : int { ID ( ) ) ) ( ) * ( - ( true ) ) / - ( ( false ) [ ] = ( false ) while 123 { } }",
  "func ID ( ID : int { ID ( ) ) ) ( ) * ( - ( true ) ( / - ( ) false ) [ ] = ( false ) while 123 { } }",
  "func ID ( ID true int ) { print ID ( - : * ( - true ) ) }",
  "func ID ( ID true int ) { print ID ) - : * ( - true ( ) }",
  "func ID ( ID true int ) { print ID - ) : * ( - true ( ) }",
  "func ) ( ) { var ID : [ - - ( ( ID [ ( ID ) ] ) ID ] bool var ID : bool } func ID ( ) { }",
  "func ) ( ) { var ID : [ - { ( ( ID [ ( ID ) ] ) ID ] bool var ID : bool } func ID ( ) - }",
  "func ID ( ID : bool } ID : bool ) { } func ID ( ) { var ID : bool return - false / ( ID ) ,",
  "func ID ( ID : bool var ID : bool ) { } func ID ( ) { } ID : bool return - false / ( ID ) ,",
  "func ID ( ID : bool var ID : bool ) { } func ID ( ) { } ID : bool return - false / ( , ) ID",
  "func ID ( [ : int ) { return ( false * false * ID ( ) [ ( ( - 123 ) ) ] ID ID ] ) } func ID ( ) { }",
  "func ID ( [ : int ) { return ( false * false [ ID ( ) * ( ( - 123 ) ) ] ID ID ] ) } func ID ( ) { }",
  "func ) ( [ : int ) { return ( false * false [ ID ( ) * ( ( - 123 ) ) ] ID ID ] ID } func ID ( ) { }",
  ", ID ( ID : bool func ID : int ) { }",
  ", ID ( ID ID bool func : : int ) { }",
  "int ID ( ID ID bool func : : , ) { }",
  "] ID ( ID : bool , ID : [ func int ) : int { var ID : bool } func ID ( ) { }",
  "] { ( ID : bool , ID : [ func int ) : int ID var ID : bool } func ID ( ) { }",
  "] { ( ID : bool , ID : [ func int ) } int ID var ID : bool } func ID ( ) { :",
  "ID func ( ) : [ ] [ ] bool { var ID : int print false / ID ( ) [ ( 123 ) ] } func ID ( ) { }",
  "ID func ( ) : [ ] [ : bool { var ID ] int print false / ID ( ) [ ( 123 ) ] } func ID ( ) { }",
  "ID func ( ) : [ ] [ : bool { var ID ] int print false / ID ( } [ ( 123 ) ] } func ID ( ) { )",
  "func ID ( ) : bool { } func ID ( ID : [ ( ID [ ( false ) ) ) ] bool ] { }",
  "func ID ( ) : bool func } { ID ( ID : [ ( ID [ ( false ) ) ) ] bool ] { }",
  "func ID ( ) : bool func } { ID ID ( : [ ( ID [ ( false ) ) ) ] bool ] { }",
  "func ID ( ID : [ true ( - false + ID * true * - ID ) - - ID ] [ ] int ) { } func ID ( ) { }",
  "func ID ID ID : [ true ( - false + ID * true * - ID ) - - ( ] [ ] int ) { } func ID ( ) { }",
  "func ID ID ID : [ true ] - false + ID * true * - ID ) - - ( ( [ ] int ) { } func ID ( ) { }",
  "func ID ) ID : bool ) { var ID : int var ID : [ ID ( ) [ ID ( ) ] [ ( ( - ID ) ) ] ] bool } func ID ( ( { }",
  ") ID ) ID : bool ) { var ID : int var ID : [ ID ( func [ ID ( ) ] [ ( ( - ID ) ) ] ] bool } func ID ( ( { }",
  ") ID ) ID : bool ) { var ID : int var ID : [ ID ( func [ ID ( ) ( [ ( ( - ID ) ) ] ] bool } func ID ] ( { }",
  "func print ( ) { var ID : bool ID false / 123 / ID ( ) + true + ID ID = ( ID ) } func ID ( ) { }",
  "func print ( ) { var ID : bool ID false / 123 / ID ( ) + ID + true ID = ( ID ) } func ID ( ) { }",
  "func print ( ) { var ID : bool ID false / + / ID ( ) 123 ID + true ID = ( ID ) } func ID ( ) { }",
  "func ID ( ) : [ - 123 123 ( - ( ID / 123 * * ) ) ] [ ] bool { }",
  "func ID ( ) : [ - 123 123 ( - ( ID / 123 * * ) ] ] [ ) bool { }",
  "func ID ( ) : [ - 123 123 ( - ( 123 / ID * * ) ] ] [ ) bool { }",
  "func ID ] ID : bool , ID : [ ID [ - - ( false * - - - - ( ID ) ) ( ] bool , ID : [ ] [ ] bool ) { }",
  "func ID : ID : bool , ID : [ ID [ - - ( false * - - - - ( ID ) ) ( ] bool , ID ] [ ] [ ] bool ) { }",
  "func ID : ID : bool , ID : ID ID [ - - ( false * - - - - ( ID ) ) ( ] bool , [ ] [ ] [ ] bool ) { }",
  "func ID 123 ) { return ( ID ( 123 / - ID [ ( ] ) ) } func ID ( ) { }",
  "func ID 123 ) { return ( ( ( 123 / - ID [ ID ] ) ) } func ID ( ) { }",
  "func ID 123 ID { return ( ( ( 123 / - ID [ ID ] ) ) } func ) ( ) { }",
  "func ID ( ) : [ ( true * ( 123 and - - ( ID ) and 123 ) * ID ) ] [ ] func { } int ID ( ) { }",
  "func ID and ) : [ ( true * ( 123 ( - - ( ID ) and 123 ) * ID ) ] [ ] func { } int ID ( ) { }",
  "func ID and ) : [ ( true * ( 123 ( - - ( ID ) and 123 * ) ID ) ] [ ] func { } int ID ( ) { }",
  "func ID ( ) : [ - - - ID * - - ID ( ( ID ) func * true ] bool { } ) ID ( ) { }",
  "func ID ( ) : [ - ) - ID * - - ID ( ( ID ) func * true ] bool { } ) ID ( - { }",
  "func ID ( ) : [ - ) - ID * - - ID ( ( ID - func * true ] bool { } ) ID ( ) { }",
  "func ] ( ID : [ - 123 * ID ( ID + ( ID ) ) ID bool ) { }",
  "func ] ( ID : [ - 123 * ID ( ID + ( ID ) ) ID ) bool { }",
  "func ] ( ID ( [ - 123 * ID : ID + ( ID ) ) ID ) bool { }",
  "func ID ( ) { var ID : int var ID : [ ( ID [ - ( true ) ] [ } ] ) ] int ID",
  "func ID ( ) { var ID : int ( ID : [ ( ID [ - var true ) ] [ } ] ) ] int ID",
  "func ID ( ) [ var ID : int ( ID : { ( ID [ - var true ) ] [ } ] ) ] int ID",
  "func ID ( int : bool ) { var ID : ID ID ( - ( ID * 123 ) ) = ID print ID } func ID ( ) { }",
  "func ID ( int : bool ) { var ID : ID ID ( - ( ID * 123 ) func = ID print ID } ) ID ( ) { }",
  "func ID ( int : bool ) { var ID : ID ID ( - ( ID * 123 ) func = } print ID ID ) ID ( ) { }",
  "func ID ( ) { var ID : bool if * false - ( true * - - false ) / ( - ( ( true ) ) ) { } }",
  "func ID ( ) { var ID : bool if * false * ( true - - - false ) / ( - ( ( true ) ) ) { } }",
  "func ID { ) ( var ID : bool if * false * ( true - - - false ) / ( - ( ( true ) ) ) { } }",
  "func ID ( ID : [ ] bool , ID true [ 123 * true / - - ( - : ) ] int ) { }",
  "ID func ( ID : [ ] bool , ID true [ 123 * true / - - ( - : ) ] int ) { }",
  "ID func ( true : [ ] bool , ID true [ 123 * ID / - - ( - : ) ] int ) { }",
  "ID ID ( ) : [ ] bool { var ID : int var ID : [ ] bool ID [ - false + func ] [ - true ] = - - ( - ( ( ID ) ) ) }",
  "ID ID ( ) : [ ] bool { var ID : int var ID ] [ : bool ID [ - false + func ] [ - true ] = - - ( - ( ( ID ) ) ) }",
  "ID ID ( ) : [ ] bool { var ID : int var ID ] [ : bool ID [ - false + func ] [ - true ] = - - ( - ( ( ID ) ) ) }",
  "func ID ( ) : int { var ID * int return ( false : ( ID ( ) ) / ID ) } func ID ( ) { }",
  "func ID ( ) : int ID var ID * int return ( false : ( { ( ) ) / ID ) } func ID ( ) { }",
  "func ID ( func : int ID var ID * int return ( false : ( { ( ) ) / ID ) } ) ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] { while 123 * 123 / - - ( true ) int } while false { } }",
  "func ID var ) : int { ( ID : [ ] { while 123 * 123 / - - ( true ) int } while false { } }",
  "func ID var ) : int { ( ID : false ] { while 123 * 123 / - - ( true ) int } while [ { } }",
  "func ID ( ) : bool bool var ID : { var ID : [ ] int if - - - ( ( 123 ) ) { } print - ( ID ) } func ID ( ) { }",
  "func ID ( ) : bool bool var ID : { var ID : [ ] int if - - - ( ( 123 ) ) { } print - ( ID ) } func ID ( ) { }",
  "func ID ( ) : bool bool var ID : { var ID : [ ] int if - - 123 ( ( - ) ) { } print - ( ID ) } func ID ( ) { }",
  "func ID ( ID : [ ID [ ID ( ) [ 123 * ( ] ) false ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ID [ ID ( ) [ 123 * ( ] ) false ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ID [ ID ( ) [ 123 * ( ] ) false ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ID ) : bool { var ID : bool ID ( ( - ID [ ( ( ( ) ) ] ) ) = - false } func ID ( ) { }",
  "func ID ID ) : bool { var ID : bool ID ( ( - ID [ ( ( ( ) ID ] ) ) = - false } func ) ( ) { }",
  "func ID ID ) : ( { var ID : bool ID ( ( - ID [ bool ( ( ) ID ] ) ) = - false } func ) ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ID ( ) [ - true * ) true ) * - - true ] ] bool , ID : int ( { }",
  "func ID ( ID : int ] bool , ID : [ ID ( ) [ - true * ) true ) * - - true ] ] bool , ID : [ ( { }",
  "func ID ( ID : int ] bool , ID : ID [ ( ) [ - true * ) true ) * - - true ] ] bool , ID : [ ( { }",
  "func ID == ) : int { var ID : int var ID : [ false + - 123 ( - ID ] [ ] int }",
  "func ID == ) : int { var ID : int var ID : [ false + - 123 ID - ( ] [ ] int }",
  "func ID == ) var int { var ID : int : ID : [ false + - 123 ID - ( ] [ ] int }",
  "func ID ( ID ID [ ] [ ] [ 123 * - ( true + : ( ) - ( ID ) ) ] int ) { }",
  "func ID ( ( ID [ ] [ ] [ 123 * - ( true + : ID ) - ( ID ) ) ] int ) { }",
  "func ( ( ( ID [ ] [ ] [ 123 * - ( true + : ID ) - ID ID ) ) ] int ) { }",
  "func ID ( ID : int ) { if ID - ( / ( 123 ) ) { } print - false }",
  "func ID ( ID : int ) { if ID - ( / ( 123 - ) { } print ) false }",
  "func ID ( ID : ) int { if ID - ( / ( 123 - ) { } print ) false }",
  "func ID ( ) : bool { int ID : bool var ID : var while - 123 < ( ID ) { } ID = - ID }",
  "func ID ( ) : bool { int ID : bool ID var : var while - 123 < ( ID ) { } ID = - ID }",
  "func ID ( ) : bool { int ID : bool ID var : var while - 123 < ( ID ) { } ID = - ID }",
  "func ID var ) : bool { ( ID : [ ] bool var ID : int return }",
  "func ( var ) : bool { ID ID : [ ] bool var ID : int return }",
  "int ( var ) : bool { ID ID : [ ] bool var ID : func return }",
  "func ID : ID ( bool ) : [ 123 / ( - 123 + - 123 > - ID ) ] [ ] int { }",
  "func ID : ID / bool ) : [ 123 ( ( - 123 + - 123 > - ID ) ] [ ] int { }",
  "func ID : ID / bool ) > [ 123 ( ( - 123 + - 123 : - ID ) ] [ ] int { }",
  "func ID ( ) { var ID : int while ( ( - - ID * - ID ) { ) } }",
  "func ID ( ) { var ID } int while ( ( - - ID * - ID ) { ) : }",
  "while ID ( ) { var ID } int func ( ( - - ID * - ID ) { ) : }",
  "func [ ( ID : int ) : int { var ID : int var ID : [ ID ( ) ID false ] [ - ( ID ) ] ] int } func ID ( ) { }",
  "func [ ( ID : int ) : ) { var ID : int var ID : [ ID ( ) ID false ] [ - ( ID int ] ] int } func ID ( ) { }",
  "func [ ( ID : int ) : ) { var ID : ( var ID : [ ID int ) ID false ] [ - ( ID int ] ] int } func ID ( ) { }",
  "func ID ( ID bool [ ] [ ] : , ID : bool , ID : int ) : bool { { var ID : [ ] int } } func ID ( ) { }",
  "func ID ( ID bool [ ] [ ] : , ID : bool , ID : int ) : bool { { var ID : [ ] int } } func ID ( ) { }",
  "func ID ( ID bool [ ] [ ] : , ID : bool , ID : int ) : bool { { var ID : ) ] int } } func ID ( [ { }",
  "func ID ( ID : [ ] bool ) { ID = - / - true false ( false ) if ID { } }",
  "func ID [ ID : ( ] bool ) { ID = - / - true false ( false ) if ID { } }",
  "func ID [ ID bool ( ] : ) { ID = - / - true false ( false ) if ID { } }",
  "func ID var ID : bool , ID : [ ] [ ] bool ) { var ID : int var ID : int { var ID : int ( ID : [ ] bool } }",
  "bool ID var ID : func , ID : [ ] [ ] bool ) { var ID : int var ID : int { var ID : int ( ID : [ ] bool } }",
  "func ID ( ) { var ID : [ - - ID ) ( ID ( ) ) ] [ ID ] ] int } func ID ( [ { }",
  "func ID ( ) { ) ID : [ - - ID ) ( ID ( var ) ] [ ID ] ] int } func ID ( [ { }",
  "func ID ( ) { ) ID : [ - - ID ) ] ID ( var ) ] [ ID ] ( int } func ID ( [ { }",
  "func ID ( ID : int , ID : [ ] int ( ID : bool ) : [ ] int { call ID , ( ( 123 ) ) ) }",
  "func ID ( ID : int , ID : [ ] int ( ID : [ ) : bool ] int { call ID , ( ( 123 ) ) ) }",
  "func ID ( ID : int , ID : [ ] int ( ID : [ ) : bool ] int { call ID , ( ( 123 ) ) ) }",
  "func ID ) ( : bool { }",
  ") ID func ( : bool { }",
  ") ( func ID : bool { }",
  "func ID ( ) { } func ID ( ) : bool { { var ( : bool call ID ( ) call ID ID ) return } }",
  "func ID ( ) { } func ID ( ) : bool { { var ( ID bool call ID ( ) call : ID ) return } }",
  "func ID ( ) bool } func ID ( ) : { { { var ( ID bool call ID ( ) call : ID ) return } }",
  "func ID ( ID : int , ] : int , ID : int ) : [ ID [ ID [ ID ( ) ] ] bool { } func ID ( ) { }",
  "func ID ( ID [ int , ] : int , ID : int ) : [ ID [ ID : ID ( ) ] ] bool { } func ID ( ) { }",
  "func ID ( ID [ int , ] : int , ID : int ) : [ ID [ ID : ID ( ) ] ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ( - ID { false * false and ( ( false ) ) ] [ ID ] ) ] [ ] bool { } func ID ( ) [ }",
  "func ID ( ) : [ ( - ID { false * false and ( ( false ) ) ) [ ID ] ] ] [ ] bool { } func ID ( ) [ }",
  "func ID ( ) : [ ( - ID { false * false and ( ( false ) ) ) [ ID ] ] ] [ ] bool { } func ID ( ) [ }",
  "func ID { ID : bool ) : bool ( var ID : [ - - - true - ID - ID ] int var ID : [ ] [ ] bool } func ID ( ) { }",
  "func ID { ID : bool ) : bool ( var ID : [ - - - true - ID - ID ] int var ID : [ ] [ ] bool } func ID ( ) { }",
  "func ID { ID : } ) : bool ( var ID : [ - - - true - ID - ID ] int var ID : [ ] [ ] bool bool func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ID : [ ID ( ( - true ) ) ] [ ] bool { } func ) ( ) { }",
  "func ID ( ID : int , ID : ) , ID : int ID : [ ID ( ( - true ) int ] [ ] bool { } func ) ( ) { }",
  ": ID ( ID : int , ID : ) , ID : int ID func [ ID ( ( - true ) int ] [ ] bool { } func ) ( ) { }",
  "func ID [ ID : bool , ID : bool ) { var ID : bool var ID : bool } func ID ( ID : int ) : int { var ID : ( ] [ ] bool }",
  "func ID [ ID : bool int ID : bool ) { var ID : bool var ID : bool } func ID ( ID : int ) : , { var ID : ( ] [ ] bool }",
  "func ID [ ID : bool int ID : bool ) { var ID : bool var ID : bool } func ID ( ID [ int ) : , { var ID : ( ] : ] bool }",
  "func ID ( ) { var ID : bool ] ID : [ ] [ ] bool ID = - - ID [ - ( ID ) ] [ - ( ( - ID ) ) var }",
  "[ ID ( ) { var ID : bool ] ID : func ] [ ] bool ID = - - ID [ - ( ID ) ] [ - ( ( - ID ) ) var }",
  "[ { ( ) ID var ID : bool ] ID : func ] [ ] bool ID = - - ID [ - ( ID ) ] [ - ( ( - ID ) ) var }",
  "func ID ( ID : [ ] int , ID : int ) : bool { var ID : bool ID [ true * - ID - ] [ - 123 ] = ( ( ( ( - - ( - - ID ) ) ) ) ) }",
  "func ID ( ID : [ ] int , ID : int ) - bool { var ID : bool ID [ true * : ID - ] [ - 123 ] = ( ( ( ( - - ( - - ID ) ) ) ) ) }",
  "func ID ( ID : [ ] int , } : int ) - bool { var ID : bool ID [ true * : ID - ] [ - 123 ] = ( ( ( ( - - ( - - ID ) ) ) ) ) ID",
  "] ID ( ID : [ ID ( ) [ ID * - ID * ID ] ] [ ] [ func int ) { }",
  "] ID ( ID : [ ID ( ) [ ID * - ID * ID ] ] [ ] [ func int { ) }",
  "] ID ( ID : [ ID [ ) [ ID * - ID * ID ] ] [ ] ( func int { ) }",
  "( ID ( ID : bool , ID : bool , ID : int ) : [ ( false * ( ( - ( - func true ) ) ) ) ) ] [ ] [ ] [ ] [ ] bool { } func ID ( ) { }",
  "( ID ( ID : bool , ID : bool , ID ] int ) : [ ( false * ( ( - ( - func true ) ) ) ) ) ] [ ] [ ] [ : [ ] bool { } func ID ( ) { }",
  "( ID ( ID : bool , ID : bool , ID ] int ) : [ ( false * ( ( - ( - func true ) ) ) ) ) ] [ ] [ ] [ : [ ] bool { } func ID ( ) { }",
  "func ID : ID : int ) { var ID ( [ false - true * 123 * ID ( ID ) ] bool } func ID ( ) { }",
  "func ID : ID : int ) ID var { ( [ false - true * 123 * ID ( ID ) ] bool } func ID ( ) { }",
  "func ID : ID : int ) ID var { ( [ false - bool * 123 * ID ( ID ) ] true } func ID ( ) { }",
  "func ID ( ) : [ ] [ - ( ( ID [ - ID ] [ ] ] ) ) true [ ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ] [ - ( ( ID [ ID - ] [ ] ] ) ) true [ ] bool { } func ID ( ) { }",
  "] ID ( ) : [ ] [ - ( ( ID [ ID - func [ ] ] ) ) true [ ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int ) : [ ( ( ( - - - ) - 123 ) ) ) ) ] int { } func ID ( ( { }",
  "func ID ( ID ( int , ID : [ ] int ) : [ ( ( ( - - - ) - 123 ) ) ) ) ] int { } func ID ( : { }",
  "func ID ( ID ( int , ID : [ ] int ) : [ ( ( ( - - ID ) - 123 ) ) ) ) ] int { } func - ( : { }",
  "func ) ( ID : [ 123 / ( ( ( false * false / ( - ID ) ) ) ) / false ] int ) { } func ID ( ID { }",
  "/ ) ( ID : [ 123 / ( ( ( false * false func ( - ID ) ) ) ) / false ] int ) { } func ID ( ID { }",
  "/ ) ( ID : [ 123 / ( ( ( false func false * ( - ID ) ) ) ) / false ] int ) { } func ID ( ID { }",
  "func ID ( ID : bool , ID : int , ID : int ) 123 int { var ID : int return ( : ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) 123 int { var ID : int return ( : ) func } ID ( ) { }",
  "func ID ( ) : [ ID bool { var ID : [ ID ( - - ID - false + - - - ( - - ( - - - ( ID ) ) ) ) ] int var ID : bool } func ] ( ) { }",
  "func ID ( ) : [ ID bool { var ID : [ - ( - - ID - false + - - - ( - - ( - - ID ( ID ) ) ) ) ] int var ID : bool } func ] ( ) { }",
  "func ID ( ) : [ ID bool { var ID : [ - ( - - ID - false + } - - ( - - ( - - ID ( ID ) ) ) ) ] int var ID : bool - func ] ( ) { }",
  "func ID : ID : bool , ID : [ ] bool , ID : bool ) ( [ ID - ID or ID or ID ] [ ] int { }",
  "[ ID : ID : bool , ID : [ ] bool , ID : bool ) ( func ID - ID or ID or ID ] [ ] int { }",
  "[ ID : : : bool , ID ID [ ] bool , ID : bool ) ( func ID - ID or ID or ID ] [ ] int { }",
  "func [ ( ) : [ - ID ( ) * 123 + ID / ID * false + - - ( ID ) ] [ ] ID ] int { }",
  "func [ ( ) : [ - ID ( ) * 123 + ] / ID * false + - - ( ID ) ] [ ID ID ] int { }",
  "func [ ( + : [ - ID ( ) * 123 + ] / ID * false ) - - ( ID ) ] [ ID ID ] int { }",
  "func ID ( ) : int { var : ID int if ID / - - ( ID ( ) ) { } }",
  "func ID ( ) int : { var : ID int if ID / - - ( ID ( ) ) { } }",
  "func ID ( ) int : { var } ID int if ID / - - ( ID ( ) ) { } :",
  "func , ( ) { } func ID ( ID : int ID ID : [ ( false - - ( - ( - - ( ( - ( ( ID ) ) ) ) ) ) ) ] int , ID : [ ] bool ) { }",
  "func , ( ) { } func ID ( ID : int ID ID : [ ( false - - ( - ( - - ( ( - ( ( ID } ) ) ) ) ) ) ] int , ID : [ ] bool ) { )",
  "func , ( ) { } func ID ( ID : int ID ID : [ ( false - - ( - ( - - ( ( - ) ( ID } ( ) ) ) ) ) ] int , ID : [ ] bool ) { )",
  "func ID ( ) { print - ( ( ID [ true * ( ID ) ] ) call ID ( ) } func ID - ) { }",
  "func ID ( ) { print - ( ( ID [ true * ( ID ) ] ) call ID ( ) } func ID - ) { }",
  "func ID ( ) { print - ( ( ID [ ] * ( ID ) true ) call ID ( ) } func ID - ) { }",
  "func ID ( ID ) bool ) { var ID : [ - 123 / ( ( ID ) : ] int }",
  "func ID ( ID ) bool ) { var ID : } - 123 / ( ( ID ) : ] int [",
  "func ID ( ID ) bool ) { var ID : } - 123 / ) ( ID ( : ] int [",
  "func ID ( ) : int { var ID [ [ ] [ ID [ ( - ( 123 ) ) ] ] [ ] [ ] : ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ID [ [ ] [ ID [ ( - ( 123 ) ) ] ] [ [ ] ] : ] bool } func ID ( ) { }",
  "func ID ( ) : int var { ID [ [ ] [ ID [ ( - ( 123 ) ) ] ] [ [ ] ] : ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { { { var ID : [ ( : ( ID ) ) ] bool var ID - int } call ID ( ) } while - - - true { } }",
  "func ID ( ID : bool , ID : [ , ID : int ) { { { var ID : bool ( : ( ID ) ) ] bool var ID - int } call ID ( ) } while - - - true { } }",
  "func ID ( ID : bool , ID : [ , ID : var ) { { { var ID : bool ( : ( ID ) ) ] bool int ID - int } call ID ( ) } while - - - true { } }",
  "func ID ( ID : int , } : [ - ID and ( false / - false * true ) and ( false ) ] int ) { } func ID ( ) { ID",
  "func ID ( ID : , int } : [ - ID and ( false / - false * true ) and ( false ) ] int ) { } func ID ( ) { ID",
  "func ID ( ID : ) int } : [ - ID and ( false / - false * true ) and ( false ) ] int , { } func ID ( ) { ID",
  "func ID ( ID : [ ( ID [ ( ID * ( - false ) * - ( - 123 ) ) ] [ - ( false ) ] ) ] ID ) { } func bool ( ) { }",
  "func ID ] ID : [ ( ID [ ( ID * ( - false ) * - ( - 123 ) ) ] [ - ( false ) ] ) ( ID ) { } func bool ( ) { }",
  "func ID ] ID : [ ( ID [ ( ID * ( - false ) * - ( } 123 ) ) ] [ - ( false ) ] ) ( ID ) { } func bool ( ) { -",
  "func ID ( ) : int { var ID : int - ID ( - - call false * ID ( ) [ 123 ] ) }",
  "func ID ( ) : int { var ID : int - ID ( - * call false - ID ( ) [ 123 ] ) }",
  "func ID ( ) : int { ( ID : int - ID ( - * call false - ID var ) [ 123 ] ) }",
  "func ID var ) { ( ID : bool { var ID : [ ] int var ID : int } }",
  "func ID var ) { ] ID : bool { var ID : [ ( int var ID : int } }",
  "func ID var ) { ] ID : bool { ( ID : [ var int var ID : int } }",
  "func ID ( ID : bool ) { var ID : bool var ID : int ID ( false + ( print false ) ) ) = ( ID ) ( true }",
  "func ID ( ID : bool ) { var ID : bool var ID : ( ID ( false + int print false ) ) ) = ( ID ) ( true }",
  "func ID ( ID : bool ) { var ID : bool var ID : ( ID ( false + int print false ) ) ) = ( ID ) ( true }",
  "func ID ( ID : int ) { var ID : { ] bool var ID : [ ] bool [ return } }",
  "return ID ( ID : int ) { var ID : { ] bool var ID : [ ] bool [ func } }",
  "return ID ( ID : int ) { var ID : { ] bool var } : [ ] bool [ func } ID",
  "func ID ( ) { ) ID : [ ] [ ] [ ] bool var ID : int if - false / false * ( - - - ( ( 123 var ) ) { } }",
  "func ID ( ) { ) ID : [ ] [ ] [ ] bool var ID : } if - false / false * ( - - - ( ( 123 var ) ) { } int",
  "func ID ( ) { ) ID * [ ] [ ] [ ] bool var ID : } if - false / false : ( - - - ( ( 123 var ) ) { } int",
  "{ ID ( ID : bool , ID : bool , ID : [ 123 <= ID ( ) * - ( true ) / ( ID ) ] int ) func } func ID ( ) { }",
  "{ ID ( ID : bool , ID : bool , ID : [ func <= ID ( ) * - ( true ) / ( ID ) ] int ) func } 123 ID ( ) { }",
  "{ ID ( ID : bool , ID : bool , ID : [ func <= ID ( ) * - ( true ) / ( ID ) ] int ) func } 123 ID ( ) { }",
  "func ID ( ID : ID , ID : int ) { var ID : int call ID ( 123 and ID ( ) ) bool = ID }",
  "func ID and ID : ID , ID : int ) { var ID : int call ID ( 123 ( ID ( ) ) bool = ID }",
  "func ID ( ) { return true - * ( - 123 / ( false ) ) / false } func ID ( ) { }",
  "func ID ( ) / return true - * ( - 123 { ( false ) ) / false } func ID ( ) { }",
  "func ID ) ( / return true - * ( - 123 { ( false ) ) / false } func ID ( ) { }",
  "func ID ( ) { var ID : [ - true + ID - ( ( - - * ID ) ) / - ID + ( ID ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : true - [ + ID - ( ( - - * ID ) ) / - ID + ( ID ) ] int } func ID ( ) { }",
  "func ID ( ) { var - : true - [ + ID ID ( ( - - * ID ) ) / - ID + ( ID ) ] int } func ID ( ) { }",
  "func ID ( ) { print ( ID ( ) [ 123 - 123 * ( ( / ( - true ) ) ) ] [ ID ] ) ID = - - - ID }",
  "func ID ( ) { print ( ID ( ) [ 123 - 123 * ( ( / ( - true ) ) ) ID [ ] ] ) ID = - - - ID }",
  "func ID ( ) { print ( ID ( ) [ 123 - 123 * ( ( / } - true ) ) ) ID [ ] ] ) ID = - - - ID (",
  "func ID ( ID : bool , ID : int , ID : [ ) int ] : int { while ID [ - ID ] { } }",
  "func ID ( ID : bool , ID : int , ID : [ ) int ] : int { while ID [ - } ] { ID }",
  "func ID ( ) : [ ( ID int 123 and false - - ID + - - ( 123 ) ) ] / { } func ID ( ) { }",
  "func ID ( ) : ] ( ID int 123 and false - - ID + - - ( 123 ) ) [ / { } func ID ( ) { }",
  "func ID ( ) : - ( ID int 123 and false - - ID + - ] ( 123 ) ) [ / { } func ID ( ) { }",
  "func ID ( ID : bool ) ) var ID : bool var ID : bool ID ( { = ( false ) }",
  "func ID ( ID : bool bool ) var ID : bool var ID : ) ID ( { = ( false ) }",
  "func ID ( ID : bool bool ) var ID : bool var ID : ) ID = { ( ( false ) }",
  "func ] ( ID : [ ID ( ) [ - - false * true * ID [ false ID ] ] int ) { } func ID ( ) { }",
  "func ] ( ID : [ ID ( ) [ - - false * true * ID [ false ID { ] int ) { } func ID ( ) ] }",
  "func ] ( ID : [ ID ( ) true - - false * [ * ID [ false ID { ] int ) { } func ID ( ) ] }",
  "func ID ( ) { var ID : int while - } ID ( ) [ ID ( ) ] { } -",
  "func ID ( ) { while ID : int var - } ID ( ) [ ID ( ) ] { } -",
  "{ ID ( ) { while ID : int var - } ID ( ) [ ID ( ) ] func } -",
  "func ID ( ) { var ID int [ ] [ ] : call ID ( ) }",
  "func ID ( ) { var ID ( [ ] [ ] : call ID int ) }",
  "func ID ( ) { ID ID ( [ ] [ ] : call var int ) }",
  "func ID ( ID : int , ID : bool , ID : [ ] [ ] [ ID * true and true and ( ( false ) ) ] { ) { } func ID ( ) bool }",
  "func ID ( ID ( int , ID : bool , ID : [ ] [ ] [ ID * true and true and : ( false ) ) ] { ) { } func ID ( ) bool }",
  "func ID ( ID ( int , ID : bool , ID : [ ] [ ] [ ID * true and true and : ( } ) ) ] { ) { false func ID ( ) bool }",
  "func ID ID ID : [ false and - - - ID ( ( ( false ) ) ) and ID ] [ ] [ ] int ) { } func ( ( ) { }",
  "func ID ID ID : [ false and - - - ID ( ( ( ( ) ) ) and ID ] [ ] [ ] int ) { } func ( false ) { }",
  "func ID ID ID : [ false and - - - ID ( ( ( ( ) ) ) and ID ] [ int [ ] ] ) { } func ( false ) { }",
  "/ ID ( ) : int { var ID : bool return - false func ID ( ) [ false ] } func ID ( ) { }",
  "/ ID ( ) : int { var : ID bool return - false func ID ( ) [ false ] } func ID ( ) { }",
  "/ ( ( ) : int { var : ID bool return - false func ID ID ) [ false ] } func ID ( ) { }",
  "func ID var ID : bool , ID : int ) { var ID : int ( ID : [ ] [ ] int } func ID ( ID : [ ] [ ] int ) { }",
  "func : var ID : bool , ID : int ) { var ID : int ( ID ID [ ] [ ] int } func ID ( ID : [ ] [ ] int ) { }",
  "func : var ID : bool , ID : int ) { : ID var int ( ID ID [ ] [ ] int } func ID ( ID : [ ] [ ] int ) { }",
  "func ID { ID : bool ) ( var ID : int var ID : bool print ID * ( false ) if ( ( - ID ) ) { } } func ID ( ) { }",
  "func ID { ID : bool ) ( var ID : int var ID : bool print ID * ( false ) ID ( ( - ID ) ) { } } func if ( ) { }",
  "func ID { ID ID bool ) ( var ID : int var : : bool print ID * ( false ) ID ( ( - ID ) ) { } } func if ( ) { }",
  "func ID ( ID : [ ( false and - ( } ID * ( 123 ) ) and ( ID ) ) ] [ ] [ ] bool ) { } func ID ( ) { -",
  "func ID ( ID : [ ( false and - ( } ID * ( 123 ) ) and ( ID ) ) ] [ ] [ ] bool ) - } func ID ( ) { {",
  "func ID ( ID : [ ( false and - ( } ) * ( 123 ) ) and ( ID ) ) ] [ ] [ ] bool ) - } func ID ( ID { {",
  "call ID ( ) : bool { print ( - 123 - ( false / ( ID ) / ID ) + ( false ) ) func ID ( ) } func ID ( ) { }",
  "call ID ( } : bool { print ( - 123 - ( false / ( ID ) / ID ) + ( false ) ) func ID ( ) ) func ID ( ) { }",
  "func , ( ID : int ID ID : bool ) : int { call ID ( - - ID ( ) != - 123 ) }",
  "func , ( ID : int ID ID : bool ) : int { call - ( - - ID ( ) != ID 123 ) }",
  "func != ( ID : int ID ID : bool ) : int { call - ( - - ID ( ) , ID 123 ) }",
  "func ID ( bool : [ ] bool ) { var ID : [ ] [ ] ID }",
  "func ) ( bool : [ ] bool ID { var ID : [ ] [ ] ID }",
  "func ) ( bool ] [ : bool ID { var ID : [ ] [ ] ID }",
  "ID ID ( ID : int , ID : [ ] int , ID : int ) { var ID : int var ID : bool while ( func ) { } ID = - ID } func ID ( ) { }",
  "ID ID = ID : int , ID : [ ] int , ID : int ) { var ID : int var ID : bool while ( func ) { } ID ( - ID } func ID ( ) { }",
  "ID ID = ID : int , ID : [ ] int , ID : ) ) { var ID : int var ID : bool while ( func ) { } ID ( - ID } func ID ( int { }",
  "func ID ( ID : bool , ID : bool , ID : [ true bool ) { while true * ( - ( ] ) ) { } while - false { } }",
  "func ID ( ID * bool , ID : bool , ID : [ true bool ) { while true : ( - ( ] ) ) { } while - false { } }",
  "func ID ( ID * bool , ID : bool , ID : [ true bool ) { while true } ( - ( ] ) ) { } while - false { : }",
  "func ID ( ID : int , ID : [ ] bool , ID : bool ) : int } var ID : bool var ID : int call ID ( - - 123 ) while - - ( true ) { } } func ID ( ) { {",
  "func ID ( ID : int , ID : [ ] bool , ID : bool ) : int call var ID : bool var ID : int } ID ( - - 123 ) while - - ( true ) { } } func ID ( ) { {",
  "func ID ( ID : int , ID : [ ] bool , ID : bool ) : int call var ID : bool var ID : int - ID ( } - 123 ) while - - ( true ) { } } func ID ( ) { {",
  "func ID ( ID : [ - - ( ( true * ( ( ID ) ) / ID false ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ - - ( ( ) * ( ( ID ) ) / ID false true ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ - - ( ( ) * ( ( ID ) ) / ID false true ) ] bool ) { } func ID ( ) { }",
  "func false ( ID : int ) { while - ( 123 * ( ( - 123 ) ) * ID ) { } { } }",
  "func false ( ID : int ) { while - ( 123 * ( { - 123 ) ) * ID ) { } ( } }",
  "func false ( ID : int ) { while - ) 123 * ( { - 123 ) ) * ID ( { } ( } }",
  "func ID ( ID : [ ] [ ] [ ID - 123 * - true <= ( - ( ( ID ) ) ) ] [ ] [ ] } ) { bool func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ ID - 123 * - ) <= ( - ( ( ID ) ) ) ] [ ] [ ] } true { bool func ID ( ) { }",
  "func ID ( ID : [ ] [ ] [ ID - 123 * - ) <= ( - ( ( ID ) true ) ] [ ] [ ] } ) { bool func ID ( ) { }",
  "func ID ( ID : [ ] int ) { var ID : [ ID { ( - ( ( ( ID ) ) ) ) ] ] [ ] bool var ID : bool } func ID ( ) [ }",
  "func ID ( ID : [ ] int ) { var ID : [ ID { ( - ( ( ( ID ) ) ) ) ] ] [ ) bool var ID : bool } func ID ( ] [ }",
  "func ID ( ID : int ID , : bool , ID : bool ) { }",
  "func ID ( ID : int ID , : bool , ID : bool ) { }",
  "func ID ( ID : int ID , : bool , : ID bool ) { }",
  "func ID ( ID : { ) : bool { var ID : int var ID : [ ] bool } func ID ( ) : int bool var ID : int }",
  "func ID ( ID : { ) : bool { var ID : int var ID : [ bool bool } func ID ( ) : int ] var ID : int }",
  "func ) ( ID : { ) : bool { var ID : int var ID : [ bool bool } func ID ( ID : int ] var ID : int }",
  "func ID ( ) : int { var return : int call ID ( ) ID }",
  "func ID ( ) { int : var return : int call ID ( ) ID }",
  "func ID ( ) { int : var return : int call ) ( ID ID }",
  "func ID ( ID : [ 123 ID [ 123 / true * - true ] [ ( ( ) ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ 123 ID [ true / true * - 123 ] [ ( ( ) ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int - ID ( 123 - - if ( false ) ) { } } func ID ( ) { }",
  "func ID ID ) { var ID : bool var ID : int - ID ( 123 - - if ( false ) ) { } } func ( ( ) { }",
  "func ID ID ) { var ID : ( var ID : int - ID ( 123 - - if bool false ) ) { } } func ( ( ) { }",
  "func ID ( ) { } func ID ( ID : bool ) : bool - var ID : [ - { false + - ID ] bool }",
  "func ID ( ) { } func : ( ID ID bool ) : bool - var ID : [ - { false + - ID ] bool }",
  "func ID ( ) { } func - ( ID ID bool ) : bool - var ID : [ - { false + : ID ] bool }",
  "func ID ( ID : int , ID : bool ) : [ ] bool { var ID : int var : ID bool return ( ( - true ) ) } func ID ( ) { }",
  "func ID ( int : int , ID : bool ) : [ ] bool { var ID : ID var : ID bool return ( ( - true ) ) } func ID ( ) { }",
  "func ID ( int : int , ID : bool ) : [ ] ID { var ID : bool var : ID bool return ( ( - true ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : int { var ID : bool { var ID : [ ID ( ) [ - ( true ) ] ] int var ID : bool } { } } } { ID ( ) func }",
  "func ID ( ) { var ID : int { { ID : bool { var ID : [ ID ( ) [ - ( true ) ] ] int var ID : bool } { } } } var ID ( ) func }",
  "ID ID ( ) { var func : int { { ID : bool { var ID : [ ID ( ) [ - ( true ) ] ] int var ID : bool } { } } } var ID ( ) func }",
  "func ID ( ) : int { var ID : [ ] ( ID - [ - ID ) - 123 ] [ ] int var ID : [ ] bool }",
  "func ID ( ) : int { var ID : [ ] int ID - [ - ID ) - 123 ] [ ] ( var ID : [ ] bool }",
  "func ID ( ) - int { var ID : [ ] int ID : [ - ID ) - 123 ] [ ] ( var ID : [ ] bool }",
  "func } ( ID : [ ] int , ID : bool , ID : int ) { var ID : int ID func ID ( ID : bool , ID : [ ] [ ] [ ] bool ) { }",
  "func } ( ID : [ ] int , ID : bool , ID : int ) { var ID : int ID func ID ( ID : bool { ID : [ ] [ ] [ ] bool ) , }",
  "func } ( ID : [ ] int , ID : bool , ID : int ) { var ID : int ID func ID [ ID : bool { ID : [ ] ( ] [ ] bool ) , }",
  "func ID ( ID : int ) : [ ID / bool false - - false * ( ( ID ) ) * false ) / false ] [ ] [ ] ( { }",
  "func ID ( ID : int ) : [ ID / bool false - - false * ( ( ID ) ) * false ) [ false ] / ] [ ] ( { }",
  "func ID ( ID : int ) : [ ID / bool false - ] false * ( ( ID ) ) * false ) [ false ] / ] [ - ( { }",
  "func ID ( ) : int { { var ID : int ( 123 - ID [ - if true ) ] { } print false } }",
  "func ID ( ) : int { { - ID : int ( 123 var ID [ - if true ) ] { } print false } }",
  "func ID ( ) : int { { - ID : int ( 123 var ID [ - if true ) ] { } print false } }",
  "} ID ( ID : int ) { var ID : [ ] int return func",
  "} ID ( ID : int ) { var ] : [ ID int return func",
  "} ID ( ID ID int ) { var ] : [ : int return func",
  "func ID ( ) : bool { print ( ( ID - ( - - func - ( - ID ) ) - - - true ) ) call ID ( ) } - ID ( ) { }",
  "func ID ( ) : bool { print ( ( ID - ( - - ) - ( - ID ) ) - - - true ) ) call ID ( ) } - ID ( func { }",
  "func ID { ) : bool ( var ID : [ ] bool print ID ( ) [ ID ( ) ] [ - ( ID ) ] }",
  "func ID { ) : bool ( var ID : [ ] bool ID print ( ) [ ID ( ) ] [ - ( ID ) ] }",
  "func ID { ) : bool ( var ID : [ ] bool ID ) ( ) [ ID ( ) ] [ - ( ID print ] }",
  ": ID ( ) : int { var ID func int var ID : int return }",
  ": ID var ) : int { var ID func int ( ID : int return }",
  "func bool ( ID : [ ] int , ID : int , ID : ID ) : int { ID ( ( false ) ) = ( ID ) { } }",
  "func bool ( ID : [ ID int , ] : int , ID : ID ) : int { ID ( ( false ) ) = ( ID ) { } }",
  "func bool ( ID : [ ID ) , ] : int , ID : ID ) : int { ID ( ( false ) ) = ( ID int { } }",
  "func ID ( - : [ ] int { var ID : [ ( ( - true ) false - ID ) ) ] bool }",
  "func ID ( - : [ ] true { var ID : [ ( ( - int ) false - ID ) ) ] bool }",
  "func var ( - : [ ] true { ID ID : [ ( ( - int ) false - ID ) ) ] bool }",
  "func ID ( ID : int , ID : bool , ID : [ ] bool { : [ ID ( ID [ ( ( true ) ) ] ) ] [ ] [ ] int ) }",
  "func ID ( ID : bool , ID : bool , ID : [ ] int { : [ ID ( ID [ ( ( true ) ) ] ) ] [ ] [ ] int ) }",
  "func ID ( ID : bool , ID : [ , ID : [ ] int { : [ ID ( ID [ ( ( true ) ) ] ) ] bool ] [ ] int ) }",
  "func ID ( ID : int ) : int { var ID : int var ID : int ID [ - false ( false ] = ID print - - - - 123 } func ID * ) { }",
  "func ID ( ID : int ) : int { var ID : int var ID : int ID [ - false ( false ] = ID print - - - ) 123 } func ID * - { }",
  "func ID ( ID : int ) : int { var ID : int var ID : ID ID [ - false ( false ] = ID print - - - ) 123 } func int * - { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : int ) { { ID ( ) } - ( true ) ] [ - ID ] = - ID [ call ID ( ) }",
  "func ID ( ID : bool , ID : [ ] ) , ID : int bool { { ID ( ) } - ( true ) ] [ - ID ] = - ID [ call ID ( ) }",
  "func ID ( ID : bool , ID : [ ] ) , ID : int bool { { ID ( ) ) - ( true ) ] [ - ID ] = - ID [ call ID ( } }",
  "func ID ( ID : [ ] int , ID : int , ID : int ) { var ID : [ ( ( } ID ) ) ] int -",
  "func ID ( ID : [ [ int , ID : int , ID : int ) { var ID : ] ( ( } ID ) ) ] int -",
  "func ID ( ID : [ [ int , ID : int , ] : int ) { var ID : ] ( ( } ID ) ) ID int -",
  "func ID ( ID : ID , int : [ ( false / ( ( ID ) ) * ID ) ] [ ] int ) { } func ID ( ) { }",
  ": ID ( ID : ID , int func [ ( false / ( ( ID ) ) * ID ) ] [ ] int ) { } func ID ( ) { }",
  ": ID ( ID : ID , int func [ ( false / ( ( ( ) ) * ID ) ] [ ] int ) { } func ID ID ) { }",
  "func ID ( ID : [ ID [ ( 123 * ( - ID ) ) ] ] int ) { func } ID ( ) { }",
  "func ID ( ID : [ ID [ ( ] * ( - ID ) ) ] 123 int ) { func } ID ( ) { }",
  "func ID ( ID : [ ID [ ( ] * ( - ID ) ) ] 123 int ) { func } ID ( ) { }",
  "func ( ID ) { var ID : bool var ID : int while false - ( ( ID ) ) { } }",
  "func ( ID ) ) var ID : bool var ID : int while false - ( ( ID ) { { } }",
  "func ( ID ) ) var ID : bool var ID : int while false - ( ) ID ( { { } }",
  "func ID ( ) : int { var ) : [ - ( - ID * false - ( true ) ID ] [ ] int }",
  "func ID ( ) : int { var ) : [ - ( - ID * false - ( true ) ID ] [ ] int }",
  "func ID ( ) : int { var ) : [ - ( - ID * false - ( true ) ID ] [ ] int }",
  "func ID ( ) : [ ] bool , ID : int ID : int { var ID : bool var ID : int while false != ID { } { } }",
  "func , ( ) : [ ] bool ID ID : int ID : int { var ID : bool var ID : int while false != ID { } { } }",
  "func , ( ) : [ ] bool ID ID : int ID : int { var ID : bool var while : int ID false != ID { } { } }",
  "func ID ( ) { var ID : = var ID : [ ] bool print false / - true * - - 123 ID int ( - ID ) }",
  "func ID ( ) 123 var ID : = var ID : [ ] bool print false / - true * - - { ID int ( - ID ) }",
  "func ID ( ) 123 var ID : = var ID : [ ] bool print false / - * true - - { ID int ( - ID ) }",
  "func ID ( ID : ] , ID : [ int bool , ID : [ - ( ( ( 123 ) ) ) ] [ ] [ ] int ) { }",
  "func ] ( ID : ID , ID : [ int bool , ID : [ - ( ( ( 123 ) ) ) ] [ ] [ ] int ) { }",
  "func ] ( ID : ID , ID : [ int bool , ID : [ - ( ( ) 123 ) ) ( ] [ ] [ ] int ) { }",
  "func ID ( ID : int , ID : bool ) { return } func ID ( ) : [ ( ( - ID ] ) ) int { }",
  "func ID ( ID : int , ID : ] ) { return } func ID ( ) : [ ( ( - ID bool ) ) int { }",
  "func ID ( ID : int , ID : ] ) { { } func ID ( ) : [ ( ( - ID bool ) ) int return }",
  "func ID ( ID : [ ] bool ) { var ID : int var ID : bool call [ ( ) } func ID ( ) : ID ] bool { }",
  "func func ( ID : [ ] bool ) { var ID : int var ID : bool call [ ( ) } ID ID ( ) : ID ] bool { }",
  "func func ( ID : [ ] bool ) call var ID : int var ID : bool { [ ( ) } ID ID ( ) : ID ] bool { }",
  "func ID ] ID : int ) { var ID : bool var ID : int if ( ID [ 123 ( [ 123 ] ) { } }",
  "func ID ] ID : int ) { var ID [ bool var ID : int if ( ID [ 123 ( : 123 ] ) { } }",
  "func ID ] ID : int ) { var ID [ bool var ID : int if ( ID [ 123 ( : 123 ] ) { } }",
  "func ID ( ID : [ 123 ( - ( - ID * ) [ true ] ) / false ] bool ) { } func ID ( ) { }",
  "( ID func ID : [ 123 ( - ( - ID * ) [ true ] ) / false ] bool ) { } func ID ( ) { }",
  "( [ func ID : ID 123 ( - ( - ID * ) [ true ] ) / false ] bool ) { } func ID ( ) { }",
  "func ID ( ) { } func ID ( ) : } { bool",
  "ID ID ( ) { } func func ( ) : } { bool",
  "ID ( ( ) { } func func ID ) : } { bool",
  "func ) ( ID : bool , ID : [ true / - ( ID ( ID ) ) ] int , ID : [ ] int ) { } func ID ( ID { }",
  "func ) ( ID : bool , int : [ true / - ( ID ( ID ) ) ] int , ID : [ ] ID ) { } func ID ( ID { }",
  "func ) ( ID } bool , int : [ true / - ( ID ( ID ) ) ] int , ID : [ ] ID ) { : func ID ( ID { }",
  "func ID ( ) [ [ ] [ ] : ( 123 / - ID ( false ) ) ] [ ] int { }",
  "func ID ( ) [ [ ] [ ] : ) 123 / - ID ( false ) ( ] [ ] int { }",
  "func ID ( ) [ [ ] [ ] : ) 123 / - ID ( false ) ( ] [ ] int { }",
  "func ID ( ID : int , ID : bool ) : int { var ID : ID ] bool var [ : [ - ( - - true ) ] int }",
  "func ID : ID : int , ID : bool ) : int { var ID : ID ] bool var [ ( [ - ( - - true ) ] int }",
  "func ID ( ID : int , ID : bool , ID : [ ] int ) { if - false / ( - ( true ) ) / - true { } if true { } } func ID ( } { )",
  "func ) ( ID : int , ID : bool , ID : [ ] int ) { if - false / ( - ( true ) ID / - true { } if true { } } func ID ( } { )",
  "func ) ( ID : int , ID : bool , ID : [ ] int ) { if - false / ( - ( true ) ID / - true { } if true { } } func ( ID } { )",
  "func ID ( ID : [ ] int , ID : bool ) { var ID : while ] bool var ID : int if ID { } [ 123 { } }",
  "func ID ( ID : [ ] int , ID : bool ) { var ID : while ] } var ID : int if ID { } [ 123 { } bool",
  "123 ID ( ID : [ ] int , ID : bool ) { var ID : while ] } var ID : int if ID { } [ func { } bool",
  "func ID ( ) : bool int var ID : bool var ID : [ ID - ( ( ID ) ) ] { } func ID ( ) { }",
  "func ID ( ) : bool int var ID } bool var ID : [ ID - ( ( ID ) ) ] { : func ID ( ) { }",
  "func ID ( ) : bool ) var ID } bool var ID : [ ID - ( ( ID ) ) ] { : func ID ( int { }",
  "func ID ( ID : int , ID : bool ) : int { var ID int int var ID : : return }",
  "func ID ( ID : int , ID : bool : : int { var ID int int var ID ) : return }",
  "func ID ( ID : int , ID : bool var : int { var ID int int : ID ) : return }",
  "func ID ( ) : int ) if ID ( ) - ( ( true ) { + ( - ( ( ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ) { int ) if ID ( ) - ( ( true ) { + ( - ( ( ID ) ) ) : } } func ID ( ) { }",
  "func ID ( ) { int ) if ID ( ) - ( ( true ) { + ( - ( ( ID ) ) ) : } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { print ( ( - ( ) ) ) ) } func ID ( ID { }",
  "func ID ( ID : bool , ID : bool ) { print ( ( - ( ) ) ) ( } func ID ) ID { }",
  "func ID ( ID : bool ( ID : bool ) { print ( , - ( ) ) ) ( } func ID ) ID { }",
  "func ID ( var : [ ] [ ] bool { ) ID : int var ID : int while ID * ID / ID { } if ( ( 123 ) ) { } }",
  "func ID ( var ) [ ] [ ] bool { ) ID : int var ID : int while ID * ID / ID { } if ( ( 123 ) : { } }",
  "func ID ( var ) [ ] [ ] bool { ) ID : int var ID : int ) ID * ID / ID { } if ( ( 123 while : { } }",
  "func ID ( ID [ int , ID : : ( ID [ ID ( ) [ ( false ) ] [ 123 ] ] ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID [ [ , ID : : ( ID [ ID ( ) int ( false ) ] [ 123 ] ] ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : [ ] int var ID } bool } func ID ( ID : [ ] bool , ID : bool , ID : bool ) { :",
  "func ID ( ID : bool ) : int { var ID : [ ] int var ID } bool } func ] ( ID : [ ID bool , ID : bool , ID : bool ) { :",
  "func ID ( ID : bool ) : int { var bool : [ ] int var ID } ID } func ] ( ID : [ ID bool , ID : bool , ID : bool ) { :",
  "func ID ( ID : int ) : int { print ( ID ( ) * true * - ) print - ( true true ) }",
  "func ID ( ID ( int ) : int { print : ID ( ) * true * - ) print - ( true true ) }",
  "func ID ( ID ( int ) : int { print : ID ( ) * print * - ) true - ( true true ) }",
  "func ID ( ID : bool ) { var ID : [ ] int print false + ( false / - ) * false ) } func ID ( ID { }",
  "func ID ( ID : bool ) { ] ID : [ var int print false + ( false / - ) * false ) } func ID ( ID { }",
  "func ID false ID : bool ) { ] ID : [ var int print false + ( false / - ) * ( ) } func ID ( ID { }",
  "func ID ( ) { var ID ( bool var ID : int { var ID : [ ( - - - ( : ( ( - ( true ) ) ) ) ) ) ] int } }",
  "func ID ( ) { var ID ( bool var ID : int { var ID : [ ( - - - ( : ) ( - ( true ) ) ( ) ) ) ] int } }",
  "func ID ( ) { var ID ( bool var ID : int { var ID : [ ) - - - ( : ) ( - ( true ) ) ( ) ) ( ] int } }",
  "func ID ( : : bool , ID ID [ ] [ - ID ( - ( true ) ) ] int , ID : int ) { }",
  "func ID ( : : bool , ID ID [ ] [ - ID ( - ( true ) ) ] int } ID : int ) { ,",
  "func ID ( : : bool , ID ID [ ] int - ID ( - ( true ) ) ] [ } ID : int ) { ,",
  "func ID ( ) { var ID : int var ID : int if ID / ( ID } 123 * ID ) * 123 { } { * }",
  "func ID ( ) { var ID : int var ID : int if ID / ( { } 123 * ID ) * 123 ID } { * }",
  "func ID ID ) { var ID : int var ID : int if ( / ( { } 123 * ID ) * 123 ID } { * }",
  "func ID ( ) : bool { call ID ( false < ) ( ID / ( ID ) ) }",
  "func ID ( ID : bool { call ID ( false < ) ( ID / ( ) ) ) }",
  "func ID ( ID : bool { call ID ( false < ) ( ID / ( ) ) ) }",
  "func ID ( ) : bool { return ID ( ) [ ID ( ID ) ] } ID func ( ) { }",
  "func ID ( ) : bool { ) ID ( ) [ ID ( ID ) ] } ID func ( return { }",
  "func ID ( ) { } ( ID ( ) [ - false / ( 123 ) ] ) { } } func ID ( ) { if",
  "func ID ( ) { { ( ID ( ) [ - false / ( 123 ) ] ) { } } func ID ( ) } if",
  "func ID ( ) { { ( ID ( ) [ - false if ( 123 ) ] ) { } } func ID ( ) } /",
  "func ID ( ID : [ ] [ ] int , ( : int , ID : [ ( - ID ID ) ) ] int ) { }",
  "func ID ( ID : [ ] [ ] int , ( : int , ID : [ ( - ID ID ) ) ] int ) { }",
  "func ID ( ID : [ ] [ ] int , ( : int , ID : ID ( - [ ID ) ) ] int ) { }",
  "func ID ( ) { var ID : bool call ID ( ] ID [ false * ID * ( ( false ) ) ( [ ID ] ) ) }",
  "func ID ( ) { var ID : call bool ID ( ] ID [ false * ID * ( ( false ) ) ( [ ID ] ) ) }",
  "func ID ( ) { var ID ( call bool ID ( ] ID [ false * ID * ( ( false ) ) : [ ID ] ) ) }",
  "func ID ( ) : int { if ( ID ( ) ID ( ) ) { } call ID ( ) }",
  "func ID ( ) : int { if ( ID ( ) ID ( ) } { ) call ID ( ) }",
  "func ID ( ) : int { if ( ID ( ( ID ) ) } { ) call ID ( ) }",
  "func and ( ) : int { var ID : [ ID ( ) * true / false ID ID and false ] int var ID : int } func ID ( ) { }",
  "func and ( ) : int { var ID : [ ID ( ) * true / false ID ID and ] false int var ID : int } func ID ( ) { }",
  "func : ( ) and int { var ID : [ ID ( ) * true / false ID ID and ] false int var ID : int } func ID ( ) { }",
  "func ID ( ) : int { var ID : int - ID : int ID [ ( false + 123 ) ] = ID while var - 123 { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int - ID : int ID [ func false + 123 ) ] = ID while var - 123 { } } ( ID ( ) { }",
  "func ID ( int : ) { var ID : int - ID : int ID [ func false + 123 ) ] = ID while var - 123 { } } ( ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID : [ false / true / int - - ( ID ) ) ] [ ] [ ] ( }",
  "func ID ( ID : int ) { var ID : int var ID : [ false / ID / int - - ( true ) ) ] [ ] [ ] ( }",
  "func ID ( ) : bool ID var ID : int var ID : bool return ( ( ID ( ) ) ) } func { ( ) { }",
  "func ID ( ) : bool ID var ID : int var ID } bool return ( ( ID ( ) ) ) : func { ( ) { }",
  "func ID ( ) : bool ID var ID : int var ID } bool return ( ( ( ( ) ) ) : func { ID ) { }",
  "func ID ( ) : [ true + ( ( - 123 / ID / ( ID { ) ) ] [ ] bool { } func ID ( ) ) }",
  "func ID ( ) : [ true + { ( - 123 / ID / ( ID ( ) ) ] [ ] bool { } func ID ( ) ) }",
  "func ID ( ) : [ true / { ( - 123 + ID / ( ID ( ) ) ] [ ] bool { } func ID ( ) ) }",
  "func ID ( ID : [ ] bool ) : ( { ID bool ( 123 + ID ) ) = ( ( ID ) ) { } }",
  "func ID ( ) : int ID var ID : bool call { ( true * true / ID ( - false ) ) } func ID ( ) { }",
  "func ( ( ) : int ID var ID : bool call { ID true * true / ID ( - false ) ) } func ID ( ) { }",
  "func ( ( ) : int ID var ID false bool call { ID true * true / ID ( - : ) ) } func ID ( ) { }",
  "func ID ( ) : bool { ID ( ( - ID ( ) / 123 ) { = ID } func ID ( ) ) }",
  "} ID ( ) : bool { ID ( ( - ID ( ) / 123 ) { = ID func func ID ( ) ) }",
  "} ID ( ) : bool { ID ( ( - ID ( ) / 123 ) { = ID func func ID ( } ) )",
  "func ID ( - : bool { var ID : int var ID : bool call ID ( ) 123 * ( 123 ) * ID ) } func ID ( ) { }",
  ") ID ( - : bool { var ID : int var ID : bool call ID ( ) 123 * ( 123 func * ID ) } func ID ( ) { }",
  ") ID ( - : bool { var ID : int var ID : bool call ID ID ) 123 * ( 123 func * ID ) } func ( ( ) { }",
  "func ID ( ID : bool , ID ] bool ) : [ : int { }",
  "func ID ( ID { bool , ID ] bool ) : [ : int : }",
  "func ID ID ID { bool , ( ] bool ) : [ : int : }",
  "func ID ( ID : int , ID : bool , ID : [ ) : int { var ID : int ] bool while - 123 * - ID { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ) : int { var ID : int ] bool while - * 123 - ID { } } func ID ( ) { }",
  "func ID ( ID : bool , return : [ ] bool , ID : bool ) : bool { ID }",
  "func ID ( ID : bool , bool : [ ] return , ID : bool ) : bool { ID }",
  "func ID ( ID : bool , bool ID [ ] return , : : bool ) : bool { ID }",
  "func ID ( ) { [ ( ( ID * false + 123 + ( ID ) ) ) ] int { } func ID ( ) : }",
  "func ID ( int { [ ( ( ID * false + 123 + ( ID ) ) ) ] ) { } func ID ( ) : }",
  "func ID ( int { [ ( ( ID ID false + 123 + ( * ) ) ) ] ) { } func ID ( ) : }",
  "func ID ( ID : int , ID : [ ID ( ) [ 123 * false and - false ] ] [ ] bool ) { } func ID ( } { )",
  "func ID ( ID ] int , ID : [ ID ( ) [ 123 * false and - false ] : [ ] bool ) { } func ID ( } { )",
  "func ID ( ID ] int , ID : - ID ( ) [ 123 * false and [ false ] : [ ] bool ) { } func ID ( } { )",
  "func ID ( ID : int , ID : [ , ID : int ) : [ ( ID ( ID ) ) ] int ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ , ID : int ) : [ ( ID ( ID ) ) ] int ] bool { } ( ID func ) { }",
  "func ID ( ID : int , ID : [ , ID : int ) : [ ( ID ( ID ) ) ] int ] ID { } ( bool func ) { }",
  "func ID [ ID : ( true * ID [ 123 or 123 * ( true ) * ID or 123 ] [ - 123 ] * true ] bool ) { } func ID ( ) { }",
  "func ID [ ID : ( true * ID [ 123 or 123 * ( true ) * ID or 123 { [ - 123 ] * true ] bool ) { } func ID ( ) ] }",
  "func ID [ ID : or true * ID [ 123 ( 123 * ( true ) * ID or 123 { [ - 123 ] * true ] bool ) { } func ID ( ) ] }",
  "func ID ( ) : - ( - ( ( - [ ( ( ( false ) ) ) ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ) : - ( - ( ( - [ ( ( ( false ) ) ) ) ) } ] int { } func ID ( ) { )",
  "func ID ( ) : - ( - ( ( - [ ( ( ( false ) ) ) ) ) } ] int { } func ID ( ) { )",
  "func ID ( ID : int , ID : bool ) { print - false [ - ID * true ] } func ID ( ) { }",
  "func ID ( ID : int , ID : true ) { print - false [ - ID * bool ] } func ID ( ) { }",
  "func ID ( ID : int , ID : true ) ] print - false [ - ID * bool { } func ID ( ) { }",
  "func ID ( ) { var ID : * return true int - ID ( ) [ true * false ] / true } func ID ( ) { }",
  "func ID ( ) { var ID : * return true int - ID ( ) [ true * false ] / } } func ID ( ) { true",
  "func ID ) ) { var ID : * return true int - ID ( ( [ true * false ] / } } func ID ( ) { true",
  "func ID ( ID ] [ : int ) { var ID : bool while ( ( 123 ) ) { } }",
  "func ID : ID ] [ ( int ) { var ID : bool while ( ( 123 ) ) { } }",
  ") ID : ID ] [ ( int func { var ID : bool while ( ( 123 ) ) { } }",
  "func ID ( ID : [ true / 123 * - false + true and } [ - ( ( ( - false ) ) ) ] ] bool ) { } func ID ( ) { ID",
  "func ID ( ID : [ 123 / true * - false + true and } [ - ( ( ( - false ) ) ) ] ] bool ) { } func ID ( ) { ID",
  "func ID ( ID : [ 123 / true * - false func true and } [ - ( ( ( - false ) ) ) ] ] bool ) { } + ID ( ) { ID",
  "func { ( ID : bool ) : [ ] int ID var ID : [ - - - ( ( ( true ) ) ) ] [ ] int var ID : [ ] bool }",
  "func { ( ID : bool ) : [ ] int ID var ID : - - - [ ( ( ( true ) ) ) ] [ ] int var ID : [ ] bool }",
  "func { ( ID true bool ) : [ ] int ID var ID : - - - [ ( ( ( : ) ) ) ] [ ] int var ID : [ ] bool }",
  "func ID ( ID { [ ] [ ( - ( - ( ( 123 ) ) ) ) ] bool ) : }",
  "func ID ( ID { [ ] [ ( - ( - ] ( 123 ) ) ) ) ( bool ) : }",
  "func ID ( ID { [ ] ) ( - ( - ] ( 123 ) ) [ ) ( bool ) : }",
  "func ID ( ID : int , ID : [ ] int var { var ID : bool ) ID : bool } func ID ( ID : bool , ID : int , ID : [ ] [ ] bool ) { }",
  "func ID , ID : int , ID : [ ] int var { var ID : bool ) ID : bool } func ID ( ID : bool ( ID : int , ID : [ ] [ ] bool ) { }",
  "func ID , ID : int , ID : [ ] int var { var ) : bool ) ID : bool } func ID ( ID : bool ( ID : int , ID : [ ] [ ] bool ID { }",
  "func ID ( ) : int , ID : bool , ID : bool ) : [ ] int { if - ID [ - false ] [ ( ID ) ] { } } func ID ( ID { }",
  "func ID ( ) : int , ID : { , ID : bool ) : [ ] int { if - ID [ - false ] [ ( ID ) ] { } } func ID ( ID bool }",
  "func ID ( ) : int , ID : { , ID : bool ) : [ ] int { if - ID [ - false ] [ ( ID ) ] { } } func ID ( ID bool }",
  "func ID ( ID : bool , ID : [ ] bool ) { } func ID ( ID : [ ] int , ID : int , ID : int int : ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) { } : ID ( ID : [ ] int , ID func int , ID : int int : ) { }",
  "func ID ( ID : bool , ID , [ ] bool ) { } : ID ( ID : [ ] int , ID func int : ID : int int : ) { }",
  "func ID ( ID ID bool ) { return true - 123 - - 123 * true * - 123 } func : ( ) { }",
  "func ID ( ID ID bool ) { return true func 123 - - 123 * true * - 123 } - : ( ) { }",
  "return ID ( ID ID bool ) { func true func 123 - - 123 * true * - 123 } - : ( ) { }",
  "func ID ( ID : int ) : int { ( ID ) [ true / 123 / - ( ID ) ] = false print false }",
  "func ID ( ID : int ) : int { ( ID ) [ true / false / - ( ID ) ] = false print 123 }",
  "func ID ( { : int ) ID var ID : int return - ( ID ( ) [ false ] [ ID ] ) }",
  "func ID ( { int : ) ID var ID : int return - ( ID ( ) [ false ] [ ID ] ) }",
  "func ID ( { int : ) ID var ID int : return - ( ID ( ) [ false ] [ ID ] ) }",
  "func ID ( ID : bool ) { var ID : int var ID : ID } func int ( ) : [ ] bool { var ID : bool ID = ( true ) }",
  "func ID ( ID : bool ) { var ID : int var ID : ID } func int ( true : [ ] bool { var ID : bool ID = ( ) ) }",
  "func ID ( ID : bool ) { var ID : int var : : ID } func int ( true ID [ ] bool { var ID : bool ID = ( ) ) }",
  "func ID ( ) { / ID : int var ID : bool while ( 123 var ID [ true ] / - 123 ) { } print 123 } func ID ( ) { }",
  "func ID ( ) { / ID : int var ID : bool while ( 123 var ID [ true ] / - 123 ) { } print 123 } func ID } ) { (",
  "func ID ( ) { / ID : int var ID : true while ( 123 var ID [ bool ] / - 123 ) { } print 123 } func ID } ) { (",
  "func ID ( ID : int , ID : [ - ( func - true / ID ) ) ] [ ] int , ID : int ) { } ( ID ( ) { }",
  "func ID [ ID : int , ID : [ - ( func - true / ID ) ) ] ( ] int , ID : int ) { } ( ID ( ) { }",
  "func ID [ ID : int , ID : [ - ID func - true / ID ) ) ] ( ] int , ID : int ) { } ( ( ( ) { }",
  "func ID ( ) { var ID : ) ] int var ID : bool { var ID : int var ID : bool call ID ( - ( - ( ID ) ) ) while false { } } if - - 123 { } } func ID ( [ { }",
  "func ID ( ) { var ID : ) ] int var ID : bool { var ID : int var ID : bool call ID ( - { - ( ID ) ) ) while false { } } if - - 123 { } } func ID ( [ ( }",
  "func ID ( ) { var ID : ) ] int var ID : bool { var ID : int var ID : bool call ID ) - { - ( ID ) ) ( while false { } } if - - 123 { } } func ID ( [ ( }",
  "func ID ( ID : bool , ) : bool , ID : int ID : [ ID / - false / ( ( true ) ) ] [ ] [ ] [ ] bool { }",
  "func ID ( ID : bool , ) : bool , ID : int ID : [ ID ( - false / ( / true ) ) ] [ ] [ ] [ ] bool { }",
  "func ID ( ID : bool , ) : bool , ID : int ID : [ ID ( - false / ( / true bool ) ] [ ] [ ] [ ] ) { }",
  "func ID ( ) { ) ID : bool if 123 / - - true - ( ( false ) var { } if ID { } }",
  "func ID ( ) { ) ID ) bool if 123 / - - true - ( ( false : var { } if ID { } }",
  "func : ( ) { ) ID ) bool if 123 / - - true - ( ( false ID var { } if ID { } }",
  "func ID ( ID : int ) : bool { var ID : [ } [ ID ( - ( ID ) ) ] bool var ID : [ ] [ ] bool ] func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : [ } [ ID ( - ( ID ) ) } bool var ID : [ ] [ ] bool ] func ID ( ) { ]",
  "func ID ( ID : int ) : bool { var ID : [ ] ( ID [ false - 123 - [ ID ) ] [ true ] ] bool }",
  "func ID ( ID : int ) : bool { var ID : bool ] ( ID [ false - 123 - [ ID ) ] [ true ] ] [ }",
  "func ID ( ID : int ) : bool { var ] : bool ] ( ID [ false - 123 - [ ID ) ID [ true ] ] [ }",
  "func ID ( ) : [ - 123 * ( false * ( true - true ) / ( - + - - ID ) ) / true ] bool { }",
  "func ID ( ID : bool ) { var ID : bool { var - : bool if ( 123 / ( ID ) / ID ( ( ( 123 ) ) ) ) { } while true { } } }",
  "func ID ( ID : bool ) { var ID : bool { var - : bool { ( 123 / ( ID ) / ID ( ( ( 123 ) ) ) ) { } while true if } } }",
  "func ID ( ID : bool ) { var ID bool bool { var - : : { ( 123 / ( ID ) / ID ( ( ( 123 ) ) ) ) { } while true if } } }",
  "func ID ( ) { call ) ( ID { var ID : int return } }",
  "func ID ( ) ) call { ( ID { var ID : int return } }",
  "func ID ( ) ) call } ( ID { var ID : int return { }",
  "func ID ( ) : bool { var ID : [ ID [ - ( ID ( ) ) ] [ ID ] ] [ ] int var ID : bool } ) ID ( func { }",
  "func ID ( [ : bool { var ID : [ ID [ - ( ID ( ) ) ] [ ID ] ] ) ] int var ID : bool } ) ID ( func { }",
  "func ID ( ) { var ID : [ ] int { var ( : bool print ( - - ID ( ( ID ) ) ) ) } } func ID ( ) { }",
  "func ID ( ) { ID ID : [ ] int { var ( : bool print ( - - var ( ( ID ) ) ) ) } } func ID ( ) { }",
  "func ID ( ) ] ID ID : [ { int { var ( : bool print ( - - var ( ( ID ) ) ) ) } } func ID ( ) { }",
  "bool ID ( ID : bool , ID : func ) : bool { print - ID ( ) + ID * ( ID ) * ID if - ( - ( ID ) ) { } }",
  "bool ID ( ID : bool , ID : func ) : bool { print - ID ( * + ID * ( ID ) ) ID if - ( - ( ID ) ) { } }",
  "bool ID ( ID : bool , ID : func ) : bool { print - ID ( * + ID * ( ID ) ) ) if - ( - ( ID ID ) { } }",
  "func ID ( ID : [ ] [ ] int , ID : bool , ID : bool ) : bool { } ] ID ( ) { var ID : bool var ID : [ func int }",
  "func ID ( ID : ID ] [ ] int , ID : bool , ID : bool ) : bool { } ] [ ( ) { var ID : bool var ID : [ func int }",
  "func ID ( ID : ] ] [ ] int , ID : bool , ID : bool ) : bool { } ID [ ( ) { var ID : bool var ID : [ func int }",
  "func ID ( ID : { ] bool , ID : [ ] bool ) : int { if ( - - false ) [ } { } }",
  "func if ( ID : { ] bool , ID : [ ] bool ) : int { ID ( - - false ) [ } { } }",
  "func if ( ID : { ] bool , ID : [ ] { ) : int { ID ( - - false ) [ } bool } }",
  "func ID ( ID : [ ] int , ID : [ false ] ID [ ( 123 ) ] ] [ + int , ID : int ) { }",
  "func ID ( ID : [ ] int , ID : [ int ] ID [ ( 123 ) ] ] [ + int , ID : false ) { }",
  "func ID ) ID : [ ] int , ID : [ int ] ID [ ( 123 ) ] ] [ + int , ID : false ( { }",
  "( ID func ) : int { var ID : bool var ID : int return }",
  "( ID return ) : int { var ID : bool var ID : int func }",
  "( ID return ) : int { var ID : bool var ID : int } func",
  "func ID ( ) : int { var ID : [ ] [ ] [ ID [ ] int var ID : bool } func ] ( ID : bool ) { }",
  "func ID ( ) : var { int ID : [ ] [ ] [ ID [ ] int var ID : bool } func ] ( ID : bool ) { }",
  "func ID ( [ { var ID : [ ] [ false * ID ( ID ) ID ] [ true ] ) ] bool var ID : int }",
  "func ID ( [ int var ID : [ ] [ false * ID ( ID ) ID ] [ true ] ) ] bool var ID : { }",
  "func ID ( ) : int { call ID ( false and ] ID ( ) [ 123 ( [ - ID ] ) and - ID ) call ID ( ) }",
  "func ID ( ) : int { call ID ( and and ] ID ( ) [ 123 ( [ - ID ] ) false - ID ) call ID ( ) }",
  "func ID ( ) : int { call ID ( [ and ] ID ( ) [ 123 ( and - ID ] ) false - ID ) call ID ( ) }",
  "func : ( ID : int ) { var ID : bool var ID ID bool ID ( - - 123 - ( true ) - ID ) = ( ( - ID ) ) call ID ( ) } func ID ( ) { }",
  "func : ( ID : int ) { var ID : bool var ) ID bool ID ( - - 123 - ( true ) - ID ) = ( ( - ID ) ) call ID ( ID } func ID ( ) { }",
  "func ID ( ) { var ID : int ID = ( ID [ - ( 123 ) ( [ ID ] ) call ID ( ) } func ID ] ) { }",
  "] ID ( ) { var ID : int ID = ( ID [ - ( 123 ) ( [ ID ] ) call ID ( ) } func ID func ) { }",
  "var ID ( ) { ] ID : int ID = ( ID [ - ( 123 ) ( [ ID ] ) call ID ( ) } func ID func ) { }",
  "func ID ( ID : ) , ID : [ ( 123 or ID ( ) [ ID ] or - false bool ] int ) { } func ID ( ) { }",
  "func ID ( ID : ) , ID : [ ( 123 or ID ( ) [ ID ] or - false int ] bool ) { } func ID ( ) { }",
  "func ID , ID : ) ( ID : [ ( 123 or ID ( ) [ ID ] or - false int ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ID [ true - ID * - - - false - true ] [ - - ( ID ) } ] [ ] int { } func ID ( ) { ]",
  "func ID ( ) : [ ID [ true - ID ] - - - false - true ] [ - - ( ID ) } ] [ * int { } func ID ( ) { ]",
  "func ID ( ) : [ ] [ true - ID ID - - - false - true ] [ - - ( ID ) } ] [ * int { } func ID ( ) { ]",
  "func ID ( ) : if { int ( true / ID [ ( true ) ] ) { } }",
  "func ID ( ) : if { int ( true / ID [ ( true ) ] ) { } }",
  ") ID ( func : if { int ( true / ID [ ( true ) ] ) { } }",
  "func ID ( ) { var ID : [ ID ( ID ( ( - ( - - ( true ) ) ) ) ) ) ] int var ( : int }",
  "func ID ( ) { var ID : [ ID ( ID ( ( - ( ) - ( true ) ) - ) ) ) ] int var ( : int }",
  "func ID ( ) { var ID : [ : ( ID ( ( - ( ) - ( true ) ) - ) ) ) ] int var ( ID int }",
  "func ID ( ID : [ - ( - ID [ 123 ID ( - ( ( true ) ) ) and - and ] [ ( true ) ] ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ - ( - ID [ 123 ID ( - ( ( true ) ) ) and - and ] [ ( true ) ] ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { while - ( ) / ( ID * - ID ) * - - ID ID { } while ( - - ( ID ) ) { } }",
  "func ID ( ) { while - ( ) / ( } * - ID ) * - - ID ID { ID while ( - - ( ID ) ) { } }",
  "func ID ( ) { while - ( } / ( ) * - ID ) * - - ID ID { ID while ( - - ( ID ) ) { } }",
  "func int ( ) : ID { var ID : [ ] int ID ( ) = ( 123 / ID ) call ID ( ) }",
  "func int ( ) ) ID { var ID : [ ] int ID ( : = ( 123 / ID ) call ID ( ) }",
  "func int ( ) ) ID { var ID : ( ] int ID [ : = ( 123 / ID ) call ID ( ) }",
  "func ) ( ID : int ID { print - ( false * ID [ ID ] * ID ) }",
  "func ) ( ID : int ID { print - ( false * ID * ID ] [ ID ) }",
  "func ) ( ID : int ID { ID - ( false * print * ID ] [ ID ) }",
  "func ID ( ) { print - - 123 * - 123 and ID - false / ( ID ) false - ( * ) call ID ( ) }",
  "func ID ( ) { print - - 123 * - 123 and ID - false / ( ID ) false - ( * ) call ( ID ) }",
  "func ID ( ) { print - - 123 * - 123 and ID - false / ( ID ) false - ( * ) call ( ID ) }",
  "func ID ( ID : int , ID : [ ] } ] int , ID : [ ] [ true * - - ID ] int ) { [ func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] } ] ) , ID : [ ] [ true * - - ID ] int int { [ func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] } ] { , ID : [ ] [ true * - - ID ] int int { [ func ID ( ) ) }",
  "func ID ( ) : { { while - ( 123 / 123 - - ID * 123 * ID - - ( - true ) ) bool } }",
  "func ID ( ) : { * while - ( 123 / 123 - - ID * 123 { ID - - ( - true ) ) bool } }",
  "func ID ( ) : { * while - ( 123 / 123 - - ID * 123 { ID - - ( - } ) ) bool } true",
  "func ) ( ) { print false / true * - - ( ID ( ID [ ( ID ) ] [ - - false ] ) print - false }",
  "func ) ( ) { print false / true * - - ( ID ( ID [ ( ID ) ] [ - - false ] ) print - false }",
  "func ) ( ) { print false / true * - - ( ID ] ID [ ( ID ) ( [ - - false ] ) print - false }",
  "func ID ( ID : [ true ] - ( - ID ( ) [ false ] [ - ID ] ) * [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ true ] - ( - ID ( ) [ false ] [ - * ] ) ID [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ true ] - ( - ID ( ) [ false ] [ - * ] ) ID [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool if - { ID - 123 != ID - } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool call - { ID - 123 != ID - } if ID ( ) } func ID ( ) { }",
  "func ID ( ) : if { var ID : bool call - { ID - 123 != ID - } bool ID ( ) } func ID ( ) { }",
  "func ID ( ID func [ - false / true or - ( ( ( - ( ID ) ) ) ) or ID ] [ ] bool ) { } : ID ( ) { }",
  "func ID ( ID func ) - false / true or - ( ( ( - ( ID ) [ ) ) or ID ] [ ] bool ) { } : ID ( ) { }",
  "func false ( ID func ) - ID / true or - ( ( ( - ( ID ) [ ) ) or ID ] [ ] bool ) { } : ID ( ) { }",
  "func ID ( ) : int { var ID : [ ID [ ID ( - ID ) ] ] ( false ) [ ] bool var ID : int }",
  "func ID } ) : int { var ID : [ ID [ ID ( - ID ) ] ] ( false ) [ ] bool var ID : int (",
  "func ID } ) : int { var ID : [ ID [ ID ( - ID ) ] ] ( false ) [ ] bool var ID : int (",
  "func ID ( ID : bool , int : bool , ID : bool ) : [ ] ID { while 123 <= ( - ID ) { } }",
  "func ID ( ID : bool , int : } , ID : bool ) : [ ] ID { while 123 <= ( - ID ) { } bool",
  "} ID ( ID : bool , int : func , ID : bool ) : [ ] ID { while 123 <= ( - ID ) { } bool",
  "func ID ( ID : [ ID ( ) [ false + ( ( ( ( int ) ) ) ) - ( ID ) ] ] ID ) { }",
  "func ID ( ID : [ ID ( ) [ false + ( ID ( ( int ) ) ) ) - ( ( ) ] ] ID ) { }",
  "func ID ( ID : [ ID ( ) [ false + ( ID ( ( int ) ) ) ) - ( ( ) ] ] ID ) { }",
  "func ID ( ID func bool , ID : bool , ID : bool ) : [ ( - ( - ID ) ) ] int { } : ID ( ) { }",
  "func ID ( ID func ] , ID : bool , ID : bool ) : [ ( - ( - ID ) ) bool int { } : ID ( ) { }",
  "func ID ( ID func ] , ID : bool , ID : bool ) : [ ( - ( - ID ) ) bool int { } : ID ( ) { }",
  "func false ( ) { print ( ( false + - - ( ( 123 ) ) - ID ) ) if ( ID ) { } } func ID ( ) { }",
  ") false ( ) { print ( ( false + - - ( ( 123 ) ) - ID ) func if ( ID ) { } } func ID ( ) { }",
  ") false ( ) { print ( ( false + - - ( ( { ) ) - ID ) func if ( ID ) { } } func ID ( ) 123 }",
  "func ID ( ) { var ID : int var ID : [ ] [ ( ( ( false ) ) ) ] int } func { ( ) ID }",
  "func ID ( ) ID var ID : int var { : [ ] [ ( ( ( false ) ) ) ] int } func { ( ) ID }",
  "func ID ( ) ID var ID [ int var { : [ ] : ( ( ( false ) ) ) ] int } func { ( ) ID }",
  "func ID ( ) { } func ID ( ) { var ID : [ } int ]",
  "func ID ( ) } } func ID ( ) { var ID : [ { int ]",
  "func ID ( ) } } func ID ( ) { var ID : [ { int ]",
  "func ID ( ) { var bool : bool var ID : ID { var ID : int var ID : [ ( - true ) ] bool } }",
  "func ID ( ) { var bool ID bool var ID : ID { var : : int var ID : [ ( - true ) ] bool } }",
  "func ID ( ) { var bool ID bool var ID : ID { var : : int var ID : [ ( - true ) ] bool } }",
  "func ID var ID : int ) { } func ID ( ) { var ID : bool ( ID : bool return }",
  "func ID var ID : int ) { } func return ( ) { var ID : bool ( ID : bool ID }",
  "func ID var ID : int bool { } func return ( ) { var ID : bool ( ID : ) ID }",
  "func ID ( ID : int ) { return ID [ ID ( ) [ ( ( - ( - ( - ID ) ) ) ) ( ] [ ] ( ID ) ) ] } func ID ( ) { }",
  "func ID ( ID : int ) { return ID [ ID ( ) [ ( { - ( - ( - ID ) ) ) ) ( ] [ ] ( ID ) ) ] } func ID ( ) ( }",
  "func ID ( ID : int func { return ID [ ID ( ) [ ( { - ( - ( - ID ) ) ) ) ( ] [ ] ( ID ) ) ] } ) ID ( ) ( }",
  "func ID ( int { var ID : [ ] bool var ID : int { var ID : ) ID [ ( ( ID ) ) ] = - ID } }",
  "func ID ( int { var ID } [ ] bool var ID : int { var ID : ) ID [ ( ( ID ) ) ] = - ID : }",
  "func int ( int { var ID } [ ] bool var ID : ID { var ID : ) ID [ ( ( ID ) ) ] = - ID : }",
  "/ ID ( ) : [ 123 / - - ID ( false * ID ( ( ID ) ) func ( ( ( ID ) ) ) ) * ID ] int { }",
  "/ ID ( ) : [ 123 / - - ID ( false * ID ( ( ID ) ) func } ( ( ID ) ) ) ) * ID ] int { (",
  "/ ID ( ) : [ 123 / - - ID ( false * ID ( ( ID ) ) func } ( * ID ) ) ) ) ( ID ] int { (",
  "( ID func ID : [ ID ( ) / ID / ( - - - 123 + true ) ] bool ) { }",
  "( ID func ID : [ ID ( ) / ID / ( - - - 123 + true { ] bool ) ) }",
  "( ID func ID : [ ID ( ) / ID 123 ( - - - / + true { ] bool ) ) }",
  "func ID ( ) : int { call ID ( ID [ - - ID ( ) / - ID [ ] ID ] ) }",
  "func ID ( ) : int { call ID ( ID [ - } ID ( ) / - ID [ ] ID ] ) -",
  "func ID ( - : int { call ID ( ID [ - } ID ( ) / - ID [ ] ID ] ) )",
  "func ID ( ID : bool ) : [ ] int ID var ID : bool var ID : int { var { : [ ] bool } return ID } func ID ( ) { }",
  "func ID { ID : bool ) : [ ] int ID var ID : bool var ID : int { var ( : [ ] bool } return ID } func ID ( ) { }",
  "func ID { ID : bool ) : [ ] int ID var ID : bool var ID : int { var ( : ( ] bool } return ID } func ID [ ) { }",
  "func ID ( ) { var ID : [ ID ( - ID ( ) [ false [ [ false ] ) ] ] ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID ( - ID ( ) { false [ [ false ] ) ] ] ] int } func ID ( ) [ }",
  "func ID ( ) { var ID : [ ID ( - ID ( ) { false [ [ false ] ) ] ] ] int } func ID ( ) [ }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ] bool ID = ) / - ( - ID 123 } func ID ( ) { }",
  "func ) ( ID : int , ID : bool ID { var ID : [ ] bool ID = ) / - ( - ID 123 } func ID ( ) { }",
  "func ) ( ID : int , ) : bool ID { var ID : [ ] bool ID = ID / - ( - ID 123 } func ID ( ) { }",
  "func ID ( true : bool { var ID : [ ] [ ) and ( ID [ ID ] [ - ( true ) ] ) and - ( ( ID ) ) ] bool var ID : int }",
  "func ID ( true : bool { var ID ID [ ] [ ) and ( ID [ : ] [ - ( true ) ] ) and - ( ( ID ) ) ] bool var ID : int }",
  "func ID ( true and bool { var ID ID [ ] [ ) : ( ID [ : ] [ - ( true ) ] ) and - ( ( ID ) ) ] bool var ID : int }",
  "func ID ( ID : [ ] bool , ID : [ ) - 123 * - 123 / ID > ID ] bool - { }",
  "func ID ( ID : [ ] bool , - : [ ) - 123 * ID 123 / ID > ID ] bool - { }",
  "func ID ( ID } [ ] bool , - : [ ) - 123 * ID 123 / ID > ID ] bool - { :",
  "func ID ( ) { var ID bool : var ID : [ ID [ true / false != - false ] ] bool }",
  "func ID ( ) { var ID bool : var ID : [ ID != true / false [ - false ] ] bool }",
  "func ID ( ) { var ID bool : var ID : [ ID != false / false [ - true ] ] bool }",
  "func ID ( ID : [ ] int ) { var ID : int var ID bool int { var ID : int var ID : : return ID } { } }",
  "func ID ( ID : [ ] int ) { var ID : int var ID bool int { var ID : int var } : : return ID ID { } }",
  "func ID { ID : [ ] int ) { var ID : int var ID bool int { var ID : int var } : : return ID ID ( } }",
  "func ID ( ) : bool { var ID : bool } func ID ( ) { { var bool : int var ID : ID } return }",
  "func ID ( ) ID bool { var ID : bool } func ID ( ) { { var bool : int var ID : : } return }",
  "func ID { ) ID bool { var ID : bool } func ID ( ) { ( var bool : int var ID : : } return }",
  "func ID ( ID : bool ) : int { var ID : int } ID ( ) [ 123 / false / 123 ] return func ID ( ) { }",
  "func ID ( ID : bool ) : int { var func : int } ID ( ) [ 123 / false / 123 ] return ID ID ( ) { }",
  "func ID ( ID : bool ) : int { var ) : int } ID ( ) [ 123 / false / 123 ] return ID ID ( func { }",
  "func ID ( ) : int { ID ( ) [ ID ( ID - false ) ] [ ( ( false ) ) ] = ID false = - true } func ID ( ) { }",
  "func ID ( ) : int { ID ( ) [ ID ( ID - false ) ] [ ( ( false ) ) } = ID false = - true } func ID ( ) { ]",
  "func ID ( ) : int { ID ( ) [ ID ( ID - false ) ] [ ( ( false ) ) } = ID false = - true } func ID ( ) { ]",
  "func ID ( ) { var ID : [ ID > [ false / ID ( false ] [ true ] / ( - ( ID ) ) ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ID > [ false / ID ( false ] } true ] / ( - ( ID ) ) ) ] int } func ID ( ) { [",
  "func ID ( ) { var ID ) [ ID > [ false / ID ( false ] } true ] / ( - ( ID ) ) ) ] int } func ID ( : { [",
  "func ID ( ID : bool , ID : int , ID : [ ID { 123 - - true / ID ) ] [ ] [ ] [ ] int ) { } func ID ( ) ( }",
  "func ID ( ID : bool , ID : int , ID : [ ID { 123 - - true / ID ) ] [ ] [ ] [ ] ) ) { } func ID ( int ( }",
  "func ID ( ID : bool , ID : int , ID : [ ID { 123 - - true / ID ] ) [ ] [ ] [ ] ) ) { } func ID ( int ( }",
  "int ID ( ID : bool , ID : [ ID [ - ID [ ( ( - false ) ) ] [ - false ] ] ] func ) { }",
  "int ID ( ID : bool , ID : [ ID [ - ID [ ( ( - false ) ) ] [ - false ] ] ] func ) { }",
  "int ID ( ID : bool , ID : { ID [ - ID [ ( ( - false ) ) ] [ - false ] ] ] func ) [ }",
  "func ID ( ) : int { var ID : int var ID int [ ] : }",
  "func ID ( ) : : { var ID : int var ID int [ ] int }",
  "func ID ID ) : : { var ( : int var ID int [ ] int }",
  "func ID ( ID : bool , ID : [ ( ( - ( - ID ) ) ) ] int , ID : bool } { ) func ID ( ) { }",
  "func ID ( ID : bool , ID : [ : ( - ( - ID ) ) ) ] int , ID ( bool } { ) func ID ( ) { }",
  "func ID ( ID : bool { ID : [ : ( - ( - ID ) ) ) ] int , ID ( bool } , ) func ID ( ) { }",
  "func ID ( ID : bool ) : ] { var ID : bool var ID : [ ( - ( 123 ) ) bool int }",
  "func ID ( ) : bool ID : ] { var ID : bool var ID : [ ( - ( 123 ) ) bool int }",
  "ID func ( ) : bool ID : ] { var ID : bool var ID : [ ( - ( 123 ) ) bool int }",
  "func ID ( { : int , ID : bool ) : bool { var ID : bool var ID : [ ] bool if ( ( ID ) ) ID } }",
  ": ID ( { : int , ID : bool ) : bool { var ID : bool var ID func [ ] bool if ( ( ID ) ) ID } }",
  ": ID ( { ) int , ID : bool ) : bool { var ID : bool var ID func [ ] bool if ( ( ID ) : ID } }",
  "func ID ( ID : bool , ID print int ) { var ID : bool { var ID : bool : - true - - true - false { } } print - ID }",
  "func ID ( ID : bool , ID print int ) { var ID : bool { var ID : bool : - true - - true - false { } } print - ID }",
  "func ID ( ID : bool , ID print int ) { var ID : bool { var ID : bool : - true } - true - false { } - print - ID }",
  "func ID ( ) : bool { while ID ( ) func true - true / true / - ( ID ) { } if ID { } } * ID ( ) { }",
  "func ID ( ) : bool { while ID ( ID func true - true / true / - ( ID ) { } if ID { } } * ) ( ) { }",
  "func ID ( ID : int , ID : [ ID ( ) [ true false ID [ and ] [ ( ID ) ] and ( ( 123 ) ) ] [ false ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID ( ) [ true false ID [ and ] [ ( ID ) ] and ( ( 123 ) ) ] [ false ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID ( ) [ true false ID [ and ] [ ( ID ) ] and ( ( 123 ) ) ] [ false ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID 123 int , ID : int ) { var ID : bool print - - false + ( ( ( ( ( true ) ) ) ) ) + : }",
  "func ID ( ID : [ ] int , ID ID int , ID : int ) { var 123 : bool print - - false + ( ( ( ( ( true ) ) ) ) ) + : }",
  "func ID ( ID : [ ] var , ID ID int , ID : int ) { int 123 : bool print - - false + ( ( ( ( ( true ) ) ) ) ) + : }",
  "func ID ) ) { var ID : int return ( ( ( ID ) ( ) }",
  "func ID ) ) { var ID : int return ( ( ( } ) ( ) ID",
  "func ID ) ) { var ID return int : ( ( ( } ) ( ) ID",
  "func ID ( ID : int ) : bool { true ID : [ - ID ( - - ( - var ) ) ] [ ] bool var ID : int }",
  "func ID ( ID : int ) : bool { true ID : [ - ID ( var - ( - var ) ) ] [ ] bool - ID : int }",
  "func ID ( ID : int ) : bool int true ID : [ - ID ( var - ( - var ) ) ] [ ] bool - ID : { }",
  "func ID ( ID : int , ID : bool , ID false bool ) { var ID : bool return ID * : / ID }",
  "func ID ( ID : int , ID : : , ID false bool ) { var ID : bool return ID * bool / ID }",
  "func ID ( ID : int , ID : : , false ID bool ) { var ID : bool return ID * bool / ID }",
  "func ID ( ID : int [ ID : [ ] , ] bool ) { var ID : [ ] bool var ID : int print ID } func ID ( ) { }",
  "func ID ( ID : int [ ID : [ ] , ] bool ) { var ID : [ ] bool var ID : int print ID } ( ID func ) { }",
  "func ID ( func : int [ ID : [ ] , ] bool ) { var ID : [ ] bool var ID : int print ID } ( ID ID ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) - [ ] bool { var ID : bool if - - true { } ID = - ( : ( ID ) ) }",
  "func ID ( ID : bool , ID : bool , bool : ID ) - [ ] bool { var ID : bool if - - true { } ID = - ( : ( ID ) ) }",
  "func , ( ID : bool ID ID : bool ) : bool { }",
  "func , ( ID : bool ID ID : bool ) : { bool }",
  ") ID ( func { var ID : int call ID ( ) if - ID ( ) [ - ID ] { } }",
  ") ID ( func { } ID : int call ID ( ) if - ID ( ) [ - ID ] { } var",
  ") ID ( func { } ID : int call ID ( ) if - ID ( ) [ - ID ] { } var",
  "int ID ( ID : bool ) : bool { var ID : bool var ID : bool return } func ID ( ID : int ) : func { { } ID = false }",
  "int ID ( ID : bool ) : bool { var ID return bool var ID : bool : } func ID ( ID : int ) : func { { } ID = false }",
  "int ID ( ID : bool ) : bool { var ID return bool var ID : bool { } func ID ( ID : int ) : func { : } ID = false }",
  "func ( ID ) { var ID : bool if ID ( - - ( - - ID ) ) { } print ( - ( ( false ) ) ) }",
  "func ( ID ) { var ID : bool if ID ( - - ( - - ID ) ) { } print ( - ( ( false ) } ) )",
  "func ( ID ) { var ID ( bool if ID : - - ( - - ID ) ) { } print ( - ( ( false ) } ) )",
  "func ID ( true : int , ID : [ ] int ) { call ID ( - ID / - false == ID ) } func ID ( ) { }",
  "func ID ( true { int , ID : [ ] int ) { call ID ( - ID / - false == ID ) } func ID ( ) : }",
  "func ID ( true { int , ID : [ : int ) { call ID ( - ID / - false == ID ) } func ID ( ) ] }",
  "func ID ( ) { var ID : bool while - ID ( ( ID ) [ ID ] [ ( - ( - ( ID ) ) ) ] ) { } while ID { } }",
  "func ID ( ) { var ID : bool while - ID ( ( ID ) [ ID ] [ - ( ( - ( ID ) ) ) ] ) { } while ID { } }",
  "func ID ( ) { var ID : bool while - ID ID ( ID ) [ ( ] [ - ( ( - ( ID ) ) ) ] ) { } while ID { } }",
  "func ID ( ) ID var { : bool var ID : int { } if ( ID ( ) ) { } }",
  "func ID ( ) if var { : bool var ID : int { } ID ( ID ( ) ) { } }",
  "ID ID ( ) if var { : bool var ID : int { } ID ( func ( ) ) { } }",
  "func ID ( ID : [ - - ID - ( false + ( ( ID ) ) + ID ) ) ] [ ] bool ) { } func ( ( ) { }",
  "func ID ( ID : [ - - ID - } false + ( ( ID ) ) + ID ) ) ] [ ] bool ) { } func ( ( ) { (",
  "func ID ] ) : [ ID [ - ( - ( true * 123 * - ID ) ) ] [ ID ] ] [ ( bool { } func ID ( ) { }",
  "func ID ] ) : [ ID [ - ( - ( true * 123 ID - ID ) ) ] [ * ] ] [ ( bool { } func ID ( ) { }",
  "func ID { ) ( while true * ( true and - ID ( ) * - 123 / - ( false ) and - ( false ) ) { } { } }",
  "func ID { ) ( while true * ( true and - ID ( ) * - 123 / - ( false ) and - ( false ) ) { } { } }",
  "func ID { ) ( while true * ) true and - ID ( ) * - 123 / - ( false ) and - ( false ( ) { } { } }",
  "func ID ( ) { var ID : int call ID ( ) } func ID ( ) : { { var ID : bool bool return 123 } }",
  "func bool ( ) { var ID : int call ID ( ) } func ID ( ) : { { var ID : bool ID return 123 } }",
  "func bool ( ) { var ID : int call ID ( ) } func ID ( ) : { : var ID { bool ID return 123 } }",
  "func ID ( ID : int , ID : bool ) { } ID : [ ] int var ID : [ ID / ID ] int } func ID ( ) { var",
  "func ID ( ID : int , ID : bool ) func } ID : [ ] int var ID : [ ID / ID ] int } { ID ( ) { var",
  "func ID ( ID : int , int : bool ) func } ID : [ ] ID var ID : [ ID / ID ] int } { ID ( ) { var",
  "func ( ( ) : bool { var ID : bool if true / - ( ID ID ID ) ) { } }",
  "func ( ( ) : bool { var ID : bool if true / - ( ID } ID ) ) { } ID",
  "func ID ( ID : : ] int , ID [ [ ] [ ] bool , ID : bool ) { return ID ( ) } func ID ( ) { }",
  "func ID ( ID : : ] int , ID [ [ ] [ ] bool , ID { bool ) : return ID ( ) } func ID ( ) { }",
  "func ID : ID ( : ] int , ID [ [ ] [ ] bool , ID { bool ) : return ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int ID ( ID ( - ( 123 ) ) ] [ - ( ID ) ] = - ID call ID [ ) }",
  "func ID ( ) : bool { var ID : int ID ( ID ( - ( 123 ) ) ] [ - ( ID ) ] = - ID call ID [ ) }",
  "func ID ( ) : bool { var ID : int ID ( ID ( call ( 123 ) ) ] [ - ( ID ) ] = - ID - ID [ ) }",
  "func ID ( ID : [ ID ( ID [ - false and 123 ] } ( - false ) ] ) ] int ) { [",
  "func ID ( ID ) [ ID ( ID [ - false and 123 ] } ( - false : ] ) ] int ) { [",
  "func ID ( ID ) [ ID ( ID [ - false and 123 ] } ( - false : ] ) ] int ) { [",
  "func ID ( ID : [ ] [ ] bool ) : bool print var ID : bool var ID : bool { 123 * 123 } func ID ( ) { }",
  "func ID ( ID : [ 123 [ ] bool ) : bool print var ID : bool var ID : bool { 123 * ] } func ID ( ) { }",
  "func ID 123 ID : [ ( [ ] bool ) : bool print var ID : bool var ID : bool { 123 * ] } func ID ( ) { }",
  "func ) ( ID : int , ID : [ ] bool ) : bool { var ID : [ true + - ( 123 ID + - ID ] bool var ID : [ ] [ ] [ ] int }",
  "func ) ( ID : int , ID : ID ] bool ) : bool { var ID : [ true + - ( 123 [ + - ID ] bool var ID : [ ] [ ] [ ] int }",
  "func ) ( ID : int , ID : ID ] bool ) : bool { var ID : [ true + - ( 123 int + - ID ] bool var ID : [ ] [ ] [ ] [ }",
  "func ID ( false : int { var ID : [ ) and - - - ( ( 123 ) ) ] [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( false : int { var ID : [ ) and - - - ( ( 123 ) ) ] [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( func : int { var ID : [ ) and - - - ( ( 123 ) ) ] [ ] [ ] [ ] bool } false ID ( ) { }",
  "func ID ( ID : int ID , : bool ) : bool { var ID : [ ] [ - 123 * - ( true ) ] int }",
  "func ID ( ID : int ID , : bool ) : * { var ID : [ ] [ - 123 bool - ( true ) ] int }",
  "func ID ( ID : int ID , : bool ) : * [ var ID : [ ] { - 123 bool - ( true ) ] int }",
  "func ID ( ) { var ID : int var ID : [ 123 bool - ( false - - ( ( - true ) ) ) ] [ ] [ ] [ ] / }",
  "func ID ( ) { var ID : int var ID : [ 123 bool [ ( false - - ( ( - true ) ) ) ] [ ] - ] [ ] / }",
  "func ID ( ) { var ID : int var ID : [ 123 bool [ ( false - - ( ( - true ) ) ) ] [ ] - ] [ ] / }",
  "func ID ( print : [ ] bool , ID : int , ID : int ) : int { if ( - ( 123 ) ) { } ID ( - 123 ) } func ID ( ) { }",
  "func ID ( print : [ ] bool , ID : int - ID : int ) : int { if ( , ( 123 ) ) { } ID ( - 123 ) } func ID ( ) { }",
  "func ID ( print : : ] bool , ID [ int - ID : int ) : int { if ( , ( 123 ) ) { } ID ( - 123 ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] ID ( ID [ - - - - [ ] ) ] [ ] int ) { }",
  "[ ID ( ID : bool , ID : [ ] ID ( ID [ - - - - [ ] ) ] func ] int ) { }",
  "[ ID ( ID : bool , ) : [ ] ID ( ID [ - - - - [ ] ) ] func ] int ID { }",
  "func ID ( ID : [ { [ ( true / - - ( ID ( ) ) * - - ( ID ) ) ] [ ] bool ) { } func ID ( ) ] }",
  "func ID ( ID : [ { [ ( / true - - ( ID ( ) ) * - - ( ID ) ) ] [ ] bool ) { } func ID ( ) ] }",
  "func ID ( ID : [ { [ ( / true - - ( ID ( ) ) * ( - - ID ) ) ] [ ] bool ) { } func ID ( ) ] }",
  "func ID ( ID : [ ] [ false ) ( - - 123 / ( false ) * ( ID * ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ] bool { true ID : [ ] int var ID : int print - var and ID and ID } func ID ( ) { }",
  "func ID ( ) : [ ] bool { true ID : [ ] int var ID : int print - var and ID and ( } func ID ID ) { }",
  "func ID ( ) : : ] bool { true ID : [ ] int var ID [ int print - var and ID and ( } func ID ID ) { }",
  "func ID ( ) ] var ID : bool var ID : [ ] bool if ID [ 123 * false / ( - ID ) ] [ ( ( ID ) ) { { } while ( false ) { } } func ID ( ) { }",
  "func ID ( ) ] var ID : bool var ID : [ ] bool if ID [ 123 * false / ( - ID ) ] [ { ( ID ) ) ( { } while ( false ) { } } func ID ( ) { }",
  "func ID ( ) ] var ID bool : var ID : [ ] bool if ID [ 123 * false / ( - ID ) ] [ { ( ID ) ) ( { } while ( false ) { } } func ID ( ) { }",
  "func ID ( [ { return } func ID ( ID : [ ] ) ID ( ( ( ID ) ) ) ] int ) { }",
  "func ID ( [ { : } func ID ( ID return [ ] ) ID ( ( ( ID ) ) ) ] int ) { }",
  "func ID ( func { : } [ ID ( ID return [ ] ) ID ( ( ( ID ) ) ) ] int ) { }",
  "func ID ( ) : int { call ID ( ) while - ( ID ID true ] ) { } } func [ ( ) { }",
  "func ID ( ) : int { call ID } ) while - ( ID ID true ] ) { ( } func [ ( ) { }",
  "func ID ( ) ID int { call ID } ) while - ( : ID true ] ) { ( } func [ ( ) { }",
  "func ID ( ) { } func ID ( ID : bool ) : int ID var { : bool var ID : bool }",
  "func ID ( ) { } func ID } ID : bool ) : int ID var { : bool var ID : bool (",
  "func ID ( ) { } func ID } ID : bool ) : int ID var { : bool var ID : bool (",
  "func ID ( ) : int : { var ID { [ ID [ ( - - ID ) ] [ ( 123 ) ] ] [ ] bool } } func ID ( ) { }",
  "func ID ( ) : int : { var ID { [ ID [ ( - - ID ) ] [ ( 123 ) ] ] [ ] bool } } func ID ( ) } {",
  "func ID ( ) : int : { var ID { [ ID [ ( - { ID ) ] [ ( 123 ) ] ] [ ] bool } } func ID ( ) } -",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID : int ID } func return ( ID : [ ] [ ] int ) { }",
  "func ID ( ID : int , ID : int { ID : bool ) { var ID : int ID } func return ( ID : [ ] [ ] int ) , }",
  "func ID ( ID : int , ID : int { ID : bool ) { var ID : int ID } func return ID ( : [ ] [ ] int ) , }",
  "func ID ( ) <= if ID ( 123 { ( - ( true ) ) ) { } }",
  "func ID ( ) ) if ID ( 123 { ( - ( true ) <= ) { } }",
  "func ID ( ) ) if ID ( 123 { ( - ( true ) } ) { } <=",
  "func ID ( ) : int { ID ( ) [ false - ( ID [ ID ] [ ID ] ) + ( ( - ID ) ) ] ) ( ID [ ] = ID call ID ( ) }",
  "func ID ( ) : int { ID ( ) [ false - ( ID [ ID ] [ ) ] ) + ( ( - ID ) ) ] ) ( ID [ ] = ID call ID ( ID }",
  "func ID ] ) : int { ID ( ) [ false - ( ID [ ID ] [ ) ( ) + ( ( - ID ) ) ] ) ( ID [ ] = ID call ID ( ID }",
  "func ID ( ID : [ - ID * - - ( ID true * false - true ) * ID ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ - ID * - - ) ID true * false - true ) * ID ] bool ) { } func ID ( ( { }",
  "func ID ( ID : [ - ID * - - ) ID true { false - true ) * ID ] bool ) { } func ID ( ( * }",
  "func ID ( ID : [ ( ( 123 [ ID * ( 123 ) ] ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID ID [ ( ( 123 [ : * ( 123 ) ] ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID ID [ ( ( 123 [ : * ( 123 ) ] ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] / var ID : [ false int - - false - ID - - ( ( ID ) ) ] bool }",
  "func ID ( ) { var ID : ID ] / var [ : [ false int - - false - ID - - ( ( ID ) ) ] bool }",
  "func ID ID ) { var ID : ID ] / var [ : [ false int - - false - ( - - ( ( ID ) ) ] bool }",
  "func ID ( ID : [ ( [ ID - ID ( ID ] + - ID ) ) ] int ) { }",
  "func ID ( ID : [ ( [ ID - ) ( ID ] + - ID ID ) ] int ) { }",
  "func ID ( ID : [ ( [ ID - ) ( ID ] + - ID ID ) ] int ) { }",
  "func ID ( ID : ) true / ID [ ID ( ( false [ ) ] [ ( ( 123 ) ) ] / ID ] int ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : int var ID : bool return - ( - 123 { } func ID ( ) ) }",
  "func ID ( ID : int , ID : int , ID : int ) ( var ID : int var ID : bool return - ( - 123 { } func ID { ) ) }",
  "func ID ( ID : [ ID * - ID / true + true ID ID [ ( ( - - / ) ) ] [ ( ( true ) ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ID ID - ID / true + true ID * [ ( ( - - / ) ) ] [ ( ( true ) ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ID ID - ID / true + true ID * [ ( ( - - / ) ) ] [ ( ( true ) ) ] int ] ) { } func ID ( ) { }",
  "func ID ( ID : bool ) { } ID : int while ( 123 - - false + false ) { } var func ID ( ) { }",
  "func ID ( ID : bool ) { - ID : int while ( 123 } - false + false ) { } var func ID ( ) { }",
  "func ID ID ID : bool ) { - ID : int while ( 123 } - false + false ) { } var func ( ( ) { }",
  "func ID ( ) ( [ ( ( 123 - true / ( ( ( true ) ) ) / : 123 ) - - true ) ) ] int { } func ID ( ) { }",
  "func ID ( ) ( [ ( ( 123 - true / ( ( ( true ) ) ) / : 123 ) - - true ) ) ] int { } func ID ) ( { }",
  "func ID ( ) ( [ ( ( 123 - / true ( ( ( true ) ) ) / : 123 ) - - true ) ) ] int { } func ID ) ( { }",
  "func ID ( ) : int { if ( false + true * ID ID - ( false ) ] * - ( - [ ) ) { } { } } func ID ( ) { }",
  "func ID ( ) : int { if ( false + true * ID ID - ( false ) ] * - ( - [ ) ) } } { { } func ID ( ) { }",
  "func ID ( ) : int { if ( false + true * ID ID - ( false ) ] * - ( } [ ) ) } } { { - func ID ( ) { }",
  "func ID ID ) { var ID : int while false / ID ( ( ( true ) ) / - ID { } print ID }",
  "} ID ID ) { var ID : int while false / ID ( ( ( true ) ) / - ID { } print ID func",
  "} ID ID ) { var ID : ID while false / ID ( ( ( true ) ) / - int { } print ID func",
  "func ID ( ) : int { var ID : int while ID 123 / - ID ( ( ( ID ) ) ) * false { } ID = - ( - - - ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : int while - 123 / - ID ( ( ( ID ) ) ) * false { } ID = - ( - ID - ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : int while - 123 / - ID ( ( ( ID ) ) ) * false { } = ID - ( - ID - ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - ID [ ) [ ID ( ) ( ID ] ] [ ( - ( true ) ) ] ] bool ) { }",
  "func ID ( ID ) bool , ID : [ - ID [ ) [ ID ( ) ( ID ] ] [ ( - ( true ) : ] ] bool ) { }",
  "func ID ( - ) bool , ID : [ - ID [ ) [ ID ( ) ( ID ] ] [ ( ID ( true ) : ] ] bool ) { }",
  "func ID ( ) : ] [ [ ] int { call ID ( ) { call ID ( ( ID ) ) } }",
  "func ) ( ) : ] [ [ ] int { call ID ( ) { call ID ( ( ID ) ID } }",
  "func ) ( ID : ] [ [ ] int { call ID ( ) { call ) ( ( ID ) ID } }",
  "func ID ( ID : bool , ID : int , [ : bool ) : ID ] int { { var ID : [ 123 ] bool } ID = - ( 123 ) }",
  "func ID ( ID : bool , ID : int ( [ : bool ) : ID ] int { { var ID : [ 123 ] bool } ID = - , 123 ) }",
  "func ID int ID : bool , ID : ( ( [ : bool ) : ID ] int { { var ID : [ 123 ] bool } ID = - , 123 ) }",
  "func ID ( ) : bool { var ID : int var ID : bool return ID ( ( ( - ) ID ( ) ) ) }",
  "( ID ( ) : bool { var ID : int var ID : bool return ID ( ( ( - ) ID func ) ) ) }",
  "( ID ( ) : bool { var ID : ) var ID : bool return ID ( ( ( - ) ID func ) int ) }",
  "func ID ( ) : [ false / false ] func ] bool { } [ ID ( ) { call ID ( ) }",
  "func ID ( ) : [ false / false ] func ] bool { } [ ( ( ) { call ID ID ) }",
  "func ID ( ) [ [ false / false ] func ] bool { } : ( ( ) { call ID ID ) }",
  "func ID ( ID : int ) : bool { print ( } 123 != ID ) ) } func ID ( ) { (",
  "func ID ( ID : int ) : bool { print ( } 123 ( ID ) ) } func ID != ) { (",
  "func ID ( ID : bool ) { var ID : int var ID : int print - false * ID != ID ID = ( ) ( ID ) - }",
  "func ID ( ID : bool ) { var ID : int var ID : int print - false * ID != ID ID = ( ) ( ID ) - }",
  "func ID ( ID : bool ) { var ID : int var ID : int print - false * - != ID ID = ( ) ( ID ) ID }",
  "func ID ( ID : bool , ID : [ - ] * - - ID [ ID ( ) false ] [ ] [ ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - ] * - - ID [ ID ( ) false ] [ ] [ ] [ ] [ ] [ ) bool ) { } func ID ( ] { }",
  "func ID ( ID : bool , ID : [ - ] * - - ID [ ID ( ) false ] [ ] { ] [ ] [ ] [ ) bool ) { } func ID ( ] [ }",
  "func ID ( ) { var ID : int bool ID : bool { var ID : var { var ID : int var ID : int } while ( true ) { } } } func ID ( ) { }",
  "func ID ( ) { var ID : ID bool ID : bool { var int : var { var ID : int var ID : int } while ( true ) { } } } func ID ( ) { }",
  "func ID ( while { var ID : ID bool ID : bool { var int : var { var ID : int var ID : int } ) ( true ) { } } } func ID ( ) { }",
  "func ID ( ID : ( , ID : bool ) : [ ( - ( bool ID ) ) ) ] int { }",
  "func ID ( ID : ( , ID : bool int : [ ( - ( bool ID ) ) ) ] ) { }",
  "func ID ( ID : ( ( ID : bool int : [ ( - , bool ID ) ) ) ] ) { }",
  "func ID ( ) : int { var ID : call var ID : int bool ID ( ) }",
  "func ID ( ) : int call var ID : { var ID : int bool ID ( ) }",
  "var ID ( ) : int call func ID : { var ID : int bool ID ( ) }",
  "func ID ( ID : int , ID : int , ID : bool ) ) var ID : [ ] bool ID ( false { = - 123 while ( ( ( 123 ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : int , 123 : int , ID : bool ) ) var ID : [ ] bool ID ( false { = - 123 while ( ( ( ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : int , 123 : int , ID : bool ) ) var ID : [ ] bool ) ( false { = - 123 while ( ( ( ID ) ) ID { } } func ID ( ) { }",
  "func ID ID ID : [ ] int , ID : int ) : [ ] int { var ( : bool } func ID ( ) : int { }",
  "func ID ID ID : [ ] int , ID : int : : [ ] int { var ( ) bool } func ID ( ) : int { }",
  "func ID ID ID : [ ] int ( ID : int : : [ ] int { var , ) bool } func ID ( ) : int { }",
  "func ID ( - { return - ( true / 123 - ( - ) 123 ) - - ID ) }",
  "func ID ( - { return - ( 123 / 123 - ( - ) true ) - - ID ) }",
  "func ID ( { - return - ( 123 / 123 - ( - ) true ) - - ID ) }",
  "func ID ( - { var ID : [ ) ( ID [ ID ( ) ] ) ] bool } func ID ( ) { }",
  "func ID ( - { var ID : [ ) ( ID [ ID ) ( ] ) ] bool } func ID ( ) { }",
  "func ID ( - { var ID : [ ) ( ID [ ID ) ( ] ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool if ( { ( - ( true ) ) ) - } while true { } }",
  "func ID ( ( { var ID : int var ID : bool if ( { ) - ( true ) ) ) - } while true { } }",
  "{ ID ( ( { var ID : int var ID : bool if ( func ) - ( true ) ) ) - } while true { } }",
  "func ID ( ) : bool { var ID : [ true / ( ( ( 123 ) ) ) * - ( ( false ) ) ] bool var ID ) int } func ID ( : { }",
  "func ID ( ) : bool / var ID : [ true { ( ( ( 123 ) ) ) * - ( ( false ) ) ] bool var ID ) int } func ID ( : { }",
  "func ID ( ) : bool / var ID : [ true { ( ( ( 123 ) ) ) * : ( ( false ) ) ] bool var ID ) int } func ID ( - { }",
  "func ID ( ) : [ - ( true / false + ( ] 123 ) ) - - - ( ID ) ) ( [ ] int { }",
  "func ID ] ) : [ - ( true / false + ( ( 123 ) ) - - - ( ID ) ) ( [ ] int { }",
  "func ID ] ) : [ - ( true / false + ( ( 123 ) ) - ] - ( ID ) ) ( [ - int { }",
  "func ID ( ) : int { ID var : int var ID : [ ] [ ] int }",
  "func ID ( ) : int { ID var : int ] ID : [ var [ ] int }",
  "func var ( ) : int { ID var : int ] ID : [ ID [ ] int }",
  "func ID ( ) { var ID : [ ] int if true / ( ID * ID ) - / false { } call ID ( ) }",
  "ID ID ( ) { var func : [ ] int if true / ( ID * ID ) - / false { } call ID ( ) }",
  "ID ID ( ) { var func : [ ] int if true / ( ID * ID ) - / false { } ( ID call ) }",
  "func ID ( ID : [ ] [ - true / ID ( ) - ID ) ( ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ - true / ID ( ) - ID ) ( ] bool { ) } func ID ( ) { }",
  "func ID ( ID : [ ] [ - true / ID ( ) - ID ) ( ] bool { } } func ID ( ) { )",
  "func ID ( ) : bool { if true == - { - ( - false ) ID } }",
  "func ID ( ) : - { if true == - { - ( bool false ) ID } }",
  "func ID ( ) : - { if true == - { - ( bool } ) ID } false",
  "func ID ( ) { var ID : bool return ( ID ID ( ( * ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool return ( ID ID ( ( * ) } ) } func ID ( ) { )",
  "func ID } ) { var ID : bool return ( ID ID ( ( * ) ( ) } func ID ( ) { )",
  "func ] ( ID : [ ] [ ID int , ID : int ) : bool { var ID : [ ] [ - ID ] [ ] bool var ID : int }",
  "func ] ] ID : [ ] [ ID int , ID : int ) : bool { var ID : [ ] [ - ID ] [ ( bool var ID : int }",
  "func int ] ID : [ ] [ ID ] , ID : int ) : bool { var ID : [ ] [ - ID ] [ ( bool var ID : int }",
  "func * ( ID : int ) : [ ] [ true ID ( ID ( ) [ ( false ) ] [ ID ] ) ] bool { }",
  "func * ( ID : int ) : [ ] [ true ID ( ID ( ) bool ( false ) ] [ ID ] ) ] [ { }",
  "func * ( ID : int ) : [ ] [ true ID ( ID ( ) bool ( false ) ] [ ID ] ) ] [ { }",
  "func ID ( ID : bool ) { var ID : [ ] [ true / ID and true and - ID } bool ]",
  "( ID func ID : bool ) { var ID : [ ] [ true / ID and true and - ID } bool ]",
  "( ID func bool : bool ) { var ID : [ ] [ true / ID and true and - ID } ID ]",
  "func ID ( ) } [ - ID ( ) / ( ( - - ( ( - ( ID ) ) ) ) ) / ID ] bool { } func ID ( ) { :",
  "func ID ( ) } [ - ID ( ) - ( ( / - ( ( - ( ID ) ) ) ) ) / ID ] bool { } func ID ( ) { :",
  "func ID ( ) } [ - ID ( ) - ( ( / - ( ( - ( ID ) ) ) ) ) / ID ] bool { } func ( ID ) { :",
  "func ID ( ID : int , ID : int , ID : or ] [ true or 123 * false * ( 123 ) [ - ( ID ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID false or ] [ true or 123 * : * ( 123 ) [ - ( ID ) ] bool ) { } func ID ( ) { }",
  "func ID ( [ : int , ID : int , ID false or ] [ true or 123 * : * ( 123 ) ID - ( ID ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : ] var ID : [ ( ( ( 123 ) ) ) ] [ int bool }",
  "func ID : ) { var ID ( ] var ID : [ ( ( ( 123 ) ) ) ] [ int bool }",
  "func ID : ) ) var ID ( ] var ID : [ ( ( ( 123 { ) ) ] [ int bool }",
  "func ID ( ) : + { while ID / - false - - - - false / ( ID ) int ID { } call ID ( ) }",
  "func ID ( ) : + { while ID ID - false - - - - false / ( ID ) int ID { } call / ( ) }",
  "func ID ( ID : int ) { - ID ( - - - call ( true / 123 * ( ( 123 ) ) ) ) while ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : int ) { - ID ( - - - call ( true / 123 * ( ) 123 ( ) ) ) while ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : int ) { - ID ( - - - call ( true / 123 ( ( ) 123 ( ) ) ) while * ID ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID ( [ ] bool print ( ( - true ) ) { } } func ID : ) { }",
  "func ID ( ) { var ID : int var true ( [ ] bool print ( ( - ID ) ) { } } func ID : ) { }",
  "func ID ( var { ) ID : int var true ( [ ] bool print ( ( - ID ) ) { } } func ID : ) { }",
  "func ID ( { ) var ID : int var ID : bool call ID ( - - ( - ( - 123 ) ) ) ID = - 123 } func ID ( ) { }",
  "func ID ( { ) var ID : int var ID : bool call ID ( - - func - ( - 123 ) ) ) ID = - 123 } ( ID ( ) { }",
  "func ID ( { ) var ID : int var ID : bool call ID ( - - func - ( - 123 ) ) ) ID = - 123 } ( ID ( ) { }",
  "func ID ( ID : [ true - ( false * - { 123 / - ( - 123 ) ) ) ] int ) ( } func ID ( ) { }",
  "func ID ( ID : [ true int ( false * - { 123 / - ( - 123 ) ) ) ] - ) ( } func ID ( ) { }",
  "func ID ( ID : [ true int ( false * - { 123 / - ( - 123 ) ) ) ] - ) ( } ) ID ( func { }",
  "( ID ( ) { var ID : [ ( - func 123 / - false / ID ) ) ] [ ] bool }",
  "( ID ( false { var ID : [ ( - func 123 / - ) / ID ) ) ] [ ] bool }",
  "( ID ( false { - ID : [ ( - func 123 / var ) / ID ) ) ] [ ] bool }",
  "func ID ( ) : bool { { var ID : [ true / ( ) ID ( - ) / ID ] int } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { { var ID : [ true / ( ) ID ( ( ) / ID ] int } call ID ( ) } func ID - ) { }",
  "func ID ( ) : bool { { var ID : [ true / ( ) ID ( ( ) / ID ] int } call ID ( ) } func ID - ) { }",
  "func ID ( ID : int , ( : [ ] bool , ID : bool ) : bool { call ID ( ID / - - ID ) print true } func ID ID ) { }",
  "func ID ( ID : int , ( : [ ] bool , ID : bool ) : bool { call ID ( ID / } - ID ) print true - func ID ID ) { }",
  "func ID ( ID : int , ( ID [ ] bool , ID : bool ) : bool { call ID ( ID / } - ID ) print true - func : ID ) { }",
  "func ID ( ) : int { [ ID : [ ] var ( - ( ID ( ) ) ) ] int } func ID ( ) { }",
  "func - ( ) : int { [ ID : [ ] var ( ID ( ID ( ) ) ) ] int } func ID ( ) { }",
  "func - ( ) : int { [ ID ( [ ] var ( ID ( ID : ) ) ) ] int } func ID ( ) { }",
  "func ID ( ) : { ID ( ) [ - ( - 123 * ( ( ( - - false ) ) ) ) ] [ - ( true ) ] ] int [ }",
  "func ID ( ) : { ID ( ) [ - ( - 123 * false ( ( - - ( ) ) ) ) ] [ - ( true ) ] ] int [ }",
  "func ID ( ) : { ID ( ) [ - ( - 123 * false ( ( - - ( ) ) ) ) ] [ - ( true ) ] ] int [ }",
  "func ID ( ) : int { { ID : [ ] bool if ( false + ID / ID + true ) { } while true { } } func ID ( ) var }",
  "func ID ) ) : int { { ID : [ ] bool if ( false + ID / ID + true ( { } while true { } } func ID ( ) var }",
  "func ID ) ) : int { : ID { [ ] bool if ( false + ID / ID + true ( { } while true { } } func ID ( ) var }",
  "func ID ( ) { [ ID : int var ID : int ID ( ) = ID * - ID [ ID ] var ID ] } func ID ( ) { }",
  "func [ ( ) { [ ID : int var ID : int ID ( ) = ID * - ID ID ID ] var ID ] } func ID ( ) { }",
  "func [ ( ) { [ ID : int var ID : int ID ( ) = ID * - ID ID ID ] var ID ] } func ID ( ) { }",
  "func ID ( ID bool int , ID : int , ID : bool ) { var ID : [ ] : call ID ( ) }",
  "func ID ( ID : int , ID : int , ID : bool ) { var ID bool [ ] : call ID ( ) }",
  "func ID ( ID : int , ID : int } ID : bool ) { var ID bool [ ] : call ID ( ) ,",
  "func ID ( ) { var ID : [ ] bool ) ( - ( ID ( ) ) print }",
  "func } ( ) { var ID : [ ] bool ) ( - ( ID ( ) ) print ID",
  "( } ( ) { var ID : [ ] bool ) ( - func ID ( ) ) print ID",
  "func ID ( ) : int { var ID : : return } func ID ( ID : [ ] int ) { var ID : int var ID bool int }",
  "bool ID ( ) : int { var ID : : return } func ID ( ID : [ ] int ) { var ID : int var ID func int }",
  "bool ID ( ) : int { var ID : ID return } func ID ( : : [ ] int ) { var ID : int var ID func int }",
  "func ID ( ) { var ID : int var ID : int while - ID [ ID ( ( [ ID ] [ - true ] ] [ ID ] { } call ID ) ) }",
  "func ID ( ) { var ID : int ID ID : int while - ID [ ID ( ( [ ID ] [ - true ] ] [ var ] { } call ID ) ) }",
  "func ID ( ) { { ID : int ID ID : int while - ID [ ID ( ( [ ID ] [ - true ] ] [ var ] var } call ID ) ) }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var false : int var ID : [ - - ( ID ) ] bool }",
  "func ID ( int : bool , ID : bool , ID : ID ) { var false : int var ID : [ - - ( ID ) ] bool }",
  "func ID ( int : bool , ID : bool , ID : ID ) { var false : int var ID : [ ( - - ID ) ] bool }",
  "func ID ( ) : [ ] [ ID + ID [ - 123 + ] true ] [ ID ] ] [ - int { }",
  "func ID ( ) : [ ] [ ID + ID [ - 123 ] ] true + [ ID ] ] [ - int { }",
  "func ID ( int : [ ] [ ID + ID [ - 123 ] ] true + [ ID ] ] [ - ) { }",
  "] ID ( ) { var ID : int call ID ( ID [ 123 * - - false * 123 ] [ 123 func ) } func ID ( ) { }",
  "123 ID ( ) { var ID : int call ID ( ID [ ] * - - false * 123 ] [ 123 func ) } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : bool var ID : bool ID - print ( ID ) { } }",
  ": ID ( ) : [ ] bool { var ID : bool var ID func bool ID - print ( ID ) { } }",
  ": ID ( ) ( [ ] bool { var ID : bool var ID func bool ID - print : ID ) { } }",
  "func ID ( ID : int , { : int , ID : int ) { { var ID : [ ] [ ] bool var ID : bool print 123 } while - - true ID } }",
  "func ID ( ID [ int , { : int , ID : int ) { { var ID : [ ] : ] bool var ID : bool print 123 } while - - true ID } }",
  "func ID ( ID [ int , { : int , ID : int ) true { var ID : [ ] : ] bool var ID : bool print 123 } while - - { ID } }",
  "func ID ( ID ] [ : bool ) { var ID : int return ( ID / ( true ) ) }",
  "func ID ( ID ] [ : bool ) { var ID : int return ) ID / ( true ) ( }",
  "func ) ( ID ] [ : bool ID { var ID : int return ) ID / ( true ) ( }",
  "func ID ( ID : bool , ID : int , ID : int ) : : { var ID bool int { call ID ( ) return } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : : { var ID bool int func call ID ( ) return } } { ID ( ) { }",
  "func func ( ID : bool , ID : int , ID : int ) : : { var ID bool int ID call ID ( ) return } } { ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { } ID : bool call ID ( ID [ ID ] [ ID ] ) } func ID ( ) { var",
  "func ID ( ID : bool , ID : bool , ID : int ) { } [ : bool call ID ( ID [ ID ] ID ID ] ) } func ID ( ) { var",
  "func ID ( ID : bool , ID : bool , ID : int ) { } [ : bool call ID ( ID [ ID ] ID ID ] ) } func ID var ) { (",
  "func ID ] ID : [ ( int , ID : bool ) : bool { ID ( - ID [ - 123 ] [ - ( false ) ] ) = ( - ( - true ) ) while true { } } func ID ( ) { }",
  "func ID ] ID : [ ) int , ID : bool ) : bool { ID ( - ID [ - 123 ] [ - ( false ) ] ) = ( - ( - true ) ( while true { } } func ID ( ) { }",
  "func ID ] ID : [ ) int , ID : bool ) : bool { ID ( - ID [ - 123 ] [ - ( false ) ] ) = ( - ( - true ) ( while true { } } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ] int , ID : int ) : } { var ID : bool var ID : int while 123 { int } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ] int , ID ( int ) : } { var ID : bool var ID : int while 123 { int } func ID : ) { }",
  "func ID ( ID : int , ID : [ ) [ ] int , ID ( int ] : } { var ID : bool var ID : int while 123 { int } func ID : ) { }",
  "func ID ( ) : int ) return ( ID + - 123 / ID ( ) / ID { }",
  "/ ID ( ) : int ) return ( ID + - 123 / ID ( ) func ID { }",
  "/ ID ( ) 123 int ) return ( ID + - : / ID ( ) func ID { }",
  "func ID ( ID : [ ] bool ) { var ID while bool : - ( false / ( true ) * ID ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { var ID while bool : - ( false / ( true ) * ID ) ) } } func ID ( { { }",
  "{ ID ( ID : [ ] bool ) { var ID while bool : - ( false / ( true ) * ID ) ) } } func ID ( func { }",
  "func ID ( ) : bool { var ID : bool } ID : bool call ID ( 123 / ID / - ( ID ) ) print true } func ID ( ) { var",
  "func ID ( ) : bool { var ID : bool } ID : bool call true ( 123 / ID / - ( ID ) ) print ID } func ID ( ) { var",
  "func ( ( ) : bool { var ID : bool } ID : bool call true ID 123 / ID / - ( ID ) ) print ID } func ID ( ) { var",
  "func ID ( ) : bool { - ID : [ - ( var ID [ ( - ( false ) ) ] [ false ] ) ] int }",
  "func ID ( ) : ] { - ID : [ - ( var ID [ ( - ( false ) ) ] [ false ] ) bool int }",
  "ID ID ( ) : ] { - func : [ - ( var ID [ ( - ( false ) ) ] [ false ] ) bool int }",
  "func ID ( ID : [ ID - ) [ ID ( ID and ( false ) ] ] bool ) { }",
  "func ID ) ID : [ ID - ) [ ID ( ID and ( false ( ] ] bool ) { }",
  "ID ID ) func : [ ID - ) [ ID ( ID and ( false ( ] ] bool ) { }",
  "func ID ( / { var ID : [ ] bool var ID : int call ID ( ) while false ) ( true ) / ( 123 ) { } } func ID ( ) { }",
  "func ID ( / { var ID : [ ] bool var ID : int call ID ) ( while false ) ( true ) / ( 123 ) { } } func ID ( ) { }",
  "func ( ( / { var ID : [ ] bool var ID : int call ID ) ID while false ) ( true ) / ( 123 ) { } } func ID ( ) { }",
  "ID ID ( ) { print false * - ID ( ) [ func ( - - false ) ] call ID ( ) } func ID ( ) { }",
  "ID ID ( { ) print false * - ID ( ) [ func ( - - false ) ] call ID ( ) } func ID ( ) { }",
  "ID ID ( { [ print false * - ID ( ) ) func ( - - false ) ] call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool print false / ID and true ( - ID ) ID = - - ( false ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : - print false / ID and true ( - ID ) ID = - bool ( false ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : - print false / ID and true ( - ID ) ID = - bool } false ) ( func ID ( ) { }",
  "func ID ( ) { return true * 123 * - true + ) ( ) [ false ] [ ( - ( - 123 ) ) ] - ID } func ID ( ID { }",
  "func ID ( ) { return true * 123 * - true + ) ( ) [ false ] [ ( - ( - 123 ) ) ] - ID } func ID ( ID { }",
  ") ID ( ) { return true * 123 * - true + ) ( func [ false ] [ ( - ( - 123 ) ) ] - ID } func ID ( ID { }",
  "func ID ( ID : bool , ID : bool ) : int { var and : [ ] bool while false and - true ID - ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : int ) var and : [ ] bool while false and - true ID - ID { } } func ID ( { { }",
  "func ID ( ID : bool , ID : bool ) : int ) var and : [ ] bool while false and - true ID - ID { } } { ID ( func { }",
  "func ID ( ) { ID [ ID * true * ID + ( false func ] [ ID ] = true } ) ID ( ) { }",
  "func ID ( ) { ID [ ID * true * ID + ( false func ] [ ID ] = true } { ID ( ) ) }",
  "func ID ( ID : int , ID : int ) ID : int ) : [ ] [ ID / 123 * ( false , ] int { }",
  "func ID ( ID : int , ID : [ ) ID : int ) : int ] [ ID / 123 * ( false , ] int { }",
  "func ID ( ID : int , ID : [ ) ID : int ) : int ] [ ID / 123 * ( false } ] int { ,",
  "func ID ] ) : [ true - ID [ ( 123 + ( ID ) - ( - ID ) ) ] + - - 123 ] [ ( int { }",
  "func ID - ) : [ true - ID [ ( 123 + ( ID ) ] ( - ID ) ) ] + - - 123 ] [ ( int { }",
  "func ID - ) : [ true - ID [ ( ID + ( 123 ) ] ( - ID ) ) ] + - - 123 ] [ ( int { }",
  "func ID ( ) { var ID : bool - [ true / - 123 - ( ID ) ID ID ] [ ( ( - true ) ) ] = ID }",
  "func ID ( ) { var ID : bool - [ true / - 123 - ( ID ) ID ID ] [ ( ( - true ) ) ] = ID }",
  "func ID ( ) { var bool : ID - [ true / - 123 - ( ID ) ID ID ] [ ( ( - true ) ) ] = ID }",
  "func ID ( ID : bool ) print if - ( ( - - ( ID ) ) ) { } { - ( - ID ) } func ID ( ) { }",
  "func ID ( ID : bool ) print if - ( ( - - ( ID ) ) ) { } { - ( - ID ) } func ID ( ) { }",
  "func ID ( ID : func ) print if - ( ( - - ( ID ) ) ) { } { - ( - ID ) } bool ID ( ) { }",
  "func ID ( ) { var ID : [ 123 / 123 <= 123 / ID [ false ] [ - ( 123 ) ] / false ] int var ID ] [ : int } func ID ( ) { }",
  "[ ID ( ) { var ID : [ 123 / 123 <= 123 / ID func false ] [ - ( 123 ) ] / false ] int var ID ] [ : int } func ID ( ) { }",
  "[ ID ( ) { var ID : [ 123 / 123 <= 123 / ID ) false ] [ - ( 123 func ] / false ] int var ID ] [ : int } func ID ( ) { }",
  "func ID ( [ : ) ID ( true - ( ID + ID ) - true ) ] [ ] int { }",
  "func ID ( [ ID ) ID ( true - ( : + ID ) - true ) ] [ ] int { }",
  "func ID ( [ ID ) ID ( true - ( : + ID ) - true int ] [ ] ) { }",
  "func ID ( ) : int { if true - ID * { ( ( - - - ( false ) ) ) ) * ( ID ) - 123 ( } call ID ( ) }",
  "func ID ( ) : int { if true - ID * { ( ( - - - ( false ) ) ) 123 * ( ID ) - ) ( } call ID ( ) }",
  "func ID ( ID : int ) ID : int ) { var ID : [ ( ( ID ) , ] [ ] [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ID : int ) ID : int ) { var ] : [ ( ( ID ) , ] [ ID [ ] int var ID : bool } func ID ( ) { }",
  "func ID ( ID : int ) var : int ) { var ] : [ ( ( ID ) , ] [ ID [ ] int ID ID : bool } func ID ( ) { }",
  "- ID ( ) : [ ID + ( ID - true func ID ) ] [ ] [ ] bool { }",
  "- ID ( ) : [ ID ] ( ID - true func ID ) ] [ ] [ + bool { }",
  "- ID ( ) : [ ID ] ( ID - true func ID ) ] [ ] [ + bool { }",
  ") ID ( ID : int ) : [ - true + 123 / - ( - ( ID func ) ] bool { }",
  ") ID ( ID : int ) : [ - true + 123 / - ( - ( ID func ) ] bool { }",
  ") ID ( ID : int ) : [ - true + 123 / - ( - ( ID bool ) ] func { }",
  "func ID ( ID : int , ID ) int , ID : [ ID ( ) [ false and ( ID : and ID ] ] int ) { }",
  "func ID ( ID : , , ID ) int int ID : [ ID ( ) [ false and ( ID : and ID ] ] int ) { }",
  "func ID ID ID : , , ID ) int int ID : [ ID ( ) [ false and ( ( : and ID ] ] int ) { }",
  "func ID ( ) { { ID : bool var ID : [ ] bool if ID ( - ID ) var } if ID { } } func ID ( ) { }",
  "func { ( ) { { ID : bool var ID : [ ] bool if ID ( - ID ) var } if ID ID } } func ID ( ) { }",
  "func { ( ) { { ID : bool var ID : [ ] bool if ID ( var ID ) - } if ID ID } } func ID ( ) { }",
  "- ID ( ID : bool , ID : int ) { ID ( - func ID and true ) = ID { } } func ID ( ) { }",
  "- ID ( ID : bool , ID : int ) { ID ( - func ID and true ) = ID { } } func ID ( ) { }",
  "- ID ( ID - bool , ID : int ) { ID ( : func ID and true ) = ID { } } func ID ( ) { }",
  "func ID ID ID : [ ] [ true / ( ( 123 / - ( ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ID ID : [ ] [ true / ( ( 123 / - ( ) ) ] [ ] bool ) } } func ID ( ) { {",
  "func ID ID ID : [ ] [ true / ( ( 123 / - ( ) ) ] [ ] bool ) } } func ID { ) ( {",
  "func ID ( ID : int , ID : bool ) { var ID : int return false ( - ID ) }",
  "func ID ( ID : int , ID ID bool ) { var : : int return false ( - ID ) }",
  "func ID ( ID : [ ( 123 / ( - ( ( ( ( - ( ( - ID ) ) ) ) ) ) ) ) ID ) ] bool / { }",
  "func ID ( ID : [ ( 123 / ( - ) ( ( ( - ( ( - ID ) ) ( ) ) ) ) ) ID ) ] bool / { }",
  "func ID ( ) : bool { var ( : bool var ID : bool ID = ID [ ID ( ) ] [ true ] ID = - ID } func ID ID ) { }",
  "func ID ( ) : bool { var ( : bool var = : bool ID = ID [ ID ( ) ] [ true ] ID ID - ID } func ID ID ) { }",
  "func ID ( ) : bool { var ( : bool var = : bool ID = ID [ ID ( ) ] [ true ] ID ID - ID } func ID ID ) { }",
  "func ID ) ID : bool , ID : [ ] bool ) { print ( ID ( ) [ - ID ] ) } func ID ( ( { }",
  "func ID ) ID : bool , ID : [ ] bool ) { print ( [ ( ) ID - ID ] ) } func ID ( ( { }",
  "func ID { ID : bool , ID : [ ] bool ) ) print ( [ ( ) ID - ID ] ) } func ID ( ( { }",
  "func ID ( ID : int ) : [ ] int true var ID : int var ID : [ ] [ ID [ { ] ] bool } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] int true var ID : int var ID : [ ] [ ID [ { ] ] bool } func ID ( ) { }",
  "func ID ( ID : int ) var [ ] int true : ID : int var ID : [ ] [ ID [ { ] ] bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ( [ ID [ ( ( ] ( ( ID ) ) ) ) ) ] [ ( - ID ) ] ] [ ] bool }",
  "func ID ( ) : ( { var ID : [ ( [ ID [ ( ( ] bool ( ID ) ) ) ) ) ] [ ( - ID ) ] ] [ ] bool }",
  "func ID ( ) : ( { var ID : [ ( [ ID [ ( ( ) bool ( ID ) ) ] ) ) ] [ ( - ID ) ] ] [ ] bool }",
  "func ID ( ) - var ID : [ - ID ( ( ID [ { true ] [ - 123 ] ) ) ] int } func ID ( ) { }",
  "func ID ( ) - var ID : [ - ID ( ( ID [ { true ] [ - ) ] 123 ) ] int } func ID ( ) { }",
  "func ) ( ) - var ID : [ - ID ( ( ID [ { true ] [ - ) ] 123 ID ] int } func ID ( ) { }",
  "func ID ( ID : } ) { return - ( - ID ( ) [ true ] ) } func ID ( ) { bool",
  "func ID ( ID : } ) { return - - ( ID ( ) [ true ] ) } func ID ( ) { bool",
  "func ID ( func : } ) { return - - ( ID ( ) [ true ] ) } ID ID ( ) { bool",
  "func ID ( ID : bool , ID : [ ] [ bool [ ( ID [ true ] ) ] ] ID ) { }",
  "func ID ( ID : bool , ) : [ ] [ bool [ ( ID [ true ] ID ] ] ID ) { }",
  "func ID ( ID } bool , ) : [ ] [ bool [ ( ID [ true ] ID ] ] ID ) { :",
  "func ID ( ID : bool ) { var ID : int var ID : bool false - ID ( ) [ print ] ID = - ID } func ID ( ) { }",
  "ID func ( ID : bool ) { var ID : int var ID : bool false - ID ( ) [ print ] ID = - ID } func ID ( ) { }",
  "ID func ( ID : bool ) { var ID : int var ID : bool false - ID ( ) [ print } ID = - ID } func ID ( ) { ]",
  "func ID ( ) : bool { var ID : int } func ID ID ID : [ ] int ) : int { var ( : [ ( - ( ( ID ) ) ) ] bool var ID : int }",
  "func : ( ) : bool { var ID : int } func ID ID ID : [ ] int ) : int { var ( : [ ( - ( ( ID ) ) ) ] bool var ID ID int }",
  "func : ( ) bool bool { var ID : int } func ID ID ID : [ ] int ) : int { var ( : [ ( - ( ( ID ) ) ) ] : var ID ID int }",
  "func ID ( ID : bool , ID : bool } ID : int ) { ID ( true * - ( ID ) * - ( - ( ID ) ) ) = - ID } func ID ( ) { ,",
  "func ) ( ID : bool , ID : bool } ID : int ) { ID ( true * - ( ID ) * - ( - ( ID ) ) ID = - ID } func ID ( ) { ,",
  "func ) ( ID : bool , ID : bool } ID : int ) ) ID ( true * - ( ID ) * - ( - ( ID { ) ID = - ID } func ID ( ) { ,",
  "func ID ( ] : [ ID ( ( ID [ - - ID ] [ - ( ID ) ] ) ) ) bool { }",
  "func ID ( ] : [ ID ( ( ID [ ID - - ] [ - ( ID ) ] ) ) ) bool { }",
  "func ID ( ] : [ ID ( ( ID [ ID - - ] [ - ( ID ) ] ) ) ) bool { }",
  "func ID ( ) bool [ ] : { var ID : int ID [ ( ( ID ) ) ] = true } func ID ( ) { }",
  "func ID ( ) bool [ ] : { var ID : int ID [ ( ( ID ) } ] = true } func ID ( ) { )",
  "func ID ( ) bool [ ] : { var ID int : ID [ ( ( ID ) } ] = true } func ID ( ) { )",
  "func ID ( ) : int { int ID : int } func ID ( ID : int ) { var ID : var ID [ ID ] = ( - ID ) { } }",
  "func ID ( ) : int : int ID : int } func ID ( ID : int ) { var ID { var ID [ ID ] = ( - ID ) { } }",
  "func ID ( { { var ID : [ ] [ ] bool print ID [ ID - ( - - ( ( ID ) ) ) ] if - - ID ) } } func ID ( ) { }",
  "func ID ( { { - ID : [ ] [ ] bool print ID [ ID - ( - - ( ( ID ) ) ) ] if - var ID ) } } func ID ( ) { }",
  "func ID ( { { - ID ( [ ] [ ] bool print ID [ ID - ( - - ( : ID ) ) ) ] if - var ID ) } } func ID ( ) { }",
  "func ID ( ) : [ - ID * ID [ ID ( ( ID ) ] [ ( true ) ] / ID ) ] int { } func ID ( ) { }",
  "func ID ( ) : [ - ID * ID [ ID ( ( ID ) ] [ ( true ) ] / ID ) ] int { } func ID ( } { )",
  "func ID ( ID : [ - ( - ID [ 123 + ID + - 123 ] [ 123 ] ) ) bool ] { }",
  "func ID ( ID : [ - ( - ID [ 123 + ID ] - 123 + [ 123 ] ) ) bool ] { }",
  "func { ( ID : [ - ( - ID [ 123 + ID ] - 123 + [ 123 ] ) ) bool ] ID }",
  "func ID ( ) : bool { var ID : int var ID : int call ID ( ( - ) ( ID ) ) }",
  "func ID ( ) : bool { var ID : int var ID : int call ID ( ( - ) ( ) ) ID }",
  "func ID ( ) : bool { var ID : ) var ID : int call ID ( ( - ) ( int ) ID }",
  "func ID ( ID : [ - false * - ( true - ( ) - false - - - ID ) / false ] bool ) { }",
  "- ID ( ID : [ - false * - ( true func ( ) - false - - - ID ) / false ] bool ) { }",
  "- ID ( ID : [ - ( * - false true func ( ) - false - - - ID ) / false ] bool ) { }",
  "func ID ( ID : bool , ID : bool ) { return ID * ( 123 * - false ) * - ( - { ) } func ID ( ) ID }",
  "func ID ( ID bool bool , ID : : ) { return ID * ( 123 * - false ) * - ( - { ) } func ID ( ) ID }",
  "func ID ( ID bool ) , ID : : ) { return ID * ( 123 * - false ) * - ( - { bool } func ID ( ) ID }",
  "int ID ( ID : func , ID : [ ] [ ] int ) { var ID : bool var ID : [ ] [ - - - ID ] [ ] bool }",
  "int ID ( ID : func , ID : [ ] [ ] int ) { var ID : bool var ID : [ ] [ - - - ID ] [ ] bool }",
  "int ID ( ID : func , ID : [ ] [ ] int ) { var ID : bool - ID : [ ] [ var - - ID ] [ ] bool }",
  ": ID ( ID : bool ) { var ID func bool var ID : bool while ID [ true / - ( - ( 123 ) ) ] [ - - true ] { } call ID ( ) }",
  ": ID ( ID : bool ) { var ID func bool var ID : bool while ID [ true / - ( - ( 123 ) ) ] [ - - true ] { } call ID ( ) }",
  ": ID ( ID : bool ) { var ID func bool var ID : bool while ID [ true / - ( - [ 123 ) ) ] ( - - true ] { } call ID ( ) }",
  "func ID ( ) { { ( ID ( true / ( ( ID ) ) ) ) = true } func ID ( ) ID }",
  "func ID ( ) { { ( ( ( true / ( ( ID ) ) ) ) = true } func ID ID ) ID }",
  "func ID ( - { print true * ID ( false * ID ( ) , ID ) * - - ) ID }",
  "func ID ( - { print true * ID ( false * - ( ) , ID ) * - ID ) ID }",
  "func ID ( - { print true * ID ( false * - ( ) , ID ) * - ID ) ID }",
  "func ID ( ) : [ ID [ ID [ ( ( ( false ) true ) ] [ ( - - ) ) ] ] [ ( 123 ) ] ] [ ] int { } func ID ( ) { }",
  "func ID ( { : [ ID [ ID [ ( ( ( false ) true ) ] [ ( - - ) ) ] ] [ ( 123 ) ] ] [ ] int { } func ID ( ) ) }",
  "func ID ( { : [ ID [ ID [ ( ( ( false ) true ] ] [ ( - - ) ) ) ] [ ( 123 ) ] ] [ ] int { } func ID ( ) ) }",
  "func ID ( ) : int { var ID : bool var ID : bool ID [ ( ID ( ) ) ] = - ( ID ) print ( - false ( ( ) ) ) }",
  "func ID ( ) : int { var ID : bool var ID : bool ID [ ( ID ( ) ) ] = - ( ID ) print ( - false ( ( ) ) ) }",
  "func ID ( ) : int { var ID : bool var ID : bool ID [ ( ID ( ) ) ] = - ( } ) print ( - false ( ( ) ) ) ID",
  "func ID ( ) { var ID : [ true / - - - true - - ( - false ) - ] ] [ ID bool var ID : int } func ID ( ) { }",
  "func ID ) ) { var ID : [ true / - - - true - - ( - false ) - ] ] [ ID bool var ID : int } func ID ( ( { }",
  "func ID } ID : bool , ID : int , ID : int ) : bool { if ( ID ( false ) ) { ( } func ID ( ) { }",
  "func ID } ID : ( , ID : int , ID : int ) : bool { if bool ID ( false ) ) { ( } func ID ( ) { }",
  "func ID } ID : ( , ID : int , ID : int ) func bool { if bool ID ( false ) ) { ( } : ID ( ) { }",
  "func ID ( ) { bool ID : var var ID : [ false * - - - - false * 123 and ( - ( ID ) ) ] [ ] int } func ID ( ) { }",
  "func ID ( ) * bool ID : var var ID : [ false * - - - - false { 123 and ( - ( ID ) ) ] [ ] int } func ID ( ) { }",
  "func ID ( ) * bool ID : var var ID : 123 false * - - - - false { [ and ( - ( ID ) ) ] [ ] int } func ID ( ) { }",
  "- ID ( ) : int { var ID : [ ] bool var ID : int print true * - ID - - ID func true } func ID ( ) { }",
  "- ID ( ) : int { var func : [ ] bool var ID : int print true * - ID - - ID ID true } func ID ( ) { }",
  "func ID ( ) : * { var ID : int var ID : [ - - 123 bool 123 + false * ( - ( ( - ( - ( ( ( - - ( ( - - - 123 ) ) ) ) ) ) ) ) ) * 123 ] int }",
  "func ID ( ) ) * { var ID : int var ID : [ - - 123 bool 123 + false * ( - ( ( - ( - ( ( ( - - ( ( - - - 123 ) ) ) ) : ) ) ) ) * 123 ] int }",
  "func ID ( ) ) * { var ID : int var ID ) [ - - 123 bool 123 + false * ( - ( ( - ( - ( ( ( - - ( ( - - - 123 ) ) ) ) : : ) ) ) * 123 ] int }",
  "func ID ( ID : bool , ID : bool ) : int { var ID : bool { var ID ( int while ( ID ) { } } call ID : ) }",
  "func ID ( ID : bool , ID : bool ) : int { var while : bool { var ID ( int ID ( ID ) { } } call ID : ) }",
  "func ID ( ID : bool , ID : bool call : int { var while : bool { var ID ( int ID ( ID ) { } } ) ID : ) }",
  "func ID ( ) { int : var ID : bool { while - - ( ID ( ) ) { } } } func ID ( ) { }",
  "func ID ( ) func int : var ID : bool { while - - ( ID ( ) ) { } } } { ID ( ) { }",
  "func ID ( ) func int : var ID ) bool { while - - ( ID ( : ) { } } } { ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : [ ] ( ID int ) [ - ( ( false ) ) ] = 123 print ( ( ( ( ( - ( ( ( - ID ) ) ) ) ) ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : [ ] ( ID int ) [ - ( ( false ) ) ] ) 123 print ( ( ( ( ( - ( ( ( - ID ) ) ) ) ) = ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : [ ] ( ID int ) [ - ( ( false ) ) ] ) 123 print ( ( ) ( ( - ( ( ( - ID ) ) ( ) ) = ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : } ID * ID [ ( 123 ) ] * ID ] int } func ID ( ) { [",
  "func ID ( ) { var ID : int ID * ID [ ( 123 ) ] * ID ] } } func ID ( ) { [",
  "func ID ( ) { var ID : int ID * ID [ ( 123 ) ] * ID ] } } func ID ( ) { [",
  "func ID ( ID { var ID : int return ID ( - ID ( ID ) ) } func ) ( ) { }",
  "func ID ( ID { var ID : int ) ID ( - ID ( ID ) ) } func return ( ) { }",
  ": ID ( ID { var ID func int ) ID ( - ID ( ID ) ) } func return ( ) { }",
  "func ID ( ) : bool { var ID : [ - - - ID != ID [ - [ ] ID ID ] ] bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ - - - ID != ID [ - [ ] ID ID ] ] bool } func ID ( ) { }",
  "func bool ( ) : bool { var ID : [ - - - ID != ID [ - [ ] ID ID ] ] ID } func ID ( ) { }",
  "func ID ( ID : [ ( false - ) - - true * ( 123 ) ) ] int ) { } func ID ( - { }",
  "func ID ( ID : [ ( false - ) - - - * ( 123 ) ) ] int ) { } func ID ( true { }",
  "func ID ( ID : [ ( false - ) - - - * ( 123 ) ) ] int ) { } func ID ( true { }",
  "func ID ( [ : bool { var ID : bool var ID : [ ] ) ID [ ID [ ID ] [ - - false ] ] ] int } func ID ( ) { }",
  "func ID ( [ : bool { var ID : bool ID ID : [ ] ) ID [ ID [ ID ] [ - - false ] ] ] int } func var ( ) { }",
  "func ID ( [ : bool { var ID : bool ID ID : [ ] ) ID [ ID [ - ] [ - ID false ] ] ] int } func var ( ) { }",
  "func ID ( ID ) [ ID ( true / ID ( - ID ) ) ] bool : { } func ID ( ) { }",
  "func ID - ID ) [ ID ( true / ID ( ( ID ) ) ] bool : { } func ID ( ) { }",
  "func ID - ID ) [ ID ( true / ID ( ) ID ) ( ] bool : { } func ID ( ) { }",
  "func ID ( ID : int ( ID : int , ID : [ true / ( 123 + ID [ ( - ID ) ] + 123 ) ] int ) { } func ID , ) { }",
  "func ID ( ID : int ( ID : int , ID : [ true / ( 123 + ID [ ( 123 ID ) ] + - ) ] int ) { } func ID , ) { }",
  "func ID ( ID : int ( ID : int , ] : [ true / ( 123 + ID [ ( 123 ID ) ] + - ) ID int ) { } func ID , ) { }",
  "func ID ( ) : int { var ID var int : ID : bool while ( ID [ ID ] [ - - false ] ) { } ID = ( ID ) }",
  "func ID ( ) : = { var ID var int : ID : bool while ( ID [ ID ] [ - - false ] ) { } ID int ( ID ) }",
  "func ID ( false : = { var ID var int : ID : bool while ( ID [ ID ] [ - - ) ] ) { } ID int ( ID ) }",
  "func ID ( ID : int , ID : [ ] [ false / ( ID ( ) * ( ) ) ) * - ( - ID ID ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ false / ( ID ( ) * ( ) ) ) * - ( { ID ID ] bool ) { } func ID ( ) - }",
  "func ID ( ID : int , ID : [ ] [ false / } ID ( ) * ( ) ) ) * - ( { ID ID ] bool ) { ( func ID ( ) - }",
  "func ID ( ) : int { var ID : bool print false * / - ( 123 true ID ) }",
  "func ID ( ) : int { var ID print bool : false * / - ( 123 true ID ) }",
  "func ID ( ) : int { var ID print bool : false / * - ( 123 true ID ) }",
  "func ID ( ) } var ID : bool if - false * - - ID [ ( true ) ] * 123 { } { func ID ( ) { }",
  "func ID ( ) } var ID : bool if - false * - - ID [ } true ) ] * 123 { ( { func ID ( ) { }",
  "func ID ( ) } var ID : bool if - false * - - ID [ } true ) ] * 123 { ( { func ID ( ) { }",
  "( ID ( ID : [ ID ( ( 123 or - func ID ) ) ) ] int ) { }",
  "( ID ( ID : [ ID ( ( 123 ID - func or ) ) ) ] int ) { }",
  "( ID ( ID : or ID ( ( 123 ID - func [ ) ) ) ] int ) { }",
  "func ID ( ID : bool , ID : int ) { while true / ( ( ) ID ) ) / 123 { } } func ID ( - { }",
  "func ID ( ID / bool , ID : int ) { while true / ( ( ) ID ) ) : 123 { } } func ID ( - { }",
  "ID func ( ID / bool , ID : int ) { while true / ( ( ) ID ) ) : 123 { } } func ID ( - { }",
  "func ID ( ) { var ID [ [ ( ID [ ( ( 123 ) ) ] : true ] ) ] bool var ID : [ ] int } func ID ( ) { }",
  "func ID ( ( { var ID [ [ ) ID [ ( ( 123 ) ) ] : true ] ) ] bool var ID : [ ] int } func ID ( ) { }",
  "func ID ( ( { var ] [ [ ) ID [ ( ( 123 ) ) ID : true ] ) ] bool var ID : [ ] int } func ID ( ) { }",
  "func { ( ) : [ ] int { while ID ( ( - false ) ) { } } func ID ( ) ID }",
  "func { ( ) : [ ] ) { while ID ( ( - false int ) { } } func ID ( ) ID }",
  "func { ( ) { [ ] ) : while ID ( ( - false int ) { } } func ID ( ) ID }",
  "func ID ( ) { call ID ( - - false - ( ( ( ID ) + ) ) false ) }",
  "func ID ( ) { call ID - - - false ( ( ( ( ID ) + ) ) false ) }",
  ") ID ( ) { call ID - - - false ( ( ( ( ID ) + func ) false ) }",
  "func ID ( ID : [ ) { var ID : int ID ( true * true / ( ID ) ) ] bool } func ID ( ) { }",
  "func ID ) ID : [ ) { var ID : int ID ( true * true / ( ID ( ) ] bool } func ID ( ) { }",
  "func ID ) ID : [ ) { var ID : int ID ( true * true / ( ID ( ) ] bool } func ID ( ) { }",
  "func ID ( ) : [ ] [ ] [ - false / ID / - ] ID ) ( [ ] int { }",
  "ID func ( ) : [ ] [ ] [ - false / ID / - ] ID ) ( [ ] int { }",
  "ID ) ( ) : [ ] [ ] [ - false / ID / - ] ID func ( [ ] int { }",
  "func ID ( ) { } func return ( ) : bool { call ID ( ) ID }",
  "func ID ( ) { } func return ( ) : ) { call ID ( bool ID }",
  "func ID ) ) { } func return ( ) : ( { call ID ( bool ID }",
  "func false ( ID : [ ID + ID ( ID ( ) [ - - ID ] ) ] int ) { }",
  "func false ( ID : [ ID + ] ( ID ( ) [ - - ID ID ) ] int ) { }",
  "func false ( ID : [ ID ID ] ( ID ( ) [ - - + ID ) ] int ) { }",
  "func ID [ ID : int , ID : bool ) : [ ID * ( - 123 * ( 123 ) ) ] ( ] int { } func ID ( ) { }",
  "func ID [ ) : int , ID : bool ) : [ ID * ( - 123 * ( 123 ID ) ] ( ] int { } func ID ( ) { }",
  "func ID [ ) : int , ID : bool ) : [ ID * ( - 123 * ( 123 ID ) ] ( ] int { } func ID ( ) { }",
  "func ID ( ) : ID - 123 * ( ID ( true * ID ) ) * ( [ ) ] int { }",
  "func ID ( ) : ID - 123 * ( ID ( true * ID ) ) * ( [ } ] int { )",
  "func ID ( ) : ID - 123 * ( * ( true * ID ) ) ID ( [ } ] int { )",
  "func ID ( ) : [ true != ( ] + - ( false ) - ID ) 123 int { } func ID ( ) { }",
  "func ID ( ) : [ true ( ( ] + - ( false ) - ID ) 123 int { } func ID != ) { }",
  "func ID ( ) : [ true ( ) ] + - ( false ) - ID ) 123 int { } func ID != ( { }",
  "func ID ( ) { var ID : int var ID : [ ] bool while ID - ( ID ) ) { } call ( ( ) }",
  "func ID ( ) { var ID : int ) ID : [ ] bool while ID - ( ID var ) { } call ( ( ) }",
  "func ID ( ) { var ID : ID ) ID : [ ] bool while int - ( ID var ) { } call ( ( ) }",
  "func ID ( ) { var ID : bool 123 var ID : int var ID : [ ] [ - { * ( - false ) ] int } print ( true ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool 123 var ID : int false ID : [ ] [ - { * ( - var ) ] int } print ( true ) } func ID ( ) { }",
  "func ID ( - { var ID : bool 123 var ID : int false ID : [ ] [ ) { * ( - var ) ] int } print ( true ) } func ID ( ) { }",
  "func ID ( ID : [ ] int , [ : int , ID : ID 123 * ID ( ID ) ] bool ) { } func ID ( ) { }",
  "} ID ( ID : [ ] int , [ : int , ID : ID 123 * ID ( ID ) ] bool ) { } func ID ( ) { func",
  "} ID ( ID : [ ] int , [ : int , ID : ID 123 ID * ( ID ) ] bool ) { } func ID ( ) { func",
  "func ID ( ID : bool : ID : bool , ID : int ) : [ ] [ ] int { var ID : bool var ID , int return } func ID ( ) { }",
  "func ID ( ID : bool : ID : bool , ID : int ) : [ ] var ] int { [ ID : bool var ID , int return } func ID ( ) { }",
  "func ID ( ID : bool : ID : bool , ID : int ) : [ ] var ] int { [ ID : bool var ID , int return } ID func ( ) { }",
  "func ID } ID : [ ] bool , ID : bool , ID : int ) : int { var ID : bool if ( ID ) { ( } func ID ( ) { }",
  "func ID } ID : [ ] bool , ID : bool , ID : int ) bool int { var ID : : if ( ID ) { ( } func ID ( ) { }",
  "func ID } ID : [ ] bool , { : bool , ID : int ) bool int { var ID : : if ( ID ) { ( } func ID ( ) ID }",
  "func ID ( ) : [ ( true - ( - - - ID ( ) ) ) ] [ ] bool } { func ID ( ) { }",
  "func ID ( ) : [ ( - true ( - - - ID ( ) ) ) ] [ ] bool } { func ID ( ) { }",
  "func ID ( ID : [ ( - true ( - - - ID ( ) ) ) ] [ ] bool } { func ) ( ) { }",
  "func ID ID ) { var ID : bool { var ( : [ ID / 123 * ( ID ) ] bool } }",
  "bool ID ID ) { var ID : bool { var ( : [ ID / 123 * ( ID ) ] func } }",
  "bool ID ID var { var ID : bool { ) ( : [ ID / 123 * ( ID ) ] func } }",
  "func true ( ) : [ ] [ ID * 123 * ID [ ID [ ID ] [ ID ] ] ] int { }",
  "func true ( ) : [ ] [ ID * 123 * ID [ ID [ ID ] [ ID ] ] ] int { }",
  "int ID ( ID : [ ] int , ID : bool ) { var ID : func call ID ( ( - - - 123 ) ) ID = 123 }",
  "int ID ( ID : [ ID int , ID : bool ) { var ID : func call ID ( ( - - - 123 ) ) ] = 123 }",
  "int ID ( ID : [ ID int , ID : bool ) ( var ID : func call ID { ( - - - 123 ) ) ] = 123 }",
  "func ID ( { { var ID : int var ID : int if false - - ID ( ) - ID ) } } func ID ( ) { }",
  "func ID ( { - var ID : int var ID : int if false - - ID ( ) { ID ) } } func ID ( ) { }",
  "func ID ( { ( var ID : int var ID : int if false - - ID ( ) { ID ) } } func ID - ) { }",
  "func ID ( ID : bool ) { var ID : [ ] int return - - * - true true false - true }",
  "func ID ( ID - bool ) { var ID : [ ] int return - - * - true true false : true }",
  ") ID ( ID - bool func { var ID : [ ] int return - - * - true true false : true }",
  ") ID ( ) { { return } return 123 + - - ID [ false ] } func ID ( func { }",
  ") ID ( ) { { return } return false + - - ID [ 123 ] } func ID ( func { }",
  ") ID ( ) { { } } return false + - - ID [ 123 ] } func ID ( func { return",
  ": ID ( ID : bool ) { var ID func int if - - ( ID ( ID ) ) { } { } }",
  ": ID ( ID : bool ) { var ID func int if ) - ( ID ( ID - ) { } { } }",
  ": ID ( ID : bool ) { var ID func int if ) - ( ID ( ID - ) { } { } }",
  "func ID ( ) : int { var ID : int var ID : int print ( - ( ( ID ) ) ) ID = - ID } func ID } ) { (",
  "func ID ( ) : ID { var ID : int var int : int print ( - ( ( ID ) ) ) ID = - ID } func ID } ) { (",
  "func ID ( ) : ID { var ID : int var int = int print ( - ( ( ID ) ) ) ID : - ID } func ID } ) { (",
  "func ID ( ID : int ( ID : int ) { var ID : bool var ID : [ - ID [ - ( ID ) ] ] int } func ID , ) { }",
  "func ID ( ID : int ( ID : int ) { : ID : bool var ID var [ - ID [ - ( ID ) ] ] int } func ID , ) { }",
  "func ID ( ) { var ID / [ - ( - false / false : - ( ( ID ) ) ) ] [ ] int }",
  "func ID ( ) { var ID / - - ( - false / false : [ ( ( ID ) ) ) ] [ ] int }",
  "func ID ( ) { var ID ) - - ( - false / false : [ ( ( ID ) / ) ] [ ] int }",
  ") ID ( ID : [ ] [ ] [ ] [ ] bool ) { var ID : bool var ID : int print - ( true func if true { } } func ID ( ) { }",
  ") ID ( ID : [ ] [ ID [ ] [ ] bool ) { var ID : bool var ] : int print - ( true func if true { } } func ID ( ) { }",
  ") ID ( ID : [ ] [ ID [ ] [ ] bool ) { var ID : bool var ] : int print - ( true func if true { } } func ID ( } { )",
  "func ID false ID : [ ID ( true / - ( >= ( - ID ) ) ] int ) { }",
  "func ID false ID : [ ID ( true / - ( >= ( - ID ) ) { int ) ] }",
  "func ID false ID : [ ID ( true / } ( >= ( - ID ) ) { int ) ] -",
  "func ID ( ID : int , ID : [ - ID ( true * false 123 + ) ] [ ] bool ) { }",
  "func ID ( ID : int , ID false [ - ID ( true * : 123 + ) ] [ ] bool ) { }",
  "func ID ( ID : int , ID false [ - ID ( + * : 123 true ) ] [ ] bool ) { }",
  "func ID ( ) { call ID ( ) } func ID ( ) : bool { var ID bool [ ] int var ID : : ID = ID }",
  "func ID ( ) { call ID ( ) } func ID ( ) : bool { var ID bool [ ] int var ID : : ID = ID }",
  "func ID int ) { call ID ( ) } func ID ( ) : bool { var ID bool [ ] ( var ID : : ID = ID }",
  "func ID ( ) : ( ] int { var ID : [ 123 * false * ( ( ID ) ) ] int } func ID [ ) { }",
  "func ID ( ) : ( ] int { var ID : [ 123 * false * ( } ID ) ) ] int } func ID [ ) { (",
  "func ID ( ) : ( ] int { var ID : [ 123 * false * ( ] ID ) ) } int } func ID [ ) { (",
  "func ID ( ) : [ ( true * true / ( { * - - ID / ID ) ) ] int false }",
  "func ID ( ) : [ ( true * true / ( { - - * ID / ID ) ) ] int false }",
  "func ID ( ) : [ ( true * true / ( { - - } ID / ID ) ) ] int false *",
  "func ID ( ID : var ) : bool { bool ID : [ ] [ ] int var ID : int print ( 123 ) }",
  "func ID ( 123 : var ) : bool { bool ID : [ ] [ ] int var ID : int print ( ID ) }",
  "( ID func 123 : var ) : bool { bool ID : [ ] [ ] int var ID : int print ( ID ) }",
  "func ID ( ID : int ) : [ ] bool { bool ID : var var ID : int return - true - 123 + ( ID ) } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] bool { ) ID : var var ID : int return - true - 123 + ( ID bool } func ID ( ) { }",
  "func ID ( ID : int ) : [ ] bool { ) bool : var var ID : int return - true - 123 + ( ID ID } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int , ID : int ) : ( ID [ ) [ ( ( - ID ) ) ] [ false ] ] int { }",
  "func ID ( ID : [ ] int , ID ID int , ID : int ) : ( : [ ) [ ( ( - ID ) ) ] [ false ] ] int { }",
  "func ID ( ID : [ ] int , ID ID int , ID : [ ) : ( : int ) [ ( ( - ID ) ) ] [ false ] ] int { }",
  "func ID ( ) : int { var ID : int var ID : int } func ID ( ) { var ID - bool if - ( ( ( : true ) ) ) { } }",
  "func ID ( ) : int { var ID : int var ID : int } func ID ) ( { var ID - bool if - ( ( ( : true ) ) ) { } }",
  "func ID ( ) : int { var ID : int var ID : int } func ID ) ( { var ID - bool if - ( ( ( : true ) ) ) { } }",
  "func ID ( ID : bool ) { var ID ( [ ID : ) [ ( - ( true ) ) ] [ ID ] ] int var ID : int }",
  "func ID ( ID : bool ) { var ID int [ ID : ) [ ( - ( true ) ) ] [ ID ] ] ( var ID : int }",
  "func ID ( ID : bool ) { - ID int [ ID : ) [ ( var ( true ) ) ] [ ID ] ] ( var ID : int }",
  "( ID func ID : int , ID : int ) { print - ID [ false * - ID * ID ] [ 123 ] }",
  "( ID func ID : ID , ID : int ) { print - ID [ false * - int * ID ] [ 123 ] }",
  "( ID func ID : ID , int : ID ) { print - ID [ false * - int * ID ] [ 123 ] }",
  "func ID ( ID : ) ) { var ID : [ ] [ - ID ( bool / ( true ) ] int var ID : [ ] [ ] [ ] [ ] int }",
  "func { ( ID : ) ) ID var ID : [ ] [ - ID ( bool / ( true ) ] int var ID : [ ] [ ] [ ] [ ] int }",
  "func { ( ID : ) ) ID var ID : [ ] [ - ID ( bool / ( true ) ] int var ID : [ ] [ ] [ ] [ ] int }",
  "func ID ( , : int , ID : int ID ID : bool ) { return ID [ - ( - - ID ) ] [ - false ] } func ID ( ) { }",
  "func ID ( , : int , ID : int ID ID : bool ) { return ID [ - ( - - ID ) ] [ - false ] } func ID ( ) { }",
  "func ID ( , : int , ID : int ID ID : bool ) { return ID [ - ( - - ID ) ] [ - ] false } func ID ( ) { }",
  "func ID ( ) { } bool ID ( ) : func { var ID : bool var ID : int }",
  "func ID ( ( { } bool ID ) ) : func { var ID : bool var ID : int }",
  "func ID ( ( { } bool : ) ) ID func { var ID : bool var ID : int }",
  "func ID ( ID : bool ) { var ID : int var ID : [ ] [ ( int / true ) ] 123 }",
  "func ID ( ID true bool ) { var ID : int var ID : [ ] [ ( int / : ) ] 123 }",
  "func ID ( ID true bool ) { var ID : ] var ID : [ ] [ ( int / : ) int 123 }",
  "func ID ( : { var ID ) int if ( ( - ( ID ) ) ) { } }",
  "func ID ( : { var ID ) int if ( ( - ) ID ) ) ( { } }",
  "func ID ( : { var ID ) int ( ( ( - ) ID ) ) if { } }",
  "func ID ( ID : bool , ID : [ - ID ( } false or ( ID ) ) ) ] bool ) { } func ID ( ) { (",
  "func ID ( ID : bool , ID ( [ - ID ( } false or ( ID ) ) ) ] bool ) { } func ID : ) { (",
  "func ID ( ID : bool , ID ( [ - ID ( } false or ( ID ) ) ) ] bool ) { } ( ID : ) { func",
  "func ( ID ID : int , ID : int , ID : bool ) { var ID : int var ID : [ ] bool }",
  "func ( ID ID : int , ID : int , ID : bool ) { var ID : int var ID : [ ] bool }",
  "func ( ID ID : int , ID : int , ID : bool ) { var ID : int var [ : ID ] bool }",
  "func ID ( ID : [ ] int ) : bool { - ID : bool print true * var 123 * ( - - - 123 ) } func ID ( ) { }",
  "} ID ( ID : [ ] int ) : bool { - ID : bool print true * var 123 * ( - - - 123 ) } func ID ( ) { func",
  "func ID ( ) { var ID : bool print ID / } / ID [ - ID ] [ ID ] call ID ( ) 123 func ID ( ) { }",
  "func ID ( ) { call ID : bool print ID / } / ID [ - ID ] [ ID ] var ID ( ) 123 func ID ( ) { }",
  "[ ID ( ) { call ID : bool print ID / } / ID func - ID ] [ ID ] var ID ( ) 123 func ID ( ) { }",
  ": ID ( ) func bool { var ID : int var ID : [ true * false - ID ( ) [ ( ( - ID ) ) ] ] int }",
  ": ID ( ) func bool { var ID : int var ID : [ true * false - ID ( ) [ ( ( - ID ) ) ] ] int }",
  ": ID ( ) func bool { ID ID : int var var : [ true * false - ID ( ) [ ( ( - ID ) ) ] ] int }",
  "func ID ID ) { var ( : int var ID : bool call ID ( ) if ID ( ) [ ID ] { } }",
  "func int ID ) { var ( : ID var ID : bool call ID ( ) if ID ( ) [ ID ] { } }",
  "func int ID ) { var ( ID ID var ID : bool call : ( ) if ID ( ) [ ID ] { } }",
  "func ID : ) { var ID ( bool var ID : bool if - ( true * ( - 123 ) ) { } }",
  "} ID : ) { var ID ( bool var ID : bool if - ( true * ( - 123 ) ) { func }",
  "} ID : ) { var ID ( bool var ID : bool if - ( true * 123 - ( ) ) { func }",
  "func ID ( ID : [ ID ( ) [ / - - ( 123 * ID - false ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ / - - ( 123 * ID - false ) ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ( ID ( ) [ - ] ( true ) - ) ] bool ) { }",
  "func ID ( ID : [ ( ID ( ) [ - ] ( true ) - ) ] bool ) { }",
  "func ID ( ID : [ ( ID ( ) [ - ] ( true ) - ) ] bool ) { }",
  "func ID ( ID : bool ) { var ID : [ 123 / ] 123 + true * ID ( ) ] [ - [ ] int }",
  "func ID ( ID : bool ) { var ID : [ 123 / ] 123 + } * ID ( ) ] [ - [ ] int true",
  "func ID ( ID : bool ) { var ID : 123 123 / ] [ + } * ID ( ) ] [ - [ ] int true",
  "func ID ( ) { { var ID : [ ] int var ID : bool return - ID ( { false ) ) } ( } }",
  "func ID ( ) false { var ID : [ ] int var ID : bool return - ID ( { { ) ) } ( } }",
  "func ID ( ) false { var ID - [ ] int var ID : bool return : ID ( { { ) ) } ( } }",
  "func ID ( ID : int , ID : [ ID ( - true * ID ( true ) * ID ) ] [ ] [ ] bool bool ID : , ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID ( - true * ID ( true ) * ID ) ] [ ] [ ] bool bool ID : , ( { } func ID ) ) { }",
  "func ID ( ID : int , ID : [ ID ( - true * ID ( true ) ) ID * ] [ ] [ ] bool bool ID : , ( { } func ID ) ) { }",
  "func ID { ) { var ID : bool ( } return ( false / ID * false ) } func ID ( ) { }",
  "func ID { ) { var ID : bool ( } return ( } / ID * false ) false func ID ( ) { }",
  "func ID { ) ) var ID : bool ( } return ( } / ID * false ) false func ID ( { { }",
  "func ID ( ) { var ID : bool ID [ while * - ID - ID [ false ] - ID ] [ false ] = ID 123 ID { } }",
  "func ID ( ) { var ID : bool ID ID while * - ID - ID [ false ] - ID ] [ false ] = [ 123 ID { } }",
  "func = ( ) { var ID : bool ID ID while * - ID - ID [ false ] - ID ] [ false ] ID [ 123 ID { } }",
  "func ID ( ) { var ID : [ ] int var ID : bool return 123 * - ID ( true - ( ( - 123 ) ) + / ( false ) ) } func ID ( ) { }",
  "func ID ( ) { var - : [ ] int var ID : bool return 123 * ID ID ( true - ( ( - 123 ) ) + / ( false ) ) } func ID ( ) { }",
  "func ID ( ) { var - : [ ] int var ID : bool return 123 * ID ID ( true - ( ( - 123 ) ) + / ( false ) func } ) ID ( ) { }",
  "func ID ( ) : ( { print ID bool ) [ - true / true and - ID and ( true ) ] print - 123 } func ID ( ) { }",
  "func ID ( ) : ( { true ID bool ) [ - print / true and - ID and ( true ) ] print - 123 } func ID ( ) { }",
  "func ID ( ) : ( { true ID bool ) [ true print / - and - ID and ( true ) ] print - 123 } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ - ( bool ID [ true ] ) ) ] ( var ID : [ ] bool }",
  "func ID ( ) : int ] var ID : [ - ( bool ID [ true ] ) ) { ( var ID : [ ] bool }",
  "func ID ( ) ID int ] var : : [ - ( bool ID [ true ] ) ) { ( var ID : [ ] bool }",
  "} ID ( ID : int , ID : [ ( - - ID ( ) [ ( ID ) ] ) ] int ) { func",
  "} ID ( ID : int ID ID : [ ( - - , ( ) [ ( ID ) ] ) ] int ) { func",
  "} ID ( ID : ( ID ID : [ int - - , ( ) [ ( ID ) ] ) ] int ) { func",
  "func ID ( ID : bool ) : [ ( ID ( ( true ) ) ) ] { bool } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ( ID ( ( true ) func ) ] { bool } ) ID ( ) { }",
  "func ID ( ID : bool ) : [ ( ID ( ( ) true func ) ] { bool } ) ID ( ) { }",
  "func ID ( ) { var ID : int var ID : { ] bool print - ( ( - ID ) ) if ( - ( ( - true ) ) ) [ } }",
  "func ) ( ) { var ID : int var ID : { ] bool print - ( ( - ID ) ) if ( - ( ( - true ) ) ID [ } }",
  "func ) ( ) { var ID : int var ID : { ] bool print - ( ( if ID ) ) - ( - ( ( - true ) ) ID [ } }",
  "func ID ( ) { var ID : [ ( true - ID ID ) [ - ( 123 ) ] + ( 123 ) ) ] bool var ID : bool } func ( ( ) { }",
  "func ID ( ) { var ID : [ ( true - ID ) ) [ - ( 123 ) ] + ( 123 ) ID ] bool var ID : bool } func ( ( ) { }",
  "func ID ( ) { var ID : [ ( true - ID ( ) [ - ) 123 ) ] + ( 123 ) ID ] bool var ID : bool } func ( ( ) { }",
  "func ID ( ) { var ID : [ ] true ] bool call ID ( - 123 * - [ + - ID ) if ( - ID ) { } }",
  "func ID ( ) { var ID : [ ] true ] bool call ID [ - 123 * - ( + - ID ) if ( - ID ) { } }",
  "func ID ( ) { var ID : [ ] true ] bool call ID [ - ( * - ( + - ID ) if 123 - ID ) { } }",
  "func ID ( ID int bool , ID : : , ID : bool ) : [ ] [ ] bool { var ID : bool if ID { } if ( ( ( - - ID ) ) ) { } }",
  "func ID ( ID int bool , ID : : , ID : bool ) : [ ] [ ] bool { var ID : ( if ID { } if ( bool ( - - ID ) ) ) { } }",
  "func ID ( ID int bool , ID : : , ID : bool ) : [ ] [ ] bool { var ID : ( if ID { } if - bool ( ( - ID ) ) ) { } }",
  "func ID ( ID : bool ) } var ID : int { if - ID ( ) [ true ] { } if 123 { } } } func ID ( ) { {",
  "func ID ( ID : bool ) { var ID : int { if - ID ( ) [ true ] { } if 123 } } } } func ID ( ) { {",
  "func ID ( ID : bool ) { var ID : int { if - ID ( ) [ ] true { } if 123 } } } } func ID ( ) { {",
  "func ID ( func { print - ( 123 * ( ( ID ) ) ) call ID ( ) } ) ID ( ) { }",
  "func ID ( 123 { print - ( func * ( ( ID ) ) ) call ID ( ) } ) ID ( ) { }",
  "func ID ( 123 { print ) ( func * ( ( ID ) ) - call ID ( ) } ) ID ( ) { }",
  "func ID ( } : int { var ID : [ ] int var ID : bool ID = false / ( true ) ) func ID ( ) { }",
  "ID ID ( } : int { var func : [ ] int var ID : bool ID = false / ( true ) ) func ID ( ) { }",
  "ID ID ( } : int { var func : [ ] int var ID : bool ID ) false / ( true ) = func ID ( ) { }",
  "func [ ( ID : int ) : ID ( false * ID * ID - ( - ( false ) ) - ( true ) ) ] bool { } func ID ( ) { }",
  "func [ ( ID : int ) : ID ( false * ID * ID - ( - ( false ) ) - ( true ID ) ] bool { } func ) ( ) { }",
  "func [ ] ID : int ) : ID ( false * ID * ID - ( - ( false ) ) - ( true ID ) ( bool { } func ) ( ) { }",
  "func ID ( ID : bool ) : int { var ID : } var ID : [ ] bool call ID ( - ID [ ID ] ) } func ID ( ) { bool",
  "func ID ( ID : bool ) : int { var ID : } var ID : [ ] bool call ID ( - ID [ ID ] ) ) func ID ( } { bool",
  "func ID ( ID : bool ) : int { var ID : } var ID : ] [ bool call ID ( - ID [ ID ] ) ) func ID ( } { bool",
  "func ID ( ID : bool : { var ID ) int }",
  "func ID ( ID : } : { var ID ) int bool",
  "func ID ( ID : } : { var ID ) int bool",
  "func ID ( ID : [ ] bool , ID : [ ] } ID / - - true / ID ( ) ] [ ] int ) { } func ID ( ) { [",
  "func ID - ID : [ ] bool , ID : [ ] } ID / - ( true / ID ( ) ] [ ] int ) { } func ID ( ) { [",
  "func ID - ID ) [ ] bool , ID : [ ] } ID / - ( true / ID ( ) ] [ ] int : { } func ID ( ) { [",
  "func ID ( ) ] [ ( ( - ( - ( true ) ) ) ) : [ ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) ] [ ( ( - ( - ( true ) ) ) ) : [ ] } ] [ ] bool { } func ID ( ) { [",
  "func ID ( ID : bool , ID : int ) : [ - ( ( false / 123 / ) ) ID ] int { }",
  "func ID ( ID : bool , ID : int ) : [ - ( ( false { 123 / ) ) ID ] int / }",
  "func ID ( ID : bool , ID : int ) : [ - ( ( false { 123 / ) } ID ] int / )",
  "func ID ( ) - ID [ true and ( ID ( 123 ) ) ] [ ID ] = { ( - - ( 123 ) ) } func ID ( ) { }",
  "func ID true ) - ID [ ( and ( ID ( 123 ) ) ] [ ID ] = { ( - - ( 123 ) ) } func ID ( ) { }",
  "func ID true ) - ID [ ( and { ID ( 123 ) ) ] [ ID ] = ( ( - - ( 123 ) ) } func ID ( ) { }",
  "func ID ( ) : bool { : func ID ( ID } [ ] [ ID - ( 123 ) - ID ] bool ) { }",
  "func 123 ( ) : bool { : func ID ( ID } [ ] [ ID - ( ID ) - ID ] bool ) { }",
  "func 123 ( ) : bool { : func ID ID ID } [ ] [ ( - ( ID ) - ID ] bool ) { }",
  "func ID ( ID : [ ] bool , ID : int ] ID : bool ) { var ID : [ ] [ ] [ , bool var ID : bool } func ID ( ) { }",
  "func ID ( ID bool [ ] bool , ID : int ] ID : bool ) { var ID : [ ] [ ] [ , : var ID : bool } func ID ( ) { }",
  "func ID ( ID bool [ ] bool , bool : int ] ID : bool ) { var ID : [ ] [ ] [ , : var ID : ID } func ID ( ) { }",
  "func ID ( ID : bool , ID [ [ 123 * ( ID * ( false ) ) / ID ] int , ID : : ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID [ [ 123 * ( ID * ( false ( ) / ID ] int , ID : : ] [ ] int ) { } func ID ) ) { }",
  "func ID ( ID ] bool , ID [ [ 123 * ( ID * ( false ( ) / ID ] int , ID : : : [ ] int ) { } func ID ) ) { }",
  "func ID ( ID : int , var : [ ] int ) : bool { ID ID : int var ID : [ ( ID ) ] [ ] bool }",
  "func ID ( ID ) int , var : [ ] int : : bool { ID ID : int var ID : [ ( ID ) ] [ ] bool }",
  "func ID ( ID ) int , var : [ ] int : : bool { ID ID : int var ID : [ ( ID ) ] [ ] bool }",
  "func ID ( ID : int , ID : [ 123 != ID ( ( 123 ) ) ] : ] bool , ID [ int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ 123 != ID ( ( 123 ) ) ] : ] bool , ID [ int ) ) } func ID ( { { }",
  "func ID ( ID : int , ID : [ 123 != ID ( ( 123 ) ) ] : ] bool , ID [ int ) ) } func ID ( { { }",
  "func ID ( ) : [ ] [ ( ( ) true / 123 + ID + - true ) - ] int { } func ID ( ) { }",
  "func ID ( + : [ ] [ ( ( ) true / 123 + ID ) - true ) - ] int { } func ID ( ) { }",
  "func ID ( + : [ ] [ ( ( ) true func 123 + ID ) - true ) - ] int { } / ID ( ) { }",
  "func ID ( ) : int { call ID ( ) print true / - ( - true } - - false ) / ( ( 123 ) ) *",
  "func ID ( ) : int { call ID 123 ) print true / - ( - true } - - false ) / ( ( ( ) ) *",
  "func ID ( ) : int { call 123 ID ) print true / - ( - true } - - false ) / ( ( ( ) ) *",
  "func ID ( ) : int { var ID : bool var ID : bool { var ID : ID ] [ - 123 - ID ] int var ID : bool } print [ } func ID ( ) { }",
  "func ID ( ) : var { var ID : bool var ID : bool { int ID : ID ] [ - 123 - ID ] int var ID : bool } print [ } func ID ( ) { }",
  "func ID ( ) : var { var ID : bool var ID : bool { int ID : ID ( [ - 123 - ID ] int var ID : bool } print [ } func ID ] ) { }",
  "ID ID ( ID : int , ID : [ ID / ID / func ( ) [ ID ] [ false ] ] [ ] [ ] int , ID : int ) { } func ID ( ) { }",
  "ID ID ( ID : int , ID : [ ID / ID / ] ( ) [ ID func [ false ] ] [ ] [ ] int , ID : int ) { } func ID ( ) { }",
  "ID ID ( ID : } , ID : [ ID / ID / ] ( ) [ ID func [ false ] ] [ ] [ ] int , ID : int ) { int func ID ( ) { }",
  "func ] ( ) : bool { call ID ( ID [ ID [ true ] [ - ID ID ] ) }",
  "func ] ( : ) bool { call ID ( ID [ ID [ true ] [ - ID ID ] ) }",
  "func ] ( : ) bool { call ) ( ID [ ID [ true ] [ - ID ID ] ID }",
  "func ID ( ) { var ID : ) var ID : int if 123 / ( false == 123 ) * ( - ( ( - ID ) ) int { } } func ID ( ) { }",
  "func ID ( ) { var ID : ) var ID : int if 123 / ( false == 123 ) * ( - ( ( - ID ) ) int { } } func ID ( ) { }",
  "func ID ( ) - var ID : ) var ID : int if 123 / ( false == 123 ) * ( { ( ( - ID ) ) int { } } func ID ( ) { }",
  "func ID ( ID : } , ID : bool , ID : [ ] [ 123 * - - 123 <= ( ID ) ] [ ] int ) { bool",
  "func ID ( ID : } , ID : bool , ID : [ ] [ 123 * - - 123 <= ( ID ) ] [ ] int ) { bool",
  "func ID ( ID : } , ID : ] , ID : [ ] [ 123 * - - 123 <= ( ID ) bool [ ] int ) { bool",
  "func ID ( ) { var ID : ] ID [ ID ( ) [ ID [ ID ] ] [ ID bool ] [ ( 123 ) ] = ID }",
  "func var ( ) { ID ID : ] ID [ ID ( ) [ ID [ ID ] ] [ ID bool ] [ ( 123 ) ] = ID }",
  "func var ] ) { ID ID : ] ID [ ID ( ) [ ID [ ID ] ] [ ID bool ( [ ( 123 ) ] = ID }",
  "func ID ( ) { var ID : [ ] [ - ( ( 123 / - - func - - - ID ) ) ] bool } - ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ - ( ( 123 / - - func - - - ID ) ) ] bool } - ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ - ( ( 123 / - - func - - ) ID ) - ] bool } - ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : int [ false and ID return - 123 ] } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var - : int [ false and ID return ID 123 ] } func ID ( ) { }",
  "func ID ( ) : var { var ID : bool int - : int [ false and ID return ID 123 ] } func ID ( ) { }",
  "func ID ( ID : int ) ( var ID : bool print ( ( false * ID * ( - true ) ) ) print ( - - ID ) } func ID { ) { }",
  "ID ID ( func : int ) ( var ID : bool print ( ( false * ID * ( - true ) ) ) print ( - - ID ) } func ID { ) { }",
  "- ID ( func : int ) ( var ID : bool print ( ( false * ID * ( ID true ) ) ) print ( - - ID ) } func ID { ) { }",
  "func ID ( ) { var bool : ID var ID : bool call ID ( ) call ID ( ID ( ) [ 123 ] ) }",
  "func ID ( ) : bool { var ID : [ ] [ - - and true / ( true - ID ) / - - - ( - ID ) and ( ID ) ] [ ] bool var ID : [ ] int }",
  "func ID ( ) : bool { var ID : [ ] [ - - and true / ( - - ID ) / true - - ( - ID ) and ( ID ) ] [ ] bool var ID : [ ] int }",
  "func ID ( ID [ [ ID ( - ID [ ID [ 123 ] : ( 123 ) ] ] [ ID ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ID [ [ ID ( - ID [ ID [ 123 ] : ( 123 ) ] ] [ ID ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ID [ [ ID ( - ID [ ID [ 123 ID : ( 123 ) ] ] [ ID ] ) ] int ) { } func ] ( ) { }",
  "func ID ( ID : [ - true ( ( ( - ID and ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ - true ( ( ( - ID and ) ) ) ] int ) { } func ID ( ) { }",
  "( ID ( ID : [ - true ( func ( - ID and ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] ) , ID : int ) : bool { var ID : int ID ( ) = - ( - - ID int }",
  "func ID ( ID : bool , ID : [ ] ) , ID : int ) : bool { var ID : ( ID int ) = - ( - - ID int }",
  "func ID ( ID : bool , ID : [ ] ) , ID : int ) : - { var ID : ( ID int ) = bool ( - - ID int }",
  "func ID ( ID : int ) : int { var ID : bool return ID [ - false * - - ID ] [ ( ID ) ] } func ID ( ) } {",
  "func ID ( ID : int ) : ID { var ID : bool return ID [ - false * - - ID ] [ ( int ) ] } func ID ( ) } {",
  "func ID ( ID : int ) : ID { var ID : ID return ID [ - false * - - bool ] [ ( int ) ] } func ID ( ) } {",
  "func ID ( ID : int , ID : bool ) : { ID ( - ID ( ) [ ID ] ) ] [ ] bool { } func ID ( ) [ }",
  "func ID ( ID : int ) ID : bool , : { ID ( - ID ( ) [ ID ] ) ] [ ] bool { } func ID ( ) [ }",
  "func ID ( ID : : ) ID int bool , : { ID ( - ID ( ) [ ID ] ) ] [ ] bool { } func ID ( ) [ }",
  "func ID ( ID : [ ] ( ) : bool { var ID : [ - ( - 123 / ( true ) * false ) ] [ ] [ ] int var ID : [ ] bool } func ID bool ) { }",
  "func ID ( ID : / ] ( ) : bool { var ID : [ - ( - 123 [ ( true ) * false ) ] [ ] [ ] int var ID : [ ] bool } func ID bool ) { }",
  "func ID ( ID : / ] ( ) : bool { var ID : [ - ( - 123 [ ( true ) * false ) ] [ ] [ ] int var ID : [ ] bool } func ID bool ) { }",
  "func ID ( ) / print ( true { - ID / ( ( ( ( false ) ) ) ) ) } func ID ( ) { }",
  "func ID ( ) / print ( true { ( ID / ( - ( ( false ) ) ) ) ) } func ID ( ) { }",
  ") ID ( func / print ( true { ( ID / ( - ( ( false ) ) ) ) ) } func ID ( ) { }",
  "func ID ( ) var { ID : bool var ID : bool return ( ( ID ( ID ) ) ) }",
  ") ID ( ) var { ID : bool var ID : bool return ( ( ID ( ID ) ) func }",
  ") ID ( ) var { ID : bool var ID : bool return ( ( ID ( ID ) ) func }",
  "func ID ( ID : [ : bool , ID : bool , ID ] [ false / - ( ID ) ] bool ) { }",
  "func ID ( { : [ : bool , ID : bool , ID ] [ false / - ( ID ) ] bool ) ID }",
  ") ID ( { : [ : bool , ID : bool , ID ] [ false / - ( ID ) ] bool func ID }",
  "func ID ( ID : [ ] [ - - - - ( ID + ( 123 ( + ( ) - true ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ - - - - ( ID + ( 123 ( + ( ) - true ) ) ) ] [ ] { ) bool } func ID ( ) { }",
  "func ID ( ID : [ ] [ - - - - ID ID + ( 123 ( + ( ) - true ) ) ) ] [ ] { ) bool } func ( ( ) { }",
  "func ID ( ID : bool { ) print - ( - ID [ - ( false ) ] ) } func ID ( ) { }",
  "func ID ( ID : bool - ) print - ( { ID [ - ( false ) ] ) } func ID ( ) { }",
  "func ID ( ID : bool - { print - ( ) ID [ - ( false ) ] ) } func ID ( ) { }",
  "func ID ( ) : [ ( ( ID - - false * ) - 123 ) / ( ( - ID ) ( ) ) ] int { } func ID ( ) { }",
  "func ) ( ) : [ ( ( ID - - false * ID - 123 ) / ( ( - ID ) ( ) ) ] int { } func ID ( ) { }",
  "func ( ( ) : [ ( ( ID - - false * ID - 123 ) / ( ( - ID ) ( ) ) ] int { } func ID ) ) { }",
  "func ID ( ) * var ID : [ - true { ID [ ID ( ID ) ] [ ID ] ] bool }",
  "func ID ( ) * var ID : } - true { ID [ ID ( ID ) ] [ ID ] ] bool [",
  "func ID ( ) * var ID : } ( true { ID [ ID - ID ) ] [ ID ] ] bool [",
  "func ID ( ID : int , ID : int ) { var ID : bool var ( : [ ] bool print ( ID ID ) ) } func ID ( ) { }",
  "func ID ( , : int ID ID : int ) { var ID : bool var ( : [ ] bool print ( ID ID ) ) } func ID ( ) { }",
  "func ID ) , : int ID ID : int ) { var ID : bool var ( : [ ] bool print ( ID ID ( ) } func ID ( ) { }",
  "func ID ( * { return - ( ID [ ID ) false - ( ( - ( - 123 ) ) ) ] [ ID ] ) }",
  "func ID ( * { return - ( ID [ ID ) false - ( ] - ( - 123 ) ) ) ( [ ID ] ) }",
  "func ID ( * { return - ( ) [ ID ) false - ( ] - ( - 123 ID ) ) ( [ ID ] ) }",
  "func ID int ID : ( , ID : bool ) : int { var ID : [ 123 - - ( - ( ( 123 ) ) ) ] [ ] bool var ID : [ ] int } func ID ( ) { }",
  "func ID int ID : ( , ID ] bool ) : int { var ID : [ 123 - - ( - ( ( 123 ) ) ) ] [ ] bool var ID : [ : int } func ID ( ) { }",
  "func ID int ID : ( , ID ] bool ) : int { var ID : [ 123 - - ( - ( ( 123 ) ) ) ] [ ] bool var ID : [ : int } func ID ( ) { }",
  "func ( ID ) : bool { var ID : [ - ( ID ( ) [ ( 123 ) ] ) ] int }",
  "func ( ID ) : bool { var ID : [ - ( ID ( ) ( [ 123 ) ] ) ] int }",
  "func ( ID ) : bool { var ID : [ - ( ID ( ) ( [ } ) ] ) ] int 123",
  "func ID ( ) : bool { ID ( ) [ true / - - ( - ID ) true [ ] ] = - ( - true ) if ( 123 ) { } }",
  "func ID ( ) : bool { ID ( ) [ true / - - ( - ID ) true [ ( ] = - ( - true ) if ] 123 ) { } }",
  "func ID ( ) : bool { ID ( ) [ true / - - ( - ID ) true - ( ] = - ( [ true ) if ] 123 ) { } }",
  "func ID ( ID : bool , ID : bool , ID : [ ] ) bool : [ ] bool { var ID : bool print - - 123 if ID { } }",
  "func ID ( ID : bool , ID [ bool , ID : : ] ) bool : [ ] bool { var ID : bool print - - 123 if ID { } }",
  "func ID ( ID : bool , ID [ bool , ID : : ] ) bool : [ ] bool { var ID : 123 print - - bool if ID { } }",
  "func ID ( ] : bool , ID : [ ] bool , ID : [ - - ( true * ( ID ) * ( true ) ) ] [ ID bool ) { }",
  "func ID ( ] : bool , ID : [ - bool , ID : [ - ] ( true * ( ID ) * ( true ) ) ] [ ID bool ) { }",
  "func ID ( ] : bool , ID : [ - bool , ID : [ - ] ( true * ( ID ) * ( true ) ) ] [ ID bool } { )",
  "func ID ( ID : int , ID : int ) : bool { [ ID : bool ID [ - - ID * - false * - ID ] var ID ] = 123 ID = ( ID ) }",
  "func ID ( - : int , ID : int ) : bool { [ ID : bool ID [ - - ID * ID false * - ID ] var ID ] = 123 ID = ( ID ) }",
  "func ID ( - : int ) ID : int ) : bool { [ ID : bool ID [ - - ID * ID false * - ID ] var ID ] = 123 ID = ( ID , }",
  "func ID ( ID : int , ID : [ - ( false / false ( ( + ID ) ) ) ] [ ] int , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - ( false / false ( ( : ID ) ) ) ] [ ] int , ID + [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - ( false / false ( ( : ) ) ) ID ] [ ] int , ID + [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID - bool while true - false - - ( : 123 ) { } while ( ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ) : int { var ID - bool while true - false - - ( : 123 ) { } while ( func ID ) ) { } } ( ID ( ) { }",
  "func ID ( ) : int { var } - bool while true - false - - ( : 123 ) { } while ( func ID ) ) { ID } ( ID ( ) { }",
  "func ID ( ID : ) ( true + ( ID / ( ( ID ) ) * ID ) ) ] bool [ { }",
  "func ID ( ID : ) ( true + ( ID / ID ( ID ) ) * ( ) ) ] bool [ { }",
  "func ID ( ID ) : ( true + ( ID / ID ( ID ) ) * ( ) ) ] bool [ { }",
  "func ID ( ) [ call ID ( ) return } func ID ( ID : [ ] bool , ID : { ] bool , ID : [ false ] bool ) { }",
  "func ID ( ) [ call ID ( ) return } func ID ( ID : [ ] bool , ID : { ] bool , ID : false [ ] bool ) { }",
  "func ID ( ) [ call ID ( ) bool } func ID ( ID : [ ] bool , ID : { ] bool , ID : false [ ] return ) { }",
  "func : ( ID : int , ID ID [ ] bool ) { var ID : int var ID : int if true * true { } call ID ( ) }",
  "func : ( ID : int , ID ID [ ] bool ) { var ID : int var ID ) int if true * true { } call ID ( : }",
  "func : ( ID : int , ID ) [ ] bool ) { var ID : int var ID ID int if true * true { } call ID ( : }",
  "func ID - ) { print true ( 123 and ( ( false ) ) and ( ID ) { } }",
  "func ID - 123 { print true ( ) and ( ( false ) ) and ( ID ) { } }",
  "func ID - 123 { print true ( ) and ( ( false ) ) and ( ID ) { } }",
  "func ID ( ID : int , ID : bool , ID : bool ) ) var ID : int var ID : bool if ( false ) { } } func ID ( { { }",
  "func ID ( ID : int , ID : bool , ID : bool ) ) : ID var int var ID : bool if ( false ) { } } func ID ( { { }",
  "func ID ( ID : int , ID : bool , ID : bool ) ) : ID var int var ID : false if ( bool ) { } } func ID ( { { }",
  "func ID ( ) { var ID : [ ] [ ( int call ID ( - - ID ( false ) ) print - ( ( ( - ID ) ) ) } func ID ] ) { }",
  "func ID ( ) { var ( : [ ] [ ( int call ID ID - - ID ( false ) ) print - ( ( ( - ID ) ) ) } func ID ] ) { }",
  ") ID ( ) { var ( : [ ] [ ( int call ID ID - - ID ( false ) ) print - ( ( ( - ID ) ) ) } func ID ] func { }",
  "func ID ( var : bool , ID : int , ID : bool ) { ID ID : [ ] int var ID : int print ID ( ) ID = - false } func ID ( ) { }",
  "func ID ( var : bool , ID : int , ID : bool ) { ID ID : [ ] int var ID : int print ID ( ) ID = - false } func ID ( ) { }",
  "func ID ( var : bool , ID : int , ID : bool ) { ID func : [ ] int var ID : int print ID ( ) ID = - false } ID ID ( ) { }",
  "func ID ( ) : int { var ID : int while ( ) - false * - ID ( - * ( ID ) ) { } { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int while ( ) - false * - ID ( - * ID ( ) ) { } { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int while ( ) - false * - ID ( - func ID ( ) ) { } { } } * ID ( ) { }",
  "func ID ( ID : [ true ] { , ID : bool , ID : bool ) : int bool print ID }",
  "func , ( ID : [ true ] { , ID : bool ID ID : bool ) : int bool print ID }",
  "func } ( ID : [ true ] { , ID : bool ID ID : bool ) : int bool print ID ,",
  "func ID ( ID : bool , ID : int ) { var ID : int return ID { 123 * ( - true ) ) } func ID ( ) ( }",
  "func ID ( ID : bool , ID : func ) { var ID : int return ID { 123 * ( - true ) ) } int ID ( ) ( }",
  "func ID ( ID : bool , ID : func ( { var ID : int return ID { 123 * ) - true ) ) } int ID ( ) ( }",
  "func ID ( ) { 123 ID ( - ID [ print * ( - 123 ) * false ] ) }",
  "func ID ( * { 123 ID ( - ID [ print * ( - 123 ) ) false ] ) }",
  "func ID ( * { 123 ID ( ] ID [ print * ( - 123 ) ) false - ) }",
  "func ID ( ) : [ ( ( - - 123 / ( * 123 - ID ) ) ) ] [ ] [ ] [ ] [ ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) 123 [ ( ( - - 123 / ( * : - ID ) ) ) ] [ ] [ ] [ ] [ ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) 123 [ ( ( - - 123 / ( * : - ID ) ) ) [ [ ] [ ] [ ] [ ] [ ] ] ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ) : bool , ID : [ true + ( - ( ID ID ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ) : bool , ID : [ true + ID - ( ( ID ) ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , [ : bool , ID : [ true + ID - ( ( ID ) ] [ ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ( : bool ) { if ( ID false + ( ( ID ) ) ) ) { } if ID { } } func ID ( ) { }",
  "func ID ( } : bool ) { if ( ID false + ( ( ID ) ) ) ) { ( if ID { } } func ID ( ) { }",
  "func ID ( ID : int ) } var ID : bool if ( ( ( ( ( true ) ) ) ) ) { } { } {",
  "func ID ( ID : int : } var ID ) bool if ( ( ( ( ( true ) ) ) ) ) { } { } {",
  "func ID ( ID : { : } var ID ) bool if ( ( ( ( ( true ) ) ) ) ) { } { } int",
  "func ID ( ID : int , ID : bool , ID : [ ID [ ( ID ( ) ) ] [ ] false ) ] ( int ) { }",
  "func ID ( ID : int , ID : bool , ID } [ ID [ ( ID ( ) ) ] [ ] false ) ] ( int ) { :",
  "func ID ( ID : int ( ID : bool , ID } [ ID [ , ID ( ) ) ] [ ] false ) ] ( int ) { :",
  "func ID ( ID ( [ 123 / true * ( - ( ( ID ) ) ) ] int ) { } func ID : ) { }",
  "func ID ( ID ( [ 123 / true ) ( - ( ( ID ) ) ) ] int * { } func ID : ) { }",
  "func ID ( ID 123 [ ( / true ) ( - ( ( ID ) ) ) ] int * { } func ID : ) { }",
  "func ID ( [ : int { var ID : int var ID : int { var ID : [ ID [ ( 123 ) ] ) ( ID ) ] ] bool var ID : [ ] int } while ( ID ) { } }",
  "func ID ( var : int { [ ID : int var ID : int { var ID : [ ID [ ( 123 ) ] ) ( ID ) ] ] bool var ID : [ ] int } while ( ID ) { } }",
  "func ID ( var : int { [ ID : int ) ID : int { var ID : [ ID [ ( 123 ) ] ) ( ID ) ] ] bool var ID : [ ] int } while ( ID var { } }",
  "func ID ( ID ] [ false / true and - - - - true / - ID / ( - - ID ) and - - 123 : int ) { } func ID ( ) { }",
  "func ID ( ID ] [ false / true and - - - - true / - ID / ( - - ID ) ) - - 123 : int ) { } func ID ( and { }",
  "func ID ( ID ] [ false / true and - - - - true 123 - ID / ( - - ID ) ) - - / : int ) { } func ID ( and { }",
  "func ID ( ) : bool { / false while ( ( ( ID ) ) ) * ( ID ) { } }",
  "func ID ( ) : bool { / false while ( ( ( ID ) ) ) * { ID ) ( } }",
  "func ID ( ) : ( { / false while ( ( bool ID ) ) ) * { ID ) ( } }",
  "func ID ( ) ) bool { var ID : int var ID : bool print ( ID ( ) [ - ID ] : }",
  "func ID ( ) ) bool { var ID : int var ID : bool print ( ID ( ) [ - ID ] : }",
  "[ ID ( ) ) bool { var ID : int var ID : bool print ( ID ( ) func - ID ] : }",
  "func ID ( ) { bool { var ID : [ ID ( ) [ false / ( - - - ( ( ( ID ) ) ) ) ] [ ( ID ) ] ] bool } func ID ( ) : }",
  "func ID ( ) { bool { var ID : [ ) ( ) [ false / ( - - - ( ( ( ID ) ) ) ) ] [ ( ID ) ] ] bool } func ID ( ID : }",
  "func ID ( ) { bool { var ID ] [ ) ( ) [ false / ( - - - ( ( ( ID ) ) ) ) ] [ ( ID ) ] : bool } func ID ( ID : }",
  "func ID ( ID : [ false * ID ( - - ID ( ) [ ( - ID ) ) ] * ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ false * ID ( - - ID ( ) [ ( - } ) ) ] * ] int ) { ID func ID ( ) { }",
  "func ID ( ID : [ false * } ( - - ID ( ) [ ( - } ) ) ] * ] int ) { ID func ID ( ) { ID",
  "func ID ( ID : bool , ID : int , ID : bool ) { var ID : bool if ( ( - ID ) if { } ) ( ( ( - false ) ) ) { } }",
  "func ID ( ID : bool , ID : int , ID : ) ) { var ID : bool if ( ( - ID bool if { } ) ( ( ( - false ) ) ) { } }",
  "func ID ( ID : int , ID : bool , ID : [ ( ( false / ( { ) * ( false ) ) ) ] int ) { } func ID ( ) ID }",
  "( ID ( ID : int , ID : bool , ID : [ ( ( false / ( { ) * ( false ) ) ) ] int ) { } func ID func ) ID }",
  "( ID ( ID : int , ID : ( , ID : [ ( ( false / ( { ) * bool false ) ) ) ] int ) { } func ID func ) ID }",
  "func ID ( ) : int { var ID : [ ( ID / 123 - ID ( ) ) ] ID var bool : int } func ID ( ) { }",
  "func ID : ) : int { var ID ( [ ( ID / 123 - ID ( ) ) ] ID var bool : int } func ID ( ) { }",
  "func ID : ) : int { var ID ( [ ( ID / 123 - ID ( ) ) ] ID var bool : int } func ID ( ) { }",
  "func ID ( ) : [ ( ID ( bool and - - true - ID - 123 ) ] [ ] [ ] ) { } func ID ( ) { }",
  "func ID ( ) : [ ( ID ( bool and - - true - ID - 123 ) ] [ ] [ ] func { } ) ID ( ) { }",
  "func ID ( ) : [ ( ID ( bool and - - true - ) - 123 ) ] [ ] [ ] func { } ) ID ( ID { }",
  "func ID ( false : int , ID : [ ] [ - ID / false / ID ( ID ) ] int , ID : bool ) { } func ID ( ) { }",
  "func ) ( false : int , ID : [ ] [ - ID / false / ID ( ID ID ] int , ID : bool ) { } func ID ( ) { }",
  "func ) ( false : int , ID : [ ] [ - ID / false / ID ( ID } ] int , ID : bool ) { ID func ID ( ) { }",
  "func ID ( ) { var ID : int if 123 * ) true * false / ID ( { } } func ID ( ) { }",
  "func ID ( ) ( var ID : int if 123 * ) true * false / ID ( { } } func ID { ) { }",
  "func ID ( ) ( var ID : int if 123 * ) true * false / ID ( func } } { ID { ) { }",
  "func 123 ( ID : int ) : [ ] int { { var ID : [ - ID [ ID ] ] int } }",
  "func 123 ( ID : ] ) : [ int int { { var ID : [ - ID [ ID ] ] int } }",
  "func 123 ( } : ] ) : [ int int { { var ID : [ - ID [ ID ] ] int ID }",
  "func ID ( ) : bool ( var ID : int ID [ - false * ID * { - ID ) ] [ - - - true ] = ( ID ) print - - - false }",
  "func ID ( ) : bool ( var ID : int ID [ - false * ID * { - ID - ] [ - - - true ] = ( ID ) print - - ) false }",
  "func ID ( ) : * ( var ID : int ID [ - false * ID bool { - ID - ] [ - - - true ] = ( ID ) print - - ) false }",
  "func ID ( ) { ID ( ID [ ( 123 * - true ) ] [ true ] false = ( ) ) }",
  "func ID ( ) { ID - ID [ ( 123 * ( true ) ] [ true ] false = ( ) ) }",
  "func ID ( ) { ID - ID [ ( ] * ( true ) 123 [ true ] false = ( ) ) }",
  "func ID ( ID : bool ) { } func ID ( ID : int int ID : [ - false / true * ( ID ) ] , , ID : bool ) { }",
  "func ID ( : : bool ) { } func ID ( ID : int int ID ID [ - false / true * ( ID ) ] , , ID : bool ) { }",
  "func ID [ : : bool ) { } func ID ( ID : int int ID ID ( - false / true * ( ID ) ] , , ID : bool ) { }",
  "func ID ( ID : : , ID int [ ] int ) { var ID : int var ID : [ ] [ ( 123 ) ] int } func ID ( ) { }",
  "func ID ( ID : : , ID int [ 123 int ) { var ID : int var ID : [ ] [ ( ] ) ] int } func ID ( ) { }",
  "func ID ( ID : : , } int [ 123 int ) { var ID : int var ID : [ ] [ ( ] ) ] int ID func ID ( ) { }",
  "[ ID ( ID : int , ID : int , ID : [ 123 != 123 * ID ( ) [ true ] ] func ] bool ) { } func ID ( ) { }",
  "[ ID ( ID ( int , ID : int , ID : [ 123 != 123 * ID ( ) [ true ] ] func ] bool ) { } func ID : ) { }",
  "[ ID ( ID ( int , ID : int , ID : [ 123 != 123 * ID ( ) [ true ] ] func ] bool ) { } func ID : ) { }",
  "func ID ( ID : bool , ID : bool ) { call ) ( ) return - ( false * false * ( 123 ) ID }",
  "func ID ( ID : bool , ID ( bool ) { call ) ( ) return - : false * false * ( 123 ) ID }",
  "func ID ( ID : bool , ID ( bool ) { call ) ( ) return - : false 123 false * ( * ) ID }",
  "func ID ( ID : int , ID [ [ ID [ - false - - - ID ] : ID ] ] [ ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ID : int , ID [ - ID [ [ false - - - ID ] : ID ] ] [ ] [ ] [ ] [ ] bool ) { }",
  "func ID , ID : int ( ID [ - ID [ [ false - - - ID ] : ID ] ] [ ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ) : int { call ID ( false * ID [ ( ( - - ( 123 ) ) ] [ ( - ID ) ) ] ) }",
  "func ID ( ) : ( { call ID ( false * ID [ ( ( - - int 123 ) ) ] [ ( - ID ) ) ] ) }",
  "* ID ( ) : ( { call ID ( false func ID [ ( ( - - int 123 ) ) ] [ ( - ID ) ) ] ) }",
  "func : ( ID : bool , ID : int , ID : int ) ID int { var ID : int var ID : int while ( true ) { } print ID } func ID ( ) { }",
  "func : ( ID : bool , ID : int , ID : int ) ID int ID var ID : int var { : int while ( true ) { } print ID } func ID ( ) { }",
  "func : ( ID : bool , ID : int , ID : int ) ID int ID var ID : int var { : true while ( int ) { } print ID } func ID ( ) { }",
  "func ID ( ID : bool bool ID : bool ) { var ID : bool var ID : , }",
  "func ID ( ID : bool bool ID : bool ) { var ID : bool var ID : , }",
  "func ID } ID : bool bool ID : bool ) { var ID : bool var ID : , (",
  "func ID ( ) : [ - 123 / true * ( ID * true / - ID } ] int { ) func ID ( ) { }",
  "func ID ( ) : [ - 123 / true * ( ID * true / - ID } ] int { ) func ID ( ) { }",
  "func ID ( ) : [ - 123 / true * ( ID * true / - ID } ] int { ) func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool ID ( ) [ ( ( ID ) ) ] [ false ] = ( ) - ( ( - ID ) - ) call ID ( ) } func ID ( ) { }",
  "func ID bool ) { var ID : [ ] ( ID ( ) [ ( ( ID ) ) ] [ false ] = ( ) - ( ( - ID ) - ) call ID ( ) } func ID ( ) { }",
  "func ID bool ) { var ID : [ ] ( ID ( ) [ ( ( ID ) ) ] [ false ] = ( ) - ( ( - ID ) - ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : int return } - - true / 123 * 123 >= false -",
  "func ID ( ID : bool ) { var ID : int return } - true - / 123 * 123 >= false -",
  "* ID ( ID : bool ) { var ID : int return } - true - / 123 func 123 >= false -",
  "func ID ( ) { var ID : int return ( ID ( ) [ 123 / ID ( [ ] ID ) ] ) }",
  "} ID ( ) { var ID : int return ( ID ( ) [ 123 / ID ( [ ] ID ) ] ) func",
  "} ID ( ) { var ID : int return ( ID ( ) ( 123 / ID [ [ ] ID ) ] ) func",
  "func ID ( ID : bool ) : : ] int { var ID : int var ID [ bool }",
  "func ID ( ID : bool ) : : ] int { var ID : int } ID [ bool var",
  "func ID ( ID : ) bool : : ] int { var ID : int } ID [ bool var",
  "func ID ( ID : [ ] int , ID : [ ] bool , ID : int ) { var func ID ( ) { } ID : [ ] bool var ID : int }",
  "func ID ( ID : [ ] int , ID : [ ] { , ID : int ) { var func ID ( ) bool } ID : [ ] bool var ID : int }",
  "func ID ( ID : [ ] int , ID : var ] { , ID : int ) { var func ID ( ) bool } ID : [ ] bool [ ID : int }",
  "func ID ( } { var ID : int call ID ( - ( true / false - ID ) ) call ID ( ) ) func ID ( ) { }",
  "func ID ( } { var ID : int call ID ( - ( true / false ID ID ) ) call - ( ) ) func ID ( ) { }",
  "func ID ( } { var ID : int call ID ( - ( true / ) ID ID false ) call - ( ) ) func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : int if - false ) true + ID / ( ID ) { } } func ID ( * { }",
  "func ID ( ) : int { var ID : bool var ID : int if - false ) true + ID / func ID ) { } } ( ID ( * { }",
  "func ID ( ID { var ) : int } func ID ( ) : [ ] [ ] int { var ID : bool { var ID : bool var ID : bool } while ( ID ) { } }",
  "func ID ( ID { var ) : int } func ID ( ) : [ ] [ ] int { ( ID : bool { var ID : bool var ID : bool } while var ID ) { } }",
  "func ID ( ID { var ) : int } func ID ( ) : [ ] [ ] int { ( ID : bool { var ID : bool var ID : bool } while { ID ) var } }",
  "func { ( ) : int ID return ( ( ( true + ID - ID ) ) ) }",
  "func { ID ) : int ( return ( ( ( true + ID - ID ) ) ) }",
  "func { ID ) : int ( return ( ( ( true + ID - ID ) ) ) }",
  "func ID ( ID : true - ID [ - ID ( ) [ ( ID ) ] [ - ID ] ] [ [ ] ] [ ] bool ) { }",
  "func ID ( ] : true - ID [ - ID ( ) [ ( ID ) ] [ - ID ] ] [ [ ] ] [ ID bool ) { }",
  "- ID ( ] : true - ID [ - ID ( ) [ ( ID ) ] [ func ID ] ] [ [ ] ] [ ID bool ) { }",
  "ID ID ( ID : int , ID : int , ID : int ) { var ID : int call ID ( ) return } func func ( ID : bool , ID : int , ID : [ ] bool ) { }",
  "ID ID ( ID : int , ID : int , ID : int ) { var ID : int call ID ( ) return } func func ( ID : bool , ID : int , ID : [ ] bool ) { }",
  "ID ID ( ID : int , ID : int , ID : int ) { var ID : int call ID ( ) return } func func ( ID : bool , ID : int , ID : [ ] bool ) { }",
  "func ID ( ID : [ ] [ - ( ID ( ( ID ] ) ) ] [ ) [ ] int ) { }",
  "func ID [ ID : ( ] [ - ( ID ( ( ID ] ) ) ] [ ) [ ] int ) { }",
  "func ID [ ID : ( ] [ - ( ID ( ( ) ] ) ID ] [ ) [ ] int ) { }",
  "func { ( ID : [ ] bool , ID : int ) { var ID : bool var ID : int if 123 * ID / ID { } } func ID ( ) ID }",
  "func { ( ID : [ ] bool , ID : int ) { var ID : bool var ID : int if 123 * ID / ID { } } func ID ( ) ID }",
  "func { ( ID : [ ] bool , ID : int ) { var ID : bool var ID : int if 123 * ID / ID { } } func ID ( ) ID }",
  "func ID ( ) : int { var ID : bool var ) : [ ] int print ( 123 * ( - false ) * 123 ID } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ) : [ ] int print ( 123 } ( - false ) * 123 ID } func ID ( ) { *",
  "func ID ( ) : int { var ID : bool var ) : [ ] int print ( 123 } ( - false ) * 123 ID } func ID ( ) { *",
  "func ID ( ID : [ ] bool , ID : : , ID bool bool ) : bool { if ( - false ) { } } func ID ( ) { }",
  "func ID ( ID ID [ ] bool , ID : : , ID bool bool ) : bool { if ( - false ) { } } func : ( ) { }",
  "func ID ( ID ID [ : bool , ID ] : , ID bool bool ) : bool { if ( - false ) { } } func : ( ) { }",
  "[ ID ( ) { var ID : [ ( ID [ - - 123 / - ( false ) ] [ true ] ) ] func ] bool }",
  "[ ID ( ) { var ID : [ [ ID ( - - 123 / - ( false ) ] [ true ] ) ] func ] bool }",
  "[ ID ( ) { var bool : [ [ ID ( - - 123 / - ( false ) ] [ true ] ) ] func ] ID }",
  "func ID ( ) { var ID : int var ID : int print - ID ( ) / - - - - ( - ( ID ) ) / ID } func ID ) ( { }",
  "func ID ( ) { var ID : int ) ID : int print - ID ( ) / - - - - ( - ( ID ) var / ID } func ID ) ( { }",
  "func ID ( ) { var ID : int ) ID : int print - ID ( ) / - - - - ( - ( ID ) var / ID } func ID ) ( { }",
  "func ID ID ) { var ID : [ ] int var ( : bool call ID ( ( ID [ - ( ID ) ] ) ) while 123 { } } func ID ( ) { }",
  "func ID ID ) { var [ : [ ] int var ( : bool call ID ( ( ID ID - ( ID ) ] ) ) while 123 { } } func ID ( ) { }",
  "func ID ID ) { var [ : [ ] int var ( : bool call ID ( ( ID ID - ( ID ) ] ) ) while 123 { } } func ID ( ) { }",
  "func ID ( ID : [ ( ID [ ID ( true ) ] ) func bool ) { } ] ID ( ) { }",
  "func ID ( ID : [ ( ID [ ID ( true ) ] ) func bool ) { } ] ID ( ) { }",
  "func ID ( ID : [ ( ID [ ID func true ) ] ) ( bool ) { } ] ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { print 123 * true ( ( ) ) / ID } func ID ( ) { }",
  ", ID ( ID : bool func ID : bool ) { print 123 * true ( ( ) ) / ID } func ID ( ) { }",
  ", ID ( ID : bool func ) : bool ) { print 123 * true ( ( ) ID / ID } func ID ( ) { }",
  "func ID ( ) : [ ID - ( true * ) / ( - ( ID ) ) ID - ( ( ID ) ) ] int { } func ID ( ) { }",
  "func ID ( ) : [ ID - ( true * ) / ( - ] ID ) ) ID - ( ( ID ) ) ( int { } func ID ( ) { }",
  "func ID ( ) : [ ID - ) true * ) / ( - ] ID ) ) ID - ( ( ID ( ) ( int { } func ID ( ) { }",
  "} ID ( ) : [ - ( ID ( ) [ ( - ID ) ] ) ] bool { func",
  "} ID ( ) : [ - ( ID ( ) [ ( - ID ] ] ) ) bool { func",
  "} ID ( ) : [ - ( ID ( ) [ ( - ID ] ] ) ) bool { func",
  "func ID ( ID : int ) var [ ] bool { : ID : bool return false / false - - ID + ID }",
  "func ID ( ID : int ) var [ ] bool { : ID : - return false / false - bool ID + ID }",
  "func ID ( ID : int ) var [ ] bool { : ID : - return false / false - bool ID + ID }",
  "func ID ( ID : [ ] bool ) { var ID : int var ID : [ ID } 123 ] [ - ID ] ] [ ] [ ] bool [",
  "func ID ( ID bool [ ] bool ) { var ID : int var ID : [ ID } 123 ] [ - ID ] ] [ ] [ ] : [",
  "func ID ( ID bool [ ] bool ) { ] ID : int var ID : [ ID } 123 ] [ - ID ] var [ ] [ ] : [",
  "func ID ( ) { ] func ID ( ) : [ } [ ] [ ] [ ] bool { call ID ( 123 ) }",
  "func ID ( ) { ] [ ID ( ) : [ } [ ] func ] [ ] bool { call ID ( 123 ) }",
  "func [ ( ) { ] [ ID ( ) : [ } ID ] func ] [ ] bool { call ID ( 123 ) }",
  "func ID ( ID : bool , ID : int , ID : var ) { bool ID : bool print ID ( ) * ID / false { } }",
  "func ID ( ID : bool , ID : int , print : var ) { bool ID : bool ID ID ( ) * ID / false { } }",
  "func ( ID ID : bool , ID : int , print : var ) { bool ID : bool ID ID ( ) * ID / false { } }",
  "func ID ( ) ] return ( ID [ ID [ true { [ ( - ( true ) ) ] ] ) }",
  "func ID ( ) ] return ( ID } ID [ true { [ ( - ( true ) ) ] ] ) [",
  "func ID ( ) ] return ( ID [ ID [ true { [ ( - ( true ) ) ] ] ) }",
  "func ID ( ID : [ ( ( + ID * 123 + ID ( - 123 ID ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ( ( + ID * 123 + ID ( - 123 ID ) ) ) ] int ) { } { ID ( ) func }",
  "func ID ( ID : [ ( ( + ID * 123 + ID ( - 123 ID ) ) ) ] { ) { } int ID ( ) func }",
  "func ID ( ID : int ) { var ID : ID ] int var [ : bool call ID ( ( false ) ) }",
  "func ID ( ID : int ) { var ID : ID ] int var [ : bool call ID ( ( ) ) false }",
  "func ID ( ID : int ) { var ID : ID ] int var [ : bool call ID ( ( ) ) false }",
  "func ID ( ) { ID ( ( ID ( ) * ( - ( ( ( ( - ID ) ) ( ) ) ) ) = ( ( ( ) ID ) ) ) ) }",
  "func ID ( ) { ID ( ( ID ( ) * ( - ( ( ( ) - ID ( ) ( ) ) ) ) = ( ( ( ) ID ) ) ) ) }",
  "func ID ( ) { ID ( ( ID ) ) * ( - ( ( ( ) - ID ( ) ( ) ) ) ( = ( ( ( ) ID ) ) ) ) }",
  "func ID ( ID : [ ] [ ] <= - ( ID ( ID ) ) 123 int ) { }",
  "{ ID ( ID : [ ] [ ] <= - ( ID ( ID ) ) 123 int ) func }",
  "{ ID ( ID : [ ] [ ] <= - ( ID ( ID ) ) 123 ) int func }",
  "func ID ( ID : bool , ID : int ) : ) { return } func ID ( ) { if ID ( bool { } }",
  "func func ( ID : bool , ID : int ) : ) { return } ID ID ( ) { if ID ( bool { } }",
  "} func ( ID : bool , ID : int ) : ) { return } ID ID ( ) { if ID ( bool { } func",
  "func ID func ID : bool , ID : bool ) { var ID : int if ( - 123 / ID * ID ) { } call ID ( ) } ( ID ( ) { }",
  "func ID func ID : bool , ID : bool ) { var ID : int if ( - } / ID * ID ) { } call ID ( ) } ( ID ( ) { 123",
  "func ID func ID : bool , ID : bool ) { var ID : int if ( - } / ID * ID ) { } call ID ( ( } ) ID ( ) { 123",
  "func ID ( ) : bool { var ID : [ - ID - true + - - ID ] [ - - [ false ] ] int } func ID ( ) { }",
  ") ID ( func : bool { var ID : [ - ID - true + - - ID ] [ - - [ false ] ] int } func ID ( ) { }",
  ") ID ( func : bool [ var ID : [ - ID - true + - - ID ] [ - - { false ] ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] [ ( - - true / ID [ true ] [ ID ] * ID ) ] bool var ID : ] [ [ ] [ ] bool }",
  "func ID ( ) : int { var ID : [ ] [ ( - - bool / ID [ true ] [ ID ] * ID ) ] bool var ID : ] [ [ ] [ ] true }",
  "func ID ( ) : int { var ID : [ ] [ ( - - bool / ID [ true ] [ ID ] * ID ) ] bool var ID : ] [ [ ] [ ] true }",
  "func ID ( ID : bool , ID : bool , ID : bool ) ) { var ID : bool return } return } func ID ( { : [ ] bool { }",
  "func ID ( ID : bool , ID : bool } ID : bool ) ) { var ID : bool return , return } func ID ( { : [ ] bool { }",
  "func ID ( ID : bool , ID : bool } ID : bool ) ) { var ID : bool return , return } func ID ( { : [ ] bool { }",
  "func ID ( ID : int ) : int { var ID : int var ID : ] ( true * ID / ( ID ) ) [ [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : int var ID : ] ( true * ID / ( ID ) ) [ [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int ) : int { var ID : int var ID : ] ( true * ID / ) ID ) ) [ [ ] [ ] bool } func ID ( ( { }",
  "func ID ( [ : int { var ID : bool { var ID : [ ] [ ID ( ) [ true ] ] ) ] [ ] bool } }",
  "func ID ( [ : int { var ID : bool { ] ID : [ ] [ ID ( ) [ true var ] ) ] [ ] bool } }",
  "func [ ( [ : int { var ID : bool { ] ID : [ ] ID ID ( ) [ true var ] ) ] [ ] bool } }",
  "func ID ( ) { var ID : [ ] [ - ( 123 * ( ( ( ID ) ) ) / 123 ) ] var bool ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ - ( ) * ( ( ( ID ) ) ) / 123 123 ] var bool ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ - ( ) * ( ( ( ID ) ) ) / var 123 ] 123 bool ID : int } func ID ( ) { }",
  "func ID ( ) { print * - ( 123 ( ID ( false ) * - ID ) ) } func ID ( ) { }",
  "func ID ( ) { print * - 123 ( ( ID ( false ) * - ID ) ) } func ID ( ) { }",
  "func ID ( ) { print * - 123 ( ( - ( false ) * ID ID ) ) } func ID ( ) { }",
  "func ID ( ) : int print { ( ( - - ID ( ) [ 123 ] [ - false ] ) ) } func ID ( ) { }",
  "func ID ( ) : int ) { ( ( - - ID ( ) [ 123 ] [ - false ] ) ) } func ID ( print { }",
  "func ID ( ) : int ) 123 ( ( - - ID ( ) [ { ] [ - false ] ) ) } func ID ( print { }",
  "func ID ( ) { var ID var bool : ID : int call ID ( ) { } } func ID ( ) { ID = ( - ( true ) ) }",
  "func ID = ) { var ID var bool : ID : int call ID ( ) { } } func ID ( ) { ID ( ( - ( true ) ) }",
  "func ID = ) { var ) var bool : ID : int call ID ( ) { } } func ID ( ) { ID ( ( - ( true ID ) }",
  "func ID ( ) : [ ] [ ] int { var ID : bool int ID : var if ID ( ) [ ( ( true ) ) ] { } while ID { } }",
  "func ID ( ) : [ ] [ ] int { var ID : bool int ID : var if ID ( ( [ ) ( true ) ) ] { } while ID { } }",
  "func ID ( ) var [ ] [ ] int { var ID : bool int ID : : if ID ( ( [ ) ( true ) ) ] { } while ID { } }",
  "func ID false ID : bool , ID : int ) : bool { var ID : bool var ID : int while false / - ( { } call ID ( ) }",
  "func ID false ID : / , ID : int ) : bool { var ID : bool var ID : int while false bool - ( { } call ID ( ) }",
  "func ID false ID : / , ID : int ) : bool { var ID : var bool ID : int while false bool - ( { } call ID ( ) }",
  "ID ID ( ID : int , ID : int , ID : bool ) { var ID : int var func : int if ID [ ID ] [ ID ] { } if ID { } }",
  "ID [ ( ID : int , ID : int , ID : bool ) { var ID : int var func : int if ID ID ID ] [ ID ] { } if ID { } }",
  "ID [ ( ID : var , ID : int , ID : bool ) { var ID : int int func : int if ID ID ID ] [ ID ] { } if ID { } }",
  "func ID ( ID : int ) : int } var ID : [ - ( ( false ) ) ] int { func ID ( ) { }",
  "func ID ( ( : int ) : int } var ID : [ - ( ( false ) ) ] int { func ID ID ) { }",
  "var ID ( ( : int ) : int } func ID : [ - ( ( false ) ) ] int { func ID ID ) { }",
  "func ID ( ID : int ) : bool { print 123 / 123 + - 123 != ( ( ID ) ) call ID ( ) { func ID ( ) } }",
  "func ID ( ID : int ) : bool print { 123 / 123 + - 123 != ( ( ID ) ) call ID ( ) { func ID ( ) } }",
  "func ID ( ID : int ) : bool print { 123 / 123 + - 123 != ( ( ID call ) ) ID ( ) { func ID ( ) } }",
  "func ID ( ) : [ ] [ ] [ func bool { var ID : bool return ( - ( - ID ) ) } ] ID ( ) { }",
  "func ID ( ) : - ] [ ] [ func bool { var ID : bool return ( - ( [ ID ) ) } ] ID ( ) { }",
  "func ID ( ) : - ] [ ] [ func bool { var ID : bool return ( - ( [ ID ) ) } ] ID ( ) { }",
  "func ID ( ) : bool { var ID : int while - - true } ( ( ( ( - 123 ) ) ) ) { * } func ID ( ) { }",
  "func ID ( ) : ( { var ID : int while - - true } ( ( bool ( - 123 ) ) ) ) { * } func ID ( ) { }",
  "func ID ( ID : bool int ID : bool , ID : , ) { var ID : bool var ID : bool { var ID : [ 123 ] [ ] [ ] bool } }",
  "func ID ( ID : bool int ID } bool , ID : , ) { var ID : bool var ID : bool { var ID : [ 123 ] [ ] [ ] bool } :",
  "func ID ( ID : bool int ID } bool , ID : , ) { var ID : bool var ID : bool { ] ID : [ 123 var [ ] [ ] bool } :",
  "func ID ( ID ] int , ID : [ : int ) { var ID : int var ID : int print ( false ) } func ID ( ) { }",
  "func ID ( ID ] int , ID : [ : int ) { ( ID : int var ID : int print ( false ) } func ID var ) { }",
  "func ID ( ID ] int , ID : [ : int ) { ( ID : int print ID : int var ( false ) } func ID var ) { }",
  "func ) ( ) : bool { call ID ( ( ID [ 123 > ID ] [ ID ] ) ID print ( - 123 ) }",
  "func ) ( ID : bool { call ID ( ( ID [ 123 > ) ] [ ID ] ) ID print ( - 123 ) }",
  "func ) ( ) : bool { call ID ( ( ID [ 123 > ) ] [ ID ] ) ID print ( - 123 ID }",
  "func ID ( ) { var ID : [ ] bool var ID : int { var ID : [ ] { print ( - - ID ) int } } }",
  "func ID ( ) { ID var : [ ] bool var ID : int { var ID : [ ] { print ( - - ID ) int } } }",
  "func ID ( ) { ID var : [ ] bool var ID : int var { ID : [ ] { print ( - - ID ) int } } }",
  "func ID ( ) : [ - - - - ( * ID / ( - - ( - - ID ) ) - - false ) ] int { } func ID ( ) { }",
  "func ID ( ) : [ - - - - ( * ID / ( - - ( - ID ID ) ) - - false ) ] int { } func - ( ) { }",
  "func ID ( ) : [ - - - - ( * ID / ( - - ( - ID ID ) ) - - false ) ] int { } func - ( ) { }",
  "func ID ( ID : [ ] int , ID : bool , ] : [ ] int ) : [ - ( ID ) ] [ ID [ ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ] ID , int : bool , ] : [ ] int ) : [ - ( ID ) ] [ ID [ ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ] ID , int : bool , ] : [ ] ID ) : [ - ( ID ) ] [ ID [ ] bool { } func int ( ) { }",
  "func ID ( ) { var ID : int if ( { * false / - true + ( - false ) ) { } } func ID ( ) 123 }",
  "func ID ( } { var ID : int if ( { * false / - true + ( - false ) ) { } } func ID ( ) 123 )",
  "func ID ( } : var ID { int if ( { * false / - true + ( - false ) ) { } } func ID ( ) 123 )",
  "func ID ( ) { var ID : [ ( ( - - true * false / - - ID ) ) ] ] [ [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( ( - - true [ false / - - ID ) ) ] ] [ * ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ( ( - - [ [ false / - - ID ) ) ] ] [ * ] true ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { var 123 : [ - ID / ( - ID ) ] int }",
  "func ID ( ID : int , { : bool , ID : int ) ID var 123 : [ - ID / ( - ID ) ] int }",
  "func ID ( ID : int , { : } , ID : int ) ID var 123 : [ - ID / ( - ID ) ] int bool",
  "func ID ( ) : bool { var ID : [ 123 * ( 123 - - true * ID * - ] ID - false ) ] [ ] [ ] [ ] [ - int }",
  "func ID ( ) : bool { var ID : [ [ * ( 123 - - true * ID * - ] ID - false ) ] 123 ] [ ] [ ] [ - int }",
  "func ID ) ) : bool { var ID : [ [ * ( 123 - - true * ID * - ] ID - false ( ] 123 ] [ ] [ ] [ - int }",
  "func ID ( ID : { ] int ) : int [ var ID : int if - ID [ - 123 ] { } } func ID ( ) { }",
  "func ID ( if : { ] int ) : int [ var ID : int ID - ID [ - 123 ] { } } func ID ( ) { }",
  "func ID ( if : { ] int ) : int [ var ID : - ID int ID [ - 123 ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID } int ID = true * ( ( ID ) ) * true while ( ( ( ( - ( ID ) ) ) ) ) { : }",
  "func ID ( ) { var ID : bool var ID } int ID ( true * ( ( ID ) ) * true while ( ( ( ( - = ID ) ) ) ) ) { : }",
  "func ID ( ) { var ID : bool var ID } int ID ( true * ( ( ID = ) * true while ( ( ( ( - ) ID ) ) ) ) ) { : }",
  "func ID ( ) : [ ] int { [ - - false - - ID [ false ] print ( ( ID ) ) ] ID = ID } func ID ( ) { }",
  "func ID ( ) : [ ] int { - - [ false - - ID [ false ] print ( ( ID ) ) ] ID = ID } func ID ( ) { }",
  "func ID ( ) : [ ] int { - - [ false - - ID [ = ] print ( ( ID ) ) ] ID false ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : [ ) [ ] [ false * false / ( false ) ] int { } func ID ( ] { }",
  "func ID ( ID : bool , ID : bool , ID } bool ) : [ ) [ ] [ false * false / ( false ) ] int { } func ID ( ] { :",
  "func : ( ID ID bool , ID : bool , ID } bool ) : [ ) [ ] [ false * false / ( false ) ] int { } func ID ( ] { :",
  "func ID ( bool : bool , ID : int , ID : int ) : ID { var ID : [ ] int var ID : [ ( ID ) ] bool } func ID ( ) { }",
  "] ID ( bool : bool , ID : int , ID : int ) : ID { var ID : [ ] int var ID : [ ( ID ) func bool } func ID ( ) { }",
  "bool ID ( bool : ] , ID : int , ID : int ) : ID { var ID : [ ] int var ID : [ ( ID ) func bool } func ID ( ) { }",
  "func ID ( ID : [ ID [ - ( false + ( ] 123 ) ) ) ] [ 123 ( ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ID [ - ( false + ( ] 123 ) ) ) ] [ ( 123 ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ) [ - ( false + ( ] 123 ) ID ) ] [ ( 123 ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var func : [ false + - - ( ( ( ID ) ) ) ] int } ID ID ( ) { }",
  "int ID ( ) : int { var ID : func var func : [ false + - - ( ( ( ID ) ) ) ] int } ID ID ( ) { }",
  "int ID ( ) : int { var ) : func var func : [ false + - - ( ( ( ID ) ) ) ] int } ID ID ( ID { }",
  "func ID ( ID : bool , ID : [ ] int , ID : [ ] [ ] [ ] bool ) { return - ( } false ) ) } func ID ( ) { (",
  "func ID ( ID : bool , ID : [ ] int , ID : [ ] [ ] ( ] bool ) { return - ( } false ) ) } func ID [ ) { (",
  "func ID ( ID : func , ID : [ ] int , ID : [ ] [ ] ( ] bool ) { return - ( } false ) ) } bool ID [ ) { (",
  "func ID ( ID : int , ID : bool , ) : bool ) { ID [ ID ( ) [ false ] ] [ ( - ( ( ( ID ) ) ) ) ] = - ID ID = - - ID } func ID ( ID { }",
  "- ID ( ID : int , ID : bool , ) : bool ) { ID [ ID ( ) [ false ] ] [ ( - ( ( ( ID ) ) ) ) ] = - ID ID = - func ID } func ID ( ID { }",
  "- ID ( ID : int , ID : bool , ) : bool ) { ID [ ID ( ) [ false ] ] [ ( - ( ( ( ID ) ) ) ) ] = - ID ID = - } ID func func ID ( ID { }",
  "func ID ( ID : int , ID : int ) { var ID : int ] [ ] [ call ID ( ) while ( ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { func ID : int ] [ ] [ call ID ( ) while ( ( ID ) ) { } } var ID ( ) { }",
  "func ID ( ID : int , ID : int ) [ func ID : int ] { ] [ call ID ( ) while ( ( ID ) ) { } } var ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID [ - ID ( ( ( - - ID ) ) ) ] ] [ ] } ] [ ] bool , ID : bool ) { [ func ID ( ) { }",
  "ID ID ( ID : bool , ID : [ ID [ - ID ( ( ( - - ID ) ) ) ] ] [ ] } ] [ ] bool , ID : bool ) { [ func func ( ) { }",
  "ID bool ( ID : bool , ID : [ ID [ - ID ( ( ( - - ID ) ) ) ] ] [ ] } ] [ ] ID , ID : bool ) { [ func func ( ) { }",
  "func ID ( ID : [ ) != ID / ID ( false * ( ID ) ) * ( - ( ID true ) ] bool ) { }",
  "func ID ( ID : ) [ != ID / ID ( false * ( ID ) ) * ( - ( ID true ) ] bool ) { }",
  "func ID ( ID : ) [ != ID / ID ( false * ( ID ) true * ( - ( ID ) ) ] bool ) { }",
  "func ID ( ( : [ ] [ ] [ true + ID [ ID [ - true ] [ ID ID ) ] ] [ ID ] ] bool ) { }",
  "func ID ( ( ID [ ] [ ] [ true + ID [ ID [ - true ] [ : ID ) ] ] [ ID ] ] bool ) { }",
  "[ ID ( ( ID func ] [ ] [ true + ID [ ID [ - true ] [ : ID ) ] ] [ ID ] ] bool ) { }",
  "func ID ( ) : [ ] int { var ID : bool var ID : bool print ( ( ID ) ) { ( } func ID } ) { }",
  "func ID ( ) : [ ] int { var ID : bool var } : bool print ( ( ID ) ) { ( } func ID } ) { ID",
  "func ID ( ID : int , ID : int , ID : int ) : bool { var ID : int var ID : bool } func ID ( ) { var ID : : var ID int [ ] [ ] bool }",
  "func ID ( ID : int , ID : int , ID ] int ) : bool { var ID : int var ID : bool } func ID ( ) { var ID : : var ID int [ ] [ : bool }",
  "func ID ( ID : int , ID : int , ID ] int ) : bool { var ID : int var ID var bool } func ID ( ) { var ID : : : ID int [ ] [ : bool }",
  "func ID : ) : int { var ID ( bool call ID ( 123 / - ( - ( 123 ) ) ) } func ID ( ) { }",
  "func ID : ) : int { var ID ( bool call ID ) 123 / - ( - ( 123 ) ( ) } func ID ( ) { }",
  "func ID : ) : int { var ID ( bool call ID ) 123 } - ( - ( 123 ) ( ) / func ID ( ) { }",
  "func ID ( ID : bool ) : bool { var ID : bool var ID : bool return false / true + ID ID } func - ( ) { }",
  "func ID ( ID : : ) : bool { var ID bool bool var ID : bool return false / true + ID ID } func - ( ) { }",
  "func ID ( ID : : ) : bool { - ID bool bool var ID : bool return false / true + ID ID } func var ( ) { }",
  "func ID ( ) { return } func ID ( ID : bool ) { var / : [ - false ID ( - - true ) / false ] [ ] int }",
  "func ID ( [ { return } func ID ( ID : bool ) { var / : ) - false ID ( - - true ) / false ] [ ] int }",
  "func ID ( [ { return } func ID ( ID : bool ) { var / : ) - false ( ID - - true ) / false ] [ ] int }",
  "func ID ( ) : int { while true } ID [ ( ID ) ] [ 123 ] + true { } - func ID ( ) { }",
  "func int ( ) : ID { while true } ID [ ( ID ) ] [ 123 ] + true { } - func ID ( ) { }",
  "func int ( ) : ID { ID true } ID [ ( while ) ] [ 123 ] + true { } - func ID ( ) { }",
  "func ID ( ) : [ { [ ID / - ID ( ID ( - 123 ) ) * - 123 ] int ] }",
  "func ID / ) : [ { [ ID ( - ID ( ID ( - 123 ) ) * - 123 ] int ] }",
  "func ID / ) : [ { [ ID ( - ID ( ID ( - ) 123 ) * - 123 ] int ] }",
  "func ID ( } { if ID ( ) + ( ( - ( - ( ID ) ) ) ) { } ) func ID ( ) { }",
  "func ID ( } { if ID ( ) + ( ( - ( - ( ID ) ) ) } { } ) func ID ( ) { )",
  "func ID ( } { if ID ( ) + ( ( - ( - ( ID ) ) ) ) { } } func ID ( ) { )",
  "func ID ( ) : int { var ID : int var ID : [ - ( ] 123 ) ) ] [ ( int }",
  "ID ID ( ) : int { var ID : int var func : [ - ( ] 123 ) ) ] [ ( int }",
  "ID ID { ) : int ( var ID : int var func : [ - ( ] 123 ) ) ] [ ( int }",
  "func ID ( ID : { 123 / ( ( false - - ID - ( ( true ) ) ) ) / ( - ID ) ] int ) { } func ID ( ) [ }",
  "func ID ( ID : { 123 / ( ( false - - ID - ( ( true ) ) ) ) / ( - ID ) ] int ) { ) func ID ( } [ }",
  "func ID ( ID : { 123 / ( ( false - - ID - ( ( true ) ) ) ) / ( - ID ) ] int ) { ) func ID ( } [ }",
  "func ID ( ) : [ false ] ( ID ( ) / ID * ID ) or int { }",
  "func ID ( ) : [ false ] ( ID ( ) / ID * ID ) or int { }",
  "func ID ( ) : [ false ] ( ID ( or / ID * ID ) ) int { }",
  "func ID ( ID : int if ID : bool , ID : int ) : bool { , - - - ID ( ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : int if ID : bool , ID : int ) : bool { , - } - ID ( ( ID ) ) { } } func ID ( ) { -",
  "func ID ( ID : int if ID : bool - ID : int ) : bool { , - } - ID ( ( ID ) ) { } } func ID ( ) { ,",
  ") ID ( ID : bool , ID : [ ID ( ( - true * ( false ) ) func ] int , ID : [ ] bool ) { } func ID ( ) { }",
  ") ID ( ID : bool , ID : [ ID ( ( - true * ( false ) ) func } int , ID : [ ] bool ) { ] func ID ( ) { }",
  ") ID ( ID : bool , ID : func ID ( ( - true * ( false ) ) [ } int , ID : [ ] bool ) { ] func ID ( ) { }",
  "func ID ( ) { ( ( ) = false / ( ( ( - ID ) ) ) / ( - 123 ) while ( - - ID ) { } } func ID ID ) { }",
  "func ID ( ) { ( ( ) = false / ( ( ( - ID ) ) ) / ( - 123 } while ( - - ID ) { } ) func ID ID ) { }",
  "func ID ( ) { = ( ) ( false / ( ( ( - ID ) ) ) / ( - 123 } while ( - - ID ) { } ) func ID ID ) { }",
  "func ID false ) : bool { var ID : [ ] [ ] bool call ID ( ) ID ( ) [ false ] [ ID ] = ( } func ID ( ) { }",
  "func ID false ) : bool { var ID : [ ] [ ] bool call ID ( ) ID ( ) [ false ] [ ID ] = ( } func ID } ) { (",
  "func ID false ) : bool { var ID : [ ] [ ] bool call ID ( ) ID ( ) [ false ] [ ID ] = ( } func ID } ) { (",
  "- ID ( ) { var ID : int } func ID ( ID : bool , ID : int ) { if func false { } call ID ( ) }",
  "- ID ( ) { var ID false int } func ID ( ID : bool , ID : int ) { if func : { } call ID ( ) }",
  "- ID ( ) { var ID false int } func ID ( ID : bool , ID : int ) { if func : { } ( ID call ) }",
  "func ID ( ID : bool , ID ( bool ) : [ true * 123 - : ( 123 ) ) ] int { }",
  "func ID ( 123 : bool , ID ( bool ) : [ true * 123 - : ( ID ) ) ] int { }",
  "func ID ( 123 : bool , : ( bool ) ID [ true * 123 - : ( ID ) ) ] int { }",
  "func ID ( ) : bool { var - : [ ] [ ( - ID ( ID false ) ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ( : bool { var - : [ ] [ ( - ID ( ID false ) ) ] int var ID : int } func ID ) ) { }",
  "func ID ( ( : bool { var - : [ ] [ ( - ID ( ID false ) ) ) int var ID : int } func ID ) ] { }",
  "func ID ( ) { var ID ) int } func ID ( ID : bool : { }",
  "func ID ( ) { var ID ) int } func ID ( } : bool : { ID",
  "func ID ( ) { var ID ) int } func ID ( } : bool : { ID",
  "func ID ( ) { var ID : bool var ID : int call ID ( ( ( 123 ( ) ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool ) ID : int call ID ( ( ( 123 ( var ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool ) ID : int call ID ( ( } 123 ( var ) ) ) } func ID ( ) { (",
  "- ID ( ) : bool { var ID : int var ID : int print 123 + ID [ ( func ID ) ] - ID while true { } }",
  "- ID ( ) : bool { print ID : int var ID : int var 123 + ID [ ( func ID ) ] - ID while true { } }",
  "func ID ( ) : var ID { [ ] bool var ID : int } func ID ( ) : bool { print true }",
  "func ID ( ) : var ID { [ ] bool } ID : int var func ID ( ) : bool { print true }",
  "func ID ( ) : var ID { [ ] bool } ID : int var func ID ( ) : bool { print true }",
  "func ID ( ID : int , ID : [ ] int ) : int { var ID : [ ] bool print ID + ( ( - true ) ) - ( ( - ID ) ) } func { ( ) ID }",
  "func : ( ID : int , ID : [ ] int ) : int { var ID ID [ ] bool print ID + ( ( - true ) ) - ( ( - ID ) ) } func { ( ) ID }",
  "func : ( ID : int , ID { [ ] int ) : int { var ID ID [ ] bool print ID + ( ( - true ) ) - ( ( - ID ) ) } func : ( ) ID }",
  "func ID ( ) : [ 123 ] - true / ID ( ) [ - false - ID ] * ID - int { } func ID ( ) { }",
  "func ID ( ) : [ - ] - true / ID ( ) [ - false - ID ] * ID 123 int { } func ID ( ) { }",
  "func ID ( ) : [ - ] - true / ID ( ) [ - false - ID ] * { 123 int ID } func ID ( ) { }",
  "func ID ( ) : [ ] [ - ( - ( true / ID ( ) ) ) ] [ ] int } {",
  "func ID ( ) : [ ( [ - ] - ( true / ID ( ) ) ) ] [ ] int } {",
  "func ID ( ) : [ ( [ - ] - ( true / int ( ) ) ) ] [ ] ID } {",
  "func ID ( ID : [ ( false + false ( ) [ ID * ID / - ( - ID ) ] - ID ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ( false bool false ( ) [ ID * ID / - ( - ID ) ] - ID ) ] + ) { } func ID ( ) { }",
  "func ID ( ID : [ ( ) bool false ( false [ ID * ID / - ( - ID ) ] - ID ) ] + ) { } func ID ( ) { }",
  "func ID ( ) : [ ] int ID var ID : [ ] [ ] [ - ( ( ( - - - { ) ) ) ] bool var ID : bool }",
  "func ID bool ) : [ ] int ID var ID : [ ] [ ] [ - ( ( ( - - - { ) ) ) ] bool var ID : ( }",
  "func ID ( ) : int { var ID : bool print / [ - ( false * ID ID ( ( false ) ) ) ] [ 123 ] ID = ID }",
  "func ID ( ) : int { var ID : bool print / [ - ( false * ID ID false ( ( ) ) ) ] [ 123 ] ID = ID }",
  "func ID ( ) : int { var ID : bool print / [ ) ( false * ID ID false ( ( - ) ) ] [ 123 ] ID = ID }",
  "func ID ( ID : int , ID : int , ID : bool ) { bool : if ( 123 / - ( ID ) ) { } { } } func ID ( ) { }",
  "func ID ( ID } int , ID : int , ID : bool ) { bool : if ( 123 / - ( ID ) ) { : { } } func ID ( ) { }",
  "func ID ( ID } ( , ID : int , ID : bool ) { bool : if ( 123 / - ( ID ) ) { : { } } func ID int ) { }",
  "func ID ( ) : [ ( false - - ID ( ) / - * ID ( ) ) ] bool { } func ID ( ) { }",
  ") ID ( ) : [ ( false - - ID ( ) / - * ID ( func ) ] bool { } func ID ( ) { }",
  ") ID ( ) : [ ( false - - ID ( ) / - * ID ( func ) ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ID false * - ( ( - 123 ) ) * ( ID ) ) ] bool ) { } func ( ( ) { }",
  "func ID : ID ( [ ID false * - ( ( - 123 ) ) * ( ID ) ) ] bool ) { } func ( ( ) { }",
  "func ID : ID ( [ ID false * - ( ( - 123 ) ) * ( ID ) ) ] bool ) { } func ( ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int bool { var ID : ) var ID : int ID ( - ( ID ) ) = 123 }",
  "func ID ( ID : int , ID : bool , ID : int bool ) var ID : ) var ID : int ID ( - ( ID ) { = 123 }",
  "func ID ID ( : int , ID : bool , ID : int bool ) var ID : ) var ID : int ID ( - ( ID ) { = 123 }",
  "func [ ( ID : int , ID : [ ( true - - - ( ID ) + false ) ] ID ] bool ) { }",
  "func [ ( ID : int , ID : [ ( true - - - ( ID ) + { ) ] ID ] bool ) false }",
  "func ID ( ) var bool { var ID : bool : ID : [ - - ID ( ) [ ID ] [ - true ] ] int }",
  "func ID ( ) var bool { var ID : bool : ID : [ - - ID [ ) [ ID ] ( - true ] ] int }",
  "func ID ( ) : bool ) var ID : bool var ID : int call ID ( { } func ID ( ) { if 123 { } }",
  "func ) ( ) : bool ID var ID : bool var ID : int call ID ( { } func ID ( ) { if 123 { } }",
  "func ) ( ) : bool ID var ID : bool var ID : } call ID ( { } func ID ( ) { if 123 { } int",
  "func ID ( ID : bool , , : int ID ID : int ) : bool { var ID : bool call ID ( ) }",
  "func ( ID ID : bool , , : int ID ID : int ) : bool { var ID : bool call ID ( ) }",
  "func ( ID ID : : , , : int ID ID : int ) : bool { var ID bool bool call ID ( ) }",
  "func ID ( ) : int { var ID : int var ID : [ ( false / - ( - ( ID ) ) / true ) ] [ } [ ] bool ] func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : [ ( false / - ( - } ID ) ) / true ) ] [ ( [ ] bool ] func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : [ ) false / - ( - } ID ) ) / true ) ] [ ( [ ] bool ] func ID ( ( { }",
  "var ID ( ID : bool ) { func ID : bool return }",
  "var ID ( ID : bool ) { ID func : bool return }",
  "func ID ( ID : [ ) [ ( ( ( - - ID ) ) ID ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ) [ ( ID ( - - ID ) ) ID ] ] [ ] bool ) { } func ( ( ) { }",
  ": ID ( ID func [ ) [ ( ID ( - - ID ) ) ID ] ] [ ] bool ) { } func ( ( ) { }",
  "func ID ( ID : [ ] int , ID : bool ) { var ID : int var ID : [ ID - ( ID ) ID + ] int } func ID ( ) { }",
  "func ID ( ] : [ ID int , ID : bool ) { var ID : int var ID : [ ID - ( ID ) ID + ] int } func ID ( ) { }",
  "func ID ( ] ) [ ID int , ID : bool ) { var ID : int var ID : [ ID - ( ID : ID + ] int } func ID ( ) { }",
  "func ID ( ) { ID [ true * ) 123 * - ID ( ( ) ] [ ID ] = ID } func ID ( ) { }",
  "} ID ( ) { ID [ true * ) 123 * - ID ( ( ) ] [ ID ] = ID func func ID ( ) { }",
  "} ID ( ) { ID [ true * - 123 * ) ID ( ( ) ] [ ID ] = ID func func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : : ) : int { var ID int [ ] [ ] int if - - ID { } }",
  "func ID ( ID : [ ] int , ID : : ) : int { var ID int ] ] [ [ int if - - ID { } }",
  "func ID ( ID : [ ] int , ID int : ) : int { var ID int ] ] [ [ : if - - ID { } }",
  "func } ( ) { var ID : bool if - true * ( - ID ( 123 ) ) { } while false { } ID",
  "func } ( ) { var ID : bool if ) true * ( - ID ( 123 - ) { } while false { } ID",
  "func } ( ) { var ID : * if ) true bool ( - ID ( 123 - ) { } while false { } ID",
  "false ID ( ID : [ func and ID * ( - true - - ID ) and ID ] [ ] int ) { }",
  "false ID ( ID : [ func and ID * ( - true - - ID ) and ID ] [ ] int ) { }",
  "false ID ( ID : [ func and ID * ( - true ] - ID ) and ID - [ ] int ) { }",
  "func ID ( ID : int , ID : - ) { call ID ( ) return ID ( ) [ ( int - ID ) ] }",
  ") ID ( ID : int , ID : - ) { call ID ( ) return ID ( ) [ ( int - ID func ] }",
  ") ID ( ID { int , ID : - ) : call ID ( ) return ID ( ) [ ( int - ID func ] }",
  "func ID ( ) : [ ( ( * true ) - ID [ ( - ( 123 ( 123 ) ) ) ) ] [ true ] ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : [ ( ( * true ) - ID [ ( - ( 123 ( 123 ) ) ) ) ] [ true ] ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : [ ( ( * true ) - ID [ ( ) ( 123 ( 123 ) ) ) ) ] [ true ] ] [ ] int { } func ID ( - { }",
  "func ID ( ) : bool { var ID : int var ID : int return } func bool ( ID : [ ] [ true ] ID ) { }",
  "func ID ( ) : bool { var ) : int var ID : int return } func bool ( ID : [ ] [ true ] ID ID { }",
  "func ID ( ) : bool { var ) : int var ] : int return } func bool ( ID : [ ID [ true ] ID ID { }",
  "func ID 123 ID : [ false * ( ( ( * ID ( ) [ ( ( ID ) ) ] [ - ( 123 ) ] ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID 123 ID : [ false * ( ( ( * ID ( ) [ ( ( ID ) ) ] [ - ( 123 ) ] ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID 123 ID : [ ] * ( ( ( * ID ( ) [ ( ( ID ) ) ] [ - ( 123 ) ] ) ) false [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : ID ) : int { return ( ( ID ( ) [ ID ] [ - ID ] ) ) } func int ( ) { }",
  "func ID ( { : ID ) : int ID return ( ( ID ( ) [ ID ] [ - ID ] ) ) } func int ( ) { }",
  "func ID ( { : ID ) : ] ID return ( ( ID ( ) [ ID int [ - ID ] ) ) } func int ( ) { }",
  "func ID ( ) { call ID ( 123 * ( 123 * ID } 123 ) / - ( ID ) ) ) while ( ( 123 ) ) { } } func ID ( ) { (",
  "func ID ( ) { call ID ( 123 * ( 123 * ID } 123 ) / func ( ID ) ) ) while ( ( 123 ) ) { } } - ID ( ) { (",
  "func ID ( ) ( var ID : [ ( true * ID { ) or - ( ( ID ) ) ) ] int }",
  "func ( ( ) ( var ID : [ ID true * ID { ) or - ( ( ID ) ) ) ] int }",
  "func ID ( ID : bool , ID : bool , ID : int ) { ( ID : [ ID ( ( var true ) ) ) ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ] { ( ID : [ ID ( ( var true ) ) ) ] [ ] [ ) int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ] ) ( ID : [ ID ( ( var true ) ) ) ] [ ] [ ) int } func ID ( { { }",
  "func ID ( ) : [ ( ID ( ) func ( - ( false ) ) ] ) ] bool { } [ ID ( ) { }",
  "func ID ( ) : [ ( ID ( ) func ( - ( false ) ) ] ) ] bool { } [ ID ( ) { }",
  "func ID ( ) : [ ( ID ( ) func ( false ( - ) ) ] ) ] bool { } [ ID ( ) { }",
  "func ID ( ID : [ ID false - ID ( [ / false + ID - - - ( - ( 123 ) ) ) ] ] int ) { } func ID ( ) { }",
  "[ ID ( ID : [ ID false - ID ( func / false + ID - - - ( - ( 123 ) ) ) ] ] int ) { } func ID ( ) { }",
  "func ID ( ) ) [ ( - ID ( - ( - ( false ) ) : ) ] bool { }",
  "func ID ( ) ) [ ( - ID ( : ( - ( false ) ) - ) ] bool { }",
  "func ID ( ) ) [ ( - ID ( : ( - ( false ) ) - ) ] bool { }",
  ": ID ( ) { var ID func int return - ( ( - ( - false ) ) ) }",
  ": ID ( ) { var ID func int return ( - ( - ( - false ) ) ) }",
  ": ID ( ) { var ID - int return ( - ( func ( - false ) ) ) }",
  "func ID ( ) { var ID : [ ID ( 123 - - - - func true ) ) ] bool } ( ID ( ) { }",
  "func ID ( ) { var ID : [ ID ( 123 - ) - - func true ) - ] bool } ( ID ( ) { }",
  "func ID ( ) { var : ID [ ID ( 123 - ) - - func true ) - ] bool } ( ID ( ) { }",
  "func ID ( ID : - ) { if 123 / ( ( 123 and ( ( ID ) ) and - false ) ) { } ID = int - true } func ID ( ) { }",
  "func ID ( ID : - ) { if 123 / ( ( ID and ( ( ID ) ) and - false ) ) { } ID = int - true } func 123 ( ) { }",
  "func ID ( ID : - ) { if 123 / ( ( ID and ( ( ID ) ) and - false ) ) { } ID = int - true } func 123 ( ) { }",
  ": ID ( ID : int , ID : bool , ID : bool ) : [ ] bool { var ID func [ ] bool return } func ID ( ID : [ ] int ) { }",
  ": ID ( ID : int , ID : bool , ID : bool ) : [ ] bool { var ID func [ ] bool } return func ID ( ID : [ ] int ) { }",
  ": ID ( ID : int , ID : bool , ID : bool ( : [ ] bool { var ID func [ ] bool } return func ID ) ID : [ ] int ) { }",
  "ID ID ( ) : bool { while ID ( ) [ func [ - 123 ] [ ID ] ] { } }",
  "ID ID ( ) : bool { while ID ( ) [ func [ - } ] [ ID ] ] { 123 }",
  "ID ID ( ) : bool ID while { ( ) [ func [ - } ] [ ID ] ] { 123 }",
  "func ID ( ) : bool { ID ( ( - ID true false * - ID ) ) = - - false print true }",
  "func ID ( ) : bool { true ( ( - ID true false * - ID ) ) = - - false print ID }",
  "func ID ( ) : bool { true ( ID - ID true false * - ID ) ) = - - false print ( }",
  "func ID ( ID : int ) { var ID : [ ] ) true - ( ( - - ID [ ) ] [ ] bool }",
  "func ID ( ID : int ) { var ID : [ ] ) [ - ( ( - - ID [ ) ] true ] bool }",
  "func ID ( ID : int ) { var ID : [ ] ) ) - ( ( - - ID [ [ ] true ] bool }",
  "func ID ( ID : int ) { ID ID : int var var : int while - ID ( ) [ ID ] { } }",
  "func ID ( ID : int ) { ID ID : int var var : [ while - ID ( ) int ID ] { } }",
  "func ID ( ) { var ID : [ ID ( true * true < false - ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ID { var ) : [ ID ( true * true < false - ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ID { false ) : [ ID ( true * true < var - ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { } func ID ID ( : bool ) : [ ( ID ( ) [ ( ( ID ) ) ] ) ] int { }",
  "func ID ( int { } func ID ID ( : bool ) : [ ( ID ( ) [ ( ( ID ) ) ] ) ] ) { }",
  "func ID ( int { } func ID ID : ( bool ) : [ ( ID ( ) [ ( ( ID ) ) ] ) ] ) { }",
  "func ID ( ID ID bool , ID : [ 123 + false / ( ID [ - - false ] ) ] [ ] bool , : : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID ID bool , ID : [ 123 ID false / ( + [ - - false ] ) ] [ ] bool , : : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID ID bool , ID : [ 123 ID false / ] + [ - - false ] ) ] [ ] bool , : : [ ( int ) { } func ID ( ) { }",
  "func ID ( ID : int ) : 123 ] bool { while - [ >= 123 / ID [ ID ] { } print ( false ) }",
  "func ID ( ID : int ) : 123 ] bool { while - [ >= 123 / ID [ ID } { } print ( false ) ]",
  "func ID / ID : int ) : 123 ] bool { while - [ >= 123 ( ID [ ID } { } print ( false ) ]",
  "func ID ( ) : int { var ID : int var ID : bool while - ( ID [ ( - - - 123 ) ( [ ( ] true ) ) ] ) { } { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : bool while - ( ID [ ( - - - 123 ) ( [ ( ] true ) ) ] ) { } { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : bool while - ( ID [ ( - - - 123 ) ( [ ( ] true ) ) ] ) { } ) } } func ID ( { { }",
  "func ID ( ID : int , ID : int ) ID : [ false + ( true * ( ( ( ID ) ) ) * ( ID , ) ] bool ) { }",
  "func ID ( ID : int , ID : int ( ID : [ false + ) true * ( ( ( ID ) ) ) * ( ID , ) ] bool ) { }",
  "func ID ( ID : int , ID : int ID ( : [ false + ) true * ( ( ( ID ) ) ) * ( ID , ) ] bool ) { }",
  "func ID ( ID : int ) { var ID : int if true / ID ( ) [ ( - - - - false ) ] [ { ] * ID { } print ID } func ID ( ) ID }",
  "func ID ( ID : int ) { var ( : int if true / ID ( ) [ ID - - - - false ) ] [ { ] * ID { } print ID } func ID ( ) ID }",
  "func ID ( ID : ID ) { var ( : int if true / ID ( ) [ int - - - - false ) ] [ { ] * ID { } print ID } func ID ( ) ID }",
  "func ID ( ID : bool , ID ID int , : : [ - ( - ID ( ID ) ) ] int ) { }",
  "func ID ( ID ) bool , ID ID int , : : [ - ( - ID ( ID ) ) ] int : { }",
  "func ID ID ID ) bool , ( ID int , : : [ - ( - ID ( ID ) ) ] int : { }",
  "func ID ID ID : [ ] int , ID : bool , ID : bool ) { var ( : int var ID : int return true / false }",
  "func ID ID : ID [ ] int , ID : bool , ID : bool ) { var ( : int var ID : int return true / false }",
  "func ID ID : ID [ ] int , ID : bool , ID : bool ) { var ( : int return ID : int var true / false }",
  "func ID ( - { var ID : [ ] [ ) ( ID ( - ( ( ID ) ) ) ) ] bool var ID : int }",
  "func ID ( - { var ID : [ ] [ ) ( ID ID - ( ( ( ) ) ) ) ] bool var ID : int }",
  "func ID ( - [ var ID : [ ] { ) ( ID ID - ( ( ( ) ) ) ) ] bool var ID : int }",
  "func ID ( ) : int { return ( ID / ( false == - false ) * ID ) } func ID ( { ) }",
  "func ID ( ) : int { return ( ID / ( false - == false ) * ID ) } func ID ( { ) }",
  "* ID ( ) : int { return ( ID / ( false - == false ) func ID ) } func ID ( { ) }",
  "func ID ( ) : int + var ID : int print ID ( 123 * 123 { ID ) } func ID ( ) { }",
  "func ID ( ) : int + var ID : int print ID ( 123 * 123 { ID ) } func ID ( ) { }",
  "func ID ( ) : int + var ID : int ID print ( 123 * 123 { ID ) } func ID ( ) { }",
  "func ID ( ID : [ - ( 123 / ID ( ) [ ID ( ) ] [ 123 ] / ( } ) ) ] int ) { ID",
  "func ID ( ID : [ - ( 123 ) ID ( / [ ID ( ) ] [ 123 ] / ( } ) ) ] int ) { ID",
  "func ID ( ) { var ID ( [ ] int var ID : bool return } func ID : ID : bool ) { var ID : bool var ID : [ ] [ ] bool }",
  "func ID ( ) { bool ID ( [ ] int var ID : var return } func ID : ID : bool ) { var ID : bool var ID : [ ] [ ] bool }",
  "func ID ( ) { bool ID ( [ ] int var ID : var ID } func ID : ID : bool ) { var return : bool var ID : [ ] [ ] bool }",
  "func } ( ID : int , ID : int ) : [ ( 123 / ID ( ) - ( 123 ) ) ] int { } func ID ( ) { ID",
  "func } ( ID : int / ID : int ) : [ ( 123 , ID ( ) - ( 123 ) ) ] int { } func ID ( ) { ID",
  "func } ( ID : ID / ID : int ) : [ ( 123 , ID ( ) - ( 123 ) ) ] int { } func ID ( ) { int",
  "func ID ( ID : [ ] int ) { var ID : int var ID : bool print - ID [ - false ] [ true ] ID = func ( ID ) ) } ( ID ( ) { }",
  "func ID ( ID : [ ] int ) { var ID ID int var ID : bool print - ID [ - false ] [ true ] ID = func ( ID ) ) } ( : ( ) { }",
  "func ID ( ID : [ ] int ) { var ID ID int var ID true bool print - ID [ - false ] [ : ] ID = func ( ID ) ) } ( : ( ) { }",
  "func ID - ID : [ ] int , ID : int ) : bool { return ( - ID [ false ] [ 123 ] }",
  "func ID - : ID [ ] int , ID : int ) : bool { return ( - ID [ false ] [ 123 ] }",
  "func ID - : ID [ ] int false ID : int ) : bool { return ( - ID [ , ] [ 123 ] }",
  "func ID ( ID : bool , ID : int , ID : bool ) { return ] func ID ( ID : bool , ID : bool ) : int { var ID : [ ] [ ] [ } bool }",
  "func ID ( ID : bool , ID : int , ID : bool ) { return ] func ID ( ID : bool , ID : bool ) : int { var ID : [ ] [ ] [ } bool }",
  "func ID ( ID : bool , ID [ int , ID : bool ) { return ] func ID ( ID : bool , ID : bool ) : int { var ID : : ] [ ] [ } bool }",
  "func ID ( ID : bool ) : [ true == ID [ ( ID ) ] [ - } false ] ] [ ] int { } func ID ( ) { -",
  "func ID ( ID : bool ) : [ } == ID [ ( ID ) ] [ - } false ] ] [ ] int { true func ID ( ) { -",
  "func ID ( ID : bool ) : [ } == ID [ ID ( ) ] [ - } false ] ] [ ] int { true func ID ( ) { -",
  "func ID ( ID : int ) - var ID : int if - - { ( ID ( ID ) ) { } }",
  "func ID ( ID : int ) - var ID : int if ) - { ( ID ( ID ) - { } }",
  "func ID ( ID : } ) - var ID : int if ) - { ( ID ( ID ) - { int }",
  "func ID ( ID : [ ] bool , ID : bool ) : int ID return } func { ( ) : bool { call ID ( ) }",
  "func ID ( ID : [ ] bool , ID : bool ) : int ID return } func { ( ) : bool { } ID ( ) call",
  "func ID ( ID : [ ] bool : ID : bool ) : int ID return } func { ( ) , bool { } ID ( ) call",
  "func ID ( ) : : { var ID bool bool var ID : int print ( ID [ - - - false ] [ false ] ) } func ID ( ) { }",
  "func ID ( ID : : { var ) bool bool var ID : int print ( ID [ - - - false ] [ false ] ) } func ID ( ) { }",
  "func ID ( [ : : { var ) bool bool var ID : int print ( ID [ - - - false ] ID false ] ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool { var ID : int var ID : bool if 123 } ( - ID ) * true { } * }",
  "func ID ) ) { var ID : bool { var ID : int var ID : bool if 123 } ( - ID ( * true { } * }",
  "func ID ) ) { var ID : bool { var ID } int var ID : bool if 123 : ( - ID ( * true { } * }",
  "func ID ( ) { int { var ID : [ ID [ ID [ false ] [ ID ] ] ] int var ID : int } func ID ( ) : }",
  "func ID ( ) { int { var ID : func ID [ ID [ false ] [ ID ] ] ] int var ID : int } [ ID ( ) : }",
  "func ID ( ) [ int { var ID : func ID [ ID { false ] [ ID ] ] ] int var ID : int } [ ID ( ) : }",
  "func ID ( ID : bool , ] : bool ) : [ ID bool { while ( - - - false ) { } if ( ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ] : bool ) : [ ID bool { while ( - - false - ) { } if ( ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ] : bool ) : [ ID bool { ) ( - - false - ) { } if ( ( ID while ) { } } func ID ( ) { }",
  "func ID ( ) { { print [ + ID 123 false * ( 123 ) ] { } } ID = ID } func ID ( ) { }",
  "func ID ( ) { { print ) + ID 123 false * ( 123 [ ] { } } ID = ID } func ID ( ) { }",
  "func ID ( ) { { print false + ID 123 ) * ( 123 [ ] { } } ID = ID } func ID ( ) { }",
  "func ID ( ] : [ ID [ ( ( false != false ) ) ID ] int ) { }",
  "func ID : ] ( [ ID [ ( ( false != false ) ) ID ] int ) { }",
  "func ID : false ( [ ID [ ( ( false != ] ) ) ID ] int ) { }",
  "func ID ( { : int ) ID var ID : int print ( ID - ID ( ) ) } func ID ( ) { }",
  "func ID ( { : int ) ID var ID : int print ( ID } ID ( ) ) } func ID ( ) { -",
  "func ID ( { : int ) ID var ID : int print ( ID } ID ( ) ) } func ID ( ) { -",
  "func ID ( ) { var ID : int var ID : int if ( - - true * ID ) { } { func } } ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int if ( } - true * ID ) { - { func } } ID ( ) { }",
  "func ID ( ) { var ID : int { ID : int if ( } - true * ID ) { - { func } } ID ( ) var }",
  "func ID ( ) : [ ] int { var ID : [ - ID - ( - - ( ( ) ) + ( ( - 123 - true ) ) ) ] int var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) : [ ] int { + ID : [ - ID - ( - - ( ( ) ) var ( ( - 123 - true ) ) ) ] int var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) : [ ] int { + ID : [ - ID - ( - - ( ( ) ) var ( ( - 123 - [ ) ) ) ] int var ID : true ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - 123 * ) false / ( ( ID ) ( / ID ) ] int , ID : [ ] [ ] int ) { }",
  "func ID ( ID : bool , ID : [ - 123 * ) false / ( ( ID ) ( / ID ) ] int , ID : [ ] [ ] int ) { }",
  "func ID ( ID : bool , ID : [ - , * ) false / ( ( ID ) ( / ID ) ] int 123 ID : [ ] [ ] int ) { }",
  "func ID ( ) : int { var ID : [ ID int ] = ( ID / ID / ID ) } func ID ( ) { }",
  "func ID ( ) : int { [ ID : var ID int ] = ( ID / ID / ID ) } func ID ( ) { }",
  "func ID ( ) : int { ] ID : var ID int [ = ( ID / ID / ID ) } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : int ) : int { var ID : [ ID ( ) [ - { ID ] ] int } func ID ( ) - }",
  "func ID ( ID : [ ] int , ID : int ) : int { var ID : [ ID ( ) [ - { ID ( ] int } func ID ] ) - }",
  "func ID ( ID : [ ] int , ID : int ) : int { var ID : [ ID ( ) [ - { ID ( ] int } func } ] ) - ID",
  "func ID ( ) { print 123 * ( ID / - - ( ( - ( false ) ) ) ) } } ID ( ) { func",
  "func ID ( ) { - 123 * ( ID / print - ( ( - ( false ) ) ) ) } } ID ( ) { func",
  "func ID ( ) { - 123 * ( ID / print - ( ( - ( false ) ) ) ) } } ID ( ) { func",
  "func ID ( ) { var ID : [ ( - - ( - ( ID ) ) ) } bool var ID : [ ] int } func ID ( ) { ]",
  "func ID ( ) { var ID : [ ( - - ( int ( ID ) ) ) } bool var ID : [ ] - } func ID ( ) { ]",
  "func ID ( ) { - ID : [ ( - - ( int ( ID ) ) ) } bool var ID : [ ] var } func ID ( ) { ]",
  "func ID ID ID : [ ] bool , ( : [ ( ( ( - true ) ) ) ] [ ] int , ID : bool ) { }",
  "func ID ID ID : [ ] bool , ( : [ ( ( ( - true } ) ) ] [ ] int , ID : bool ) { )",
  "func ID ID ID : [ ] bool , ( : [ ( ( bool - true } ) ) ] [ ] int , ID : ( ) { )",
  "func ID ( ) : bool { var ID ID int ID ( : ( ) [ ( ID ) ] [ - 123 ] ) = ( true ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID ID int ID ( : ( ) [ ( = ) ] [ - 123 ] ) ID ( true ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID ID int ID ( : ( ) [ ( = ) ] [ - 123 ] ) ID ( true ) } func ID ( ) { }",
  "func ID ( } : bool { var ID : bool if true + - ( ID ( ) ) - ( ID ) { } } func ID ( ) { )",
  "func ID ( } : bool { ) ID : bool if true + - ( ID ( ) ) - ( ID var { } } func ID ( ) { )",
  "func ID ( } : bool { ) ID : ( if true + - ( ID ( ) ) - ( ID var { } } func ID bool ) { )",
  "func ID ( ) { } func ID ( ) : bool { ID ID : [ ] bool var ID : int while var { } }",
  "func ID ( ) { } : ID ( ) func bool { ID ID : [ ] bool var ID : int while var { } }",
  "] ID ( ) { } : ID ( ) func bool { ID ID : [ func bool var ID : int while var { } }",
  "} ID ( ) : [ ] int { var ID : int var ID : bool { { var ID : [ ] bool var ID : [ ] bool func if - ( ID ) { } } if - ( false ) { } }",
  "} ID ( ) : [ ] int { var ID : int var ID : bool { { var ID : [ ] bool var ID : - ] bool func if [ ( ID ) { } } if - ( false ) { } }",
  "} ID ( ) ) [ ] int { var ID : int var ID : bool { { var ID : [ ] bool var ID : - ] bool func if [ ( ID : { } } if - ( false ) { } }",
  "func ID [ ID : bool , ID : bool , ID : [ ] int ) { var ID : int var ID : int { var ID : ( ] bool var ID : int } { } } func ID ( ) { }",
  "func ID [ ID : bool , ID : bool int ID : [ ] , ) { var ID : int var ID : int { var ID : ( ] bool var ID : int } { } } func ID ( ) { }",
  "func ID [ ID : bool , ID : bool int ID : [ ] , ) { var } : int var ID : int { var ID : ( ] bool var ID : int ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : ] ] [ [ int }",
  "func ID ( ) { var ] : ] ID [ [ int }",
  "func [ ( ) { var ] : ] ID ID [ int }",
  "func ID ( / { var ID : int print ID ) ( - - ( - ID ) ) / ( ( true ) ) } func ID ( ) { }",
  "func ID ( / { : ID var int print ID ) ( - - ( - ID ) ) / ( ( true ) ) } func ID ( ) { }",
  "func ID ( / { : ID var int print ID ) ( - - ) - ID ) ( / ( ( true ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool { ID true * ID ( ID ) { } } while ID { } } func if ( ) { }",
  "func ID ( ) { var ID : int var ID } bool { ID true * ID ( ID ) { } : while ID { } } func if ( ) { }",
  "func ID ( ) { var ID : int var { } bool { ID true * ID ( ID ) ID } : while ID { } } func if ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] bool false if - false + ( 123 ) - ( { ) { } print true } }",
  "func ID ( ] { var ID : [ ) [ ] bool false if - false + ( 123 ) - ( { ) { } print true } }",
  "func ID ( ] { var ID : [ ) false ] bool false if - [ + ( 123 ) - ( { ) { } print true } }",
  "func ID ( ID : bool , ID : int , ID : int return { call ID ( ) ) }",
  "func ID ( ID : bool , ID : int , ID : int return { call ID ( ) ) }",
  "( ID ( ID : bool , ID : int , ID : int return { call ID func ) ) }",
  "func ID ( ID ) bool , ID : [ 123 / - ID [ - ( - ID : ] / - true ] bool , ID : int ) { }",
  "func ID ( ID ) bool , ID : [ 123 / - ID [ - ( - ID : ] / - true ] bool , ID : int ) { }",
  "func ID ( ID ) bool , ID : [ 123 / - ID [ - ( - ID ] ] / - true : bool , ID : int ) { }",
  "func ID ( ) { ID ID : [ ] [ ] [ - var [ true and ( - ( - 123 ) ) and - 123 ] ] bool } func ID ( ) { }",
  "func ID ( ) { ID ID : [ ] [ ] ) - var [ true and ( - ( - 123 ) ) and - 123 ] ] bool } func ID ( [ { }",
  "func ID ( ) { ID ID : [ ] [ ] ) - var { true and ( - ( - 123 ) ) and - 123 ] ] bool } func ID ( [ [ }",
  "func ID ( ) : int { var ID : [ ] int var ID : bool true ID ( ) [ true ] [ while ] { } } func ID ( ) { }",
  "func ID ( ) : int { var ID ) [ ] int var ID : bool true ID ( ) [ true ] [ while ] { } } func ID ( : { }",
  "func ID ( ) : int { var ID ) [ ] int var ID : bool true ID ( ) [ true ] [ while ] { ( } func ID } : { }",
  "func ID ( ) { var ID : bool var ID : [ false * false * 123 < - 123 * - ] ID ) * ID ] [ ( [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ false * false * 123 < - 123 * - ] ID ) * ID ] [ ( [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : [ false * false * 123 < ( 123 * - ] ID ) * ID ] [ ( [ ] int } func ID - ) { }",
  "func ID ] ID : int , ID : [ ] [ ] [ - ( false / ( false ) / true ) ] [ ( bool , ID : bool ) { }",
  "func ID ] ( : int , ID : [ ] [ ] [ - ( false / ( false ) / true ) ] [ ID bool , ID : bool ) { }",
  "func ID ( ) - while - ID ( ) [ ID ( ) / - 123 + 123 - ( ( false ) ) ] { } while { false { } } func ID ( ) { }",
  "func ID ( ) - while - ID ( ) [ ID ( ) / - 123 + 123 - ( ( false ) ) ] { } while { false { } } func ID ( ) { }",
  "func ID ( ) - while - ID ( ) [ ID ( ) / - } + 123 - ( ( false ) ) ] { } while { false { } } func ID ( ) { 123",
  "func ID ( ) { var ID : int while ( - false + false / func ( ID ) ) ) { } if false { } } ( ID ( ) { }",
  "func ID ( ) { var ID : int while ( - false + false / func ( { ) ) ) ID } if false { } } ( ID ( ) { }",
  "func ID ( ) { var ID : int while ( - false + false / func ( { ) ) ) ID } if false { } } ( ID ( ) { }",
  "func ID ( ) { var [ : [ ID ( ( ID ID ( ID ) ] ) ) ] int } func ID ( ) { }",
  "func ID ( ) { var [ : [ ID ( ( ID ID ( ID ) ] ) ) ] int } func ID ( ) { }",
  "func ID ( ) { var [ : [ ID ( ( ID ID ( ID ) ] ) ) ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ < true ( - false - true ) ] [ ] bool }",
  "func ID ( - : int { var ID : [ < true ( ) false - true ) ] [ ] bool }",
  "func ID ( - : int { var ID : [ < true ( true false - ) ) ] [ ] bool }",
  "func ID ( ID : [ ] ] - ( - 123 + ID [ - ID ] ) [ [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] ] - ( - 123 + ID [ - ID ] ) [ [ ] int } { } func ID ( ) { )",
  "func ID ( ID : [ ] ] - ( - 123 + ] [ - ID ] ) [ [ ID int } { } func ID ( ) { )",
  "func ID ( ID : bool [ : [ ] ) ( - 123 - true * - ID * 123 - - ID ) ] [ ] int { }",
  "func ID ( ID : bool [ : [ ] ) ( - 123 - true * - ID * 123 - - ID ) ] } ] int { [",
  "func ID ( ID : bool [ : [ ] ) ( - 123 - true * - ID * 123 - - ID ) ] } ] int { [",
  "func ID ( ID : bool [ ID : bool , ID : [ ] bool ) : int { var ID : bool var ID : [ ID ] , ] bool }",
  "func ID ID ID : bool [ ID : bool , ID : [ ] bool ) : int { var ID : bool var ( : [ ID ] , ] bool }",
  "func ID ID ID : bool [ ID : bool , ID : [ ] bool ) : int { var ID : bool var ( : [ ID bool , ] ] }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID ( int call ID ( ) call ID : true ) }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID ( ID call ID ( ) call int : true ) }",
  "func ID ( ID : int , ID : bool , ID : bool ) { : ID ( ID call ID ( ) call int var true ) }",
  "func ID ( ) : : { var ID bool [ ] int var ID : int call ID ( ) }",
  "func ID ( ) : : { var ID bool [ ] int var ID : int call ID ( ) }",
  "func ID ( int : : { var ID bool [ ] ) var ID : int call ID ( ) }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool ID var ID : bool if ID [ ID ] [ ( ( { ) ) ] { } }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool ID var ID : bool if ID [ ID ] [ ( ( { ) ) ] { } }",
  "func ID ( ID : bool , ID : int , ID : int if : bool ID var ID : bool ) ID [ ID ] [ ( ( { ) ) ] { } }",
  "func ID ( ID : int , ID : [ false / ( ( 123 / ID } - true ) ) ] [ ] int ) { /",
  "ID ID ( ID : int , func : [ false / ( ( 123 / ID } - true ) ) ] [ ] int ) { /",
  "ID ID ( ID : int , func : [ false / ( ( [ / ID } - true ) ) ] 123 ] int ) { /",
  "func [ ( ID : bool , ID : [ ] ID - 123 * ( ( - ( ID ) ) ) ] bool , ID : int ) { } func ID ( ) { }",
  "func [ ( ID : bool , ID : [ ] ID - 123 * ( ( ID ( ID ) ) ) ] bool , - : int ) { } func ID ( ) { }",
  "func [ ( ID : bool , ID : [ ] ID ) 123 * ( ( ID ( ID ) ) - ] bool , - : int ) { } func ID ( ) { }",
  "func ID ( ) : int { } ID : bool var ID : int { var ID : bool var ID : [ ( - ( ( ID ) ) ) ] bool } { var }",
  "func ID ( ) : : { } ID int bool var ID : int { var ID : bool var ID : [ ( - ( ( ID ) ) ) ] bool } { var }",
  "func ID ( ID : [ ] [ - false + true ( 123 * ID / ) [ 123 ] + ID ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ - false + true ( 123 * ID ] ) [ 123 ] + ID / int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ - * + true ( 123 false ID ] ) [ 123 ] + ID / int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : [ true / ID [ - - true / - ( ( - - ( ID ) ) ) / ] ] [ ID ] ID [ ] [ ] [ ] [ ] int { } func ID ( ) { }",
  "true ID ( ID : int , ID : int ) : [ func / ID [ - - true / - ( ( - - ( ID ) ) ) / ] ] [ ID ] ID [ ] [ ] [ ] [ ] int { } func ID ( ) { }",
  "true ID ( ID : int , ID : int ) : [ func / ID [ - - true / - ( ( - - ( ID ) ) ) / ] ] [ ID ] ID [ ] [ ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ) : [ ( ( 123 * true / - - ID ( ) ) ) ] bool } {",
  "func ) ( ID : [ ( ( 123 * true / - - ID ( ) ) ) ] bool } {",
  "func ) ( ID : [ ( ID 123 * true / - - ( ( ) ) ) ] bool } {",
  "func ID ( ID : int ) { var ID : int ID ( ) [ ( true / - ID ) ] [ true ) = ( - - ( false ) ] }",
  "func int ( ID : int ) { var ID : ID ID ( ) [ ( true / - ID ) ] [ true ) = ( - - ( false ) ] }",
  "func int ( ID : int ) { var ID : ID ID ( ) [ ( true / - ID ) ] [ = ) true ( - - ( false ) ] }",
  "func ID ( [ { var ID : ) 123 / 123 and false + true - ( false ) ] bool } func ID ( ) { }",
  "func ID ( + { var ID : ) 123 / 123 and false [ true - ( false ) ] bool } func ID ( ) { }",
  "func 123 ( + { var ID : ) 123 / ID and false [ true - ( false ) ] bool } func ID ( ) { }",
  "func ID ( ) : [ - ( 123 + ( ID ( ID [ ) ] [ ID ] ) ) ] int { }",
  "func ID ( ) : [ - ( 123 + ID ID ( ( [ ) ] [ ID ] ) ) ] int { }",
  "func ID ( ) : [ - ( 123 + ID ID ( ID [ ) ] [ ( ] ) ) ] int { }",
  "func ID ( ) : int { { ( ( 123 and true * ID * ID ) ) { } } func ID ( ) if }",
  ") ID ( ) : int { { ( ( 123 and true * ID * ID ) func { } } func ID ( ) if }",
  ") ID ( ) : int { { ( ( ) and true * ID * ID 123 func { } } func ID ( ) if }",
  "func ID ( ) : [ ID ( ) [ ID ( int - ID ) ) ] [ ID ] ] [ ] ( { }",
  "func ID ( ) : [ ID ( ) } ID ( int - ID ) ) ] [ ID ] ] [ ] ( { [",
  "func ] ( ) : [ ID ( ) } ID ( int - ID ) ) ID [ ID ] ] [ ] ( { [",
  "func ID ( ID : int , ID : int : ) int { var ID : int var ID : int return } func ID ( ID : [ ID ] int ) { }",
  "func ID ( ID : int , ID : [ - false and true * ( } ( true ) ) ) ] bool , ID : [ ] bool ) { (",
  "func ID - ID : int , ID : [ ( false and true * ( } ( true ) ) ) ] bool , ID : [ ] bool ) { (",
  "func and - ID : int , ID : [ ( false ID true * ( } ( true ) ) ) ] bool , ID : [ ] bool ) { (",
  "func ID ( ID : [ ID ( 123 * ( ( - 123 ) ) ] ID ) ] [ * bool ) { }",
  "func ( ( ID : [ ID ( 123 * ID ( - 123 ) ) ] ID ) ] [ * bool ) { }",
  "func ( ( ID : [ ID ( 123 * ID ) - 123 ) ( ] ID ) ] [ * bool ) { }",
  "func ID ( ) { if false / ( ID ( { [ - false ] ) / - - - - ID ) } if ( 123 ) { } }",
  "func ID if ) { ( false / ( ID ( { [ - false ] ) / - - - - ID ) } if ( 123 ) { } }",
  "func ID if ) { ( false / ( ID ( { { - false ] ) / - - - - ID ) } if ( 123 ) [ } }",
  "func ID ( ID : [ ] int , ID : [ ) false / ( ID [ ID ] ) / - ( ( ( ( true ) ) ) - ] int , ID : bool ) { } func ID ( ) { }",
  "func func ( ID : [ ] int , ID : [ ) false / ( ID [ ID ] ) / - ( ( ( ( true ) ) ) - ] int , ID : bool ) { } ID ID ( ) { }",
  "func func ( ID : [ ] int , ID : [ ) false / ( ID [ ID ] ) / - ( ( ( ( bool ) ) ) - ] int , ID : true ) { } ID ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : int ) { var ID : bool var ID : int while - ( ID ) { { } func ID ( ) } }",
  "func ID ( ID : bool , ID : [ ] bool , ID : int ) { var ID : bool var ID : int while - ( ) ) { { } func ID ( ID } }",
  "func ID ( ID : bool , ID : [ ] bool , ID : int ) { var ID : bool var ID : int while - } ) ) { { } func ID ( ID } (",
  "func ID ( ) : int { if true ID ( - true * * ( ID ) / ID ) { } }",
  "func ID ( ) : int { if true ID ( ID true * * ( ID ) / - ) { } }",
  "func ID ( ) : int { if true ID ( ID { * * ( ID ) / - ) true } }",
  "func ID ( ID : bool , ID : ID , bool : int ) { var ID : [ - ID * false / ( true ) ] bool }",
  "func ID ( ID : bool , ID : ID , bool : int ) { var ID : [ / ID * false - ( true ) ] bool }",
  "func ID ( ID : bool , ID * ID , bool : int ) { var ID : [ / ID : false - ( true ) ] bool }",
  "func ID ( ) { var ID : [ 123 * false ID ( 123 / ( and ) * ( - true ) ) and ( 123 ) ] [ ] bool }",
  "func ID ( ) { var ID ] [ 123 * false ID ( 123 / ( and ) * ( - true ) ) and ( 123 ) ] [ : bool }",
  "func ID ( ) : var ID ] [ 123 * false ID ( 123 / ( and ) * ( - true ) ) and ( 123 ) ] [ { bool }",
  "func ID ( ID : int ) ) [ ] bool { call ID ( ( ID ( : ) ) call ID ( ) }",
  "func ID ( ID : int ) ) [ ) bool { call ID ( ( ID ( : ) ) call ID ( ] }",
  "func ID ) ID : int ) ) [ ) bool { call ID ( ( ID ( : ( ) call ID ( ] }",
  "func ID ( ) : int { var ID : bool var ID : [ true / ( ID ( - ID ) ) bool ] } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : [ true / ( ID ( - ID ) ) bool ] } func ID ( ) { }",
  "( ID ( ) : int { var ID : bool var ID : [ true / func ID ( - ID ) ) bool ] } func ID ( ) { }",
  "( ID ( ) { var ID : bool call ID func ( - - ( - ID ) ) ) while ID { } } func ID ( ) { }",
  "( ID ( ) { var ID : bool call ID func ( - - ( - ID ) ) ) while ID { } } func ID ( ) { }",
  "( ID ( ) } var ID : bool call ID func ( - - ( - ID ) ) ) while ID { } } func ID ( ) { {",
  "func [ ( ID : [ ] ID ] bool , ID : [ ( ( ( ( - - - - - - ID ) ) ) ) ] [ ] int , ID : bool ) { } func ID ( ) { }",
  "func [ ( ID : [ ] ID ] bool , ID : [ ( ( ( ( - - - - - - ID ) ] ) ) ) [ ] int , ID : bool ) { } func ID ( ) { }",
  "func [ ( ID : [ ] ID ] bool , ID : [ ( ( ( ( - - - - - - ID ) ] ) { ) [ ] int , ID : bool ) ) } func ID ( ) { }",
  "func ID ( ) ( bool { var ID : bool while ID ( ( ID : ) ) ) { } { } }",
  "func ID ( ID ( bool { var ) : bool while ID ( ( ID : ) ) ) { } { } }",
  "func ID ( ID ( { { var ) : bool while ID ( ( ID : ) ) ) { } bool } }",
  "func ID ( ) { var ID : [ ] [ - true / - true ] [ ID ] { } func ID ( ) bool }",
  "func ) ( ID { var ID : [ ] [ - true / - true ] [ ID ] { } func ID ( ) bool }",
  "func ) ( ID true var ID : [ ] [ - { / - true ] [ ID ] { } func ID ( ) bool }",
  "func ID ( ID : bool , ID : int , ID : bool ) { * true * ID [ ID ] [ - ( false ) ] if false { } ID = false } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { * true * ID [ ID ] [ - ( false ) ] if false { } ID = false } func ID { ) ( }",
  "func ID ( ID : bool , ID : int , ID : bool ID { * true * ) [ ID ] [ - ( false ) ] if false { } ID = false } func ID { ) ( }",
  "func ID ( ID : bool ) { var ID : bool - ID : [ ] bool ID ( var ( 123 ) ) = ( true ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool - ID : [ ] bool ID ( true ( 123 ) ) = ( var ) } func ID ( ) { }",
  "func ID ( ID : bool ) { ID ID : bool - ID : [ ] bool ID ( true ( 123 ) ) = ( var ) } func var ( ) { }",
  "func ID ( ) : int { var ID : int return ID ( ) [ ( ID ) ] [ } 123 ] -",
  "func ID ( ) : int { var : ID int return ID ( ) [ ( ID ) ] [ } 123 ] -",
  "func ID ( ) : var { int : ID int return ID ( ) [ ( ID ) ] [ } 123 ] -",
  "func ID ( ) { var ID : bool print ( ( - ( ) [ - ( ID ) ] ) ) ID = - ID - - 123 } func ID ( ) { }",
  "func ID ( ) { var ID : bool print ( ( - ( ) [ - ( ID ) ] ) ) ID = - ID - - 123 } func ID ( } { )",
  "func ID ( ) { var ID : bool print ( ( - ( ) ( - [ ID ) ] ) ) ID = - ID - - 123 } func ID ( } { )",
  "func ID ( ID : bool , ID : bool , ) : [ ( ID [ true * ( ( false ) ) * ID ] [ - ID ] ) ] int ID { }",
  "func ID ( ID : bool , ID : bool , ) : [ ( ID [ true * ( ( false ) ID * ID ] [ - ID ] ) ] int ) { }",
  "func ID ( ID : bool , ID : bool , ) : [ ( false [ true * ( ( ID ) ID * ID ] [ - ID ] ) ] int ) { }",
  "func ID ( ID : int , ID : int ) : bool { var ID : int { var ID : [ ] [ ] bool while ( ) ) { } { } } if ( ( ID ) ) { } } func ID ( false { }",
  "func ID ( ID : int , ID : int { : bool { var ID : int { var ID : [ ] [ ] bool while ( ) ) { } ) } } if ( ( ID ) ) { } } func ID ( false { }",
  "func ID ( ID : int , ID : int { : bool { var ID : int { var ID : [ ] [ ] bool while ( ) ) { } ) } } if ( ( ID ) } { } ) func ID ( false { }",
  "func ID ( ) { var ID : int } func ID ) ( { var ID : bool var ID : bool }",
  "func ID ( ) { var ID ID int } func ID ) ( { var : : bool var ID : bool }",
  "func ID ( ) { while ( false / * + true true 123 / ID ) { } print 123 } func ID ( ) { }",
  "func ID ( ) { while ( false / * + true true 123 } ID ) { / print 123 } func ID ( ) { }",
  "func ID ( ) { while ( false / * + true true 123 } ID ) { / } 123 } func ID ( ) { print",
  "func ID ( ID : int , ID : ) ) : [ ] [ ( ( ( ID ) int ) ] int { }",
  "func ID ( ID : int , ID : ) ) : [ ( [ ] ( ( ID ) int ) ] int { }",
  "func ID ( ID : int , ID : ) ) : [ ( [ ] ( ( ID ) int ) ] { int }",
  "func ID ( ) { print - true ( true / ID ( ( and - ( ID ) ) ) ) }",
  "func ) ( ) { print - true ( true / ID ( ( and - ( ID ) ) ID ) }",
  "func ) ( ) { print - true ( true / ID ( ( and - ( ID ) ) ID ) }",
  "func ID ( ) { ( ID : int ID [ ( ( false / var ID ) * ID ) ) ] [ ( ( 123 ) ) ] = ( false ) } func ID ( ) { }",
  "func ID ( ) { ( ID : int ID [ ( ( false / var ) ) * ID ) ) ] [ ( ( 123 ) ) ] = ( false ) } func ID ( ID { }",
  "func ID ( ) { ( ID : int ID [ ( ( false / ) ) var * ID ) ) ] [ ( ( 123 ) ) ] = ( false ) } func ID ( ID { }",
  "func ID ( ID : bool ) : [ ] int { var ID : bool var ID : [ false ] ID + - 123 - ( ID ) / int } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] int { var ID : bool var ID : [ int ] ID + - 123 - ( ID ) / false } func ID ( ) { }",
  "func ID ( ID / [ true * ( false - - ID : - false + ID ) * ( - - 123 ) ] bool ) { }",
  "func ID ( ID / [ true * ( false - - ID : - false + ID ) * ( - - 123 ) ] bool ) { }",
  "func ID ( ID / [ true { ( false - - ID : - false + ID ) * ( - - 123 ) ] bool ) * }",
  "func ID ( ] : [ ] [ ] [ ID [ false / - - ( true ) * - ( ( ID ) ) ] [ true ] ] [ ] [ ID bool ) { }",
  "func ID ( ] : [ ] [ ] [ ID [ false / - - ( true ) * - ( ( ID ) ) ] [ true ] ] [ ] [ ID bool ) { }",
  "func ID ( ] : [ ] [ ] [ ID [ false / - - ( true ) * - ( ] ID ) ) ] [ true ( ] [ ] [ ID bool ) { }",
  "func ID ( ID : int ) : int { { var ID : [ ] bool if ) true / ( ( 123 ) - * ( - ( ( - ( ID ) ) ) ) { } } } func ID ( ) { }",
  "func ID ( ID : int ) : int { { var ID : [ ] bool if ) true / ( ( 123 ) - * ( - ( ( { ( ID ) ) ) ) - } } } func ID ( ) { }",
  "func ID ( ID : bool : ) int { return }",
  "func ID ( ID : : bool ) int { return }",
  "func ID ( ID : ) bool : int { return }",
  "func ID ( ID : [ ( false / ( ID [ ID ) ) ) ] int ) { } func ID ( ] { }",
  "func ID ( ) : [ ( false / ( ID [ ID ) ) ) ] int ID { } func ID ( ] { }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool if { [ false + true ] { } } func ID ( ) ID }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool if { [ } + true ] { false } func ID ( ) ID }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool if { [ } + true ] { ID } func false ( ) ID }",
  "func ID ( ID : bool ) : [ ( false or false * - - ID or ( 123 } ) ] bool { ) func ID ( ) { }",
  "] ID ( ID : bool ) : [ ( false or false * - - ID or ( 123 } ) func bool { ) func ID ( ) { }",
  "] ID ( ID : bool ) : [ ( false or false * - - ID or ( 123 } ) func bool { ) func ID ( ) { }",
  "func ID ( ID : [ false * 123 + - - - [ - ID / ( ID ID ) / false ] [ false ] ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ false * 123 + func - - [ - ID / ( ID ID ) / false ] [ false ] ] bool ) { } - ID ( ) { }",
  "func ID ( ID : [ false * 123 + func - - [ - ID / ( ID ID / ) false ] [ false ] ] bool ) { } - ID ( ) { }",
  "[ ID ( ID : func ] int ) { print - - - ID / ( ID ) * - true } func ID ( ) { }",
  "[ ID ( ID : - ] int ) { print func - - ID / ( ID ) * - true } func ID ( ) { }",
  "[ ID ( ID : - ] int ) { print { - - ID / ( ID ) * - true } func ID ( ) func }",
  "func ID ( ID : [ ID ] ID [ 123 * true - - - true ] ) ( int ) { } func ID ( ) { }",
  "func ID ( ID : [ ID ] ID [ - * true 123 - - true ] ) ( int ) { } func ID ( ) { }",
  "func ID ( ID : [ ID ] ID [ - * true 123 - - true ] ) ( int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : [ ] bool call ID ID 123 * - 123 - ( - ( ( ) ) ) } func ID ( ) { }",
  "func ID ( ID : bool ) : int { var ID : } ] bool call ID ID 123 * - 123 - ( - ( ( ) ) ) [ func ID ( ) { }",
  "func ID ( ID : bool ) : int func var ID : } ] bool call ID ID 123 * - 123 - ( - ( ( ) ) ) [ { ID ( ) { }",
  "func ID ( ) { var ID : bool } func ID ( ID : int , ID : ( , ID : [ true + int ( ( ID ) ) ) - ID ] int ) { }",
  "func ID ( ) { var ID : bool } func ID ( ID : int , ID : ( , ID : [ true + int ( ( ID ) ) ) - ID ] int ) { }",
  "func ID ( ) { var , : bool } func ID ( ID : int ID ID : ( , ID : [ true + int ( ( ID ) ) ) - ID ] int ) { }",
  "func ID ( ) { var ID : int var ID : [ ID [ ( ID ) ] [ ( - ID ) ] ] } } func ID ( ) { int",
  "func ID ( ) { var ID : int var ID : [ ID ID ( ID ) ] [ ( - [ ) ] ] } } func ID ( ) { int",
  "func ID ( ID : ID ) { var ID : bool { if 123 * ( - false ) * ( 123 ) { } call ID ( ) } call ID ( ) } func bool ( ) { }",
  "func ID ( ID : ID ) { var ID : bool { if 123 * ( - false ) * ( 123 ) { } call ID ( ) } call ID ( ) } func bool ( ) { }",
  "func ID call ID : ID ) { var ID : bool { if 123 * ( - false ) * ( 123 ) { } ( ID ( ) } call ID ( ) } func bool ( ) { }",
  "func { ( ) { var ID : [ ] [ ( false * ( ID ) / - true ) ] int } func ID ( ) ID }",
  "func { ( ) { var ID ) [ ] [ ( false * ( ID : / - true ) ] int } func ID ( ) ID }",
  "func - ( ) { var ID ) [ ] [ ( false * ( ID : / { true ) ] int } func ID ( ) ID }",
  "func ID [ ) { var ID : bool var ID : [ false * ID ( ) [ false * ( ID ) * ID ] [ - - - - false ] ] ( ] bool }",
  "func ID [ ) { var [ : bool var ID : [ false * ID ( ) [ false * ( ID ) * ID ] ID - - - - false ] ] ( ] bool }",
  "* ID [ ) { var [ : bool var ID : [ false * ID ( ) [ false * ( ID ) func ID ] ID - - - - false ] ] ( ] bool }",
  "func ID ( ID : bool { : int { ) } } func ID ( ) { var ID : [ ID ] int var ID : int }",
  "func ID ( ID : bool { : int { ) } func } ID ( ) { var ID : [ ID ] int var ID : int }",
  "func ID ( ID : var { : int { ) } func } ID ( ) { var ID : [ ID ] int bool ID : int }",
  "func ID ( ) { ID var : int var ID : [ - ( 123 / - false + - ID ) ] int }",
  "func ID ( ) + ID var : int var ID : [ - ( 123 / - false { - ID ) ] int }",
  "func ID ( ) - ID var : int var ID : [ - ( 123 / + false { - ID ) ] int }",
  "func ID ( ) { var : : bool var ID : [ ] int return } func ID ( ) { var ID ID int var ID : int call ID ( ) }",
  "func ID var ) { ( : : bool var ID : [ ] int return } func ID ( ) { var ID ID int var ID : int call ID ( ) }",
  "func ID var ) { ( : : bool var int : [ ] ID return } func ID ( ) { var ID ID int var ID : int call ID ( ) }",
  "func ID ID ) : [ - ID [ ( ID ( ( ) ) ] ] bool { } func ID ( ) { }",
  "func ID ID ) : [ - ID [ ( ID ( ( ) ) ] ] bool { } func ID ( ) { }",
  "func ID ID ) : [ - ID ) ( ID ( ( ) [ ] ] bool { } func ID ( ) { }",
  "func ID ( ) ID int { var ID : bool ID ( ) = ID ( ( ( false ) ) ) { } } func : ( ) { }",
  "func ID ( ) ID int func var ID : bool ID ( ) = ID ( ( ( false ) ) ) { } } { : ( ) { }",
  "func ID ( ) ID int func var ID : bool ID ( ) = ID ( ( ( false ) ) ) { } } { : ( ) { }",
  "func ID ( ) { var ID : [ - 123 ( ) [ ( ID ( ) ) ] [ ( ( ID ) ) ] ] [ ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) { ] ID : [ - 123 ( ) [ ( ID ( ) ) ] [ ( ( ID ) ) ] var [ ] bool var ID : int } func ID ( ) { }",
  "func ID ( ) { ] ID : [ - 123 ( ) [ ( ID { ) ) ] [ ( ( ID ) ) ] var [ ] bool var ID : int } func ID ( ) ( }",
  "func ID ] ID : [ ] [ ID [ ( ID ( false ) ) ] [ ( - ( - false ) ) ( ] [ ] bool ) { }",
  "func ID ] [ : [ ] [ ID ID ( ID ( false ) ) ] [ ( - ( - false ) ) ( ] [ ] bool ) { }",
  "func ID ] [ : [ ] [ ID ID ( ID ( false ) ) ] [ ( - ( } false ) ) ( ] [ ] bool ) { -",
  "func ID ( ID : ID , ID : int ) : int { call bool ( ( ( ID ) ) ) }",
  "func ID ( ID : ID , ID : int ) ID int { call bool ( ( ( : ) ) ) }",
  "func ID ( ID : ID , ID : int ) ( int { call bool ( ID ( : ) ) ) }",
  "func ID ( ) { var ID : int } func ID ( ID : [ 123 + true / false / - 123 } - ( false ) ] bool ) { +",
  "func ID ( ) { var ID : int } func ID ( ID : [ 123 + true / false / - 123 } - ( false ) ] bool ) { +",
  "func ID ( ) { var ID : int } func ID ( / : [ 123 + true ID false / - 123 } - ( false ) ] bool ) { +",
  "func ID ( ID : [ ] * 123 != - ( false * false / ID ) true int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] * 123 != - ( false * false ) ID / true int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] * 123 != - / false * false ) ID ( true int ) { } func ID ( ) { }",
  "( ID ( ) { ID ( ) = ID * func - false * ( ID ) ) * ID if ID { } } func ID ( ) { }",
  "( ID ( ) { ID ( ) = } * func - false * ( ID ) ) * ID if ID { } } func ID ( ) { ID",
  "( ID ( ) { ID ( { = } * func - false * ( ID ) ) * ID if ID ) } } func ID ( ) { ID",
  "func ID ( ID : int , ID : } , ID : [ ] [ ] int ) : [ ( ID ( ) ) ] [ ] [ ] bool { bool",
  "func ID ( ID : int , ID { } , ID : [ ] [ ] int ) : [ ( ID ( ) ) ] [ ] [ ] bool : bool",
  "func ID ( ID : int , : { } , ID : [ ] [ ] int ) : [ ( ID ( ) ) ] [ ] [ ] bool ID bool",
  "func ID ( ID : bool , ID : [ ] bool ) : { bool var ID : int var ID : int ID ( false ) = ( 123 ) call ID ( ) } func ID ( ) { }",
  "func ID ( 123 : bool , ID : [ ] bool ) : { bool var ID : int var ID : int ID ( false ) = ( ID ) call ID ( ) } func ID ( ) { }",
  "func ID ( 123 : bool , ID : [ ] bool ) : { bool ( ID : int var ID : int ID ( false ) = var ID ) call ID ( ) } func ID ( ) { }",
  "func ID ( ) { if - ID [ ID ID true - - ID ) ] { } call ID ( ) } func ( ( ) { }",
  "func ID ( ) { if - ID [ ID ID true - ) ID ) ] { } call ID ( ) } func ( ( - { }",
  "func ID ( ) { if - ID [ ID ID true - ) ID ) ( { } call ID ] ) } func ( ( - { }",
  "func ID ( ) : int { var ID : [ ( true / ID ( ( false ) ) * 123 ) ] [ ] int ID var : int }",
  "func ID ( ) : int { var ID : [ ( ) / ID ( ( false ) ) * 123 true ] [ ] int ID var : int }",
  "func ID ( ) : int { var ID : [ ( ) / ID ( ( false ) ) * 123 true ] [ ] int ID var : int }",
  "func ID ( ) { var ID : int var ID : int print ( - 123 } ID ( ) - 123 ) if true { + }",
  "func ID ( ) { var ID : int var ID : + print ( - 123 } ID ( ) - 123 ) if true { int }",
  "func ID ( ) { var ID : int var ID : + true ( - 123 } ID ( ) - 123 ) if print { int }",
  "func ID ( ID : int : ID : bool , ID , bool ) : [ ] bool { { } { ID ( true ) = ID } } func ID ( ) { }",
  "func ID ( ID : int ] ID : bool , ID , bool ) : [ : bool { { } { ID ( true ) = ID } } func ID ( ) { }",
  "func ID ( ID : int ] ID : bool , ID , bool ) true [ : bool { { } { ID ( : ) = ID } } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : [ ID ( ID int ( ID ) ) ) ] ( }",
  "func ID ( ) : [ ] bool ( var ID : [ ID ( ID int ( ID ) ) ) ] { }",
  "func ID ( ID : , bool ID : [ ] bool , ID : int ) { var ID : bool var ID : [ ] bool { var ID : int } if ID { } } func ID ( ) { }",
  "{ ID ( ID : , bool ID : [ ] bool , ID : int ) { var ID : bool var ID : [ ] bool { var ID : int } if ID func } } func ID ( ) { }",
  "func ID ( ) : [ ( - ID [ true } ID [ ( ID ) ] [ ( ID ) ] ] ) ] int { /",
  "func ID ( ) : [ ( - ID [ true } ID [ ( ID ) ] [ ( ID ] ] ] ) ) int { /",
  "func ID ( ) : [ ( - ID [ ) } ID [ ( ID ) ] [ ( ID ] ] ] ) true int { /",
  "func ID ( int { } func ID ( ID : bool , ID : [ ] int , ID : ) ) { }",
  "func ID ( ] { } func ID ( ID : bool , ID : [ int int , ID : ) ) { }",
  "int ID ( ] { } func ID ( ID : bool , ID : [ int func , ID : ) ) { }",
  "} ID ( ID : int , ID : [ ] int ) { { var ID : [ ] bool var ID : bool call ID ( ) func }",
  "} ID ( ID : int , ID : [ ] int ) { { var ID : [ ] bool var ID : bool call ID ( func ) }",
  "} ID ( ID : int , ID : [ ] int ) { var var ID : [ ] bool { ID : bool call ID ( func ) }",
  "func ID ( ) : [ false - - - ( - - ID ( ) [ ID ] [ ] 123 ] ) - ID - bool { } func ID ( ) { }",
  "func ID ( ) : [ false - - - [ - - ID ( ) ( ID ] [ ] 123 ] ) - ID - bool { } func ID ( ) { }",
  "func ID ( ) : [ false - - - [ - - ID ( ) ( ID ] [ ] 123 ] ) - ID - bool { } func ID ( ) } {",
  "func ID ( ) { var ID : bool return ] func ID ( ID : [ ID ( ( true ) ) } bool ) { }",
  "func ID ( ) { var ID : bool return ID func ID ( ] : [ ID ( ( true ) ) } bool ) { }",
  "func ID ( ) { var } : bool return ID func ID ( ] : [ ID ( ( true ) ) ID bool ) { }",
  "func ID ( ID : bool , ID : [ 123 * ID [ 123 + false / int + ID ] [ ID ] ] int , ID : true ) { } func ID ( ) { }",
  "func ID ( ID : bool , ] : [ 123 * ID [ 123 + false / int + ID ID [ ID ] ] int , ID : true ) { } func ID ( ) { }",
  "func ID ( ) { var ID - int call ID ( - ID ( ID + - ( - ID ) + ( : 123 ) ) ) call ID ( ) }",
  "func ID ( ) { var ID - int call ID ( - ID ( ID + - ( - ID ) + ( : 123 ) ) ) call ID ( ) }",
  "func ID ( ) { var ID - int call ID ( - ID ( ID + - ( } ID ) + ( : 123 ) ) ) call ID ( ) -",
  "func ID ( ) { if 123 - ( true * ID ( ) + ID - ( - ID ) ) + false { } print ) } func ID ( false { }",
  "func ID ( ) { if 123 - ( true * ID ( ) + ID - ( - ID ) ) + false { } print ) } ID func ( false { }",
  "func ID ( ) { if 123 - ( true * ID ( ) + ID - ( - ID ) ) + false { } print ) } ID func ( false { }",
  "func ID ( ID : bool , ID : int ) { var ID / [ ID ( ) : ( ( true ) ) ] int } func ID ( ) { }",
  "func } ( ID : bool , ID : int ) { var ID / [ ID ( ) : ( ( true ) ) ] int ID func ID ( ) { }",
  "func } ( ID : bool ( ID : int ) { var ID / [ ID ( ) : , ( true ) ) ] int ID func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var int : ID print - ( - true ) { } } func ID ( ) { }",
  ") ID ( ID : bool , ID : bool , ID : int func { var int : ID print - ( - true ) { } } func ID ( ) { }",
  ") ID ( ID : : , ID : bool , ID bool int func { var int : ID print - ( - true ) { } } func ID ( ) { }",
  "func ID ( ) : bool ) var ID : bool var ID : bool call ID ( ) call ID ( - ( 123 ) ) } func ID ( { { }",
  "func ID ( ) : bool var ) ID : bool var ID : bool call ID ( ) call ID ( - ( 123 ) ) } func ID ( { { }",
  "func bool ( ) : bool var ) ID : ID var ID : bool call ID ( ) call ID ( - ( 123 ) ) } func ID ( { { }",
  "func ID ( ) : ( { var ID : [ int ID ( ) * ( ID ) / - - 123 ) ] int } func ID ( ) { }",
  "func ID ( ) - ( { var ID : [ int ID ( ) * ( ID ) / - : 123 ) ] int } func ID ( ) { }",
  "func ID ( ) - ( ) var ID : [ int ID ( ) * ( ID ) / - : 123 { ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID { ID ( ) [ 123 ] [ ID ] ] ] bool ) [ }",
  "func } ( ID : [ true * - true / true and ( - ID ( ) ) ] bool ) { ID",
  "func } ( ID : [ true * - true / and true ( - ID ( ) ) ] bool ) { ID",
  "func } ( ID : [ true * true - / and true ( - ID ( ) ) ] bool ) { ID",
  "func ID ( ID : [ ] bool : ID : int ) { var ID , [ ] [ ( ID ) ] [ ] [ ] int var ID : [ ] int }",
  "func ID ( ID : [ ] bool : ID : int ) { var ID , ( ] [ [ ID ) ] [ ] [ ] int var ID : [ ] int }",
  "func ID ( ID : [ ] bool : ID : int ) { var ID , ( ] [ [ ID ) ] [ ] [ ] int var ID : } ] int [",
  "func } ( ID : bool , ID : int , ID : [ ID ( ) / ID [ ID ] [ - false ] / false ] int ) { ID",
  "func ID ( } : bool , ID : int , ID : [ ID ( ) / ID [ ID ] [ - false ] / false ] int ) { ID",
  "func ID ( } : bool , ID : int , ID : [ ID ( ) / ID [ ID ] [ - false ] / false ] int ) { ID",
  "func ID ( ID [ int , ID : : false * ( ID ( ) [ 123 ] [ 123 ] ) ] bool , ID : bool ) { }",
  "func ID ( ID [ int , ID : : false * ( ID ( ) 123 [ ] [ 123 ] ) ] bool , ID : bool ) { }",
  "func ID ( ID [ int , ID : : false * } ID ( ) 123 [ ] [ 123 ] ) ] bool , ID : bool ) { (",
  "func ID ( ID : bool , [ : ID - ( ID ( ID / ID / - ID ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ID [ : ID - ( ID ( ID / ID / - ID ) ) ] int ) { } func , ( ) { }",
  "func ID ( ID : bool ID [ : ID - ( ID ( ID / ID / - ID ) ) ] ( ) { } func , int ) { }",
  "func } ( ID : int , ID : [ - ( 123 + 123 / ID ( ( ID ) ) + - 123 ) ] bool , ID : [ ] bool ) { ID func ID ( ) { }",
  "func / ( ID : int , ID : [ - ( 123 + 123 } ID ( ( ID ) ) + - 123 ) ] bool , ID : [ ] bool ) { ID func ID ( ) { }",
  "func / ( ID : int , ID : [ - ( 123 + 123 } ID ( ( ID ) ) + - 123 ) ] bool , ID : [ ) bool ) { ID func ID ( ] { }",
  "func } ( ) { var ID : int var ID : [ ] bool ID",
  "func } ( ) { var ID ID int var : : [ ] bool ID",
  "func } ( ) { var ID ID int var ID : [ ] bool :",
  "func ) ( ID { var ID : bool var ID : bool print ID [ false and true ] [ ID ] if ID { } }",
  "func ) ( ID { var ID : bool var ID : bool print ID [ [ and true ] false ID ] if ID { } }",
  "func ) ( ID { var ID : bool var ID : bool print ID [ [ and true ] false ID { if ID ] } }",
  "func ID ( ID : int ) : bool { var ID : [ ( ID ( ) ) ) ] int } func ID ( ID { }",
  "func ID ( ID : int ) : bool ) var ID : [ ( ID ( ) ) { ] int } func ID ( ID { }",
  "func ID ( ID : int ) : bool ) var ID : [ ( ID ( ) ) { ] int } func ID ( ID { }",
  "func ID ( : ) [ 123 / - ( ID ( ( - 123 ) ) ) ] int { }",
  "func ID { : ) [ 123 / - ( ID ( ( - 123 ) ) ) ] int ( }",
  "func ID ) : ) [ 123 / - ( ID ( ( - 123 ) { ) ] int ( }",
  "func ID ( ) { int ID : var ID [ ID * ( false / ( ID ) ) ] = ( 123 ) } func ID ( ) { }",
  "func ID ( : { int ID ) var ID [ ID * ( false / ( ID ) ) ] = ( 123 ) } func ID ( ) { }",
  "func ID ) : { int ID ) var ID [ ID * ( false / ( ID ) ) ] = ( 123 ( } func ID ( ) { }",
  "func ID ( ID : ) , ID : [ ( ID / ( false * ID * true ) / - ( - ( ( - - ID int ) ) ) ] [ ] int , ID : [ ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : ) , ID : [ ( ID / ( false * ID * true ) - - ( - ( ( - / ID int ) ) ) ] [ ] int , ID : [ ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : ) , ID : [ ( ID / ( false * ID * true ) ID - ( - ( ( - / ID int ) ) ) ] [ ] int , - : [ ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID { [ ] [ ID ( ( true / ( true ) / 123 ) ) ] bool ) : }",
  "func ID ( ID { [ bool [ ID ( ( true / ( true ) / 123 ) ) ] ] ) : }",
  "func ID [ ID { ( bool [ ID ( ( true / ( true ) / 123 ) ) ] ] ) : }",
  "func ID false ID : [ ID [ ID ( true < - - - ( ) ] [ ID ] ] bool ) { }",
  "func ID false { : [ ID [ ID ( true < - - - ( ) ] [ ID ] ] bool ) ID }",
  "func int ( ID : ID ) : bool { var ID : bool return - false / false / ID ( ID ) }",
  "func int : ID : ID ) ( bool { var ID : bool return - false / false / ID ( ID ) }",
  "func int : ID : ID ) ( bool { var ID : bool return ( false / false / ID - ID ) }",
  "true ID ( ID : [ ( false * 123 + ( ID ( func ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "true ID ( ID : [ ( false * 123 + ID ID ( func ) ) ) ] [ ] bool ) { } func ( ( ) { }",
  "true ID ( ID : [ ( false * 123 + ID ID ( func ) ) ) ] [ bool ] ) { } func ( ( ) { }",
  "func ID ( ) : bool { var ID : bool { [ ID : bool } while ID var 123 ] [ - ( ID ) ] { } }",
  "func ID ( ) : { bool var ID : bool { [ ID : bool } while ID var 123 ] [ - ( ID ) ] { } }",
  "func ID ( while : { bool var ID : bool { [ ID : bool } ) ID var 123 ] [ - ( ID ) ] { } }",
  "func ID ( ) : [ ( ID [ ID [ ID ] } ) ] [ ] bool { } func ID ( ) { ]",
  "func ID ( { : [ ( ID [ ID [ ID ] } ) ] [ ] bool { } func ID ( ) ) ]",
  "func ID ( { : [ ( ID [ ID [ ID ] } ) ] [ ] bool { } func ID ( ) ) ]",
  "func ID ( ID : ) ) : [ ID [ false + - - ( - ( true ) bool ] [ ID ] ] bool { } func ID ( ) { }",
  "func ID ( ID : ) ) { [ ID [ false + - - ( - ( true ) bool ] [ ID ] ] bool { } func ID ( ) : }",
  "func ID ( { : bool , ID : int ) ID } func ID ( ID : int , ID : bool , ID : [ ID ] int ) { }",
  "func ID ( { : bool , ID : int ) ID } func ID ( ID : int , ID : bool , ID : [ ID ] int ) { }",
  "func ID ( { : bool , ID : int ) ID } func ID int ID : int , ID : bool , ID : [ ID ] ( ) { }",
  "func ID int ) { var ID : bool var ID : ( return - - ID ( ID * false / - ( ( ( - ID ) ) ) ) } func ID ( ) { }",
  "func ID int ) { var ID : bool var ID : ( return - - ID ( ID * false / - ( ID ( - ( ) ) ) ) } func ID ( ) { }",
  "func ID int ) { var ID : bool var ID : ( return - - ID ( ID * false / ) ( ID ( - ( ) ) - ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : - return - int 123 * ( - - ID ) }",
  "ID func ( ) { var ID : bool var ID : - return - int 123 * ( - - ID ) }",
  "ID func ( ) bool var ID : { var ID : - return - int 123 * ( - - ID ) }",
  "func ID ( ) { var ID : int { var ID : bool var ID : [ ( ID [ ( ( - ID { ) ] ) ] int } while ( ID ) { } } func ID ( ) ) }",
  "func ID ( ) { var ID : int { var ID : bool var ID : [ ( ID [ ( ] - ID { ) ] ) ( int } while ( ID ) { } } func ID ( ) ) }",
  "func ) ( ) { print ( - ( ( 123 / ID ) ID ) }",
  "( ) ( ) { print ( - func ( 123 / ID ) ID ) }",
  "func ID ( print { var ID : int ) ID * - true and ( true ) and 123 } func ID ( ) { }",
  "func ID ( ID { var ID : int ) ID * - true and ( true ) and 123 } func print ( ) { }",
  "func ID ( ID { var ID : int ) ID * - true and ( true ) and 123 { func print ( ) } }",
  "func ID ( ID : bool ) : bool { ) ID : [ - ID ( ) [ ( ID var ] [ ID ] ] int } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { ) ID : [ - ID int ) [ ( ID var ] [ ID ] ] ( } func ID ( ) { }",
  "func ID ( ) { var ID ) bool var ID : [ ID ( true + ID ( : - false ) ] bool }",
  "func ID ( var { var ID ) bool ) ID : [ ID ( true + ID ( : - false ) ] bool }",
  "bool ID ( var { var ID ) bool ) ID : [ ID ( true + ID ( : - false ) ] func }",
  "func ID ( ID : bool , ID : bool , } : [ ] int ) { var ID : bool var ID : int while ( ID ) { ID }",
  "func ID ( ID : bool , ID : bool ) } : [ ] int , { var ID : bool var ID : int while ( ID ) { ID }",
  "func ID ( ID : bool ID ID : bool ) } : [ ] int , { var , : bool var ID : int while ( ID ) { ID }",
  "] ID ( ) : [ func int { var ID : bool call ID ( - - ( false * ID ) ) } func ID ( ) { }",
  "] ID ( ) : [ func int { func ID : bool call ID ( - - ( false * ID ) ) } var ID ( ) { }",
  "] ID ( ) : { func int [ func ID : bool call ID ( - - ( false * ID ) ) } var ID ( ) { }",
  "func ID + ) { var ID : int var ID : bool if false ( ( true < - 123 ) { } call ID ( ) }",
  "func ID + ) { var ID : int var ID : bool if false ( ( true < - 123 } { } call ID ( ) )",
  "func ID + bool { var ID : int var ID : ) if false ( ( true < - 123 } { } call ID ( ) )",
  "func ID ( [ : ID ID ( ID [ ID ( ( ( 123 ) ) ) ] [ false ] ) ] int ) { }",
  "func ID ( [ : ID ID ( ID [ ID ( ( ( 123 ) ) ) ] ] false [ ) ] int ) { }",
  "func ID ( [ : ID ID ( ID [ ID ( ( ( 123 ) ) ) ] ] false [ ] ) int ) { }",
  "func ID ( ID : [ ID } true / - ( true / true / 123 ) ) ] bool ) { ( func ID ( ) { }",
  "func ID ( ID : [ ID } true / - func true / true / 123 ) ) ] bool ) { ( ( ID ( ) { }",
  "func } ( ID : [ ID ID true / - func true / true / 123 ) ) ] bool ) { ( ( ID ( ) { }",
  "func ID ID ) { var ID : [ 123 + false + ID <= true / ( ( ) ] int var ID : int } func ID ( ) { }",
  "( ID ID ) { var ID : [ 123 + false + ID <= true / func ( ) ] int var ID : int } func ID ( ) { }",
  "( ID ID ) { var ID : [ 123 + false + ID <= true / ( func ) ] int var ID : int } func ID ( ) { }",
  "func , ( ID : bool ID ID : [ ] int ) { var ID : [ ] int } func ID ( ID : [ ( ID ) ] int ) { }",
  "func , ( ID : bool ID ID : [ ] int ) { : ID : [ ] int } func ID ( ID var [ ( ID ) ] int ) { }",
  "func , ( ID : bool ID ID : [ ] int ) { : ID : [ ] int var func ID ( ID } [ ( ID ) ] int ) { }",
  "func ID ( ) { var ID - int var ID : bool print true / - true and ( - : - ID ) }",
  "func ID ( ) - var ID - int var ID : bool print true / { true and ( - : - ID ) }",
  "func ID ( ) - var ID - int : ID : bool print true / { true and ( - var - ID ) }",
  "func ID ( ID : bool , ID : int , ID : int * : int { var ID : int return ID / ID ) ( ID ) }",
  "func ID ( ID int bool , ID : int , ID : int * : int { var ID : : return ID / ID ) ( ID ) }",
  "func ID ( ID int bool , ID : int , { : int * : int ID var ID : : return ID / ID ) ( ID ) }",
  "func ID ( ID ID int , ID : int ) { } func : ( ID : bool ) { if true - - - true - - ID { } }",
  "func ID ( ID ID int , ID : int ) { } func : ( ID : bool } { if true - - - true - - ID { } )",
  "func ID ( ID : int ) : bool { { ID [ ID [ ( ID ) ] [ - ID ] ] = ID 123 ID = 123 } } func - ( ) { }",
  ": ID ( ID func int ) : bool { { ID [ ID [ ( ID ) ] [ - ID ] ] = ID 123 ID = 123 } } func - ( ) { }",
  ": ID ( ID func int ) : bool { { ( [ ID [ ID ID ) ] [ - ID ] ] = ID 123 ID = 123 } } func - ( ) { }",
  "func ID } ) : int { var ID : [ ] int call ID ( ( ID [ 123 ] ) ) { ( }",
  "func ID } ) : int { ID ID : [ ] int call var ( ( ID [ 123 ] ) ) { ( }",
  "func ID } ) : int { ID ID : [ ] int ( var call ( ID [ 123 ] ) ) { ( }",
  "func ID ( ) : [ - * 123 - ( ID ( ) [ 123 - ID ] ) ] int { }",
  "func ID ( } : [ - * 123 - ( ID ( ) [ 123 - ID ] ) ] int { )",
  "func ID ( } : [ - * 123 ( ( ID - ) [ 123 - ID ] ) ] int { )",
  "func ID ( ) : [ false / true == ( ( ( 123 ) ) ) ] [ ] bool { ) func ID ( } { }",
  "func ID ( ) : [ false / true func ( ( ( 123 ) ) ) ] [ ] bool { ) == ID ( } { }",
  "func ] ( ) : [ false / true func ( ( ( 123 ) ) ) ] [ ID bool { ) == ID ( } { }",
  "func ID ( ID : bool , ID : int ) { var ID : int var ID : int ( ( ID print ) ) }",
  "func ID ( ID : bool , ID : int ) { var ID : int var ID : int ( ( print ID ) ) }",
  "func ID ( ID : bool , ID : int ) { var ID : ) var ID : int ( ( print ID ) int }",
  "func ID ( ) : bool { var = : int var ID : bool { var ID : [ ( - true ) ] bool } ID ID ( - true ) }",
  "func ID ( ) : bool { var = : ID var ID : bool { var ID : [ ( - true ) ] bool } int ID ( - true ) }",
  "func ID ( ) : bool { var = : ID int ID : bool { var ID : [ ( - true ) ] bool } var ID ( - true ) }",
  "func ID ( ) { var ID : bool ID [ - ) * false * 123 or ( ID true ] [ - ID ] = 123 } func ID ( ) { }",
  "func ) ( ) { var ID : bool ID [ - ) * false * 123 or ( ID true ] [ - ID ] = 123 } func ID ( ID { }",
  "- ID ( ) { var ID : [ ( ID ( func 123 * ID / ID ) ) ] bool }",
  "- ID ( ) ( var ID : [ ( ID { func 123 * ID / ID ) ) ] bool }",
  "func 123 ( ) { var ID : int if - ID ( ) / true / true and - ID and ID { } print 123 } func ID ( ) { }",
  "func 123 ( ) { var ID int : if - ID ( ) / true / true and - ID and ID { } print 123 } func ID ( ) { }",
  "func 123 ( ) { var ID int ID if - ID ( ) / true / true and - : and ID { } print 123 } func ID ( ) { }",
  "func ID ( ( { if ) ( ID ( ID ) ) ) { } }",
  "func ID ( ( { if ) ( ID ( ID ) ) } { ) }",
  "func ID ( ( } if ) ( ID ( ID ) ) { { ) }",
  "func ) ( ID : bool , ID : int , ID : int ) { var ID : [ - true + ( ( ( false ID ) ) - ( ID ) ] int } func ID ( ) { }",
  "func ) ( ID : bool , ID : ID , int : int ) { var ID : [ - true + ( ( ( false ID ) ) - ( ID ) ] int } func ID ( ) { }",
  "func ) ( ID : bool , ID : ID , int : int ) { var ( : [ - true + ( ID ( false ID ) ) - ( ID ) ] int } func ID ( ) { }",
  "func ID ( ID : [ 123 / false - ( true * ) ( ID / ID ) ] bool ) { }",
  "func ID ( ID : [ 123 / false - ID true * ) ( ID / ( ) ] bool ) { }",
  "func ID ( ID : [ 123 / false - ID true * ) ( ID / ( ) ] bool ) { }",
  "func ID ( ID : bool , ID ID [ : - ( ( false / ID * ( false ) ) ) + ( ID ( ) ) ] [ ] bool ) { }",
  "func ID ( ID : bool , ID ) [ : - ( ( false / ID * ( false ) ID ) + ( ID ( ) ) ] [ ] bool ) { }",
  "func ID ( ) : [ ] [ { var ID : [ ID [ ID [ 123 ] [ ID ] ] [ ( true ) ] ] int var ID : [ ] int ] bool }",
  "func ID ( ) : [ ] [ { var ID : [ ID 123 ID [ [ ] [ ID ] ] [ ( true ) ] ] int var ID : [ ] int ] bool }",
  "func ID ( ) { return ID [ ( false - 123 ( true - ID ) ] } func ID * ) { }",
  "func ID ( return { ) ID [ ( false - 123 ( true - ID ) ] } func ID * ) { }",
  "func ID ( return { ) ID [ ( false - 123 ( ID - true ) ] } func ID * ) { }",
  "func ID ( ID : [ ) bool ) { var ID : [ ( ID - false ] ] bool }",
  "func ID ( ID : [ var bool ) { ) ID : [ ( ID - false ] ] bool }",
  "func ID ( ID : ) , ID : bool ) { print - ( ( ( false ) ) ) } func ID ( bool { }",
  "func ID ( ID : ) , ID : bool ) ) print - ( ( ( false ) ) { } func ID ( bool { }",
  "func print ( ID : ) , ID : bool ) ) ID - ( ( ( false ) ) { } func ID ( bool { }",
  "func ID ( ) : [ ] int { if ( - ID [ - ID ] [ true ] ) { } ID ) 123 } func ID ( = { }",
  "func ID ( ) : [ ] int { if ( - ID [ - ID ] func true ] ) { } ID ) 123 } [ ID ( = { }",
  "func ID ( ) : [ ] int { if ( - ID [ func ID ] - true ] ) { } ID ) 123 } [ ID ( = { }",
  "func ID ( ) : int { var ID : [ ] [ ID / ) 123 / 123 ( * ID ] [ ] int var ID : int }",
  "func ID ( ) : int { var ID : [ : [ ID / ) 123 / 123 ( * ID ] [ ] int var ID ] int }",
  "func ID ( ) : int { var ID : [ : [ ID } ) 123 / 123 ( * ID ] [ ] int var ID ] int /",
  "func ID ( ) : int ) return false + true / - ( false and 123 { / ID }",
  "func ID ( ) : int ) return false + true / - / false and 123 { ( ID }",
  ") ID ( func : int ) return false + true / - / false and 123 { ( ID }",
  "func ID ID ID : bool ) { ID [ ( ( ( false ) ) ] [ false ] = ( 123 ) { } } func ID ( ) { }",
  ") ID ID ID : bool ) { ID [ ( ( ( false func ) ] [ false ] = ( 123 ) { } } func ID ( ) { }",
  "} ID ID ID : bool ) { ID [ ( ( ( false func ) ] [ false ] = ( 123 ) { ) } func ID ( ) { }",
  "func ID ( ID : bool ) { [ ID : [ 123 / ( ID ( ) var 123 ] [ - - - true ] ) ] int }",
  "func ) ( ID : bool ID { [ ID : [ 123 / ( ID ( ) var 123 ] [ - - - true ] ) ] int }",
  "func ID ( ID : ) , ID : [ 123 and - - ID ( ) [ ID ] [ true ] and ID ] int int { }",
  "func ID ( ID : ) , ID : [ 123 and - - ID ( and [ ID ] [ true ] ) ID ] int int { }",
  "func ID ( ID : ) , ID : [ 123 and - - ID ( int [ ID ] [ true ] ) ID ] int and { }",
  "func ID ( ID : bool , ID : [ 123 and ID [ ID ( ) - ( 123 ) ] [ ( ( ID ) ) ] [ ] and ] bool ) { }",
  "func ID ) ID : bool , ID : [ 123 and ID [ ID ( ) - ( 123 ( ] [ ( ( ID ) ) ] [ ] and ] bool ) { }",
  "func ID ) ID : bool , ID : [ 123 and ID [ ID ( ) - ( 123 ( ] [ ( ( ID ) ) ] [ ] and ] bool ) { }",
  "func ID ( ID : [ ] int , ID : bool ) : bool { var ID : [ ( ( - ID ) : ] int var ID ) bool }",
  "func ID ( ID : [ ] int , ID : bool ) : bool { var ID : [ ( ( - ID ) : ] int var ID ) bool }",
  "func ID ( ID : [ ] int , ID : bool ) : bool { var ID : [ ( ( - ID ) : int ] var ID ) bool }",
  "- ID ( ) : [ ID ( ID ( false / func ID / ID ) ) ] int { }",
  "- ID ( ) : [ ID ( ID ( false / func ID / ID ) ) ] int { }",
  "- ID ( / : [ ID ( ID ( false ) func ID / ID ) ) ] int { }",
  "func ID ( ID : bool ) : int { var ID : [ false + ] * ID ( ) - - false true [ ] int }",
  "- ID ( ID : bool ) : int { var ID : [ false + ] * ID ( ) func - false true [ ] int }",
  "- ID ( ID : bool ) : int { var ID : [ false + int * ID ( ) func - false true [ ] ] }",
  "func ID ( ID : int , ID : [ - true ) true - ( - ( - false ) < ] [ ] int ) { }",
  "func ID ] ID : int , ID : [ - true ) true - ( - ( - false ) < ( [ ] int ) { }",
  "func ID ] ID : int , ID : [ - true ) true - ( - ( - false ) < ( [ ] int ) { }",
  "func ID ( ID : int , ID : bool [ { var ID : ) ] bool return ( - - true ) }",
  "( ID ( ID : int , ID : bool [ { var ID : ) ] bool return func - - true ) }",
  "( ID ( ID : int , ID : bool [ { var ID : ) ] bool return func - - true ) }",
  "func int ( ID : bool , ID : int ) : bool { var ID : ID call ID ( ID ( ( 123 ) ) ) } func ID ( ) { }",
  "func int ( ID : bool , ID : int ) : bool var { ID : ID call ID ( ID ( ( 123 ) ) ) } func ID ( ) { }",
  "func ) ( ID : bool , ID : int ) : bool var { ID : ID call ID ( ID ( ( 123 ) int ) } func ID ( ) { }",
  "func ID ( ) { if ( true / ( ID ) ID ( ) ) { } }",
  "func ID ( ) { if ( true / ( ID ) ID ( ) ) { } }",
  "func ID ( ) { if ( ( / ( ID ) ID true ) ) { } }",
  "func ID ( ) { { ID = 123 * true ( - ID ) ) * ( } }",
  "func ID ( ) * { ID = 123 * true ( - ID ) ) { ( } }",
  "func ID ( ) * true ID = 123 * { ( - ID ) ) { ( } }",
  "func ID ( ID : int ( : int { var ID : [ ] [ ] int var ID : [ ( - ID ) ] int } func ID ) ) { }",
  "func ID ( ID : int ( ] int { var ID : [ ] [ ] int var ID : [ ( - ID ) : int } func ID ) ) { }",
  "func ID ( ID : int ( ] int { var ID : [ ] [ ] int var ID : [ ( - ID ) : ID } func int ) ) { }",
  "func ID ( ID : call ) : bool { return } func ID ( ID : bool , ID : bool ) { print ID int ID ( ) }",
  "func ID ( ID : call ) : bool { return } func ID int ID : bool , ID : bool ) { print ID ( ID ( ) }",
  "func ID ( ID : call ) ID bool { return } func : int ID : bool , ID : bool ) { print ID ( ID ( ) }",
  "func { ( ) ID var ID : bool ID ( ) = ID ( ID / true * false ) { } } func ID ( ) { }",
  "func { ( ) ID bool ID : var ID ( ) = ID ( ID / true * false ) { } } func ID ( ) { }",
  "func { ( ) ID bool ID : } ID ( ) = ID ( ID / true * false ) { } var func ID ( ) { }",
  "func ID ID ) { var ID : [ ] int if ID [ - - 123 * - ID * 123 ] { } } func ( ( ) { }",
  "func ID ID ) { var ID : ID ] int if [ [ - - 123 * - ID * 123 ] { } } func ( ( ) { }",
  "func ID if ) { var ID : ID ] int ID [ [ - - 123 * - ID * 123 ] { } } func ( ( ) { }",
  "} ID ( ) { while ( ( ( ID [ 123 ] ) ) ) { } func func ID ( ) { }",
  "} ID ( ) { { ( ( ( ID [ 123 ] ) ) ) { } func func ID ( ) while }",
  "} ID ( ) { { ( ( ( ) [ 123 ] ) ) ID { } func func ID ( ) while }",
  "func ID ( ) : [ ] int { var ID : [ ] [ ] int var ID : bool return } ID ) } func ID ( ) { (",
  "func ID ( ) : [ ] int { var ID : [ ] [ ] int var ID : bool return } ID ) } func ID ( ) { (",
  "func ID ( ) : [ ] int { var ID : [ ] [ ] int var ID : bool return } { ) } func ID ( ) ID (",
  "func ID ( ID : [ true / ID [ - false / ID [ ( ( - ID ) ) ] [ ID ] [ ID ] ] [ ] / ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ true / ID [ - false / ID [ ( ( - ID ) ) ] [ ID ] [ ID ] ] [ ] / ] int ) { } func ID ( } { )",
  "func ID ( ID : [ true / ID [ - false / ID [ ( ( - ID ) ) ] [ ID ) [ ID ] ] [ ] / ] int ) { } func ID ( } { ]",
  "func ID ( ) { ] ID : bool print 123 * ID ( ) [ false * ID / ( true ) var / - - ID }",
  "func ID ( ) { ] ID : bool print 123 } ID ( ) [ false * ID / ( true ) var / - - ID *",
  "func bool ( ) { ] ID : ID print 123 } ID ( ) [ false * ID / ( true ) var / - - ID *",
  "func ID ( ) : bool { var ID : bool ID true ) [ - ( * 123 * ( - ID ) ] = ID }",
  "func ID ( ) : bool { var ID : bool ID ] ) [ - ( * 123 * ( - ID ) true = ID }",
  "func ID ( ) : bool { ID ID : bool var ] ) [ - ( * 123 * ( - ID ) true = ID }",
  "func ID ( ID : int , ID : int ID ID : [ - , ( 123 / ID ( ) ) ] [ ] bool ) { }",
  "func ID ( ID : int , ID } int ID ID : [ - , ( 123 / ID ( ) ) ] [ ] bool ) { :",
  "func ID ( ID : int , ID } int ID ID : [ - , ( 123 / ] ( ) ) ] [ ID bool ) { :",
  "func ID ( ) : [ ] * - ( ( ID [ - - ID ] [ - - - - ID ] ) ) 123 [ ] [ ] [ ] [ ] bool { }",
  "func ID ( ] : [ ] * - ( ( ID [ - - ID ) [ - - - - ID ] ) ) 123 [ ] [ ] [ ] [ ] bool { }",
  "func ID ( ] : [ ] * - ( ( ID [ - - ID ) [ - - - - ID ] ) ) 123 [ ] [ ] [ [ ] ] bool { }",
  "= ID ( ID : bool ) { ID ( ) func ( ( - - ( - ( ID ) ) ) ) }",
  ") ID ( ID : bool ) { ID ( ) func ( ( - - ( - ( ID ) = ) ) }",
  ") ID ( ID : bool ) { ID ( ) func ( ( ) - ( - ( ID - = ) ) }",
  "func ID ( ID : int , ID : int ) : int ID if ( ID [ false ] [ ID ] ) { } print { } func ID ( ) { }",
  "func ID ( ID : int ( ID : int ) : int ID if ( ID [ false ] [ ID ] ) { } print { } func ID , ) { }",
  "func ID ( ID : int ( ID : int ) : int ID if ( ID [ false ] [ ID ] ) { } print { } func ID , ) { }",
  "func ID ( ) var bool { var ID : int : ID : [ ] bool print ID [ - - ( ID ) ] [ false ] while - ID { } }",
  "func ID ( ) var bool { var ID : int : ID : [ ] bool ] ID [ - - ( ID ) ] [ false print while - ID { } }",
  "func ID ( ) var bool { var ID : int : ID : [ ] bool ] ID [ - - ( { ) ] [ false print while - ID ID } }",
  "func ID ( ) { var ID : bool var ID : bool print - - ( false * { - 123 / - ( - ID ) ) ID = ID } func ID ( ) - }",
  "func ID ( ) { var ID : bool var - : bool print - - ( false * { - 123 / - ( - ID ) ) ID = ID } func ID ( ) ID }",
  "func { ( ) ID var ID : bool var - : bool print - - ( false * { - 123 / - ( - ID ) ) ID = ID } func ID ( ) ID }",
  "func ID ( ID : int , ID : [ - - false ) ( ID ( 123 ) * / 123 ] int ) { }",
  "func ID : ID : int , ID ( [ - - false ) ( ID ( 123 ) * / 123 ] int ) { }",
  "func ID : ID : int , ID ( [ - { false ) ( ID ( 123 ) * / 123 ] int ) - }",
  "func ID ( ) : bool , ID : [ ] bool ID { call ID ( - - 123 < 123 ) ID = ID } func ID ( ) { }",
  "func ( ( ) : bool , ID : [ ] bool ID { call ID ID - - 123 < 123 ) ID = ID } func ID ( ) { }",
  "func ( ( ) : ( , ID : [ ] bool ID { call ID ID - - 123 < 123 ) ID = ID } func ID bool ) { }",
  "func ID ( ) { print - ) true * - - ( ( - - ( ID ) ) ) ( print ( ID ) } func ID ( ) { }",
  "func ID ( ) { print - ) true * - - ( ( ) - ( ID ) ) ) ( print ( ID - } func ID ( ) { }",
  "func ID ( ) { print - ) true * - - ( ( ) - ( ID ) ) ) ( print ( ID - ID func } ( ) { }",
  "func ID ( ) : bool { var ID : int var ID ] [ ID [ ID ( false ) ] : int }",
  "func ID ( ) : bool { var ID : int var ID ] ID [ [ ID ( false ) ] : int }",
  "] ID ( ) : bool { var ID : int var ID func ID [ [ ID ( false ) ] : int }",
  "func ID ( ) { print - true / ID [ ( ( 123 ) ) ] / if ID ) ( true { } } func ID ( ) { }",
  "func ID ( ) { print - true / ID ) ( ( 123 ) [ ] / if ID ) ( true { } } func ID ( ) { }",
  "func ID ID ) : int { var ( : [ ( ID ( ) [ ( ( - - - ID ) ) ] ) ] bool }",
  "func ID ID ) : int { var ( : [ ( ID ( ) [ ( ( - - - ID ) ) ] ) ] bool }",
  "func ID ID ) : int ] var ( : [ ( ID ( ) [ ( ( - - - ID ) ) ] ) { bool }",
  "func ID ( ) : int { false ID ( ) - if and ID / ID / ID and - ( false ) { } call ID ( ) }",
  "and ID ( ) : int { false ID ( ) - if func ID / ID / ID and - ( false ) { } call ID ( ) }",
  "func ID ( ID : bool , ID : int ) : bool { var ID : bool ] ID : [ ID [ ID var ] [ ] [ ] bool }",
  "func ID ( : : bool , ID : int ) ID bool { var ID : bool ] ID : [ ID [ ID var ] [ ] [ ] bool }",
  "func ID ( : , bool : ID : int ) ID bool { var ID : bool ] ID : [ ID [ ID var ] [ ] [ ] bool }",
  "func ID ( ID , int : ID : bool , ID : int ) : int { var ID : int }",
  "func ID ( ID , int : ID : : , ID : int ) bool int { var ID : int }",
  "func ID ( ID , : : ID : : , ID int int ) bool int { var ID : int }",
  "func ID ( ID : bool ) : int { return func } ID ( ) { return }",
  "func ID ( ) : bool ID : int { return func } ID ( ) { return }",
  "func ID ( ) : bool ID func int { return : } ID ( ) { return }",
  "func ID ( ) { var ID : int var ID : [ ] int { ID ( ) = - 123 ( - / ( true ) ) / - ( - ( - false ) ) } print 123 }",
  "func ID ( ) { var ID 123 int var ID : [ ] int { ID ( ) = - : ( - / ( true ) ) / - ( - ( - false ) ) } print 123 }",
  "func ID ( ) { var ID 123 int var ID : [ ] int { ID ( ) = - : ( - / ( true ) ) / - } - ( - false ) ) ( print 123 }",
  "func ID ( ID : bool ) { var ID : bool call ID ( 123 123 - ID ( ( / ) ) ) }",
  "func ID ( ID : bool : { var ID ) bool call ID ( 123 123 - ID ( ( / ) ) ) }",
  "func ID ( ID : bool : { var ID ) bool call ID ( 123 123 / ID ( ( - ) ) ) }",
  "func ID ( ) { call ID ( ID } ) [ ID [ 123 ] [ ( ID ) ] ] [ ID ] ) while ID { ( }",
  "func ID ( ) { call ID ( ID } ) [ ID [ 123 ] [ ( ID ) ] ] [ ID while ) ] ID { ( }",
  "func ID ( ) var { ID : int var ID : int }",
  "func ID ( ) var int ID : int var ID : { }",
  "func ID ( ) var int ID : int var ID : { }",
  "func ID ( ) : [ ( 123 * ( 123 * - true * - true ) ] ) bool { }",
  "func ID ) ) : [ ( 123 * ( 123 * - true * - true ) ] ( bool { }",
  "func - ) ) : [ ( 123 * ( 123 * - true * ID true ) ] ( bool { }",
  "func ID ( ) : ID ( ID [ ID ( [ ) ] [ ID ] ) ] [ ] int { }",
  "func ID ( ID : ID ( ID [ ) ( [ ) ] [ ID ] ) ] [ ] int { }",
  "func ID ( ID : ID ( ID [ ) ( [ { ] [ ID ] ) ] [ ] int ) }",
  "func ID ( ID : int , ID [ [ - ( - ID - 123 * 123 / ( ( ID ) ) ) ] : ] bool , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID [ [ - ( - ID - 123 * 123 / ( ( ID ] ) ) ] : ] bool , ID : [ ) int ) { } func ID ( ) { }",
  "func ID ( [ : int , ID ID [ - ( - ID - 123 * 123 / ( ( ID ] ) ) ] : ] bool , ID : [ ) int ) { } func ID ( ) { }",
  "func ID ( ID : bool ) { while 123 / - ID [ ID [ ( false ) ] [ ID ] ] [ ( ID ) ] { } print 123 } func ID } ) { (",
  "func ID ( ID : bool ) { while 123 / - ID ID ID [ ( false ) ] [ [ ] ] [ ( ID ) ] { } print 123 } func ID } ) { (",
  "func ] ( ID : bool ) { while 123 / - ID ID ID [ ( false ) ] [ [ ] ] [ ( ID ) ID { } print 123 } func ID } ) { (",
  "func ID ( ID : [ ] int ) : int { var ID : int print true ID - - - false / = ( false ) }",
  "var ID ( ID : [ ] int ) : int { func ID : int print true ID - - - false / = ( false ) }",
  "var ID ( ID : [ ] int ) : int { func ID : ID print true int - - - false / = ( false ) }",
  "func ID ( ) : ( { call ID ( bool ID == ( 123 ) ) ) }",
  "func ID ( ) : ( { call } ( bool ID == ( 123 ) ) ) ID",
  "func ID ( ID : [ ] [ , int ] ID : bool , ID : bool ) : [ ID ( ID ) ] [ ] [ ] int { } func ID ( ) { }",
  "func ID ( ID : [ ] [ , ] ] ID : bool , ID : bool ) : [ ID ( ID ) ] [ int [ ] int { } func ID ( ) { }",
  "func ID ( ID : [ ] [ , ] ] ID : bool , ID : bool ) : [ ID ( ID ) ] [ int [ ] int { } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) ( var ID : bool var ID : int { var ID : int call ID ( 123 ) print ID } } func ID { ) { }",
  "func ID ( ID : bool , ID print bool ) ( var ID : bool var ID : int { var ID : int call ID ( 123 ) : ID } } func ID { ) { }",
  "func ID ( ID : bool , ID print bool ) ( var ID : bool var ID : int { var ID : int call ID ( 123 ) : ID } } func } { ) { ID",
  "func ID ( ) : bool { if ID / - false / ID } true * ( ( true ) ) ] [ ID ] { [ ID = ( ( - ( ( true ) ) ) ) } func ID ( ) { }",
  "func ID ( ) : bool { if ID / - false / ID } true * ( ( true ) ) ] [ ID ] ( [ ID = ( ( - ( { true ) ) ) ) } func ID ( ) { }",
  "func ID ( ) : bool { if ID / - false / ID } true * ( ( true ) - ] [ ID ] ( [ ID = ( ( ) ( { true ) ) ) ) } func ID ( ) { }",
  "func ID ( ) : int { ID = - ID ( ) / - false ( ID ) * ( - ID ) { } }",
  "func ID ( ) : int { ID - - ID ( ) / = false ( ID ) * ( - ID ) { } }",
  "{ ID ( ) : int { ID - - ID ( ) / = false ( ID ) * ( - ID ) func } }",
  "func ID ( ID : int ] ID : bool , ID : [ ] int ) : [ - - ID ( 123 ) , bool { } func ID ( ) { }",
  "func ID ( ID : int ] ID : bool , ID : [ 123 int ) : [ - - ID ( ] ) , bool { } func ID ( ) { }",
  "func ID ( ID : int ] ID : bool , ID : [ 123 int ) : [ - - ID ( ] ) , bool func } { ID ( ) { }",
  "func ID , ID : [ ] bool ( ID : [ ] bool ) : int { print false - true / - true + 123 } func ID ( ) { }",
  "func ID , ID : [ ] bool ( ID : [ ] bool ) : int { { false - true / - true + 123 } func ID ( ) print }",
  "func ID , ID : [ ] bool 123 ID : [ ] bool ) : int { { false - true / - true + ( } func ID ( ) print }",
  "func ID ( ) { var ID : bool ID [ - ID [ ID ( ) [ ] ] 123 [ ID ] ] = ( 123 ) while ID { } }",
  "func ID ( ] { var ID : bool ID [ - ID [ ID ( ) [ ] ] 123 [ ID ) ] = ( 123 ) while ID { } }",
  "func ID ( ] ID var ID : bool ID [ - ID [ ID ( ) [ ] ] 123 [ { ) ] = ( 123 ) while ID { } }",
  "func ID ( ID : [ ] bool , bool : int , ID : ID ) { var ID : [ ] int if - ID { } } func ID ( ) { }",
  "func ID ( ID : ID ] bool , bool : int , ID : ID ) { var ID : [ ] int if - [ { } } func ID ( ) { }",
  "func ID ( ID : ID - bool , bool : int , ID : ID ) { var ID : [ ] int if ] [ { } } func ID ( ) { }",
  "func ID ( ) : bool ) var ID : int { } call ID ( true + ID [ 123 ] { }",
  "func ID ( ) : bool ) var ID } int { : call ID ( true + ID [ 123 ] { }",
  "func ID ( ) : bool ) var ID } int ( : call ID { true + ID [ 123 ] { }",
  "func ID ( ID ( int ) : int { var ID : int } func ID : ID : int ) : [ ( - false ) ] bool { }",
  "func ID ( ID ( int ) : int { var ID : int } func ID : ID : int ) : [ ( - bool ) ] false { }",
  "func ID ( ID ( int ) ] int { var ID : int } func ID : ID : int ) : [ ( - bool ) : false { }",
  "func ID ( ] : [ ] int , ID : [ true * ( - ID ( ( ( ( - ( ( ( - - ID ) ) ) ) ) ) ) ) / false ID int ) { } func ID ( ) { }",
  "func ID ( ] : [ ] int , ID : [ { * ( - ID ( ( ( ( - ( ( ( - - ID ) ) ) ) ) ) ) ) / false ID int ) { } func ID ( ) true }",
  "func ID ( ] : [ ] int , ID : [ { * ( - ID ( ( ( ( - ( ( ( - - true ) ) ) ) ) ) ) ) / false ID int ) { } func ID ( ) ID }",
  "func ID ( ) { if ( 123 <= false / true / 123 ( ( - - - - ( - 123 ) ) ) + ( ID ) ) { } }",
  "func ID ( ) { if ( 123 <= false / true / 123 - ( - - ( - ( - 123 ) ( ) + ) ID ) ) { } }",
  "func ID ( ID : bool , ID [ [ - 123 + - ID [ - 123 / ID / ( ID ) ] - true ] : ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID [ [ - 123 + - ID [ - 123 / ID / ( ID ) ] - true ] : ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID [ [ - 123 + - ID / - 123 / ID [ ( ID ) ] - true ] : ] bool , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : int , ID : bool ) : int { ID [ ID ( - ] [ ) true ] = false }",
  "func ID ( ID : [ ] bool , ID : int , ID : : ) bool int { ID [ ID ( - ] [ ) true ] = false }",
  "func ID ( ID : false ] bool , ID : int , ID : : ) bool int { ID [ ID ( - ] [ ) true ] = [ }",
  "func ID ( ) : bool { return ( false * ID [ ID * ( - ID ) / true ] [ ( - { 123 ) ) ] / true ) } func ID ( ) ( }",
  "func ID ) ) : bool { return ( false * ID [ ID * ( - ID ( / true ] [ ( - { 123 ) ) ] / true ) } func ID ( ) ( }",
  "func ID ) ) : bool { return ( false * ID [ ID * ( - ID ( / true ] [ ( - { 123 ) ) ] / true ID } func ) ( ) ( }",
  "func ID ( ID : [ ] [ ID bool ) { while ] [ ID ( ) [ - ID ] [ ( ID ) ] ] { } ID = ID }",
  "func ID ( ID : [ ] [ ID ) ) { while ] [ ID ( ) [ - ID ] [ ( ID bool ] ] { } ID = ID }",
  "func ID ( ID : [ ] [ ID ) ) { while ] [ ID ( [ [ - ID ] ) ( ID bool ] ] { } ID = ID }",
  "func ID / ID : int ) { var ID : [ false ( ID + ID ( ) [ - ( false ) ] + ( ID ) ] bool var ID : bool }",
  "func ID / ID : int ) { var [ : [ false ( ID + ID ( ) ID - ( false ) ] + ( ID ) ] bool var ID : bool }",
  "func ID / ID : ) int { var [ : [ false ( ID + ID ( ) ID - ( false ) ] + ( ID ) ] bool var ID : bool }",
  "ID func ( ID : int , ID : [ ] bool , ID : bool ) { var ID : bool var ID : int ID [ false ] [ false ] = 123 ID = - - ( ( ID ) ) } func ID ( ) { }",
  "ID func ( ID : : , ID : [ ] bool , ID int bool ) { var ID : bool var ID : int ID [ false ] [ false ] = 123 ID = - - ( ( ID ) ) } func ID ( ) { }",
  "ID - ( ID : : , ID : [ ] bool , ID int bool ) { var ID : bool var ID : int ID [ false ] [ false ] = 123 ID = func - ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ID [ : ] bool , ID : [ ] int ) { }",
  "func ID ( ID [ : ] bool , ID { [ ] int ) : }",
  "func ID ( ID [ : ] bool ID , { [ ] int ) : }",
  "func ID ( ID : [ true + ID [ ID ( - ( ) ] [ ( ID 123 ) ) ] ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ true + ID [ ID ( - ( ) ] [ ( ID 123 ) ) { ] [ ] int ) ] } func ID ( ) { }",
  "func ID } ID : [ true + ID [ ID ( - ( ) ] [ ( ID 123 ) ) { ] [ ] int ) ] } func ID ( ) { (",
  "func ID ( ) { var : ID [ ] bool var ID : [ ] [ ] bool while ID ( ) [ ID ] [ ID ] { } call ID ( ) }",
  "func ID ( ) { var : ID [ ] bool var ID : [ ] [ ] bool while ID ( ) [ } ] [ ID ] { } call ID ( ) ID",
  "func ID bool ) { var : ID [ ] ( var ID : [ ] [ ] bool while ID ( ) [ } ] [ ID ] { } call ID ( ) ID",
  "func ID [ ) : int { var ID : bool var ID : [ true * - - ( ( ID ) ) ] ( ] [ ] bool }",
  "func ID [ ) : int { var ID : bool var ID : [ true * ) - ( ( ID - ) ] ( ] [ ] bool }",
  "func ID [ ) : ID { var ID : bool var int : [ true * ) - ( ( ID - ) ] ( ] [ ] bool }",
  "ID ID ( ID : bool ) { var ID : int var func : bool return - - false and false } func ID ( ) { }",
  "ID ID bool ID : bool ) { var ID : int var func : ( return - - false and false } func ID ( ) { }",
  "ID ID bool ID var bool ) { var ID : int : func : ( return - - false and false } func ID ( ) { }",
  "func ID ( ) { var ID : [ - - - ( ID [ ID ) ] ] int var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ - - - ( ID [ ID ) ] ] int var ) : [ ] bool } func ID ( ID { }",
  "false ID ( ID : [ - - ID [ ( ID ( ( 123 ) ) ) ] [ func ] ] int ) { }",
  "false ID ( ID func [ - - ID [ ( ID ( ( 123 ) ) ) ] [ : ] ] int ) { }",
  "false ID ( ID func [ - - ID [ ( ID ( ( 123 ) ) ) ] [ : int ] ] ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) : [ 123 / ( 123 func ( ID ) ) ] [ ] [ ] bool { } / ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ID : [ 123 / ( 123 func ( ID ) ) ] [ ] [ ] bool { } / ) ( ) { }",
  "func ) ( ID : int , ID : bool , ID : bool ID : [ 123 / ( 123 func ( ID ) ID ] [ ] [ ] bool { } / ) ( ) { }",
  "func ID ( [ : bool , ID : [ ] int ) : bool { var ID : ID ] bool return ( ( ID ) ) }",
  "func return ( [ : bool , ID : [ ] int ) : bool { var ID : ID ] bool ID ( ( ID ) ) }",
  "func return ( [ : bool , ID : [ ] int ) : : { var ID bool ID ] bool ID ( ( ID ) ) }",
  "func ID ( ID : [ true / 123 * ( ( ID ( 123 ) ) ) ] int ) ) } func ID ( { { }",
  "func ID ( ID : [ true / { * ( ( ID ( 123 ) ) ) ] int ) ) } func ID ( 123 { }",
  "func ID ( ID : [ true / { { ( ( ID ( 123 ) ) ) ] int ) ) } func ID ( 123 * }",
  "func ID ( ) ID var ID : int var ID : [ { ( false and ID ) ] bool } func ID ( ) { }",
  "func ID ( ) ID var ID : int var ID : [ { ( false and ID ) ] func } bool ID ( ) { }",
  "func ID ( ) ID var ID : int var ID : [ { ( false and ID ) ID func } bool ] ( ) { }",
  "func ID ( ID : [ ID [ ( true * - ( ] / ID * ID ) / true ) ] bool ) { }",
  "func } ( ID : [ ID [ ( true * - ( ] / ID * ID ) / true ) ] bool ) { ID",
  "func } ( ID : [ ID [ ( true * - ( ] ID ID * ID ) / true ) ] bool ) { /",
  "func ID ( ) { var ID : bool var ID : [ ( { ID * ( ( - 123 ) ) ) ] [ ] bool } func ID ( ) - }",
  "func ID ( ) { var ID ID bool var ID : [ ( { : * ( ( - 123 ) ) ) ] [ ] bool } func ID ( ) - }",
  "func ID ( ) ( var ID ID bool var ID : [ { { : * ( ( - 123 ) ) ) ] [ ] bool } func ID ( ) - }",
  "func ID ( ) : [ ) int { var ID : int var ID : int call ID ( ] return }",
  "func ID ( ID : [ ] [ ] [ ( false / ) * ID ( ) [ ID ] false ] [ ] [ ] int ) { }",
  "func ID ( ID : [ ] [ ] [ ( false / ) * ID ( ) [ ID ] false ] [ ] [ ] int ) { }",
  "func ID ( ID ) [ ] [ ] [ ( false / : * ID ( ) [ ID ] false ] [ ] [ ] int ) { }",
  "func ID ( ID : } ) { } func ID ( ) { print ID ( ) [ ID ] [ - ( ID ) ] bool",
  "func } ( ID : } ) { ID func ID ( ) { print ID ( ) [ ID ] [ - ( ID ) ] bool",
  "func } ( ID : } ) { ID func ID ( ) { print ( ( ) [ ID ] [ - ID ID ) ] bool",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : [ ] bool { call ) ( - 123 ID call ID ( ) } print ID } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { bool ID : [ ] var { call ) ( - 123 ID call ID ( ) } print ID } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { bool ID : [ ] var { call ) ( - 123 ( call ID ID ) } print ID } func ID ( ) { }",
  "func ID ( ) } var ID : bool print ( ID [ true * 123 ] [ false ] ) while - false { } { func ID ( ) { }",
  "func ID ( ) } var ID : bool print ( ID [ true while 123 ] [ false ] ) * - false { } { func ID ( ) { }",
  "func ID ( ) : [ - ] < ID ( ) [ false / - - ( - ID ) 123 [ 123 ] ] bool { }",
  "func [ ( ) : [ - ] < ID ( ) ID false / - - ( - ID ) 123 [ 123 ] ] bool { }",
  "func [ ( ) : [ - ] < ID ( ) ID false / - - ( { ID ) 123 [ 123 ] ] bool - }",
  "func ID ( ID : int ) { var ID : - while ID ( - int false * - 123 ) { } if - ID { } }",
  "func ID ( { : int ) ID var ID : - while ID ( - int false * - 123 ) { } if - ID { } }",
  "func ID ( { : int ) ID var ID : - while ID - - int false * - 123 ) { } if ( ID { } }",
  "func ID ( ID : bool ) - var ID : int { var ID : bool { var ID : bool var ID : int } return { - ( ( ID ) ) } if - ID { } }",
  "func ID ( ID : bool ) - var ID return int { var ID : bool { var ID : bool var ID : int } : { - ( ( ID ) ) } if - ID { } }",
  "func ID ( ID : bool ) - var ID return int { var ID : bool { var ID : bool var ID : int } : ( - { ( ID ) ) } if - ID { } }",
  "func ID ( ) { var ID : [ ] [ ] func var ID : bool { ID ( true ) = ( - ( ( 123 ) ) ) } } int ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] func var ID ID bool { ID ( true ) = ( - ( ( 123 ) ) ) } } int : ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] func var ID { bool ID ID ( true ) = ( - ( ( 123 ) ) ) } } int : ( ) { }",
  "func ID ( ) { var ID : bool var ID : int print ID ( ID ( ) { - ( true ) ] ) if ( ( - - true ) ) [ } } func ID ( ) { }",
  "func ID ( ) { true ID : bool var ID : int print ID ( ID ( ) { - ( true ) ] ) if ( ( - - var ) ) [ } } func ID ( ) { }",
  "func ( ( ) { true ID : bool var ID : int print ID ( ID ( ) { - ( true ) ] ) if ID ( - - var ) ) [ } } func ID ( ) { }",
  "func ID ( ID : bool , ID ] int ) { var ID : [ - true - - - - ( false ) + - ID : bool } func ID ( ) { }",
  "func ID ( ID : bool , ID ] int ) { var ID : [ - true - - - - ( false ) + - ID : bool } func ID ( ) { }",
  "func - ( ID : bool , ID ] int ) { var ID : [ - true - - - ID ( false ) + - ID : bool } func ID ( ) { }",
  "func ID : ID : int , ID ( [ ( true - ID [ - 123 ] [ ( - - false ) ] + ID ) ] [ ] [ ] [ ] bool ) { }",
  "func ID : ID : int , ID ( [ ( true - ID [ - 123 ] [ ( - - false ) ] + ID ) ] ] ] [ ] [ [ bool ) { }",
  "func ID : ID : int , ID ( [ ( true - ID [ - 123 ] [ ( - - false ) ] + ID } ] ] ] [ ] [ [ bool ) { )",
  "func ID ( ID : int , ID : bool , ID : bool ) : bool { var ID : int { var { : int var ID : int } call ID ( ) } func ID ( ) ID }",
  "func ID var ID : int , ID : bool , ID : bool ) : bool { var ID : int { var { : int ( ID : int } call ID ( ) } func ID ( ) ID }",
  "func ID var ID : int , ID : bool , ID : ( ) : bool { var ID : int { var { : int bool ID : int } call ID ( ) } func ID ( ) ID }",
  "func ID ( ) bool return } func ID ( ) { var ID : [ ] { var ID : int while - - ( 123 ) { } }",
  "func ID ( ) bool return } func ID var ) { var ID : [ ] { ( ID : int while - - ( 123 ) { } }",
  "func ID ( ) bool return } func ID var ) { var ID : [ ] { ( ID : int while - - ( 123 ) { } }",
  "func ID ( ID : bool , ID : int ) { var ID } [ 123 * true or - false or ID ] bool } func ID ( ) { :",
  "func ID ( ID : bool , ID : [ ) { var ID } int 123 * true or - false or ID ] bool } func ID ( ) { :",
  "func ID ( ID : bool , ID : [ ) { var func } int 123 * true or - false or ID ] bool } ID ID ( ) { :",
  "func ID ( ) : [ ID / 123 * 123 + false * ID * ID ] ) ( bool { } func ID ( ) { }",
  "123 ID ( ) : [ ID / 123 * func + false * ID * ID ] ) ( bool { } func ID ( ) { }",
  "123 ID ( ) : [ ID / 123 * func + false * ID * ID ] ) ID bool { } func ( ( ) { }",
  "func ID ( ) : [ ID ( ID [ ( - true ) ] [ false ] ) { [ ] int ] } func ID ( ) { }",
  "func ID ( ) : [ ID ( ID [ ( - true ) ] [ false ] ) { [ ] int ] } func ID ( ) { }",
  "func ID ] ) : [ ID ( ID [ ( - true ) ( [ false ] ) { [ ] int ] } func ID ( ) { }",
  "func ID ( ID : [ 123 or ID * ID [ ID ( ) ] [ ( ID ) ] 123 123 or / ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ 123 or ID * ID or ID ( ) ] [ ( ID ) ] 123 123 [ / ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ 123 or ID * ID or ID 123 ) ] [ ( ID ) ] 123 ( [ / ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int while true * ( call ( ) [ ( - true ) ] [ ( - 123 ) ] ) { } ID ID ( ) }",
  "func ID ( ) { var ID : int while true * ( call ( ) [ ( - true ) ] [ ) - 123 ) ] ( { } ID ID ( ) }",
  "func ID ( ) { var ID : int while true } ( call ( ) [ ( - true ) ] [ ) - 123 ) ] ( { * ID ID ( ) }",
  "func ID ( ID : [ ID [ - 123 * - - ID ( - ] ) ] [ - false ID ] [ ] bool ) { }",
  "func ID ( [ : [ ID [ - 123 * - - ID ( - ] ) ] ID - false ID ] [ ] bool ) { }",
  "func ID * [ : [ ID [ - 123 ( - - ID ( - ] ) ] ID - false ID ] [ ] bool ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] [ ] [ ] ID ) : bool { var int : int ID [ ID ] [ - 123 ] = true while false { } } func ID ( ) { }",
  "func ID ( ID : bool , ID int bool , ID : [ ] [ ] [ ] ID ) : bool { var int : : ID [ ID ] [ - 123 ] = true while false { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : int print ID ( - ID true if ( ) ) { } }",
  "bool ID ( ID : int , ID : func , ID : bool ) { var ID : int print ID ( - ID true if ( ) ) { } }",
  "bool ID ( ID : int , ID : func { ID : bool ) { var ID : int print ID ( - ID true if ( ) ) , } }",
  "func ID ( ID : [ ] bool , ID : bool ) 123 call ID ( ) ID [ - - { ] [ true ] = ( ID ) }",
  "func ID ( ID : [ ] bool , ID : bool ) 123 call ID ( ) ID [ - - { ] [ = ] true ( ID ) }",
  "func ID ( ID - [ ] bool , ID : bool ) 123 call ID ( ) ID [ - : { ] [ = ] true ( ID ) }",
  "func ID ( ) { var ID : ID var ID : bool print int ( ID ( ID ) ) }",
  "func ID ( ) { var ID } ID var ID : bool print int ( ID ( ID ) ) :",
  "func ID ( ) { var ID } ID ) ID : bool print int ( ID ( ID var ) :",
  "func ID ( ID : int , ID : ) ) { call ID ( ) return } func ID ( ID : [ ] bool bool : bool { }",
  "func ID ( ID : : , ID int ) ) { call ID ( ) return } func ID ( ID : [ ] bool bool : bool { }",
  "func ID ( ID : : , ID int ) ) { call ID ( bool return } func ID ( ID : [ ] bool ) : bool { }",
  "func ID ( ID : bool , ID : [ - int ) { var ID : int var ID : int return ] - ( true ) }",
  "func ID ( ID : bool , ID : [ - int ) { var ) : int var ID : int return ] - ( true ID }",
  "func ID ( ID : bool , ID : [ - int ) { var ) : int var ID : int return ] ( - true ID }",
  "func ID ( ) { ID ( - 123 >= [ [ false / false / false ] ID ID ] ) = true print false } func ID ( ) { }",
  "/ ID ( ) { ID ( - 123 >= [ [ false / false func false ] ID ID ] ) = true print false } func ID ( ) { }",
  "/ ID ( ) { ID ( - 123 >= [ [ false / false func false ] ID ID ] ) = true print false } func ID ( ) { }",
  "func ID ( ) [ return ( ID ( ) { - ( ID ) ] ) }",
  "func ( ID ) [ return ( ID ( ) { - ( ID ) ] ) }",
  "func return ID ) [ ( ( ID ( ) { - ( ID ) ] ) }",
  "func ID ( ) : int { } func ID ( ) ] [ ] [ ] [ ( ID ) ] [ ] [ : bool { }",
  ") ID ( func : int { } func ID ( ) ] [ ] [ ] [ ( ID ) ] [ ] [ : bool { }",
  ") ID ( ( : int { } func ID func ) ] [ ] [ ] [ ( ID ) ] [ ] [ : bool { }",
  "func ID ( ID : int , ID : [ ] int , ID : [ ( ID ( ( 123 ) ) ) func bool ) { } ] ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ID : [ ( ID ( ) 123 ) ( ) func bool ) { } ] ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ID : { ( ID ( ) 123 ) ( ) func bool ) { } ] ID ( ) [ }",
  "func ID ( ID : bool ) : var ID { int { ID = ID / true / ID } }",
  "func ID ( ID : bool ) : var ID { int { ID = ID / true / ID } }",
  "func int ( ID : bool ) : var ID { ID { ID = ID / true / ID } }",
  "func ID ) ( { var ID : bool } func ID ( ) { { call ID ( 123 / - ( ID ) ) } }",
  "func ID ) ( ( var ID : bool } func ID ( ) { { call ID ( 123 / - { ID ) ) } }",
  "func ID ( ) : int { var ID : int var ID : int if ( / - ( true * ID ) { } while ( ( 123 - 123 ) ) ) { } }",
  "func ID ( ) : int { var ID : ) var ID : int if ( / - ( true * ID ) { } while ( ( 123 - 123 ) int ) { } }",
  "func ID ( ) : int { var ID : ) var ID : int if ( / ) ( true * ID - { } while ( ( 123 - 123 ) int ) { } }",
  "func ID ( ) { var ID : [ true * 123 / true bool ID * ( ID ) ] - }",
  "func ID ( ) { var ID : [ true * 123 / true ( ID * bool ID ) ] - }",
  "func ID ( ) ( var ID : [ true * 123 / true { ID * bool ID ) ] - }",
  "func ] ( ID : int , ID : [ ] int , ID : [ 123 * ID [ ID ID [ ID ] / ID ] [ ] int ) { } func ID ( ) { }",
  "func ] ( ID : ID , int : [ ] int , ID : [ 123 * ID [ ID ID [ ID ] / ID ] [ ] int ) { } func ID ( ) { }",
  "func ] ( { : ID , int : [ ] int , ID : [ 123 * ID [ ID ID [ ID ] / ID ] [ ] int ) ID } func ID ( ) { }",
  "func ID ( ID : [ ( 123 / ) ( ) + ID [ ( - 123 ) ] ID ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ( 123 / ) ( ) + ( [ ( - 123 ) ] ID ] [ ] int ) { } func ID ID ) { }",
  "func ID ( ID : [ ( 123 / ) ( ) + } [ ( - 123 ) ] ID ] [ ] int ) { ( func ID ID ) { }",
  "func ID ( ID ) bool , ID : int : : int { var ID : bool call ID ( ) return ( false ) }",
  "func ID ( ID ) bool , ID : ( : : int { var ID : bool call ID int ) return ( false ) }",
  "[ ID ( ID : [ ( ID [ ID ( ) [ - ( ID ) ] ] ) ] func ] int ) { }",
  "[ ID ( ID : [ ( ID [ ID ( ) [ - ( ID ) ] ] ) ] func ] int ) { }",
  "[ ID ( ID : [ ( ID ) ID ( ) [ - ( ID [ ] ] ) ] func ] int ) { }",
  "func ID ( ID : [ ] bool ) false [ ( ( 123 / ( ( ( ( ID ) ) ) ) * - ( ( : ) ) ) ) ] int { }",
  "func ID ( ID : [ ] bool ) false [ ( ( 123 / ( ( ( ( ID ) ) ) ) * ) ( ( : ) - ) ) ] int { }",
  "func ID ( ID : [ ] bool ) false [ ( ( 123 / ( ( ( ( ID ) ) ) ) * ) ( ( : ) - ) } ] int { )",
  "func bool ( ID : bool ) : bool { var ID : ID return }",
  "func bool ( ID : bool ) : bool { var ID : ID return }",
  ": bool ( ID func bool ) : bool { var ID : ID return }",
  "func ID ( ID ] int , ID : [ ] [ false * - true / ID ( - - true ) ] [ : bool , ID : bool ) { }",
  "func ID ( bool ] int , ID : [ ] [ false * - true / ID ( - - true ) ] [ : ID , ID : bool ) { }",
  "func ID ( bool ] int , ID : [ ] [ false * - true / ID ( ID - true ) ] [ : ID , - : bool ) { }",
  "func ID ( : : bool , ID : [ ] int , ID ID [ ] [ ( ( - - - ID ) ) ] int ) { } func ID ( ) { }",
  "func ID ( [ : bool , ID : [ ] int , ID ID [ ] : ( ( - - - ID ) ) ] int ) { } func ID ( ) { }",
  "func ID ( [ : bool , ID : [ ] int , ID ID [ ] : ( ( - - - ID ) ) ] ( ) { } func ID int ) { }",
  "func ID ( ID : ) ( - ID ( ) and ID ( ) [ ID ] [ ] bool ) { }",
  "func ID ( ID : ) ( - ID ( ) and ID ( ] [ ID ] [ ) bool ) { }",
  "func ID ( ID : ) ID - ( ( ) and ID ( ] [ ID ] [ ) bool ) { }",
  "func ID ( ) : ) ( ID ( ( - ( ID ) ) ) ) ] int { } func ID ( [ { }",
  "func ID ( ) : ) ( ID ( ( - ( ID ) ) ) ) ] int { } func ID ( [ { }",
  "func ID ( ) : ) ( ID ( ( - ( ID ) ) ) ) ] int { } func ID ( [ { }",
  "func ID ( ) { var ID : [ ) 123 * true * ID [ true / false / ( true - ] [ ID ] ] bool }",
  "func ID ( ) { var ID : [ ) 123 * true * ID [ } / false / ( true - ] [ ID ] ] bool true",
  "func ] ( ) { var ID : [ ) 123 * true * ID [ } / false / ( true - ID [ ID ] ] bool true",
  "func ID ( ID true [ ID ( ) [ ( ( ID ( ) ) ) ] [ : ] ] [ ] bool ) { }",
  "[ ID ( ID true func ID ( ) [ ( ( ID ( ) ) ) ] [ : ] ] [ ] bool ) { }",
  "[ ID ( ID func true ID ( ) [ ( ( ID ( ) ) ) ] [ : ] ] [ ] bool ) { }",
  "func ID ( ) { var ID : [ true + ID ( - - ( true ) ) int [ ] ] var ID : bool } func ID ( ) { }",
  "func [ ( ) { var ID : ID true + ID ( - - ( true ) ) int [ ] ] var ID : bool } func ID ( ) { }",
  "func ID var ) : bool { ( ID : [ ] int call ID ( ) }",
  "func } var ) : bool { ( ID : [ ] int call ID ( ) ID",
  "func ID ( ID : [ ] bool ) : bool { var ID : [ ] [ ID [ ID ] [ 123 ] func int } ] ID ( ) { }",
  "func ID ( ] : [ ] bool ) : bool { var ID : [ ] [ ID [ ID ID [ 123 ] func int } ] ID ( ) { }",
  "func ID ( ] : [ ] bool ) : bool { var ID : [ ID [ ID [ ID ] [ 123 ] func int } ] ID ( ) { }",
  "func ID ( ID : [ : int ) ] int { var ID : bool var ID : [ ID ( - - - ID ) ] int } func ID ( ) { }",
  "func ID ( ID : [ : int ) ] int { var ID : bool var ID : [ ID ( - - - ID ) ] int } ( ID func ) { }",
  "func ID ( ID : [ : int ) ] [ { var ID : bool var ID : int ID ( - - - ID ) ] int } ( ID func ) { }",
  "func ID ( ID : int { : [ ] int { return } func ID ( ID : bool , ID : int ) ) ID ( ) = ID }",
  "func ID ( ID : int { : [ ] int { return } func ID ( ID ( bool , ID : int ) ) ID : ) = ID }",
  "func ID ( ID : int { ID [ ] int { return } func ID ( ID ( bool , ID : int ) ) ID : ) = : }",
  "func ( ID ID : int , ID : [ ] int , ID : int ) : bool { var ID : [ ] [ 123 * ( ID ) * ID ] bool } func ID ( ) { }",
  "func ( ID ID : int , ID : [ ] int , ID : int ) ) bool { var ID : [ ] [ 123 * ( ID ) * ID ] bool } func ID ( : { }",
  ", ( ID ID : int func ID : [ ] int , ID : int ) ) bool { var ID : [ ] [ 123 * ( ID ) * ID ] bool } func ID ( : { }",
  "func ID ( ) : [ ID ( - ( ( ID [ ID ] [ ( false ) ] ) ) ) ] int } {",
  "] ID ( ) : [ ID ( - ( ( ID [ ID ] [ ( false ) func ) ) ) ] int } {",
  "] ID ( ) : [ ID ( - ( ( ID [ ID ) [ ( false ) func ) ) ] ] int } {",
  "func ID ( ID : int , ID : bool , ID : bool ) : [ ] { bool var ID : [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) bool [ ] { bool var ID : [ ] [ ] : } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) bool [ ] { bool var ID : [ ] } ] : [ func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool while ID ( - { ID [ true ] ) - } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool { ID ( - while ID [ true ] ) - } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool { ID ( - } ID [ true ] ) - } } func ID ( ) { while",
  "func ID ( ) [ : ] int { var ID : [ ] int var ID : int ID [ true * 123 / ID ] = true ID = - false }",
  "func [ ( ) [ : ] int { var ID : ID ] int var ID : int ID [ true * 123 / ID ] = true ID = - false }",
  "ID func ( ) : bool { var ID : int } func ID ( ) : [ ] int { call ID ( ) print ( true ) }",
  "ID func ( ) : bool { var ID } int } func ID ( ) : [ ] int { call ID ( ) print ( true ) :",
  "ID func ( ) : bool { var ID } int } func ID ( ) : [ ] int { ( ID call ) print ( true ) :",
  "func ID ( { : int , ID : bool ) : int { } func ID ( ID : [ - ( true ) ] [ ] [ ] int ) ID }",
  "func ID ( { : int , ID : bool ) : int { } func ID ( ID : [ - ( ] ) true [ ] [ ] int ) ID }",
  "func ID ( { : int , ID : bool ) : int { } func ID ( ID : [ - ( ] ) true [ ID [ ] int ) ] }",
  "func ID ( ) : [ [ ( ID [ ( - ID ) ] ) ] - ] bool { } func ID ( ) { }",
  "func ID ( ) : ID [ ( ID [ ( - ID ) ] ) ] - ] bool { } func [ ( ) { }",
  "func ID ( ) : ID [ ( ID [ ( - ID ) ] ) ] - ) bool { } func [ ( ] { }",
  "func ID ( ID : [ ] bool , ID : int , ID : false ) : int { return - - bool / ( ID ) / - ID }",
  "func ID ( ID : [ ] bool , ID : int , ID : false ) : int { return - - bool / ( ID ) / ID - }",
  "func ID ( ID : [ ] bool , ID : int , ID : false ) : int { ( - - bool / return ID ) / ID - }",
  "func ID : ) { var ID ( bool if - 123 * false or ID [ 123 ] { } } func ID ( ) { }",
  "func ID : { { var ID ( bool if - 123 * false or ID [ 123 ] ) } } func ID ( ) { }",
  "func ID : { * var ID ( bool if - 123 { false or ID [ 123 ] ) } } func ID ( ) { }",
  "func ID ( ) { var - : int var ID : int while ID ID ( ) / false - ( - ID ) { } }",
  "func ID ( ) { var - : int var ID : int ID ID ID ( ) / false - ( - while ) { } }",
  "func ID ( ) { var - : int var - : int ID ID ID ( ) / false - ( ID while ) { } }",
  "func ID ( ID : bool : ID : int , ID , bool ) { if true * - - - - ID ( ) / ID { } { } }",
  "func ID ( ID : bool / ID : int , ID , bool ) { if true * - - - - ID ( ) : ID { } { } }",
  "func ID ( ID : bool / ID : int if ID , bool ) { , true * - - - - ID ( ) : ID { } { } }",
  "func ID ( ID : int ) { call ID ( ID ( true / true ( - - ( == - false ) ) ) ) } func ID ( ) { }",
  "func func ( ID : int ) { call ID ( ID ( true / true ( - - ( == - false ) ) ) ) } ID ID ( ) { }",
  "func func ( ID : int ) { call ID ( ID ( true / true ( ) - ( == - false ) - ) ) } ID ID ( ) { }",
  "func ID ( ID : [ - - - - ( ID ( / ) - - - - ( ID ) ) ] int ) { }",
  "func - ( ID : [ - - - ID ( ID ( / ) - - - - ( ID ) ) ] int ) { }",
  "func - ( ID : [ - - - ID ( ID ( / ) - - - - ( ID ) ) ] int ) { }",
  "func ID ( ID : [ ] [ false [ ] [ ( true or false or - ] ) ] [ ] int ) { }",
  "func ID ( ] : [ ] [ false [ ] [ ( true or false or - ] ) ID [ ] int ) { }",
  "func ID ( ) : [ - false * } * ID - ( ( 123 ) ) - - ID ] bool { } func ID ( ) { true",
  "} ID ( ) : [ - false * func * ID - ( ( 123 ) ) - - ID ] bool { } func ID ( ) { true",
  "func ID ( ID [ bool , ID : int ) { var ID : [ ] bool return } func ID ( ) : [ ] : ID ] int { }",
  "func ID ( ID [ bool , ID : int ) { var ID : [ ] bool return int func ID ( ) : [ ] : ID ] } { }",
  "ID ID ( func : bool , ID : int , ID : bool ) : int { return }",
  "ID ID ( func : bool , ID : int , ID : bool ) : int { return }",
  "ID ID ( func : bool , ID : int , ID : bool ) : int { return }",
  "func var ( ID : [ ] int ) : bool { var ID : int ID ID : bool print - ID ( true ) }",
  "func var ( ID : [ ] int ) : bool int var ID : { ID ID : bool print - ID ( true ) }",
  "func var ( ID : [ ] int ) : bool int var ID : { ID ID : bool print - ID ( true ) }",
  "func ID ( ) { int ID : var var ID : bool } func ID ( ID : bool , ID : int , ID : int ) : [ 123 ] bool { }",
  "func ID ( ) { int ID : var var ID : bool } func ID ID ID : bool , ID : int , ( : int ) : [ 123 ] bool { }",
  "var ID ( ) { int ID : var func ID : bool } func ID ID ID : bool , ID : int , ( : int ) : [ 123 ] bool { }",
  "func ID ( ) * var ID : [ 123 { 123 / ID ( ( false ) ) ] bool var ID : int }",
  "func ID ( ) : bool { var ID : func while true * ID ( ) [ ( - 123 ) ] { } } int ID ( ) { }",
  "func ID ( ) } bool { var ID : func while true * ID ( ) [ ( - 123 ) ] { : } int ID ( ) { }",
  "func ID ( ) } bool { var ID : func while true * ID ( ) [ - ( 123 ) ] { : } int ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : / var ID : int if 123 int true * - ID { } if ( ID ) { } }",
  "func ID ( ) : [ ] bool - var ID : / var ID : int if 123 int true * { ID { } if ( ID ) { } }",
  "func ID ( ID : [ - false / true { - ID ( - ID ) ] bool ) == }",
  "func ID ( ID : [ - false / ) { - ID ( - ID true ] bool ) == }",
  "func ID ( ID var bool ) { : ID : [ ] int return }",
  "func ID ( ID var bool ) { ] ID : [ : int return }",
  "func ID ( bool var ID ) { ] ID : [ : int return }",
  "func ID ( ID : bool , ID : int ) { var ID : return var ID : int bool }",
  "func ID ( ID : bool , ID : int ) { var ID : return var ID : int bool }",
  "func ID ( ID : bool , ID : int ) { var ID : return var ID : int bool }",
  "func ID ( ) : bool { print - ( ID + - ( } ) ) { } } func ID ( ) { ID",
  "func ID ( ( : bool { print - ( ID + - ) } ) ) { } } func ID ( ) { ID",
  "func ID ( ( : bool { print - ( ID + - ) } ) ) { } } func ID ( ) { ID",
  "func ID ( ) { var ID : var bool ID : int ID ( true * - false / ( - ( ( ID ) ) ) ) = ID }",
  "func ID ( ) { var ID : var bool ID : int ID ( true / - false * ( - ( ( ID ) ) ) ) = ID }",
  "func ID ( ) { var ID : var bool ID : int ( ( true / - false * ID - ( ( ID ) ) ) ) = ID }",
  "func ID ( ) { var ID : int while print * true * ( - ( 123 ) ) { } true - - - ( true ) }",
  "func ID ( ) ( var ID : int while print * true * ( - ( 123 ) ) { } true - - - { true ) }",
  ") ID ( ) { var ID : bool var ID : [ - ( ( ( false ) ) func ] bool } func ID ( ) { }",
  ") [ ( ) { var ID : bool var ID : ID - ( ( ( false ) ) func ] bool } func ID ( ) { }",
  ") ID ( ) { var ID : bool var [ : ID - ( ( ( false ) ) func ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool ] ID : [ var bool return } func ID ( ) { var ID : [ ( false ) ] int var ID : bool }",
  "func [ ( ) { var ID : bool ] ID : ID var bool return } func ID ( ) { var ID : [ ( false ) ] int var ID : bool }",
  "func [ ( ) { var ID : ] bool ID : ID var bool return } func ID ( ) { var ID : [ ( false ) ] int var ID : bool }",
  "func ID ( ID : int ) : } ] int { [",
  "func ID ( ID : int { : } ] int ) [",
  "func ID ( ID : int { } : ] int ) [",
  "func ID ( ID bool : ) : int { return } func ID ( ) : int { { var ID : int } ID = ID }",
  "func ID ( ID bool : ) : int { return } { ID ( ) : int func { var ID : int } ID = ID }",
  "func ID ( ID bool : ) } int { return } { ID ( ) : int func { var ID : int } ID = ID :",
  "func ID ( ) { var ID : [ ] bool var ID : bool return 123 >= 123 * } - - - ( ( true ) ) ) * ID } func ID ( ) { (",
  "func ID ( ) { var ID : [ ] bool var ID - bool return 123 >= 123 * } - : - ( ( true ) ) ) * ID } func ID ( ) { (",
  "func ID ( ) { var ID : ) ] bool var ID - bool return 123 >= 123 * } - : - ( ( true ) [ ) * ID } func ID ( ) { (",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : bool if 123 * - 123 * ( ID ) ( } print ID } func ID { ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : bool if 123 ) - 123 * ( ID * ( } print ID } func ID { ) { }",
  "func ID ( ID : int , ID ID bool , ID : int ) { var ID : bool if 123 ) - 123 * ( : * ( } print ID } func ID { ) { }",
  "func ID ( ) : bool ) while - 123 / - true * - ( ID ( ) ) { } } func ID ( { { }",
  "func ID ( ) : bool ) while - 123 / - true * ID ( - ( ) ) { } } func ID ( { { }",
  "func ID ( ) : bool ) while - } / - true * ID ( - ( ) ) { 123 } func ID ( { { }",
  "func ID ( ) { var ID return int : ID [ - ID + ( ID ) + ( - ( true ) ) ] [ true ] } func ID ( ) { }",
  "func ID ( ) { var ID return int : ID [ - ID + ( ID ) + ( - ( true ) ) ] [ true ] } func ID ( ) { }",
  "func ID ( ) { var ID return int : ID [ - ID + ( ID ) + ( - ( true ] ) ) [ true ] } func ID ( ) { }",
  "func ID ( ID : bool ) : ) { var ID : int var ID : [ ( ( - ( ( true ) ) ) ) ] int } func ID ( bool { }",
  "func ID ( ID : bool ) : ) { var ID : int var ID : [ ( ( - ( ( true ) ) ) ) ] int ( func ID } bool { }",
  "func ID ( ID : bool ) : ) { var ID ( int var ID : [ ( : - ( ( true ) ) ) ) ] int ( func ID } bool { }",
  "func ID ( ID : bool ) { var ID : bool var ID : [ ] bool call ID ( ) { var ID : int var : ID [ ] int } }",
  "func ID ( ID : bool bool { var ID : ) var ID : [ ] bool call ID ( ) { var ID : int var : ID [ ] int } }",
  "func ID ( ID : bool bool int var ID : ) var ID : [ ] bool call ID ( ) { var ID : { var : ID [ ] int } }",
  "func ID ( ID : , bool ID : bool ) : bool { var ID : [ ( - ( ID ) ) ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID : , bool ] : bool ) : bool { var ID : [ ( - ( ID ) ) ID bool var ID : int } func ID ( ) { }",
  "func ID ( ID ( , bool ] : bool ) : bool { var ID : [ ( - : ID ) ) ID bool var ID : int } func ID ( ) { }",
  "func ID ( - : [ ] bool , ID : int ) { while - ID ID [ 123 ] { } } func ID ( ) { }",
  "func ID ( - : : ] bool , ID [ int ) { while - ID ID [ 123 ] { } } func ID ( ) { }",
  "func ID ( - : : ] bool , ID [ int 123 { while - ID ID [ ) ] { } } func ID ( ) { }",
  "func ID int ID : ( , ID : bool , ID : [ - - ID ( ID / ( - ID ) / false ) ] [ ] int ) { }",
  "func ID int ID : ( , ID : bool } ID : [ - - ID ( ID / ( - ID ) / false ) ] [ ] int ) { ,",
  "func ID int ID : ( , ID : bool } ID : [ - - , ( ID / ( - ID ) / false ) ] [ ] int ) { ID",
  "func ID ( : ID bool , ID : bool ) { var ID : bool var ID : bool } func ID ( ) : bool { var ID : bool return }",
  "func ID ( : ID bool , ID : bool ) { var ID : bool var ID : bool } func ID ( ) { bool : var ID : bool return }",
  "func ID ( : ID bool , ID : bool ) { return ID : bool var ID : bool } func ID ( ) { bool : var ID : bool var }",
  "func ID ( ID : [ ( - - 123 > ( - ( ( ( false ) ) ) ) ) ] [ ] { ) { } func ID ( ) bool }",
  "func ID ( ID : [ ( - - 123 > ( - ( ( ) false ) ) ( ) ) ] [ ] { ) { } func ID ( ) bool }",
  "] ID ( ID : [ ( - - 123 > ( - ( ( ) false ) ) ( ) ) ] [ func { ) { } func ID ( ) bool }",
  "bool ID ( ID : [ true / - - ( - - ( - false ) ) * ID ] func ) { }",
  "bool ID ( ID : [ true / - - ( - - ) - false ( ) * ID ] func ) { }",
  "bool ID ( ID : [ true / - - ( - ) ) - false ( - * ID ] func ) { }",
  "func ID ( ) : [ ] [ int [ ] ] { var ID : int print 123 / - true - false - 123 } func ID ( ) { }",
  "func ID ( ) : [ ] [ - [ ] ] { var ID : int print 123 / - true - false int 123 } func ID ( ) { }",
  "func ID ( ) { var ID : 123 [ + true * ( - ID ( ( true ) ) ) ] bool }",
  "true ID ( ) { var ID : 123 [ + true * ( - ID ( ( func ) ) ) ] bool }",
  "true ID ( ) { var ID : 123 [ + true * ( - ID ( ( func ) ) ) ] bool }",
  "func ID ( ) * var ID : [ ] int if ( ( ID / ( false ) { - ID ) ) { } }",
  "func ID ( if * var ID : [ ] int ) ( ( ID / ( false ) { - ID ) ) { } }",
  "func ID ( ) : int { var ID ( [ ID [ true - : ID ) ] [ ID ] ] [ ] [ ] bool var ID : int }",
  "func ID ( ) : int { var ID ( [ ID [ true - : ID ) ] [ ID ] ] [ ] [ ] bool var ID : } int",
  "[ ID ( ) : int { var ID ( [ ID [ true - : ID ) ] [ ID ] ] func ] [ ] bool var ID : } int",
  "false ID ( ) : [ ID [ ID ( ( false * ( ID ) * ( ( - - ( - func ) ) ) ) ) ] ] bool { }",
  "false ID ( ) : [ ID [ ID * ( false * ( ID ) ( ( ( - - ( - func ) ) ) ) ) ] ] bool { }",
  "false ID ( ) : [ ID [ ID * ( false ] ( ID ) ( ( ( - - ( - func ) ) ) ) ) * ] bool { }",
  "func ID ( ) { var ID : int var ID : [ false * - ( false / / * - - true ) ID 123 ] int } func ID ( ) { }",
  "func ID ( ) { var : ID int var ID : [ false * - ( false / / * - - true ) ID 123 ] int } func ID ( ) { }",
  "func ID ( ) : [ ] [ ID [ - - - ID ( 123 ) ] [ - ID } ] int { ] func ID ( ) { }",
  "func ID ( ) : [ ] [ ID [ - - - ID ( 123 ) ] ) - ID } ] int { ] func ID ( [ { }",
  "func ID ( ID : bool ) { var ID : [ ] * ID [ - - - ID 123 [ ID ] / ID ] bool }",
  "] ID ( ID : bool ) { var ID : [ ] * ID [ - - - ID 123 [ ID func / ID ] bool }",
  "] ID ( ID : bool ) { var ID : [ 123 * ID [ - - - ID ] [ ID func / ID ] bool }",
  "func ID ( ID : [ ] int , ID : bool , ( : [ ] [ ] bool ) { var ID : [ ] bool var ID : int } func ID ID ) { }",
  "func ID ( ID : [ ] int , ID : bool , ( : [ ] [ ] bool ) { } ID : [ ] bool var ID : int var func ID ID ) { }",
  "func ID ( ] : [ ] int , ID : bool , ( : [ ] [ ] bool ) { } ID : [ ID bool var ID : int var func ID ID ) { }",
  "func ID ( ID : int ) : [ ] bool { } func { ( ) : bool ID var ID : bool print ( false ) }",
  "func ID ( ID : int ) : [ ] bool { } func { ( ) : bool ID var ID : bool print ( false } )",
  ": ID ( ID : int ) func [ ] bool { } func { ( ) : bool ID var ID : bool print ( false } )",
  "func ID ID ID : int ) { var ( : bool var ID : bool }",
  "func ID ID ID : int ) : var ( : bool var ID { bool }",
  "ID ID ID func : int ) : var ( : bool var ID { bool }",
  "func ID ( ) : int { var ID : int var ID : int ID [ ID [ true ] ] [ ] true = - 123 print ID } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : int ID [ ID [ true ] ] [ ] true = ( 123 print ID } func ID - ) { }",
  "func ID ( ) : int { var ID : int var ID : int ID [ ID [ true ] ] [ ] true = ( } print ID } func ID - ) { 123",
  "func ID ( ) : int { var ID : int var ID : int if ( ( false ) ( { } } func ID ) ) { }",
  "func ID ( ) : int { var ID : int var ID : ( if ( ( false ) int { } } func ID ) ) { }",
  "func ID ( ) : int { ID ID : int var ID : ( if ( ( false ) int { } } func var ) ) { }",
  "func ] ( ID : int ) { var ID : bool var ID : int ID ( ID [ - - ID ID ) = true } func ID ( ) { }",
  "func ] ( ID : int ) { var ID : ID var ID : int ID ( ID [ - - ID bool ) = true } func ID ( ) { }",
  "func ] ( ID : } ) { var ID : ID var ID : int ID ( ID [ - - ID bool ) = true int func ID ( ) { }",
  "{ ID ( ) : int { while ( - ( - true ) / true ) func } if ID { } } func ID ( ) { }",
  "{ ID ( ) : int { while ( - ( true - ) / true ) func } if ID { } } func ID ( ) { }",
  "{ ID ( ) ID int { while ( - ( true - ) / true ) func } if ID { } } func : ( ) { }",
  "func ID ( ) { var ID : } var ID : bool print 123 - - - ID ( - ID ) if ( false ) { } bool",
  "func ID ( ) { var ID : } var ID : bool print 123 - - - ID ( - ID ) if ( false ) { } bool",
  "ID func ( ) { var ID : } var ID : bool print 123 - - - ID ( - ID ) if ( false ) { } bool",
  "func ID ( ) { ID while ( ( ( ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ) { ID while ( ( ( ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ) { ID ID ( ( ( ID ) ) ) { } } func while ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { ID [ ID ( - - ( false ) ) ) ] [ ID ] = ( - 123 print true }",
  "123 ID ( ID : bool , ID : int ) : int { ID [ ID ( - - ( false ) ) ) ] [ ID ] = ( - func print true }",
  "123 ID ( ID : ) , ID : int ) : int { ID [ ID ( - - ( false bool ) ) ] [ ID ] = ( - func print true }",
  "func ) ( ID : int { if ID [ ( ( ID ) ) ] { } }",
  "func ) ( ID : int [ if ID { ( ( ID ) ) ] { } }",
  "func ) ( ID : int [ if ID { ( ( ID ) ) ] { } }",
  "func ID ( ( : bool { { while ID [ - - ID ( ) [ - ( false ) ] ] [ ) ID ) ] { } } } func ID ( ) { }",
  "func ID ( ( : bool { { } ID [ - - ID ( ) [ - ( false ) ] ] [ ) ID ) ] { } } while func ID ( ) { }",
  "func ID ( ( : bool { { } ID [ - [ ID ( ) - - ( false ) ] ] [ ) ID ) ] { } } while func ID ( ) { }",
  "ID ID ( ID : int ) : int { ID = - ( ID [ func ] ) print true } func ID ( ) { }",
  "- ID ( ID : int ) : int { ID = ID ( ID [ func ] ) print true } func ID ( ) { }",
  "- ) ( ID : int ) : int { ID = ID ( ID [ func ] ID print true } func ID ( ) { }",
  "func ID ( ) { { var ID : bool var ID : bool while ( ( 123 ) ) { } } { ID ( ) } func ID ( ) call }",
  "func ID ( ) { { var : : bool var ID ID bool while ( ( 123 ) ) { } } { ID ( ) } func ID ( ) call }",
  "func ID ( ) { { var : : bool var ID ID bool while ( ( 123 } ) { ) } { ID ( ) } func ID ( ) call }",
  "func ID ( ) { var ID : int var ID : [ int / - ( - ( ID ) ) ] 123 } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ int / - ( - ( ID ) ) ] 123 } func ID ( ) { }",
  "ID func ( ) { var ID : int var ID : [ int / - ( - ( ID ) ) ] 123 } func ID ( ) { }",
  ": ID ( ID : bool , ID : int ) func bool { return } func ID ( ID : [ - - - 123 ] bool ) { }",
  ": ID ( ID : bool , ID : int ) func bool { return } func ID ( ID : [ - - 123 - ] bool ) { }",
  ": ID ( ID : bool , ID : int ) func bool { return ID func ID ( } : [ - - 123 - ] bool ) { }",
  "func ID ( ID : int , ID : int ) { var ID : bool call ID + true ( ID ( ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID + int ) { var ID : bool call ID : true ( ID ( ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID + int ) { var ID : bool call ID : true ( ID ( ) ) } func ID ( ) { }",
  "func ID ( ID : [ ( ID [ ( ID ( ( - ( ID ) ) { ) ] ) ] bool ) ) } func ID ( ) { }",
  "func ID ( ID : [ ( ID [ ( ID ( ( - ( ID ) } { ) ] ) ] bool ) ) ) func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) ID : [ - ID ( ( - ( ID ) ) ) ] bool , { }",
  "func ID ( ID : bool , ID : - ) ID : [ - ID ( ( bool ( ID ) ) ) ] bool , { }",
  "func ID ( ID : bool , ID : [ ] [ - ( [ - - ID true 123 ] [ ID ] - true ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] ID - ( [ - - [ true 123 ] [ ID ] - true ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] ID - ( [ - - [ true 123 ) [ ID ] - true ) ] bool ] { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID : int return ID ( ) ) ID ( ID * / ( ( ID ) ) }",
  "func ID ( ID : int ) : var ID { int var ID : int return ID ( ) ) ID ( ID * / ( ( ID ) ) }",
  "func ID ( ID ) int ) : var ID { int var ID : int return ID ( ) ) ID ( ID * / ( ( ID : ) }",
  "func ( ( ID : int ) { var ID : int var ID : [ 123 < ID ( ) / false * ( true ) ] bool } func ID ID ) { }",
  "func ( ( ID : int ) { var ID : int var ID : [ 123 < ID ( ID / false * ( true ) ] bool } func ID ) ) { }",
  "{ ID ( ) { var ID : bool if 123 > ( - ID * 123 / ID ) func } }",
  "{ ID ( ) { var ID : bool if 123 > - ( ID * 123 / ID ) func } }",
  "{ ID ( ) ) var ID : bool if 123 > - ( ID * 123 / ID { func } }",
  "- ID ( ID : [ - - ID [ ( ( func ID ) ) ] ] bool ) { }",
  "- ID ( ID : [ - - ID [ ( ( func ID ) ) ] ] bool ) { }",
  "- ID ( ID - [ - : ID [ ( ( func ID ) ) ] ] bool ) { }",
  "func ID ( ) { var ID : [ ] [ ID ( ( ( ID ) ) ) ] ( } func ID int ) { }",
  "[ ID ( ) { var ID : [ ] func ID ( ( ( ID ) ) ) ] ( } func ID int ) { }",
  "[ ID ( ) { var ) : [ ] func ID ( ( ( ID ) ID ) ] ( } func ID int ) { }",
  "func ID ( ID : bool , ID : int ) : int { var ID : [ true ) ID [ - ID ] [ - ( ( ID * ) ] ] [ ] bool }",
  "func ID ( ID : int , ID : [ ( ID ( ID - ID ) ID ) - ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ( ID ( ID - ID ) ID ) - ) bool ) { } func ID ( ] { }",
  "func ID } ID : [ true >= ( false + ( - ID ) - ( - - ID ) ) ] int ) { } func ID ( ) { (",
  "func ID } func : [ true >= ( false + ( - ID ) - ( - - ID ) ) ] int ) { } ID ID ( ) { (",
  "( ID } func : [ true >= ( false + ( - ID ) - func - - ID ) ) ] int ) { } ID ID ( ) { (",
  "func ID ( bool : int , ID : [ ] [ ] [ ] [ ] int ) : ID { var ID : bool ID = ( true ) call ID ( ) } func ID ( ) { }",
  "func ID ( bool : int , ] : [ ] [ ] [ ] [ ID int ) : ID { var ID : bool ID = ( true ) call ID ( ) } func ID ( ) { }",
  "func ID ( bool : int , ] : [ [ [ ] [ ] ] ID int ) : ID { var ID : bool ID = ( true ) call ID ( ) } func ID ( ) { }",
  "func ID ( - { var ID : bool if ( ( ) ID ( ) [ ( 123 ) ] [ ID ] ) ) { } } func ID ( ) { }",
  "func ID ( - { var ID : bool if ( ( ) ID ( func [ ( 123 ) ] [ ID ] ) ) { } } ) ID ( ) { }",
  "func ID ( - { var ID : bool if ( ( ) ) ( func [ ( 123 ) ] [ ID ] ) ) { } } ) ID ( ID { }",
  "func ID ( ID : int , ID : bool ) { var ID : int while - - 123 / - 123 + 123 - true { } } func ID ( { ) }",
  "func ID ( ID : int , ID : bool ) { var } : int while - - 123 / - 123 + 123 - true { } } func ID ( { ) ID",
  "func ID ( ID : int , ID : bool ) { var } : int while - - } / - 123 + 123 - true { } 123 func ID ( { ) ID",
  "func ID } ID : int ) : bool { } func ID ( ) : int { var ID : bool var ID : bool if ID { ( }",
  "func ID } ID : int ) : func { } bool ID ( ) : int { var ID : bool var ID : bool if ID { ( }",
  "func ID } ID : int ) : func { } bool ID ( ) : int { var ID : } var ID : bool if ID { ( bool",
  "func ID ( ) { { ID : bool while ID [ ( - ( - - ID ) ) ] var } ID = ID } func ID ( ) { }",
  "func ID ( ) { { ID : bool while ID [ ( - ( - - ID ) ) ] var } ID = ID } func ID ( ) { }",
  "func ID ( ) { { ID : bool { ID [ ( - ( - - ID ) ) ] var } ID = ID } func ID ( ) while }",
  "ID func ( ID : [ ] int , ID : [ true - false >= ID ( ) [ - ID ] [ ID ] ] [ ] int , ID : [ ] int ) { }",
  "ID func ( ID : [ ] int , ID : [ true - false >= ID ( ) [ - ID ] [ ID ] ] [ ] int , ID : [ ] int ) { }",
  "ID func ( ID : [ ] int , ID : [ true - false >= ID ( ) [ - ID ] [ ID ] ] [ ] int , ID : [ ] int ) { }",
  "func ID ( ID : int , ID : [ false * - false - - false + - ID ) * ( true ] int , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ false ] - false - - false + - ID ) * ( true * int , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ false ] - false - - func + - ID ) * ( true * int , ID : int ) { } false ID ( ) { }",
  "func ID - ID : int ) : [ ( - ( ( false + true + ( ( false ) ) ) ) ] bool { }",
  "func ID + ID : int ) : [ ( - ( ( false + true - ( ( false ) ) ) ) ] bool { }",
  "func ID + ID : int ) : [ ( - ( ( false + true - ( ( false ) ) ) ) bool ] { }",
  "func ID ( ) : int { } ID : [ ] [ ] [ ] bool var",
  "func ID ( ) : int } { ID : [ ] [ ] [ ] bool var",
  "func ID ( ) ) { var ID : int ID ( ) = ( - ( ( ID ) { ) } }",
  "func ID ( ) ) { var ID ) int ID ( ) = ( - ( ( ID ) { : } }",
  "func ID ( ( ) { var ID ) int ID ( ) = ( - ( ) ID ) { : } }",
  "func ID ( ) { var ID : : var ID : int { var ID int int var ID : bool call ID ( ) while false { } } if - ID { } }",
  "func ID ( ) { var ID : : var ID : int { var ID int int var ID : bool call ID ( ) while false { } } if - ID { } }",
  "func ID ( ) { var ID : : var ID : int { var ID int int var ID : bool call ID ( ) while false { } } if - ID { } }",
  "func ID ( ) { [ ] [ ] bool : var ID : int return }",
  "func ID ( ) { [ ] [ ] bool : var return : int ID }",
  "func ID ( [ { [ ] ) ] bool : var return : int ID }",
  "func ID ( ) : ) ] bool { var ID : bool var ID : int if - - ( ID ) { } } func ID ( [ { }",
  "func ID ( ) : ) ] bool { var ID : bool var [ : int if - - ( ID ) { } } func ID ( ID { }",
  "func ID ( ) : { ] bool { var ID : bool var [ : int if - - ( ID ) { } } func ID ( ID ) }",
  "func ID ( ) } ID ( ) [ 123 / - ID [ - ID ] [ true ] ] [ 123 ] = ID {",
  "func ID ( ) } ID ( ) [ 123 / - ID [ - ID ] [ true ] ] [ 123 ] = ID {",
  "func ID ( ) } ID ( 123 [ ) / - ID [ - ID ] [ true ] ] [ 123 ] = ID {",
  "func ID ( ID : [ ] ) ID [ ( ( ID ) [ ] ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] { ID [ ( ( ID ) [ ] ] int ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] { int [ ( ( ID ) [ ] ] ID ) ) } func ID ( ) { }",
  "func ID ( ID : bool } : [ false * ( ID ( ) * ID / true ) * ( - ( ( ( - ID ) ) ) ) ] int { )",
  "func ID ( ID : bool } : [ false * ( ID ( ) * ID / ) ) * ( - ( ( ( - ID ) true ) ) ] int { )",
  "func ID ) ID : bool } : [ false * ( ID ( ) * ID / ) ( * ( - ( ( ( - ID ) true ) ) ] int { )",
  "func ID ( ID bool : ) : [ ] [ ( ID [ false * ID ] ) ] [ ] bool { }",
  "func ID ( ID bool : ) : [ } [ ( ID [ false * ID ] ) ] [ ] bool { ]",
  "func ID ( ID bool : { : [ } [ ( ID [ false * ID ] ) ] [ ] bool ) ]",
  "func ID ( ID : [ ] [ - ID / ID / false + true + ( ( ID ) ) ] [ ] } ) { int func ID ( ) { }",
  "func ID ( ID : [ ] [ - ID / ID / false + true + ( ( ID ) ) ] [ ] ( ) { int func ID } ) { }",
  "func ID ( ID : [ ] [ ID ID / ID / false + true + ( ( ID ) ) ] [ ] ( ) { int func - } ) { }",
  "func ID ( ID : int ) { var ID : [ ] [ ] int var ID : int { var ID : bool return } if - } ID { - } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ] [ ] int func ID : int { var ID : bool return } if - } ID { - } var ID ( ) { }",
  "func ID ( ) { var ID : [ ) ID [ 123 / 123 ] [ ID ] ) ] [ ] [ ] int } func ID ( ( { }",
  "func ID ( ) { var ID : [ ) ID [ 123 / 123 ] [ ID ] ( ] [ ] [ ] int } func ID ( ) { }",
  "/ ID ( ) { var ID : [ ) ID [ 123 func 123 ] [ ID ] ( ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool var ID : int if ID ( ) != 123 + 123 { } if ID } } { func ID ( ) { }",
  "func ID != ) : int { var ID : bool var ID : int if ID ( ) ( 123 + 123 { } if ID } } { func ID ( ) { }",
  "func ID != ) : int { var ID : bool var ID : int if ID ( ) ( 123 + ) { } if ID } } { func ID ( 123 { }",
  "func ID ( ID - int ) { while ID ( ( ID ( ) [ ID ] [ - : - ID ] ) ) { } } func ID ( ) { }",
  "func ID ( ID - int ) { while ID ( ( ID ( [ [ ID ] ) - : - ID ] ) ) { } } func ID ( ) { }",
  "func ID ( ID - int ) { while ID ( ( ID ( [ [ ID ) ) - : - ID ] ) ) { } } func ID ( ] { }",
  "func ID ( ) : bool ) : bool { var ID : bool ID ( 123 >= ( - ( ( ID ) ) ID ) = - ( 123 ) { } }",
  "func ID ( ) : bool ) : bool { var ID : bool ID ( 123 >= ( - ( { ID ) ) ID ) = - ( 123 ) ( } }",
  "func ID ( ) : bool ) : bool { var ID : bool ID ( 123 >= ) - ( { ID ) ) ID ) = - ( 123 ( ( } }",
  "func ID ( ID : bool ) : bool { while ] * ID [ ( - ID ) false [ false ] { } }",
  "func ID ( print : bool { var ID : [ ] [ ] int { return } ) false * ( false ) }",
  "func ID ( print : bool { var ID : [ [ ] ] int { return } ) false * ( false ) }",
  "} ID ( print : bool { var ID : [ [ ] ] int { return } ) false * ( false ) func",
  "func ID ( ID : int ) { return false / ID ( ) / } <= - ID false func ID ( ) { }",
  "func ( ID ID : int ) { return false / ID ( ) / } <= - ID false func ID ( ) { }",
  "func ( ID ID ( int ) { return false / ID : ) / } <= - ID false func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int return } func ( ID ID : int ) { { return ( true ) } while - - ( ( 123 ) ) { } }",
  "func ID ( ) { var ID : [ ] int return } func ( ID ID : int ) { { return ( true ) } while - - ( ( 123 ) ) { } }",
  "func ID ( ) { var ID : [ ] int return } func ( ID ID : int ) { { return ( true - } while - ) ( ( 123 ) ) { } }",
  "func ID ( ID : [ - ( true or - - ( ID ) ) ] int ) ) } func ID ( { { }",
  "func ID ( ID : [ - ( true or - - ( ID ) { ] int ) ) } func ID ( ) { }",
  "func ID ( ID : [ - ( true or - - ( ID ) { ] int ) ) } func ID ( ) { }",
  "func ID ( ) : { ] bool [ var ID : [ false * 123 - false / ( ( true ) ) / - - ID ] [ ] [ ] bool }",
  "func ID ( ) : { ] bool [ var ID : [ false * 123 - false / true ( ( ) ) / - - ID ] [ ] [ ] bool }",
  "func ID ( ID : { ] bool [ var ) : [ false * 123 - false / true ( ( ) ) / - - ID ] [ ] [ ] bool }",
  "func ID ( ID : int , ID : [ ] int , ID : bool ) : [ 123 and - false and ] false int { }",
  "func ID ( ID 123 int , ID : [ ] int , ID : bool ) : [ : and - false and ] false int { }",
  "func ID ( ID 123 int , [ : [ ] int , ID : bool ) : ID : and - false and ] false int { }",
  "func ID ) ID : int , ID : [ ] int ( { while 123 != 123 or - true { } }",
  "func } ) ID : int , ID : [ ] int ( { while 123 != 123 or - true { ID }",
  "func , ) ID : int } ID : [ ] int ( { while 123 != 123 or - true { ID }",
  "func ID ID ) : int { var ID : [ ( ID [ ( * ( ID ) ] ) ] [ ] [ ] int }",
  "func ID ID ) : int { var ID : [ ( } [ ( * ( ID ) ] ) ] [ ] [ ] int ID",
  "func ID ID ) : int { var ID : [ ( } [ ( * ] ID ) ( ) ] [ ] [ ] int ID",
  "func ID ( ID : [ ] bool , ID : bool , if : int ) : int { ID 123 / true * false { } ID = - ( ( false ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ) : bool , if : int ) : int { ID 123 / true * false { } ID = - ( ( false ) ) } func ID ( ID { }",
  "func ID ( ID : [ ] bool , ) : bool } if : int ) : int { ID 123 / true * false { } ID = - ( ( false ) ) } func ID ( ID { ,",
  "func ID ( ) : int { var ID } bool var ID : int if - - true / - - ID [ true ] [ - 123 ] / 123 { } while ( ( ( - ( ID ) ) ) ) { } } func ID ( ) { :",
  "func ID ( ) : int { var ID } bool var ID : int if - - true / - - ID [ true ] [ - 123 ] / 123 { } while ( ( ( - ( ID ) ) ) ) { } } func ID ( ) { :",
  "ID func ( ) : int { var ID } bool var ID : int if - - true / - - ID [ true ] [ - 123 ] / 123 { } while ( ( ( - ( ID ) ) ) ) { } } func ID ( ) { :",
  "func ID ( ID : [ var int , ID : int ) { var ID : bool var ID : bool return } func ID ( ) { ] ID : [ ] [ ] [ ] int }",
  "func ID ( ID : [ var int , ID ID int ) { var ID : bool var ID : bool return } func : ( ) { ] ID : [ ] [ ] [ ] int }",
  "func ID ( ID : [ var int , ID ID int ) { : ID : bool var ID var bool return } func : ( ) { ] ID : [ ] [ ] [ ] int }",
  "func ID ( ) { call ID ( false * 123 * - true - ( } ID ) ) + - ( - true ) ) print true (",
  "func ID ( ) { call ID ( false * 123 * - true - ( } ID ) ) ( - + - true ) ) print true (",
  "func ID ( ) { call ID ( false * 123 * - true ) ( } ID ) ) ( - + - true - ) print true (",
  "func ID ( ) ID int { var ID : [ ] [ ] bool var ID : [ ] bool ID ( : ) = false } func ID ( ) { }",
  "func var ( ) ID int { ID ID : [ ] [ ] bool var ID : [ ] bool ID ( : ) = false } func ID ( ) { }",
  "func var ( ) ID int { ID ID : = ] [ ] bool var ID : [ ] bool ID ( : ) [ false } func ID ( ) { }",
  "ID ID ( ID : bool , ID : [ - false * ID [ 123 / ID [ - true ] / true ] [ - ID ] / - ID ] bool , func : bool ) { } func ID ( ) { }",
  "ID ID ( ID : bool , ID : [ - false * ID - 123 / ID [ - true ] / true ] [ [ ID ] / - ID ] bool , func : bool ) { } func ID ( ) { }",
  "ID ID ( ID : bool , ID : [ - : * ID - 123 / ID [ - true ] / true ] [ [ ID ] / - ID ] bool , func false bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { ID ID : int var var : int while true + ID ( ) + - true { } }",
  "func ID ( ID : [ ] bool true { ID ID : int var var : int while true + ID ( ) + - ) { } }",
  "func ID ( ID : [ ] bool true { ID ID : int var var : ID while true + int ( ) + - ) { } }",
  "func ID ( ) : int { var ID : [ ID ( ) [ ID [ ( - - true ) ] ] ] [ ] bool var ID : int } func ID ( } { )",
  "var ID ( ) : int { var ID : [ ID ( ) [ ID [ ( - - true ) ] ] ] [ ] bool func ID : int } func ID ( } { )",
  "var ID ( ) : int { var ID : [ ID ( ) [ ID [ ( - - true ) ( ] ] [ ] bool func ID : int } func ID ] } { )",
  "func ID ( ) : int { var ID : int ( ( ID [ ( false ) ] ) } func ID print ) { }",
  "func [ ( ) : int { var ID : int ( ( ID ID ( false ) ] ) } func ID print ) { }",
  "func ] ( ) : int { var ID : int ( ( ID ID ( false ) [ ) } func ID print ) { }",
  "func ID ( ) { var ID : int while - false * ( ( 123 / } ID ) / false ) ) * ( ( ( ID ) ) ) { } ID = 123 ( func ID ( ) { }",
  "func ID * ) { var ID : int while - false ( ( ( 123 / } ID ) / false ) ) * ( ( ( ID ) ) ) { } ID = 123 ( func ID ( ) { }",
  "func ID * ) { var ID : int while } false ( ( ( 123 / } ID ) / false ) ) * ( ( ( ID ) ) ) { - ID = 123 ( func ID ( ) { }",
  "func ID ( ID : int , ID bool int , ID : int ) : [ ID ( ) [ ID [ false ] [ ID ] ] ] : { }",
  "func ID ( ID : ID , ID bool int , ID : int ) : [ ID ( ) [ int [ false ] [ ID ] ] ] : { }",
  "func ID ( ID : ] , ID bool int , ID : int ) : [ ID ( ) [ int [ false ] [ ID ] ID ] : { }",
  "func ID ( ID ( [ - ( ID [ : ID ( ) ) ] [ 123 ] ) ] int ) { }",
  "func ID ( ID ( [ - ( ID [ : { ( ) ) ] [ 123 ] ) ] int ) ID }",
  "func ID ( ID ( [ - ID ID [ : { ( ) ) ] [ 123 ] ) ] int ) ( }",
  "func ID ( ) { var ID : [ false / ( true and true / ( ( ID ) ) / 123 ) * ID ] [ ] int var ID : [ ] ] ] [ ] [ [ int }",
  "func ID ( ) { var ID : ] false / ( true and true / ( ( ID ) ) / 123 ) * ID [ [ ] int var ID : [ ] ] ] [ ] [ [ int }",
  "func ID ( ) { var ID : ] false / ( true and true / [ ( ID ) ) / 123 ) * ID [ [ ] int var ID : [ ] ] ] [ ] ( [ int }",
  "func ID ( ID : ID ) { var bool : [ ] bool ID ( ) = 123 - - - ( 123 ) }",
  "func ID ( ID : ID ) { var bool : [ ] bool ID ( ) = - - 123 - ( 123 ) }",
  "func ID ( ID : ID ) { var bool : [ ] bool ID ( ) 123 - - 123 - ( = ) }",
  "func ID ( } : [ false * true + true * - - ID ( ( 123 ) ) * - ( ID ) + ID ] int ) { ID",
  "func ID ( } : [ false * true + true * ID - - ( ( 123 ) ) * - ( ID ) + ID ] int ) { ID",
  "func ID ( ) : [ false * true + true * ID - - ( ( 123 ) ) * - ( ID ) + ID ] int } { ID",
  "func ID ( ) { var ID : ( [ ID ( ) - false * - ID + ( true ) ) ] int var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : ( [ ID ( ) ) false * - ID + ( true - ) ] int var ID : bool } func ID ( ) { }",
  "[ ID ( ) { var ID : ( func ID ( ) ) false * - ID + ( true - ) ] int var ID : bool } func ID ( ) { }",
  "func ID ( ID : ( ] bool , ID : int ) { return ( ID [ ) [ ID ] [ ID ] ) } func ID ( ) { }",
  "} ID ( ) { var ID : [ ( false * - ID [ true ] [ ( ( false ) ) ] ) ] int var ID : bool func",
  "} ] ( ) { var ID : [ ( false * - ID [ true ] [ ( ( false ) ) ] ) ID int var ID : bool func",
  "} ] ( ) { var ID : [ ( false * - ID [ true ] [ ( : false ) ) ] ) ID int var ID ( bool func",
  "func ID ( ) { while ( ( ID [ true < 123 ( [ - - ID ] ) ) { } print - ] ID ) }",
  "func ID ( ) { while ( ( ID [ true < 123 ( [ - - ID ] ) ) { } print - ] ID ) }",
  "func ID ( ) { while ( ( ID [ true < 123 - [ - - ID ] ) ) { } print ( ] ID ) }",
  "func ID ( ID : int , ID : bool ) { var ID : bool var ID : [ if int ] - 123 - ID - - 123 { } } func ID ( ) { }",
  "} ID ( ID : int , ID : bool ) { var ID : bool var ID : [ if int ] - 123 - ID - - 123 { } func func ID ( ) { }",
  "} ID ( ID : int , ID : 123 ) { var ID : bool var ID : [ if int ] - 123 - ID - - bool { } func func ID ( ) { }",
  "func ID ( ) { if false * false * 123 and - ID [ ID ] [ - true { { } if ID ] } }",
  "func ID ( ) true if false * false * 123 and - ID [ ID ] [ - { { { } if ID ] } }",
  "func ID ( ) true if - * false * 123 and false ID [ ID ] [ - { { { } if ID ] } }",
  "func ID ( ID : int { var ID : bool var ) : bool print 123 * 123 - - false * ( ID ) - ( - ID ) }",
  "func * ( ID : int { var ID : bool var ) : bool print 123 * 123 - - false ID ( ID ) - ( - ID ) }",
  "func * ( ID : int { var ID : bool var false : bool print 123 * 123 - - ) ID ( ID ) - ( - ID ) }",
  "func ID ID ID : [ true * - true / - ( [ - - - ID ] ] bool ) { } func ID ( ) { }",
  "func ID ID ID : [ true * - true / - ( [ - - - ID ] ] bool func { } ) ID ( ) { }",
  "func ID ID ID : [ true * - true ( - / [ - - - ID ] ] bool func { } ) ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ ID ( ) / ID ( ( ( - ( - ID ) ) ) ) / ( ID ) ] [ [ ] ] int ) { }",
  "func ID ( ID : int , ID : bool ) ID : [ ID ( ) / ID ( ( ( - ( - ID ) ) , ) / ( ID ) ] [ [ ] ] int ) { }",
  "func [ ( ID : int , ID : bool ) ID : [ ID ( ) / ID ( ( ( - ( - ID ) ) , ) / ( ID ) ] ID [ ] ] int ) { }",
  "func ID ID ) : int { var ( : bool return } func ID ( ID : int , ID : [ ( ID ) ] bool , ID : [ ] bool ) { }",
  "func ID ID ) : int { var ( : bool return } func ID ( ID : int , ID ID [ ( : ) ] bool , ID : [ ] bool ) { }",
  "func ID ID ) : int { var ( : bool return } func ID ( ID , int : ID ID [ ( : ) ] bool , ID : [ ] bool ) { }",
  "func ID ( ID , int : ID : int ) { var ID : bool }",
  "func var ( ID , int : ID : int ) { ID ID : bool }",
  "( var func ID , int : ID : int ) { ID ID : bool }",
  "func ID ( ID : [ ] ) true * ID + ( ( ( ID ) [ ) - ID ] [ ] [ ] [ ] int ) { }",
  "func ID ( ID : [ ] ) true * ID + ( ( ( ID ) [ ) [ ID ] - ] [ ] [ ] int ) { }",
  "func ID ( ID : [ ] ) ] * ID + ( ( ( ID ) [ ) [ ID ] - true [ ] [ ] int ) { }",
  "func ID ( ) : bool { var ID : bool } ID : int print true * - ( ( ( ( 123 ) ) ) ) var",
  "func ID ( ) : bool { var ID : bool } ID : int print true * - ( ( ( ( ) ) ) 123 ) var",
  "func ID ( ) : bool { var ID : bool } ID : int print true * - ( ( ( ( ) ) ) 123 ) var",
  "func ID ) ID : [ - ID ( ) [ - - 123 + 123 * 123 / ( ID ) ] [ ( false ( ] ] bool ) { }",
  "func ID ) ID : [ - ID ( ) [ - - 123 + 123 * 123 / ( ID ) ] [ ( { ( ] ] bool ) false }",
  "func ID ) ID : [ ( ID ( ) [ - - 123 + 123 * 123 / - ID ) ] [ ( { ( ] ] bool ) false }",
  "func ID ( ) { true ( ID - ID * true and ID [ 123 ] ) = ID }",
  "func ID ( ) { true ( ID - ID * = and ID [ 123 ] ) true ID }",
  "func ID ( { : bool , ID : int ) : int ID var ID : [ - 123 - 123 - - ID ] [ ] int }",
  "func : ( { : bool , ID ID int ) : int ID var ID : [ - 123 - 123 - - ID ] [ ] int }",
  "func : ( - : bool , ID ID int ) : int ID var ID : [ - 123 - 123 { - ID ] [ ] int }",
  "func ID ( ) { var ID : - var ID : int ID ( ) = bool ( true and ( 123 ) and ID ) ID = ID } func ID ( ) { }",
  "func ID ( ) { var ID : ) var ID : int ID ( ) = bool ( true and ( 123 - and ID ) ID = ID } func ID ( ) { }",
  "func ID ( ) { var ID func ) var ID : int ID ( ) = bool ( true and ( 123 - and ID ) ID = ID } : ID ( ) { }",
  "func ID ( ) : int { print ID [ ( ID ] ( ID ) ] [ ID ] ) [ [ false ] print false }",
  "func [ ( ) : int { print ID ID ( ID ] ( ID ) ] [ ID ] ) [ [ false ] print false }",
  "func [ ( ID : int { print ID ID ( ID ] ( ) ) ] [ ID ] ) [ [ false ] print false }",
  "func ID ( ) { var var : bool ID ID : int return - - 123 / ID [ ( - - ID ) ] }",
  "func ID var ) { var ( : bool ID ID : int return - - 123 / ID [ ( - - ID ) ] }",
  "func ID var ) { var ( : bool ID ID : int return - - ID / 123 [ ( - - ID ) ] }",
  "func ID ( ) { var ID : } var ID : bool print true * ( - true / 123 ) * true bool func ID ( ) { }",
  "func ID ( ) { var ID : } var ID { bool print true * ( - true / 123 ) * true bool func ID ( ) : }",
  "func bool ( ) { var ID : } var ID { bool print true * ( - true / 123 ) * true ID func ID ( ) : }",
  "func ID ( ID : int bool ID : [ ID ( ) [ ID ( ) [ - ID ] [ - ( ( ID ) ) ] ] ] , , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : int bool ID : [ ID ( ) [ ) ( ID [ - ID ] [ - ( ( ID ) ) ] ] ] , , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : ] bool ID : [ ID ( ) [ ) ( ID [ - ID int [ - ( ( ID ) ) ] ] ] , , ID : int ) { } func ID ( ) { }",
  "func ID ( ID : [ 123 / false - - true / false / [ ID ) + false ] ( ] int ) { }",
  "func ID ( ID : [ 123 / false - - true / false / [ ID ) + false ] ( ] int ) { }",
  "func ID ( ID : [ 123 / - false - true / false / [ ID ) + false ] ( ] int ) { }",
  "func ID ( ID : [ - - / true / - ID - 123 ID [ ID ] [ ID ] ] [ ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ID : [ - - / true / - ID - 123 ID [ ] ] [ ID ] ] [ ] [ ] [ ] [ ID bool ) { }",
  "func ID ( ID : [ - - / true / - ID - 123 ID [ ] ] [ ID ] ] [ ] [ ] [ ] [ ID bool ) { }",
  "func ID ( ) { var ID : bool } ID ID ( ID : bool ) { var ID : int var func : bool }",
  "func ID ( ) { var ID : bool func ID ID ( ID : bool ) { var ID : int var } : bool }",
  "func ID ( ) { var ID : bool func ID ID ( ID : bool ) { var ID : int var } : bool }",
  "func ID ID ID : bool , ID : int , ID : bool ) : bool { var ID : [ ID ( ) [ ( ( ID ) ) ] [ ID ] ] [ ] bool var ID : [ ] int } func ( ( ) { }",
  "func ID ID ID ID bool , : : int , ID : bool ) : bool { var ID : [ ID ( ) [ ( ( ID ) ) ] [ ID ] ] [ ] bool var ID : [ ] int } func ( ( ) { }",
  "func ID ID ID ID bool , : : int , ID : bool var : bool { var ID : [ ID ( ) [ ( ( ID ) ) ] [ ID ] ] [ ] bool ) ID : [ ] int } func ( ( ) { }",
  "func ID ( ID : [ ] { , ID : bool , ID : int ) : bool int call ID ( ) print true / true }",
  "func ID ( ID : [ ] { , ID : bool , ID : int ) : ( int call ID bool ) print true / true }",
  "func ID ( ID : [ ] { , ID : bool , ID : true ) : ( int call ID bool ) print true / int }",
  "func ID ( ID : int , ID : bool ) : [ ( ID [ - - ID { ) ] bool { } func ID ( ) ] }",
  "func ID ( ID : int , ] : bool ) : [ ( ID [ - - ID { ) ID bool { } func ID ( ) ] }",
  "func ID ( ID : int , ] : bool ) : [ ( { [ - - ID ID ) ID bool { } func ID ( ) ] }",
  "func ID ( true : [ - ( - false / 123 / false and true / false / ID ) ] bool ) { }",
  "func ID ( true : [ - ( - false / 123 / false and true / false / ID ) ] bool ) { }",
  "func ID ( true : [ - ( ] false / 123 / false and true / false / ID ) - bool ) { }",
  "func ID ( ) { var ID : bool false ID : [ ] [ true - - - ID [ ( ( - false ) ) ] [ - var ] ] int }",
  "func ID ( ) { [ ID : bool false ID : [ ] [ true - - - ID [ ( ( - false ) ) ] var - var ] ] int }",
  "func false ( ) : int { while ( - ( - ID - ( true ) ) ) { } } func ID ( ) { }",
  "func false ( ) : int { while func - ( - ID - ( true ) ) ) { } } ( ID ( ) { }",
  "func false ( ) : int { while func ( ( - ID - ( true ) ) ) { } } - ID ( ) { }",
  "func ID ( ) bool bool { var ID : : call ID ( ) if false * true / 123 > ID { } }",
  "func ID ( ) bool bool var { ID : : call ID ( ) if false * true / 123 > ID { } }",
  "func ID ( ) bool bool var { ID : : call ID ( ) if false * true / 123 > ID { } }",
  "func ID ( ) : int { var ID : [ ID int var ID : [ ( ] [ ( ID ) ] ) ] bool }",
  "func ID ( ) : int { var var : [ ID int ID ID : [ ( ] [ ( ID ) ] ) ] bool }",
  "func ID ( ) : { - 123 and ( ID ( - ( ID ) ) ) ] bool { } func ID ( ) [ }",
  "( ID ( ) : { - 123 and ( ID ( - func ID ) ) ) ] bool { } func ID ( ) [ }",
  "( ID ( ) : { 123 - and ( ID ( - func ID ) ) ) ] bool { } func ID ( ) [ }",
  "func ID ( ID : int ) : bool { var ID : bool = ID : bool call ID ( ) ID var false * - 123 / ID } func ID ( ) { }",
  "func ID ( ID : int ) : bool ( var ID : bool = ID : bool call ID { ) ID var false * - 123 / ID } func ID ( ) { }",
  "func ID ( ID : ID ) : bool ( var ID : bool = int : bool call ID { ) ID var false * - 123 / ID } func ID ( ) { }",
  "func ID ( ) : int - while { 123 - ID ( - - - - ( 123 ) ) { } }",
  "func ID ( ) - int - while { 123 : ID ( - - - - ( 123 ) ) { } }",
  "- ID ( ) - int - while { 123 : ID ( - - - func ( 123 ) ) { } }",
  "func ID ID ID : [ ] bool , ( : bool ) : int { var ID : bool var ID : [ - ID ( ) ] int } func ID ( ) { }",
  "func ID ID ID : [ ] bool , ( : bool ) : int { var ID : bool var ID : [ - ID ( ) ] int } func ID ( ) { }",
  "func ID ) ID : [ ] bool , ( : bool ) : int { var ID : bool var ID : [ - ID ( ) ] int } func ID ( ID { }",
  "func ID ( } : int { var ID : [ ID ( ID ( - 123 ) ) ] bool ) func ID ( ) { }",
  "func ID ( ) { var ID ID int var ID : int while : + 123 * 123 + - ( ID ) { } if 123 { } } func ID ( ) { }",
  "func ID ( ) { var ID ID int var ID : int while : + 123 * 123 + - ( ID ) { } if 123 { } } func ID ) ( { }",
  "func ID ( ) { var ID ID int var ID : int while : + 123 * 123 + - ( ID ) { } if 123 { } } func ID ) ( { }",
  "func ID ( ) { while ) * ( - ID [ - ID ] [ - - ID ] false { } } func ID ( ) { }",
  "} ID ( ) { while ) * ( - ID [ - ID ] [ - - ID ] false { } func func ID ( ) { }",
  "( ID } ) { while ) * ( - ID [ - ID ] [ - - ID ] false { } func func ID ( ) { }",
  "} ID ( ) : int { if ( ID [ ( true ) ] ) { } func",
  "} ID ( ) : int { if ( ID [ ( ) true ] ) { } func",
  "func ID ( ID : 123 ) : [ 123 / ( bool + ( ( - true ) ) - false ) ] [ ] bool { }",
  "] ID ( ID : 123 ) : [ 123 / ( bool + ( ( - true ) ) - false ) ] [ func bool { }",
  "] ID ) ID : 123 ) : [ 123 / ( bool + ( ( - true ( ) - false ) ] [ func bool { }",
  "func / ( ID : int , ID : [ ] [ - 123 * 123 ID ( - ( - ( ID ) ) ) ] int ) { } func ID ( ) { }",
  "func / ( ID : int , ID : [ ] [ - 123 * 123 ID func - ( - ( ID ) ) ) ] int ) { } ( ID ( ) { }",
  "func / ( ID : int , ID : [ ] [ ) 123 * 123 ID func - ( - ( ID ) ) ) ] int ) { } ( ID ( - { }",
  "func ID ( ID : ID ( false ) / ( true or - true ) / 123 ] bool ) { } func [ ( ) { }",
  "func ID ( ID : ID ( false ) / ( true or - true ) / 123 ] bool ) { } func [ ( ) } {",
  "func ID ( ID : [ ( false ) / ( true or - true ) / 123 ] bool ) { } func ID ( ) } {",
  "func ID ( ) { ) ID : [ - ( ID ( ) [ true + ID - ID ] var ] int } func ID ( ) { }",
  "func ID ( ) { ) ID : { - ( ID ( ) [ true + ID - ID ] var ] int } func ID ( ) [ }",
  "func ID ( ) { { ID : ) - ( ID ( ) [ true + ID - ID ] var ] int } func ID ( ) [ }",
  "func ID ( ) { var ID : [ ] int { while ) ( ID * true - { } { } } } func ID ( ) { }",
  "func * ( ) { var ID : [ ] int { while ) ( ID ID true - { } { } } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool return } func ID ( ) : int , ID : [ ( ID ) ] [ ] int ID { }",
  "func ID ( ) { var ID : int var ID : bool func } return ID ( ) : int , ID : [ ( ID ) ] [ ] int ID { }",
  "func ID ( ) { var ID : bool var ID : int func } return ID ( ) : int , ID : [ ( ID ) ] [ ] int ID { }",
  "func ID ( ID : bool , ID : int , ID : int ) { var [ : [ - false / ID [ 123 ] * false ] ID ] int var ID : [ ] bool }",
  "func ID ( ID : bool , ID : int , ID : int ) { [ [ : [ - false / ID [ 123 ] * false ] ID ] int var ID : var ] bool }",
  "func ID ( ) : bool { var ID : bool var func : bool return } ID ID ( ) : [ ] int { var ID : bool var ID : bool }",
  "func bool ( ) : bool { var ID : bool var func : ID return } ID ID ( ) : [ ] int { var ID : bool var ID : bool }",
  "func bool ( ) : bool { var ID : ID var func : bool return } ID ID ( ) : [ ] int { var ID : bool var ID : bool }",
  "func ) ( ) : [ ID ( ) [ - - ( ( ID ) ) ] [ ( ( ( false ) ) ) ] ] bool { } func ID ( ID { }",
  "func ( ) ) : [ ID ( ) [ - - ( ( ID ) ) ] [ ( ( ( false ) ) ) ] ] bool { } func ID ( ID { }",
  "func ID ( ) { if 123 [ ID / - ID ( ) [ false ] [ ID ] * - ( ( ( - ID ) ) ) ] { } { } }",
  "func ID ( ) { if 123 [ ID / - ID ( ) ( false ] [ ID ] * - ( ( [ - ID ) ) ) ] { } { } }",
  "func ID ( ) { if 123 [ ID / - ID ( ) ( false ] [ ID ] * - ( ( [ - ID ) ) ) ] { } { } }",
  "func ID ( ID : } ) : bool { var ID : int } func ID ( ) { var ID : [ ] int print ID int",
  "func ID ( ID : } func : bool { var ID : int } ) ID ( ) { var ID : [ ] int print ID int",
  "func ID ( ) : ( { ID = ( - int true / ( - - - ID ) ) ) ID = ID } func ID ( ) { }",
  "func ID ( ) : ( { ID = ( - - true / ( int - - ID ) ) ) ID = ID } func ID ( ) { }",
  "func ID ( ) : ( { ID = ( - - true / ( int - ) ID - ) ) ID = ID } func ID ( ) { }",
  "func ID ( ID : int , ID : bool int : bool { var ID : bool var ID : ) if - ID [ - ID ] { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool int : bool { var ID : bool var ID : ) if - ID [ - ID ] { } func } ID ( ) { }",
  "int ID ( ID : func , ID : int ) { var ID : [ - - true / ( - false ) ] [ ] [ ] bool }",
  "int ID ( ID : - , ID : int ) { var ID : [ func - true / ( - false ) ] [ ] [ ] bool }",
  "int ID ( ID : - , ID : int ) { func ID : [ var - true / ( - false ) ] [ ] [ ] bool }",
  "func ID ( ) { print - ( ) + - ( ( ID ) 123 ) { } } func ID ( ) { }",
  "func ID ( ) { ) - ( ) + - ( ( ID print 123 ) { } } func ID ( ) { }",
  "func ID ( ) { ) - ID ) + - ( ( ( print 123 ) { } } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : bool { var ID : [ - ID ( ) [ 123 ] [ - ] true ) ] ] [ ( bool }",
  "func ID ( ID : [ ] int ) : bool ID var ID : [ - { ( ) [ 123 ] [ - ] true ) ] ] [ ( bool }",
  "func ID ( ID : [ ] int ) : ( ID var ID : [ - { ( ) [ 123 ] [ - ] true ) ] ] [ bool bool }",
  "func ID ( ID : [ true / - - true * 123 or - - ) - - ID - 123 or - - - ( - ( ID ) ID ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ true / - - true * 123 or - - ) - - ID - 123 ) - - - ( - ( ID or ID ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ true / - - true * 123 or - - ) - - ID - 123 ) - ( - ( - ( ID or ID ] int ) { } func ID - ) { }",
  "func ID ( ID : int ) { print ) / ( ( 123 * - - ID ) ) * ID while ( ( ( ( ( ID 123 ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : int ) { print ) / ( ( 123 * - ID ID ) ) * ID while ( ( ( ( ( - 123 ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : int ) { print ) / ( ( 123 * - ID ID ) ) * ID while ( ( ( ( ( - ) ) ) ) 123 { } } func ID ( ) { }",
  "func ID int ID : int , ID : ( , ID : [ ] bool ) { var ID : bool }",
  "func ID int ID : int , ID : ( , ID : [ ] bool ) { } ID : bool var",
  "[ ID int ID : int , ID : ( , ID : func ] bool ) { } ID : bool var",
  "func ID ( ID : [ - ID ( true - * - - ID [ 123 ] * 123 ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ - ID ( true - * - - ID [ 123 123 * ] ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ - ID ( true - * - - ID ] 123 123 * [ ) ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ID bool { var ID : bool var ID : [ ( false / 123 / - ID ) ] int } func ] ( ) { }",
  "func ID ( ) : [ ID bool { var ID : bool var ID : [ ( false ) 123 / - ID ) ] int } func ] ( / { }",
  "func ID } ) : [ ID bool { var ID : bool var ID : [ ( false ) 123 / - ID ) ] int ( func ] ( / { }",
  "func ) ( ID : int , ID : [ - - ( ( ( ( ( ID ) ID ) ) ) ] [ ] [ ] [ ] int , ID : [ ] bool ) { } func ID ( ) { }",
  "func ) ( ID : int , ID : [ - - ( ( ( ( ( ID ) ID ) ) ) ] [ : [ ] [ ] int , ID ] [ ] bool ) { } func ID ( ) { }",
  "func ) ( ID : int : ID : [ - - ( ( ( ( ( ID ) ID ) ) ) ] [ , [ ] [ ] int , ID ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ] int ID var { : int return }",
  "func ID ( ) : var ] int ID [ { : int return }",
  "func ID ( ) { print - ( ) true * ( ID ( ( ( - ( - ID ) - ) ) ) * 123 ) call ID ( ) } func ID ( ) { }",
  "func ) ( ) { print - ( ID true * ( ID ( ( ( - ( - ID ) - ) ) ) * 123 ) call ID ( ) } func ID ( ) { }",
  "func ) ( ) { print - ( ID true * ( ID ( ( ( - ( - ID ) - ) ) ) * 123 ) ( ID ( ) } func ID call ) { }",
  "ID ID ( ID : bool ) : int { var ID : int var ID : [ - func and true and - ID ] bool }",
  "ID ID ( ID : bool bool : int { var ID : int var ID : [ - func and true and - ID ] ) }",
  "ID ID ( ID : bool bool : int { var ID : int var ID : [ - ) and true and - ID ] func }",
  "func ID ( ID : [ ] int ) { var ID : [ ( ( ID ) ) ] [ ] [ ] [ ] [ ] bool var ID : int } ) ID ( func { }",
  "func ID ( ID : ] [ int ) { var ID : [ ( ( ID ) ) ] [ ] [ ] [ ] [ ] bool var ID : int } ) ID ( func { }",
  "func ID [ ID : ] [ int ) { var ID : [ ( ( ID ) ) ] ( ] [ ] [ ] [ ] bool var ID : int } ) ID ( func { }",
  "func ID ( ID : - , ID : [ true * ( ID ( bool ( false ) ) ) ] bool , ID : int ) { } func ID ( ) { }",
  "ID ID ( ID : - , func : [ true * ( ID ( bool ( false ) ) ) ] bool , ID : int ) { } func ID ( ) { }",
  "ID ID ( ID : - , func : [ true * ( ID ( bool ( false ) ) ) ] bool , ID : int ) { } func ID ( ) } {",
  "func ID ( ) { } func ID ( ) { int : var ID : int }",
  "func ID ( ) { ID func ID ( ) { int : var } : int }",
  "func ID ( ) { ID func ID ( ) { int : var } : int }",
  "func ID ( ) { ID ( ID [ - - ID ( ) * ID / 123 ] ID ID ] ) = - ID } func [ ( ) { }",
  "func [ ( ) { ID ( ID ID - - ID ( ) * ID / 123 ] ID ID ] ) = - ID } func [ ( ) { }",
  "func [ ( ) { ID ( ID - - ID ID ( ) * ID / 123 ] ID ID ] ) = - ID } func [ ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : bool ) ( ID [ true ] [ ID ] while { } call ID ( ) }",
  "ID ID ( ) { var ID : [ ] bool var ID : bool ) ( ID [ true ] [ func ] while { } call ID ( ) }",
  "ID ID ( ) { var ID : [ ] bool var ID : bool ) ( ID [ true ] [ func ] while { } call ID ( ) }",
  "func ) ( ID : int , ID : [ - - true * ID * - - 123 + - - true - ( true ID ] int ) { } func ID ( ) { }",
  "func ) ( ID : int , ID : [ - - true * ID * - - 123 + - - { - ( true ID ] int ) true } func ID ( ) { }",
  "func ) ( ID : int , ID : [ true - true * ID * - - 123 + - - { - ( true ID ] int ) - } func ID ( ) { }",
  "func ID ( ) : int { } func ID ( ID : [ ID [ - ( - ID ) ] [ - true ] ] int { ) }",
  "func ID ( ) : int { } [ ID ( ID : [ ID [ - ( - ID ) ] func - true ] ] int { ) }",
  "func ID ( ) : int { } [ ID ( ID : [ ID ( - [ - ID ) ] func - true ] ] int { ) }",
  "func ID ( ID : int , ID : [ ) ( 123 * 123 + - 123 ( ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , - : [ ) ( 123 * 123 + ID 123 ( ) ] int ) { } func ID ( ) { }",
  "func ( ( ID : int , - : [ ) ( 123 * 123 + ID 123 ID ) ] int ) { } func ID ( ) { }",
  "[ ID ( ID : int , ID : bool , ID : int ) { var ID : [ ] func ] [ ID [ ID ] [ ID ] ] [ ] int var ID : bool } func ID ( ) { }",
  "[ ID ( ID : int , ID : [ , ID : int ) { var ID : [ ] func ] [ ID [ ID ] [ ID ] ] bool ] int var ID : bool } func ID ( ) { }",
  "[ ID ( ID : int , ID : [ , ID : int ) { var ID : [ ] func ] [ ID [ ID ] [ ID ] ] bool ] bool var ID : int } func ID ( ) { }",
  "func ID ( ID ] [ 123 * ID [ ( ID ( ( ( - ID ) ) ) ) ] : [ ] int ) { }",
  "func ID ( ID ] [ 123 * ID [ ( ID ( ( ( - ID } ) ) ) ] : [ ] int ) { )",
  "func ID ( ID ] [ ( * ID [ ( ID ( 123 ( - ID } ) ) ) ] : [ ] int ) { )",
  "func ID ( ) ) [ ( - true * ( ( ID ( ) ) : ) ] int { }",
  "func ID ( ) ) [ ( - true * ( ( ID } ) ) : ) ] int { (",
  "func ID ( { ) [ ( - true * ( ( ID } ) ) : ) ] int ) (",
  "func ID ( ) { int : var ID : [ ] bool var ID : bool }",
  "func ID ( ) var int : var ID : [ ] bool { ID : bool }",
  "func ID ( ) var int : bool ID : [ ] var { ID : bool }",
  "func ID ( ID : [ ( [ ID [ ( 123 / - ] ( false ) ) / - ( ID ) ) ] [ 123 ] ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ( [ ID [ ( 123 / - false ( ] ) ) / - ( ID ) ) ] [ 123 ] ] [ ] [ ] int ) { } func ID ( ) { }",
  "func - ( ID : [ ( [ ID [ ( 123 / ID false ( ] ) ) / - ( ID ) ) ] [ 123 ] ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool while true * ID ( - true - 123 ID / ) { } } func ID ( ) { }",
  "func ID ( ) { var ID - bool while true * ID ( - true : 123 ID / ) { } } func ID ( ) { }",
  "func var ( ) { ID ID : int { var ID : bool var ID : [ ] bool } } func ID ( ) : bool { var ID : int }",
  "func var ( func { ID ID : int { var ID : bool var ID : [ ] bool } } ) ID ( ) : bool { var ID : int }",
  "func var ( func : ID ID { int { var ID : bool var ID : [ ] bool } } ) ID ( ) : bool { var ID : int }",
  "func ID ( ) : [ ] bool { var ID : int bool ID : var { call ID ( ) } ID = ( ID ) } func ID ( ) { }",
  "func ID ( ) : [ ] bool } var ID : int bool ID : var { call ID ( ) } ID = ( ID ) } func ID ( ) { {",
  "func ID ( ) : [ ] bool } var ID : int bool = : var { call ID ( ) } ID ID ( ID ) } func ID ( ) { {",
  "func ID ( ) : bool { var ID : int var : ID int return }",
  "func ID ( ) : bool { int ID : int var : ID var return }",
  "func } ( ) : bool { int ID : int var : ID var return ID",
  "func ID ( ID : bool , ID : [ ] bool , ID : bool ) : int { var ] : [ - ( ( ( ( false ) ) ) ) ID [ ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID [ bool , ID : [ ] bool , ID : bool ) : int { var ] : [ - ( ( ( ( false ) ) ) ) ID [ ] [ ] : ] int } func ID ( ) { }",
  "func ID ( ID ID bool , ID : [ ] bool , ID : bool ) : int { var ] : [ - ( ( ( ( false ) ) ) ) [ [ ] [ ] : ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool { var : : [ ] bool var ID ID int return } while - - ( ID ) { } }",
  "func bool ( ) : int { var ID : ID { var : : [ ] bool var ID ID int return } while - - ( ID ) { } }",
  "func bool ( ) : int { var ID : ID { var : : [ ] bool var ID ID int return } while - - ( ID ) { } }",
  "func ID ( ) { var ID : bool call ID ( ) return } func ID ( ) : ID { var ID : [ - bool ] [ ] int }",
  "func ID ( ) { var ID : bool call ID ( ) return } func { ( ) : ID ID var ID : [ - bool ] [ ] int }",
  "func ) ( ) { var ID : bool call ID ( ) return } func { ( ID : ID ID var ID : [ - bool ] [ ] int }",
  "func var ( ) { ID ID : bool return } func ID ( ) { print ID ( ( - ( ID ) ) ) }",
  "func var ( ) { ID ID : bool return } func ID ( ) { ) ID ( ( - ( ID ) print ) }",
  "func var ( ) { ID ID : bool return } func - ( ) { ) ID ( ( ID ( ID ) print ) }",
  "func ID ( ) } [ ] int { var ID : bool return : func ID ( ) : int { }",
  "func ID ( ) } [ ] int { var ID : ID return : func bool ( ) : int { }",
  "{ ID ( ) } [ ] int func var ID : ID return : func bool ( ) : int { }",
  "func ID ( ) : int { call ID } ) return (",
  "func ID ( ID : int { call ) } ) return (",
  "( ID func ID : int { call ) } ) return (",
  "func ID ( ID : bool , ID : int , ID : [ 123 * ID ( ) [ - ID ] [ ID ] * ) ] int 123 { }",
  "func ID ( ID : bool , ID : int , ID : [ 123 * ID * ) [ - ID ] [ ID ] ( ) ] int 123 { }",
  "func ID ( ID : bool , ID : ID , ID : [ 123 * ID * ) [ - ID ] [ int ] ( ) ] int 123 { }",
  "func ID ( ID : bool , { : [ - ( ID [ - ( ( ( ( - 123 ) ) ) ) ] ) ] [ ] [ ] bool ) ID } func ID ( ) { }",
  "func ID ( ID : bool , { : [ - ( ID [ - ( ( ( ( ( 123 ) ) ) ) ] ) ] [ ] [ ] bool ) ID } func ID - ) { }",
  "func ID ( ID : bool , { : [ - ( ID [ - ( ( ( ( ( 123 ) ] ) ) ] ) ] [ ] [ ) bool ) ID } func ID - ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : int var ID : bool } func ID ( ID } [ true ] bool ) { :",
  "func ID ( ID : bool , } : bool ) { var ID : int var ID : bool ID func ID ( ID } [ true ] bool ) { :",
  "] ID ( ID : bool , } : bool ) { var ID : int var ID : bool ID func ID ( ID } [ true func bool ) { :",
  "func ID { ) : int ( var ID : bool { { var ID : int var ID : int } while ( false ) { } } ID = ( 123 ) } func ID ( ) { }",
  "func ID { ) : int ( var ID : bool { { var ID : int = ID : int } while ( false ) { } } ID var ( 123 ) } func ID ( ) { }",
  "func ID { : : int ( var ID ) bool { { var ID : int = ID : int } while ( false ) { } } ID var ( 123 ) } func ID ( ) { }",
  "func ID ( ) ID var ID : int print - 123 / ( ( ID ( ) ) ) ID = ID } func { ( ) { }",
  "func ID ( - ID var ID : int print ) 123 / ( ( ID ( ) ) ) ID = ID } func { ( ) { }",
  "func ID ( - ID var ID : int print ) 123 / ( ( ID ) ) ) ) ID = ID } func { ( ( { }",
  "{ ID ( ID : [ - ID [ ID [ ID [ false ] ] [ ( ID ) ] ] [ - - 123 ] ] bool ) func }",
  "{ ID ( ID : [ - ID [ ID [ ID [ false ] ] [ ( ID ) ] ) [ - - 123 ] ] bool ] func }",
  "{ ID ( ID : [ ] ID [ ID [ ID [ false ] ] [ ( ID ) - ) [ - - 123 ] ] bool ] func }",
  "func ID ( ID 123 int , ID : [ - - ID ( : * ( ( - true ) ) / 123 ) ] int , ID : bool ) { }",
  "func ID ( ID 123 int , ID : [ - - ID ( : * ( ( - true ) ) / 123 ) ] int , ID : bool ) { }",
  "func ID ( ID 123 int , ID : [ - - ID ( : * ( ( - true ) ) , 123 ) ] int / ID : bool ) { }",
  "func ID ( ) { var ID : [ ] [ ] bool - ID : [ - var - ( ID ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] bool - ID : [ - var - ( ID ) ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] bool - ID : ( - var - ( ID ) ] int } func ID [ ) { }",
  "func ID ( ) : int { var ID : int var - : [ - ID ( ) [ ID - - false ] [ 123 ] ] int } func ID ( ) { }",
  "func ID ( ) : int - var ID : int var - : [ - ID ( ) [ ID { - false ] [ 123 ] ] int } func ID ( ) { }",
  "func ID ( ) : int - var ID : int var - { [ - ID ( ) [ ID { - false ] [ 123 ] ] int } func ID ( ) : }",
  "func ID ( ) : bool ID : int { var ID : [ ] [ ID ( ) / true * ID ] int }",
  "func ID ( ) : ID bool : int { var ID : [ ] [ ID ( ) / true * ID ] int }",
  "func ID ( ) : ID bool : int { var ID : [ ] [ ] ( ) / true * ID ID int }",
  "func ID ( ) : int { var ( : [ - ID ID [ ID [ - true ] [ - - ID ] ] ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ) : int { var ( : [ - ID ID [ ID [ - true ] [ - - ID ] ] ) ] [ ] bool } func ID } ) { (",
  "func ID ( ) : int { var ( : [ - - ID [ ID [ - true ] [ ID - ID ] ] ) ] [ ] bool } func ID } ) { (",
  "func ID ( ID : bool , ID : [ 123 and ( true * ID * - ( ( - false ) ) ) and ID ] [ ] [ ] int ) { } func false ( ) { }",
  "func ID ( ID : bool , ID : int 123 and ( true * ID * - ( ( - false ) ) ) and ID ] [ ] [ ] [ ) { } func false ( ) { }",
  "func ID ( ID : bool , ID : int 123 and ( true * ID * - ( ( - false ) ) } and ID ] [ ] [ ] [ ) { } func false ( ) { )",
  "func ID ( ) { var ID : [ ( - - - ( ( ( ( true ) ) ) ) ) ] bool } func { ( ) ID }",
  "func { ( ) ID var ID : [ ( - - - ( ( ( ( true ) ) ) ) ) ] bool } func { ( ) ID }",
  "func ID ( ) ) [ ID ( ( false / ID / - ( ID : ) ) ] int { } func ID ( ) { }",
  "func ID ( ) ) [ ID ( ( false / ID / ( - ID : ) ) ] int { } func ID ( ) { }",
  "func ID ( ) ) [ ID ( ( false / ID / ( - ID : ) ) ] int { } func ID ) ( { }",
  "func [ ( ID : bool , ID : bool , ID : int ) : [ ] ID ] int { var ID : [ ] [ true ] int } func ID ( ) { }",
  "func [ ( ID : bool , ID : bool , ID : int ) : [ ] ID ] int : var ID { [ ] [ true ] int } func ID ( ) { }",
  "func [ ( ID : bool , ID : bool , ID : int ) : [ ] ID ] int : var ID ID [ ] [ true ] int } func { ( ) { }",
  "func ID ( ID : [ false / ( ID } - ( - 123 ) ) ) ] int ) { } func ID ( ) { (",
  "func ID ( ID : [ false ID ( ID } - ( - 123 ) ) ) ] int ) { } func / ( ) { (",
  "func ID ( ID : [ false ID ( ID } - ( { 123 ) ) ) ] int ) - } func / ( ) { (",
  "func ID ( ) : bool { var ID : [ ] bool call ID { ID [ - - ( - - ID ) ] [ ( true ) ] ) while ( 123 ) { } } func ID ( ) ( }",
  "func ID ( ) : bool { var ID : [ ] bool call ID { ID [ - - ( - - ID ) ] ID ( true ) ] ) while ( 123 ) { } } func [ ( ) ( }",
  "func ID ( ) : bool { var ID : [ ] bool call ID { ID [ - - ( - - ID ) ] ID ( true ) ] ) while ( 123 ) { } } func [ ( ) ( }",
  "func ID ( ID : ID ) : bool { var int : int } func ID ( ID : int ) { call ID ( ID ) }",
  "func ID ( ID : ID ) : bool { var int : int } func ID call ID : int ) { ( ID ( ID ) }",
  "func ID ( ID : ID ) : bool { var int : int } func ID call ID : int ) { ( ID ( ID ) }",
  "] ID ( ) { var ID : bool call ID ( 123 + ID [ ID / ( true ) * - false ] [ ( 123 ) func ) { } }",
  "] ID ( ) * var ID : bool call ID ( 123 + ID [ ID / ( true ) { - false ] [ ( 123 ) func ) { } }",
  "( ID ( ) * var ID : bool call ID ( 123 + ID [ ID / ] true ) { - false ] [ ( 123 ) func ) { } }",
  "func ID ( ID : bool , ID : bool , ID : ID ) { var bool : int var ID : int call ID ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : ID ) { var bool { int var ID : int call ID ( ( ID ) ) } func ID ( ) : }",
  "func ) ( ID { return ID ( ) and - 123 - true / ( 123 ) * ( ID ) - true and false }",
  "func ) ( ID { return ID ( ) and } 123 - true / ( 123 ) * ( ID ) - true and false -",
  "func ) ( ID { return ID ( ) and } 123 - true ) ( 123 / * ( ID ) - true and false -",
  "func ID ( ) { var ID : bool return } func ID ( ) : int { var ID : int var ID : int = ID ID }",
  "func ID ( ) { ID ID : bool return } func var ( ) : int { var ID : int var ID : int = ID ID }",
  "func ID ( ID : bool , ID : int , ID : int ) { return 123 * ( ID [ true ] ) / ) ( - ID ) ) } func ID ( ( { }",
  "func ID ( ID : bool , ID { int , ID : int ) : return 123 * ( ID [ true ] ) / ) ( - ID ) ) } func ID ( ( { }",
  "func ID ( ID : bool , ID { int , ID : int ) : return 123 * ( ID [ true ] ) / ID ( - ) ) ) } func ID ( ( { }",
  "func ID ( ) : int { var ID : bool ID = - / 123 ID ( ID ) print true }",
  "func ID ( ) : int - var ID : bool ID = { / 123 ID ( ID ) print true }",
  "func ID ( ) : int - var } : bool ID = { / 123 ID ( ID ) print true ID",
  "func ID ( ID ) int : { while ID ( - - ID >= ( true ) ) { } } func ID ( ) { }",
  "func ID ID ID ) int : { while ID ( - - ID >= ( true ) ) { } } func ( ( ) { }",
  "func ID ID ID ) int : func while ID ( - - ID >= ( true ) ) { } } { ( ( ) { }",
  "func { ( ) ID ID [ ( ID ( ) [ - false ] ) ] [ 123 ] = 123 if 123 { } }",
  "func { ( ) ID ID [ ( ID ( ) [ - false ] ) ] [ 123 ] = 123 if 123 { } }",
  "func { ( ) if ID [ ( ID ( ) [ - false ] ) ] [ 123 ] = 123 ID 123 { } }",
  "func ID ( ID : bool { : [ ID ( ) ] int { var ID : bool var ID : bool while ( ( ( ID ) ) ) ) } { } }",
  "func ID ( ID : bool { : [ ID ( ) ] int { var ID : { var ID : bool while ( ( ( ID ) ) ) ) } bool } }",
  "func ID ( ID : bool , ID : [ ID ( true + ( } ) - 123 ) ] int ) { ID",
  "func ID ( ID : bool , ID : [ int ( true + ( } ) - 123 ) ] ID ) { ID",
  "func ID ( ID : bool , ID : [ int ( true ) ( } + - 123 ) ] ID ) { ID",
  "func - ( ) { return 123 + ID ( ( ( ID ) ) ) }",
  "func - ( ) { return + 123 ID ( ( ( ID ) ) ) }",
  "func - ( ) { return + 123 ID ( ( ( ID ) ) ) }",
  "func ID ( ) { var false : [ ID [ - ( ID [ ( - ( false ) ) ] [ ID ] ) ] [ false ] ] bool var ID : [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) { var false : [ ID [ - ( ID [ ( ) ( false ) - ] [ ID ] ) ] [ false ] ] bool var ID : [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) { var false ] [ ID [ - ( ID [ ( ) ( false ) - ] [ ID ] ) ] [ false : ] bool var ID : [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) { } func ID ( ) { var ID bool : var ID : int print false + ID ID = true }",
  "func ID ( ) { } func ID { ) ( var ID bool : var ID : int print false + ID ID = true }",
  "func ID ( ) : bool { var ID : [ - 123 - true / - false * - - 123 - ( ( - ID ) ) ] [ ] int var ID ( int } func ID : ) { }",
  "func ID ( ) : bool { var ID : [ - 123 - true / - false * - - 123 - ( ( - ID ) ) ] [ ] int var ID ID int } func ( : ) { }",
  "func ID ( ) : bool { var ID : [ - 123 - true / - false * - - 123 - ( ( - ID ) ) } [ ] int var ID ID int } func ( : ) { ]",
  "func ID ( ID : [ bool ] , ID : int , ID : bool ) { var ID : [ true / ( - ( - ( ID ) ) ) * 123 ] bool var ID : bool } func ID ( ) { }",
  "bool ID ( ID : [ func ] , ID : int , ID : bool ) { var ID : [ true / ( - ( - ( ID ) ) ) * 123 ] bool var ID : bool } func ID ( ) { }",
  "bool ID ( ID : [ func ID , ID : int , ID : bool ) { var ID : [ true / ( - ( - ( ] ) ) ) * 123 ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) : bool { ID [ false + ID ( ( 123 ) ) ] [ ID ] = false print } ID",
  "func ID ( ) : bool { ID [ false + ID ( ( 123 ) ) ] [ = ] ID false print } ID",
  "func ID ( ) : bool { ID [ ( + ID ( false 123 ) ) ] [ = ] ID false print } ID",
  "func ID ( ID : bool , bool : bool , ID : int ) : ID { var ID : [ ] int var ID : bool { var ID : bool var ID : bool } }",
  "func ID ( bool : bool , ID : bool , ID : int ) : ID { var ID : [ ] int var ID : bool { var ID : bool var ID : bool } }",
  "func ID ( bool : bool , ID : bool , ID : int ) : ID } var ID : [ ] int var ID : bool { var ID : bool var ID : bool { }",
  "func ID ( ) : bool { { var ID : int var ID } bool while - ID [ - - true ] { } call ID ( ) } : func ID ( ) { }",
  "func ID ( ) : bool { { var ID : int var ID } bool while - ID [ - - true ] { } call ID ( ) } : func ID { ) ( }",
  "func ID ( ) : bool { { var ID : int var ID } bool while - - [ ID - true ] { } call ID ( ) } : func ID { ) ( }",
  "func ID ( ) { var ID : [ ] bool ] [ }",
  "func ID ( ) [ var ID : [ ] bool ] { }",
  "func ID ( ID : [ ] [ ] bool , ID : bool , ID : int : ) bool { var ID : [ ( ( true ) ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : bool , ID : int : ) bool { var ID : [ ( ( } ) ) ] [ ] bool } func ID ( ) { true",
  "func ID ( ID : [ ] [ ] bool , ID : bool , ID { int : ) bool : var ID : [ ( ( } ) ) ] [ ] bool } func ID ( ) { true",
  "func ID ( ID : int ) false var ID : int { var ID : bool return ID [ - - 123 ] [ - ID ] } print { } func ID ( ) { }",
  "func ID ( var : int ) false ID ID : int { var ID : bool return ID [ - - 123 ] [ - ID ] } print { } func ID ( ) { }",
  "func ID ( var : int ) false ID ID : int { ( ID : bool return ID [ - - 123 ] [ - ID ] } print { } func ID var ) { }",
  "func ID ( ID : int ) { } func ID { ) { var ID : int if - ( ID ) ( } }",
  "func ID ( ID : int ) var } func ID { ) { { ID : int if - ( ID ) ( } }",
  "func } ( ID : int ) var } func ID { ) { { ID : int if - ( ID ) ( ID }",
  "func ID ( ID : bool , ID : bool ) : [ ] [ ] bool { var } : [ ] int var ID : bool ID ( ) = false ID",
  "func ID ( ID : bool , ID ID bool ) : [ ] [ ] bool { var } : [ ] int var ID : bool : ( ) = false ID",
  "func ID ( ID : bool , ID ID bool ) : [ ] [ ] bool { var } : [ ] int var ID : bool : ( ) = false ID",
  ") ID ( ID : bool , ID : bool , ID : bool ) : bool { return ( ID ( 123 ) ) } func ID ( func { }",
  ") ID : ID : bool , ID ( bool , ID : bool ) : bool { return ( ID ( 123 ) ) } func ID ( func { }",
  ") ID : ID : bool , ID ( bool , ID : bool ) : bool { return ( ID ( 123 ) ) } func ID ( func { }",
  "func ID ( ID : bool ) { if ID ( 123 * ( / true ) ) ( ID ) { } }",
  "func ID ( ID : bool ) ( if ID ( 123 * { / true ) ) ( ID ) { } }",
  "func } ( ) : [ ] [ 123 - - - ID ( ID / 123 * - ID ) + ( - true ) ] int { ID",
  "func ID ( ) { ID ( ) [ - - ( ( ( - ID ] ) ) ) = ID } func ID ( ) { }",
  "func ID ( ) { ID ( ) [ - - ( ( ( - ID ] ) ) ) = ID } func ID ( ) { }",
  "func ID ID ) { ( ( ) [ - - ( ( ( - ID ] ) ) ) = ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ( ID ( ) [ ( ( ( ( true ) ) ) ) ] [ true [ ) ] ] ] int ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ( ID ( ) [ ( ) ( ( true ) ) ) ) ] [ true [ ) ] ] ] int ( { }",
  "func ID ( ID : ) , ID : bool , ID : [ ( ID ( ) [ ( ) ( ( true ) ) ) bool ] [ true [ ) ] ] ] int ( { }",
  "func ID ( ID : bool ) : int { return } func ID ( ) - [ true * - - ( - ID ) * : 123 ] bool { }",
  "func ID ( ID : bool ) : int { return ( func ID } ) - [ true * - - ( - ID ) * : 123 ] bool { }",
  "func ( ( ID : bool ) : int { return ( func ID } ) - [ true * - - ID - ID ) * : 123 ] bool { }",
  "func ID ( bool : bool ) : ID { }",
  "func ID ( bool : bool ) : ID { }",
  "func ID { bool : bool ) : ID ( }",
  "func ID ( ID : [ ] [ ] int , ID : int , * : [ - false * ID ( - ID ) ID - true ] int ) { }",
  "func ID ( ID : [ ] [ ] int , ID : int , * : [ - false ] ID ( - ID ) ID - true * int ) { }",
  "func ID ( ID : [ ] [ ] int , ID : int , * : [ - false ] ID ( - ID ) ID - true * int ) { }",
  "func func ( ) { { var ID : int var ID : int } call ID ( true / false + ID - ID ) } ID ID ( ) { }",
  "func func ( ) { { var ID : int var ID : int } call ID ( true / false + ID - ID ) } ID ID ( ) { }",
  "func func ( ) { { var ( : int var ID : int } call ID ID true / false + ID - ID ) } ID ID ( ) { }",
  "func ID ( ID : int , ID : [ - 123 / ( ID false * ( ID ) ) * false ] bool , - : bool ) { }",
  "func ID ( ID : int , ID : [ - false / ( ID 123 * ( ID ) ) * false ] bool , - : bool ) { }",
  "func ID ( ID : ID , ID : [ - false / ( ID 123 * ( int ) ) * false ] bool , - : bool ) { }",
  "func ID ( ) { } ) ID ( ID : bool , ID : int ) : [ ] [ ( ID func ] bool { }",
  "func ID ( ) { } ) ID ( ID : bool , ID : int ) ( [ ] [ : ID func ] bool { }",
  "func ID ( ) { } ) ( ( ID : bool , ID : int ) ID [ ] [ : ID func ] bool { }",
  "func ID ( ) { var ID : bool ] ID ( ID ( ) [ ID return ) }",
  "func ] ( ) { var ID : bool ID ID ( ID ( ) [ ID return ) }",
  "func ] ( ) { var ID bool : ID ID ( ID ( ) [ ID return ) }",
  "func ID ( ID : bool ) { var ID : ID - false / ( - ID / true ) / [ ] bool }",
  ") ID ( ID : bool func { var ID : ID - false / ( - ID / true ) / [ ] bool }",
  ") ID ID ID : bool func { var ID : ID - false / ( - ( / true ) / [ ] bool }",
  "func ID ( ID : bool , ID : int , ID : bool ) : var ID : int var ID : bool } func ID ( ID { bool , ID : int ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) : var ID : int var ID : bool } func ID ( ID { bool , ID : int ) { }",
  "func ID ( ID : bool , ID : int , ID : bool ) : var ID : int var ID : bool } func ID ( ID { bool , ID : int ) { }",
  "func ID ( ID : * ) { ID [ true int ( ID ( ( ( ( - ID ) ) ) ) ) ] = true }",
  "func ID ( ID : * ) { ID [ true int ( ID ( ( ( ( - ID ) ) ) ) ) ] = true }",
  "func ID ( ID : ( ) { ID [ true int ( ID ( * ( ( - ID ) ) ) ) ) ] = true }",
  "func ID ( [ : int , ID : ID ] [ ( - ID ( ( ID ) ) ) ] bool ) { }",
  "func ID ( [ ( int , ID : ID ] [ : - ID ( ( ID ) ) ) ] bool ) { }",
  "func ID ( [ ( int , ID : ID ] [ : - ID ( ( { ) ) ) ] bool ) ID }",
  "func ID ( ) { var ID : int print false - ID * ID { ) [ ID ] / - ID if ID ( } } func ID ( ) { }",
  "func ID ( ) { var ID : int print false - ID * } { ) [ ID ] / - ID if ID ( ID } func ID ( ) { }",
  "func ID ( ) { var ID : int print false - ID * } - ) [ ID ] / { ID if ID ( ID } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool print - true * false ( ID ) while ( 123 ) { } }",
  "func ID ( ) ID var ID : int var { : bool print - true * false ( ID ) while ( 123 ) { } }",
  "func ID ( ) ID var ID : int var false : bool print - true * { ( ID ) while ( 123 ) { } }",
  "func ID ( ( : bool ) { var ID : int var ID : [ ( - - - ( - ID ) ) ] bool } func ID ID ) { }",
  "func ID ( ( : bool ) { var ID : int var ID : [ ( ( - - - - ID ) ) ] bool } func ID ID ) { }",
  "func ID ( ( : bool ) { var ID : int bool ID : [ ( ( - - - - ID ) ) ] var } func ID ID ) { }",
  "func ID ( ) : [ ( ( ( ( false / ] * ID ) ) ) ) ID bool { }",
  "func ID ( ) : [ ( ( ( ( false / ] * ID ) ) ) ) bool ID { }",
  "func ID ( ) ) [ ( ( ( ( false / ] * ID : ) ) ) bool ID { }",
  "func ID ( ) { var ID : [ 123 [ ] int var ID : [ - false or ] ] bool }",
  "func ID ( ) { var ID : [ 123 [ ID int var ] : [ - false or ] ] bool }",
  "func ID ( ID : bool , ID : int ID : int { print ( - false * 123 - ID ) } func ) ( ) { }",
  "func ID ( ID : } , ID : int ID : int { print ( - false * 123 - ID ) } func ) ( ) { bool",
  "func ID ( ID : } , ID ( int ID : int { print : - false * 123 - ID ) } func ) ( ) { bool",
  "func ID ( ID : int ) : [ false ] ID ( ( ( ID ) ) ) * int { }",
  ": ID ( ID : int ) func [ false ] ID ( ( ( ID ) ) ) * int { }",
  ": ID ( ID : int ) func [ ] false ID ( ( ( ID ) ) ) * int { }",
  "func ( ( ) { var ID : bool } func ID ID ) : int { var ID : [ - - ID ( ) ] bool var ID : bool }",
  "func ( } ) { var ID : bool ( func ID ID ) : int { var ID : [ - - ID ( ) ] bool var ID : bool }",
  "func ( } ) { var ID : bool ( func ID ID ) : int { var ID : [ - - ID ( bool ] ) var ID : bool }",
  "func ID ( ) { var ID : bool var ID : bool while 123 / / 123 - ( false ) { } print ( - - 123 ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool ( ID : bool while 123 / / 123 - ( false ) { } print var - - 123 ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool ( ID : bool while 123 / ( 123 - / false ) { } print var - - 123 ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool while ID : [ ] bool call ID ( ) { var ID : bool var - ( 123 ) { } ID = - ( ID ) } }",
  "func ID ( ID : bool ) { var ID : bool while ID : [ { bool call ID ( ) ] var ID : bool var - ( 123 ) { } ID = - ( ID ) } }",
  "( ID func ID : int ) : bool { }",
  "int ID func ID : ( ) : bool { }",
  "int ID func ID : ( ) : } { bool",
  "func } ( ID : [ ( ( ID ( - ID ( ) ) ) ) ] int ) { ID func ID ( ) { }",
  "func } ( ID : [ ( ( ID ( - ID ( { ) ) ) ] int ) ) ID func ID ( ) { }",
  "func ( } ID : [ ( ( ID ( - ID ( { ) ) ) ] int ) ) ID func ID ( ) { }",
  "func ID ( ID : [ ] int , ID { int , ID : bool ) { if - ID ( ) [ ( - false ) ] : } }",
  "func ID ( ID : [ ] int , ID { int , ID - bool ) { if - ID ( ) [ ( : false ) ] : } }",
  "func ID var ) : [ ] int { var ID : [ - true - - true and ID and ID ] [ ] int ( ID : [ ] [ ] bool }",
  "func ID : ) : [ ] int { var ID : [ - true - - true and ID and ID ] [ ] int ( ID var [ ] [ ] bool }",
  "func ID : ) : [ ] int { var ID : [ - true - - true and ID } ID ] [ ] int ( ID var [ ] [ ] bool and",
  "func ID ( ) : int { } } ID ( ID : bool ) { var ID : int return func",
  "bool ID ( ) : int { } } ID ( ID : func ) { var ID : int return func",
  "bool ID ( ) int : { } } ID ( ID : func ) { var ID : int return func",
  "var ID ( ID : [ ] int , ID : bool ) { func ID : int return false * ( false ) } func ID ( ) { }",
  "var ID ( ID int [ ] : , ID : bool ) { func ID : int return false * ( false ) } func ID ( ) { }",
  "var ID ( ID int func ] : , ID : bool ) { func ID : int return false * ( false ) } [ ID ( ) { }",
  "func ID ( ID ID bool , ID : int , : : int ) : int { return }",
  "func : ( ID ID bool , ID ID int , : : int ) : int { return }",
  "int : ( ID ID bool , ID ID func , : : int ) : int { return }",
  "func ID ( var { ) ID : [ - - - 123 / - ( ( - ID ) ) ] [ ] bool var ID : int }",
  "func ID ( var { ) ID : } - - - 123 / - ( ( - ID ) ) ] [ ] bool var ID : int [",
  "func ) ( var { ) ID : } - - - 123 / - ( ( - ID ) ID ] [ ] bool var ID : int [",
  "func ID ( ) { var ID : bool var ID : [ false / true + ( ( ID ) ) + ( ] bool } func ID false ) { }",
  "func ID ( ) { var ID : bool var ID : [ false / true + ( ( ID ) ) + ( ] bool } func ID false ) { }",
  "func ID ( ) { var ID : bool var ID : [ false / true + ( ( ID { ) + ( ] bool } func ID false ) ) }",
  "func ID ( ) : [ ( ID / true ) false != ( - ( ID - ) ) ] bool { }",
  "func ID ( ) : [ - ID / true ) false != ( - ( ID ( ) ) ] bool { }",
  "func ID ( ) false [ - ID / true ) : != ( - ( ID ( ) ) ] bool { }",
  "func ID [ ID : ( ( ( false - ID ( ) * ID + false ) ) ] [ ] bool ) { }",
  "func ID [ } : ( ( ( false - ID ( ) * ID + false ) ) ] [ ] bool ) { ID",
  "func ID [ } : ( ( ( false - ID ( ) * ID + false ) ) ] [ ] bool ) { ID",
  "func ID ( ID : bool ) : [ ] bool { while { ( ) [ - - - - - ( - 123 ) ] [ false ] ID } ID = ( true ) }",
  "func ID ( ID : bool ) : [ ] bool - while { ( ) [ - - - - - ( { 123 ) ] [ false ] ID } ID = ( true ) }",
  "func ID ( ID : bool ) : [ ] bool - ) { ( while [ - - - - - ( { 123 ) ] [ false ] ID } ID = ( true ) }",
  "func ID ( ID : ( false / ( ID ( ) [ ID [ ID ] [ false ] ] ) * - ( ( [ ( ( 123 ) ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : ( false / ( ID ( ) [ ID [ ID ] [ false ] ] ) * - ( ( [ ( ( 123 ) ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : ( false / ( ID ( ) [ ID [ ID ] [ false ] ] ) * - ( { [ ( ( 123 ) ) ) ) ) ] int ) { } func ID ( ) ( }",
  "func ID ( 123 { var ID : int var ID : [ - - - ) / ( 123 / ID * ID ) ] bool }",
  "func ID ( 123 { var ID - int var ID : [ : - - ) / ( 123 / ID * ID ) ] bool }",
  "func ID ( 123 { var ID - int var ID : [ ID - - ) / ( 123 / ID * : ) ] bool }",
  "func ID ( ID * [ - false : true and ( ( ( ( false ) ) ) ) ] int ) { }",
  "func ID ( ID * [ - false : true and ( ( ( ( false ) int ) ) ] ) ) { }",
  "func ID ( ID * [ - false : true and ( ( ( ( ) ) int ) ) ] ) false { }",
  "func ID ( ) { var ID : bool var ID : ( ID ( - true * - 123 / - ( - - ID ) ) = ( bool ID ) ) ID = true }",
  "func ID ( ) { var ID : ID var ID : ( ID ( - true * - 123 / - ( - - ID ) ) = ( bool ID ) ) bool = true }",
  "bool ID ( ) { var ID : ID var ID : ( ID ( - true * - 123 / - ( - - ID ) ) = ( func ID ) ) bool = true }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { } ) ID ( ) { var ID : bool ID ( ID func = false }",
  "ID ID ( ID : bool , ID : bool , ID : bool ) { } ) ID ( ) { var func : bool ID ( ID func = false }",
  "ID ID ( ( : bool , ID : bool , ID : bool ) { } ) ID ( ) { var func : bool ID ID ID func = false }",
  "func ID ( ) : [ ] { int var ID : [ - 123 / ( - ID [ ID ] ) / ID ] bool var ID : [ ] [ ] bool }",
  "func ID ( ) [ : ] { int var ID : [ - 123 / ( - ID [ ID ] ) / ID ] bool var ID : [ ] [ ] bool }",
  "func ID } ) [ : ] { int var ID : [ - 123 / ( - ID [ ID ] ) / ID ] bool var ID : [ ] [ ] bool (",
  "func ID ( ID : int , ID : [ true <= ID false ID [ ( ( ) ] ) ] bool ) { }",
  "ID ID ( func : int , ID : [ true <= ID false ID [ ( ( ) ] ) ] bool ) { }",
  "ID ID ( func : int , ID : [ true <= ID ] ID [ ( ( ) ] ) false bool ) { }",
  "func ID ( ) { var ID : bool var : ID bool while - 123 / true + - ( ID ) - ( ID ) { } while ( ( false ) ) { } }",
  "func ID ( ) { var ID : bool var : ID bool while - 123 / } + - ( ID ) - ( ID ) { } while ( ( false ) ) { true }",
  "func ID ( ) { var ID : bool var : ID bool while - 123 / } + - ( ID ) - ( ID ) { ( while } ( false ) ) { true }",
  "( ID ( ID : bool ) { var ID : int var ID : bool call ID func 123 * ( ID ) / ID ) call ID ( ) }",
  "( ID ( ID : bool ) { var ID : int var ID : bool call call func 123 * ( ID ) / ID ) ID ID ( ) }",
  "( ID ( ID : bool ) { var ( : int var ID : bool call call func 123 * ID ID ) / ID ) ID ID ( ) }",
  "func [ ( ID : [ ] int , ID : bool , ID : bool ) { var ID : [ ] bool } func ID ( ID : int , ID : ID ] bool ) { }",
  "func [ ( ID : [ ] int , ID ( bool , ID : bool ) { var ID : [ ] bool } func ID : ID : int , ID : ID ] bool ) { }",
  "func [ ( ID : [ ] int , ID ( bool , ID : bool ) { var ID : [ ] bool } func ID : ID : int , ID : ID ] bool ) { }",
  "ID ID ( ID : bool , func : int , ID : bool ) : [ - - - ID ( 123 ) ] int { }",
  "ID ID ( ID : bool , func : int , ID : bool ) : [ ] - - ID ( 123 ) - int { }",
  "ID ID ( ID : bool , func : 123 , ID : bool ) : [ ] - - ID ( int ) - int { }",
  "func ID [ ) : int { var ID : [ ] bool var ID : int while ID ( ( ID ) ] [ ID ] { } } func ID ( ) { }",
  "func ID [ bool : int { var ID : [ ] ) var ID : int while ID ( ( ID ) ] [ ID ] { } } func ID ( ) { }",
  "func ID [ bool : int { var ID : [ ] ) var ID : int while ID ( ( ID ) ] [ ID ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool while - ( ( 123 / true ) ) { ) } func ID ( } { }",
  "{ ID ( ) { var ID : bool var ID : bool while - ( ( 123 / true ) ) func ) } func ID ( } { }",
  "{ ID ( ) { var ID ( bool var ID : bool while - : ( 123 / true ) ) func ) } func ID ( } { }",
  "func ID ( ) { var ID : [ ] [ ( ID ( ) - true int ID ) ] bool var ID : [ ] - }",
  "func ] ( ) { var ID : [ ] [ ( ID ( ) - true int ID ) ID bool var ID : [ ] - }",
  "func ] ( ) { var ID : [ ] [ ID ID ( ) - true int ( ) ID bool var ID : [ ] - }",
  "func ID ( * { var ID : [ ] int return - false / ID [ 123 ) - - true * ( true ) ] * ID }",
  "func ID ( * { var ID : [ ] ] return - false / ID [ 123 ) - - true * ( true ) int * ID }",
  "func ID } * { var ID : [ ] ] return - false / ID [ 123 ) - - true * ( true ) int * ID (",
  "func ID ( ID : bool , ID : int , ID : bool ) } bool { :",
  "func ID ( ID : bool , ID : int , ID : bool : } bool { )",
  "func ID ( ID int bool , ID : : , ID : bool : } bool { )",
  "func ID ] ID : int , ID : bool , ID : [ ] int ) : [ ID [ ( - false ) ] ] [ ( [ ] int { }",
  "func ID ] ID : int , ID : bool , ID : [ ] int ) : ] ID [ ( - false ) ] ] [ ( [ [ int { }",
  "func ID ] ID : int , ID : bool , ID : [ ] int ) : ] ID [ ( - { ) ] ] [ ( [ [ int false }",
  "func ID ( ) { bool : if ID ( ( - - ( true ) ) ) { } call ID ( ) }",
  "func ID ( ) { bool : if ID ( ( - - } true ) ) ) { } call ID ( ) (",
  ") ID ( ) { bool : if ID ( ( - - } true func ) ) { } call ID ( ) (",
  "func ID ( ID : int , ID : bool ) : bool { var ID { int var ID : int { var ID : [ ] int ID = ID if - 123 { } } } func ID ( ) : }",
  "func ID ( ID : int , ID : bool ) : bool { var ID { int : ID var int { var ID : [ ] int ID = ID if - 123 { } } } func ID ( ) : }",
  "func ID ( ID : int , ID : bool ) : bool { var ID { int : ID var int { var ] : [ ID int ID = ID if - 123 { } } } func ID ( ) : }",
  "func ID ( ID : [ ] [ ] bool , ( : bool ) { print - ID ID false ) }",
  "func ID ( ID : [ ] [ ( bool , ] : bool ) { print - ID ID false ) }",
  "func ID ( ID : [ ] [ ( bool , ] : bool ) { print - ID ID false ) }",
  "func ID ( ) { int ID : int var ID : [ ] var return 123 - ID [ ID ] } func ID ( ) { }",
  "func ID ( ) { int ID : int var ID : [ ] var return 123 - ] [ ID ID } func ID ( ) { }",
  "func { ( ) { int ID : int var ID : [ ] var return 123 - ] [ ID ID } func ID ( ) ID }",
  "func ID ( ) { var } : [ ID ( false / ( - ( true ) ) ) ] [ ] int ID",
  "func ID ( ) { var } : [ ID ( false / ( - ( true ) ) ) ] ] [ int ID",
  "func false ( ) { var } : [ ID ( ID / ( - ( true ) ) ) ] ] [ int ID",
  "func : ( ) : int { } func ID ( ) : int { var ID ID bool var ID : bool if ( ID ) { } }",
  "func : ( ) : int { } func ID ( ) int : { var ID ID bool var ID : bool if ( ID ) { } }",
  "func : ( ) : int { } func ID bool ) int : { var ID ID bool var ID : ( if ( ID ) { } }",
  "func ID ( ) : [ - 123 / ( ( 123 * - true - ID + ( ID ) ) ) / ) ID ] int { } func ID ( - { }",
  "func ID ( ) : [ - 123 / ( ( 123 * - - true ID + ( ID ) ) ) / ) ID ] int { } func ID ( - { }",
  "func ID ( ) : [ - 123 / / ( 123 * - - true ID + ( ID ) ) ) ( ) ID ] int { } func ID ( - { }",
  "func ID ( ) { var ID : [ - false / - - { / - ( 123 ) ] bool } func ID ( ) false }",
  "func ID 123 ) { var ID : [ - false / - - { / - ( ( ) ] bool } func ID ( ) false }",
  "func ID 123 ) { var ID : [ - false / - - { / - ( ( ) ] ID } func bool ( ) false }",
  "{ ID ( ID : bool ) : [ false * false * ( ID [ ( ID ) ] ) ] int func } func ID ( ) { }",
  "{ ID ( ID : bool ) : [ false * ID * ( false [ ( ID ) ] ) ] int func } func ID ( ) { }",
  "{ ID ( ID : bool ) : } false * ID * ( false [ ( ID ) ] ) ] int func [ func ID ( ) { }",
  "func ID ( ) var { ID : bool var ID : [ ] [ - ( ID [ ID ] ) ] bool }",
  "func ID ( ID var { ID : bool var ID : [ ] [ - ( ) [ ID ] ) ] bool }",
  "func ID ( ID var { ID : bool var ID : ( ] [ - [ ) [ ID ] ) ] bool }",
  "func ID ( ) : bool { { var ID : bool while ID ( ) ID ( - - - - ( ID ) ) { } } } func / ( ) { }",
  "func ID ( ( : bool { { var ID : bool while ID ) ) ID ( - - - - ( ID ) ) { } } } func / ( ) { }",
  "func ID ( ( : bool { { var ID : bool while ID ) ) ID ( - - - - ( ID ) ) { } } } func / ( ) { }",
  "func ID ( ID : bool , ID : [ ] int , ) : bool ) { var ID : bool { call ID ( 123 ID } if - ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID - [ ] int , ) : bool ) { var ID : bool { call ID ( 123 ID } if : ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID - [ ] int , ) : bool ) { var ID : bool { call ID ( { ID } if : ID 123 } } func ID ( ) { }",
  "func ID ( ) { return true / 123 and 123 * ID [ ( - - - ( - false ) ] [ - false ] } func ID - ) { }",
  "func ID ( ) { return true / 123 and 123 * ID [ ( - - - ( - - ) ] [ - false ] } func ID false ) { }",
  "func ID ( ) { return true ( 123 and 123 * ID [ / - - - ( - - ) ] [ - false ] } func ID false ) { }",
  "func ID ( ) : [ ( } * ID [ true * ( ( ( ( false ) ) ) ) / ID ] / ID ) ] bool { false",
  "func ID ( ) : [ ( } * ID [ true * ( ( ( ( false ) ) ) ) / ID ] / ID ) ] bool { false",
  "func ID ( ) : [ ( } * ID ( true * ( ( ( [ false ) ) ) ) / ID ] / ID ) ] bool { false",
  "func ID ( ID : int ) { var ID bool [ ID ( ( true / ID ) ) ] bool var ID : [ ] : }",
  "func ID ( ID : int ) { var ID bool [ ID ( ( true / ID ) ) ] bool var : : [ ] ID }",
  "func ID ( ID : int ) { var ID bool [ ID ( ( true / ID ) ) ] bool [ : : var ] ID }",
  "func ID ( ) { var ID : int var ID : [ - ( 123 * ID ( ( true ) ) / } ID ) ] bool } func ID ( ) { -",
  "func ID ( ) { var ID : int var ID : [ - ( ( * ID 123 ( true ) ) / } ID ) ] bool } func ID ( ) { -",
  ": ID ( ) { var ID func int var ID : [ - ( ( * ID 123 ( true ) ) / } ID ) ] bool } func ID ( ) { -",
  "func ) ( ) : int { print ID ( ( ID [ - ( ID ID ] ) ) while ID { } } func ID ( ) { }",
  "func { ( ) : int ) print ID ( ( ID [ - ( ID ID ] ) ) while ID { } } func ID ( ) { }",
  "func { ( ) : int ) print ID ( ( ID [ ID ( - ID ] ) ) while ID { } } func ID ( ) { }",
  "func - ( ID : bool , ID : [ true / - 123 * ID ( ) ID true + false ] int ) { }",
  "func - ( ID : bool , ID : [ true / - 123 * true ( ) ID ID + false ] int ) { }",
  "func - ( ID : bool } ID : [ true / - 123 * true ( ) ID ID + false ] int ) { ,",
  "func ID ] ID : bool , ID : bool ) { var ID : [ ] [ ID ( ) [ 123 ] [ 123 ( ] bool var ID : int } func ID ( ) { }",
  "func ID ] ID : bool , ID : bool ) [ var ID : [ ] { ID ( ) [ 123 ] [ 123 ( ] bool var ID : int } func ID ( ) { }",
  "func ID ] ID : bool , ID : bool ) [ var ID var [ ] { ID ( ) [ 123 ] [ 123 ( ] bool : ID : int } func ID ( ) { }",
  "func ID ( ID : int ) : int ] var ID : bool var ID : [ ID ( ) [ 123 ] ] [ { bool }",
  "func ID ( ID : int ) : int ] : ID var bool var ID : [ ID ( ) [ 123 ] ] [ { bool }",
  "func ID ( ID : bool , ID : int ) { while - ( ) / 123 * 123 ) { } } func ID ( ID { }",
  "func ID ( ID : bool , ID ) int ) { while - ( ) / 123 * 123 : { } } func ID ( ID { }",
  "func ID ( ID : bool , ID ) int ) { while - ( ) / 123 * 123 : { } } func ID ( ID { }",
  "func ID ( ) { return 123 ID * ( 123 != ID * ( 123 ) ) } func ID ( ) { }",
  "func ID ( ) { return 123 ID * ( 123 != ID * func 123 ) ) } ( ID ( ) { }",
  "func ID - ) : int { return ( ( - ( ID [ true ] [ - ( ID ) ] ) ) } func ID ( ) { }",
  "func ID - ) : int { return ( ( - ( ] [ true ID [ - ( ID ) ] ) ) } func ID ( ) { }",
  "func ID - ) : int { return ID ( - ( ] [ true ID [ - ( ID ) ] ) ) } func ( ( ) { }",
  "func ID ( ID ] int , ID : bool ) : [ ( ID ( - ID ) ) : bool { } func ID ( ) { }",
  "func ID ( ID ] int , ID : bool ) : [ ( ID ( - ID ) ) : bool { ) func ID ( } { }",
  "func ID ( ID ] int , ID : bool ) : [ ( ID ( - ID ) ) : bool { ) func ID ( } { }",
  "func ID ( ID : bool , ID : [ ID ( true / false - - ( ) ) ] bool , ID : int ) { }",
  "func ID ( bool : bool , ID : [ ID ( ) / false - - ( true ) ] ID , ID : int ) { }",
  "func ID ID ) : bool { var ( : int return }",
  "func ID ID ) : bool ( var { : int return }",
  "func ID ( ID : bool , ID : bool , ID : [ ( - - - - false int - ID ) ] [ ] >= ) { }",
  "func ID ( ID : >= , ID : bool , ID : [ ( - - - - false int - ID ) ] [ ] bool ) { }",
  "func ID ( ID ID >= , : : bool , ID : [ ( - - - - false int - ID ) ] [ ] bool ) { }",
  "func ID ( ) { var ID : - var ID : [ ] bool return - true * ( - int ( - ID ) ) / ID }",
  "func ID ID ) { var ID : - var ID : [ ] bool return - true * ( - int ( - ID ) ) / ( }",
  "func ID ( ) : bool { ID ( ID [ [ / ( false ) / ( 123 ) ] false ID ] ) = - ( - ID ) } func ID ( ) { }",
  "func ID ( ) ID bool { : ( ID [ [ / ( false ) / ( 123 ) ] false ID ] ) = - ( - ID ) } func ID ( ) { }",
  "func ID ( ) : int } { var ID : bool var ID : int } } func ID ( ID : int , ID : bool , ID : bool ) { {",
  "func ID ( ) : int } { var var : bool ID ID : int } } func ID ( ID : int , ID : bool , ID : bool ) { {",
  "func ID ( ) : int } { var var : bool ID ID : int } } func ID ( ID : int , ID : bool , ID : bool ) { {",
  "func ID ( ID : int , ID : ( ) : int { call ID ( ( ( - - int ( ( ID ) ) ) ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : ( ) : int { call ID ( ( ( - - int ( ( ) ) ) ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ( : int , ID : ( ) : int { call ID ( ( ( - - int ( ( ) ) ) ID ) ) ) { } } func ID ID ) { }",
  "func ID ( ID - [ false + - false and - ( : ID ( ) ) ] bool ) { }",
  "func ID ( ID - [ false + - false and - ( : ID ( ) ) ] bool ) { }",
  "func ID ( ID - bool false + - false and - ( : ID ( ) ) ] [ ) { }",
  "func ID ( ) : [ ] [ ( ( ID / ( false ) ) ) ] { ] int { } func ID ( ) [ }",
  "func ID ( ) : [ ] [ ( ( ID ) ( false ) ) / ] { ] int { } func ID ( ) [ }",
  "func ID ( ) : [ ] [ ( ( ID ) ( false ) ) / ] { ] int { } func ID ( ) [ }",
  "func ID ( ID - bool , ID : [ ID [ : ID [ true * false / - ID ] ] [ ID ] ] int ) { }",
  "func ID ( ID - bool , ID : [ ID [ true ID [ : * false / - ID ] ] [ ID ] ] int ) { }",
  "func ID ( ID : [ - - - - true + ( == - - ID [ ID ] [ - ID ] ] int ) { } func ID 123 ) { }",
  "ID ID ( func : [ - - - - true + ( == - - ID [ ID ] [ - ID ] ] int ) { } func ID 123 ) { }",
  "ID ID ( func : [ - - - - true + ( == - - ID [ ID ] [ - ID ] ] int ) { } func ID 123 ) { }",
  "func ID ( ID : bool ) { var ID : int print ] / ID - ID ( ) [ ( ( ( true ) ) ) true } func ID ( ) { }",
  "func ( ID ID : bool ) { var ID : int print ] / ID - ID ( ) [ ( ( ( true ) ) ) true } func ID ( ) { }",
  "func ( ID ID : bool ) { var ID : int ID ] / print - ID ( ) [ ( ( ( true ) ) ) true } func ID ( ) { }",
  ") ID ( ) { var ID : int var ID : [ ] bool print - ( ( - ( ( false ) func ) ) }",
  ") ID ( ) { var ID : int : ID var [ ] bool print - ( ( - ( ( false ) func ) ) }",
  "func ID ( bool : bool , ID : bool ) : ID { var ID : bool var ID : bool { var ID : [ ( true ) ] bool } if false { } }",
  "func ID ( bool : bool , ID : bool ) bool ID { var ID : bool var ID : : { var ID : [ ( true ) ] bool } if false { } }",
  "func ID ( bool : bool , ID : bool ) bool ID { var ID : bool var ID ID : { var : : [ ( true ) ] bool } if false { } }",
  ") ID ( ID : bool , ID : bool ) : [ ( true and ( ID func and - - - ( ID ) ) ] int { } func ID ( ) { }",
  ") ID ( ID : bool , ID : bool ) : [ ( true and ( ID func and - - - ID ID ) ) ] int { } func ( ( ) { }",
  ") ID ( ID : bool , ID : bool ) : ( ( true and [ ID func and - - - ID ID ) ) ] int { } func ( ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : [ bool ] var ID : [ true * - ID * - ID ] int } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID : [ bool ] var ID : int true * - ID * - ID ] [ } func ID ( ) { }",
  "func * ( ID : bool , ID : bool , ID : int ) { var ID : [ bool ] var ID : int true ID - ID * - ID ] [ } func ID ( ) { }",
  "func ID ( ID : bool , ID ID [ ] int , ID : [ - false * ID + 123 - : ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : + , ID ID [ ] int , ID : [ - false * ID bool 123 - : ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : + , ID ID [ ] int , ID : [ - false * ID bool 123 - : ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ false / 123 + - true / ( - ID [ true ] ) / ID } bool ) { ]",
  "func ID ( ID : [ false / 123 + - true / ( - ID [ ] true ) / ID } bool ) { ]",
  "func / ( ID : [ false / 123 + - true / ( - ID [ ] true ) ID ID } bool ) { ]",
  "func ID ( ID : int , ID : bool ) : [ ] ( { var ID : [ ID ( ( int ( ID ) ) ) ) ] bool }",
  "func ID ( ID : int , } : bool ) : [ ] ( { var ID : [ ID ( ( int ( ID ) ) ) ) ] bool ID",
  "func ID ( ID : int , } : bool ) : [ ] ( [ var ID : { ID ( ( int ( ID ) ) ) ) ] bool ID",
  "func ID ( ID : bool ) : int { var ID : [ false + ) 123 < ( - - ID ) ] int var ID : bool } func ID ( - { }",
  "func ID ( ID : bool ) : int { var ID : } false + ) 123 < ( - - ID ) ] int var ID : bool } func ID ( - { [",
  "func ID ( ID : bool ) : int { var ID - } false + ) 123 < ( - - ID ) ] int var ID : bool } func ID ( : { [",
  "func ID ( ) : int { ID ( - ( ID [ true ] [ false ] ) ) = ( - true ) { } } func ID } ) { (",
  "func ID ( ) : int { ID ( - ( ID [ true ] [ false ] ) ) = ( - true ) { } } func ID } ) { (",
  "ID func ( ) : int { ID ( - ( ID [ true ] [ false ] ) ) = ( - true ) { } } func ID } ) { (",
  "func ID ( = { var ID : [ ] bool var ID : [ ] [ ] bool ID [ false / 123 ] [ ( ID ) ] ) - ID call ID ( ) }",
  "func ID ( = { var ID : [ ] bool var ID : [ ] [ ] bool ID [ false / 123 ] [ ( ID ) ] ) } ID call ID ( ) -",
  "func ID ) = { var ID : [ ] bool var ID : [ ] [ ] bool ID [ false / 123 ] [ ( ID ) ] ) } ID call ID ( ( -",
  ": ID ( ID func bool ) : bool { call ID ( ) return }",
  ": ID ( ID func { ) : bool bool call ID ( ) return }",
  ": ID ( ID func { bool : bool ) call ID ( ) return }",
  "func ID { ID : [ false / ( - ( - ( false ) ) ) * true ] bool ) ( }",
  "func ID { ID : [ false / ( - ( - ( false ) ) ) * } ] bool ) ( true",
  "( ID ( ) { ID [ ( func - ID * ID / ID ) ) ] = false }",
  "( ID ( ) { ID [ ( func - ID * ID / ID ) ) ] = false }",
  "( ID ( ) { ID [ ( func - ) * ID / ID ) ID ] = false }",
  "func ] ( ) { var ID : int var ID : [ ] [ - 123 + - - - - false + - ( - - ( ( - ( ID ) ) ) ) ID bool }",
  "( ] ( ) { var ID : int var ID : [ ] [ - 123 + - - - - false + - ( - - ( func - ( ID ) ) ) ) ID bool }",
  "( ) ( ] { var ID : int var ID : [ ] [ - 123 + - - - - false + - ( - - ( func - ( ID ) ) ) ) ID bool }",
  "func ID ( ID : bool , ID : [ - ( ID ( ) + ( true ) - - ) true ] bool , ID : int ) { }",
  "func ID ( ID : bool , ID : [ - ( ID ( ) + ( - ) - true ) true ] bool , ID : int ) { }",
  "func ID ( ID : bool , ID : [ - ( ID ( ) { ( - ) - true ) true ] bool , ID : int ) + }",
  "func ID ( ) : [ - - false / - ( ( false / - false int ) * ID ] ) { }",
  "func ID ( ) : [ false - false / - ( ( false / - - int ) * ID ] ) { }",
  "func ID ( ) : [ false - false / - ( ( - / - false int ) * ID ] ) { }",
  "func ID ( ) { var ID : bool ] func ID ( ) { var ID : [ ID [ ID ] } int var ID : bool }",
  "func ID ( ) { var ID : bool ] : ID ( ) { var ID : [ ID [ ID ] } int var ID func bool }",
  "func ID func ) { var ID : bool ] : ID ( ) { var ID : [ ID [ ID ] } int var ID ( bool }",
  "func ID ( ID : ( - ( 123 and [ ( ID ) ) and ID ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : ( - ( 123 and [ ( ID ) ) func ID ) ] int ) { } and ID ( ) { }",
  "func ID ( ID : ( and ( 123 and [ ( ID ) ) func ID ) ] int ) { } - ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ - - ID ( ) / - ( - ( ( ID ) func ) ] int } ) ID ( ) { }",
  "func ID ( ID : int ) { ( ID : [ - - ID ( ) / - ( - var ( ID ) func ) ] int } ) ID ( ) { }",
  "func / ( ID : int ) { ( ID : [ - - ID ( ) ID - ( - var ( ID ) func ) ] int } ) ID ( ) { }",
  "func ID ( ) { var ID : bool var ID true int if ( : + ( ID ) + ID ) { } while ID { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID true int if ( : + ( ID ) } ID ) { } while ID { } } func ID ( ) { +",
  "func ID ( ) { var ID : bool var ID true int if ( : + ( ID ) } ID ) { } while ID { } } func ID ( ) { +",
  "func ID ( ID : bool , ID : bool , ID : bool ) : [ ( true / ( + - - ( ( ID ( - ( ID ) ) ) ) ) ) ] [ ] bool { } func ID ( ) { }",
  "func ( ID ID : bool , ID : bool , ID : bool ) : [ ( true / ( + - - ( ( ID ( - ( ID ) ) ) ) ) ) ] [ ] bool { } func ID ( ) { }",
  "func ( ID ID : bool , ID : bool , ID : bool ) : [ ( true / ( + - - ( ( ID ( - ( ID ) ) ) ) ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) ) print 123 / ( - ( - ( false ) ) { / - true { } }",
  "func ID { ) ) print 123 / ( - ( - ( false ) ) { / - true ( } }",
  "func ID { ) ) print 123 / ( - ( - ( false ) ) { / - true ( } }",
  "func ID ( ) : [ ] bool { var ID : var bool ID : int print ( - ID ( ) ) { } }",
  "func ID ( ) : [ ] bool { var ID : var : ID bool int print ( - ID ( ) ) { } }",
  "func ID ( ) : [ ] bool print var ID : var : ID bool int { ( - ID ( ) ) { } }",
  "func ID ( ID : bool , ID : bool ) print bool { var ID : int } func ID ( ) { var ID : bool : ID { } }",
  "func ID ( ID : ) , ID : bool ) print bool { var ID : int } func ID ( bool { var ID : bool : ID { } }",
  "func ID ( ID : ) , ID : bool ) print bool { var ID : int } func ID ( bool { var ID : bool : ID { } }",
  "] ID ( ID : [ ( ( ( - ID ( - ( ID ) ) ) ) ) func int ) { }",
  "] ID ( ID : [ ( ( ( } ID ( - ( ID ) ) ) ) ) func int ) { -",
  "] ID ( ID : [ ( ( ( ID } ( - ( ID ) ) ) ) ) func int ) { -",
  "func ID ( ID : [ ] [ true } ( false / - - ID ( ( false ) ) ) ] bool ) { / func ID ( ) { }",
  "func ID ( ID : [ ] [ true } ( false / ) - ID ( ( false ) ) ) ] bool - { / func ID ( ) { }",
  "func ID ( ID : [ ] [ true } ( false / ) - ID ( ( false ) ) { ] bool - { / func ID ( ) ) }",
  "func ID ( ID : bool , ID : ) - - ID [ false / 123 <= false ] [ ( ID [ ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : ) - - func [ false / 123 <= false ] [ ( ID [ ] ] [ ] bool ) { } ID ID ( ) { }",
  "func ID ( ID , bool : ID : ) - - func [ false / 123 <= false ] [ ( ID [ ] ] [ ] bool ) { } ID ID ( ) { }",
  "func ID ( ID : bool , , : [ false - 123 * - false - ( false ) ] int ID ID : int ) { }",
  "func ID ( ID : bool , , : [ false - 123 * - ) - ( false false ] int ID ID : int ) { }",
  "func ID ( ID : bool , , : [ false - - * 123 ) - ( false false ] int ID ID : int ) { }",
  "func ID ( ID : true ) { var ID : [ int / ID * true - ID * ( 123 ) / - ( ID ) - 123 ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : true ) { var ID : [ int / ID * true - ID * ( 123 - / - ( ID ) ) 123 ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : true ) { var ID : [ int / ID } true - ID * ( 123 - / - ( ID ) ) 123 ] [ ] bool } func ID ( ) { *",
  "func ID ( ) : bool { var ID : bool var ID : [ ] bool } func : ( ) : bool { { var ID : int var ID ID int } print ( ID ) }",
  "func ID ( ) : bool ) var ID : bool var ID : [ ] bool } func : ( ) : bool { { var ID : int var ID ID int } print ( ID { }",
  "func ID ( ) : bool ) var ID : bool var ID : [ ID bool } func : ( ) : bool { { var ID : int var ID ID int } print ( ] { }",
  ") ID ( func : bool { var ID : bool var ID : bool { var ID : bool var ID : [ false * ID / ID ] [ ] bool } }",
  ") ID } func : bool { var ID : bool var ID : bool { var ID : bool var ID : [ false * ID / ID ] [ ] bool } (",
  "func ID ( ID : bool ) { var } : [ ] bool var ID : int return ID ( ) and - false } func ID ( ) { ID",
  "func ID bool ID : bool ) { var } : [ ] ( var ID : int return ID ( ) and - false } func ID ( ) { ID",
  "bool ID bool ID : func ) { var } : [ ] ( var ID : int return ID ( ) and - false } func ID ( ) { ID",
  "func ID ( ) : int { var ID : [ ] [ - ID ( ID [ ( ( ID ) ) ] ] int } func ) ( ) { }",
  "func ID ( ) : int { var ID : [ ] [ - ID int ID [ ( ( ID ) ) ] ] ( } func ) ( ) { }",
  "func ID ( ) : int { var ID ( [ ] [ - ID int ID [ ( ( ID ) ) ] ] : } func ) ( ) { }",
  "func ID ( ID : [ ID ( and [ ID * ID ( ) ) - - - ID ] ] bool ) { }",
  "- ID ( ID : [ ID ( and [ ID * ID ( ) ) func - - ID ] ] bool ) { }",
  "- ID ( ID : [ ID ( and [ ID * ID ( ) ) func - - ID ] ] } ) { bool",
  "func ID ( ID : bool , ID : ) , ID : bool bool { var ID : [ ] bool ID [ - 123 ] [ ID ] = ID } func ID ( ) { }",
  "func ID ( ID : bool , : ID ) , ID : bool bool { var ID : [ ] bool ID [ - 123 ] [ ID ] = ID } func ID ( ) { }",
  "func ID ( ID : bool , : ID ) , ID { bool bool : var ID : [ ] bool ID [ - 123 ] [ ID ] = ID } func ID ( ) { }",
  "func ID ( ) { var ID { [ ] [ ( ID [ ( - ID ) ] ) ] bool } func ID ( ) : }",
  "func ID ( ) { var ID { [ ] [ ( ID [ ( - ) ) ] ) ] bool } func ID ( ID : }",
  "func ID ( ) { var ID { [ ] [ ID ID [ ( - ) ) ] ) ] bool } func ( ( ID : }",
  "func ID ( ) { var int : [ ] [ false / ID + ( ( - - - - false ) ) ] [ ] [ ] ID var ID : [ ] [ ] bool }",
  "func ID false ) { var int : [ ] [ false / ID + ( ( - - - - ( ) ) ] [ ] [ ] ID var ID : [ ] [ ] bool }",
  "func ID false ) : var int { [ ] [ false / ID + ( ( - - - - ( ) ) ] [ ] [ ] ID var ID : [ ] [ ] bool }",
  "func ID ( ) { var ID : } var ID : bool while 123 * ( - ( - - - - - ( ID ) ) ) { } { } bool func ID ( ) { }",
  "func : ( ) { var ID ID } var ID : bool while 123 * ( - ( - - - - - ( ID ) ) ) { } { } bool func ID ( ) { }",
  "func : ( ) { var ID ID } var ID : bool while 123 * ( - ( - - - - - ( ID ) ) ) { } { } bool func ID ( ) { }",
  "func ID ( ID : [ - false * - - ID { ( - - ( ( true ) ) ) ] [ ID ] ] int ) [ }",
  "] ID ( ID : [ - false * - - ID { ( - - ( ( true ) ) ) func [ ID ] ] int ) [ }",
  "] ID ( ID : [ - false * - - ID { ( - - ( ( true ) } ) func [ ID ] ] int ) [ )",
  "ID func ( ) { return } func ID ( ) { print - false / true > ID }",
  "ID ( func ) { return } func ID ( ) { print - false / true > ID }",
  "ID { func ) ( return } func ID ( ) { print - false / true > ID }",
  "func ID ( ID : [ ( ( ID [ true * 123 / ( true ) ] ) ) ] [ { [ ] [ ] int ) ] }",
  "func ID [ ID : [ ( ( ID [ true * 123 / ( true ) ] ) ) ] ( { [ ] [ ] int ) ] }",
  "func ID [ ID : [ ( ( ID [ [ * 123 / ( true ) ] ) ) ] ( { true ] [ ] int ) ] }",
  "func ID ( ID : [ ID ( ) + - } ( 123 * - true ) + false ] int ) { } func ID ( ) { -",
  "func ID ( ID : ] ID ( ) + - } ( 123 * - true ) + false [ int ) { } func ID ( ) { -",
  "func ID ( ID : ] ID ( ) + - } ( 123 true - * ) + false [ int ) { } func ID ( ) { -",
  "func ID ( ) { ID ID : bool var ID : bool return - var ( ) [ - false ] }",
  "func ( ( ) { ID ID : bool var ID : bool return - var ID ) [ - false ] }",
  "( func ( ) { ID ID : bool var ID : bool return - var ID ) [ - false ] }",
  "func ID ID ) { var ID : [ ] [ ( 123 / false + ( ( ) + ID ) ] bool var ID : [ ] bool } func ID ( ) { }",
  "func ID ID ) ) var ID : [ ] [ ( 123 / false + ( ( { + ID ) ] bool var ID : [ ] bool } func ID ( ) { }",
  "func ID ID ) ) var ID : [ ] [ ( 123 / false func ( ( { + ID ) ] bool var ID : [ ] bool } + ID ( ) { }",
  "func ID ( ) { ID ( ID ( - true / - ( ID ) ) ) = ( ( - ( false ) ) ) call ID ( ) } { ID ( ) func }",
  "func ID ( ) { ID ( ID ( - true / - ( ID ) ) ) = ( ( - ( ID ) ) ) call false ( ) } { ID ( ) func }",
  "func ID ( ) { ID ( - ( - true / - ( ID ) ) ) = ( ( ID ( ID ) ) ) call false ( ) } { ID ( ) func }",
  "func ID ( ) { var ID : [ [ bool var ID : [ ID ] ( - ( - ( - ( true ) ) ) ) ] ] int }",
  "func ID ( ) { var ID : [ [ bool var ID : [ ID ] ( - ( - ( - ( true ) ) ) int ] ] ) }",
  "ID ID ( ) { var ID : [ [ bool var func : [ ID ] ( - ( - ( - ( true ) ) ) int ] ] ) }",
  "func ID ( ) : [ false - ID [ 123 - ( - ) ] + 123 123 ] bool { }",
  "func ID ( ) : 123 false - ID [ [ - ( - ) ] + 123 123 ] bool { }",
  "func ID ( ) : ( false - ID [ [ - 123 - ) ] + 123 123 ] bool { }",
  "func ID ( ID : bool ) : bool { var ID : [ ID ( - ( ID ) ) ] int } func ID ( ) } {",
  "func ID ( ID : bool ) : bool { var ID : [ ID ( - ( ID ) ) ] int } func ID ( ) } {",
  "ID func ( ) { var ID : bool var ID : bool if ID ( ( false ) ) { } print ( 123 ) }",
  "ID func ( ) bool var ID : { var ID : bool if ID ( ( false ) ) { } print ( 123 ) }",
  "ID func ( ) bool var ID ) { var ID : bool if ID ( ( false : ) { } print ( 123 ) }",
  "func ID ( ( { var ID : bool return - ID ) ) [ 123 - 123 / ( ( ( - true ) ) ) - ID ] }",
  "func ID ( { ( var ID : bool return - ID ) ) [ 123 - 123 / ( ( ( - true ) ) ) - ID ] }",
  "func ID ( { ( var ID : true return - ID ) ) [ 123 - 123 / ( ( ( - bool ) ) ) - ID ] }",
  "func ID ( ID : int , ID : int ) { var ID : [ ] bool ID [ ID false - - - ] [ ( true ) ] = ( true ) }",
  "func ID ( ID : int , int : ID ) { var ID : [ ] bool ID [ ID false - - - ] [ ( true ) ] = ( true ) }",
  "func ID ( ID : int , int : ID ) { var ID : [ ] bool ( [ ID false - - - ] [ ( true ) ] = ID true ) }",
  "func ID ( ) : [ ID ( ) / ID ( ) [ ( ( ID ) ) ( * ID ] bool { } func ID ] ) { }",
  "func ID ( ) : [ ID ( ) / ID ( ) [ ( ( ID * ) ( ) ID ] bool { } func ID ] ) { }",
  "func ID ( ) : [ ID ( ) / ID ( ) [ ( ( ID * ) ( ) ID ] bool { } func ID ] { ) }",
  "func ID ( ) : int { var ID : bool call ID ( bool { var ID : int var ID : [ ] ) return ID } }",
  "func ID ( ) : int { var ID : bool call ID ( bool { var ID : int var ID : ID ] ) return [ } }",
  "ID ID ( ) : int { var ID : bool call ID ( bool { var ID : int var func : ID ] ) return [ } }",
  "func ID ( ) : bool { return } func ID ( ) : int { var ID : [ ] int var ID : int } ID ( - false ) while false { } call",
  "func ID ( : : bool { return } func ID ( ) ) int { var ID : [ ] int var ID : int } ID ( - false ) while false { } call",
  "func ID ( : : bool { return } func ID ( ) ) int { var ID { [ ] int var ID : int } ID ( - false ) while false : } call",
  "func ID ( ID : ) , ID : int int : int { var ID : [ ] [ false and ID ] bool }",
  "func ID ( ID : ) , ID : int int : int { var ID : [ ] [ false and ID ] bool }",
  "func ID ( ID : ) , ID : int int : int { var ID : [ ] [ false and ID ] bool }",
  "func ID ( ) : bool { func ID : [ ] bool var ID : [ ] bool ID ( - - ( ID ) ) = - false } var ID ( ) { }",
  "func ID var ) : bool { func ID : [ ] bool ( ID : [ ] bool ID ( - - ( ID ) ) = - false } var ID ( ) { }",
  "func ID var ) : bool { func ID : [ ] bool ( ID : [ bool ] ID ( - - ( ID ) ) = - false } var ID ( ) { }",
  "func ID ( ID true [ : / ( ID * - ( - false ) ) ] bool ) { }",
  "func ID ( ID true [ : / ( ID * - ( - false ) ) ] bool ) { }",
  "func ID ( ID - [ : / ( ID * - ( true false ) ) ] bool ) { }",
  "func ID ( ) : } { print ( 123 + ID + ( false ) ) bool",
  "func ID + ) : } { print ( 123 ( ID + ( false ) ) bool",
  "func ID + ) : } { print ( 123 ( ID + ( false ) ) bool",
  "} ID ( ID : [ ID [ ID ( ) / ID [ ID ] ] ] bool ) { func",
  "} ID ( ID : [ ID [ ID ( ) / ID [ ID ] ] func bool ) { ]",
  "func ID ( ID : 123 ID / ID ( ) [ [ + true - 123 ] ] bool ) { }",
  "func ID ( ID : 123 ID ] ID ( ) [ [ + true - 123 ] / bool ) { }",
  "func ID ( ID : 123 ID true ID ( ) [ [ + ] - 123 ] / bool ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : [ ( false / ( ( ( ID bool ) ) / - - 123 ) ] ) { }",
  "func ID ( ID : bool , ID : bool [ ID : bool ) : , ( false / ( ( ( ID bool ) ) / - - 123 ) ] ) { }",
  "- ID ( ID : bool , ID : bool [ ID : bool ) : , ( false / ( ( ( ID bool ) ) / - func 123 ) ] ) { }",
  "func ID ( ) : bool { var ID : int / false + false return ( - ( ID ) ) + - true }",
  "true ID ( ) : bool { var ID : int / false + false return ( - ( ID ) ) + - func }",
  "true ID ( ) : - { var ID : int / false + false return ( - ( ID ) ) + bool func }",
  "( ID func ) : bool { ID = - ( ( - ID * ID / ID ) ) { } } func ID ( ) { }",
  "( ID func ) : bool { ID = - ( ( - ID * ID / ID ( ) { } } func ID ) ) { }",
  "func ID ( ID : int , ID : int , ID - bool ) : [ false - - - : - - - true ] bool { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID - bool ) : [ false - - - - : - - true ] bool { } func ID ( ) { }",
  "func ID ID ID : int , ID : int , ( - bool ) : [ false - - - - : - - true ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID var bool { { var ID : int { : ID : bool var ID : int } } } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID var bool { : var ID { int { : ID : bool var ID : int } } } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { var ID ID bool { : var ID { int { : ID : bool var var : int } } } } func ID ( ) { }",
  "func ID ( ) : bool ( if ( ID [ { ID ) ] ) { } }",
  "func ID ( } : bool ( if ( ID [ { ID ) ] ) { ) }",
  ") ID ( ID : [ 123 + - false / - - true / ID ( func [ ID ] ] [ ] int ) { }",
  ") ID ( ID : [ 123 + - false / - - true / ID ( func [ ID ] ] [ ) int ] { }",
  ") ID ( ID : [ 123 + - false / - - true / ID ( func [ ID ] ] [ ) int ] { }",
  "func ID ( ) : [ ] int { call ID ( false ) - true / ID ( ) + - 123 ) if ID { } } func ID ( * { }",
  "func ID ( ) : [ ] int { call ID ID false ) - true / ID ( ) + - 123 ) if ( { } } func ID ( * { }",
  "func ID ( ) { var ID : int var ID : [ ] ID { var ID : int return } while ( false ) { } } func int ( ) { }",
  "func ID ( ) ID var ID : int var { : [ ] ID { var ID : int return } while ( false ) { } } func int ( ) { }",
  "func ID ( ) ID var ID : int var { : [ while ID { var ID : int return } ] ( false ) { } } func int ( ) { }",
  "func ID ( ) : bool { var ID ( int return ( true + false * - ( ( 123 ) ) + ID ) } func ID : ) { }",
  "func ID ( ) : bool { var ID ( int return ( true + false * - ( ( ) ) ) + ID ) } func ID : 123 { }",
  "true ID ( ) : bool { var ID ( int return ( func + false * - ( ( ) ) ) + ID ) } func ID : 123 { }",
  "func ID func ) { { var ID : int if ( 123 * false * false ) { } } } ( ID ( ) { }",
  "func ID func ) { { ) ID : int if ( 123 * false * false ) { } } } ( ID ( var { }",
  "func ID func ) { { ) } : int if ( 123 * false * false ) { } ID } ( ID ( var { }",
  "func ID ( ) { var ID : int var ID : int return } func ID ( ID : bool , ID : int , ID : [ ] int ) : [ ] [ ] { bool }",
  "func ID ( ) { var } : int var ID : int return } func ID ( ID : bool , ID : int , ID : [ ] int ) : [ ] [ ] { bool ID",
  "func ID ( ) { var int : } var ID : int return } func ID ( ID : bool , ID : int , ID : [ ] int ) : [ ] [ ] { bool ID",
  "func ID ( ) { var ID : [ - ID / ( bool > ID ) * true ] bool var ID : true }",
  "func ID ( ) { var ID : [ - ID / > bool ( ID ) * true ] bool var ID : true }",
  "func ID ( ) var { ID : [ - ID / > bool ( ID ) * true ] bool var ID : true }",
  "func ID ID ) { var ID : int var ID : int ( ( ) [ ( ( true ) ) ] = ( true ) ID = - ID }",
  "func ID ID ) { var ID : int var ID : int ( ( ) [ ( ( true ( ) ] = ) true ) ID = - ID }",
  "func ID ID ) int var ID : int var ID : { ( ( ) [ ( ( true ( ) ] = ) true ) ID = - ID }",
  "func 123 ( ) { print - - - - - 123 - false * ID - - ID call ID ( ) }",
  "func 123 ( ) { print - - - - - 123 - false call ID - - ID * ID ( ) }",
  "func 123 ( ) { print - - - - - 123 - false * ID - - ID call ID ( ) }",
  "func ID ( ) : bool { print false / ( - ID [ - ( true ) ] [ ( - - 123 ) { ) } func ID ( ) ] }",
  "/ ID ( ) : bool { print false func ( - ID [ - ( true ) ] [ ( - - 123 ) { ) } func ID ( ) ] }",
  "/ ID ( ) : bool { print false func ( - ID [ - ( true ) ] [ ( - - 123 ) { ) } func ID ( ) ] }",
  "func ID ( ) ID bool { if : [ ID ( ) [ - ID ] [ ID ] ] [ ID ] { } }",
  "func ID ( ) ID bool { if : [ ID ( ) [ ] ID ] [ ID ] ] [ ID - { } }",
  "func ID ( ) ID bool { if : ] ID ( ) [ ] ID ] [ ID [ ] [ ID - { } }",
  "func ID ID ID : int , ID : bool ) : bool { var ID : bool while ( false * 123 * ( ID ) ) { } while ( { } }",
  "func ID ID ID : int , ID : bool ) : bool { var ID : bool while ( false * 123 * ( ID ) ) { } while ( { } }",
  "func ID ID ID : int , ID : bool ) ID bool { var ID : bool while ( false * 123 * ( : ) ) { } while ( { } }",
  "func ID { ID : [ - - - ( ( 123 / ( false ) ) ) ] bool ) ( }",
  "func ID { ID : [ - - - ( ( 123 / ( false ) ) ) ] bool ) ( }",
  "func ) { ID : [ - - - ( ( 123 / ( false ) ID ) ] bool ) ( }",
  "func ID ( ID ( int , ID : [ false - ID : ) / ( ( ID ) ) ] [ ] [ ] [ ] [ ] int ) { }",
  "func ID ( ID ( int : ID : [ false - ID , ) / ( ( ID ) ) ] [ ] [ ] [ ] [ ] int ) { }",
  "func ID ( ID ( int : ID : [ false - ID , ) / ( ( ] ) ) ID [ ] [ ] [ ] [ ] int ) { }",
  "func ID ( ID : ID , ID : [ ] [ ] [ false + ( ( ID ) ) - ID ] int , bool : int ) { }",
  "func ID ( ID : ID , ID : [ ] [ ] [ false + ( ( ID ) ID - ) ] int , bool : int ) { }",
  "func ID ( ID : ID , ID : [ ] [ ] [ false + ( ( ID ) ID - ) ) int , bool : int ] { }",
  "func ID ( ID : bool - : int { if ) ( true * true > - ( ID ) ) { } if ID { } }",
  "if ID ( ID : bool - : int { func ) ( true * true > - ( ID ) ) { } if ID { } }",
  "if ID ( ) : bool - : int { func ) ( true * true > - ( ID ID ) { } if ID { } }",
  "func ID ( ) { var ID : int { var ID = bool } ID : false } func ID ( ) { }",
  "int ID ( ) { var ID : func { var ID = bool } ID : false } func ID ( ) { }",
  "int ID ( ) { var ID : func { var ID = bool } ID : false { func ID ( ) } }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] bool print ( false / ( ( 123 ) ) } while ( ( ID ) ) { } } func ID ( ) { )",
  "func ID ( ) : bool { var ID : bool var ID : [ ] bool print ( false / ( ( 123 ) ) } while ( ( ID ) ) { } } func ID ( ) { )",
  "func ID ( ) 123 bool { var ID : bool var ID : [ ] bool print ( false / ( ( : ) ) } while ( ( ID ) ) { } } func ID ( ) { )",
  "func ID bool ID : int ) : ( { var ID : [ ] [ ] bool print 123 * false * - ID ID = 123 }",
  "func ID bool ID : int ) : ( { var bool : [ ] [ ] ID print 123 * false * - ID ID = 123 }",
  "func ID bool ID : int ) - ( { var bool : [ ] [ ] ID print 123 * false * : ID ID = 123 }",
  "func ID ( ) { var ID : [ true - ( 123 / / 123 - - - ( false ) ) ] bool }",
  "func ID ( ) { var ID : [ true - ( 123 / / 123 ) - - ( false - ) ] bool }",
  "{ ID ( ) func var ID : [ true - ( 123 / / 123 ) - - ( false - ) ] bool }",
  "func ID ( ) { var ID : int var ID : [ ] [ false * < false - ID ( ) ] [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ] [ false * < false - ID ( ) ] [ ] func } bool ID ( ) { }",
  "func ID ( ) { var ID : int * ID : [ ] [ false var < false - ID ( ) ] [ ] func } bool ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] - true / 123 * ID ( ) ) ( [ ] bool ) { }",
  "func ID ( ID : bool , ID : ( ] [ ] - true / 123 * ID [ ) ) ( [ ] bool ) { }",
  "func ID ( ID : bool , ID : ( ] [ ] - true / 123 * ID [ ) bool ( [ ] ) ) { }",
  "func ID ( ) { var ID ] int { var ID : bool { { var ID : int ID [ ID : [ ID ] = false call ID ( ) } } } print false } func ID ( ) { }",
  "func ID ( ) { var ID ID int { var ID : bool { { var ID : int ID [ ID : [ ID ] = false call ] ( ) } } } print false } func ID ( ) { }",
  "func ID ( ) { var ID ID int { var ID : bool { { var ID : int call [ ID : [ ID ] = false ID ] ( ) } } } print false } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ID ( ) [ ( ID [ true ] ) ] [ ( - ID ) ) ] [ ] [ ] [ ] int ] { }",
  "func ID ( ID : int , ID : [ ID ( ) [ ( ID [ true ] ) ] [ ( - ID ) ) ] [ ] [ ] [ ] int ] { }",
  "func ID ID ( : int , ID : [ ID ( ) [ ( ID [ true ] ) ] [ ( - ID ) ) ] [ ] [ ] [ ] int ] { }",
  "func ID ( - { var ID : [ ] int var ID : int call ID ( ) if ) ( - ID ) { } }",
  "func ID ( - { var ID : [ ] int var ID : int call ID ( ( if ) ) - ID ) { } }",
  "func ID ( - { var ID : [ ] int var ) : int call ID ( ( if ) ID - ID ) { } }",
  "func ID ( ID : int , ID : int ) : int { var ID : [ ] [ ] bool { var ID : [ - ) ID ) ] int } if ID { } } func ID ( ( { }",
  "func ID { ID : int , ID : int ) : int ( var ID : [ ] [ ] bool { var ID : [ - ) ID ) ] int } if ID { } } func ID ( ( { }",
  "func ID { ID : int , ID : int ) : int ( var ID : [ ] [ ] bool { } ID : [ - ) ID ) ] int } if ID { } var func ID ( ( { }",
  "func ID ( ID : int , ID : int , ID func bool ) : bool { { var ID : [ ] [ ] bool if ID { } } print ( - 123 ) } : ID ( ) { }",
  "func ID ( ID : int , ID : int { ID func bool ) : bool , { var ID : [ ] [ ] bool if ID { } } print ( - 123 ) } : ID ( ) { }",
  "func ID ( ID : int , ID : int { ID func bool ) : } , { var ID : [ ] [ ] bool if ID { } bool print ( - 123 ) } : ID ( ) { }",
  "func ID ( ) { var ID : [ ] ( ] int print ID + ID [ ID ] [ [ ID ) ] } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] ( ] int print ID + ID [ ID ] [ [ ID ) ] } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] ( ] int print ID + ID [ ID ] ] [ ID ) [ } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : [ ] int ID [ false / ID * - ID true = ] print false } func ID ( ) { }",
  "func ID ( ID : int , ( : int ) { var ID : [ ] int ID [ false / ID * - ID true = ] print false } func ID ID ) { }",
  "func ID ( ID : int , ( : int ) { var ID : [ ] int ID [ false / ID * - ID true = ] print ID } func false ID ) { }",
  "( ID ( ) : bool { return ID ( false / ID func ID ) / ( - ID ) ) }",
  "ID ID ( ) : bool { return ( ( false / ID func ID ) / ( - ID ) ) }",
  "ID ID ( ) : bool { return ( ( false / / func ID ) ID ( - ID ) ) }",
  "func ID ( ID : int , : ID bool ) : int { var ID : [ ] [ ] int ID = ID if false { } } func ID ( ) { }",
  "func ID ( ID : int , : ID bool ) : int { var ID : [ ] [ ] int ID = ID { false { } } func ID ( ) if }",
  "func ID ( ID : int , : ID bool ) : int { var ID : [ ] [ ] int ID = ID { false { } } func ID ( ) if }",
  "func ID ( ) { while 123 / - ( ID [ ( ( ( - false ) ) ) ] [ - ( } ID ) ] ) { } print 123 -",
  "func - ( ) { while 123 / - ( ID [ ( ( ( - false ) ) ) ] [ - ( } ID ) ] ) { } print 123 ID",
  "func - ( ) { while 123 / - ( ID [ ( ( ( - false ) ) ) ] [ - ( } ID ) print ) { } ] 123 ID",
  "func ID ( ) { { var ID : bool ] bool var ID : [ } }",
  "func ID ( ) { { var ID : bool ] bool var } : [ ID }",
  "func ID ( ID : int ) { var ID false int return ID and false / : + ID } func ID ( ) { }",
  "func ID ( ID : int ) ID var ID false int return { and false / : + ID } func ID ( ) { }",
  "func ID ( ID : int ) ID var ID false int return false and { / : + ID } func ID ( ) { }",
  "func ID ) ID : bool , ID : bool ) : [ ID ( ( ID ( ) ) ( ] int { } func ID ( ) { }",
  "func ID ) ID : bool , ID : bool ) : [ ID ( ( ID ( ) ) ( ] int { } func ID ( ) { }",
  "func ID ) ID ) bool , ID : bool ) : [ ID ( ( ID ( ) ) ( ] int { } func ID ( : { }",
  "func ID ( ID : bool ) { ( ID : int return - true * 123 >= ID [ ID ] [ - ID ] } func ID var ) { }",
  "func ID ( ID : bool ) { ( ID : int return - true * 123 >= ID [ ID ] [ - ID ] } func ID var ) { }",
  "func ID ( ID : bool ) { ( ID : int return - true ] 123 >= ID [ ID * [ - ID ] } func ID var ) { }",
  "func ID ID ) { var ID : int if ( false / - - ( [ - 123 ] [ - - 123 ] ) { } } func ID ( ) { }",
  "func ID ID ) { var ID : int if ( false / - - ( [ - 123 ] [ - - 123 ] ) { } } func ID ( ) { }",
  "func ID ID ) { var ID - int if ( false / : - ( [ - 123 ] [ - - 123 ] ) { } } func ID ( ) { }",
  "func ID ( ID : [ ( ID + ID >= true and and ID true ) ] bool ) { }",
  "func ID ( ID : [ ( ID + ID { true and and ID true ) ] bool ) >= }",
  "func ID ( ID : [ ( } + ID { true and and ID true ) ] bool ) >= ID",
  "func : ( ) { var ID ID bool var ID : bool call ID ( ID [ - false * ID ] ) while ID { } }",
  "func : ( ) { var ID ID bool var ID : bool call ID * ID [ - false ( ID ] ) while ID { } }",
  "func : ] ) { var ID ID bool var ID : bool call ID * ID [ - false ( ID ( ) while ID { } }",
  "func ID ( ) ID var ID : int if ID ( - { * ID ( ) * 123 ) { } } func ID ( ) { }",
  "func ID ( ) ID var ID : int if ID ( - { * ID ( ) * 123 ) { } } func ID ( ) { }",
  "func ID ( ) ID var ID : { if ID ( - { * ID ( ) * 123 ) int } } func ID ( ) { }",
  "func ID ( ) { var ID : int while - 123 and 123 + ID [ ( ( - ( ) ) ] [ ( - 123 ) ] { } if false ID ) { } }",
  "func ID ( ) : bool { } ID : [ ] int var ID : [ ] bool ID ( ) = ID ( ) var",
  "func ID ( ) : bool { } ID var [ ] int : ID : [ ] bool ID ( ) = ID ( ) var",
  "func ID ( ) : bool { } ID var [ ] int : ID ] [ : bool ID ( ) = ID ( ) var",
  "func ID ( ) ID var { : bool { var ID : int return } return }",
  "func ID ( ) ID var { : bool ID var { : int return } return }",
  "func ID ( ) { var { : bool ID var ID : int return } return }",
  "func ID ( ID : int ( ID : bool ) { var ID : [ ] int var ID : int call ID , ) call ID ( false ) } func ID ( ) { }",
  "func ID ( ID : int ( ID : bool ) { var ID : [ ] , var ID : int call ID int ) call ID ( false ) } func ID ( ) { }",
  "func ID ( ID : int ( ID : bool ) { var ID : [ ] , var ID : int call ID int ) call ID ( ( ) } func ID false ) { }",
  "ID ID ( ID : [ - - - ID [ ( 123 - func ) ] [ ID ] ] bool ) { } func ID ( ) { }",
  "ID ID ( ID : [ - - - ID [ ( 123 - func ) ] [ ID ] ] bool ) } } func ID ( ) { {",
  "ID ID ( ID : [ - - - ID [ ( 123 - func ) ] [ ] ] ID bool ) } } func ID ( ) { {",
  "func ID ( ) { var ID : [ false bool ID ( ) [ ID ( false ) ] ] bool var ID : / }",
  "func ID ( ) { var ID : [ false ] ID ( ) [ ID ( false ) ] bool bool var ID : / }",
  "func ID : ) { var ID : [ false ] ID ( ) [ ID ( false ) ] bool bool var ID ( / }",
  "func ] ( ) { var ID : [ ] [ ] [ ] int var ID : [ ID [ ID ] [ ( ( ID ) ) ID ] [ ] int } func ID ( ) { }",
  "func ] ( ) { ) ID : [ ] [ ] [ ] int var ID : [ ID [ ID ] [ ( ( ID ) ) ID ] [ ] int } func ID ( var { }",
  "func ] ( ) { ) ID : [ ] [ ] int ] int var ID : [ ID [ ID ] [ ( ( ID ) ) ID ] [ ] [ } func ID ( var { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : true ( ID [ ( ID ) ] [ [ ] ) ] [ ] int var ID : bool }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : true ( ID [ ( ID ) ] [ [ ] ) ] [ ] int var ID : bool }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : true ] ID [ ( ID ) ] [ [ ] ) ] [ ( int var ID : bool }",
  "func ID ( ) : bool { var ID : int print ID ) ( false / ( - - true [ / ( ( 123 ) ) ) ] } func ID ( ) { }",
  "func ID ( ) - bool { var ID : int print ID ) ( false / ( - : true [ / ( ( 123 ) ) ) ] } func ID ( ) { }",
  "func ID ( ) print bool { var ID : int - ID ) ( false / ( - : true [ / ( ( 123 ) ) ) ] } func ID ( ) { }",
  "func ID ( ID : bool , } : bool ) : bool { { var ID : bool { return - ID } } ID",
  "func ID ( bool : ID , } : bool ) : bool { { var ID : bool { return - ID } } ID",
  "func ID ( return : ID , } : bool ) : bool { { var ID : bool { bool - ID } } ID",
  "func ID ( ) : - { var ID : int var ID : int call ID ( false >= ID [ ( bool true ) ] ) while 123 { } } func ID ( ) { }",
  "func ID ( ) : - { var ID : int var ID : int call ID ( false >= ID [ ( bool ) ) ] true while 123 { } } func ID ( ) { }",
  "func ID ( ) : - { var ID : int var ID : int call ID ( false >= ID [ ( bool ) ) ] true while 123 { } } func ID ( ) { }",
  "func ID ( int : ) { var ID : int if - ( 123 * true * - 123 ) { } print ( ( 123 ) ) } func ID ( ) { }",
  "func ID ( int : ) { var ID : int } - ( 123 * true * - 123 ) { if print ( ( 123 ) ) } func ID ( ) { }",
  "func ID ( int var ) { : ID : int } - ( 123 * true * - 123 ) { if print ( ( 123 ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) : [ - ID ( ] ID [ - ID - ) ] [ ] int { }",
  "func ID ( ] : int , ID : bool , ID : int ) : [ - ID ( ] ID [ - ID - ) ID [ ] int { }",
  "func ID ( ] : int , ID : bool , ID : int ) : [ - ( ID ] ID [ - ID - ) ID [ ] int { }",
  "func ID ( ) { while } ( - ( - 123 * - ID ) ) { } ID func ID ( ) { }",
  "func ID ( ) ( while } ( - { - 123 * - ID ) ) { } ID func ID ( ) { }",
  "func ID ( ) ( while ) ( - { - 123 * - ID } ) { } ID func ID ( ) { }",
  "func ID ) ID : bool , ID : int ) { while true / 123 - ( ID ( { } } func ID ( ) { }",
  "func ID ) ID : bool , ID : int ) { while true / 123 - ( ID ( ( } } func ID { ) { }",
  "func ID ) true : bool , ID : int ) { while ID / 123 - ( ID ( ( } } func ID { ) { }",
  "func ID ( ID : int ) { if ID ( ) [ ID ( - 123 ) ] { ( ID ) ] [ } ID = ID }",
  "func ID if ID : int ) { ( ID ( ) [ ID ( - 123 ) ] { ( ID ) ] [ } ID = ID }",
  "func ID if ID : int ) { ( ID ( ) [ ID ( ID 123 ) ] { ( - ) ] [ } ID = ID }",
  "func ID int ID : int ) : bool { var ID : ( var ID : int }",
  "func ID int ID : int ) : bool ID var { : ( var ID : int }",
  "func ID int ID : int ) : bool ID var { : ( var ID : int }",
  "func ID ( ) { var ID : [ false ID ID + ( ( - ( + ) ) ) ] int var ID : bool }",
  "func : ( ) { var ID : [ false ID ID + ( ( - ( + ) ) ) ] int var ID ID bool }",
  "func : ( ) ID var { : [ false ID ID + ( ( - ( + ) ) ) ] int var ID ID bool }",
  "func ID ( ) ID var ID : int var { : [ ] [ ( ( false ) ) ] int } func ID ( ) { }",
  "func ID ( ) ID var ID : int var { : [ ] [ ( false ( ) ) ] int } func ID ( ) { }",
  "func ID ( ) ID var ID : int } { : [ ] [ ( false ( ) ) ] int var func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : int { var ID : bool return - ( ID [ ( ) ) ] [ ( ( ID ) ) ] ID } func ID ( ) { }",
  "func ID ( ID ) int , ID : [ - - ID ( ID [ ID ] [ ( false : ] ) ] [ ] bool , ID : int ) { }",
  "func ID ) ID ( int , ID : [ - - ID ( ID [ ID ] [ ( false : ] ) ] [ ] bool , ID : int ) { }",
  "func ID ) ID ( int , ID : [ - - ID ( ID [ ID ] [ ( false : ] ) ] [ ] bool , ID : int ) { }",
  "func ID ( ID { [ true or ID ( ) * true / - ID ( ) or ( ( false ) ) ] bool ) : }",
  "func ID ( * { [ true or ID ( ) ID true / - ID ( ) or ( ( false ) ) ] bool ) : }",
  "func ID ( } { [ true or ID ( ) ID true / - ID ( ) or ( ( false ) ) ] bool ) : *",
  "func ID ( ID : [ ] [ ] int , ID : bool , ID : int ) : [ ] [ ] bool ] int { var ID : [ ] int var ID : [ } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int , ID { bool , ID : int ) : [ ] [ ] bool ] int : var ID : [ ] int var ID : [ } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int , ID { bool , ID : int ) : { ] [ ] bool ] int : var ID : [ ] int var ID : [ } func ID ( ) [ }",
  "func ID ( ID : int , ID : int , ID : int ) { ID [ - ID ) ( - - ( 123 ( ) ) ] [ - - true ] = - ( 123 ) print ID } func ID ( ) { }",
  "func ID ( ID : int - ID : int , ID : int ) { ID [ - ID ) ( - - ( 123 ( ) ) ] [ , - true ] = - ( 123 ) print ID } func ID ( ) { }",
  "func ID ( ID : int - ID : int , ID : int ) { ID [ - ID ) ( - - ( 123 ) ) ) ] [ , - true ] = - ( 123 ( print ID } func ID ( ) { }",
  "func ID ( ) : bool { ) ( - true + ID * ( false ) / - ID ) { } ID = ( - - ( false ) if }",
  "func ID ( ) : bool { ) ( - true + ID * ( false ) / - { ) ID } ID = ( - - ( false ) if }",
  "func ID ( ) : bool ) ) ( - true + ID * ( false ) / - { ) ID } ID = ( - - ( false { if }",
  "func ID ( ) : [ ] int { var ID : bool print ID ( true ) - ( - false ) - }",
  "func ID var ) : [ ] int { ( ID : bool print ID ( true ) - ( - false ) - }",
  "func ID var ) : [ ] int { ( ID : bool print ID ( true ) - ( - } ) - false",
  "func ID ( ID : [ ] int ) { var ID : bool var ID : bool print 123 } true / - ( - ID ) *",
  "func ID ( - : [ ] int ) { var ID : bool var ID : bool print 123 } true / - ( ID ID ) *",
  "123 ID ( - : [ ] int ) { var ID : bool var ID : bool print func } true / - ( ID ID ) *",
  "func ID ( ID : int , ID : [ ] ] ) : bool { var ID : int var ID : [ ] [ ( - ID ) bool int }",
  "] ID ( ID : int , ID : [ ] func ) : bool { var ID : int var ID : [ ] [ ( - ID ) bool int }",
  ", ID ( ID : int ] ID : [ ] func ) : bool { var ID : int var ID : [ ] [ ( - ID ) bool int }",
  "func ID ( ) : int { } func ) ( ID : [ ( - ( - 123 ) ) ] bool { }",
  "func ID ( ) : int } } func ) ( ID : [ ( - ( - 123 ) ) ] bool { {",
  "func ID ( ) : int } } func ) ( - : [ ( - ( ID 123 ) ) ] bool { {",
  "func ID [ ) { var ID : bool if - false / - ID [ ID ( - ID ] ] [ - ID ] { } call ID ( ) }",
  "func ID [ ) { var ID : ] if - false / - ID [ ID ( - ID ] bool [ - ID ] { } call ID ( ) }",
  "func ID [ } { var ID : ] if - false / - ID [ ID ( - ID ] bool [ - ID ] { } call ID ( ) )",
  "func ID ( ID : [ ( 123 + false / 123 / true - 123 ( ] [ ] int ) { } func ID ) ) { }",
  "func ID ( ID : [ ( 123 + false 123 / / true - 123 ( ] [ ] int ) { } func ID ) ) { }",
  "func ID ( ID : [ ( / + false 123 / 123 true - 123 ( ] [ ] int ) { } func ID ) ) { }",
  "func ] ( ) { var ID : [ ( ID ( ) * ID [ false ] ) ID int var ID : int }",
  "func ] ( ) { var ID : [ ( int ( ) * ID [ false ] ) ID int var ID : ID }",
  "func ] ( ) { ) ID : [ ( int ( var * ID [ false ] ) ID int var ID : ID }",
  "func ID ( ) : int { return false * ID [ ID ( ) [ ( - ( ] - ID ) ) ) ] [ false ( ] }",
  "func ) ( ) : int { return false * ID [ ID ( ) [ ( - ( ] - ID ID ) ) ] [ false ( ] }",
  "func ) ( ) : int ( return false * ID [ ID { ) [ ( - ( ] - ID ID ) ) ] [ false ( ] }",
  "func ID ( ) : bool { var ID : bool var ID : ) call ID ( - ( ( - ( ID bool ) ) ) }",
  "{ ID ( ) : bool func var ID : bool var ID : ) call ID ( - ( ( - ( ID bool ) ) ) }",
  "{ ID ( ) : bool func var ID : bool var ID : ) call ID ( - ( ( - ( ID bool ) ) ) }",
  "func var ( ) : int { ID ID : int call ID ( ) while false / 123 and ( ID ) and ( ( ID ) ) { } }",
  "func var ( : : int { ID ID ) int call ID ( ) while false / 123 and ( ID ) and ( ( ID ) ) { } }",
  "true ID ( ) : [ true >= ( ID / - ID ( - ( func ) ) ) ] [ ] bool { }",
  "true ID ( ID : [ true >= ( ID / - ) ( - ( func ) ) ) ] [ ] bool { }",
  "true ID ( ID : [ true >= ( ID / - ) ) - ( func ( ) ) ] [ ] bool { }",
  "func ID ( ID : int ) { } func ID ( ID { ) ( - ID ( ) * ( - ( ( ID ) ) ) / - 123 ) = - ID print ID }",
  "func ID [ ID : [ ] int ) : bool { var ID : [ ( ID [ - ( ( ( - - 123 ) ) ) ] ( ID ] ) ] bool }",
  "] ID [ ID : [ func int ) : bool { var ID : [ ( ID [ - ( ( ( - - 123 ) ) ) ] ( ID ] ) ] bool }",
  "] ID } ID : [ func int ) : bool { var ID : [ ( ID [ - ( ( ( - - 123 ) ) ) ] ( ID ] ) ] bool [",
  "func ID ( ) : int , ID : [ ] [ ID ( ID [ - ID [ false ] ] ] int , ID : int ) { }",
  "func ID ( ) : int , ID : ( ] [ ID [ ID [ - ID [ false ] ] ] int , ID : int ) { }",
  "func ID ( ) : int , ID : ( ] ID [ [ ID [ - ID [ false ] ] ] int , ID : int ) { }",
  "func ID ( ) { var ID : int print ID ] ) [ - - 123 / - ( ID ) / ( ID ) ( [ ID ] ID = ( ( - ID ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : int print ID ] ) } - - 123 / - ( ID ) / ( ID ) ( [ ID ] ID = ( ( - ID ) ) } func ID ( ) { [",
  "func ID ( ) { var ID : int print ID ] ) } - - 123 / - ( ID ) / ] ID ) ( [ ID ( ID = ( ( - ID ) ) } func ID ( ) { [",
  "func ID ( ) : [ ( ) false * ID ( false ) ) ) ] bool { } func ID ( ( { }",
  "{ ID ( ) : [ ( ) false * ID ( false ) ) ) ] bool { } func ID ( ( func }",
  "ID ID ( ) : [ ( ) false * ID ( false ) ) ) ] bool { } func { ( ( func }",
  "func 123 ( ) { call ID ( ) call ID ( ID [ true / ( ID ) / - ( ( true ) ) ] ) }",
  "func 123 ( ) { call ID ) ( call ID ( ID [ true / ( ID ) / - ( ( true ) ) ] ) }",
  "func 123 ( ) { call ID ) ( call ID ( ID [ ) / ( ID ) / - ( ( true ) ) ] true }",
  "func ID ( ) : bool { call ID ( ID func true - ( ID ) - - ( ID ) ) ) } ( ID ( ) { }",
  "func ID ( ) : bool { call ID ( ID func ) - ( ID ) - - ( ID ) ) ) } ( ID ( true { }",
  "func ID ) ) : bool { call ID ( ID func ) - ( ID ) - - ( ID ) ) ( } ( ID ( true { }",
  "func ID ( ID : int ) { var ID : int var ID : [ ID [ false * ( true ) * - } ] ] [ ] [ ] [ ] [ ] [ ] [ ] int true func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int ] ID : [ ID [ false * ( true ) * - } ] ] [ ] [ ] [ ] [ ] [ ] [ var int true func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int ] ) : [ ID [ false * ( true ) * - } ] ] [ ] [ ] [ ] [ ] [ ] [ var int true func ID ( ID { }",
  "func ID ( ID ( [ - false * - - - ( : false * ID / ( ID ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID ) [ - false * - - - ( : false * ID / ( ID ) ) ( ] int ) { } func ID ( ) { }",
  "func { ( ID ) [ - false * - - - ( : false * ID / ( ID ) ) ( ] int ) ID } func ID ( ) { }",
  "func ID var ) : int { var ID : [ ] int ( ID : int } func ID ( ) : int { var ID : int return - true }",
  "func ID var ) : int { var ID : [ ) int ( ID : int } func ID ( ] : int { var ID : int return - true }",
  "func ID var ) : int { var ID : [ ) int ( ID : int } func ID ( ] : int { var ID : int return - true }",
  "func ID ( ) { var ID : [ ( ID ( true / ( - - - ( ID ) ) ) ) ] [ int [ ] ] } func ID ( ) { }",
  "func ID ( ) { var ) : [ ( ID ( true / ( - - - ( ID ) ID ) ) ] [ int [ ] ] } func ID ( ) { }",
  "func ID ( ) { var ) : [ ( ID ( true / ( - - - ( ID [ ID ) ) ] [ int ) ] ] } func ID ( ) { }",
  ", ID ( ID : bool func ID : bool ) { var ID : int while ID ( ( - false ) ) { } } func ID ( ) { }",
  ", ID { ID : bool func ID : bool ) ( var ID : int while ID ( ( - false ) ) { } } func ID ( ) { }",
  ", ID { ID : bool func ID } bool ) ( var ID : int while ID ( ( - false ) ) { } : func ID ( ) { }",
  "func ID ( ) { ID [ ( 123 / true - ( 123 ) ) ] [ - ID ) = ( - - false ) } func ID ( ] { }",
  "func ID ( ) { ID [ ( - / true - ( 123 ) ) ] [ - ID ) = ( - 123 false ) } func ID ( ] { }",
  "func ID ( ) { ID [ ( - / true - ( 123 ) ) ] [ - ID ) = ( - 123 ID ) } func false ( ] { }",
  "func ID ( ID : / false [ ID ] int ) : int { { var ID : [ ] bool var ID : bool } }",
  "func ID ( ID : / false [ ID ] int ) : int { { var ID : [ ] bool var ID : bool } }",
  "func ID ( ID : / false ID ID ] int ) : int { { var ID : [ ] bool var [ : bool } }",
  "func ID ( ) : bool { var ID ) bool var ID : [ - ID / ( - - ( - ID ) : / ( true ) ] int } func ID ( ) { }",
  "func ID ( ) : bool { var ID ) bool var ID : [ - ID / ( - } ( - ID ) : / ( true ) ] int } func ID ( ) { -",
  "func ID ( ) : bool { - ID ) bool var ID : [ - ID / ( var } ( - ID ) : / ( true ) ] int } func ID ( ) { -",
  "func ID ( ID : [ ( ID [ ID ( ) / true } false ] ) ] [ ] int ) { >=",
  "func ID ( ID : [ ( ID [ ] ( ) / true } false ID ) ] [ ] int ) { >=",
  "func ID ( ID : [ ( ID [ ] ( ) ] true } false ID ) ] [ / int ) { >=",
  "func ID ( ID : ID , ID : int , ID : [ ] bool ) { var bool : int call ID ( ) }",
  "func ID ( ID : ID , ID : int , ID : var ] bool ) { [ bool : int call ID ( ) }",
  "func ID ( ) : bool { var ID : ] var ID : bool while true + ID [ ID ] [ ID int { } if ID { } } func ID ( ) { }",
  "bool ID ( ) : bool { var ID : ] var ID : func while true + ID [ ID ] [ ID int { } if ID { } } func ID ( ) { }",
  "bool ID ( ) : bool { var ID : ] var ID : func while ] + ID [ ID true [ ID int { } if ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { { return } print false * ID ( ) [ false ] } ID ] [ func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { { return } print false * ID ( ) [ false ] { ID ] [ func ID ( ) } }",
  "func ID ( ID : bool , ID : int ) { { return } print false * ID ( ID [ false ] { ID ] [ func ) ( ) } }",
  "ID ID ( ) : int { var ID : int var ID : bool print - ( ID [ func ] ) ID = true } func ID ( ) { }",
  "ID ID ( ) : int { var ID : int { ID : bool print - ( ID [ func ] ) ID = true } func ID ( ) var }",
  "ID ID ( ) : int { var ID : int { ID : bool print - ( ID [ true ] ) ID = func } func ID ( ) var }",
  "func ID ( ) { var ID : int call ID ( ) } func ID ( ) : bool { - var ID : [ - - - ( - { ID ) ] bool } { } }",
  "func ID ( ) { var ID : int call ID ( ) } func ID ( ) : bool { - var ID : [ - - - ( - { ID ) ] bool } { } }",
  "func ID ( ) { var ID : int call ID ( ) - func ID ( ) : bool { - var ID : [ } - - ( - { ID ) ] bool } { } }",
  "func ID ( ID ) [ ] [ ] int : { ID ( true + - - ID + ( 123 ) ) = ID } func ID ( ) { }",
  "func ID ( ID ) [ ] [ ] int : { ID ( true + - - ID + ( 123 ) ) = ID } func ) ( ID { }",
  "int ID ( ID ) [ ] [ ] func : { ID ( true + - - ID + ( 123 ) ) = ID } func ) ( ID { }",
  "func ID ( ID [ : - ID [ - ID ( - 123 - false ) ] [ true ] ] int ) { } func ID ( ) { }",
  "func ID ( ID [ : - ] [ - ID ( - 123 - false ) ID [ true ] ] int ) { } func ID ( ) { }",
  "func ID ( ID [ : - ] [ - ID ( - 123 - false ) ID [ true ] ] int ) { } func ( ID ) { }",
  "func ID ( ID : [ int ID [ ( - ID [ true ] [ ID ] ) ] ] - ) { } func ID ( ) { }",
  "func ID ( ID : [ int ID [ ( - ID ) true ] [ ID ] ) ] ] - ) { } func ID ( [ { }",
  "func ID ( ID : [ int ID [ ( - ID ) true ] [ ID ] ) ] ] - ) { } func ID ( [ { }",
  "func ID ( ID : int , ID : int , - : [ ] bool ) : int { while ( ID 123 ) { } { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int , - : [ ] bool ) : int { while ( ID { ) { } { } } func ID ( ) 123 }",
  "func ID ( ID : } , ID : int , - : [ ] bool ) : int { while ( ID { ) { } { } } func ID ( ) 123 int",
  "func ID ( ) : bool { var ID : [ ] int } var ID : bool var ID : bool if false { } ID = 123 { }",
  "func ID ( ) : bool { = ID : [ ] int } var ID : bool var ID : bool if false { } ID var 123 { }",
  "func bool ( ) : bool { = ID : [ ] int } var ID : ID var ID : bool if false { } ID var 123 { }",
  "func ID ( ) : int { var ID : [ ] int ( ID : [ ] int call ID ( - ID [ - ID ] ) while - var ID ) { } }",
  "func ID ( ) ] int { var ID : [ ] int ( ID : [ : int call ID ( - ID [ - ID ] ) while - var ID ) { } }",
  "func ID ( ID : bool ) : bool { var ID : bool var ID : [ = int ID ] true <= 123 ID = - ( 123 ) }",
  "func ID ( ID var bool ) : bool { var ID : bool : ID : [ = int ID ] true <= 123 ID = - ( 123 ) }",
  "func ID ( ID var bool ) : bool { var ID : bool : ID : int = [ ID ] true <= 123 ID = - ( 123 ) }",
  "func ID ( ) : [ / bool { ID [ true / ( ( ID ) ) ] ID ] [ - ID ] = ID } func ID ( ) { }",
  "func ID ( ID : [ / bool { ID [ true / ( ( ID ) ) ] ID ] [ - ID ] = ID } func ) ( ) { }",
  "func ID ( ID : bool / [ { ID [ true / ( ( ID ) ) ] ID ] [ - ID ] = ID } func ) ( ) { }",
  "func ID ( ID : [ ( ( true / ) / true - ( ID 123 ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID / ID : [ ( ( true ( ) / true - ( ID 123 ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID / ID : [ ( ( true ( ) / true - ( ID 123 ) ) ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) : int { ) ID : int return ID ( ( true and ( - - - 123 ) ) var }",
  "func ID ( ) : int { 123 ID : int return ID ( ( true and ( - - - ) ) ) var }",
  "func ID ( ) : - { 123 ID : int return ID ( ( true and ( - int - ) ) ) var }",
  "func ID ( ) : [ - ID ( true ] ( - ID ( ) ) * false ) ] [ * bool { }",
  "func ID ( ) : [ - ID ( true ] ( - ID ( ) ) * false ) ] [ * bool { }",
  "func ID ( ) : [ - ID ( true ] ( - ID ( ) ) * false ) ] [ * bool { }",
  "func ID ( ID : int ) ID int { var : : [ - true * ID [ true ] [ - ID ] / true ] int var ID : bool }",
  "func ID ( ID : int ) ID int ID var : : [ - true * ID [ true ] [ - { ] / true ] int var ID : bool }",
  "func ID ( ID : int ) ID int ID var : : [ - true * ID [ true ] [ - { ] / true ] int var ID : bool }",
  "func ID ( ID : [ ID ( ) / false / - ID [ - - ID int ] ] ) { }",
  "func ID ( ID : [ ID ( ) / false / - ID [ - - ) int ] ] ID { }",
  "func ID ( ID : [ ID ( ) / false / - ID [ - - ) int ] } ID { ]",
  "func ID ( ID : int , : ID int ) { var ID : [ ID ( ( false ) ) ] bool } func ID ( ) { }",
  "func ID ( ID : int , : ID } ) { var ID : [ ID ( ( false ) ) ] bool int func ID ( ) { }",
  "func ID ( ID : int , : ID } ) { var ID : [ ID ( ( false ) ) ] bool int func ID ( ) { }",
  "func } ( ) { var ID : int call ID ( ) call ID ( ( ID ( ) [ - ( ID ) ] [ false ] ) ) ID",
  "func } ( ) ( var ID : int call ID ( ) call ID { ( ID ( ) [ - ( ID ) ] [ false ] ) ) ID",
  "func } ( ) ( var ID : int call call ( ) ID ID { ( ID ( ) [ - ( ID ) ] [ false ] ) ) ID",
  "func ID ( ) : int { var ID : int while 123 / ( false / true + true - ) ID - * ID { } }",
  "func ID ( ) + int { var ID : int while 123 / ( false / true : true - ) ID - * ID { } }",
  "func ID ( ) + int { var ID : int while 123 / ( false / true : true - ) ID - * ID { } }",
  "func ID ( ID : bool } { var ID : [ ] bool var ID : [ ] int )",
  "func ID ( ID : [ } { var ID : bool ] bool var ID : [ ] int )",
  "func bool ( ID : [ } { var ID : ID ] bool var ID : [ ] int )",
  "func ID ( ) : bool { while ( [ ID ( false * ( ID ) * true ) ] { } } func ID ID ) { }",
  "func ID ( ) : bool { while ( [ ID ( false } ( ID ) * true ) ] { } } func ID ID ) { *",
  "func ID ( ) : bool { while ( [ ID ( false } ( ID ) * true ) ] { } } func ID * ) { ID",
  "func ID ( ID : [ ( ID ( ID [ - bool ID ) ] ) ) ] ( ) { }",
  "func ID ( ID : [ ( ID ( ID [ - bool ID ) ] ) ) ] ( ) { }",
  "func ID ( ID : [ ( ID ( ) [ - bool ID ) ] ) ID ] ( ) { }",
  "func ID ( ID : [ ] int ) { } func ID ( int : int , ID : bool ) { var ID : ID var ID : bool }",
  "func ID ( ID : [ ] int ) { } func ID ( int : int , ID : bool ) { var ID : ID var ID : bool }",
  "func ID ( ID : [ ] int ) { } func ID ( int : int , : ID bool ) { var ID : ID var ID : bool }",
  "func ID ( ID : [ ID [ true * - ID [ true / - ( ( - true ) ) * 123 ] ) - ID ] / 123 ] [ true ] ] [ ] int ) { } func ID ( [ { }",
  "func ID ( ID [ [ ID [ true * - ID [ true / - ( ( - true ) ) * 123 ] ) - ID ] / 123 ] [ true ] ] [ ] int ) { } func ID ( : { }",
  "func ID ( ID [ [ ID [ true * - ID [ true / - ( ( - true ) ) * 123 ] : - ID ] / 123 ] [ true ] ] [ ] int ) { } func ID ( ) { }",
  "func ID ( - : [ ( ( ) ( - false / false ) ) ) ] bool { } func ID ( ) { }",
  "func ID ( - ) [ ( ( ) ( - false / false : ) ) ] bool { } func ID ( ) { }",
  "func ID ( - ) [ ( ( ) ( - false / ) : false ) ] bool { } func ID ( ) { }",
  "func ID ( ) { while ( ( 123 * ) ID ( ) ) { } }",
  "func ID ( ) { while ( ( 123 * ) ID ( } ) { ) }",
  "func ( ( ) { while ID ( 123 * ) ID ( } ) { ) }",
  "func ID ( ID : [ ] int , : ID [ false + 123 / ID * - ( true ) - ID ] bool ) { } func ID ( ) { }",
  "func ID ( / : [ ] int , : ID [ false + 123 ID ID * - ( true ) - ID ] bool ) { } func ID ( ) { }",
  "func ID ) / : [ ] int , : ID [ false + 123 ID ID * - ( true ) - ID ] bool ( { } func ID ( ) { }",
  "ID ID ( ID : int ) { { } call ID ( false - true * ( func ) - 123 ) }",
  "ID ID ( ID : int ) { { ) call ID ( false - true * ( func ) - 123 } }",
  "ID ID ( ID : int ) { { ) call - ( false ID true * ( func ) - 123 } }",
  "func ID ( ) : int { } func { ( ) { var ID : bool if - false * false + - true ID } }",
  "func ID ( ) : int { } - { ( ) { var ID : bool if func false * false + - true ID } }",
  "func ID ( ) : int { } - { ( ) { var * : bool if func false ID false + - true ID } }",
  "func ID ( ID : int , ID : int ) : int { var ID : int if - ID - ( - - true ) + ID { } ID = - ID ( ( true ) ) ) } func ( ( ) { }",
  "func ID ( ID : int , ID : int ) : int { var ID : int if - ( - ( - - true ) + ID { } ID = - ID ( ( true ) ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : int { ( ID : int if - ( - var - - true ) + ID { } ID = - ID ( ( true ) ) ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool } = - 123 > false { while ID { } print - - ID } ID",
  "false ID ( ) : bool { var ID : bool } = - 123 > func { while ID { } print - - ID } ID",
  "false ID ( ) : bool { var ID : bool } = - 123 > func { while print { } ID - - ID } ID",
  "func ID ( ID : int , ID : [ ] int , ID : bool ) : [ ] int { var ID : [ false ] bool var ID : bool ID func } ( ) { }",
  "func ID ( ID : int , { : [ ] int , ID : bool ) : [ ] int ID var ID : [ false ] bool var ID : bool ID func } ( ) { }",
  "func ID ( ID : int , { : [ ] int , ID : bool ) : [ ID int ID var ID : [ false ] bool var ID : bool ] func } ( ) { }",
  "func ID ) ID : bool ) : [ ] int { print false / ID ( - ID ( if - ( ( - ( ID ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool ) { } return func ID ( ) { return }",
  "func ID ( ID : bool ) { } return func ID ( ) { return }",
  "func ID ( bool : ID ) { } return func ID ( ) { return }",
  "func ID ( ID : bool } : bool { var ID : [ ] bool var ID : bool return ID ( ) * true / ( ( ID ) ) )",
  "func ID ( ID : bool } : bool { var ID : [ ] bool var / : bool return ID ( ) * true ID ( ( ID ) ) )",
  "func ID ( ID : bool } : bool bool var ID : [ ] bool var / : { return ID ( ) * true ID ( ( ID ) ) )",
  "func ID ( ) : bool { var ID : [ ] int var ID : int } func ID bool ID : int ) : ( { var ID : [ ] int }",
  "func ID ( ) : bool { var ID : [ ] int var ID : int } func ID bool ID : int ) : ( { var ID : [ ] int }",
  "func ID ( ) : bool { var ID : [ ] int var ID : int } func ID [ ID : int ) : ( { var ID : bool ] int }",
  "func + ( ID : [ 123 / ID / - ID ( ) - ( false ) ID ( ( true ) ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func + ( ID : [ 123 / ID / - ID bool ) - ( false ) ID ( ( true ) ) ] [ ] [ ] ( ) { } func ID ( ) { }",
  "func + ( ID : [ 123 / ] / - ID bool ) - ( false ) ID ( ( true ) ) ] [ ID [ ] ( ) { } func ID ( ) { }",
  "func ID ( ) ( int { var ID : int var ID : [ ] [ ] bool ID [ ID [ - ( - false ) ] [ : ( ID ) ) ] ] = ( - ( - 123 ) ) print ID }",
  "func ID ( ) ( int { var ID : int var ID : [ ] [ ] [ ID [ ID [ - ( - false ) ] bool : ( ID ) ) ] ] = ( - ( - 123 ) ) print ID }",
  "func ID ( ) ( int { var bool : int var ID : [ ] [ ] [ ID [ ID [ - ( - false ) ] ID : ( ID ) ) ] ] = ( - ( - 123 ) ) print ID }",
  "func ID ( ) : [ ] bool { var ID : [ ] [ true / } ( ID ) / 123 ] [ ] bool var ID : int ID func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : [ ] [ true / } ( ID ) / 123 ] ID ] bool var ID : int [ func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : [ ] ) true / } ( ID ) / 123 ] ID ] bool var ID : int [ func ID ( [ { }",
  "func ID ( ID : bool , ID : int , ID : [ ] bool ) { var int : ID } func ID ( ) { return }",
  "func ID ( ID : bool , ID : int ) ID : [ ] bool ) { var int : ID } func ID ( , { return }",
  "func ID ( ID : bool ID ID : int ) , : [ ] bool ) { var int : ID } func ID ( , { return }",
  "func [ ( ID : bool ) { while ( - - 123 * ID ( ) ID true ] [ - ( ( false ) ) ] / false ) { } } func ID ( ) { }",
  "func [ ( ID : bool ) { while ( - - 123 * ID ( ) ID } ] [ - ( ( false ) ) ] / false ) { } true func ID ( ) { }",
  "func [ ( ID : bool ) { while ( - - 123 * ID ( ) ID } true [ - ( ( false ) ) ] / false ) { } ] func ID ( ) { }",
  "func ID : ) { var ID : [ - false / false / true < ID [ - ( - ID ) ] [ ( ID ) ] ] bool var ID ( int }",
  "func ID : ) { var ID : [ - false / false / true < ID [ ] ( - ID ) ] [ ( ID ) ] - bool var ID ( int }",
  "func ID : ) { - ID : [ - false / false / true < ID [ ] ( - ID ) ] [ ( ID ) ] var bool var ID ( int }",
  "func ID ( ) : bool { call ID ( true + ID ) true / true / true ] [ - ( ( true ) ) ] + - ( ID [ ) }",
  "func ID ( ) : bool { call ID ) true + ID ) true / true / true ] [ - ( ( true ) ( ] + - ( ID [ ) }",
  "func ID ( ) : bool { call ID ) true + ID ) true / true / ] ] [ - ( ( true ) ( true + - ( ID [ ) }",
  "func ID ( ) { var ID : int 123 ( 123 - false != print - ID + false ) ID = true }",
  "func ID ( ) { var ID : int 123 ( 123 - print != false - ID + false ) ID = true }",
  "func ID ( ) { var ID : int 123 ( 123 - print != false = ID + false ) ID - true }",
  "func ID ( ID : [ ] int ) : [ ] [ ] bool { var ID : [ 123 var ID / 123 ] int * ID : bool } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : [ ] [ : bool { var ID ] [ 123 var ID / 123 ] int * ID : bool } func ID ( ) { }",
  "func ID ( ID : var ] int ) : [ ] [ : bool { var ID ] [ 123 [ ID / 123 ] int * ID : bool } func ID ( ) { }",
  "func ID 123 ) : int { var ID : [ ( / ID + ( ( ID ) ) ] bool } func ID ( ) { }",
  "func ID 123 ) : int { ID ID : [ ( / ID + ( ( ID ) ) ] bool } func var ( ) { }",
  "func ID 123 ) : int { ID ID : [ ( / ID + ( ( ID ) ) ] bool } ) var ( func { }",
  "func ID ID ) : [ ID + ( 123 / ID * ( [ ID ] [ ( ID ) ] ) + ( ( ID ) ) ] bool { }",
  "func ID ID ) : [ ID + ) 123 / ID * ( [ ID ] [ ( ID ) ] ) + ( ( ID ( ) ] bool { }",
  "func ID ID ) : [ ID + ) 123 / ID * ( [ ID ] [ ( ID ) ] ) + ( ) ID ( ( ] bool { }",
  "func ID ( } : int { var ID : [ ] bool var ID : [ ID ( ) [ 123 ] [ true ] ] int } func ID ( ) { )",
  "func ID ( } : int { var ID : [ ] bool var ID ] [ ID ( ) [ 123 ] [ true ] : int } func ID ( ) { )",
  "bool ID ( } : int { var ID : [ ] func var ID ] [ ID ( ) [ 123 ] [ true ] : int } func ID ( ) { )",
  "func < ( ) : bool { print ( ( ( false ID true ) ) ) if 123 { } } func ID ( ) { }",
  "func < ( ) 123 bool { print ( ( ( false ID true ) ) ) if : { } } func ID ( ) { }",
  "func < ( ) 123 bool { print ( ( ( } ID true ) ) ) if : { false } func ID ( ) { }",
  "func ID ( ID : [ ] [ ) - - - ( - ID ( ) ) ) ] bool ) { } func ID ( ( { }",
  "func ] ( ID : [ ID [ ) - - - ( - ID ( ) ) ) ] bool ) { } func ID ( ( { }",
  "func ] ( ID : [ ID [ ) - - - ( - ID ( ) ) ) ] bool ) { } func ID } ( { (",
  "func ID ( ) : [ ] int { - [ ID [ false / - 123 / ( - ID false ) ] ] = ID } func ID ( ) { }",
  "func ID ( ) : [ ] false { - [ ID [ false / - 123 / ( - ID int ) ] ] = ID } func ID ( ) { }",
  "func ID ( ) : [ ] false { - [ ID [ false / - 123 / ( - ID int ) ] ] = ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { print ID [ ( ID ( ) ) ] ID ID ] ID = ( [ ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { print ID [ func ID ( ) ) ] ID ID ] ID = ( [ ) } ( ID ( ) { }",
  "func ID ( } : bool , ID : bool ) { print ID [ func ID ( ) ) ] ID ID ] ID = ( [ ) ID ( ID ( ) { }",
  "func ID ( ) : [ ( ID ( ID [ 123 * - - 123 * 123 ] [ - ( ID ) ] ) } ] [ ] int { )",
  "func ] ( ) : [ ( ID ( ID [ 123 * - - 123 * 123 ID [ - ( ID ) ] ) } ] [ ] int { )",
  "func ] ( ) : [ ( ID ( ID [ 123 * - ] 123 * 123 ID [ - ( ID ) - ) } ] [ ] int { )",
  "func ID = ) { var ID : bool var ID : bool ID ( ) ( ID ( ) [ ( - ( true ) ) ] if ID { } } func ID ( ) { }",
  "func ID = ) { var ID : bool var ID : bool ID ( ) ( ID ( ) [ ( func ( true ) ) ] if ID { } } - ID ( ) { }",
  "func ID = ) { var var : bool ID ID : bool ID ( ) ( ID ( ) [ ( func ( true ) ) ] if ID { } } - ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : [ ] [ false / ID [ false + ID ] [ - } ] / 123 ] int { 123",
  "func ID ( ID : bool , ID : bool ) : [ 123 [ false / ID [ false + ID ] [ - } ] / 123 ] int { ]",
  "func ID ( ID : bool false ID : bool ) : [ 123 [ false / ID [ , + ID ] [ - } ] / 123 ] int { ]",
  "func : ( ID : [ ] [ ] int ) : bool { var ID : bool var ID ID [ ID - 123 + ID ] bool } func ID ( ) { }",
  "func : ( ID : [ ] [ ] int ) : bool - var ID : bool var ID ID [ ID { 123 + ID ] bool } func ID ( ) { }",
  "func : ( ID : [ [ [ ] int ) : bool - var ID : bool var ID ID ] ID { 123 + ID ] bool } func ID ( ) { }",
  "func ID ( ID : [ , bool ] ID : [ - ( 123 / - - ID ( ) ) ] [ ] [ ] [ ] int ) { }",
  "func ID ( ID : [ , bool ] ID : [ ) ( 123 / - - ID ( ) - ] [ ] [ ] [ ] int ) { }",
  "func ID ( ID : - , bool ] ID : [ ) ( 123 / [ - ID ( ) - ] [ ] [ ] [ ] int ) { }",
  "func ID ( ID : bool ) { var ID : } var ID : int ID [ false / true / ( 123 ) ] = - ID int",
  "func ID ( ID : ID ) { var bool : } var ID : int ID [ false / true / ( 123 ) ] = - ID int",
  "func ID ( ID : ID ) { var bool : } var ID : int ID [ false / true / ( 123 ) ] = - ID int",
  "func ID ( ID : [ ( ID ( ) [ true / ( ID ) ] [ ID bool ) ] ] ) { } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int print ( print ID [ true ] ) - - false } func ID ( ) { }",
  "func ID ( ) { var ID : int var print : int ID ( print ID [ true ] ) - - false } func ID ( ) { }",
  "func ID ( ) { var ID : int var print : ID ID ( print ID [ true ] ) - - false } func int ( ) { }",
  "func ID ( ID : [ true { false + false - 123 * true / 123 >= ( ( - ID ) ) ] bool ) { } func ID ( ) * }",
  "] ID ( ID : [ true { false + false - 123 * true / 123 >= ( ( - ID ) ) func bool ) { } func ID ( ) * }",
  "] ID ( ID : [ true { false + false - } * true / 123 >= ( ( - ID ) ) func bool ) { 123 func ID ( ) * }",
  "func 123 ( ) : bool { ID [ - ID ( ) [ ( - ( ID ) ) ] [ ID ] ] = ( true ) if true { } } func ID ( ) { }",
  "func 123 ( ) : bool { true [ - ID ( ) [ ( - ( ID ) ) ] [ ID ] ] = ( true ) if ID { } } func ID ( ) { }",
  "func 123 ( ) : bool { true [ - ID ( ) [ ( - ( ID ) ) ] [ ID ] ] if ( true ) = ID { } } func ID ( ) { }",
  "func ID : ID ( [ ID [ ID [ true - ( false ) + ID ] [ - 123 ] ] ] bool ) { }",
  "func ID : ID ( [ ID [ ID [ 123 - ( false ) + ID ] [ - true ] ] ] bool ) { }",
  "func ID : ID ( [ ID [ ID [ 123 - ( false ) + ID ] ) - true ] ] ] bool [ { }",
  "func ID ( ) { var ID : [ ] [ ] [ ) bool var ID : [ ] [ - ID ( ] ] bool }",
  "func ID ( ) { var ID : [ ] [ bool [ ) ] var ID : [ ] [ - ID ( ] ] bool }",
  "func ID ( ) { var ID : [ [ [ bool ] ) ] var ID : [ ] [ - ID ( ] ] bool }",
  "func ID ( ID : bool , ID : [ ] [ ] bool , ID : [ false / ( ( ( ( ID ) ) ) ) * - { ID ] bool ) - } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ] bool , ID : [ false / ( ( ( ( ID ) ) ) ) * - { ID ) bool ) - } func ID ( ] { }",
  "func ID ( ID : bool , ID : { ] [ ] bool , ID : [ false / ( ( ( ( ID ) ) ) ) * - { ID ) bool ) - } func ID ( ] [ }",
  "func ID ( } : bool { } func ID ( ) : [ true * ID [ - false ] ] bool { )",
  "func ID ( } : bool { * func ID ( ) : [ true } ID [ - false ] ] bool { )",
  "func ID ( } : bool ) * func ID ( ) : [ true } ID [ - false ] ] bool { {",
  "func ID ( ID : [ ] bool ) ID : int , { var ID : int var ID : bool }",
  "func ID ( ID : [ ] bool ) ID : int , { var ID : int var ID : bool }",
  "func ID ( ID : [ ] bool ) ID : : , { var ID : int var ID int bool }",
  "func ( ( ) { var ID : int while ID ( ) - ID ( ) [ - - ( ID - ID ) ) ] [ ID ] { } ID = 123 } func ID ( ) { }",
  "func ( ( ) { var ID : int while ID ( ) - ID ( ) [ - - ( } - ID ) ) ] [ ID ] { ID ID = 123 } func ID ( ) { }",
  "func ( ( ) { var ID ID int while ID ( ) - ID ( ) [ - - ( } - ID ) ) ] [ : ] { ID ID = 123 } func ID ( ) { }",
  "func ID ( ) : [ ( - ( ( int [ - 123 ] [ - - ( ID ) ] ) ) ) ] ID { } func ID ( ) { }",
  "func ID ( ) : [ - - ( ( int [ ( 123 ] [ - - ( ID ) ] ) ) ) ] ID { } func ID ( ) { }",
  "func ID ( ) : [ - - ( ( int [ ( 123 ] ] - - ( ID ) ] ) ) ) [ ID { } func ID ( ) { }",
  "func ID ( ID : int ) { ID = ID [ ID ( ) [ { ID ) ] ] [ - - ID ] } func ID ( ) ( }",
  "func ID ( ID : int ) { ID ID ID [ ID ( ) [ { ID ) ] ] [ - - ID ] } func = ( ) ( }",
  "func ID ( ID : int ) { ID ID ID [ ID ( ] [ { ID ) ] ] [ - - ID ) } func = ( ) ( }",
  "func ID ( ) { var ID : int call ID ( ) return ( ( - * false ID ) ) } func ID ( ) { }",
  "func func ( ) { var ID : int call ID ( ) return ( ( - * false ID ) ) } ID ID ( ) { }",
  "func func ( ) { var ID : int call ID ( ) return ID ( - * false ( ) ) } ID ID ( ) { }",
  "func ID ( ) : bool { ID ( = ID [ 123 > true ] [ - ( - ID ) ] ) } func ID ( ) { }",
  "func ID ( ( : bool { ID ( = ID [ 123 > true ] [ - ( - ID ) ] ) } func ID ) ) { }",
  "func ID ( ( : bool { ID ( = ID [ 123 > true ] - - ( [ ID ) ] ) } func ID ) ) { }",
  "] ID ( ID : int , ID : bool , ID : [ ] int ) : [ func int { var ID : int var ID : bool if false { } }",
  "] ID ( ID : int , ID : bool , ID : int ] int ) : [ func [ { var ID : int var ID : bool if false { } }",
  "] ID ( ID : int , ID : : , ID : int ] int ) : [ func [ { var ID : int var ID bool bool if false { } }",
  "func ID ( ) : [ ID ( true * 123 * - ( - false ) ) ] bool func } { ID ( ) { }",
  "func ) ( ) : [ ID ( true * 123 * - ( - false ) ) ] bool func } { ID ( ID { }",
  "func ) ( ) : [ ID ( 123 * true * - ( - false ) ) ] bool func } { ID ( ID { }",
  "func ID [ ID : [ ID [ - - ID or ID ( - ID ) or ID ] ] ( ] bool ) { } func ID ( ) { }",
  "func ID [ ID : [ ID [ - - ID or ID ( - ID ) or ID ] ] ( ] bool ) { } func ID ( ) { }",
  "func ID [ ID : ) ID [ - - ID or ID ( - ID ) or ID ] ] ( ] bool [ { } func ID ( ) { }",
  "func bool ( ) { call ID ( ) } func ID ( ID : bool , ID : int ) { var ID : int var ID : ID }",
  "func ) ( ) { call ID ( ) } func ID ( ID : bool , ID : int bool { var ID : int var ID : ID }",
  "func ) ( ) { ID ID ( ) } func ID ( ID : bool , ID : int bool { var ID : int var ID : call }",
  "func ID ( ID : int , ID : [ ] bool ) : int { var ID : bool } func ID ( ID : int ) { var : : bool var ID ID [ ] bool }",
  "func ID ( ID : int , ID : [ ] bool ) : int { var ID : bool } func ID ( ID : int ) { var : : bool var ID ID [ ] bool }",
  "func ID ( ID : [ ( ID ( ) [ ( ( ( true ) ) ) 123 [ ] ] ) ] bool ) { }",
  "func ID ( ID : [ ( ID ( ) [ ( ( ( true ) ) ) ] [ ] 123 ) ] bool ) { }",
  "func ID ( ID : [ ( ID ( ) [ ( ( ( true ) ) ) ] [ ] 123 ) ] bool ) { }",
  ") ID ( ) : bool { call ID ( ) while ( ( - ID ( ) func ) { } }",
  ") ID ( func : bool { call ID ( ) while ( ( - ID ( ) ) ) { } }",
  ") ID ( func : bool { call ID ( ) while ( } - ID ( ) ) ) { } (",
  "func ID ( ] : [ ID [ ID [ ( - - ( - ( ID ) ) ) ) ] [ ID ] ] int { }",
  "func ID ( ] : [ ID [ ID [ ( - - ( - ( ID ) ) ) } ] [ ID ] ] int { )",
  "func ID ( , : bool ID ID : [ true / ID [ 123 / - - true * true ] [ ID ] ] bool ) { } func ID ( ) { }",
  "func ID ( , : - ID ID : [ true / ID [ 123 / bool - true * true ] [ ID ] ] bool ) { } func ID ( ) { }",
  "func ID ( - : - ID ID : [ true / ID [ 123 / bool , true * true ] [ ID ] ] bool ) { } func ID ( ) { }",
  "func ID ( ) { call ID ( ) return ] ( ) [ - - ( 123 ) ] [ false ID }",
  "func ID ( ) { call ID ( ) return ] ( ( [ - - ) 123 ) ] [ false ID }",
  "func ID ( ) { call ID ( ) return ] ( ( [ - - ) 123 ) ] [ false ID }",
  "func ID ( ID : [ ID ( ( ID ( ) [ - false ] [ ( ) ) ] ID ) ] int ) { }",
  "func : ( ID ID int , ID : [ ] bool , ID : int ) { var ID : bool return } func ID ( ID : [ ] [ ] int ) { }",
  "func : ( ID ID int , ID : [ ] bool , ID : int ) { var ID : bool return } func ID ( ID : [ ] [ ] int ) { }",
  "func : ( ID ID int , ID : [ ] bool , ID ID int ) { var ID : bool return } func : ( ID : [ ] [ ] int ) { }",
  "func ID ( ) : bool { print - ID [ ID ( ) [ - ID ] [ - ] true ] ] [ ( ( false ) ) - }",
  "func ID ( ) : bool - print - ID [ ID ( ) [ - ID ] [ - ] true ] ] [ ( ( false ) ) { }",
  "func ID ( ID ) int , ID : int , ID : bool ) : int { var ID : int { var ID : [ - false ] [ ] [ ] int } } func ID ( : { }",
  "func ID ( ID ) int , : : int , ID : bool ) ID int { var ID : int { var ID : [ - false ] [ ] [ ] int } } func ID ( : { }",
  "{ ID ( ID ) int , : : int , ID : bool ) ID int func var ID : int { var ID : [ - false ] [ ] [ ] int } } func ID ( : { }",
  "ID ID ( ) : int { if ID * func ( - 123 - 123 ) { } }",
  "ID ID ( ) : int { if ID * func ( - 123 - 123 ) } { }",
  "ID ID ( ) : int - if ID * func ( { 123 - 123 ) } { }",
  ") ID ( ) { var ID : bool return ( ID ( ) [ ID * ID * ID ] ) } func ID ( func { }",
  ") ID ( ) { var ID : bool return ( ID } ) [ ID * ID * ID ] ) ( func ID ( func { }",
  ") ID ( ) { var ID : bool return ( ID } ) [ ID * ID * ID func ) ( ] ID ( func { }",
  "func ID ( ) var { ID : bool var ID : [ ] int ID [ ( false * 123 * ID ) ] = ID call ID ( ) }",
  "func ID ( ) var { ID : bool var ID : [ [ int ID ] ( false * 123 * ID ) ] = ID call ID ( ) }",
  "func ID ( ) var { ID : = var ID : [ [ int ID ] ( false * 123 * ID ) ] bool ID call ID ( ) }",
  "func ID ( ) : int { while - ID ( ) [ ( ( ( - false ) ) ) ] { ID ] { } while ( 123 ) [ } }",
  "func ID ( ) false int { while - ID ( ) [ ( ( ( - : ) ) ) ] { ID ] { } while ( 123 ) [ } }",
  "func ID ID ) false int { while - ID ( ) [ ( ( ( - : ) ) ) ] { ( ] { } while ( 123 ) [ } }",
  "func ID ( ) : bool { var ID : bool var ID : bool ] [ ID = - ID ( ) [ - false ] if ID { } }",
  "func ID ( ) : bool { var ID : bool var ID } bool ] [ ID = - ID ( ) [ - false ] if ID { : }",
  "func ID ( ) : bool { var ID : bool var [ } bool ] ID ID = - ID ( ) [ - false ] if ID { : }",
  "func ID ( ] : bool ) : int { while true * false / false { var ID : [ ] [ ] [ ID int var ID : [ ] bool } }",
  "func ID ( ] : : ) : int { while true * false / false { var ID bool [ ] [ ] [ ID int var ID : [ ] bool } }",
  "func ID ( ] : : ) : int { while true * / false false { var ID bool [ ] [ ] [ ID int var ID : [ ] bool } }",
  "func ID ( ) ) if true and ID [ ID [ ID ] [ true ] ] and ( ID { { } } func ID ( ) { }",
  "func ID ( ) ) if true and ID [ ID [ ID ] [ true ] ] and ( ID { { } } func ID ( ) { }",
  "func ID ( ) ) if true and { [ ID [ ID ] [ true ] ] and ( ID { { } } func ID ( ) ID }",
  "func ID ( ID : int ) : int { var ID : [ ] bool var ID : ID print false * 123 / ( - false ) } func int ( ) { }",
  "func ID ( ID : int ) : int { var ID ( [ ] bool var ID : ID print false * 123 / ( - false ) } func int : ) { }",
  "func ID ( ID : int ) : int { var ID ( [ ] bool var ID : ID print false * 123 / ( - false ) } func int : ) { }",
  "func ID ( ID : [ ] bool ) { var ID : bool { var ID : int var { : [ ] bool if ID { } { } } ID } }",
  "func ID ( ID : [ ] bool ) { var ID : bool { var ID : int { { : [ ] bool if ID var } { } } ID } }",
  "func ID } ID : [ ] bool ) { var ID : bool { var ID : int { { : [ ] bool if ID var } { ( } ID } }",
  "func ID print ) { var ID : int ( ( 123 * ( ( true ) ) ) }",
  ") ID print func { var ID : int ( ( 123 * ( ( true ) ) ) }",
  ") ID print func ( var ID : int ( { 123 * ( ( true ) ) ) }",
  "func ID ( ) { var ID : bool while true - true and true - ( func ) { } } true ID ( ) { }",
  "func ID ( ) true var ID : bool while { - true and true - ( func ) { } } true ID ( ) { }",
  "func ID ( ) true var ID : bool while { - true and } - ( func ) { } } true ID ( ) { true",
  "func ID ( ID : int , ID : [ ID [ ( ( ( - ( - } ) ) ) ) ] [ ID ] ] [ ] [ ] int ) { } func ID ( ) { ID",
  "func ID ) ID : int , ID : [ ID [ ( ( ( - ( - } ) ) ) ( ] [ ID ] ] [ ] [ ] int ) { } func ID ( ) { ID",
  "ID func ) ID : int , ID : [ ID [ ( ( ( - ( - } ) ) ) ( ] [ ID ] ] [ ] [ ] int ) { } func ID ( ) { ID",
  "func ID ( ) { var ID : bool var ID : bool { var ID : } return } ID ( ID ) = 123 bool",
  "func ID ( ) { ) ID : bool var ID : bool { var ID : } return } ID ( ID var = 123 bool",
  "func ID 123 ) { ) ID : bool var ID : bool { var ID : } return } ID ( ID var = ( bool",
  "func ID ( ) ) var ID : bool if - true * ( ID / - - ( ID ) / - ID { { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) ) var ID : bool if - } * ( ID / - - ( ID ) / - ID { { } call ID ( ) } func ID ( ) { true",
  "func ID ( ) ) var ID : bool if - } * ( call / - - ( ID ) / - ID { { } ID ID ( ) } func ID ( ) { true",
  "func ID ( ID : int , ID : int , ID } bool ) { var ID : bool var ID : bool { { } { } : call ID ( ) }",
  "func ID ( ID : int , ID : int , ID } bool ) { var ID : bool var ID : bool { { } { } : call ID ( ) }",
  "func ID ( : : int , ID : int , ID } bool ) { var ID : bool var ID ID bool { { } { } : call ID ( ) }",
  "func ID ( ID : [ ( ( - ( - - 123 * - [ ID * false ) ) ) ] - ] bool ) { } func ID ( ) { }",
  "func ID ( ID false [ ( ( - ( - - 123 * - [ ID * : ) ) ) ] - ] bool ) { } func ID ( ) { }",
  "func ID ( ID ID [ ( ( - ( - - 123 * - [ ID * : ) ) ) ] - ] bool ) { } func false ( ) { }",
  "func ID ( ] : bool { var ID : bool var ID : [ ) int while ( ( ID ) ) { } }",
  "func ID ( ] : bool { var ID : bool var ID { [ ) int while ( ( ID ) ) : } }",
  "var ID ( ] : bool { func ID : bool var ID { [ ) int while ( ( ID ) ) : } }",
  "func ID ( ID : int , ID : [ ] [ ] / - true / - ID ( ) [ ( ID ) ] [ true true ] [ ] int , ID : [ ] bool ) { } func ID ( ) { }",
  "func { ( ID : int , ID : [ ] [ ] / - true / - ID ( ) [ ( ID ) ] [ true true ] [ ] int , ID : [ ] bool ) { } func ID ( ) ID }",
  "func { ( ID : int , ID : [ ID [ ] / - true / - ID ( ) [ ( ID ) ] [ true true ] [ ] int , ] : [ ] bool ) { } func ID ( ) ID }",
  "func ID ( ) : [ ] bool { print ID [ - ID [ 123 ] ] [ 123 ] if ID ID } } func { ( ) { }",
  "func ID ( ) : [ ] bool { print ID [ - ID [ 123 ] ] [ { ] if ID ID } } func 123 ( ) { }",
  "func ID ( ) : [ ] bool { print ID [ - ID [ 123 ] ] [ { ] if ID } } } func 123 ( ) { ID",
  "func } ( ID : bool , ID : int , ID : [ ( - ( ( 123 ) ) ) ] bool ) { ID",
  ") } ( ID : bool , ID : int , ID : [ ( - ( ( 123 ) func ) ] bool ) { ID",
  "func ID } ) { var ID : int if 123 + - - false / ID / false + ID { ( }",
  "func ID } ) { var ID : int if / + - - false 123 ID / false + ID { ( }",
  "func ID } ) { var ID : int if / + - - false 123 ID / false + ID { ( }",
  "func ID ( ) { var ID : int var ID : bool while false / ) [ true / ( 123 ID ] [ 123 ] { } } func ID ( ) { }",
  "func ID ( ( { var ID : int var ID : bool while false / ) [ true / ) 123 ID ] [ 123 ] { } } func ID ( ) { }",
  "func ID ( ( { var ID : int var ID : bool while false / ) 123 true / ) [ ID ] [ 123 ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : int return true / ID [ ( / ) ] 123 ( ID ) }",
  "func ID ( ) { var ID : int return true / ID [ ( / ) ] ID ( 123 ) }",
  "func ID ( ) { var ID : / return true int ID [ ( / ) ] ID ( 123 ) }",
  "func ID ( ) { var ID : bool ID ( - ( ID [ false ] [ ID ] ) ) = ( ( ( ID ) ) ) func true } print ID ( ) { }",
  "func bool ( ) { var ID : ID ID ( - ( ID [ false ] [ ID ] ) ) = ( ( ( ID ) ) ) func true } print ID ( ) { }",
  "func bool ( ) { var ID : ID ID ( - ( ID [ false ID [ ] ] ) ) = ( ( ( ID ) ) ) func true } print ID ( ) { }",
  "func ID ( ) : bool { if ( - ( ( - true } ) ) { } while ID { } } func ID ( ) { )",
  "func ID ( ) : bool { if ( - ( } - true ( ) ) { } while ID { } } func ID ( ) { )",
  "func ID ( ) : bool { if ( - ( ) - true ( } ) { } while ID { } } func ID ( ) { )",
  "func ID ( ID + bool , ID : [ true : ID ( ) - - - ID and true and ( ( - ID ) ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID + bool , ID : [ true : ID ( ) - - - ID and true and ( ( - ID ) ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID + ) , ID : [ true : ID ( ) - - - ID and true and ( ( - ID ) bool ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { { var while : bool { ID false - ID ( - ( false ) ) - ( ( ID ) ) { } } if true { } } }",
  "func ID ( ) : int { { var while : bool { ID false - ID ( true ( false ) ) - ( ( ID ) ) { } } if - { } } }",
  "func ID ( ) { { var ID : [ ] ] - ID ( ID [ - 123 ] [ - false ] ) ] int var ID : [ [ bool } }",
  "func ID ( ) { { var ID : [ ] ] - ID ( ID [ - 123 ] [ - false ] bool ] int var ID : [ [ ) } }",
  "func ID ( ) { { var ID : [ ] ] - ID } ID [ - 123 ] [ - false ] bool ] int var ID : [ [ ) } (",
  "func ID ( ID : bool , ID : [ ID [ true * true / - ( 123 ) ] ] bool , ID : [ ] [ ] int ID { } func ) ( ) { }",
  "func ID ( ID : bool , ID : [ 123 [ true * true / - ( ID ) ] ] bool , ID : [ ] [ ] int ID { } func ) ( ) { }",
  "func ID ( ID : bool , ID : [ 123 [ true * true / - ( ) ID ] ] bool , ID : [ ] [ ] int ID { } func ) ( ) { }",
  "func ID ( ID : false , ID : [ ] int ) : int { while ID ( ) [ - bool ] { } }",
  "( ID func ID : false , ID : [ ] int ) : int { while ID ( ) [ - bool ] { } }",
  "( ID func ID : false , ID : [ ] int ) : int { while ID - ) [ ( bool ] { } }",
  "func ID ( ID : int , ID - [ ] int ) { ID ( ( false - ID - : - ID ) ) = - ID }",
  "func ( ( ID : int , ID - [ ] int ) { ID ( ID false - ID - : - ID ) ) = - ID }",
  "func ( ( ID : int , ID - [ ] int ) { ID ID ID false - ID - : - ( ) ) = - ID }",
  ": ID ( ID : int , ID func [ ID ( - - - ( ID ) ) ] int , ID : bool ) { }",
  ": ID ( } : int , ID func [ ID ( - - - ( ID ) ) ] int , ID : bool ) { ID",
  "func ] ( ) : [ ID bool { var ID : bool }",
  "func ] } ) : [ ID bool { var ID : bool (",
  "func ] } bool : [ ID bool { var ID : ) (",
  "func ID ( ) { ) ID : int print ID * - ( ( false var ) } func ID ( ) { }",
  "int ID ( ) { ) ID : func print ID * - ( ( false var ) } func ID ( ) { }",
  "int ID ( ) { ) ID : func print { * - ( ( false var ) } func ID ( ) ID }",
  "func ID ( ID : bool , ID : bool { ) var ID : int call ID ( false / - - ( ID ) ) }",
  "func ID ( ID : bool , ID : bool { ) var ID : int call ID ( false / - - ( ID ) ) }",
  "func ID ( ID : bool , ID ) bool { : var ID : int call ID ( false / - - ( ID ) ) }",
  "func ID ( ID var int ) { : ID : bool var ID : [ - ( false + ID + - 123 ) ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID var int ) { : ID : bool var ID : [ - ( false + ID + - ] ) ] [ 123 [ ] int } func ID ( ) { }",
  "func ID ( ID var int ) { : ID : bool var ID : [ - ( false + ID + - ] ) ] [ 123 [ ] int } func ID ( ) { }",
  "func ID ( ) : bool , ID : bool ) { print ID [ ( ( ID ) ID ] } func ID ( ) { }",
  "func ID ( ) : bool , ID : { ) bool print ID [ ( ( ID ) ID ] } func ID ( ) { }",
  "ID ID ( ) : bool , ID : { ) bool print ID [ ( ( ID ) func ] } func ID ( ) { }",
  "func ID ( ) ) var ID : bool print ( false + true / ID ( ) [ ID ] { print true } func ID ( ) { }",
  "func ID ( ) ) var ID : bool print ( false + true / ( ( ) [ ID ] { print true } func ID ID ) { }",
  "func ID ( ) ) var ID : bool ( ( false + true / print ( ) [ ID ] { print true } func ID ID ) { }",
  "func ID ( ID : bool ) ID int { var ID : bool while ( ( ID ) ) { } ID = ID } func : ( ) { }",
  "func ID ( ID : bool ) ID int { var ID : bool } ( ( ID ) ) { } ID = ID } func : ( ) { while",
  "func ID ( ID : bool ) ID int { var ID : bool while ( ( ID ) ) { } ID = ID } func : ( ) { }",
  "func ID ( ) : [ ( ( false - / false / - ( false ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ) : [ ( ( false - func false / - ( false ) ) ) ] int { } / ID ( ) { }",
  "func ID ( ) : [ ( ( false - func false / ( - false ) ) ) ] int { } / ID ( ) { }",
  "func ID ( ID : [ ] [ ID and ID ( ) ID [ ID ] - and ID ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID and ID ( ) ID [ ] ID - and ID ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ ] } ID and ID ( ) ID [ ] ID - and ID ] int ) { [ func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int print ( ID ( ( ID ) ) ) ID ID = }",
  "func ID ( ) { var ID : bool var ID : print int ( ID ( ( ID ) ) ) ID ID = }",
  "func ID ( ) { ID ID : bool var ID : print int ( ID ( ( ID ) ) ) ID var = }",
  "func ID ( : ID int ) { } func ID ( ID : bool , ID : int ) { var ID : bool }",
  "func ID ( : ID int ) { } func ID ( ID : bool ID , : int ) { var ID : bool }",
  "func : ( : ID int ) { } func ID ( ID : bool ID , ID int ) { var ID : bool }",
  "func ID ( ) - var ID : int call ID ( - true * ( ID [ - 123 ] ) ) print - { - 123 } func ID ( ) { }",
  "func ID ( ) - var int : ID call ID ( - true * ( ID [ - 123 ] ) ) print - { - 123 } func ID ( ) { }",
  "func ID - ) - var int : ID call ID ( - true * ( ID [ - 123 ] ) ) print - { ( 123 } func ID ( ) { }",
  "- ID ( ) : [ ] int { var ID : int var ID : int { ID [ ( ( - false ) ) ] [ func 123 ] = 123 if false { } } } func ID ( ) { }",
  "- ID ( ) var [ ] int { var ID : int : ID : int { ID [ ( ( - false ) ) ] [ func 123 ] = 123 if false { } } } func ID ( ) { }",
  "- ID ( ) var [ ID int { var ID : int : ] : int { ID [ ( ( - false ) ) ] [ func 123 ] = 123 if false { } } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : bool return } func ID ( ) : int , ID : int , ID : bool ID { }",
  "func ID ( ID : int , ID : bool ) : bool { var ( : bool return } func ID ID ) : int , ID : int , ID : bool ID { }",
  "func ID ( ID bool int , ID : : ) : bool { var ( : bool return } func ID ID ) : int , ID : int , ID : bool ID { }",
  "func ID ( ) var var ID : [ ID ( ( false - 123 ) ) ] [ ] int { ID : [ ] bool }",
  "func ID ( : var var ID ) [ ID ( ( false - 123 ) ) ] [ ] int { ID : [ ] bool }",
  "func ID ( : var var 123 ) [ ID ( ( false - ID ) ) ] [ ] int { ID : [ ] bool }",
  "func ID ( ID : and , ID : [ ( false int false / false + ( - ID ) + - true ) ] int ) { } func ID ( ) { }",
  "func ID ( { : and , ID : [ ( false int false / false + ( - ID ) + - true ) ] int ) { } func ID ( ) ID }",
  "func ID ( { : and , ID : [ ( false int false / false + ( - ID ) + - true ) ] int { ) } func ID ( ) ID }",
  "func ID ( ID : [ ] int , ID : int ) { { var ID : bool var ID : int print - ID = ( ID ID ) } print - - true } func ID ( ) { }",
  "func ID ( ID int [ ] : , ID : int ) { { var ID : bool var ID : int print - ID = ( ID ID ) } print - - true } func ID ( ) { }",
  "func ID ( ID int [ ] : , ID : - ) { { var ID : bool var ID : int print int ID = ( ID ID ) } print - - true } func ID ( ) { }",
  "func ID ( } { var ID : int if - 123 and ( - ID [ ID ] [ ( ID ) ] ) and ( ID ) { } )",
  "func ID ( } { var ID : int if - 123 and ( - ID [ ID ] [ ( ID ) ] ) and ( ID ) { } )",
  "func ID ( } { var ID : int if and 123 and ( - ID [ ID ] [ ( ID ) ] ) - ( ID ) { } )",
  ") ID ( ) : [ ( ( 123 / 123 == ID ( ) func ) ] bool { }",
  ") ID ( } : [ ( ( 123 / 123 == ID ( ) func ) ] bool { )",
  ") ID ( } : [ bool ( 123 / 123 == ID ( ) func ) ] ( { )",
  "func ID ( ID : bool , ID ID [ ] int ) { var ID : int var : : [ ] [ ] int { var ID : [ ] [ ] bool } }",
  "func ID ( ) { { var ID : bool var ID : [ ] int call ID - ) return false / ( true / ID } } func ID ( ) { }",
  "func ID ( ) { { var ID : bool var ID : [ ] int call ID - ) return false / ) true / ID } } func ID ( ( { }",
  "func ID ( ) { { while false - - false / false * ( ID ) { } } if ) { } } func ID ( false { }",
  "func ID ( ) { { while false - - false / false * ( ID ) { } } if ) { } } func ID ( false { }",
  "func ID ( ) false { while false - - { / false * ( ID ) { } } if ) { } } func ID ( false { }",
  "func ID ( ID ( bool ) : [ ( false / - ID [ ( ID ) ] [ 123 ] * ( ( ( - : ( ID ) ) ) ) ) ) ] int { } func ID ( ) { }",
  "func ID ( ID ( bool ) : [ ( false / - ID [ ( ID ) ] [ 123 ] * ( ( ( ] : ( ID ) ) ) ) ) ) - int { } func ID ( ) { }",
  "func ID ( ID ( bool ) : [ ( false / - ID [ ( ID ) ] [ 123 ] * ( ( ( ] : ( ID ) ) ) ) ) ) - int { } func ID ( ) { }",
  "func ID ( ) { var ID : bool ( ID ( ) print ( - ( ( - - ID ) ) ) } func ID call ) { }",
  "func ID ( ) { var ID : bool ( ID ( ) print ( - ( ( - - ID ) ) ) } func ID call ) { }",
  "func ID ( ) ( var ID : bool ( ID ( ) print { - ( ( - - ID ) ) ) } func ID call ) { }",
  "func ID ( ) : int { ID [ false + ( true * ( ID ) * ID ) + ( } - ID ) ) ] = ID print ( 123 ) (",
  "func ID ( ) : int { ID [ false + ( true * ( ID ) * ID ) + ( } - ID ) ) ] = ID print ( 123 ) (",
  "func ID ( ) : int { ID [ false + ( true * ( ID ) * ID ) + ( } - ID ) ) ] = ID ) ( 123 print (",
  "func ID ( ) : bool { ID ID : int var ID : bool if - true / - true + var { } } func ID ( ) { }",
  "func ID ( ) / bool { ID ID : int var ID : bool if - true : - true + var { } } func ID ( ) { }",
  "func { ( ) / bool { ID ID : int var ID : bool if - true : - true + var ID } } func ID ( ) { }",
  "func ( ID ID : int , ID : bool ) { var ID : bool return }",
  "func ( ID ID : int , ID : bool ) { var ID : bool return }",
  "func ( ID ID : int , ID : bool : { var ID ) bool return }",
  "func ID ( ) { } ID ( ) call",
  "func { ( ) ID } ID ( ) call",
  "( { func ) ID } ID ( ) call",
  "func ID ( ) { var ID return bool : } func ID ( ID : bool ) { }",
  "func var ( ) { ID ID return bool : } func ID ( ID : bool ) { }",
  "func ID ( ID : [ ] [ ] - ) { while - - bool - ( - ( ( true ) ) ) { } ID = 123 }",
  "func ID - ID : [ ] [ ] - ) { while - - bool ( ( - ( ( true ) ) ) { } ID = 123 }",
  "- ID - ID : [ ] [ ] - ) { while - func bool ( ( - ( ( true ) ) ) { } ID = 123 }",
  "( ID func ) { } func ID ( ID : bool , ID : [ ID * - - true - ID ] int , ID : [ ] bool ) { }",
  "( ID [ ) { } func ID ( ID : bool , ID : func ID * - - true - ID ] int , ID : [ ] bool ) { }",
  "( ID [ ) { } func ID ( ID : bool , ID : func ) * - - true - ID ] int , ID : [ ] bool ID { }",
  "func ID ( ID : int ) { { } ID : [ ] bool print ID [ true ] [ ID ] } print ID var",
  "func ID ( ID : int print { { } ID : [ ] bool print ID [ true ] [ ID ] } ) ID var",
  "func ID ( ID : int [ { { } ID : [ ] bool print ID [ true ] print ID ] } ) ID var",
  "func : ( ) { var ID ID bool var ID : [ ] int return }",
  "func : ( ) { var ID ID bool var ID : return ] int [ }",
  "func : ( ) { var ID ID bool var ID : return ] int [ }",
  "func } ( ID : [ ( ( ID ( false / 123 ) ) ) ] bool ) { } func ID ( ) { ID",
  "ID } ( ID : [ ( ( func ( false / 123 ) ) ) ] bool ) { } func ID ( ) { ID",
  "ID } ( ID : [ ( ( func ( false / 123 ) ) ID ] bool ) { } func ID ( ) { )",
  "func ID ( bool : ID , ID : bool ) : bool { var ID : bool ID [ ( ID ) ] [ - ID ] = ID }",
  "func ) ( bool : ID , ID : bool ) : bool { var ID : bool ID [ ( ID ID ] [ - ID ] = ID }",
  "func bool ( bool : ID , ID : bool ) : ) { var ID : bool ID [ ( ID ID ] [ - ID ] = ID }",
  "func ID ( ) { var ID : bool ] int var ID : [ while - ID ( - ( ( ID ) ) ) { } { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool ] - var ID : [ while - ID ( int ( ( ID ) ) ) { } { } } func ID ( ) { }",
  "func ID ( ) { - ID : bool ] var var ID : [ while - ID ( int ( ( ID ) ) ) { } { } } func ID ( ) { }",
  "func ID ( ID : [ ( ID [ - ID [ ( - ( - { ) ) ] ] ) ] int ) ID }",
  "func ID ( ID ID [ ( ID [ - ID [ ( - ( - { ) ) ] ] ) ] int ) : }",
  "func ] ( ID ID [ ( ID [ - ID [ ( - ( - { ) ) ID ] ) ] int ) : }",
  "func ID ( ) { var ID } bool var ID : [ ID ( ID [ false ] ) ] int :",
  "func ID ( ) { var ID } bool var ID : [ ID ( ID [ false ] ) ] int :",
  "func ID ( ) { var ID } bool var ID : [ ID ( ID [ : ] ) ] int false",
  "func ID ( ID : [ 123 * - ] - true * - false - ( - ( - false ) ) false [ ] [ ] [ ] int ) { }",
  "func ID ( ID : [ 123 * - ] - true * - false [ ( - ( - false ) ) false [ ] - ] [ ] int ) { }",
  "] ID ( ID : [ 123 * - func - true * - false [ ( - ( - false ) ) false [ ] - ] [ ] int ) { }",
  "func ID ( ) : int { var ID : bool var ID : int while ) ID [ ID ( - ] [ - - - ( ID ) ] { } } func ID ( ) { }",
  "func : ( ) : int { var ID ID bool var ID : int while ) ID [ ID ( - ] [ - - - ( ID ) ] { } } func ID ( ) { }",
  "func : ( ) : int { var ID ID bool var ( : int while ) ID [ ID ( - ] [ - - - ID ID ) ] { } } func ID ( ) { }",
  "int ID ( ID : int , ID : bool , ID : func ) { var ID : [ ] int var ID : int ID ( ID ) = - ( ID ) }",
  "ID ID ( ) { var ID : int { var ID : int func ( ) [ ID [ ( false ) ] [ ID ] ] [ - 123 ] = ID } }",
  "ID ID ( ) { var ID : int { var ( : int func ID ) [ ID [ ( false ) ] [ ID ] ] [ - 123 ] = ID } }",
  "ID ID ( ) ] var ID : int { var ( : int func ID ) [ ID [ ( false ) ] [ ID ] { [ - 123 ] = ID } }",
  "func ID ( ) { var ID : bool ID [ ( [ ( ID ) ] [ ( ID ) ] ] = - - ID ID ) print - - ID } func ID ( ) { }",
  "func ID [ ) { var ID : bool ID [ ( [ ( ID ) ] ( ( ID ) ] ] = - - ID ID ) print - - ID } func ID ( ) { }",
  "func ID [ ) { var ID : bool ( [ ( [ ( ID ) ] ( ID ID ) ] ] = - - ID ID ) print - - ID } func ID ( ) { }",
  "func ID ( ) { { var ID : int var ID : int { ID ID : [ ID + ID ] int var var : int } } while 123 { } } func ID ( ) { }",
  "func ID ( ) { ID var ID : int var ID : int { ID ID : [ { + ID ] int var var : int } } while 123 { } } func ID ( ) { }",
  "func ID ( ) { ID var ID : int var ID : int { ID ID : [ { + ID ] int var var : int } } func 123 { } } while ID ( ) { }",
  "func ID : ) ( [ ] [ ] int { }",
  "ID func : ) ( [ ] [ ] int { }",
  "ID func : ) int [ ] [ ] ( { }",
  "func ID ( ) { var ID : [ ] bool var ID : [ ID ( ( - ( false ) ] ) ) [ ] int } func ID ( ) { }",
  "func ID ( [ { var ID : [ ] bool var ID : ) ID ( ( - ( false ) ] ) ) [ ] int } func ID ( ) { }",
  "func ID ( [ { var ID : [ ] bool var ID : ) ) ( ( - ( false ) ] ) ID [ ] int } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool call ID ( : } func ID ( ) ) [ ] bool { var ID : [ ] int }",
  "func ID ( ) { var ID : int var ID : bool call ID ( : } func ID ( ) ) [ ] bool { var [ : ID ] int }",
  "func ID ( ) { var ID : int var ID : bool call ID ( : } func ID ( ) ID [ ] bool { var [ : ) ] int }",
  "func ID ( ID : [ ] [ ] [ ] [ false * 123 * ( ( - ID ) ] [ ] int ) { } func ID - ) { }",
  "func ID ( ID : [ ] [ ] [ ] [ false * 123 * ( ( - ID ) ] ] [ int ) { } func ID - ) { }",
  "func ( ( ID : [ ] [ ] [ ] [ false * 123 * ( ID - ID ) ] ] [ int ) { } func ID - ) { }",
  "func ID ( ) { return ID - ( ( - ID [ ( ID } ] [ ( ( 123 ) ) ] ) ) } func ID ( ) { )",
  "func ID ( ) { return ID - ( ( - ID [ ( ID } ] [ ( ( 123 ) ) ] ) ) } func ID ( ) { )",
  "func ID ( ) { return ID - ( ( - ID [ ( ID } ] [ ( ( 123 { ) ] ) ) } func ID ( ) ) )",
  "func ID ( ) { var ID : [ ] [ ID ( ) [ ID ( ) [ ( - ) ( ID ) ( ) ] [ - ID ] ] ] int var ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : [ - [ ID ( ) [ ID ( ) [ ( ] ) ( ID ) ( ) ] [ - ID ] ] ] int var ID : int } func ID ( ) { }",
  "func ID ( ) { var - : [ - [ ID ( ) [ ID ( ) [ ( ] ) ( ID ) ( ) ] [ ID ID ] ] ] int var ID : int } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : [ ( - - ID [ - ( false ) ] [ ID ] ) ] [ int [ ] [ ] ] }",
  "func ID ( ) : [ ] bool { var ID : [ ( - - ID ) - ( false ) ] [ ID ] [ ] [ int [ ] [ ] ] }",
  "func ID ( ) : [ ] bool { var ID : [ ( - - ID ) - ( false ) ] [ ID ] [ ] [ int [ ] [ ] ] }",
  "func ID false ) { print ( * ID / false }",
  "func ID false ) print { ( * ID / false }",
  "func ID false ) print { ( * false / ID }",
  "func ID ( ID : [ ] [ ] int , ID : + ) : bool { while 123 + - 123 bool ID { } }",
  "func ID ( ID : [ ] { ] int , ID : + ) : bool [ while 123 + - 123 bool ID { } }",
  ": ID ( ID : [ ] { ] int , ID : + ) func bool [ while 123 + - 123 bool ID { } }",
  "func ID ( ) { var ID ) [ ] [ ID ( false / true and - true ) ] [ ] [ ] int var ID : bool } func ID ( : { }",
  "func ID ( ) { var ID ) [ ] [ ID ( false / true and - true ) ] [ ] [ ] int var ID : bool } func ID ( : { }",
  "func ID ( ) { var ID ) - ] [ ID ( false / true and [ true ) ] [ ] [ ] int var ID : bool } func ID ( : { }",
  "func ID ( ) { var ID : bool ) - true and ( - - ID ( ) ) call ID ( ) } func ID ( print { }",
  "func ID ( ) { var ID : bool ) - true and ( - - } ( ) ) call ID ( ) ID func ID ( print { }",
  "func ID ( ) { var } : bool ) - true and ( - - } ( ) ) call ID ( ) ID func ID ( print { ID",
  "func ID ( ID : bool , ID : [ ( ( - 123 / true - ID + - - ID ) ) } bool , ID : [ ] int ) { ] func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ( } - 123 / true - ID + - - ID ) ) } bool , ID : [ ] int ) { ] func ID ( ) { (",
  "func ID ( ID : bool , ID : [ ( } - 123 / true - ID + - - ID ) ] } bool , ID : [ ) int ) { ] func ID ( ) { (",
  "func ID ( ) : [ ] int { var ID : int - ID : [ 123 - var 123 * 123 * ID + - ID ] bool }",
  "func ID ( ) : [ ] int { var ID : int - ID : [ 123 - var 123 * * 123 ID + - ID ] bool }",
  "func ID ( ) : [ ] int - var ID : int - ID : [ 123 { var 123 * * 123 ID + - ID ] bool }",
  "func ID ( ID : - ( false and 123 + [ ID [ false ] + ( ID ) and - ( ( ID ) ) ) ] int ) { }",
  "func 123 ( ID : - ( false and ID + [ ID [ false ] + ( ID ) and - ( ( ID ) ) ) ] int ) { }",
  "func ID ( ) : } { var ID : int call ID ( ) while - ID - - - - ( ( - - ID ) ) { } int func ID ( ) { }",
  "func ID ( ) : } { var ID : int call ID ( ) while - ID ) - - - ( ( - - ID - ) { } int func ID ( ) { }",
  "func ID ( ) : } { var ID : int call while ( ) ID - ID ) - - - ( ( - - ID - ) { } int func ID ( ) { }",
  "func ID ( ) : ID { var ID : [ - ( ID / true and ID and - - ID ) ] int var bool : [ ] int }",
  "- ID ( ) : ID { var ID : [ - ( ID / true and ID and func - ID ) ] int var bool : [ ] int }",
  "- ID ( ) : ID { var ID : [ - ( ID / true and ID and - func ID ) ] int var bool : [ ] int }",
  "func { ( ID : [ ] int , ID : int ) : int ID return - - ID ( false ) }",
  "func { ( ID : [ ] int , ID : int ) : int return ID - - ID ( false ) }",
  "func { ( ID : [ ] int ID , : int ) : int return ID - - ID ( false ) }",
  "func ID : ) ( [ ID ( ) [ true != false * ID ( ) ] ] int { }",
  "[ ID : ) ( func ID ( ) [ true != false * ID ( ) ] ] int { }",
  "[ ID : ) ( func ID ( ) [ ] != false * ID ( ) ] true int { }",
  "func ID ( ) : int { var ID : int { int ID : int var ID : [ ( - ID ) ] [ ] [ ] var } }",
  "func ID ( ) : int { var ID : int { int ID : int var ID : [ ( - ID ) ] [ ] [ ] var } }",
  "func ID ( ) : int { var ID : int { ) ID : int var ID : [ ( - ID int ] [ ] [ ] var } }",
  "func ID ( ID : [ ] int , ID : , bool ID : [ ] int ) { var ID : bool var ID : int return ID }",
  "func ID ( ID : [ ] int , ID : , bool ID : [ ] int ) { var ID : bool var ID : int return ID }",
  "func ID ( ID : int ) : bool { var ID : int var ID : bool } func ID ( ID : int , ID : [ ( ( ) true ) ) ( ] bool , ID : bool ) { }",
  "func ID ( ID : int ) : bool { var ID : int var ID : bool } func ID ( ID { int , ID : [ ( ( ) true ) ) ( ] bool , ID : bool ) : }",
  "func ID ( ID : int ) : bool { var ID : int var ID : bool } func ID ( ID { int , ID : [ ( ( ) true ) ) ( ] ID , bool : bool ) : }",
  "func ) ( ID : [ ID ( ( ( 123 / ( ( - ID ) ) ) ) ) ] int ID { }",
  "func ) ( ID : [ ID ( ( int 123 / ( ( - ID ) ) ) ) ) ] ( ID { }",
  ") ) ( ID : [ ID ( ( int 123 / ( ( - ID ) func ) ) ) ] ( ID { }",
  "func ID ( ID : [ ] int ) : [ ( 123 * ID ( ) [ ( 123 ) ] * ( - ID ) ) { [ ] [ ] [ ] int { } func ID ( ) ] }",
  "func ID ( ID : [ ] int ) : [ ( 123 { ID ( ) [ ( 123 ) ] * ( - ID ) ) { [ ] [ ] [ ] int * } func ID ( ) ] }",
  "func ID ( ID : [ ] ) ) : [ ( 123 { ID ( ) [ ( 123 ) ] * ( - ID ) ) { [ ] [ ] [ ] int * } func ID ( int ] }",
  "func ID ( ) { print ( } ( - ID [ - ( ( ( - 123 ) ) ) ] ) ) ) call ID ( ) ( func ID ( ) { }",
  "func ID ( ) { print ( } ( - ID [ - ( ( ( - 123 func ) ) ] ) ) ) call ID ( ) ( ) ID ( ) { }",
  "func ID ( ) { print ( } ( - ID [ - ( ( ( - 123 func ) ) ] ) ) ) call ID ( ) ( ) ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ( ID [ - ( ID ) ] [ ( - [ ) ] ) ] int var ID : true ] int }",
  "func ID ( ) : bool { var ID : [ ( ID [ - ( } ) ] [ ( - [ ) ] ) ] int var ID : true ] int ID",
  "func ID ( ) : bool { var ID : [ ( ID [ - ( } ) ] [ ( - [ ) ] true ] int var ID : ) ] int ID",
  "func ID ( ) { var ID : int var ID : int if - ( ID / ( ID ) } ( - ID ) ) { } if ID { } *",
  "func ID ( ) { var ID : int var ID - int if : ( ID / ( ID ) } ( - ID ) ) { } if ID { } *",
  "func ID ( ) { var ID : int var ID - } if : ( ID / ( ID ) } ( - ID ) ) { int if ID { } *",
  "func ID ( ID : [ ) [ - ID ( ID / ( ID ) * ID ID ] [ ( ( false ) ) ] ] [ ] [ ] int ) { }",
  "func ID ( ID : [ ) [ - ID ( ID / ( ID ) * ID ID ] [ ( ( false ) { ] ] [ ] [ ] int ) ) }",
  "func ID ( ID : bool , ID : bool ) : bool { while ( ID ( - true ) while { } ) - ( - - ID ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) : bool { while ( ID ( - true ) while { } ) - ( - - ID func { } } ) ID ( ) { }",
  "func ID ( ID : bool , bool : bool ) : ID { while ( ID ( - true ) while { } ) - ( - - ID func { } } ) ID ( ) { }",
  "{ ID ( ) : bool { var ID : int } func ID ( ID : bool ) : [ ( ( - - ( 123 ) ) ) ] bool func }",
  "{ ID ( ) : bool { var ID : int } func ID ( ID : bool ) : } ( ( - - ( 123 ) ) ) ] bool func [",
  "{ ID ] ) : bool { var ID : int } func ID ( ID : bool ) : } ( ( - - ( 123 ) ) ) ( bool func [",
  "func ID ( ) { print ( ID [ true != ( 123 ) ] ) ID ) true } func ID ( = { }",
  "func ID ( ) { print ( ID [ true != ( 123 ) ] ) ID ) true } func ID = ( { }",
  "func ID ( ID : var ) { bool ID : bool }",
  "func ID ( ID ) var : { bool ID : bool }",
  "func bool ( ID ) var : { ID ID : bool }",
  "func ID ( ) : int { var ID : int ID [ - { * ID ( - ID ) * 123 ] = ( ID ) } func ID ( ) 123 }",
  "func ID ( ) : int { var ID : = ID [ - { * ID ( - ID ) * 123 ] int ( ID ) } func ID ( ) 123 }",
  "func ID ( ) : int { var ID : = ID ) - { * ID ( - ID ) * 123 ] int ( ID ) } func ID ( [ 123 }",
  "func ID ( ID : [ ( ( ( * false - false / ( - ( ( ( ID ) ) ) ) ) ) ) ] int ) { } func ID ( ) { }",
  ") ID ( ID : [ ( ( ( * false - false / ( - ( ( ( ID ) ) ) func ) ) ) ] int ) { } func ID ( ) { }",
  ") ID func ID : [ ( ( ( * false - false / ( - ( ( ( ID ) ) ) ( ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool ID : bool { if - ID * ID ( ( ) ) ) { } }",
  "func ID ( ID : bool ID : bool { ) - ID * ID ( ( if ) ) { } }",
  "func ID ( ID ) bool ID : bool { ) - ID * ID ( ( if : ) { } }",
  "func ID ( ID : int , / : [ ] [ ] [ true * true ID - 123 != ( false ) ] [ ] int ) { } func ID ( ) { }",
  "func ] ( ID : int , / : [ ID [ ] [ true * true ID - 123 != ( false ) ] [ ] int ) { } func ID ( ) { }",
  "func ] ( ID : int , / : [ ID [ ] [ true * ( ID - 123 != ( false ) ] [ ] int ) { } func ID true ) { }",
  "func ID ( ID : int , ID : bool ) { + ID : [ - ( ID var ID - ( true ) ) ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { + ID : [ ID ( ID var ID - ( true ) ) ] bool var - : bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { + ID ) [ ID ( ID var ID - ( true ) ) ] bool var - : bool } func ID ( : { }",
  "func ID ( ) { var ID ID bool var ID : bool call : ( ( ID * ( true ) * - ID ) ) }",
  "func ID ( ) { var ID ID bool var ID : bool call : ( ( ID * ( true ) * - ID ) ) }",
  "func ID ( ) { var ID ID bool var ID : call bool : ( ( ID * ( true ) * - ID ) ) }",
  "func ID ( true : [ ( ID / ( - - 123 * ID ) ) ] int ) { } func ID ( ) { }",
  "func ID [ true : ( ( ID / ( - - 123 * ID ) ) ] int ) { } func ID ( ) { }",
  "func ID [ true : ( ( ) / ( - - 123 * ID ) ) ] int ID { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int ) { var ID : int while - true ID ) { } if - ( ( ) { } }",
  "func ID ( ID : bool , ID : [ ] int ) { var ID : int while - true ID ) } { if - ( ( ) { } }",
  "func ID ( ID : bool , ID : [ ] int ) { var ID : int ( - true ID ) } { if - while ( ) { } }",
  "func ID ( ID : [ ] int , ID : bool ) : int { var ID : int ID ( ( ( - [ ID ) ) ) ] [ true ] = ID } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : ( ) : int { var ID : int ID ( ( bool - [ ID ) ) ) ] [ true ] = ID } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : ( ) : int { var ID : int ID ( ) bool - [ ID ) ) ( ] [ true ] = ID } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) : int { { print - false * ( ID ) [ true ] [ 123 ] * ID { } } print ( 123 ) } func ID ( ) { }",
  "func ID ( ID : int ) ID : int ) : int { { print - false * ( ID ) [ true ] [ 123 ] * ID { } } print ( 123 ) } func ID ( , { }",
  "func ID ( ID ( int ) ID : int ) : int { { print - false * ( ID ) [ true ] [ 123 ] * ID { } } print ( 123 ) } func ID : , { }",
  "func ID : ) ( int { var ID : [ ID * ( - ID ( ) * - - - true / - ID ) ] bool }",
  "func ID : ) ( int { var ID : [ ID * ( - ID ( ) * - - - true / - ID ) ] bool }",
  "func ID : ) ( int { var ID : [ ID - ( - ID ( ) * - * - true / - ID ) ] bool }",
  "func ID ( ID - int ) : bool { call ID ( : - ( - - true * ( true ) / - - true ) ) call ID ( ) }",
  "func ID ( ID - int ) : bool - call ID ( : - ( - { true * ( true ) / - - true ) ) call ID ( ) }",
  "func ID ( ID - int ) : bool - call ID ( : - ( - { true * ( true ) / - - true ) ) call ID ( ) }",
  "func ID ( ) : bool { var ID : int ) ID ( ) } func ID ( ) { var ID : int var ID : [ ( ( 123 ) call ] int }",
  "func ID ( ) : bool { var ID ID int ) ID ( ) } func ID ( ) { var ID : int var : : [ ( ( 123 ) call ] int }",
  "func ID ( ) ) bool { var ID ID int ) ID ( ) } func ID ( ) { var ID : int var : : [ ( ( 123 : call ] int }",
  "func ID ( ID : [ ( - ID [ ( ( ( ) ) ] [ 123 ] ) ] bool ) { } func ID ID ) { }",
  "func ID ( ID : [ ( - ID [ ( ( ( ) ) ] [ 123 ] ) ] bool ) { } func ID ID ) { }",
  "func ID ( ID : [ ( - } [ ( ( ( ) ) ] [ 123 ] ) ] bool ) { } func ID ID ) { ID",
  "func ID ( ID : bool , ) : bool ID : [ ] int { var ID : bool var ID : int return }",
  "func ID ( ID : bool , ) : bool ID : [ ] int { var ID : bool var ID : int return }",
  "func ID ( ID : bool , ID } bool ) { return :",
  "func ID ( } : bool , ID : bool ) { return ID",
  "func ID ( ID : int , ID : int , ID : [ true / ID ( ( true ) ) ) - ID ] bool * { } func ID ( ) { }",
  "func ID ( ID : ( , ID : int , ID : [ true / ID ( int true ) ) ) - ID ] bool * { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - ID [ ID ( ) + false / ID ] - ID + ID * ] int ) { }",
  "func ID ( ID : bool , ID : int - ID [ ID ( ) + false / ID ] - ID + ID * ] [ ) { }",
  "func * ( ID : bool , ID : int - ID [ ID ( ) + false / ID ] - ID + ID ID ] [ ) { }",
  "func ID ( ) { var { : bool var ID : [ ] int if ( 123 * ID ( ) / true ) { } while false ID } } func ID ( ) { }",
  ") ID ( ) { var { : bool var ID : [ ] int if ( 123 * ID ( ) / true func { } while false ID } } func ID ( ) { }",
  "* ID ( ) { var { : bool var ID : [ ] int if ( 123 ) ID ( ) / true func { } while false ID } } func ID ( ) { }",
  "func ID ( ID : int , ID [ int ) : [ ] : - ID ( ( - 123 ) ) ] [ ] int { }",
  "func ID ( ID : int , ID [ int ) : [ ] : - ID ( ( - 123 ) ) ] [ ] int { }",
  "func ( ( ID : int , ID [ int ) : [ ] : - ID ID ( - 123 ) ) ] [ ] int { }",
  "func ID ( ) { var ID : int var ID : [ ( - - ID [ ID ( [ - - ] ID ) ] ) ] [ ] [ ] bool }",
  "func ID ( ) { var ID : int var ID : [ - - - ID [ ID ( [ - ( ] ID ) ] ) ] [ ] [ ] bool }",
  "func : ( ) { var ID ID int var ID : [ - - - ID [ ID ( [ - ( ] ID ) ] ) ] [ ] [ ] bool }",
  "func ID ( ) : bool { var ID : ) print ( true * 123 / ( true int ) print true } func ID ( ) { }",
  "func ID ( ) : bool { ID ID : ) print ( true * 123 / ( true int ) print true } func var ( ) { }",
  "func ID ( ) : bool { print ID : ) print ( true * 123 / ( true int ) ID true } func var ( ) { }",
  "func ID ( ID ( [ 123 / ID ( ) [ false / ( : ID ) ) ] [ - 123 ] ] int ) { } func ID ( ) { }",
  "func ID ( ID ( [ 123 / ID ( ) [ false ] ( : ID ) ) ] [ - 123 / ] int ) { } func ID ( ) { }",
  "func ID ( ID ( [ 123 / ID ( ) [ false ] ( : ID ) ) ] ) - 123 / ] int ) { } func ID ( [ { }",
  "func ID ( ) : bool { var ID : [ ] int ) ID : bool call ID ( var return }",
  "func ID ( ) : bool { var ID : [ return int ) ID : bool call ID ( var ] }",
  "func ID ( ID : bool { var ID : [ return int ) ID : bool call ) ( var ] }",
  "func ID ( ID : bool ) : int { var ID : bool while ( ID ) ID ] [ { } }",
  "func ID ( ID : bool ) : var { int ID : bool while ( ID ) ID ] [ { } }",
  "func ID ( ID : bool ) : var { int ID : bool while ( ID ) ID ] { [ } }",
  "func ID ( ID : int ) { var ID : int var ID : bool } bool ID ( ID : bool , ID : int , ID : func ) { }",
  "func ID ( ID { int ) : var ID : int var ID : bool } bool ID ( ID : bool , ID : int , ID : func ) { }",
  "func ID ( ID { int ) : var ID : var int ID : bool } bool ID ( ID : bool , ID : int , ID : func ) { }",
  "func ID ( ID : bool , ID : bool ) : bool { var ID : [ ] int { { ID ( ) = - ID print ( ID ) } while ( ( ) { } } while ( false ( true ) ) ) { } }",
  "func ID ( ID var bool , ID : bool ) : bool { : ID : [ ] int { { ID ( ) = - ID print ( ID ) } while ( ( ) { } } while ( false ( true ) ) ) { } }",
  "func ID ( ID } bool , ID : bool ) : bool { : ID : [ ] int { { ID ( ) = - ID print ( ID ) } while ( ( ) { } var while ( false ( true ) ) ) { } }",
  "func ID ( ID : [ ] int , , : int ID ID : [ - ( ( ( ( false ) ) ) ) ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ID : [ ] int , , : int ID ID : [ - ( ( false ( ( ) ) ) ) ] [ ] [ ] [ ] bool ) { }",
  "func ID ( ID : [ ] int , [ : int ID ID : [ - ( ( false ( ( ) ) ) ) ] , ] [ ] [ ] bool ) { }",
  "func false ( ) { var ID : [ - - ( - 123 - ID / true / ID ) ] int var ID : int } func ID ( ) { }",
  "func false ( ) { var ID : [ - - ( - 123 - ID / true / ID ) ] int var ID : int } func ID ( ) { }",
  "func false ( ) { var ID : [ : - ( - 123 - ID / true / ID ) ] int var ID - int } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : [ int ] ) : bool { call ID ( ) return true / 123 } func ID ( ) { }",
  "func ID ( ID : int / ID : bool , ID : [ int ] ) : bool { call ID ( ) return true , 123 } func ID ( ) { }",
  "func ID ( ID : int / true : bool , ID : [ int ] ) : bool { call ID ( ) return ID , 123 } func ID ( ) { }",
  "func ID ( ] : [ ] bool , ID : [ ( ID ( ID ( ) ) ) ] [ ID [ ] int , ID : bool ) { }",
  "func ID ( ] : [ ] bool , ID : [ ( ID ( ID ( ) ) ) ] [ ID [ ] int , ID : bool ) } {",
  "func ID ( ] : [ ] bool , ID : [ ( ID ( ID ( ) ) ) ] [ ID [ ] int , ID : bool ) } {",
  "func ID ( ) : [ ID ( ) [ ID [ true / - ] ] ID ] int { } func ID ( ) { }",
  ") ID ( func : [ ID ( ) [ ID [ true / - ] ] ID ] int { } func ID ( ) { }",
  ") ID ( func } [ ID ( ) [ ID [ true / - ] ] ID ] int { : func ID ( ) { }",
  "func ID ( ) : [ - ID ( - / * ( ID false ID / - ID ) * - ID ) ] bool { }",
  "func ID ( ) : [ - ID ID - / * ( ( false ID / - ID ) * - ID ) ] bool { }",
  "func ID ( ) : ID - ID ID - / * ( ( false ID / - [ ) * - ID ) ] bool { }",
  "func ID ( = : bool { var ID : bool ID ( ) [ - ( - ID ( ) ) ] [ ID ] ) true } func ID ( ) { }",
  "func ID ( = : bool ID var ID : bool ID ( ) [ - ( - { ( ) ) ] [ ID ] ) true } func ID ( ) { }",
  "func ID ( ( : int , ID : [ false * ID ( ( ( ( ID - - ID ) ) ) ) ) / ( - ID ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ( : int , ID : [ false * ID ( ( ( ( ID - - ID ) ) ) ) ) / ( - ID ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ( : int , ID : [ false * ID ( ( ( ( ID - - ID ) ) ) ) ) / ( - ID ) ] [ ] ( ) { } func ID bool ) { }",
  "func ID ( ID : bool , ID : [ ] [ 123 / ( - ( - - 123 ) } ] [ ] [ ] [ ] [ ] bool , ID : int ) { ) func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ 123 / ( - ( - - 123 ) } ] [ ] [ ] [ ] [ ] bool , ID : int { ) ) func ID ( ) { }",
  "func ID { ID : bool , ID : [ ] [ 123 / ( - ( - - 123 ) } ] [ ] [ ] [ ] [ ] bool , ID : int { ) ) func ID ( ) ( }",
  "func ID ( ID : int , } : bool ) : bool { ID func ID ( ) : bool { var ID : int var ID : bool return false }",
  "func ID ( ID : int , } : bool ) : bool { ID func ID ( ) ID bool { var ID : int var : : bool return false }",
  "func ID ( ID : int , false : bool ) : bool { ID func ID ( ) ID bool { var ID : int var : : bool return } }",
  "func ID ( ID : bool , ID : ) , ID : [ ] int bool : int { return false * ( - false ) * ID }",
  "func [ ( ID : bool , ID : ) , ID : ID ] int bool : int { return false * ( - false ) * ID }",
  "func [ ( ID : bool , ID : ) , ID : } ] int bool : int { return false * ( - false ) * ID ID",
  "func ID bool ID : ( ) { var ID : [ - false - ID / false + - ID ] [ ] bool }",
  "func ID bool ID : ( ) { var ID : [ - false - ID / false + - ID ] [ ] bool }",
  "func ID bool ID : ( ) { var ] : [ - false - ID / false + - ID ID [ ] bool }",
  "func ID ( ) { var ID : int var ID : [ bool ( ) [ ID [ ( ( true ) ) ] ] [ true ] ] ID } func ID ( ) { }",
  "func ID ( ) { var ID ] int var ID : [ bool ( ) [ ID [ ( ( true ) ) ] ] [ true : ] ID } func ID ( ) { }",
  "func ID ( ) { var ID ] int var ID : [ bool ( ) [ } [ ( ( true ) ) ] ] [ true : ] ID ID func ID ( ) { }",
  "func ID ( ID : [ ] != 123 [ ID [ 123 * - ID ] ] int ) { }",
  "func : ( ID ID [ ] != 123 [ ID [ 123 * - ID ] ] int ) { }",
  "func : ( { ID [ ] != 123 [ ID [ 123 * - ID ] ] int ) ID }",
  ") ID ( ID : bool , ID : [ ] bool , ID : [ false - ID ( ) [ true ] - ( ( - 123 func ) ] [ ] [ ] [ ] int ) { }",
  ") ID ( ID : [ , ID : bool ] bool , ID : [ false - ID ( ) [ true ] - ( ( - 123 func ) ] [ ] [ ] [ ] int ) { }",
  ") ID ( ID : ( , ID : bool ] bool , ID : [ false - ID ( ) [ true ] - [ ( - 123 func ) ] [ ] [ ] [ ] int ) { }",
  "func ID ( ) { var * : bool print 123 ID ID ( ID ( ) [ - false ] [ - - ( false ) ] ) / 123 call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var * : bool print 123 ID ID ( ID ( ) [ ] false ] [ - - ( false ) - ) / 123 call ID ( ) } func ID ( ) { }",
  "func ID ) ) { var * : bool print 123 ID ID ( ID ( ) [ ] false ] [ - - ( false ) - ) / 123 call ID ( ) } func ID ( ( { }",
  "func ID ( ) : [ ] bool { if ) / 123 + ( - ( ID true ) + ID { } } func ID ( ) { }",
  "func ID ( ) : [ ] bool { if ) / 123 + ( - ( ID true ) + ID { } } func ID ( ) { }",
  "func ID ID ) : [ ] bool { if ) / 123 + ( - ( ID true ) + ( { } } func ID ( ) { }",
  "func ID ( ID : [ ] [ true - ID ( - ID } ) / ( false ) ) ] bool ) { } func ID ( ) { (",
  "func ID { ID : [ ] [ true - ID ( - ID } ) / ( false ) ) ] bool ) { } func ID ( ) ( (",
  "func ID [ ID : [ ] { true - ID ( - ID } ) / ( false ) ) ] bool ) { } func ID ( ) ( (",
  "func ID ( int { var ID : [ ] ) { } print - ( false - false + ID ) }",
  "func ID ( int { var ID : [ ] } { } print - ( false - false + ID ) )",
  "func ID ( int { ) ID : [ ] } { } print - ( false - false + ID var )",
  "func ID ( ) { var ID : int if false * ID [ - ID ( ID ) ] [ ( ID } ] * - - true { ) ID = ID } func ID ( ) { }",
  "func ID ( ) { var ID : int if false * ID [ - ID ( ID ) ] [ ( ID } ] true - - * { ) ID = ID } func ID ( ) { }",
  "func ID ( ) { var ID true int if false * ID [ - ID ( ID ) ] [ ( ID } ] : - - * { ) ID = ID } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] int ) { { var ID ID int print false - ID + - ID } : = ( - ID ) } func ID ( ) { }",
  "} ID ( ID : [ ] [ ] int ) { { var ID ID int print false - ID + - ID } : = ( - ID ) } func ID ( ) { func",
  "} ID ( ID : [ ] [ ] int ) { { var ID ID int ID false - print + - ID } : = ( - ID ) } func ID ( ) { func",
  "func ID ( ) { return true + - ( - ( * true ( - true ) ) ) } func ID ( ) { }",
  "func ID ( ) { return true + } ( - ( * true ( - true ) ) ) } func ID ( ) { -",
  "} ID ( ) { return true + func ( - ( * true ( - true ) ) ) } func ID ( ) { -",
  "func ID ( ID : [ { [ ID - ID ( ( ( ID ) ) ) - - ( - true ) ] bool ) { } func ID ( ) ] }",
  "func ID ( ID : [ { [ ID - bool ( ( ( ID ) ) ) - - ( - true ) ] ID ) { } func ID ( ) ] }",
  "func ID ( ID : [ { [ ID ( bool ( ( ( ID ) ) ) - - ( - true ) ] ID ) { } func ID - ) ] }",
  "func ID ( ID : int , ID : int ) : bool { var ID : int while - - - - false * ( ID - ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) ( bool { var ID : int while - - - - false * : ID - ) { } } func ID ( ) { }",
  "func ID ( ) : [ ( false * - - ) + 123 / ID ( ) / ID + - ID 123 ] bool { }",
  "func ID ( ) / [ ( false * - - ) + 123 / ID ( ) : ID + - ID 123 ] bool { }",
  "func ID ( ) / [ ( - * - false ) + 123 / ID ( ) : ID + - ID 123 ] bool { }",
  "func ID ( ) { var ID : [ ] int var ID : var { var ID : int int ID : int while true { } } }",
  "func : ( ) { var ID ID [ ] int var ID : var { var ID : int int ID : int while true { } } }",
  "func : ( ) { int ID ID [ ] int var ID : var { var ID : var int ID : int while true { } } }",
  "func ID ( ID : [ ID [ false != ( - ID } ) ) ] [ 123 ] ] [ ] bool ) { ( func ID ( ) { }",
  "func ID 123 ID : [ ID [ false != ( - ID } ) ) ] [ ( ] ] [ ] bool ) { ( func ID ( ) { }",
  "func [ 123 ID : [ ID ID false != ( - ID } ) ) ] [ ( ] ] [ ] bool ) { ( func ID ( ) { }",
  "func ID ( ) { var ID : [ true + ID [ ID [ - ( ( - ) ) ] [ false ] ] [ ( true ) ] + ID true ] int } func ID ( ) { }",
  "func ID ( ) { var ID : [ true + ID [ ID [ - ( ( - ) ) ] [ false ] ] [ ( true ) ] + ID true ] int } func ID ( ) { }",
  "func ID ( ID : [ ID ( true >= false / - ID ( ID ) ) ] } ] [ ] [ ] [ ] [ ] bool ) { } func ID ( ) { [",
  "func ID ( ID : [ ID ( true ID false / - >= ( ID ) ) ] } ] [ ] [ ] [ ] [ ] bool ) { } func ID ( ) { [",
  "func ID ( ID : [ ID ( true ID false / - >= ( ID ) ) ] } ] [ ] [ ] [ ] [ ] bool ) { } func ID ( ) { [",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) : [ ] int [ var ID : { ( false ) ] int var ID : bool }",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) : [ int ] [ var ID : { ( false ) ] int var ID : bool }",
  "func ID ( ) : int , ID : int , ID : [ ] bool ID : [ int ] [ var ID : { ( false ) ] int var ID : bool }",
  "func ID ( ID ] [ - - - - ID ( ) / - ( ID ( ) ) : [ ] [ ] bool ) { }",
  "func ID ( ID ] [ - - - - ID ( ) ] - ( ID ( ) ) : [ / [ ] bool ) { }",
  "func ID ( ID ] [ - - - - ID ( ) ] - ( ID ( ) ) : [ / [ ] bool ) { }",
  "func ID ( : : bool , ID ID int , ID : [ ( ( ID [ - ID ] ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( : : bool , ID ID int , ID } [ ( ( ID [ - ID ] ) ) ] bool ) { : func ID ( ) { }",
  "func ID ( : : bool , ID ID int , ID } [ ( ( ID [ - ID ] ) ) ] bool ) { : func ID ( ) { }",
  "func ID ( ) { var ID : if var ID : int print - false - ( - ID ) bool - true { } }",
  "func ID ( ) { var var : if ID ID : int print - false - ( - ID ) bool - true { } }",
  "func ID ( ) { var var : if ID ID : int print - false - ( - ID ) bool - true { } }",
  "func ID ( ID : int ) : int { var ID var [ ] bool : ID : bool }",
  "func ID ( ID : int ) : bool { var ID var [ ] bool : ID : int }",
  "func ID ( ) ID var ID : int var ID : int { var ID : int var { : int call ID ( ) ID ( ) = true } }",
  "func ID ( ) ID var ID : int var ID : int { var ID : int var { : int call ID ( ) ID ( ) = true } }",
  "func ID ( ) ID var ID : : var ID int int { var ID : int var { : int call ID ( ) ID ( ) = true } }",
  "func ID ( ID : bool , ID : int ) : int { var ID : int { var ID : { if ID ( ) { } int } } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { var : : int { var ID ID { if ID ( ) { } int } } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { var : : int { var ID ID { if ID ( ) { } int } } } } ID ( ) { func",
  "func ID ( ID : int bool { var ID : ) call ID ( - ( ( - ID ) ) ) } func ID ( ) { }",
  "func ID ( ID : int bool { var ID : ) call ID ( - ( ( - ID ) ) ) } func ID ( ) { }",
  "func ID ( ID : int bool { var ID : ) call ID ( - ( ( - ID ) ) ) } func ID ( ) { }",
  "ID func ( ) { call ID ( false * ID [ ( false - - ( - false ) ) ] ) { } }",
  "ID func ( ) { call ID ( false * [ ID ( false - - ( - false ) ) ] ) { } }",
  "ID func ( ) { call ID ] false * [ ID ( false - - ( - false ) ) ( ) { } }",
  "func ID ( ) { var ID : ID var ID : bool print bool / ( ( - ( - false ) ) ) * ID }",
  "func ID ( ) { var ID : * var ID : bool print bool / ( ( - ( - false ) ) ) ID ID }",
  "func ID ( } { var ID : * var ID : bool print bool / ( ( - ( - false ) ) ) ID ID )",
  "func ID ( ID : int ) { if ID + - true + false ( - false * * 123 ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID func int ) { if ID + - true + false ( - false * * 123 ) { } call ID ( ) } : ID ( ) { }",
  "func ID ( + func int ) { if ID + - true ID false ( - false * * 123 ) { } call ID ( ) } : ID ( ) { }",
  "func ID ( ID : int , ID : int ) : [ } [ - 123 * ( ID [ - ID ] ) * - ID ] bool { ]",
  "func ID ( ID : int , ID : int ) : [ } [ - 123 * ] ID [ - ID ] ) * - ID ] bool { (",
  "func ID ( ID : int , ID : int ) : [ } [ - 123 * ( ID [ - ID ] ) * - ID ] bool { ]",
  "func ID ( ID : int , ID : int , ID : bool ) : [ - - ( - 123 / - ID * ID } ] bool { } func ID ( ) { )",
  "func ID ( ID : int , ID : int : ID : bool ) , [ - - ( - 123 / - ID * ID } ] bool { } func ID ( ) { )",
  "func ID ( ID : int , ID : int : - : bool ) , [ - - ( ID 123 / - ID * ID } ] bool { } func ID ( ) { )",
  "func ID ( ID : int ) : ) ] bool { print true * ( - ( ( ( ( 123 ) ) ) ) [ }",
  "func ID ( ID - int ) : ) ] bool { print true * ( : ( ( ( ( 123 ) ) ) ) [ }",
  "int ID ( ID - func ) : ) ] bool { print true * ( : ( ( ( ( 123 ) ) ) ) [ }",
  "func ID ( ) { var ID : int return } func ID ( ) { var ID : [ [ ] ] [ ID ] bool var ID : [ ] bool }",
  "func ID ( ) [ var ID : int return } func ID ( ) { var ID : { [ ] ] [ ID ] bool var ID : [ ] bool }",
  "func ID ( ) [ var int : ID return } func ID ( ) { var ID : { [ ] ] [ ID ] bool var ID : [ ] bool }",
  "func ID ( ID : [ ] [ ] { , ID : int , ID : bool ) : bool { } func ID ( ID : bool , ID : [ ] int ) bool }",
  "func ID ( ID : [ ] [ ] { , : : int , ID : bool ) : bool { } func ID ( ID : bool , ID ID [ ] int ) bool }",
  "func ID ( ID : [ ] [ ] { func : : int , ID : bool ) : bool { } , ID ( ID : bool , ID ID [ ] int ) bool }",
  "func ID ( ID : int , ID : bool ) : ) { var ID : bool while 123 - - ( ( ID int ) { } if ( - false ) { } } func ID ( ) { }",
  "func ID ( } : int , ID : bool ) : ) { var ID : bool while 123 - - ( ( ID int ) { ID if ( - false ) { } } func ID ( ) { }",
  "func ID ( } : int , ID : bool ) : ) { var ID : bool while 123 - - ( ( ID int ( { ID if ( - false ) { } } func ID ) ) { }",
  "func ID ( ) { - ID : bool return ( var ID [ ID [ - ID ] [ - ( ID ) ] ] ) }",
  "func ID ( ) { - ID : bool return ( [ ID var ID [ - ID ] [ - ( ID ) ] ] ) }",
  "func ID ( ) { - ID : } return ( [ ID var ID [ - ID ] [ - ( ID ) ] ] ) bool",
  "func ID ( ID : int , ID : [ 123 - ID [ ID ( ) * - ID ] [ ) - ( - 123 ) ] ] [ ] int , ID : [ ] bool - { }",
  "func ID ( ID * int , ID : [ 123 - ID [ ID ( ) : - ID ] [ ) - ( - 123 ) ] ] [ ] int , ID : [ ] bool - { }",
  "func ID ( ID * int ] ID : [ 123 - ID [ ID ( ) : - ID ] [ ) - ( - 123 ) , ] [ ] int , ID : [ ] bool - { }",
  "func ID ( ID : func , ID : bool , ID : int ) { var ID : [ ] bool print ID [ - true ] [ ( ( ID ) ) ] } bool ID ( ) { }",
  "func ID ( ID : func , ID : bool , ID : int ) { var ID : [ ] bool ) ID [ - true ] [ ( ( ID ) ) ] } bool ID ( print { }",
  "func ID ( ID : func , ID : bool , ID : int ) { var ID ) [ ] bool : ID [ - true ] [ ( ( ID ) ) ] } bool ID ( print { }",
  "func ID ( ID : [ false - ID * 123 / ( 123 * ( ) ) ] bool ) { }",
  "func ID ( ID : [ false - ID * ( / 123 123 * ( ) ) ] bool ) { }",
  "func ID ( ID : [ false - ID ] ( / 123 123 * ( ) ) * bool ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) ) var ID : bool if ( - true { { } }",
  "func ID ( ID : bool , ID : bool , ID : int ( ) var ID : bool if ) - true { { } }",
  "func ID ( ID : bool , ID : bool , ID : int ( ) var ID : bool if ) - true { } } {",
  "func ID ( ID : bool , ID : [ 123 + - ( ] [ ID ID ) - - ( true ) ] int , ID : int ) { }",
  "func ID ( ID : bool , ID : { 123 + - ( ] [ ID ID ) - - ( true ) ] int , ID : int ) [ }",
  "func ID ( ID : bool , [ : { 123 + - ( ] ID ID ID ) - - ( true ) ] int , ID : int ) [ }",
  "( ID ( ) : [ ] [ ] int { var ID : [ func false / - 123 ) ] int var ID : int }",
  "( ID ( ) : [ ] [ ] int { var ID : [ func false / - 123 ) ] var int ID : int }",
  "( ID ( ) : [ ] [ ] int { var ID : [ func false / - 123 ) ] var int ID : int }",
  "func ID ( } { var ID : bool var ID : bool return )",
  ") ID ( } { var ID : bool var ID : bool return func",
  ") ID ( } var var ID : bool { ID : bool return func",
  "func ID - ) : int { var ID : bool var ID : [ ( ID ( ) [ ( ( false ) ] [ true ] ) ] int } func ID ( ) { }",
  "} ID - ) : int { var ID : bool var ID : [ ( ID ( ) [ ( ( false ) ] [ true ] ) ] int } func ID ( ) { func",
  "} ID - ) : int { var ID : bool var ID ID [ ( : ( ) [ ( ( false ) ] [ true ] ) ] int } func ID ( ) { func",
  "func ID ( ) ID bool { } func ID ( ID : bool ) : bool { var : : [ - ( ( true ) ) ] bool }",
  "func ID ( ) ID : { } func ID ( ID : bool ) bool bool { var : : [ - ( ( true ) ) ] bool }",
  "func ID bool ) ID : { } func ID ( ID : ( ) bool bool { var : : [ - ( ( true ) ) ] bool }",
  "func ID : ID : bool ) : int { var ID : [ ] int var ID : bool } func ID ( ID : int ) ( bool { }",
  "func ID : ID : bool ) : int { ) ID : [ ] int var ID : bool } func ID ( ID : int var ( bool { }",
  "func : : ID : bool ) ID int { ) ID : [ ] int var ID : bool } func ID ( ID : int var ( bool { }",
  "func ID ( : ) int { var ID : [ ] bool } func ID ( ID : [ ID - ( true ) + ( - - ID ) ] [ ] int ) { }",
  "func ID ( : ) int { var ] : [ ID bool } func ID ( ID : [ ID - ( true ) + ( - - ID ) ] [ ] int ) { }",
  "func ID ( : ) int { var ] : [ ID bool } func ID ( ID : [ ID - ( true ) + ( - - ID ) ] [ ] int ) { }",
  "func ID ( - { if false ) false >= ( false * false ) { } }",
  "func ID ( - { } false ) false >= ( false * false ) { if }",
  "func ID ( [ { var ID : [ ] bool ID ) - ID ( ( ID ) ) ] = - - false call ID ( ) }",
  "func ID ( [ { var ID : ( ] bool ID ) - ID ( [ ID ) ) ] = - - false call ID ( ) }",
  "func ID [ [ { var ID : ( ] bool ID ) - ID ( ( ID ) ) ] = - - false call ID ( ) }",
  "func ID ( ) : int , ID : int ) : [ ID ( ID [ ID ( 123 ) ] ] int { }",
  "func ) ( ID : int , ID : int ) : [ ID ( ID [ ID ( 123 ) ] ] int { }",
  "func ) ( ID : int , ID : int ) ID [ ID ( ID [ : ( 123 ) ] ] int { }",
  "func ID ( ID : [ ] bool , ID : [ ] [ ] ] 123 * - ID [ true [ ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : [ ] [ ] ] 123 * - ID [ true [ ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( - : [ ] bool , ID : [ ] [ ] ] 123 * ID ID [ true [ ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : [ int - true * - ID ( ) [ - ( ( ( - ( ID ) ) ) ) ] ] - ) { } func ID ( ) { }",
  "func ID ( ID [ [ int - true * - ID ( ) : - ( ( ( - ( ID ) ) ) ) ] ] - ) { } func ID ( ) { }",
  "func ID - ID [ [ int - true * - ID ( ) : - ( ( ( - ( ID ) ) ) ) ] ] ( ) { } func ID ( ) { }",
  "{ ID ( ) : bool { print ( ID [ ID ( ) * false * - ( 123 ) ] [ - - ID ] ) print true } func ID ( ) func }",
  "{ ID func ) : bool { print ( ID [ ID ( ) * false * - ( 123 ) ] [ - - ID ] ) print true } ( ID ( ) func }",
  "{ ID func ) : bool { print ( } [ ID ( ) * false * - ( 123 ) ] [ - - ID ] ) print true ID ( ID ( ) func }",
  "func ID ( ) : bool { ID ID : [ ] int if var ( ) * ( false ) / true { } } func ID ( ) { }",
  "func ID ( func : bool { ID ID : [ ] int if var ( ) * ( false ) / true { } } ) ID ( ) { }",
  "func ID ( func ( bool { ID ID : [ ] int if var ( ) * : false ) / true { } } ) ID ( ) { }",
  "func ID var ) { ( ID : int var ID : bool if ID ( false - ( ID ) + ID ) { } } func ID ( ) { }",
  "func ID var ) { ( ID : int var ID : bool if ID ( } - ( ID ) + ID ) { false } func ID ( ) { }",
  "func ID var ) { ( ID : int var ID : bool if ID ( } - ( ( ) + ID ) { false } func ID ID ) { }",
  "func ID ( int : bool ) : bool { call ID ( ) return } func ID ( ID : int ) : ID { var ID : bool }",
  "func ID ( int : bool ) : bool { call ID ( ) return } func ID ( ID : ) int : ID { var ID : bool }",
  "func ) ( int : bool ) : bool { call ID ( ID return } func ID ( ID : ) int : ID { var ID : bool }",
  "func ID ( ID : bool ) : bool { ID ( ID [ false / / ID ] ID ) = ( ( ID ) ) }",
  "func ID ( ID : bool ) : bool { ID ( ID [ false / / ID ] ID ) = ( ( ID ) ) }",
  "func ID ( ID : bool ) : = { ID ( ID [ false / / ID ] ID ) bool ( ( ID ) ) }",
  "func ID ( ) : [ ID ( / - 123 ( ( 123 ) * true ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : [ ID ( / - 123 ( ( 123 ) * ( ) ) ] [ ] bool { } func ID true ) { }",
  "func ID ( ) : [ ID ( / - 123 ( ( 123 ) * ( ) ) ] [ ] { { } func ID true ) bool }",
  "func ID ( / : bool { var ID : bool ID ( ) [ - - ( 123 ) ( ( - true ) ) * 123 ) ] = - ( false ) } func ID ( ) { }",
  "func ID ( / : bool { var ID : bool ID ( ) [ - - ( 123 ) ( ( - true ) } * 123 ) ] = - ( false ) } func ID ( ) { )",
  "func ID ( / : bool { var ID : bool ID ( ) [ - - ( ) ) ( ( - true ) } * 123 ) ] = - ( false 123 } func ID ( ) { )",
  "func ID ( ID : bool ) : int { call ID ( 123 + ( 123 * - - 123 / ( ID ) ) + ( 123 { ) } func ID ( ) ) }",
  "func ID ( ID : bool ) : int { call ID ( 123 + ( 123 ID - - 123 / ( * ) ) + ( 123 { ) } func ID ( ) ) }",
  "func ID ( ID : bool ( : int { call ID ( 123 + ( 123 ID - - 123 / ( * ) ) + ( 123 { ) } func ID ) ) ) }",
  "func ID bool ID : [ ] ( , ID : int ) { var ID : bool var ID : [ ] bool { var ID : [ ( ( - - true ) ) ] int } } func ID ( ) { }",
  "func ID bool ID : [ ] ( , ID : int ) { var ID : bool var ID : [ ] bool ) var ID : [ ( ( - - true ) { ] int } } func ID ( ) { }",
  "func ID bool ID : [ ] } , ID : int ) { var ID : bool var ID : [ ] bool ) var ID : [ ( ( - - true ) { ] int } ( func ID ( ) { }",
  "func ID ( ) : bool { var ID : var var ID : int call ID ( ) { int ID : bool } return }",
  "func ID ( ) : bool var var ID : var { ID : int call ID ( ) { int ID : bool } return }",
  "func ID ( ) : bool var var ID : var { ID : int call ID ( ) { int ID : bool } return }",
  "func ID ( ID : [ ] [ ] bool , ID : int ) { var ID : bool var ID : bool call ) ( ID } func ID ( ) { }",
  "func ID ( ID : [ ] [ ] bool , ID : int ) { var ID : bool ID ID : bool call ) ( var } func ID ( ) { }",
  "func ID ( ID : var ] [ ] bool , ID : int ) { [ ID : bool ID ID : bool call ) ( var } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ID ( ) [ 123 / ( [ ) ] ID - ID ] ] bool ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ID ( ) [ 123 / ( [ ID ] ) - ID ] ] bool ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ID ( ) } 123 / ( [ ID ] ) - ID ] ] bool ) { [",
  "func ID ( ) { var ID : bool and ( ID and ID ( ) [ ( ID ) ] return - ( 123 ) ) }",
  "func ID ( ) { var ID : bool and ( ID and ID ( ) [ ) ID ) ] return - ( 123 ( ) }",
  "func ID ( ) { var ID : bool and ( ( and ID ( ) [ ) ID ) ] return - ID 123 ( ) }",
  "func ID ( ID : int , ID : [ - - ID ( ) [ ( ( ID ) ) ] ] int } { ) func ID ( ) { }",
  "func ID ( ID : int , ID : [ int - ID ( ) [ ( ( ID ) ) ] ] - } { ) func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : int } func ID ( ID : bool , ID bool : , ID : [ - 123 ] bool ) { }",
  "func ID ( ) : bool { var : : int var ID : int } func ID ( ID : bool , ID bool : , ID ID [ - 123 ] bool ) { }",
  "func ID ( ) : bool { var : : int var ID : int } func ID ( ID : bool , ID bool : [ ID ID , - 123 ] bool ) { }",
  "func ID ( ) : int { { } return false >= - 123 ( - ID ) }",
  "func ID ( ) : int - { } return false >= - 123 ( { ID ) }",
  "func ID ( ) : int - { } return false >= ID 123 ( { - ) }",
  "func ID ( ) { var ID : [ ] int var ID : [ ] bool { ID [ ( - ID ) ] ) ID if - ( - false ) { } } ID = ( ( ( false ) = ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int var ID : [ ] bool { ID [ ( - ID ) ] ) ID if - ( - false ) false } } ID = ( ( ( { ) = ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] var int ID : [ ] bool { ID [ ( - ID ) ] ) ID if - ( - false ) false } } ID = ( ( ( { ) = ) } func ID ( ) { }",
  "func ID ( ID : int : ID : bool , ID : bool ) : int { var ID , int var ID : bool if ( true ) { } call ID ( ) }",
  ") ID ( ID : int : ID : bool , ID : bool func : int { var ID , int var ID : bool if ( true ) { } call ID ( ) }",
  "func ID ( ID : [ 123 / 123 / ( ( ID ) ( [ - true ] [ ( true ) ] ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func [ ( ID : ID 123 / 123 / ( ( ID ) ( [ - true ] [ ( true ) ] ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func [ ( ID : ID 123 / 123 / ( ( ID ) ( [ - true ] [ ( true ) ] ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) { var ID int bool { var ID : [ ] [ ] : var ID : [ ] int print ID while - ID { } } }",
  "func ID ( ) { { ID int bool var var ID : [ ] [ ] : var ID : [ ] int print ID while - ID { } } }",
  "func ID ( ) { { ID int bool var var ID : [ ] [ ] : var ID : [ ] int print ID while - ID { } } }",
  "func ID ( ID : int - ID : [ 123 * , ( - - ID ( ) [ ( true ) ] [ true ] ) ] int , ID : bool ) { } func ID ( ) { }",
  "func ] ( ID : int - ID : [ 123 * , ( - - ID ( ) [ ( true ) ] [ true ] ) ID int , ID : bool ) { } func ID ( ) { }",
  "func ] ( ID : int - ID : [ 123 * , ( - - ID ( ) [ ( true ) ] [ true ] ) ID int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ { int ) ] }",
  "func ) ( ID : [ ] [ { int ID ] }",
  "func ) ( [ : ID ] [ { int ID ] }",
  "func ID ( ID : [ 123 * - ( ( ID ( ( - ID ) ) ) ) / - - ( - ID ) } [ ] int ) { ] func ID ( ) { }",
  "func ID ( ID : [ 123 * - ( ( ID ( ( - ID ) ) ) / ) - - ( - ID ) } [ ] int ) { ] func ID ( ) { }",
  "func ID ( ID : [ 123 * - ( ( ID ( ( - ID ) ) ) / ) - - ( - ID ) } [ ] int ) { ] func } ( ) { ID",
  "func ID ( ) { return - ID [ - - * ID ( ) and 123 false ] [ ID ] } func ID ( ) { }",
  "func ID ( ) { return - ID [ } - * ID ( ) and 123 false ] [ ID ] - func ID ( ) { }",
  "func ID ( ) { return - ID [ } - * ID ( ) and ) false ] [ ID ] - func ID ( 123 { }",
  "func ID ( ) { var } : [ - ( ID ( ) [ ( ID ) ] ) ] int ID func ID ( ) { }",
  "func ID ( ) { var } : [ - ( ID ( ) [ ( ID ) ] ) ] int ID func ID ( ) { }",
  "func ID ( ) [ var } : { - ( ID ( ) [ ( ID ) ] ) ] int ID func ID ( ) { }",
  "func ID ( ID : int , ID : [ true / - ID ( - int [ - ( ID ) ] [ - ID ] ) ] int , ID : ID ) { }",
  "func ID ( ID : int , ID : [ true / - ID ( - int [ - ( ID ) ] [ { ID ] ) ] int , ID : ID ) - }",
  "func ID ( ID : int , ID : [ true / - ID ( - int [ - ( ID ) ] [ { ID ] ) ] int , ID : ID ) - }",
  "func ID ( ) : bool { return } func ( ID ) : [ ] bool { ID = ID ( ) }",
  "func ID ( ) ( bool { return } func ( ID ) : [ ] bool { ID = ID : ) }",
  "func ID ( ) ( bool { return } ) ( ID func : [ ] bool { ID = ID : ) }",
  "func ID ( / : bool ) : [ ( ( ID ( ) * ID [ - ( ( - ( ( ( - - ID ) ) ) ) ) ] ID ID ) ) ] [ ] int { }",
  "func ID ( / : bool ) : [ ( ( ID ( ) * ID [ - ( ( - ( ( ( - - ID ) ) ) ) ) ] ID ID ) ) ] [ } int { ]",
  "func ID ( / : bool ) : [ ( ( ID ( ) * ID [ - ( ( - ( ( ( - - ID ) { ) ) ) ] ID ID ) ) ] [ } int ) ]",
  "func ID ( ) : int { var ID : int var ID [ [ ID [ ( false ) ] ] [ ] : ] int }",
  "func ID ( ) : int { var ID : int var ID [ [ [ ID ( false ) ] ] [ ] : ] int }",
  "func ID ( ID : bool ) : bool { var ID : int ID var : [ - - ID ( ) [ 123 ] ] int }",
  "func ID ( ID : bool ) : bool { var ID : int ID var : [ - - ID ( ) [ 123 ] ] int }",
  "func ID ( ID : bool ) : bool { var ID 123 int ID var : [ - - ID ( ) [ : ] ] int }",
  "func ID ( ID : [ ] int ( ID : bool ) : bool { var ID : int var ID : bool while true / ( ( - ( , ID ) ) ) ) { } }",
  "ID ID ( ID : [ ] int ( func : bool ) : bool { var ID : int var ID : bool while true / ( ( - ( , ID ) ) ) ) { } }",
  "ID ID ( ID : [ ] int ( func ( bool ) : bool { var ID : int var ID : bool while true / ( ( - : , ID ) ) ) ) { } }",
  "func ID ( { { return } func ID ( ) ) var ID : int ID ( ( false ) ) = 123 }",
  "func ID ( ) { return } func ID ( ) ) var ID : int ID ( ( false { ) = 123 }",
  "func int ( ) { return } func ID ( ) ) var ID : ID ID ( ( false { ) = 123 }",
  "func ID ( ID : bool ) : bool int var ID : int var ID : { }",
  ": ID ( ID func bool ) : bool int var ID : int var ID : { }",
  ": ID ( ID func bool ) : ID int var ID : int var bool : { }",
  "} ID ( ) : bool { var ID : bool func",
  "} ID ( ) : bool { var ID : bool func",
  "{ ID ( ) : bool } var ID : bool func",
  "func ID ( ID : [ ] ] , ID : [ ] bool , ID : int ) { var ID : [ ] [ int [ ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ID : [ ] ] , ID : [ ] bool , ID : int ) { var ID : [ ] [ int [ ] [ ] [ ] int } func ID } ) { (",
  "func ID ( ID : [ ] ] , ID : [ ] bool , { : int ) { var ID : [ ] [ int [ ] [ ] [ ] int } func ID } ) ID (",
  "func ID ( ID : int , ID : [ false / - ID ( ) [ - true + ( true ) ] [ true ] * ID ] bool , ID : [ ] { ) bool } func ID ( ) { }",
  "func ( ( ID : int , ID : [ false / - ID ( ) [ - true + ( true ) ] [ true ] * ID ] bool , ID : [ ] { ) bool } func ID ID ) { }",
  "func ( ( ID : int , ID : [ false / - bool ( ) [ - true + ( true ) ] [ true ] * ID ] bool , ID : [ ] { ) ID } func ID ID ) { }",
  "func ID ( ) : int { true - ( ( - ( while ) ) ) { } } func ID ( ) { }",
  "func ID ( while : int { true - ( ( - ( ) ) ) ) { } } func ID ( ) { }",
  "func ID ( while : int { true - ( ( - ( ) ) ) ) { } } func ID ( ) { }",
  "func ( ( ID : int ) { var ID : int ID [ ID ID ) [ ID ] ] = ID }",
  "( ( func ID : int ) { var ID : int ID [ ID ID ) [ ID ] ] = ID }",
  "( ( func ID : int ) } var ID : int ID [ ID ID ) [ ID ] ] = ID {",
  "func ID ( ) { var ID : int var ID : int print true + ID [ ( ID ) ] [ - } ] 123",
  "func ID ( ) print var ID : int var ID : int { true + ID [ ( ID ) ] [ - } ] 123",
  "func ID ( ) print + ID : int var ID : int { true var ID [ ( ID ) ] [ - } ] 123",
  "func ID ( ID : bool , ID : int ] ID : bool ) { { print ID [ - ID , print ID } } func ID ( ) { }",
  "func ID ( , : bool , ID : int ] ID : bool ) { { print ID [ - ID ID print ID } } func ID ( ) { }",
  "func ID ( , : bool , ID : int ] ID - bool ) { { print ID [ : ID ID print ID } } func ID ( ) { }",
  "func ID ( ID ( bool ) : [ ] [ false * ( - 123 or ( ( ID ) ) ) * - 123 ] bool { } func ID : ) { }",
  "func ID ( ID ( bool ) : [ ] [ false * ( - 123 or ( ( ID ) ) ) * - 123 ] bool { } { ID : ) func }",
  "func ID ( ID ( bool ) : [ ] ( false * ( - 123 or ( [ ID ) ) ) * - 123 ] bool { } { ID : ) func }",
  "func ID ( ID : int , ID : int , ID : bool ) : return } func ID ( ) { var ID { int var ID : int { } }",
  "func ) ( ID : int , ID : int , ID : bool ID : return } func ID ( ) { var ID { int var ID : int { } }",
  "func ) ( ID } int , ID : int , ID : bool ID : return } func ID ( ) { var ID { int var ID : int { } :",
  "func ID ( ) : bool { var ID : int print - - ( true and ( - 123 ) true and ) ID = true }",
  "func ID ( ) : bool { var ID - int print - : ( true and ( - 123 ) true and ) ID = true }",
  "func ID ( ID : [ - - 123 / ( + 123 - ( ( - true ID ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID ( [ - - 123 / : + 123 - ( ( - true ID ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID ( [ - - 123 ID : + 123 - ( ( - true ID ) ) ) ] int ) { } func / ( ) { }",
  ") ID ( ) : int { var ID : [ ID ( ( true / - ID / - false func ) ] [ ] bool var ID : int } func ID ( ) { }",
  ") ID ( ) : int { var ID : [ ID ( ( true / - ID / - false func ) ] [ ] bool var ID : int } func ID ( ) { }",
  ") ID ( ) : int { var ID : [ ID ( ( true / - ID / - false func ) ] [ int bool var ID : ] } func ID ( ) { }",
  "func ID ( ) { var ID : int var - : int while ID ( - true - - 123 ) { } while 123 { } }",
  "func ID ( ) { var ID : int : - var int while ID ( - true - - 123 ) { } while 123 { } }",
  "func ID ( ) { var ID int : : - var int while ID ( - true - - 123 ) { } while 123 { } }",
  "func ID ( ) { call ID ( false ID [ ( false / true - ) - - - - ( ( - ID ) ) ) ] = 123 }",
  "func ID ( ) { call ID ( false ID [ ( false / true - ) - - - - ) ( - ID ( ) ) ] = 123 }",
  "( ID ( ) { call ID func false ID [ ( false / true - ) - - - - ) ( - ID ( ) ) ] = 123 }",
  "func ID ( ID : ( false / ( ( - ID ( ( 123 ) ) ) ) / ( ( false ) ) ] [ ] bool ) { } func ID [ ) { }",
  "func ID ( ID : ( false / ( ( - ID ( ( 123 ) ) ) ) / ( ( false } ) ] [ ] bool ) { } func ID [ ) { )",
  "func ID ( ID : ( false / ( ( - ID ( ( ] ) ) ) ) / ( ( false } ) 123 [ ] bool ) { } func ID [ ) { )",
  "func ID ( ) : bool { { } print true / - - - ( ID [ } ID ] [ ( - ID ) ] ) / ID } func ID ( ) { -",
  "func ID ( ) : bool { { } print true / - - - ( ID [ } ID ] [ ( - ID / ] ) ) ID } func ID ( ) { -",
  "func ID ( ) : bool { { } print true / - - - ( ID [ } ID ] func ( - ID / ] ) ) ID } [ ID ( ) { -",
  ", ID ( ID : int func ID : bool , ID : bool ) : bool { call ID ( ) call ID ( - ID ) }",
  ", ID ( ID : int func ID : bool , ID : bool ) ) bool { call ID ( ) call ID ( - ID : }",
  ", ID ( { : int func ID : bool , ID : bool ) ) bool ID call ID ( ) call ID ( - ID : }",
  "func ID ( ) ( while ID { ( - ID + ID ) ) { } } func ID ( ) { }",
  "func } ( ) ( while ID { ( - ID + ID ) ) { } } func ID ( ) { ID",
  "func } { ) ( while ID { ( - ID + ID ) ) ( } } func ID ( ) { ID",
  "func ID ( ) { var ID : ) var ID : int ID [ ID ( 123 + 123 ) ] = 123 } func ID ( int { }",
  "func ID ( ) { var ID : ) var ) : int ID [ ID ( 123 + 123 ID ] = 123 } func ID ( int { }",
  "func ID ( ) [ var ID : ) var ) : int ID { ID ( 123 + 123 ID ] = 123 } func ID ( int { }",
  "func ID ( ) : bool { print true or ( false >= - - ID ) ID = - - ( } ) 123 func ID ( ) { }",
  "func ID ( ) : bool func print true or ( false >= - - ID ) ID = - - ( } ) 123 { ID ( ) { }",
  "func ID ( ) : bool func print true or ( ( >= - - ID ) ID = - - ( } ) 123 { ID false ) { }",
  "func ID ( ) { return - ( ID ID ( 123 / - - 123 / ( - - ) ) - ID ) }",
  "func ID ( ) { return - ) ID ID ( 123 / - - 123 / ( - - ) ( - ID ) }",
  "func ID ( ) { return - ) ID ID ( 123 / - - 123 / ( - - ) ( - ID ) }",
  "func ID ( ID : int , { : [ true / - false - ( false * ( - ( ID ) ) ) + ID ] int ) ID }",
  "func ID ( ID : int , { : [ true / ) false - ( false * ( - ( ID ) ) - + ID ] int ) ID }",
  "func ID ( ID : int , false : [ true / ) false - ( { * ( - ( ID ) ) - + ID ] int ) ID }",
  "func ID ( ) : int , ID : [ ] int , ID : bool ID : bool { print ID [ true ] if ( ( 123 ) ) { } } func ID ( ) { }",
  "func ID ( ) : int , ID : [ ] int , ID : bool ID ID bool { print : [ true ] if ( ( 123 ) ) { } } func ID ( ) { }",
  "func ID ( ) : int ( ID : [ ] int , ID : bool ID ID bool { print : [ true ] if , ( 123 ) ) { } } func ID ( ) { }",
  "func ID ( ) { while - - true } ID [ ( ID ) ] [ - ID ] / - ID { } { * } func ID ( ) { }",
  "func ID ( ) { while - - true } ID [ ( ID ) ] [ - ID ] / - } { ID { * } func ID ( ) { }",
  "func ID ( ) { while - - true } ID [ ( ID ) ] [ - ID ] / - } { { { * } func ID ( ) ID }",
  "func ID ( ID : var ] [ ] bool ) { [ ID : int return }",
  "func ID ( ID : var ] [ ] bool ) { [ ID : int return }",
  "func ID ( ID : var } [ ] bool ) { [ ID : int return ]",
  "func ID ( ) { print - ( - false + ( true false ( - ( true ) ) ) + ( - - / ) ) while 123 { } } func ID ( ) { }",
  "func ID ( ) { print - ( - false + ( true false ( - ( true ) ) ) + ( - - / ) ) while 123 { } } func ID ( ) { }",
  "func ID ( ) { print - ( - false + ( true false ( - ( true ) ) ) + ( - - / ) ) while 123 { } } ID func ( ) { }",
  "func ID ( ID - bool ) : bool { return - : - ( ( ( ID ) ) ) }",
  "func ID ( ID - bool ) : : { return - bool - ( ( ( ID ) ) ) }",
  "func ID ( ID - bool ) : ( { return - bool - : ( ( ID ) ) ) }",
  ") ID ( ) { } func ID ( ) : [ ] int { var ID : [ ] bool call ID ( func }",
  ") ID ( ) { { func ID ( ) : [ ] int } var ID : [ ] bool call ID ( func }",
  ") var ( ) { { func ID ( ) : [ ] int } ID ID : [ ] bool call ID ( func }",
  "func ID ID ID : bool ) { var ID : [ ] bool var ( : bool return 123 / false / 123 } func ID ( ) { }",
  "func ID ID ID } bool ) { var ID : [ ] bool var ( : bool return 123 / false / 123 : func ID ( ) { }",
  "var ID ID ID } bool ) { var ID : [ ] bool func ( : bool return 123 / false / 123 : func ID ( ) { }",
  "func ID ( ) int : { var ID : int return }",
  "func ID ( ) int : { var ID : int return }",
  "func ID ( } int : { var ID : int return )",
  "func ID ( ID : bool ) { var ID : bool / ID ( ) return true call - ( 123 ) } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : bool / ID ( ) return ) call - ( 123 ) } func ID ( true { }",
  "func ID ( ID : bool { ) var ID : bool / ID ( ) return ) call - ( 123 ) } func ID ( true { }",
  "func ID { ID : [ 123 * - 123 * ( false * 123 * ID [ - 123 ] [ ( ( - ID ) ) ] ) ] [ ] int ) ( } func ID ( ) { }",
  "func ID { ID ( [ 123 * - 123 * : false * 123 * ID [ - 123 ] [ ( ( - ID ) ) ] ) ] [ ] int ) ( } func ID ( ) { }",
  "func ID { ID ID [ 123 * - 123 * : false * 123 * ( [ - 123 ] [ ( ( - ID ) ) ] ) ] [ ] int ) ( } func ID ( ) { }",
  "func ID ( ID : ID ) : [ ] [ ( - ( true != ( int ) ) ) ] [ ] int { }",
  "func ID ( ID : ] ) : [ ID [ ( - ( true != ( int ) ) ) ] [ ] int { }",
  "func ID ( ID : ] [ : [ ID [ ( - ( true != ( int ) ) ) ] ) ] int { }",
  "func ID ( ) : [ ( ( - true ) ID [ ( 123 ) ] ) + ] bool { }",
  "func ID ( ) : [ ( ( - true ) ID [ ( 123 ) ] ) + ] bool { }",
  "func ID ) ( : [ ( ( - true ) ID [ ( 123 ) ] ) + ] bool { }",
  "func ( ( ) { var ID : bool ID = ID ( ) [ ( - false ) ] [ - ID ] call ID ID ) } func ID ( ) { }",
  "func ( ( ) { var ID : bool ID = ID func ) [ ( - false ) ] [ - ID ] call ID ID ) } ( ID ( ) { }",
  "func ( ( ) ) var ID : bool ID = ID func ) [ ( - false ) ] [ - ID ] call ID ID ) } ( ID ( { { }",
  "func ID ( ID : bool ID ID : int , , : [ ID ( ID ( false ) ) ] int ) { }",
  "func ID ( ID : bool ID ID : int , , : [ ID ( ID ( false ) ) ] int ) { }",
  "func ID ( ID : bool ID ( : int , , : [ ID ( ID ID false ) ) ] int ) { }",
  "func ID ( ID : [ false and - - ID [ false - - true + - ( ( true ) - ] and ) ID ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ false and - - ID ( false - - true + - ( ( true ) - ] and ) ID ] int ) { } func ID [ ) { }",
  "func ID ( ID : [ false and - - ID ( false - - true + - ( ( true ) - ] and ) ID ] int ) { } func ID [ ) { }",
  "func ID ( ID : [ false + ID [ ID ( ID ) ) ) ] + true ] int ( { }",
  "func ID ( ID : [ false ( ID [ ID + ID ) ) ) ] + true ] int ( { }",
  "func ID ( ID ( [ false ( ID [ ID + ID ) ) ) ] + true ] int : { }",
  "func ID ( { : [ ] int , ID : bool ) ID return - ID [ true * ID ] [ ( ID ) ] }",
  "func ID ( { : [ ] int , ID : bool ) ID return - ID [ true * ID ] [ ( } ) ] ID",
  "func ID ( { : [ ] int , ID : bool ) ID return - ID [ true * ID ] [ ( } ) ] ID",
  "func ID ( ) : int { var ID : bool - false * true * false return ( ID ) + ( false ) } func ID ( ) { }",
  "func ID ( ) : int { var ID : bool - false * true * false return ( ID ) ) ( false ) } func ID ( + { }",
  "func ID ( ) : ( { var ID : bool - false * true * false return ( ID ) ) int false ) } func ID ( + { }",
  "func ID ( ) : bool { var ID : int var ID : ) if - ( ID ( - - - ( ( ( true int ) ) ) ) { } }",
  "func ID ( ) : bool { var ID : - var ID : ) if - ( ID ( - - int ( ( ( true int ) ) ) ) { } }",
  "func ID ( ) : bool { var ID : - var ID : ) if - ( ID ( - { int ( ( ( true int ) ) ) ) - } }",
  "func ID ( ID : int , ID : int , ID : int ) : bool { var ID : int ID var : bool }",
  "func ID ( ID : int , : : int , ID : int ) : bool { var ID ID int ID var : bool }",
  "func ID ( ID : int , : : int var ID : int ) : bool { , ID ID int ID var : bool }",
  "func ID ( ) : [ ] bool { var ID : int var ] : int return ID / - ID [ ID ID / ID }",
  "func ID ( ) : [ ] bool var var ID : int { ] : int return ID / - ID [ ID ID / ID }",
  "func ID ( ID : [ ] [ 123 { ID ( - ID [ ( - ID ) ] [ true ] ) / true ] int ) * }",
  "func ID ( ID - [ ] [ 123 { ID ( - ID [ ( : ID ) ] [ true ] ) / true ] int ) * }",
  "func ID ( ID [ [ ] [ 123 { ID ( - ID - ( : ID ) ] [ true ] ) / true ] int ) * }",
  "func ID ( ) { if ID [ ( ( ( - true ) ) ) } { ] } func ID ( ) { }",
  "func ID ( ) { if ID [ ( ( ( - true ) ) ) } { ] } ) ID ( func { }",
  "func ID ( ) { if ID [ ( ( ( - true ) ) ) } { ] } ( ID ) func { }",
  "func ID ( ) { var ID : bool var ID : ] call ID ( ( ID [ - ID ] [ true bool ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : ] call ID ( ( ID [ - bool ] [ true ID ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : : var ID bool ] call ID ( ( ID [ - bool ] [ true ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID ) bool var ID : [ ] [ - ( ID : ] int }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID ) bool var ID } [ ] [ - ( ID : ] int :",
  "func ID ( ) : [ ID * true - ID + 123 or - { - ID ] int - } func ID ( ) { }",
  "func ID ( ) : [ ID * true - ID + 123 or - { - ID - int ] } func ID ( ) { }",
  "func ID ( ) : [ ID * - - ID + 123 or - { - ID true int ] } func ID ( ) { }",
  "func ID ( ID : [ ID ( false or - - - ID or ( 123 ) ) } int ) { } func ID ( ) { ]",
  "func ID ( ID or [ ID ( false : - - - ID or ( 123 ) ) } int ) { } func ID ( ) { ]",
  "func ID ( ID or [ : ( false ID - - - ID or ( 123 ) ) } int ) { } func ID ( ) { ]",
  "func call ( ID : bool ) { ID ID ( ) }",
  "func call ( ID ( bool ) { ID ID : ) }",
  "func ) ( ID ( bool call { ID ID : ) }",
  "func ID ( ) { var ID : int var ID : bool while false / false * false - ( * false / 123 - true ) { } }",
  "func ID ( ) { var ID : int var ID : bool while false ( false * false - / * false / 123 - true ) { } }",
  "func ID ( ) { } ID : int var ID : bool while false ( false * false - / * false / 123 - true ) { var }",
  "var ID ( ) : bool { func ID : [ ] [ ] [ ] [ ] [ 123 - - ( true ) ] [ ] int } func ID ( ) { }",
  "var ID ( ) : bool { func ID : [ ( [ ] [ ] [ ] [ 123 - - ( true ) ] [ ] int } func ID ] ) { }",
  "var ID ( ) : bool { func ID 123 [ ( [ ] [ ] [ ] [ : - - ( true ) ] [ ] int } func ID ] ) { }",
  "func ID ( ) func var ID : int return } { ID ( ID : bool ) : int { var ID : int while ID { } }",
  "func ID ( ) func var ID : int return } { ID ( ID : bool ) : int { var ID : int while ID { } }",
  "func ID ( ) func var ID : int return } { ID { ID : bool ) : int ( var ID : int while ID { } }",
  "func ID ( ID : int , ID : [ - ( false / ID ( ) [ ID ] [ - false ] * ( - ( ID ) ) int ] int , ID : ) ) { }",
  "func ID ( ID : int , ID : [ - ( false / ID ( ) [ ID ] [ - false ] * ( - ( ID ) ) int ] int , ID : ) ) { }",
  "func ID ( ID : int , ID : [ - ( false [ ID ( ) [ ID ] / - false ] * ( - ( ID ) ) int ] int , ID : ) ) { }",
  "func ID ( ID : int ) : bool { call ID ( } / ( false * ID / - ID ) ) ID",
  "call ID ( ID : int ) : bool { func ID ( } / ( false * ID / - ID ) ) ID",
  "call ID ( ID : int ) ID bool { func ID ( } / ( false * : / - ID ) ) ID",
  "func ID ( ) : } true * ( ( false * ( ( ID ) ) ) ) ] int { [",
  "func ID ( ) : } true [ ( ( false * ( ( ID ) ) ) ) ] int { *",
  "( ID ( ) : } true [ func ( false * ( ( ID ) ) ) ) ] int { *",
  ": ID ( ) : bool { var ID : bool { var ID : int var ID func bool call ID ( ) { var ID : bool var ID : [ ] bool } } }",
  ": ID ( ) : bool { var ID : bool { var [ : int var ID func bool call ID ( ) { var ID : bool var ID : ID ] bool } } }",
  ": ID : ) : bool { var ID : bool { var [ : int var ID func bool call ID ( ) { var ID : bool var ID ( ID ] bool } } }",
  "func ID ( ID : int ) : [ ] bool { while ( ID / ( ID } ) { ) }",
  "func ID ( ID ID int ) : [ ] bool { while ( : / ( ID } ) { ) }",
  "func ID ( ID / int ) : [ ] bool { while ( : ID ( ID } ) { ) }",
  "func ID ( ) : 123 { var ID : [ ID ( true / bool or ID ) ] [ ] bool }",
  "func ID ( ) { var ID : int call ID ( ) ) ID [ - ( - ID ) ] } func ID ( print { }",
  "func ID ( ) { var ID : int call ID ( - ) ID [ ) ( - ID ) ] } func ID ( print { }",
  "func ID ( ) ID var ID : int call ID ( - ) ID [ ) ( - ID ) ] } func { ( print { }",
  "func ID ( ID : bool , ID : + ] [ - false - true [ ( - ( ID ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : bool , } : + ] [ - false - true [ ( - ( ID ) ) ] int ) { } func ID ( ) { ID",
  "func ID ( ID : bool , } : + - [ ] false - true [ ( - ( ID ) ) ] int ) { } func ID ( ) { ID",
  "func ID ( ) { var ID : bool } func ID ( ) { var ID : bool { var return : bool ID } print ID }",
  "func ID ( ) { var ID : bool print false / ( ID ( ) [ - ( 123 ) ] ) / ( - ( ( ) ( ( false ) ) ) ) ( ) }",
  "func ID false ) { var ID : bool print ( / ( ID ( ) [ - ( 123 ) ] ) / ( - ( ( ) ( ( false ) ) ) ) ( ) }",
  "func ID false bool { var ID : ) print ( / ( ID ( ) [ - ( 123 ) ] ) / ( - ( ( ) ( ( false ) ) ) ) ( ) }",
  "func ID ) ID : bool ) { call ID ( ) while false >= ( ( ( false ) ) ( { } }",
  "func ID ) { : bool ) ID call ID ( ) while false >= ( ( ( false ) ) ( { } }",
  "func ID ) { : bool ) ID call ID ( ) while false >= ( ( ( false ) ) ( { } }",
  "func ID ( ) { var ID ] bool var ID : int { var ID : [ ] bool } { var ID : bool var ID : [ ] [ : int } }",
  "func ID ( ) { var { ] bool var ID : int ID var ID : [ ] bool } { var ID : bool var ID : [ ] [ : int } }",
  "func ID ( ) { var { ] bool var ID : int ID var ID : [ ] bool } { var ID bool : var ID : [ ] [ : int } }",
  "{ ID ( ) : int { var ID : int { var ID : [ ] bool } print ID ( ) [ ID ] } func ID ( ) func }",
  "{ ID ( ) : int { ) ID : int { var ID : [ ] bool } print ID ( var [ ID ] } func ID ( ) func }",
  "{ ID ( ) : int { ) ID : int { var ID : [ ] print } bool ID ( var [ ID ] } func ID ( ) func }",
  "func ID ( ID : [ ] int , ID : [ ] int , ID : int ) { var ID : [ - ID ] } var ID : bool } func ID ( ) { bool",
  "func ID ( ID : [ ] int , ID : [ ] int , ID : int ) { var ID : [ - ID ] } var ID : bool } func ID ( ) { bool",
  "func ID ( ID ID [ ] int , : : [ ] int , ID : int ) { var ID : [ - ID ] } var ID : bool } func ID ( ) { bool",
  "func ID ( ) { var ID : bool ID ( ( ID + ( 123 ) + ID ) ) = ( ID ) func } ID ( ) { }",
  "func ID ( ) { var ID : bool ID ( ( ID + ( 123 ) + ID ) ) = ( ID ) func ) ID ( } { }",
  "func ID ( ) { var ID : bool ID ( ( ID + ( 123 ) + ID ) ) = ( ID ) func ) ID ( } { }",
  "func ID ( ID : bool ) { var ID : [ ] } var ID : bool while ( - 123 ) { bool } func ID ( ) { }",
  "func ID ( ID : bool ) { var ID : [ ] } var ID ( bool while ( - 123 ) { bool } func ID : ) { }",
  "func ID ( ID : bool ) { var ID : [ ] while var ID ( bool } ( - 123 ) { bool } func ID : ) { }",
  "func ID ( ID : bool ) { } func ID ( ) : bool { var ID : int var ID : ID { var ID : int var bool : [ ] bool } }",
  "func ID ( ID : bool ) { } func ID ( ) : bool { var ID int int var ID : ID { var ID : : var bool : [ ] bool } }",
  "func ID ( ID : bool ) { } func ID ( ) : bool { var ID int int var ID : ID { var ID : : var bool : [ ] bool } }",
  "func ID ( ID : [ ] { , ID : [ ID [ - - - 123 * ID ] ] int ) bool }",
  "func ID ( ID : [ { ] , ID : [ ID [ - - - 123 * ID ] ] int ) bool }",
  "func ID ( ID : [ { ] , ID : [ ID [ ) - - 123 * ID ] ] int - bool }",
  "func ID ( ID : int , ID : bool ) { var ID : [ - true [ true / ( ( - ID ) ) ] [ ID ] ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : ) - true [ true / ( ( - ID ) [ ] [ ID ] ] int var ID : int } func ID ( ) { }",
  "func ID ( ID : int : ID : bool ) { var ID : ) - true [ true / ( ( - ID ) [ ] [ ID ] ] int var ID , int } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ ( false / ID - - ( ( - ID ) ) ) / - - ( ) ] bool }",
  "func ID ( ) { var ID : int var ID : [ ( false / ID - - ( ( - ID ) } ) / - - ( ) ] bool )",
  "func ID ( ) { : ID var int var ID : [ ( false / ID - - ( ( - ID ) } ) / - - ( ) ] bool )",
  "func bool ( ID : int ) { var ID : [ - ( - - 123 * ( ID ) / ID ) ] int var ID : ID } func ID ( ) { }",
  "func bool ( ID : int ) { var ID : [ - ( - - 123 * ( ID ) / ID ) ] int var ID } ID } func ID ( ) { :",
  "func bool ( ID : int ) { var ID : [ - ( - - 123 * ( ID int / ID ) ] ) var ID } ID } func ID ( ) { :",
  "func int ( ID : [ ] ID ) : int { call ID ( ) print ( ID [ - true ] [ - - ID ] ) }",
  "func int ( ID : [ ] call ) : int { ID ID ( ) print ( ID [ - true ] [ - - ID ] ) }",
  "func int ( ID : [ ] call ) : int ID { ID ( ) print ( ID [ - true ] [ - - ID ] ) }",
  "func ID ( ) { var ID : [ ] [ ] [ - ID [ } ( ) ] ] int var ID : [ ] int ID",
  "func ID ( ) { ID ID : [ ] [ ] [ - var [ } ( ) ] ] int var ID : [ ] int ID",
  "func ID ( ) { var ID : bool } ID ID ( ) { var func : bool }",
  "func ID ( ( { var ID : bool } ID ID ) ) { var func : bool }",
  "func ID ( ( { var ID : bool } } ID ) ) { var func : bool ID",
  "func ID ( ID : [ ID ( false * false / ) ( 123 ) ) ] [ ] bool { }",
  "func ID ( ID : [ * ( false ID false / ) ( 123 ) ) ] [ ] bool { }",
  "func ID ( ID : [ * ( false ) false / ID ( 123 ) ) ] [ ] bool { }",
  "func ID ( ) : ID { var ID : int var int : bool call ID ( ) }",
  "int ID ( ) : ID { var ID : func var int : bool call ID ( ) }",
  "int ID ( ) : ID { var ID : func var int : bool call ID ( ) }",
  "func ID ( ) : ) { var ID : bool var ID : int } func ID ( ID : int , ID : bool int { call ID ( ) }",
  "func ID ( ) : ) { var ID : bool var ID : int } func ID ( ID int int , ID : bool : { call ID ( ) }",
  "func ID ( ) : ) { var ( : bool var ID : int } func ID ( ID int int , ID : bool : { call ID ID ) }",
  "} ID ( ID : bool , ID : bool , ID : int ) : bool { { while ID [ 123 ] [ ( false ) ] { } } if ( ID ) { } } func ID ( ) { func",
  "} ID ( ID : bool , ID : bool , ID : int ) : bool ) { while ID [ 123 ] [ ( false { ] { } } if ( ID ) { } } func ID ( ) { func",
  "} ID ( ID : bool , ID : bool , ID : int ) : bool ) { while ID [ 123 ( [ ] false { ] { } } if ( ID ) { } } func ID ( ) { func",
  "func ID ( ID : [ ] ID , ID : bool , bool : [ ] [ ] bool ) : int { var ID : [ ] int var ID : bool }",
  "func ID ( ID : [ ] ID bool ID : bool , bool : [ ] [ ] , ) : int { var ID : [ ] int var ID : bool }",
  "func , ( ID : [ ] ID bool ID : bool , bool : [ ] [ ] ID ) : int { var ID : [ ] int var ID : bool }",
  "func ID ID ) : int { var ( : bool ID ( ID < - - ID ( ) ) = ID call ID ( ) } func ID ( ) { }",
  "func ID ID ) : ID { var ( : bool ID ( ID < - - ID ( ) ) = ID call ID ( ) } func int ( ) { }",
  "func ID ID ) : ( { var ( : bool ID ( ID < - - ID ( ) ) = ID call ID ID ) } func int ( ) { }",
  "func } ( ) : bool { var ID : bool { var ID : int while true + true / 123 * ( ( ID ) ) { } } ID = ID ID",
  "func } ( ) : / { var ID : bool { var ID : int while true + true bool 123 * ( ( ID ) ) { } } ID = ID ID",
  "func } ( ) : / { var ID : bool { var ID : int while true + true bool 123 * ( ( { ) ) ID } } ID = ID ID",
  "func ID ( ID : int , ID : int ) : bool { ID = false / } ID ( ) [ true ] } func ID ( ) { -",
  "func ID ( ID : int , ID : ( ) : bool { ID = false / } ID int ) [ true ] } func ID ( ) { -",
  "func ID ( ID : : , ID : ( ) int bool { ID = false / } ID int ) [ true ] } func ID ( ) { -",
  "return ID ( ) { func ID ( ) [ ( true / ( ( 123 ) ) ) ] }",
  "return ID ( ) { ( ID func ) [ ( true / ( ( 123 ) ) ) ] }",
  "return ID ( ) { ) ID func ( [ ( true / ( ( 123 ) ) ) ] }",
  "func ID ( return : bool , ID : [ ] int ) : int { ID ( ID * ( - ( - ( - - true ) ) ) ) }",
  "func ID ) return : bool , ID : [ ] int ) : int { ID ( ID * ( - ( - ( - - true ) ( ) ) }",
  "func ID ) return : bool , ID : [ ] int ) : ID { ID ( int * ( - ( - ( - - true ) ( ) ) }",
  "func ID ( ) { var ID : bool var ID : int { var ID : [ print ( 123 ) ] bool } - 123 } func ID ( ) { }",
  "func func ( ) { var ID : bool var ID : int { var ID : [ print ( 123 ) ] bool } - 123 } ID ID ( ) { }",
  "func func print ) { var ID : bool var ID : int { var ID : [ ( ( 123 ) ] bool } - 123 } ID ID ( ) { }",
  "func ID ( ) { int ID : int } func ID ( ID : int , ID : [ ] int , ID : bool ) : int { var ID : var }",
  "func ID ( ) { int ID : int } func ID ( ID : int , ID ID [ ] int , ID : bool ) : int { var : : var }",
  "ID ID ( ) { int ID : int } func ID ( func : int , ID ID [ ] int , ID : bool ) : int { var : : var }",
  "func ID ( ID : bool ) { : ID var int var ID : int { var ID : int } { var ID : [ ID ] [ ] [ ] int } }",
  "func ID ( int : bool ) { : ID var ID var ID : int { var ID : int } { var ID : [ ID ] [ ] [ ] int } }",
  "func ID ( int : bool var { : ID ) ID var ID : int { var ID : int } { var ID : [ ID ] [ ] [ ] int } }",
  "func ID ( ) : int { var ID : int { : ID var [ ] [ ] bool { if ID { } print ID } ID = ID } }",
  "func ID ( ) : int { var ID : int { : ID var [ ID [ ] bool { if ID { } print ID } ] = ID } }",
  "func ID ( ) : int { var ID : int { : ID ] [ ID [ var bool { if ID { } print ID } ] = ID } }",
  "func ID ( ID : [ - / * - false - true + true * ID ID - ID ] [ ] bool ) { }",
  "func ID ( ID : [ - / * - false - ] + true * ID ID - ID ] [ true bool ) { }",
  "func ID ( ID : [ - / * - false - ] + true * ID ID } ID ] [ true bool ) { -",
  "func ID * ID : [ ] int ) : [ - ( - - 123 ( true * ID ) ] int { }",
  "func ID - ID : [ ] int ) : [ - ( - * 123 ( true * ID ) ] int { }",
  "func ID - ID : [ ] int ) : [ } ( - * 123 ( true * ID ) ] int { -",
  "func ID ( ) : bool { var ID : [ ] [ ( 123 / true / - false ) ] func } int ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] [ ( 123 func true / - false ) ] / } int ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] [ ( 123 func true / - false ) ] / } int ID ( ) { }",
  "bool ID ( ) { var ID : bool var ID : func }",
  "bool ID ( bool { var ID : ) var ID : func }",
  "bool ID ( bool func var ID : ) var ID : { }",
  "func { ( ID : int ) { var ID : [ ] int return 123 > - ( ID ) } func ID ( ) ID }",
  "func { ( ID : int ) { var ID ID [ ] int return 123 > - ( : ) } func ID ( ) ID }",
  "func { ( ID : int ) { var ID ID [ ] int return 123 > - ( : ) } func ID ( ) ID }",
  "func ID ( ID : : , ID int bool ) : int { var ID : bool var ID : [ ID ( ) / - ( ( ( ( ( 123 ) ) ) ) ) * ID ] int }",
  "func ID ( ID : : , ID int bool ) : int { ID ID : bool var ID : [ ID ( ) / - ( ( ( ( ( 123 ) ) ) ) ) * var ] int }",
  "func ID ( ID : : , ID int bool ) : int { ID ID : bool var ID : ] ID ( ) / - ( ( ( ( ( 123 ) ) ) ) ) * var [ int }",
  "func ID ( ID : bool , ID : int , ID : [ ] int bool : bool { var ID : bool var ID : [ ] ) }",
  "func ID ( : : bool , ID : int , ID ID [ ] int bool : bool { var ID : bool var ID : [ ] ) }",
  "func ID ( [ : bool , ID : int , ID ID [ ] int bool : bool { var ID : bool var ID : : ] ) }",
  "func ID ( ) : * { ID [ false bool ( ( ID ) ) ] = ID call ID ( ) }",
  "func ID ( ) : * { ID [ false bool ( ) ID ) ) ] = ID call ID ( ( }",
  "func ID ( ) : * { ID [ false bool ( ) ID ) ) ] = ID call ID ( ( }",
  "func ID ( ID : [ ( - ID ( false - ( ( ) ) ) - ID ) ] bool ) { }",
  "func ID ( ID : [ ( - ID ( false - ( ) ) ) ) - ID ) ] bool ( { }",
  "func ID ( ID : [ ( - ID ( false ) ( ) ) ) ) - ID - ] bool ( { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : bool var ID : int call ID ( ) ( false ) ) } func ID ( - { }",
  "func ID ( ID : int , ID : bool ( : bool { var ID : bool var ID : int call ID ( ) ) false ) ) } func ID ( - { }",
  "func ID ( false : int , ID : bool ( : bool { var ID : bool var ID : int call ID ( ) ) ID ) ) } func ID ( - { }",
  "func ID ( ID : [ [ ] ] bool ) { call ID ( ) return }",
  "func ID ( ID : [ } ] ] bool ) { call ID ( ) return [",
  "func ID bool ID : [ } ] ] ( ) { call ID ( ) return [",
  "func ID ( ID : [ ) != ( ID [ true / ( - ( 123 ) ) / ( ( ( 123 ) true ) ] ) ] bool ) { }",
  "func ID ( ID : [ ) != ( ID ( true / [ - ( 123 ) ) / ( ( ( 123 ) true ) ] ) ] bool ) { }",
  "func ID ( ID : / ) != ( ID ( true / [ - ( 123 ) ) [ ( ( ( 123 ) true ) ] ) ] bool ) { }",
  "true ID ( ID : bool , ID : bool , ID : [ ID ( - - func and ( 123 ) and false ) ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "true ID ( ID : bool , ID : bool , ID : [ ID ( - - func and ( 123 ) and false ) ] func ] [ ] [ ] [ ] [ ] [ ] [ ] int ) { } [ ID ( ) { }",
  "true ID ( ID : bool , ID : bool , ID : [ ID ( - - func and ( 123 ) and false ) ] func ] [ ] [ ] [ ] [ ] [ ] [ ] int ) { } [ ID ( ) { }",
  "func ID ( ID : [ ( 123 - false * ID [ - ( ( - ( ID ) ) ) } [ true ] * ID ) ] int ) { ]",
  "func ID ( ID : [ ( 123 - - * ID [ - ( ( false ( ID ) ) ) } [ true ] * ID ) ] int ) { ]",
  "func ID ( ID : [ ( 123 - - * ID [ - ( ( false ( ID ) ] ) } [ true ] * ID ) ) int ) { ]",
  "func ID ( ID : bool , ID : int , : : int ) : bool { var ID ID int var ID : bool while ID [ ID ] [ ( ID ) ] { } } func ID ( ) { }",
  "func ID ( ID : bool , : : int , : : int ) ID bool { var ID ID int var ID : bool while ID [ ID ] [ ( ID ) ] { } } func ID ( ) { }",
  "func ID ( ID : bool , : : ) , : : int ) ID bool { var ID ID int var ID : bool while ID [ ID ] [ ( ID int ] { } } func ID ( ) { }",
  "func ID ( / : bool { var ID : [ ] bool return - false ) - ( ID ) / ( false ) }",
  "func ID ( / : bool { var ID : [ ] bool return - false ) - ( ID ) / ( false ) }",
  "func ID ( / : bool { var ID : [ ] bool return - false ) false ( ID ) / ( - ) }",
  "func ID ( ) { call ID ( ) while ( - - } - 123 - - - ID ) { } } func ID ( ) { -",
  "func ID ( ) { call func ( ) while ( - - } - 123 - - - ID ) { } } ID ID ( ) { -",
  "func ID ( ) - call func ( ) while ( - - } - 123 - - { ID ) { } } ID ID ( ) { -",
  "func ID ( ) { bool ID : [ ( - 123 * ( - - true ) * ( 123 ) ) ] bool var ID : var }",
  "func ID ( ) { bool ID : [ ( - 123 var ( - - true ) * ( 123 ) ) ] bool * ID : var }",
  "- ID ( ) { bool ID : [ ( - 123 var ( - func true ) * ( 123 ) ) ] bool * ID : var }",
  "func ID ( ID : [ ( ID ( ID [ ] ] [ 123 123 ) ) ] int ) { }",
  "func ID ( ID : [ ( ID ( ID ] [ ] [ 123 123 ) ) ] int ) { }",
  "func ID ( ID : [ ( ID ( ID ] [ ) [ 123 123 ] ) ] int ) { }",
  "func ID ( ) { call ID ( ) while - ( ( ID ( ID ) } ) { ) } func ID ( ) { }",
  "func ID ( ) { call ID ( ) while - ( ( ID ( ID ) } ) ) ) } func ID ( { { }",
  "func ID ( ) { call ID ( ) while - ( ( ID ( ID ) } ) ) ) ( func ID } { { }",
  "func ID ( : ID int ) : int { } func ID ( ) { var ID : int call ID ( true * ( ID ) ) }",
  "func ID ( ( ID int ) : int { } func ID ( ) { var ID : int call ID ( true * : ID ) ) }",
  "func ) ( ( ID int ) : int { } func ID ( ) { var ID : int call ID ( true * : ID ) ID }",
  "func ) ( ID : bool , ID : bool , ID : bool ID { } func ID ( ID : bool , ID : [ ] bool ) { var ID : int }",
  "func ) ( ID : bool bool ID : bool , ID : , ID { } func ID ( ID : bool , ID : [ ] bool ) { var ID : int }",
  "func ) ( ID : bool bool ID : bool , ID : , : { } func ID ( ID ID bool , ID : [ ] bool ) { var ID : int }",
  "func ID ( ID : int , ID : [ ] [ ] [ 123 * - - - - true < ID ] [ ] [ ] bool , ID : bool ) func } { ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ] [ 123 * - - - - true < ID ] ] [ [ ] bool , ID : bool ) func } { ID ( ) { }",
  "func ID ( ID : int , } : [ ] [ ] [ 123 * - - - - true < ID ] ] [ [ ] bool , ID : bool ) func } { ID ( ) { ID",
  "func ID ( ) : bool ( while - { ( false / false + true ) ) { } print ( false ) }",
  "func ID ( ) : bool ( while - { ( false false false + true ) ) { } print ( / ) }",
  "func ID ( ) : bool ( while - { ( false false false + true ) ) { } print ) / ( }",
  "func ID ( ID : - , ID : [ ID [ ( bool - - false / ID * 123 ) ] [ ( - ( ID ) ) ] ] bool , ID : bool ) { }",
  "func ID ( ID : - , ID : [ ID [ ( bool - - false / ID * 123 ) ] [ ( - ( ID ) ) ] ID bool , ] : bool ) { }",
  "func ID ( ID ) - , ID : [ ID [ ( bool - - false / ID * 123 ) ] [ ( - ( ID ) ) ] ID bool , ] : bool : { }",
  "func ID ( ) { var ID : bool while - false / ID ( ) [ ( 123 ) ] { = ID } - - true }",
  "func ID ( ) { var ID : bool while - false / ID ( ] [ ( 123 ) ) { = ID } - - true }",
  "func ID ( ) { var ID : bool while - false / ID ID ] [ ( 123 ) ) { = ( } - - true }",
  "func ID ( ID : [ ID ( ) and 123 / [ true + true / true - ( ID ) ] [ ] - ] bool ) { }",
  "func ID ( ID : [ ID ( ) and 123 / [ true + [ / true - ( ID ) ] true ] - ] bool ) { }",
  "func ID ( ID : [ ID ( ) and 123 / [ true + [ / true - ( ID ) ] true ] - ] bool ) { }",
  ") ID ( ID : [ ( ( ID ( ID ( ) ) ) ) ] int func { } func ID ( ) { }",
  ") ID ( ID : [ ( ( ID ( ID ( ) ) ) ) ] int func { ) func ID ( } { }",
  ") ID ( ID : [ ( ( ID ( ID ( func ) ) ) ] int ) { ) func ID ( } { }",
  "func ID ( ID : [ ] int , ID : bool , ID : bool ) { var ID : bool ID - ( false ) ] [ ID ] = ( ( - false ) ) print [ - false }",
  "func ID ( ID : [ ] int , ID : bool false ID : bool ) { var ID : bool ID - ( false ) ] [ ID ] = ( ( - false ) ) print [ - , }",
  "func ID ( ID : [ ] int , print : bool false ID : bool ) { var ID : bool ID - ( false ) ] [ ID ] = ( ( - false ) ) ID [ - , }",
  "ID func ( ) { print ID ( - ( ( ( - false ) ) ) ) } func ID ( ) { }",
  "ID func ( ) { print ID ( - ( ( ( - false ( ) ) ) } func ID ) ) { }",
  "func return ( ID : bool , ID : bool , ID : [ ] bool ) { var ID : int call ID ( ) ID }",
  "func return ( ID : bool , ID : bool , ID : [ ] bool ) { var ID : int call ID ( ) ID }",
  "func return ( ID : bool , ID : bool , ID call [ ] bool ) { var ID : int : ID ( ) ID }",
  "func ID ( ID : ID , ID : bool ) { var bool : int var ID : int return }",
  "func ID ( : : ID , ID : bool ) { var bool ID int var ID : int return }",
  "func ID ( : : ID , ID : int ) { var bool ID int var ID : bool return }",
  "func ID ( ID : [ ] [ ID int - ID [ 123 / ID ] [ false ] ] ] [ ] [ ] [ ) { }",
  "func ID ( ID [ : ] [ ID int - ID [ 123 / ID ] [ false ] ] ] [ ] [ ] [ ) { }",
  "func ID ( ID [ : ] [ ID int - { [ 123 / ID ] [ false ] ] ] [ ] [ ] [ ) ID }",
  "ID ID ( ID : [ ID * ( ID ( func * true * ID ) ) * 123 ] int ) { } func ID ( ) { }",
  "ID ID ( ID : [ ID * ( ID ( func * true * ID ) ) * 123 ] int ) { } func ID ( ) { }",
  "ID ID ( ID : [ ID * ( ID ( func * true * ID ) ) * 123 ] int ) { } func ID ( ) { }",
  "func ID ( ) { var - : bool var ID : bool print ( - ID ( ( ( ( ( true ) ) ) ) ) ) }",
  "func ID ( ) { var - : bool var ID : bool print ( - ID ( ( ) ( ( true ( ) ) ) ) ) }",
  "func ID ( ( { var - : bool var ID : bool print ( - ID ( ( ) ( ( true ) ) ) ) ) ) }",
  "func ID ( ID : [ { int ) { var ID : int var ID : bool while ( - - true ) ] } ID = ID } func ID ( ) { }",
  "func ID ( ID : [ { int ) { var ID : { var ID : bool while ( - - true ) ] } ID = ID } func ID ( ) int }",
  "func ID ( ID : [ { int ) { var ID : { var ] : bool while ( - - true ) ID } ID = ID } func ID ( ) int }",
  "func ] ( ID : [ ] [ ID int , ID : bool , ID : [ ] [ ] [ ] int ) { }",
  "func ] ( ID : int ] [ ID [ , ID : bool , ID : [ ] [ ] [ ] int ) { }",
  "func ] ( ID : int ] [ ID ] , ID : bool , ID : [ ] [ [ [ ] int ) { }",
  "func ID ( ) : bool { var ID : bool var ID : bool while - - ) ( - - true - { } }",
  "func ID ( ) : ) { var ID : bool var ID : bool while - - bool ( - - true - { } }",
  "func ID ( ) : ) { var ID : bool var ID : } while - - bool ( - - true - { bool }",
  "func ID ( ) : bool { while ( ) true ) * false / ( - true ) { } { } } func ID ( - { }",
  "func ID ( ) ID bool { while ( ) true ) * false / ( - true ) { } { } } func : ( - { }",
  "func ID ( ) ID bool { while ( ) true ) * false / ( - true ) { } { } } func : ( } { -",
  "func ID ( ID : [ ID ( ( true / - - ( ID ) / int - false ) ) ) ] [ ] ( ) { }",
  "func ID ( ID : [ ID ( ( true / - - ( ID ) / int - false ) ) ) ] [ ] ( ) { }",
  "func ID ( ID : - ID ( ( true / - - ( ID ) / int [ false ) ) ) ] [ ] ( ) { }",
  "func ID ( : { call ID ( ) } func ID ( ID : int , ID : bool , ID : bool ) : bool { var ID ) [ ] bool }",
  "func ID ( : { call ID ( ) } func ID ( ID : bool , ID : int , ID : bool ) : bool { var ID ) [ ] bool }",
  "func ID ( : { call ID ( ) , func ID ( ID : bool } ID : int , ID : bool ) : bool { var ID ) [ ] bool }",
  "func [ ( ID : bool ) { var ID : [ - ID ID true / ( - ID ) ] ] int } func ID ( ) { }",
  "func [ ( ID : bool ) { var ID : [ - ID ID true / ( - ID ) ] ] int } func ID ( ) { }",
  "ID [ ( ID : bool ) { var ID : [ - func ID true / ( - ID ) ] ] int } func ID ( ) { }",
  "func - ( ) : [ ] [ ] [ false != ID - ( true / false ) ] int { } func ID ( ) { }",
  ": - ( ) func [ ] [ ] [ false != ID - ( true / false ) ] int { } func ID ( ) { }",
  ": - ( ) func [ ] [ true [ false != ID - ( ] / false ) ] int { } func ID ( ) { }",
  "func ID ( ) : bool ) { call ID ( - ID ( ) [ ( false ) ] ID while - ( - - - ID ) { } }",
  "func ID ( ) : bool ) { call ID ( - ID ( ) [ ( false ) ] ID while - ( - - - ID ) { } }",
  "func ID ( ( : bool ) { call ID ) - ID ( ) [ ( false ) ] ID while - ( - - - ID ) { } }",
  "func ID ( ID : bool , ID : bool ) ) bool { ID ( ID / ID [ - false ] [ true ] * - - - 123 ) = ( ( ( ( ( - true ) ) ) : ) if ( true ) { } }",
  "func ID ( ID : bool , ID : bool ) ) bool { ID ( ID / [ ID - false ] [ true ] * - - - 123 ) = ( ( ( ( ( - true ) ) ) : ) if ( true ) { } }",
  "func ID ( ID : bool ( ID : bool ) ) bool { ID ( ID / [ ID - false ] [ true ] * - - - 123 ) = ( ( ( ( ( - true ) ) ) : ) if , true ) { } }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ID ( ) ID - ID ( * ) ] bool }",
  "func ID bool ID : int , ID : ( ) { var ID : [ ID ( ) ID - ID ( * ) ] bool }",
  "func ID bool ID : ) , ID : ( int { var ID : [ ID ( ) ID - ID ( * ) ] bool }",
  "call ID ( ) : bool { func ID ( ID / - true * true + ID * ( 123 ) / - ( - true ) ) print ID }",
  "call ID ( ) : bool { func ID ( ID / - true * true + true * ( 123 ) / - ( - ID ) ) print ID }",
  "call ID ( ) : bool { func ID ) ID / - true * true + true * ( 123 ) / - ( - ID ( ) print ID }",
  "func ID ( ) { var ID : bool [ ID [ true / - ID ( - ( - false ) ) / 123 ] if - ID ] { } }",
  "func ID ( ) { var ) : bool [ ID [ true / - ID ( - ( - false ID ) / 123 ] if - ID ] { } }",
  "func ) ( ) { var ID : bool [ ID [ true / - ID ( - ( - false ID ) / 123 ] if - ID ] { } }",
  "func ID ( ID : [ 123 != true + 123 / ( - - false ) ] [ ] [ ] bool } { } func ID ( ) { )",
  "func ID ( ID : [ 123 != true + 123 / ( - ) false ) ] [ ] [ ] bool } { } func ID ( ) { -",
  "func ID ( ] : [ 123 != true + 123 / ( - ) false ) ID [ ] [ ] bool } { } func ID ( ) { -",
  "ID ID ( ) { var ID : [ ] int { while ID / ( - ( ID ) ) { } } } func func ( ) { }",
  "ID ID ( ) { var ID : [ ] int { while ID / ( - ( ID ) ) { } } } func func ( ) } {",
  "ID ID ( ) { var ID : [ ] int { while ID / ( - ID ( ) ) { } } } func func ( ) } {",
  "func ID ( ) : int { var ID : bool var ID ID int call ID ( : [ ( ID ) ] [ 123 ] ) call ID ( ) }",
  "func ID ( ) : int { var ID : bool var ID ID int call ID ( : [ ( ID ) ] [ 123 ] ) call ID ( ) }",
  "func ID ( ) : int { var ID : bool var ID } int call ID ( : [ ( ID ) ] [ 123 ] ) call ID ( ) ID",
  "func ID ( ) : [ ] } { var ID : [ ] bool { var ID : bool ID ( ( ( false ) ) ) = - ID while - ID { } int } func ID ( ) { }",
  "func ID ( ) : - ] } { var ID : [ ] bool { var ID : bool ID ( ( ( false ) ) ) = - ID while [ ID { } int } func ID ( ) { }",
  "func ID ( ) : - ] } { var ID : bool ] bool { var ID : [ ID ( ( ( false ) ) ) = - ID while [ ID { } int } func ID ( ) { }",
  "func ID ( ID : [ ] ID , ID : int ) { var ID : int var ID : bool while ID - true { } { } } func int ( ) { }",
  "func ID ( ID : [ ] ID , ID : int : { var ID : int var ID ) bool while ID - true { } { } } func int ( ) { }",
  "func ID ( ID : [ ] ID , ID : int : { var ID : int var true ) bool while ID - ID { } { } } func int ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : [ ] int ) : int { ) ( ID while { } call ID ( ) } func ID ( ) { }",
  "func [ ( ID : bool , ID : bool , ID : ID ] int ) : int { ) ( ID while { } call ID ( ) } func ID ( ) { }",
  "] [ ( ID : bool , ID : bool , ID : ID func int ) : int { ) ( ID while { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : int } func ID ( ID : } ID ( ) [ ( ( 123 ) ) ] [ 123 ] ] int ) { [",
  "func ID ( ) { var ID : int } func ID ( ( : } ID ID ) [ ( ( 123 ) ) ] [ 123 ] ] int ) { [",
  "func ID ( ) { var ID : int } func ID ( ( [ } ID ID ) [ ( ( 123 ) ) ] [ 123 ] ] int ) { :",
  "func ID ( ID : bool , ID : bool , ID : int ) : [ ID [ - ( - - false ] ) ] bool { }",
  "func ID ( ID : bool , ID : bool , ( : int ) : [ ID [ - ID - - false ] ) ] bool { }",
  "func ID ( int : bool , ID : bool , ( : ID ) : [ ID [ - ID - - false ] ) ] bool { }",
  "func ID ( ) : int { print - ( - 123 - - ( } ) ) false func ID ( ) { }",
  "func ID ( ) : int - print - ( - 123 - { ( } ) ) false func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : [ ( true - - ID [ ID ] ) func bool { } ] ID ( ) { }",
  "func ID ( : : int , ID ID bool ) : [ ( true - - ID [ ID ] ) func bool { } ] ID ( ) { }",
  "func ID ( : : int , ID ID bool ] : [ ( true - - ID [ ID ] ) func bool { } ) ID ( ) { }",
  "func ID ( ID : bool ) : int print { false <= ( false / - false ) if false { } } func ID ( ) { }",
  "func { ( ID : bool ) : int print ID false <= ( false / - false ) if false { } } func ID ( ) { }",
  "func { ( ID : bool ) : int print ID false <= ( false / - false ) if false { } } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ) : bool print - - ( false - ID ID print ID }",
  "func ID ( ID print int , ID : int ) { var ) : bool : - - ( false - ID ID print ID }",
  "func ID ( ID print int , ID : int ) { var ) : bool : - ID ( false - ID ID print - }",
  "func ID ( ) : bool { var ID : int var ID : int return } } ID ( ) : bool { if ID { } func",
  "func ID ( ) : bool { var ID : int if ID : int return } } ID ( ) : bool { var ID { } func",
  "func ID ( ) : bool { var ID : : if ID int int return } } ID ( ) : bool { var ID { } func",
  "func ID ( ) ID [ ] [ ] bool { var ID : int var ID : int ID ( ) [ ID ] [ - ID ] = - false while ( : ) { } }",
  "func while ( ) ID [ ] [ ] bool { var ID : int var ID : int ID ( ) [ ID ] [ - ID ] = - false ID ( : ) { } }",
  "func while ( ) ID [ ] [ ] bool { var ID : int var ID : int ID ( ) [ ID ] [ - ID ] = - false ID ( : ) { } }",
  "func ID ( ID : int , ID : false ] [ ] [ ] bool ) { print ( [ ) print ( 123 ) } func ID ( ) { }",
  "( ID ( ID : int , ID : false ] [ ] [ ] bool ) { print ( [ ) print ( 123 ) } func ID func ) { }",
  "( ID ( ID : int , ID : false ] [ ] } ] bool ) { print ( [ ) print ( 123 ) } func ID func ) { [",
  "func ID ( ID : [ false { false ] int , ID : int , ID : bool ) : [ false ] int / }",
  "func } ( ID : [ false { false ] int , ID : int , ID : bool ) : [ false ] int / ID",
  "func } ( ID : [ false { false ] int , ] : int , ID : bool ) : [ false ID int / ID",
  "func ID ( ID : bool , ID : [ ] ID , ID : bool ) : [ ] int { var ID : int call ID ( ) return ( true ) } func bool ( ) { }",
  "func ID ( ID : bool , ID : [ ] ID , ID : ] ) : [ bool int { var ID : int call ID ( ) return ( true ) } func bool ( ) { }",
  "func ID ( ID : bool , ID : [ ] ID , ID : ] ) : [ bool int { var ID : int call ID ( ) return ( true ) } func bool ( ) { }",
  "ID ID ( func : bool , ID : [ ] [ ] bool ) : int { ID [ ( ID ) ] = true call ID ( ) } func ID ( ) { }",
  "ID ID func func : bool , ID : [ ] [ ] bool ) : int { ID [ ( ID ) ] = true call ID ( ) } ( ID ( ) { }",
  "ID ID func func : ( , ID : [ ] [ ] bool ) : int { ID [ ( ID ) ] = true call ID ( ) } ( ID bool ) { }",
  "func ID ( ) { while ID ( 123 * ID ( ( ( true ) ) ) * ) - ID ) ( { } } func ID ( ) { }",
  "func ID ( ( { while ID ( 123 * ID ( ( ( true ) ) ) * ) - ID ) ( { } } func ID ) ) { }",
  "func ( ( ( { while ID ( 123 * ID ( ( ID true ) ) ) * ) - ID ) ( { } } func ID ) ) { }",
  "func ID ( ) : [ false * ( false false * ID [ ID ] [ ( ( true ) ) ] / ( - ) ) * ( ( - ( 123 ) ) ) ] bool { }",
  "func ID ( ) : [ false * ( false false * ID [ ID ) [ ( ( true ) ) ] / ( - ) ] * ( ( - ( 123 ) ) ) ] bool { }",
  "func ID ( : ) [ false * ( false false * ID [ ID ) [ ( ( true ) ) ] / ( - ) ] * ( ( - ( 123 ) ) ) ] bool { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : int { var ID : int ID [ false * ( ) 123 / true ] = ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : int ] var ID : int ID [ false * ( ) 123 / true { = ID } func ID ( ) { }",
  "ID ID ( ID : bool , ID : bool , ID : int ) : int ] var ID : int ID [ false * ( ) 123 / true { = ID } func func ( ) { }",
  "func ID ( ID : int ) { var ID : ID while ID [ 123 or false or true ] { } { } } func int ( ) { }",
  "func ID ( ID : int ) { var ID : ID while ID [ 123 or false or true ] { } { } } func int ( ) { }",
  "func ID ( ID : int ) { var ID : ID while ID [ 123 or false or true ] { } { } } func int ( ) { }",
  "func ID ( ) { ID = ID [ 123 ID ID ( ) * ( false ) ] [ ( - ID ) ] { } } func <= ( ) { }",
  "func ID ( ) ( ID = ID [ 123 ID ID { ) * ( false ) ] [ ( - ID ) ] { } } func <= ( ) { }",
  "func ID <= ) ( ID = ID [ 123 ID ID { ) * ( false ) ] [ ( - ID ) ] { } } func ( ( ) { }",
  ": ID ( ) { var ID : [ ] bool var ID func bool return ID ( ) [ - ID ] }",
  ": ID ( ) { var ID : [ ] bool var ID func bool return ID ( ) [ - ID ] }",
  ": ID ( ) { var ID : [ ] - var ID func bool return ID ( ) [ bool ID ] }",
  "func ID ( ID ( [ ] [ : - - ( ( ID ) ) ) ] [ ] int ) { }",
  "func ID ( ID ( [ ] [ : - - ] ( ID ) ) ) ( [ ] int ) { }",
  "func ID ( ID ( [ ] [ : - - ] ( ID ) ) ) [ ( ] int ) { }",
  "[ ID ( ) : int { var ID : bool var ID : [ ] bool ID func ID ( false ) ] = ID } func ID ( ) { }",
  "[ ID ( ) : int { var ID : bool var ID : [ ] bool ID func ID ( ) ) ] = ID } func ID ( false { }",
  "func ID ) ID : [ ] int , ID : bool , ID : bool ) : bool { var ID : bool if - ID { } print ( false ( } func ID ( ) { }",
  "func ID ) ID : [ ] int , ID : bool , ID : bool ) : bool { ID ID : bool if - var { } print ( false ( } func ID ( ) { }",
  "func ID ) ID : [ ] bool , ID : bool , ID : bool ) : int { ID ID : bool if - var { } print ( false ( } func ID ( ) { }",
  "func ID ( ID : bool { ) var ID : bool while - ID ( 123 + ( true ) ) { } }",
  "func ID ( ID : bool { ) var ID : ) while - ID ( 123 + ( true bool ) { } }",
  "( ID ( ID : bool { ) var ID : ) while - ID ( 123 + func true bool ) { } }",
  "func ID ( ID : int , ID : ( ] [ ID + 123 - ID [ [ - false ) ] [ 123 ] ] int , ID : [ ] int ) { }",
  "func ID ( ID : int , ID : ( ] [ ID ID 123 - + [ [ - false ) ] [ 123 ] ] int , ID : [ ] int ) { }",
  "func ID ( ID : int , ID : [ ] [ ] int ] { } func ID ( ) : int { var ID : [ ID ) [ ] bool }",
  "func ID ( ID : int , } : [ ] [ ] int ] { ID func ID ( ) : int { var ID : [ ID ) [ ] bool }",
  "func ID ( ID : int , } : [ ] [ ] int ] { ID func ID ( ) : int { var ID : [ ID ) [ ] bool }",
  "func ID ( ) : bool , ID : int , ID : bool ) { var ID : [ false == - - ( - - - 123 ID ] [ ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : int var if : int ID ( - true / false * ID ) { } }",
  "func ID if ) { var ID : int var ( : int ID ( - true / false * ID ) { } }",
  "func ID ( ID : bool ) : int return var ID : int var ID : int } func ID ( ) : bool { { }",
  "func ID : ID : bool ) : int return var ID ( int var ID : int } func ID ( ) : bool { { }",
  "func ID : ID : bool ) : int return var ID ( int var ID : int } } ID ( ) : bool { { func",
  "func ID ) ( : bool { print ( ( ( - ( true ) ) ) ) if ID { } } func ID ( ) { }",
  "func ID ) ( : } { print ( ( ( - ( true ) ) ) ) if ID { } } func ID ( ) { bool",
  "func ID ) ( : } { print ( ( ( - ( true ) ) ) ) if ID { } } func ID ( ) { bool",
  "ID func ( ) { return } func ID ( ID : bool , ID : bool ) { var ID : bool }",
  "ID func ( ) { return } func ID ( ID : bool , ID : bool ) { var ID : bool }",
  "ID func ( ) { return } func ID ( ID : bool , ID : bool ) { var ID : bool }",
  ": ID ( ) : bool { var ID func int var ID : [ ] [ ] bool return }",
  ": ID ( ) : bool { var } func int var ID : [ ] [ ] bool return ID",
  ": ID var ) : bool { var } func int ( ID : [ ] [ ] bool return ID",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : } var ID : int bool",
  "func ID ( ID : [ - - ( false - ( ( - true ) ) } ] int ) { )",
  "func ID ( ID : [ - - ( false ) ( ( - true ) ) } ] int - { )",
  "- ID ( ID : [ func - ( false ) ( ( - true ) ) } ] int - { )",
  "func ID ( ) { var ( : int while ( ( ID ID false ) ) ) { } }",
  "func ID ( ) var { ( : int while ( ( ID ID false ) ) ) { } }",
  "func ( ( ) var { ( : int while ( ID ID ID false ) ) ) { } }",
  "func ID ( ID : bool , ID : [ ] int , ID : [ - false + - ID ( ) 123 - * * true - false ] bool ) { }",
  "func ID ( ID [ bool , ID : : ] int , ID : [ - false + - ID ( ) 123 - * * true - false ] bool ) { }",
  "func ID ( ID [ bool , ID * : ] int , ID : [ - false + - ID ( ) 123 - : * true - false ] bool ) { }",
  "func ID ( ) : } { while - ID ( ID [ ( false ) ] ) { bool }",
  "func ID ( ) : } { while - ] ( ID [ ( false ) ID ) { bool }",
  "func ID ( ) : } { while - ] ( ID [ ( false ) ID } { bool )",
  "func ID ( ID : bool , ID : int , ID : int ) { var ID : - while ID / true / int ID { } print ID }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ID : - while ID / true / int ID { } print ID }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ID : - while ID / true / int ID { } print ID }",
  "func ID ( ID , int , ID : int , ID : int ) : bool { var ID : int var ID : bool } func ID ( ID : int , ID : int : ID : bool ) { }",
  "func ID ( ID , int , ID : int , ID : int ) : bool { var ID int : var ID : bool } func ID ( ID : int , ID : int : ID : bool ) { }",
  "func ID ( ID , int , ID : int , ID : int ) : bool { var ID int : var ID : bool } int ID ( ID : int , ID : func : ID : bool ) { }",
  "func ID ( ID : bool , ID : bool ) : bool { call ID ) 123 - ( ( false ) ) - false ( } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) ) bool { call ID ) 123 - ( ( false : ) - false ( } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) ) bool { } ID ) 123 - ( ( false : ) - false ( call func ID ( ) { }",
  "func [ ( ID : ID 123 - ID [ false / 123 * ( false ) ] [ ID ] + true ] [ ] int ) { }",
  "func [ ( ID : ID 123 - [ [ false / 123 * ( false ) ] ID ID ] + true ] [ ] int ) { }",
  "func [ ( ID : ID 123 - [ [ false / 123 * ( false ) ] ID ID ] + true { [ ] int ) ] }",
  "[ ID ( ) { var ID : func ID ( ( ( ID ) ) ) ] bool }",
  "[ ID ( ) { var ID : func ID ( ( ( ID } ) ) ] bool )",
  "[ ID func ) { var ID : ( ID ( ( ( ID } ) ) ] bool )",
  "func ID int ) : [ ] int { var ID : ( var ID : int } func ID ( ID : [ ( ID ) ] int ) { }",
  "func ID int ) : [ ] int { var ID : ( var ID : int } func ID ( ID : [ ( ID ) ] int ) { }",
  "func ID int ) : [ ] int { var ID : ( var ID : int int func ID ( ID : [ ( ID ) ] } ) { }",
  "func ID ( ) : int { 123 ID : [ ID [ ( ( - false ) ) ] [ var ] ] bool var ID : int }",
  "func ID ( ) : int { 123 ID : [ ID [ ( ( - false ) ) ] [ ID ] ] bool var var : int }",
  "func ID ( ) : int { 123 ID : [ ID [ ( ( - false ) ) int [ ID ] ] bool var var : ] }",
  "func ID ( [ : [ ID ( ) [ - false * ( - ID ) ] ] ID ] bool ) { }",
  "func ID ( [ : [ ID ( ) [ - false * ( - ID ) ] ] ID ] bool ) { }",
  "func ID ( [ : [ bool ( ) [ - false * ( - ID ) ] ] ID ] ID ) { }",
  "func ID ( ) { var ID : bool var ID : ID call ID ( ) int ( ) = ID ( ) [ ( true ) ] }",
  "var ID ( ) { func ID : bool var ID : ID call ID ( ) int ( ) = ID ( ) [ ( true ) ] }",
  "var ID ( ) { func ID : bool var [ : ID call ID ( ) int ( ) = ID ( ) ID ( true ) ] }",
  "func ID ( ID : [ true - ( ID ( ( ID ) ) ) ] int ) func } { ID ( ) { }",
  "func ID ( ID : [ true - ( ID ( ( ID ) ) ) ] int ) func } ) ID ( { { }",
  "func ID ( ID : [ true - ( ID ) ( ID ( ) ) ] int ) func } ) ID ( { { }",
  "{ ID ( ID : bool , ID : bool ) : bool { { var ID : int } ID ( ID ) = ( 123 ) } func ID ( ) func }",
  "{ ID ( ID : bool , ID : bool ) : bool { { var ID : int } ID ( ID ) = ( ( ) } func ID 123 ) func }",
  "{ ID ( ID : bool , ID : bool ) : bool { { var ID : int } ID ( ID ) = ( ( ) } func ID 123 ) func }",
  "func ID ( ) } var ID : int while true * ID [ ( ID ) ] [ ( ( ID ) ) ] { { print false } func ID ( ) { }",
  "func ID ( ) } var ID : int while { * ID [ ( ID ) ] [ ( ( ID ) ) ] { { print false } func ID ( ) true }",
  "func ( ( ) } var ID : int while { * ID [ ID ID ) ] [ ( ( ID ) ) ] { { print false } func ID ( ) true }",
  "func ID ( ID int bool ) : : { var ID : int var ID : int print ID ( ID ) }",
  "func ID ( ID int bool ) print : { var ID : int var ID : int : ID ( ID ) }",
  "func ID ( ID int bool ) print : { var ID : int var ( : int : ID ID ID ) }",
  "func ID ( ID : int : ID , [ ] bool , ID : bool ) : bool { call ID ( ( false ) ) call ID ( ) }",
  "func ID ( ID : ) : ID , [ ] bool , ID : bool ) : bool { call ID ( ( false ) int call ID ( ) }",
  "func ID ( ID : ) : ID , [ ] bool , ID call bool ) : bool { : ID ( ( false ) int call ID ( ) }",
  "func ID ( ID : int , ID : int , ) : bool ) { ID ( ( - ( 123 ) ) ID = ( ID ) print ( ( true ) ) } func ID ( ) { }",
  ") ID ( ID : int , ID : int , ) : bool ) { ID ( ( - ( 123 ) func ID = ( ID ) print ( ( true ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) : int { ) ID : int ID [ ( ( ID ) var ] = - - ID while 123 { } }",
  "func ID ( ID : bool , ID : int ) : int { ) ID 123 int ID [ ( ( ID ) var ] = - - ID while : { } }",
  "func ID ( ID : bool , ID : int ) : int { ) ID 123 int ID [ ( ( ID ) var ] = - - ID while : { } }",
  "func ID ( ) : bool { var ID : int var ID : int ID [ ( - false * - - true / ( ID ) ) ] [ - ID ] = ( ID ) ( } } func ID { ) { }",
  "func ID ( ) : bool ) var ID : int var ID : int ID [ ( - false * - - true / ( ID ) ) ] [ - ID ] = ( ID ) ( } } func ID { { { }",
  "func ID ( ) : bool ) var ID : int var ID : } ID [ ( - false * - - true / ( ID ) ) ] [ - ID ] = ( ID ) ( } int func ID { { { }",
  "func ID ( ) { ID ID - - 123 / ( ( - - - - ID ) ) * true ] [ ( - false ) ] = - [ { } } func ID ( ) { }",
  "func ID ( ) { ID ID - - 123 / ( ( - - - - ID ) ) * true ] [ ] - false ) ( = - [ { } } func ID ( ) { }",
  "func ID ( ) { ID [ - ID ( ( ( = - ID ) ) ) ] [ ID ] - false } func ID ( ) { }",
  "func ID ( ) { ID [ - ID ( ( ( = - ID ) ) ) ] [ ID ] - false } func ID ( ) { }",
  "func ID ( ) { ID [ - ID ( ( ( { - ID ) ) ) ] [ ID ] - false } func ID ( ) = }",
  "= ID ( ID : [ ] bool , ID : [ ] int ) : int { { var ID : bool var ID : int } ID func - ( 123 ) } func ID ( ) { }",
  "= ID ( ID : [ ] bool , ID : [ ] int ) : int { { var ID : bool var ID : int } ID func - ( 123 ) } func ID ( ) { }",
  "= ID ( ID ID [ ] bool , : : [ ] int ) : int { { var ID : bool var ID : int } ID func - ( 123 ) } func ID ( ) { }",
  "func [ ( ) { call ID ( ) { while - - ID [ - 123 ] ID false ] { } } }",
  "func [ ( ) { call ID ( ) { while - - ID [ - } ] ID false ] { } } 123",
  "func [ ) ( { call ID ( ) { while - - ID [ - } ] ID false ] { } } 123",
  "func ID ( ID : bool , ID : int , bool : [ ] int ) : ID { var ID : [ ID ( ) [ ID ] ] [ ] [ ] [ ] [ ] bool }",
  "func : ( ID ID bool , ID : int , bool : [ ] int ) : ID { var ID : [ ID ( ) [ ID ] ] [ ] [ ] [ ] [ ] bool }",
  "func : ( ID ID bool , ID [ int , bool : [ ] int ) : ID { var ID : [ ID ( ) [ ID ] ] [ ] [ ] [ ] : ] bool }",
  "func ID ( ID : int ) { var ID - int print - - 123 : ( false / ID ) - - ID while 123 { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID - int print - - 123 : ( false / ID ) - - ID { 123 while } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID - int print - - 123 : ( false / ID ) - - ID { 123 while } } func ID ( ) { }",
  "func ID ( ) { var [ : ID false / false / 123 + ID / - true * true + ( - - ( ( ( - - ( true ) ) ) ) ) ] int var ID : [ ] int }",
  "func ID ( ) { var ) : ID false / false / 123 + ID / - true * true + ( - - ( ( ( - - ( true [ ) ) ) ) ] int var ID : [ ] int }",
  "func ID ( ) { var ) : ID false / false / 123 + ID / - true * true + ( - - ( ( ( - - ( true [ ) ) ) ) ] int var ID : [ ] int }",
  "func ID ( ID : int ) { var ID : int { var ID : [ ID ( ) [ ( ( ( ( ID - ) ) ) ] [ - - ID ] ] int var ID : int } if - ( ( ( ) true ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : ( { var ID : [ ID ( ) [ ( ( int ( ID - ) ) ) ] [ - - ID ] ] int var ID : int } if - ( ( ( ) true ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : int - { var ID : ( { var ID : [ ID ( ) [ ( ( int ( ID - ) ) ) ] [ - - ID ] ] int var ID : int } if ) ( ( ( ) true ) ) ) { } } func ID ( ) { }",
  "func ID ( ID : if ] int , ID : bool ) { } func ID ( ) : [ ] bool { [ 123 { } }",
  "func ID ( ID : if ] int { ID : bool ) { } func ID ( ) : [ ] bool { [ 123 , } }",
  "func ID false ) { var ID : [ ] [ ( true / true * true - - - ( ) ] bool }",
  "func true false ) { var ID : [ ] [ ( true / true * ID - - - ( ) ] bool }",
  "func true false ) { var ID : [ ] [ ( true / true ) ID - - - ( * ] bool }",
  "func ID ( ID : [ ] bool , ID : bool ) : [ ] [ ( ID [ - ID ] [ true ) ] ] int { }",
  "func ID ( ID : [ bool bool , ID : ] ) : [ ] [ ( ID [ - ID ] [ true ) ] ] int { }",
  "func ID ( ID : [ bool bool , ID true ] ) : [ ] [ ( ID [ - ID ] [ : ) ] ] int { }",
  "- ID ( ID : [ func ( ( ID ( ) [ - ID ] ) ) ] int ) { }",
  "- ID ( ID : ) func ( ( ID ( ) [ - ID ] ) [ ] int ) { }",
  "- ID ( ID : ) func ( ( ID ( ) [ - ID ] ) [ ] int ) { }",
  "func ID ( ID : bool , } : [ ] bool , ID : int ) : int { while 123 / ( ( true ) ) * true { ID }",
  "func ID ( ID : bool , } : [ ] bool , ID : int ) : int { while 123 / ( ( true ) ) * true { ID }",
  "func ID ( ID : bool , } : [ ] ) , ID : int ) : int { while 123 / ( ( true bool ) * true { ID }",
  "func ID ( ) : [ ID ( ID ( true / bool + ID ) ) ] ID { }",
  "func ID ( ) : [ ID ( ID ( true / bool ID ID ) ) ] + { }",
  "func ID + ) : [ ID ( ID ( true / bool ID ID ) ) ] ( { }",
  "func ID ( ID : bool , ID : int , ID : bool ) { if ( false * false - ( ID ) - - - ( ( ) ) ) ID { } { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : { , ID : bool ) { if ( false * false - ( ID ) - - - ( ( ) ) ) ID { } { } } func ID ( ) int }",
  "func ID ( ID : bool , ID : { , ID : bool ) { if ( false * false - ( ID ) - - - ( ( ) ) ) ID { } { } } func ID ( ) int }",
  "func ID ( ) { var ID : } var ID : bool bool func ID ( ) { var ID : [ ID [ ( - ID ) ] ] bool }",
  "func ID var ) { var ID : } var ID : bool bool func ID ( ) { ( ID : [ ID [ ( - ID ) ] ] bool }",
  "func ID var ) bool var ID : } var ID : { bool func ID ( ) { ( ID : [ ID [ ( - ID ) ] ] bool }",
  "] ID ( ) : [ ] [ - - ID ( ) [ ( - ( ( false ) ) ) ] ] [ func int { }",
  "( ID ] ) : [ ] [ - - ID ( ) [ ( - ( ( false ) ) ) ] ] [ func int { }",
  "( ID ] ) : [ ] [ - - ID ( ) [ ( - ( ( false ) ) ) ] ] [ func int { }",
  "func ID ( ID ( int , ID : bool , ID : int ) { print ( : ( ( ( ( - false ) ) ) ) ) ) }",
  "func ID ( ID ( ID , int : bool , ID : int ) { print ( : ( ( ( ( - false ) ) ) ) ) ) }",
  "func ID ( , ( ID ID int : bool , ID : int ) { print ( : ( ( ( ( - false ) ) ) ) ) ) }",
  "func ID ( ) { var ID : bool var ID : [ ] ) - ( - ( ( ( ( - 123 ) [ ) ) ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : bool var 123 : [ ] ) - ( - ( ( ( ( - ID ) [ ) ) ) ] bool } func ID ( ) { }",
  "func ID ( [ { var ID : bool var 123 : [ ] ) - ( - ( ( ( ( - ID ) ) ) ) ) ] bool } func ID ( ) { }",
  "func ( ID ) { var ID : bool var ID : [ ] int return ( false / true or ID or true ) }",
  "func ( ID ) { var or : bool var ID : [ ] int return ( false / true ID ID or true ) }",
  "func ( ID ) { var or : bool var ID : [ true int return ( false / ] ID ID or true ) }",
  "func ID ( ID : [ 123 <= ID + ( ID ( ID ) ) - true { [ ] [ ] bool ) { } func ID ( ) ] }",
  "func ID ( ] : [ 123 <= ID + ( ID ( ID ) ) - true { [ ] [ ID bool ) { } func ID ( ) ] }",
  "func ID ( ] : [ 123 <= ID + ( func ( ID ) ) - true { [ ] [ ID bool ) { } ID ID ( ) ] }",
  "func func ( ) { var ID : bool var ID : bool if 123 - - true / 123 * true { } if - true { } } ID ID ( ) { }",
  "func func / ) { var ID : bool var ID : bool if 123 - - true ( 123 * true { } if - true { } } ID ID ( ) { }",
  "func func / ) { var ID : bool var ID : bool if 123 - - true ( 123 * true { } if - true { } } ID ID ( ) { }",
  "func ID ( ) : [ ] [ ( 123 ID - ( true * ( ( 123 ) ) / - * ) ) ] bool { }",
  "func ID ( ) : [ ] [ ( 123 ID - ( true * ( ( 123 ) ) / - * ) ) ] bool { }",
  "ID func ( ) : [ ] [ ( 123 ID - ( true * ( ( 123 ) ) / - * ) ) ] bool { }",
  "func ID ( ID : bool ) { var ID : bool { var ID : bool } ID ( - - ( true ) ) = ( ( } false ) ) -",
  "func ID ( ID : bool ) { var ID : bool { var ID : bool true ID ( - - ( } ) ) = ( ( } false ) ) -",
  "func ID ( ID : bool ) { var ID : bool { var ID : bool true ID ( - - ( } ) false = ( ( } ) ) ) -",
  "func ID ( ) { var ID : [ ] int var ID : [ ] / ID [ false / ID [ - ID ] ] [ ] [ ] int } func ID ( ) { }",
  "] ID ( ) { var ID : [ ] int var ID : [ ] / ID [ false / ID [ - ID ] ] [ ] [ func int } func ID ( ) { }",
  "] ID ( ) { var ID : [ ] int var ID : [ ] / ID [ false ] ID [ - ID ] / [ ] [ func int } func ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( ID ( ID ( ID ) ) ) func = - ID } ID ID ( ) { }",
  "func func ( ) { var ID : int call ID ( ID ( ID ( ID ) ) ) ID = - ID } ID ID ( ) { }",
  "ID func ( ) { var ID : int call ID ( ID ( ID ( func ) ) ) ID = - ID } ID ID ( ) { }",
  "func ID ( ID call int , ID : bool , ID : bool ) { var ID : bool : ID ( ) return }",
  "func ID ( ID call int , ID : bool bool ID : bool ) { var ID : , : ID ( ) return }",
  "func ID ( ID call int , ID ID bool bool ID : bool ) { var : : , : ID ( ) return }",
  "( ID ( ) { ID ( - false / ( ID func ) [ 123 ] ) / ID ) = ID }",
  "( ID ( ) { ID ID - false / ( ID func ) [ 123 ] ) / ( ) = ID }",
  "( ID ( ) { ID ID - } / ( ID func ) [ 123 ] ) / ( ) = ID false",
  "print ID ( ) { func ID ( - 123 * ( ID ) ) }",
  "print ID ( - { func ID ( ) 123 * ( ID ) ) }",
  "print ID ( - { func ID * ) 123 ( ( ID ) ) }",
  "func ID ( ID : bool ) { var ID : [ return } func ID ( ) : bool ] bool { }",
  "func ID ( ID : bool ) { var ID : ID return } func [ ( ) : bool ] bool { }",
  "func ID ( ) : int { var ID : int var ID : int call ID ( ) ID [ 123 + ( ( ID ) ) - ( ID ] ] [ ID ) = - ID } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : int call ID ( ) ID [ 123 + ( ( ID ) { - ( ID ] ] [ ID ) = - ID } func ID ( ) ) }",
  "func ID ( ) : int { var ID : int var ID : int call ID ( ) ID [ 123 + ( ID ID ) { - ( ( ] ] [ ID ) = - ID } func ID ( ) ) }",
  "func ID ( ) : [ - ID ( ID ( ) * true and ) true ( ) ] int { } func ID ( ) { }",
  "func ] ( ) : [ - ID ( ID ( ) * true and ) true ( ) ID int { } func ID ( ) { }",
  "func ] ( ) ID [ - : ( ID ( ) * true and ) true ( ) ID int { } func ID ( ) { }",
  "func ID : ) { var ID : [ ] int } func ID ( ) ( [ ] [ 123 / true ] int { }",
  "func ID : ) { var ID : [ ] int } func ID true ) ( [ ] [ 123 / ( ] int { }",
  "func ID : ) { var ID : [ ] int } ) ID true func ( [ ] [ 123 / ( ] int { }",
  "func ID ( ) : bool { var ID : [ } ( - ID ( true ) ) ) ] bool var ID : [ ] bool } func ID ( ) { (",
  "func ID func ) : bool { var ID : [ } ( - ID ( true ) ) ) ] bool var ID : [ ] bool } ( ID ( ) { (",
  "func ID func ) : bool { var ID : [ } ( - ID ( : ) ) ) ] bool var ID true [ ] bool } ( ID ( ) { (",
  "func ID ( ID : bool , ID : int ) : int { var ID : bool var ID : int { } } ] ID ( ID : [ ] [ ] [ func int ) { }",
  "func ID ( ID : bool , ID : int ) : int { var ID : bool var ID : } { } int ] ID ( ID : [ ] [ ] [ func int ) { }",
  "func ID ( ID : bool , ID : int ) : { { var ID : bool var ID : } { } int ] ID ( ID : [ ] [ ] [ func int ) int }",
  ") ID ( ID : bool , ID : int , ID : int ) : bool { var ID : [ ] [ ] int var ID : int } func ID ( func { }",
  ") ID ( ID : bool , ID : int , ID : int ) : } { var ID : [ ] [ ] int var ID : int bool func ID ( func { }",
  ") ID ( ID : bool , ID : int , ID : int ) : } { var ID : [ ] [ func int var ID : int bool ] ID ( func { }",
  "func ID ( ) : int { var ID : int { ( ( false / ( - false ) / false ) = - - true if - - - - ID - - ID ) { } } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int = ( ( false / ( - false ) / false ) { - - true if - - - - ID - - ID ) { } } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int = ( ( false / ( - false ) / false ) { - - true if - - - - ID - - } ) { } ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : int { var ID : int var : ID [ ] int return ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : int { var ID : int var ID ID [ ] int return ID } func : ( ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ID * ( - ID / true ( * - ID ] bool ) { } func ID ) ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ID * ( - } / true ( * - ID ] bool ) { } func ID ) ) { ID",
  "func ID ( / : bool , ID : int , ID : [ ID * ( - } ID true ( * - ID ] bool ) { } func ID ) ) { ID",
  "func ID ( ) } [ ] int { var ID : int if false + ID [ 123 ] { } { } :",
  "if ID ( ) } [ ] int { var ID : int func false + ID [ 123 ] { } { } :",
  "if ID ( ) } [ ] int { var ID : int } false + ID [ 123 ] { func { } :",
  "func ID ( ) { { print ) ( ) [ ID [ ( true ) ] ] } ID = - ( - 123 ID }",
  "func ( ID ) { { print ) ( ) [ ID [ ( true ) ] ] } ID = - ( - 123 ID }",
  "func ( ID ) { { print ID ( ) [ ) [ ( true ) ] ] } ID = - ( - 123 ID }",
  "func ID ( ) { ID [ false * ( false + 123 * - ID ) / ( - - ( ( - - - false ) ) ) ) [ ID ] = - ( - ( false ) ) } func ID ( ] { }",
  "func ID ) ) { ID [ false * ( false + 123 * - ID ) / ( - - ( ( - - - false ) ) ) ) [ ID ] = - ( - ( false ) ( } func ID ( ] { }",
  "func ID ) ) { ID + false * ( false [ 123 * - ID ) / ( - - ( ( - - - false ) ) ) ) [ ID ] = - ( - ( false ) ( } func ID ( ] { }",
  "func ] ( ) { var ID : bool ID [ true * ID ( ) - ID ( ) ID = 123 } func ID ( ) { }",
  "func [ ( ) { var ID : bool ID ] true * ID ( ) - ID ( ) ID = 123 } func ID ( ) { }",
  "func [ ( ) { var ID : bool ) ] true * ID ( ID - ID ( ) ID = 123 } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ] func print ID ( ) [ - - ID ] [ ID ] } int ID ( ) { }",
  "func ( ID ) : bool { var ID : [ ] func print ID ( ) [ - - ID ] [ ID ] } int ID ( ) { }",
  "func ( ID ) : bool { var ID : [ ] func ] ID ( ) [ - - ID print [ ID ] } int ID ( ) { }",
  "func ID ( ID : bool , ID , int : ID : bool ) { var ID : [ ] bool if ID ( ) [ false ] [ - ( true ) ] { } ID = ID } func ID ( ) { }",
  "func ID ( ID : bool , ID , int : ID : bool ) { var ID : [ ] bool if ID ( ) [ false ] [ - ( true ) ] { } } = ID } func ID ( ) { ID",
  "func ID ( ID : bool , ID , int : ID : bool ) { var ID : [ ] bool if ID ( ) [ false - [ ] ( true ) ] { } } = ID } func ID ( ) { ID",
  "func ID ( ID : [ ID ( ] / true * - ID or true ) true [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ID ( ] / true * true ID or true ) - [ ] bool ) { } func ID ( ) { }",
  "func ID ( : ID [ ID ( ] / true * true ID or true ) - [ ] bool ) { } func ID ( ) { }",
  "func ID ( ) bool var ID : { var ID : [ false - false / ID [ true ] * - false ] [ ] bool } func ID ( ) { }",
  "func ID ( ) bool var ID : { ID ID : [ false - false / ID [ true ] * - false ] [ ] bool } func var ( ) { }",
  "func ID ( ) bool var ID : { ID ID ID [ false - false / : [ true ] * - false ] [ ] bool } func var ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) { var ID : int print - ( - - ID ) func 123 { } } while ID ( ) { }",
  "func ID ( ID : int , ID : - , ID : int ) { var ID : int print int ( - - ID ) func 123 { } } while ID ( ) { }",
  "func ID ( ID : int , ID : - , ID : int ) { var ID : int print - ( int - ID ) func 123 { } } while ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) : bool { ] ID : [ ID ( ) [ 123 var ] [ ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ID : ) ] bool , ID : bool [ : bool { ] ID : [ ID ( ) [ 123 var ] [ ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( ID : ) ] bool , ID : bool [ : bool { ] ID : [ ID ( [ [ 123 var ] [ ] int var ID : ) ] int } func ID ( ) { }",
  "func ID ( { : int , ID : int ) { var ID : int while 123 / true / false - ( ( true ) ) ID } }",
  "func ID ( { : int , ID : int ) { var ID : int while 123 / true / false } ( ( true ) ) ID - }",
  "func ID ( } : int , ID : int ) { var ID : int while 123 / true / false { ( ( true ) ) ID - }",
  "func ID ( ) : [ - } - ( ID ( ID ( ) [ false ] ) ) ] int { -",
  "ID func ( ) : [ - } - ( ID ( ID ( ) [ false ] ) ) ] int { -",
  "ID func ( ) : [ - } - int ID ( ID ( ) [ false ] ) ) ] ( { -",
  "func ID ( ID : int ) : int { ID ID : int var var : bool }",
  "func ID ( ID : bool ) : int { ID ID : int var var : int }",
  "func ID ( ID : bool ) : int { ID ID : int var var : int }",
  "func int ( ID : bool ) { var ID : [ ] ID } func ID ( ID : int , ID : int ) { var ID : int }",
  "func int ( ID : bool int { var ID : [ ] ID } func ID ( ID : int , ID : ) ) { var ID : int }",
  "func int ( ID : ] int { var ID : [ bool ID } func ID ( ID : int , ID : ) ) { var ID : int }",
  "func ID ( ID : ID ] bool , ID : int ) : int { var ID : bool [ ( ) = 123 * - 123 * false if true { } } func ID ( ) { }",
  "func ID ( ID : ID ] bool , ID : int ) : int { var ID : bool [ ( ) = 123 * - 123 * false if true { } } func ID ( ) { }",
  "func ID ( ID : ID ] bool , ID 123 int ) : int { var ID : bool [ ( ) = : * - 123 * false if true { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : int } func ID [ ) : ( ( 123 ) ] int { }",
  "func ID ( ) : int { var ID : int var ID : int } func ID [ ) : ] ( 123 ) ( int { }",
  "func ID ( ) : int { var ID : int var ID ( int } func ID [ ) : ] : 123 ) ( int { }",
  "func ) ( ) { var ID : [ false / - - - ( 123 - - 123 ID ] [ ] int } func ID ( ) { }",
  "func ) ( ) { var ID } [ false / - - - ( 123 - - 123 ID ] [ ] int } func ID ( ) { :",
  "func ) ( ) { var ID } [ false / - - - ( 123 - - 123 ID ] ] [ int } func ID ( ) { :",
  "func ID ( ID : int , ID : int , ID : [ bool ] ) : [ ID ( ) [ false ] [ ( ( ( - ID ) ) ) ] ] bool { } func ID ( ) { }",
  "func ID ( ID : int ] ID : int , ID : [ bool ] ) : [ ID ( ) [ false ] [ ( ( ( - ID ) ) ) , ] bool { } func ID ( ) { }",
  "func ID ( ID : int ] ID : int , ID : [ bool ] ) : [ } ( ) [ false ] [ ( ( ( - ID ) ) ) , ] bool { ID func ID ( ) { }",
  "func ID ( ) : ID - - [ ( 123 * - - - ( ID ) ) ] int { } func ID ( ) { }",
  "func ID ( ) : ID - - - ( 123 * - - [ ( ID ) ) ] int { } func ID ( ) { }",
  "func ID ( 123 : ID - - - ( ) * - - [ ( ID ) ) ] int { } func ID ( ) { }",
  "func ID ) ID : bool , ID : int ( { var ID : [ ] int { var ID : [ ] bool var ID : int } return }",
  "func ID ) ID : bool , ID : int ( { var ID : [ ] int { var ID : [ ] bool var ID : int } return }",
  "func ID ) ID : bool , ID : int ( { var ID : [ ] int { var ID : [ ] bool var ID : int } return }",
  "func ID ( ID : bool , ID : [ false / ID ( ) [ false * - - [ ID ) ] ( ID ] ] [ ] int ) { }",
  "func ID ( ID : bool , ID : [ false / ID * ) [ false ( - - [ ID ) ] ( ID ] ] [ ] int ) { }",
  "func ID ( ID : bool , ID : [ false / ID ] ) [ false ( - - [ ID ) ] ( ID ] * [ ] int ) { }",
  "func ID : ) ( bool { var ID : [ ] int var ID : bool call ID ( - false * ID ) } func ID ( ) { }",
  "func ID : ] ( bool { var ID : [ ) int var ID : bool call ID ( - false * ID ) } func ID ( ) { }",
  "func ID : ] ( bool [ var ID : { ) int var ID : bool call ID ( - false * ID ) } func ID ( ) { }",
  "{ ID ( ID : bool ) func var ID : int call ID ( ) } func ID ( ID : int , ID : [ ID ] [ ] int ) { }",
  "{ ID ( ID : bool ) func var ID : int call ID ( ) } func ID ) ID : int , ID : [ ID ] [ ] int ( { }",
  "{ ID ( ID : bool ) func var ID : int call ID ( ) } func ID ) ID : int , ID : [ ID ] [ ] int ( { }",
  "bool ID ( ID : func ) { var ID : bool print ( ( ID ( true ) ) ) print ( false ) } func ID ( ) { }",
  "bool ID ( ID : func ) func var ID : bool print ( ( ID ( true ) ) ) print ( false ) } { ID ( ) { }",
  "bool ID ( ID : func ) func var ID : ( print ( ( ID ( true ) ) ) print bool false ) } { ID ( ) { }",
  "func ID ( ID : bool , ID : int ] int , ID : bool ) : [ { var ID : bool var ID : int call ID ( ) call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ] int , ID : bool ) ( [ { var ID : bool var ID : int call ID ( ) call ID : ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ] int , ID : bool ) ( [ { var ID ID bool var ID : int call ID ( ) call : : ) } func ID ( ) { }",
  "func 123 ( ) : [ ( ID > ID ( ( - ID ) ) ) ] bool { }",
  "func 123 ( ) : [ ( ID > ID ) ( - ID ) ( ) ] bool { }",
  "func 123 ( ) : [ ( ID > } ) ( - ID ) ( ) ] bool { ID",
  "func ID ( ) : { bool var ID : int var ID : [ ] [ ID [ ID [ - ( ID ) ] ] ] int }",
  "func ID ( ) : { bool var ID : int var ID : ID ] [ ID [ ID [ - ( [ ) ] ] ] int }",
  "func ID ( ) : { bool var ID : int var ID : ID ] [ ID [ ID [ - int [ ) ] ] ] ( }",
  "func ID ( ) { var ID { int print ( true * 123 >= true / 123 ) } func ID ( ) : }",
  "func ID ( ) { var ID { int print ( true * 123 >= true : 123 ) } func ID ( ) / }",
  "func ID ( ) { var ID { / print ( true * 123 >= true : 123 ) } func ID ( ) int }",
  "func ID ( ) : [ ] int { - - - true + - - while 123 - 123 { } { } }",
  "func ID ( ) : [ ] int { - - - true + - - 123 123 - while { } { } }",
  "func ID ( ) : [ ] int { - - - true { - - 123 123 - while + } { } }",
  "func ID ( ) { var ID : ] var ID : [ ID ( ) [ ( false ) ] [ ID ] ] [ int int }",
  "func ID ( ) { var ID : ] var ID : [ ID ( ) [ ( false ) ] [ ID ] int [ int ] }",
  "func ID ( ) var var ID : ] { ID : [ ID ( ) [ ( false ) ] [ ID ] int [ int ] }",
  "func ID ( ID : int : ID : int ) : [ ] int { var ID : bool } func ID ( ID , int ) { var ID : int var ID : bool }",
  "func ID ( ID : int : ID : , ) : [ ] int { var ID : bool } func ID ( ID int int ) { var ID : int var ID : bool }",
  "func ID ( ID : int : ID : , ) : int ] int { var ID : bool } func ID ( ID [ int ) { var ID : int var ID : bool }",
  "func ID ( ID : int , ( : [ ] int , ID : bool ) { var ID : bool var ID : int print ( false ) } func ID ID ) { }",
  "func ID ( int : ID , ( : [ ] int , ID : bool ) { var ID : bool var ID : int print ( false ) } func ID ID ) { }",
  "func ID ( : int ID , ( : [ ] int , ID : bool ) { var ID : bool var ID : int print ( false ) } func ID ID ) { }",
  "func ID ( ) { { if ( true ( ID * 123 + ( ( ( true ) ) ) ) { } } } func ID * ) { }",
  "func ID ( ) { { if ( true ( ID * 123 } ( ( ( true ) ) ) ) { } } + func ID * ) { }",
  "func ID ( ) { { if ( true ( ID * 123 } ID ( ( true ) ) ) ) { } } + func ( * ) { }",
  "func ID ( ID : int , ID int int , ID : bool ) { { var ID : [ ] [ ] [ ( ( - true ) ) ] bool var ID : [ ] : } }",
  "] ID ( ID : int , ID int int , ID : bool ) { { var ID : [ func [ ] [ ( ( - true ) ) ] bool var ID : [ ] : } }",
  "] ID ( ID : int , ID int int , ID : bool ) { { var ID : [ func [ ] var ( ( - true ) ) ] bool [ ID : [ ] : } }",
  "func ID ( ID : bool , ID : int ) : [ ] int ID call ID ( ) if { [ ID ] [ false ] { } } func ID ( ) { }",
  "func ID ( ID : bool , ID } int ) : [ ] int ID call ID ( ) if { [ ID ] [ false ] { : } func ID ( ) { }",
  "func ID ( ID : bool , ID } int ) : [ ] int ID call ID ( ) if } [ ID ] [ false ] { : { func ID ( ) { }",
  "func ID ( ID : [ ] bool , ID : bool ) : int { var ID : [ true / ID [ ( ] 123 ) ) ( ] bool }",
  "func ID ( ID : [ ( bool , ID : bool ) : int { var ID : [ true / ID [ ] ] 123 ) ) ( ] bool }",
  "func ID ( ID : [ ( bool , ID : ] ) : int { var ID : [ true / ID [ ] bool 123 ) ) ( ] bool }",
  "( ID ( ) : bool { var ID : int if ID - ID [ ( func - - ( ID ) ) ) ] + ( true ) { } }",
  "( ID ( ) ) bool { var ID : int if ID - ID [ ( func - - ( ID ) ) : ] + ( true ) { } }",
  "( ID ( ) ) bool { var ID : int if ID - ID [ ( func } - ( ID ) ) : ] + ( true ) { } -",
  "func ID ( ) : int { { + ID ( ) - - - - - ID ( ) if ID { } print - ID } } func ID ( ) { }",
  "func ID ( ) : int { { + ID ( ) - - - - - ID ( ID if ) { } print - ID } } func ID ( ) { }",
  "func ID ( ) : int ( { + ID { ) - - - - - ID ( ID if ) { } print - ID } } func ID ( ) { }",
  "func ID ( ) { var ID : bool ID [ ID [ true + 123 + true ] [ - - func 123 ] ] [ ( ( ( ( true ) ) ) ) ] = - ( ID ) } - ID ( ) { }",
  "func ID ( ) { var ID : bool ID [ ID [ true + } + true ] [ - - func 123 ] ] [ ( ( ( ( true ) ) ) ) ] = - ( ID ) } - ID ( ) { 123",
  "func ID ( ) { var ID : bool ID [ ID [ true + } + true ] [ - - func [ ] ] 123 ( ( ( ( true ) ) ) ) ] = - ( ID ) } - ID ( ) { 123",
  "func ID ( ID : int ) : [ ] bool ID var { : bool ID [ ( - 123 ) ] [ ( - 123 ) ] = false }",
  "func ID ( ) : int ) : [ ] bool ID var { : bool ID [ ( - 123 ) ] [ ( - 123 ID ] = false }",
  "func ID ( ) : int ) : [ ] bool ID var { = bool ID [ ( - 123 ) ] [ ( - 123 ID ] : false }",
  "var ID ( ) { var ID : [ - - ( ( ( 123 ) ) ) ] [ ] [ ] bool func ID : int }",
  "ID ID ( ) { var var : [ - - ( ( ( 123 ) ) ) ] [ ] [ ] bool func ID : int }",
  "ID ID } ) { var var : [ - - ( ( ( 123 ) ) ) ] [ ] [ ] bool func ID : int (",
  "func ID ( ) { ID = 123 * 123 * ID [ ID ( ( ( ID ) ) ) ] while - ( ID ) ID } } func { ( ) { }",
  "func ID ( ) { ID = 123 * 123 * ID [ ID } ( ( ID ) ) ) ] while - ( ID ) ID ( } func { ( ) { }",
  "func ID ( ) ID { = 123 * 123 * ID [ ID } ( ( ID ) ) ) ] while - ( ID ) ID ( } func { ( ) { }",
  "func ) ( ID : [ - ( - ( - ( - - ID ) ID ) ] int ) { }",
  "func ( ( ID : [ - ) - ( - ( - - ID ) ID ) ] int ) { }",
  "ID ( ( ID : [ - ) - ( - ( - - func ) ID ) ] int ) { }",
  "] ID ( ) : [ 123 * false + ( false / false == ID ) ] [ func bool { }",
  "] ID ( ) func [ 123 * false + ( false / false == ID ) ] [ : bool { }",
  "] ID { ) func [ 123 * false + ( false / false == ID ) ] [ : bool ( }",
  "func ID ( ID : int , ID : bool ) { return ( - ( ( - ID func ) ) } ) ID ( ) { }",
  "func ID : ID ( int , ID : bool ) { return ( - ( ( - ID func ) ) } ) ID ( ) { }",
  "func ID : ID ID int , ID : bool ) { return ( - ( ( - ( func ) ) } ) ID ( ) { }",
  "func ID ( ID : true ] [ - - ID ( ) * true * - [ + true ] int ) { }",
  "func ID ( ID : true ] [ - - ID ( ) * true * - [ + true ] { ) int }",
  "func ID ( ID : true ] { - - ID ( ) * true * - [ + true ] [ ) int }",
  "func ID ( ) { return } func - ( ID : int , ID : [ ( ID 123 + - ( ID ) + - false ) ] [ ] int ) { }",
  "func ID ( ) { return } int - ( ID : int , ID : [ ( ID 123 + - ( ID ) + - false ) ] [ ] func ) { }",
  "func ID ( ) { return } int - ( ID : int , ID : [ ( ID 123 + - ( ID [ + - false ) ] ) ] func ) { }",
  "func ID ( ) : [ ] int ID var ID : [ ] [ ] [ ID * { ( ID ) ] bool } func ID ( ) { }",
  "ID ID ( ) : [ ] int ID var func : [ ] [ ] [ ID * { ( ID ) ] bool } func ID ( ) { }",
  "ID ID ( ] : [ ] int ID var func : [ ) [ ] [ ID * { ( ID ) ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int return ( ] ( ) [ ( false ) ID [ 123 ] ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int return ( ] ( ) [ ( false ) ID [ 123 ] ) } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID ID int return ( ] ( ) [ ( false ) ID [ 123 ] ) } func : ( ) { }",
  "func ID ( : : int { var ID ) [ ] int var ID : int ID [ ( - ID ) ] [ 123 ] = ( ( - ( ( 123 ) ) ) ) } func ID ( ) { }",
  "func ID ( : : int { var ID ) [ ] int var ID : int ID [ ( - ID ) ] [ 123 ] = - ( ( ( ( 123 ) ) ) ) } func ID ( ) { }",
  "func ID ( : : int { var ID ) = ] int var ID : int ID [ ( - ID ) ] [ 123 ] [ - ( ( ( ( 123 ) ) ) ) } func ID ( ) { }",
  "func ID ( ) : } { var ID : bool while 123 * ( true / ID ( ) ) { bool } func ID ( ) { }",
  "func ID ( ) : } { bool ID : var while 123 * ( true / ID ( ) ) { bool } func ID ( ) { }",
  "func ID ( ) : / { bool ID : var while 123 * ( true } ID ( ) ) { bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool return true ) 123 - ( ( ID ) >= - - - ( ( false ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool return true ) 123 - ( ( ID ) >= - - - ( func false ) ) } ( ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int while false == ID / - { [ ( 123 ) ] / ID ID } print true }",
  "func ID ( ) { var ID : bool var ID ID int while false == : / - { [ ( 123 ) ] / ID ID } print true }",
  "func int ( ID : [ ( ( true < ( ( ID ) ) ) ) ] [ ] [ ] ID ) { } func ID ( ) { }",
  "func int ( ID : [ ( ( true < ( ( ] ) ) ) ) ] [ ] [ ID ID ) { } func ID ( ) { }",
  "func int ( ID : [ ( ( true < ( ( ] ) ) ] ) ] [ ) [ ID ID ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] bool ) { if ID [ ID ( - ( - - ( ) true ) ) ( ) ] [ - ( 123 ) ] { } }",
  "func ID ( ID : bool , ID : [ ] bool ) { if ID [ ID ( - ( - - ( ) true ) ) ( ) ] [ - ( 123 ) ] { } }",
  "func ID ( ID : ID - - - ( [ [ ID * ( true ) ] [ ( ( ( ( ID ) ) ) ) ] ) ] bool ) { }",
  "func ID ( ) : bool { return } func [ ( ) : [ ] bool { var ID : bool var ID : ID ID ] int }",
  "func ID ( ) : bool { return } func [ ( ) } [ ] bool { var ID : bool var ID : ID ID ] int :",
  "func ID ( ) : bool bool return } func [ ( ) } [ ] bool { var ID : { var ID : ID ID ] int :",
  "func ID ( ID : int , ID : [ - 123 * - false , ( true - ID ) ] int / ID : int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - 123 * - false int ( true - ID ) ] , / ID : int ) { } func ID ( ) { }",
  "func ID ) ID : int , ID : [ - 123 * - false int ( true - ID ) ] , / ID : int ( { } func ID ( ) { }",
  "func ( ( ) : int { while true / false or - ID ( ) [ false ] [ false ] or ID - 123 ) { } }",
  "func ( ( ) : int { while true / false or - ID ( ) false [ ] [ false ] or ID - 123 ) { } }",
  "func ( ( ) : int { while true / false - - ID ( ) false [ ] [ false ] or ID or 123 ) { } }",
  "func ID ( ID : [ 123 + ID [ ID / false ( false ) / false ] [ 123 ] ] bool ) { } func ID ( ) { }",
  "{ ID ( ID : [ 123 + ID [ ID / false ( false ) / false ] [ 123 ] ] bool ) func } func ID ( ) { }",
  "{ ID ( ID : [ 123 + ID [ ID / false ( false ) / false ] ) 123 ] ] bool [ func } func ID ( ) { }",
  "} ID ( ) : [ ] [ false / ID ( 123 * ID [ true ] * ID ) / - ID ] bool { } func ID ( ) { func",
  "} ID ( ) : [ ] [ false / ID / 123 * ID [ true ] * ID ) ( - ID ] bool { } func ID ( ) { func",
  "} ID ( ) : ) ] [ false / ID / 123 * ID [ true ] * ID ) ( - ID ] bool { } func ID ( [ { func",
  "func ID ( ID : int ) { var : : bool var ID ID int print true + 123 * - ID } func ID ( ) { }",
  "func ID ID ( : int ) { var : : bool var ID ID int print true + 123 * - ID } func ID ( ) { }",
  "func ID ID ( : int ) { var : : bool var ID ID int print true + 123 ID - * } func ID ( ) { }",
  "func ID ( ID : bool ) : [ true / ID ( true / ID ( 123 ) * ID ] ) [ ] bool { }",
  "func ID ( ID : bool ) : [ true / ID ( true / ID ( 123 ) * ID ] ) [ ] bool { }",
  "func ID ( ID : bool [ : [ true / ID ( true / ID ( 123 ) * ID ] ) ) ] bool { }",
  "func ID ( ) { if 123 / - [ ID ( ID [ - - ID ] [ true ] ) ] [ ID ] { } { } }",
  "func ID ( ) { if ] / - [ ID ( ID [ - - ID 123 [ true ] ) ] [ ID ] { } { } }",
  "func ID ( ) { if ] ) - [ ID ( ID [ - - ID 123 [ true ] / ] [ ID ] { } { } }",
  "func ID ( ) : 123 { var ID : int var ID : [ ] [ bool <= ID ( true ) ] bool }",
  "func ID ( ) : 123 ] var ID : int var ID : [ { [ bool <= ID ( true ) ] bool }",
  "func ID ( ) : var ] 123 ID : int var ID : [ { [ bool <= ID ( true ) ] bool }",
  "func ID ( ) { call ID ( ( ( ( ) ID ) - ) ) }",
  "( ID func ) { call ID ( ( ( ( ) ID ) - ) ) }",
  "( ( func ) { call ID ( ID ( ( ) ID ) - ) ) }",
  "func ID ( ID : int , ID : [ func bool , ID : int ) : bool { var ID : int var ID : [ ID ] [ ] bool } ] ID ( ) { }",
  "func ID ( ID : int , ID : [ { bool , ID : int ) : bool func var ID : int var ID : [ ID ] [ ] bool } ] ID ( ) { }",
  ": ID ( ID : int , ID func [ { bool , ID : int ) : bool func var ID : int var ID : [ ID ] [ ] bool } ] ID ( ) { }",
  "func ID ( ) { var ID : bool var ] : int if ( true * ID [ - ( ( ( 123 ) ) ) ID * true ) { } }",
  "[ ID ( ) { var ID : bool var ] : int if ( true * ID func - ( ( ( 123 ) ) ) ID * true ) { } }",
  "[ ID ( ) { var ID : bool var ] : int if ( true * ID func - ( ( ( 123 ) ) ) ID * true ) { } }",
  "func ID ( ) : bool { } func ID ( ) var var ID : [ ] bool { ID : bool if - 123 { } }",
  "func ID ( ) : bool { } func ID ( ) var var ID : [ ] bool { ID : bool if - 123 { } }",
  "func ID ( ) : bool { } func ID ( if var var ID : [ ] bool { ID : bool ) - 123 { } }",
  "func ID ( ID : int , ID [ : ID ( ) [ false / false / ( ID ) ] ] bool , ID : [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID [ : ID ( ) [ false bool false / ( ID ) ] ] / , ID : [ ] int ) { } func ID ( ) { }",
  "func ID int ID : int , ID [ : ID ( ) [ false bool false / ( ID ) ] ] / , ID : [ ] ( ) { } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int if ID [ ID ( ) [ ( true ) ] ] [ - ( true ID ] { } call ) ( ) } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : int if ID [ ID ( ) [ ( true ) ] ] [ - ( true ID ] { } call ) { ) } func ID ( ) ( }",
  "func ID ( ) : [ ( ( false * ( ID [ - ID ] [ 123 ] ) ) ) ] bool ) } func ID ( { { }",
  "func ID ( ) : [ ( ( false * ( ID [ - ID ] [ 123 ] ) ) func ] bool ) } ) ID ( { { }",
  "func ID ( ) : [ ( ( false * ( ID [ - ID ] [ 123 ] ) ) func ] bool ) } ) ID ( { { }",
  "func ID ( ) { return 123 >= ID ( ID ( ) [ ( { ) ] ) } func ID ( ) 123 }",
  "func ID ( ) { return 123 >= ID ( ID ( ) [ ( { ) ] ) } func 123 ( ) ID }",
  "func ID ( ) { return 123 >= ID ( ID ( ) [ ( { ) ] ( } func 123 ) ) ID }",
  "func { ( ) : int { ID var ID : bool while ID ( ) * - ( false ) { } } call ID ( ) }",
  "func { ( ) : int { ID var ID : bool while ID ( ) * - ( false ) { } } call ID ( ) }",
  "func { ( ) : int { ID ID var : bool while ID ( ) * - ( false ) { } } call ID ( ) }",
  "func ID ID ID : bool , ( : bool ) { var ID : bool }",
  "func ID ID ID : bool , ( : bool ) bool var ID : { }",
  "func ID ID ID bool bool , ( : bool ) : var ID : { }",
  "func ID ( ) : int { while ID + - ( ( ( ID ) ) ) { } ID = ID ( - ) }",
  "func ID ( ) : int { while ID ID - ( ( ( ID ) ) ) { } + = ID ( - ) }",
  ") ID ( ) : int { while ID ID - ( ( ( ID ) func ) { } + = ID ( - ) }",
  "func ID ( ID : bool ) : [ - ID / ( - true / - 123 - - ( ) ( ( ID ) ) ) ) ( ] bool { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ - ID / ( - true 123 - / - - ( ) ( ( ID ) ) ) ) ( ] bool { } func ID ( ) { }",
  "func ID ( ID : bool ) : [ - ID / ( - true 123 - / - - ( ) ( ( ID ) ) ) ) ( ] bool { } func ID ( ) { }",
  "func : ( ) { var ID ID int } func ID ( ) : int { var ID : bool call ID ( ) }",
  "func : ( ) { var ID ID int { func ID ( ) : int } var ID : bool call ID ( ) }",
  "func : ( ) { var ID ID int { func : ( ) : int } var ID ID bool call ID ( ) }",
  "func : ( ID ID [ ID ( - ID [ 123 / - ( - false ) ] ) ] [ ] int ) { }",
  "func : ( ID ID [ ID ( ] ID [ 123 / - ( - false ) ] ) - [ ] int ) { }",
  "func : ( ID ID [ ] ( ] ID [ 123 / - ( - false ) ID ) - [ ] int ) { }",
  "func ID ( ID : int ) { print - ID [ - ( ID ) ] [ } ] ID",
  "func ID ( ID : int ) { print - ID [ [ ( ID ) ] - } ] ID",
  "func ID ( ID : int - { print ) ID [ [ ( ID ) ] - } ] ID",
  "func ID ( ID : [ ] [ ] int ) { var ID : [ 123 / - ID ( ) * ( ID [ ] ) ] bool var ID : [ ] int }",
  "func ID ( ID : [ ] [ ] var ) { int ID : [ 123 / - ID ( ) * ( ID [ ] ) ] bool var ID : [ ] int }",
  "func ID ( ID : [ ] [ ] var ) { int int : [ 123 / - ID ( ) * ( ID [ ] ) ] bool var ID : [ ] ID }",
  "ID ID ( ) { if ID ( ) [ - ID ( func ) ] [ ( ( - false ) ) ] { } } func ID ( ) { }",
  "ID ID ( ) { if ID ( ) [ } ID ( func ) ] [ ( ( - false ) ) ] { } - func ID ( ) { }",
  "ID ID ( ) { if ID ( ) [ } ID ( func ) ] [ ( ( - false ) ) ] { } - func ID ( { ) }",
  "func ID ( ) : [ true / true and ( / 123 ( ID ) ) / ID ] int { } func ID ( ) { }",
  "func ID ( ) : [ { / true and ( / 123 ( ID ) ) / ID ] int true } func ID ( ) { }",
  "func ID ( ) : [ { / true and ID / 123 ( ID ) ) / ID ] int true } func ( ( ) { }",
  "func ID ( ID : bool ) { var ID : bool } } ID ( ID : int , ID : [ ] [ true ] int , ID : int ) { func",
  "func ID ID ID : bool ) { var ID : bool } } ID ( ID : int , ID : [ ] [ true ] int , ( : int ) { func",
  "func ID ID ID : bool ) { var ID : bool } } ID ( ID : ) , ID : [ ] [ true ] int , ( : int int { func",
  "func ID bool ID : [ ] [ - ( - ID ( ( - 123 ) ) ) ] [ ] [ ] ( ) { } func ID ( ) { }",
  "func ID bool ID : [ ] [ - ( - ID ( ( - 123 ) ) ) ] [ ] [ ] ( ) { } func ID ( ) { }",
  "func ID bool ID : [ ] [ - ( - ID ( ( - 123 ) ) ) ] [ ] [ ( ] ) { } func ID ( ) { }",
  "ID ID ( ) : int { var ID : int ID = ID [ - ( ID ) ] [ ( - func ) ] } func ID ( ) { }",
  "ID ID ( ) : int { var ID : int ID ) ID [ - ( ID ) ] [ ( - func ) ] } func ID ( = { }",
  "{ ID ( ) : int ID var ID : int ID ) ID [ - ( ID ) ] [ ( - func ) ] } func ID ( = { }",
  "func ID ( ) { var ID : bool ID ID : int return } func ID ( ID : bool , var : int ) { var ID : int }",
  "func ID ( ) { var ID : bool ID ID : int return } func ID ( ID : bool , var : int ) ID var { : int }",
  "func ID ( ) { var ID : bool ID ID ID int return } func ID ( ID : bool , var : int ) : var { : int }",
  "func ID ( ID : int , { : [ 123 * ( ( - - ( false ) ) ) * 123 ] int , ID : [ ] [ ] int ) { } func ID ( ) ID }",
  "func ID ( ID : int , { : [ 123 * ( ( - - ( 123 ) ) ) * false ] int , ID : [ ] [ ] int ) { } func ID ( ) ID }",
  "func ID ( ID : int , { : [ 123 ( ( ( - - * 123 ) ) ) * false ] int , ID : [ ] [ ] int ) { } func ID ( ) ID }",
  "func ID ( ) : int { - - ID [ - ( - - print ID ) ] [ ID ] }",
  "func ID ( ] : int { - - ID [ - ( - - print ID ) ) [ ID ] }",
  "func - ( ] : int { ID - ID [ - ( - - print ID ) ) [ ID ] }",
  "func ( ID ) { var ID : [ - ( ( ID ( ) [ 123 ] ) ) ] int }",
  "func ( ID ) { var ID : [ - ( ( ID ( ) [ ] ] ) ) 123 int }",
  "func ( ID ) { var ID : [ - ( ( ID ( ] [ ] ) ) ) 123 int }",
  "func ID ( ID : [ ( ID * false ] - - ( ID ) ) > bool ) { }",
  "func ID ( ID : [ ( ID * false ] > - ( ID ) ) - bool ) { }",
  "func ID ( ID : [ ( ID * false ] > - - ID ) ) ( bool ) { }",
  "func ID ( ) : bool { var ID ID int return ID ( - ( - - : ) ) }",
  "func ID } ) : bool { var ID ID int return ID ( - ( - - : ) ) (",
  "func ID } ) : bool { var ID ID int return ID ( - ( ) - : - ) (",
  "func ID ( ) { ] ID : int ID ( - ID ( ) [ ( ( ( ID ) ) ) var ) = 123 ID = - 123 } func ID ( ) { }",
  "func ID ( ) { ] ID : int ID ( - ID ( 123 [ ( ( ( ID ) ) ) var ) = 123 ID = - ) } func ID ( ) { }",
  "func ID ( ) { ] ID : int ID 123 - ID ( ( [ ( ( ( ID ) ) ) var ) = 123 ID = - ) } func ID ( ) { }",
  "func ID ( ID ID [ ] bool , ID : int ) { var : : bool var ID : [ ID [ 123 ] ] [ ] bool }",
  "func ID ( ID ID [ ] bool , ID : int ) { var : : bool var ID : [ ID [ 123 ] ] [ ] bool }",
  "func ID ( ID ID [ ] bool , ID : int : { var : : bool var ID ) [ ID [ 123 ] ] [ ] bool }",
  "func ID ( 123 : int ) { if ID - - ( ID / ID / - ID ) { } } func ID ( ) { }",
  "func ID ( 123 : int ) { - ID - if ( ID / ID / - ID ) { } } func ID ( ) { }",
  "func ID ( 123 : int ) - - ID { if ( ID / ID / - ID ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ - - ( ( true / ] ( - 123 ) ) ) - [ ] bool }",
  "func ID ( ) { var ID : [ ] true - - ( ( [ / ] ( - 123 ) ) ) - [ ] bool }",
  "func ID ( ) { var ID : [ ] true - - ( ( [ / ] ( - 123 ) ) ) - [ ] bool }",
  "func ID ( ) { var ID : bool { var ID : bool return func ID ( ) [ ( - ID ) ] ) } print ID } ( ID ( ) { }",
  ": ID ( ) { var ID : bool { var ID func bool return func ID ( ) [ ( - ID ) ] ) } print ID } ( ID ( ) { }",
  ": ID ( ) { var ID : bool { var ID func bool return func ID ( ) [ ( - ID ) ] ) } } ID } ( ID ( ) { print",
  "func ID ( ) : [ - ( - ID ( ID [ - ( true ) ] ID ( ( [ ) ) ] ) ) ] int { } func ID ( ) { }",
  "func ID ( ) : [ - ( - ID ( ID [ - ( true ) } ID ( ( [ ) ) ] ) ) ] int { ] func ID ( ) { }",
  "func ID ( ) : [ - ( - ID ( ID [ - ( ( ) } ID ( true [ ) ) ] ) ) ] int { ] func ID ( ) { }",
  "func var ( ID : bool ) : bool { ID ID : int var ID : bool return 123 * ID / ( ID ) }",
  "func var ( ID : bool ) : ID { ID ID : int var ID : bool return 123 * bool / ( ID ) }",
  "func var ( ID : bool ) : ID { ID ID var int : ID : bool return 123 * bool / ( ID ) }",
  "func ID ( ) : bool { var ID : int print ( 123 - ID ( ) [ - ID ] ) if - ( ID ) func } } { ID ( ) { }",
  "func ID ( ) : bool { var ID : int print ( 123 - ID ( ID [ - ID ] ) if - ( ) ) func } } { ID ( ) { }",
  ") ID ( ) : bool { var ID : int print ( 123 - ID ( ID [ - ID ] ) if - ( func ) func } } { ID ( ) { }",
  "false ID ( ) { var ID : int print ( ID [ ID ( ) * func ] ) } func ID ( ) { }",
  "false ID int ) { var ID : ( print ( ID [ ID ( ) * func ] ) } func ID ( ) { }",
  "false ID int ) { var ID { ( print ( ID [ ID ( ) * func ] ) } func ID ( ) : }",
  "while ID ( ID : bool , ID : int , ID : bool ) : bool { func ( ( ID ) ) { } { } }",
  "while ID ( ID : bool , ID : int , ID : bool ) : bool { func ( ( ID { ) { } ) } }",
  "while ID ( ID : bool , ID : int , ID : ) bool : bool { func ( ( ID { ) { } ) } }",
  "func ID ( ID : [ ( [ true * true - - ] ( ( ID ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func - ( ID : [ ( [ true * true ID - ] ( ( ID ) ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func - ( ID : [ ( [ true * true ID - ] ( ( ID ) ) ) ] [ { bool ) ] } func ID ( ) { }",
  "func ID ( ID : bool , ID : ID ) { var ID : [ ID - true - ( ( int ) ) ] bool var ID : int } func ID ( ) { }",
  "func ] ( ID : bool , ID : ID ) { var ID : [ ID - true - ( ( int ) ) ID bool var ID : int } func ID ( ) { }",
  "func ] ( ID : bool , ID : ID ) { var ID : [ ID - true : ( ( int ) ) ID bool var ID - int } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) { var ID : } var ID : bool call ID ( ) { { bool } } func ID ( ) { }",
  "( ID ( ID : bool , ID : int , ID : int ) { var ID : } var ID : bool call ID ( ) { { bool } } func ID func ) { }",
  "( ID ( ID : bool , ID : int , ID : int ) { var ID : } var ID : bool call ID ( } { { bool } ) func ID func ) { }",
  "func ID ( ) { var ID : bool ] func ID ( ID : int , ID : bool ) : bool { var ID : [ false } int }",
  "func ID ( ) { ( ID : bool ] func ID var ID : int , ID : bool ) : bool { var ID : [ false } int }",
  ") ID ( ) { ( ID : bool ] func ID var ID : int , ID : bool func : bool { var ID : [ false } int }",
  "func ID ( ) { var ID : bool var ID : [ ] int print ( - 123 / true ) ) - ( - 123 if { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID ( [ ] int print : - 123 / true ) ) - ( - 123 if { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID ( [ ] int print : ( 123 / true ) ) - - - 123 if { } } func ID ( ) { }",
  "( ID ( ) { } func ID func ) : [ ID [ 123 * - - true * ( 123 ) ] ] int { }",
  "( ID ( ) { } func ID func ) : [ * [ 123 ID - - true * ( 123 ) ] ] int { }",
  "( ID ( ) { } func ID func ) : [ * [ 123 ID - - true * ( ) 123 ] ] int { }",
  "func + ( ID : bool , ID : int , ID : [ ID [ 123 ID - ( ID ) + ID ] [ 123 ] ] int ) { } func ID ( ) { }",
  "func + ( ID : bool , ID : int , ID : [ ID [ 123 ID - ( ID ] + ID ) [ 123 ] ] int ) { } func ID ( ) { }",
  "func + bool ID : ( , ID : int , ID : [ ID [ 123 ID - ( ID ] + ID ) [ 123 ] ] int ) { } func ID ( ) { }",
  "func ID ( ) : bool { var ID : ) var ID : [ ] [ ] bool call ID ( 123 - ( - 123 ) bool { } }",
  "func ID ( ) call bool { var ID : ) var ID : [ ] [ ] bool : ID ( 123 - ( - 123 ) bool { } }",
  "func ID ( ) call bool { var ID : ) var ID : [ ] [ ] 123 : ID ( 123 - ( - bool ) bool { } }",
  "func ID ( ID ID [ ( ID ( ) / ( - ( : ) ) ) ] bool ) { }",
  "func ID ( ID ID [ ( ID ( ) / ( - ) : ( ) ) ] bool ) { }",
  "func ID ( ID ID [ ( { ( ) / ( - ) : ( ) ) ] bool ) ID }",
  "func ID ( ) { ID ) - - - ID ( true * ID ) ( = ( ( true ) ) { } } func ID ( ) { }",
  "func ID ( ) ) ID ) - - - ID ( true * ID ) ( = ( ( true ) { { } } func ID ( ) { }",
  "func ID ( ) ) ID ) - - - } ( true * ID ) ( = ( ( true ) { { } ID func ID ( ) { }",
  "func ID ( ) { print ( ( ( func ( ( - ( ID ) ) ) ) ) ) print ID } ID ID ( ) { }",
  "func ID ( ( { print ( ( ) func ( ( - ( ID ) ) ) ) ) ) print ID } ID ID ( ) { }",
  "func ID ( ( { print ( ( ) func ( ( - ( ID ) ) ) ) ID ) print ID } ) ID ( ) { }",
  "func ID ( ID : int , ID : int ) : [ 123 * { / ( ( ID ) ) ] [ ] [ ] [ ] [ ] bool 123 } func ID ( ) { }",
  "func ID ( var { ) ID : int { } }",
  "func ID ( var } ) ID : int { } {",
  "func ID ( ) : int { var ID : [ ] [ ] [ ] bool var ID if int : ID ( ) { } }",
  "func ID var ) : int { var ID : [ ] [ ] [ ] bool ( ID if int : ID ( ) { } }",
  "func ID var ) : int { var ID : [ ] [ ] [ ] bool ( ID if int : ID ( ) { } }",
  "func ID ( ) ID [ ( - - ID [ false * false / 123 ] [ ( ( - : ) ) ] ) ] int { } func ID ( ) { }",
  "func ID ( ) ( [ ( - - ID [ false * false / 123 ] [ ( ( - : ) ) ] ) ] int { } func ID ID ) { }",
  "func ID ( ) : [ ] [ ] int { var ID : bool var ID : int } func ID ( ID : bool ] bool , ID : [ , ID : [ ] bool ) { }",
  "func ID ( ) : [ ] [ ] int { var ID : bool func ID : int } var ID ( ID : bool ] bool , ID : [ , ID : [ ] bool ) { }",
  "func ID , ) : [ ] [ ] int { var ID : bool func ID : int } var ID ( ID : bool ] bool , ID : [ ( ID : [ ] bool ) { }",
  "func ( ( ) : bool { var ID : [ false * true * ( true * 123 ) ] int } func ID ID ) { }",
  "} ( ( ) : bool { var ID : [ false * true * ( true * 123 ) ] int func func ID ID ) { }",
  "} ( ( ) : bool { var * : [ false * true ID ( true * 123 ) ] int func func ID ID ) { }",
  "func var ( ) { var ID : bool ID ID : [ ( 123 or - - ( ID ) ) ] bool }",
  "ID var ( ) { var ID : bool ID ID : [ ( 123 or - - ( func ) ) ] bool }",
  ") var ( ) { var ID : bool ID ID : [ ( 123 or - - ( func ID ) ] bool }",
  "func ID ( ID : int , ID : int , ID : [ ] bool ) { var ID : [ ] bool bool ID : var return - false } func ID ( ) { }",
  "func ID : ID : int , ID : int , ID : [ ] bool ) { var ID : [ ] bool bool ID ( var return - false } func ID ( ) { }",
  "func ID : ID : int , ID { int , ID : [ ] bool ) { var ID : [ ] bool bool ID ( var return - false } func ID ( ) : }",
  "func ID ( ID : [ ] [ ] bool , ID : ID - [ / ID / - ID ] [ ] bool , ID : int ) { }",
  "func ID ( ID : [ ] / ] bool , ID : ID - [ [ ID / - ID ] [ ] bool , ID : int ) { }",
  "func ID ( ID : bool , ID : int ) { { ID [ } ( ) [ true ] ] [ true ] = 123 } call ID ( ) ID func ID ( ) { }",
  "func ID ( ID : bool , ID : int ) { { ID [ } ( ) [ true ] ] [ true ] = 123 } ID ID ( ) ID func call ( ) { }",
  "func ID ( ID : bool , ID : int ) { { ID [ } ( ) [ true ] ] [ true ] { 123 } ID ID ( ) ID func call ( ) = }",
  "func ID ( ID : int , ID : bool ) : int { var ID : [ - true / - ID * ID ] var ] int [ ID : bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : int { ID ID : [ - true / - ID * var ] var ] int [ ID : bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ID : int { ) ID : [ - true / - ID * var ] var ] int [ ID : bool } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID ( ) * ID ( ) * ] 123 >= true ] [ - [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ] [ ID ( ) * ID ( ) * ID 123 >= true ] [ - [ ] [ ] bool ) { } func ] ( ) { }",
  "func ID ( ID : [ ] [ ID ( ) * ID ( ) * ID 123 >= true ] [ - [ ] [ ] bool ) { } func ] ( ) { }",
  "func ID ( int { var ID : bool } func ID ( ) { var ID : ) while - - - ( true ) { } }",
  "func ID ( int { var ID : bool } func ID ( ) { var ID : - while - - ) ( true ) { } }",
  "ID ID ( int { var ID : bool } func func ( ) { var ID : - while - - ) ( true ) { } }",
  "func ID ( ID : int , ID : [ ID * - true - * ID - - - - ( ( - 123 ) ) ] [ ] int , ID : int ) { }",
  "func ID ( ID : int , ID : [ ID * - true - * ID - - - - ( ( - 123 ) int ] [ ] int , ID : ) ) { }",
  "func ID ( ID : bool ) : bool { var ID : int ) ID : bool if ID ( ID var { } } func ID ( ) { }",
  "func ID ( ID : bool ) : bool { ( ID : int ) ID : bool if ID ( ID var { } } func ID var ) { }",
  "func ID ( ID : bool ) : bool { ( ID ID int ) : : bool if ID ( ID var { } } func ID var ) { }",
  "func ID ( ) : [ ] int { var ID : bool { var ID ( [ ( : - false ) ) ] bool } { } }",
  "] ID ( ) : [ ] int { var ID : bool { var ID ( [ ( : - false ) ) func bool } { } }",
  "func ID ( ) : [ - ( ( - - 123 * false - - ( ( - - ID ) ] - 123 ) ) ) [ ] bool { } func ID ( ) { }",
  "func ID ( ) : [ - ( ( - - 123 * false - - ( ( - - ID ) ] - 123 ) ) ) [ ] ID { } func bool ( ) { }",
  "[ ID ( ID : [ false / ( ID [ - true * ID ] ) ] func ] [ ] [ ] int ) { } func ID ( ) { }",
  "[ ID ( ID : [ false / ( ID ( - true * ID ] ) ] func ] [ ] [ ] int ) { } func ID [ ) { }",
  "[ ID ( ID : [ false / ( ID ] - true * ID ] ) ] func ] [ ] [ ( int ) { } func ID [ ) { }",
  "func ID ( ID : int { var ) : bool var ID : int return } func ID ( ) { var ID : bool var ID : [ ] bool }",
  "func ID ( ID : int { var ) : bool var ID : int return } func ID ( ) { var ID : bool var ID : [ ] bool }",
  "func ID ( ID : int { var ) : bool var ID : int return } [ ID ( ) { var ID : bool var ID : func ] bool }",
  "func ID ( ) : [ ] int { var ID : bool } func ID ( ID : ID , ID : bool , ID : int ) : int { var ID : int var bool : int }",
  "func ID ( ) var [ ] int { var ID : bool } func ID ( ID : ID , ID : bool , ID : int ) : int { : ID : int var bool : int }",
  ": ID ( ) var [ ] int { var ID : bool } func ID ( ID func ID , ID : bool , ID : int ) : int { : ID : int var bool : int }",
  "func ID ( ) { var ID : bool var ID : true [ and - 123 - 123 * ID / - 123 and false ] int }",
  "func ID ( ] { var ID : bool var ID : true [ and - 123 - 123 * ID / - 123 and false ) int }",
  ") ID ( ] { var ID : bool var ID : true [ and - 123 - 123 * ID / - 123 and false func int }",
  "func ID ( { : [ ID ( - ID ( ) [ ID [ ( - true ) ] ] ) ] bool ) ID }",
  "func ID ( { : [ ID ( - ) ( ID [ ID [ ( - true ) ] ] ) ] bool ) ID }",
  "func ID ( { : ID ID ( - ) ( ID [ [ [ ( - true ) ] ] ) ] bool ) ID }",
  "func ID ( ) : bool { if 123 * ID ID / false + 123 == false { } print 123 } func - ( ) { }",
  "func ID ( ) : bool { if 123 * ID ID / false func 123 == false { } print 123 } + - ( ) { }",
  "func ID func ) : bool { if 123 * ID ID / false ( 123 == false { } print 123 } + - ( ) { }",
  "func ID ( ID , int : ID : int , ID : int ) { var ID : bool }",
  "func ID ( ID , int : ID : int , ID : } ) { var ID : bool int",
  "func ID ( ) : [ ] bool { var ID : int print 123 - true / ID [ ( ( ID ) ) ] ID [ ] } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : int print 123 - true / ID [ ( ( ID ) ) ] ID [ ] } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : int print 123 - true / ID [ ( ( ID ) ) ] ID [ ] } func ID ( ) { }",
  "func ID ( ) : bool ] [ { var ID : bool { var ID : bool if ( true ) { } } }",
  "func ID ( ) : bool ] [ { var ID : bool { var ID : bool if ( true ) { } } }",
  "func ID ( ) : bool bool [ { var ID : ] { var ID : bool if ( true ) { } } }",
  "func ID ( ID : [ ( ID ( ) and ID ( ) / ( ID ) * true and - ( ( ( ] ( - ( - - ( ( 123 ) ) ) ) ) ) ) ) ) ( [ ] [ ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ( ID ( ) and ID ( ) / ( ID ) * true and - ( ( ) ] ( - ( - - ( ( 123 ) ) ) ) ) ) ( ) ) ( [ ] [ ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ( ID ( ) and ID ( ) / ( ID ) * true and - ) ( ) ] ( - ( - - ( ( 123 ) ) ) ( ) ) ( ) ) ( [ ] [ ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "} ID ( ) : int { var ID : bool { var ID : bool var ID : [ ( ( ID ) ) ] bool } while ( ID ) { } func",
  "} ID ( ) : int { var ID : bool { var ID : bool var ID : [ ( ( ID ) ) ] bool } { ( ID ) while } func",
  "} ID ( ) : int { var ID : bool { var ID : bool var ID : [ ( ( ID ) ) while bool } { ( ID ) ] } func",
  "func ID ( ) { var ID : bool var ID : bool ID = ( { ID * ( true ) ) while false - } } func ID ( ) { }",
  "func ID ( ) { var ID : bool var ID : bool ID = ( { ID * ( true ) ) ( false - } } func ID while ) { }",
  "func ID ( ) { var ID : bool var ID } bool ID = ( { ID * ( true ) ) ( false - : } func ID while ) { }",
  "func ID ( ID : [ ID } ) [ - - - ID * - ( - true ) ] [ - true ] ] [ ] int ) { (",
  "func ID ( ID : [ - } ) [ - ID - ID * - ( - true ) ] [ - true ] ] [ ] int ) { (",
  "func ID ( - : [ - } ) [ - ID - ID * ID ( - true ) ] [ - true ] ] [ ] int ) { (",
  "func ID ( ID : [ ] [ false - ID ( ID [ ID ] [ ( false ) ] ) ] int ) { } func ) ( ID { }",
  "func ID ( ID : [ ] ID false - ID ( [ [ ID ] [ ( false ) ] ) ] int ) { } func ) ( ID { }",
  "func ID ( ID : [ ] ID false - } ( [ [ ID ] [ ( false ) ] ) ] int ) { } func ) ( ID { ID",
  "- ID ( ) : [ ID ( ) * ( ID ( ( ( ( - func - ID ) ) ) ) ) ] int { }",
  "- ID ( ) : [ ID ( ) ] ( ID ( ( ( ( - func - ID ) ) ) ) ) * int { }",
  "- ID ( ) : [ ID ( ) ] ( ID ( ( ( ( - func - ID ) ) ) ) ) * int { }",
  "func ID ( ID : bool , ID : int , ID : int ) ) var ID : int var ID : bool while ( false ) { } } func ID ( { { }",
  "func ID bool ID : ( , ID : int , ID : int ) ) var ID : int var ID : bool while ( false ) { } } func ID ( { { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { { var ID : [ : bool var ID ] [ false ] int } ID = ( ( ( - - 123 ) ) ) }",
  "func ID ( ID : bool , ID 123 bool , ID : int ) { { var ID : [ : bool var ID ] [ false ] int } ID = ( ( ( - - : ) ) ) }",
  "func ID : ID : bool , ID 123 bool , ID : int ) { { var ID : [ : bool var ID ] [ false ] int } ID = ( ( ( - - ( ) ) ) }",
  "func ID ( ) { var ID : int if ID [ ( ( * false ) ] [ ( ( true ID ) ) ) ] { } }",
  "func ID ( ) { var ID : int if ID [ ( ( * false ) ] [ ( ( true ID ) ) ) ] { } }",
  "func ID ( ) { var ID : true if ID [ ( ( * false ) ] [ ( ( int ID ) ) ) ] { } }",
  "func ID ( ) : bool { if false + ID ( ( ( 123 - ) ) ) - ID { } { } } func ID ( ) { }",
  "func ID ( ) : bool { if false + ID } ( ( 123 - ) ) ) - ID { } { } ( func ID ( ) { }",
  "func ID ( ) : bool { if false + ID } ( ( 123 - ) ) ) - ID { } { ) ( func ID ( } { }",
  "func ID ( ) : [ ] bool { return ID / true + 123 / ( false ) * ID } func ID ( } { )",
  "func ID ( ) : 123 ] bool { return ID / true + [ / ( false ) * ID } func ID ( } { )",
  "func ID ( ) : 123 ] bool { return ID / true false [ / ( + ) * ID } func ID ( } { )",
  "func ID ( ) ( bool { var ID : int var ID : int if ID [ : ID ) ] [ - 123 ] { } }",
  "func ID ( ) } bool { var ID : int var ID : int if ID [ : ID ) ] [ - 123 ] { } (",
  "func ID ( ) } bool { var ID : int var ID : int if { [ : ID ) ] [ - 123 ] ID } (",
  "func ID ( ) { { var ID : bool var ID : int print ( { ID ) ) while true ( } } } func ID ( ) { }",
  "func ID ( ) { { var ID : bool var ID : int print { { ID ) ) while true ( } } } func ID ( ) ( }",
  "func ID } ) { { var ID : bool var ID : int print { { ID ) ) while true ( } } ( func ID ( ) ( }",
  "func ID ( + : [ ] int , ID : [ ] [ ] [ false * 123 ID ID ( ) + ID ] bool ) { }",
  "func ID ( bool : [ ] int , ID : [ ] [ ] [ false * 123 ID ID ( ) + ID ] + ) { }",
  "func ID ( bool ) [ ] int , ID : [ ] [ ] [ false * 123 ID ID ( : + ID ] + ) { }",
  "func ID ( ID : bool { : int ) var ID : int var ID : [ ] [ ] int ID ( ) = ( ( ID ) ) }",
  "func ID ( ID : ID { : int ) var ID : int var bool : [ ] [ ] int ID ( ) = ( ( ID ) ) }",
  "func ID ( ID : ID { : int ) var ID : int : bool var [ ] [ ] int ID ( ) = ( ( ID ) ) }",
  "func ID ( ) { var ID : int var ID : int while ( ( ( - - ID - - false ID ) ) ) { } }",
  "func ID ( ) : var ID { int var ID : int while ( ( ( - - ID - - false ID ) ) ) { } }",
  "func ID ( ) : var ID { int var ID : int while - ( ( - ( ID - - false ID ) ) ) { } }",
  "func ID ( ID : int ID ID : int ) { var ID : [ ID ( ) [ , [ ID ] ] ] bool var ID : int }",
  "func ID ( ID : int ] ID : int ) { var ID : [ ID ( ) [ , [ ID ] ] ID bool var ID : int }",
  "func ID ( ID : int ] ID : int ) { var ID : [ ID ( ) [ , : ID ] ] ID bool var ID [ int }",
  "func ID ( ID : int , ID : [ ] bool ) : bool { var ID : [ ] call call ID ( ID ) bool ID ( ) }",
  "func ID ( ID : int , ID : [ ] bool ) : bool { var ID : [ ] call call ID ( ID ) bool ID ( ) }",
  "func ID ( ID : int ( ID : [ ] bool ) : bool { var ID : [ ] call call ID , ID ) bool ID ( ) }",
  "func ID ( ID : int ) { return 123 / + * 123 - ( false - ( - ID ) + - ID ) false ID } func ID ( ) { }",
  "func ID ( ID : int 123 { return ) / + * 123 - ( false - ( - ID ) + - ID ) false ID } func ID ( ) { }",
  "func ID ( ID : int 123 { return ) / + 123 * - ( false - ( - ID ) + - ID ) false ID } func ID ( ) { }",
  "func ID ( ID : bool ) [ : ] int { var ID : [ - false or 123 * 123 / - - ( false ) ] bool var ID : bool }",
  "func ID ( ID : bool ) [ : ] int { var ID : [ - false or 123 * 123 / - - ( false ) ] bool var ID : bool }",
  "func ID ( ID : bool } [ : ] int { var ID : [ - false or 123 * 123 / - - ( false ) ] bool var ID : bool )",
  "func ID ( ID : bool , ID : [ ( ( false <= - - ) ) ) ] [ ] [ ] bool ID { } func ID ( ) { }",
  "func ID ( ID : : , ID bool [ ( ( false <= - - ) ) ) ] [ ] [ ] bool ID { } func ID ( ) { }",
  "func ID ( ] : : , ID bool [ ( ( false <= - - ) ) ) ] [ ID [ ] bool ID { } func ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( ID [ ( 123 / ( 123 ) / func ) ] ) while ( ( - ID ) ) { } } true ID ( ) { }",
  "func ID ( ) { var ID : int 123 ID ( ID [ ( call / ( 123 ) / func ) ] ) while ( ( - ID ) ) { } } true ID ( ) { }",
  "ID ID ( ID : [ ] [ ID [ ( func [ false ] ) ] ] int ) { } func ID ( ) { }",
  "ID ID ( ID : [ ] [ ID [ ( func [ false ] ) ] ] int ) { } func ID ( ) { }",
  "ID ID ( ID : [ ] [ ID [ ( func [ false ] ) ] ] int ) { } func ID ( ) { }",
  "func ID , ID : bool ( ID : int ) : [ ] bool { var ID : int return } func ID ( ID : int , ID : int ) { }",
  "func ID , ID : bool ( ID : int ) : [ ] bool { var ID : int return , func ID ( ID : int } ID : int ) { }",
  "] ID , ID : bool ( ID : int ) : [ func bool { var ID : int return , func ID ( ID : int } ID : int ) { }",
  "func ID ( [ : ID ] bool ) : int { var ID : int var ID : [ - ID ( ) [ ( ( ID ) ) ] [ 123 ] ] int } func ID ( ) { }",
  "func ID ( [ : ID ] bool ) : int { var ID : int var ID : [ - ID ( ) [ ( ) ID ) ( ] [ 123 ] ] int } func ID ( ) { }",
  "func ID ( [ : ID ] bool ) : int { var ID : int var ID : [ - ID ( ) [ ( ) ID ) ( ] [ 123 ] ] int } func ID ( ) { }",
  "func ID ( ) { var ID : bool while 123 < ID ] - ID [ - true [ [ false ] ] [ ID ] { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool while 123 < ID ] - - [ ID true [ [ false ] ] [ ID ] { } } func ID ( ) { }",
  ") ID ( ) { var ID : bool while 123 < ID ] - - [ ID true [ [ false ] ] [ ID ] { } } func ID ( func { }",
  "func ID ( ID : int , ID : [ ] bool , ID : [ ) ID ( ( ID ) ( ) ] int ) { }",
  "func ID ( ID : int , ID : [ ] bool , int : [ ) ID ( ( ID ) ( ) ] ID ) { }",
  "func ID ( ID : int , : ID bool , ID : [ ] [ ] bool ) { if ( ( - 123 ) ) { } ID = ID }",
  "func ID ( ID : int , : ID bool , ID : [ ] [ ] bool ) { if ( = - 123 ) ) { } ID ( ID }",
  "func ID : ID : bool , ID ( int , ID : int ) { var ID : [ ] bool print true * - - ( ID ) / 123 } func ID ( ) { }",
  "func ID : ID : - , ID ( int , ID : int ) { var ID : [ ] bool print true * - bool ( ID ) / 123 } func ID ( ) { }",
  "func ID ( ) : [ ] int ( var ID : int } func ID { ) : int { var ID : bool var ID : bool call ID ( ) while - ( ID ) { } }",
  "func ID ( ) ID [ ] int ( var ID : int } func ID { ) : int { var ID : bool var : : bool call ID ( ) while - ( ID ) { } }",
  "func ID ( ) ID [ ] int ( var ID : int } func ID { } : int { var ID : bool var : : bool call ID ( ) while - ( ID ) { } )",
  "func ID ( ) { / ID : int var ID : int call ID ( ) print ( true var - - ID / false ) }",
  "func ID ( call { / ID : int var ID : int ) ID ( ) print ( true var - - ID / false ) }",
  "func call ( ID { / ID : int var ID : int ) ID ( ) print ( true var - - ID / false ) }",
  "func ID ( ID : [ ] int , ID : bool ) : bool { var ID : [ ( ] [ ID ] ) ] [ ] [ ID int var ID : [ ] [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool ) : bool { var ID : [ [ ] [ ID ] ) ] [ ] ( ID int var ID : [ ] [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool ) : bool { var ID : [ [ ] [ ID ] ) ] [ [ ( ID int var ID : [ ] ] ] [ ] [ ] bool } func ID ( ) { }",
  "func ID [ ) { var ID : [ ] int var ID : [ ] bool print 123 * - ID ( ( ID ) ] [ ID ] } func ID ( ) { }",
  "] ID [ ) { var ID : [ ] int var ID : [ ] bool print 123 * - ID ( ( ID ) ] [ ID func } func ID ( ) { }",
  "] ID [ ) { var ID : [ ] int var ID : [ ] bool print 123 * - ID ( ( ID ) ] [ ID func } { ID ( ) func }",
  "func ID ( ID : [ ] int ) : int { var ) : int var ID : int return ( ID ID } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : int { var ) : int ID var : int return ( ID ID } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : int { var ) : ID int var : int return ( ID ID } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] ] ] [ ] [ ] [ ] [ [ [ ] [ ] int , ID : int ) { }",
  "func ID ( ID : bool , ID : [ ] ] ] [ ] [ ] [ ] [ [ [ ] [ ] int , ID : int ) { }",
  "func ID ( ID : bool , ID : [ ] int ] [ ] [ ] [ ] [ [ [ ] [ ] ] , ID : int ) { }",
  "func ) ( ID : [ ] [ ] bool ID : bool { var ID : [ ] [ false and true ] int }",
  "int ) ( ID : [ ] [ ] bool ID : bool { var ID : [ ] [ false and true ] func }",
  "int ) ( ] : [ ] [ ID bool ID : bool { var ID : [ ] [ false and true ] func }",
  "func ID ( ) : bool { { var ID : int { { var ID : bool var ID : int call ID ( false ( ID = - ) - - ID ) } } } while - false { } }",
  "func ID ( ) : bool { { var ID : int { { var ID : ID var ID : int call ID ( false ( bool = - ) - - ID ) } } } while - false { } }",
  "func ID ( ) : bool { { - ID : int { { var ID : ID var ID : int call ID ( false ( bool = - ) - - ID ) } } } while var false { } }",
  "func ID ( ID : int ) : [ ( ( ID [ - 123 ] ) ] bool { } func ID ID ) { }",
  "func ID ( ID { int ) : [ ( ( ID [ - 123 ] ) ] bool { } func ID ID ) : }",
  "func ID ( ID { int ) : [ ( ( ID [ - 123 ID ) ] bool { } func ] ID ) : }",
  "( ID func ID : [ ] bool , ID : bool , ID : int ) : [ ] int { var ID : bool if ID { } { } }",
  "( ID func ID : [ ] bool , ID : bool , ID : int ) : [ ] int { var ID : bool if ID { } } } {",
  "( ID func ID : [ ] bool , ID : bool , ID int : ) : [ ] int { var ID : bool if ID { } } } {",
  "func ID ( ) : var ID : [ ] int var ID { bool return ID [ ( false ) ] }",
  "} ID ( ) : var ID : [ ] int var ID { bool return ID [ ( false ) ] func",
  "} ID ( ) : var ID : [ ] ( var ID { bool return ID [ int false ) ] func",
  "- ID ( ) { while false * ( ( 123 + ( func - ( false ) ) + - ( ID ) ) ) { } }",
  "- ID ( ) { while false * ( ( 123 + ( func - ( false ) ) + - ( ID ) ) ) { } }",
  "- ID ( ) { while false * ( ( 123 + ( func - ( false ) ) } - ( ID ) ) ) { } +",
  "func ID ( ) : [ ( ( - ( false / true * } ( 123 ) ) ) ) ] [ ] bool { - func ID ( ) { }",
  "func ID ( ) ( [ ( : - ( false / true * } ( 123 ) ) ) ) ] [ ] bool { - func ID ( ) { }",
  "func ID ( ) ( [ ( : - ( false / true * } ) 123 ( ) ) ) ] [ ] bool { - func ID ( ) { }",
  "func ID ( ID : int ) { var ID : int var ID : [ bool [ ( ( true ) ) ] [ ] [ ] ] }",
  "bool ID ( ID : int ) { var ID : int var ID : [ func [ ( ( true ) ) ] [ ] [ ] ] }",
  "bool ID ( ID : int ) { var ID : true var ID : [ func [ ( ( int ) ) ] [ ] [ ] ] }",
  "func ID ( call : int ) : [ ] int { var ID : int ID ID ( ) call ID ( ID ( ) ) } func ID ( ) { }",
  "func ID ( call : int ) : [ ] int { var ) : int ID ID ( ) call ID ( ID ( ) ) } func ID ( ID { }",
  "func ID ( call : int ) : [ ] int { var ) : int ID ID ( ) call ID ( ID ( ) ) } func ID ( ID { }",
  "func ID ( ) : [ var int { var ID : int ] ID : bool ID ( false * - ID ) = ( - - ID ) } func ID ( ) { }",
  "func ID ( ) : [ var int { bool ID : int ] ID : var ID ( false * - ID ) = ( - - ID ) } func ID ( ) { }",
  "func ID ( ) : [ var } { bool ID : int ] ID : var ID ( false * - ID ) = ( - - ID ) int func ID ( ) { }",
  "func ID ( ID : bool ) : int * var ID : bool var ID : bool return - 123 * 123 { ID } func ID ( ) { }",
  "func ID ( ID : bool ) : var * int ID : bool var ID : bool return - 123 * 123 { ID } func ID ( ) { }",
  "func ID ( : : bool ) ID var * int ID : bool var ID : bool return - 123 * 123 { ID } func ID ( ) { }",
  "func ID - ) { var ID : bool if ( ( - - false * false > true ) { } print ID }",
  "func ID ( ID : [ ID [ 123 - false / - ID [ 123 ] [ - ID ) / - - ID ] [ ( ID ) ] ] int ) { } func ID ( ] { }",
  "func ID ( ID : [ ID [ 123 - ) / - ID [ 123 ] [ - ID ) / - - ID ] [ ( ID false ] ] int ) { } func ID ( ] { }",
  "func ID ( ID : [ ID [ 123 - ) / - ID [ 123 ] [ - ID ) / - - ID ] [ ( ID false ] ] int ) { } func ID ( ] { }",
  "func ID ( ID : [ ID * ( - / - 123 ( - - - ( 123 ) / ( ID ) ) ) * - ( - ID ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ID * ( - / - 123 ( - - - ( 123 ) / ( ID ) ) func * - ( - ID ) ] bool ) { } ) ID ( ) { }",
  "( ID ( ID : [ ID * func - / - 123 ( - - - ( 123 ) / ( ID ) ) func * - ( - ID ) ] bool ) { } ) ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : int var ID : bool } func ID ( ID { var ) : bool var ID : int }",
  "func ID ( ID func int , ID : bool ) { var ID : int var ID : bool } : ID ( ID { var ) : bool var ID : int }",
  "func ID ( ) { while - ID false ) [ ( - ( / ID ) ] [ ID ] { } }",
  "func ID ( ) { while ) ID false ) [ ( - ( / ID - ] [ ID ] { } }",
  "func ID ( ) { while ) ID false ( [ ( - ) / ID - ] [ ID ] { } }",
  "func ID ( ID : int , ID : [ ] bool , ID : bool ) { var ID : int var ID : bool - = ID - ( ( 123 ) ) }",
  "func ID ( ID : int , ID : [ ] bool ) ID : bool , { var ID : int var ID : bool - = ID - ( ( 123 ) ) }",
  "func ID ( int : ID , ID : [ ] bool ) ID : bool , { var ID : int var ID : bool - = ID - ( ( 123 ) ) }",
  "func ID ( ) : int { var ID } int { : return }",
  "func ID } ) : int { var ID } int { : return (",
  "func ID } ) } int { var ID : int { : return (",
  "func ID ( ) { var ID : bool while true - ] - - ID ( ) [ ( false ) - [ - ( ID ) ] { } if - - false { } }",
  "func ) ( ) { var ID : bool while true - ] - - ID ( ) [ ( false ID - [ - ( ID ) ] { } if - - false { } }",
  "func ( ( ) { var ID : bool while true - ] - - ID ) ) [ ( false ID - [ - ( ID ) ] { } if - - false { } }",
  "func ID ( ) : int { var ID : } var ID : int return ( ( ID ) ) bool",
  "func ID ( ) : int { var : ID } var ID : int return ( ( ID ) ) bool",
  "func ID ( ) : int { var : ID } var ID : int return ( ( ID ) ) bool",
  "func ID ( ) { var ID : [ ] bool ( ID : [ - true * ID / false and var ID ) ] int }",
  "func ID ( ) { var ID : [ ] bool ( ID : [ - true * ID / int and var ID ) ] false }",
  "func ID ( ) { var ID ( [ ] bool : ID : [ - true * ID / int and var ID ) ] false }",
  "func ID ( ID ) bool : : bool { } func ID ( ID : int , ID : int ) : bool { if true { } { } }",
  "func ID : ID ) bool : ( bool { } func ID ( ID : int , ID : int ) : bool { if true { } { } }",
  "func ID : ID ) bool : ( int { } func ID ( ID : int , ID : bool ) : bool { if true { } { } }",
  "func ID ( ID : bool , ID : bool , ID : bool ) : int { var ID : bool var var : [ ] bool { ID ID : int } if 123 { } }",
  "func ID ( ID : bool , ID : int , ID : bool ) : bool { var ID : bool var var : [ ] bool { ID ID : int } if 123 { } }",
  "func ID ( ID : bool , ID : int , ID : bool ) : bool { var ID : bool var var : } ] bool { ID ID : int } if 123 { } [",
  "func : ( ID : int , ID : [ false ] int ) { var ID ID [ ( ( 123 ) ) ] [ ] bool }",
  "func : ( ] : int , ID : [ false ID int ) { var ID ID [ ( ( 123 ) ) ] [ ] bool }",
  "func : ( ] : int , ID : [ false ID int ) { var ID ID [ ( ( 123 ) ) ] [ ] bool }",
  "func ID ( ) { var ID - int var ID : bool return ( : ( ( - - ID ) ) ) }",
  "var ID ( ) { var ID - int func ID : bool return ( : ( ( - - ID ) ) ) }",
  "var ID ( ) return var ID - int func ID : bool { ( : ( ( - - ID ) ) ) }",
  "func ID ( ID : int [ ID : int , ID : [ true / false - - true / true - - ID ] , ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : [ true / false - - true / true - - ID int [ ] [ ] ] ) { } func ID ( ) { }",
  "func ID ( ) : int { { var ID : int ( ( ID [ ID ] [ ( ( - - return ( ( ID ) ) ) ) ) ] ) } } func ID ( ) { }",
  "func ID ( ) : int { { var - : int ( ( ID [ ID ] [ ( ( - ID return ( ( ID ) ) ) ) ) ] ) } } func ID ( ) { }",
  "func ID ( [ : int { { var - : int ( ( ID ) ID ] [ ( ( - ID return ( ( ID ) ) ) ) ) ] ) } } func ID ( ) { }",
  "func ID ( ) : bool [ var ID : bool print ID ( ID ( ) [ ( ( - - ( - - ID ) ) ) ] { ( 123 ) ] ) }",
  "func ID ( ) : bool [ var ID : bool print ID ( ID ( ) [ ( ( - - ( - - ID ) ) ) ) { ( 123 ) ] ] }",
  "func ID ( ) : bool [ var ID : bool print ID - ID ( ) [ ( ( - - ( ( - ID ) ) ) ) { ( 123 ) ] ] }",
  "func ID ( ID bool int , ID : : , ID : [ ] [ ] bool ) : bool { var ID : int var ID : int }",
  "func ID : ID bool int , ID ( : , ID : [ ] [ ] bool ) : bool { var ID : int var ID : int }",
  "func ID : ID bool int , ID ( : , ID : [ ] [ ] : ) : bool { var ID bool int var ID : int }",
  "func ID ( ID : int , ID : [ ( - ( - true * ID ( ) ) ) ] [ ] [ ] int , } : bool ) { ID func ID ( ) { }",
  "func ID ( ID : int , ID : [ ( - ( - true * : ( ) ) ) ] [ ] [ ] int , } ID bool ) { ID func ID ( ) { }",
  "func ID ( ID : int , ID : [ ( - ( - true * : ) ) ( ) ] [ ] [ ] int , } ID bool ) { ID func ID ( ) { }",
  "func ID ( ID : ) ) : [ ] int { var ID : int var ID : int return ( - - - true int } func ID ( ) { }",
  "func ID ( ID : ) ) : [ ] int { var ID : int var int : int return ( - - - true ID } func ID ( ) { }",
  "ID func ( ID : ) ) : [ ] int { var ID : int var int : int return ( - - - true ID } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : [ false ] true * ( ID ( ) ) * int } func ID ( ) { }",
  "func ID ( ) { var ) : int var ID : [ false ] true * ( ID ( ) ID * int } func ID ( ) { }",
  "func ID ( ) { [ ) : int var ID : var false ] true * ( ID ( ) ID * int } func ID ( ) { }",
  "func ID ( ID : int ID , : int , ID : [ ( - ( ( ID ) ) ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : [ ( ( ID ( ) or - func false ) ) ) ] [ ] int { } ( ID ( ) { }",
  "func ID ( ) : [ ( ( ID ( ) or - func false ) ) ) ] [ ] int { } ( ID ( ) { }",
  "func ID ( ) : [ ( ( ID ( ) or - func false { ) ) ] [ ] int ) } ( ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : bool [ var ID : bool var ID : { 123 + - - ID ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : var [ var ID : bool bool ID : { 123 + - - ID ] [ ] int } func ID ( ) { }",
  "var ID ( ID : int , ID : bool ) : func [ var ID : bool bool ID : { 123 + - - ID ] [ ] int } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : ] ID [ ( ID [ false ] [ 123 ] ) int [ ( 123 ) ] = ID }",
  "func ID ] ) : [ ] int { var ID : ] ID [ ( ID [ false ( [ 123 ] ) int [ ( 123 ) ] = ID }",
  "func ID ] ) : [ ] int { var ID : ] ID [ ( ID [ false ( [ 123 ] ) int ( [ 123 ) ] = ID }",
  "func ID ( ID : bool , ID : [ ID <= [ ( ) [ - ( ID ) ] ID false ] ] bool , ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID <= [ ( ) [ - ( bool ) ] ID false ] ] bool , ID : [ ] ID ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ID <= [ ( ) [ - ( bool ) ] ID false ] ] bool , : ID [ ] ID ) { } func ID ( ) { }",
  "func ID ( + { var ID : bool var ID : int print - 123 ) ( ID / ( ID ) * true ) - - - ( - false ) } func ID ( ) { }",
  "func ID ( + { var ID : bool ( ID : int print - 123 ) var ID / ( ID ) * true ) - - - ( - false ) } func ID ( ) { }",
  "func ID ( + { var ID : bool ( true : int print - 123 ) var ID / ( ID ) * ID ) - - - ( - false ) } func ID ( ) { }",
  "func ID ( ] { var ID : [ ) bool var ID : int { var ID : [ ] int } }",
  "func ID ( ] { var ID : } ) bool var ID : int { var ID : [ ] int } [",
  "func ID ( ] bool var ID : } ) { var ID : int { var ID : [ ] int } [",
  "func ID ( ) { var ID : [ true * ( ID ( ) [ - ID ) ] ] bool var ID : bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ true * ( ID func ) [ - ID ) ] ] bool var ID : bool } ( ID ( ) { }",
  "func ID ( ) { var ID : [ true * ( ID func ) [ - ID ) ] ] bool var ID : bool } ( ID ( ) { }",
  "func ID ( ) : bool { var ID : bool var ID : ) return } func ID ( bool { return }",
  "func ID ( ) : bool { var ID : bool ( ID : ) return } func ID var bool { return }",
  "func ID ID ) : bool { var ID : bool ( ID : ) return } func ( var bool { return }",
  "func ID ( ID : int , ID : ID , bool : bool ) : int { }",
  "func ID ( ID : int , ID : : , bool ID bool ) : int { }",
  "func ID ( : : int , ID : ID , bool ID bool ) : int { }",
  "func ID ID ID : [ 123 - ID * - ( ( false <= ( ID ) ) * ID + - ID ] int ) { }",
  "func ID ) ) : [ ] bool { if - - - ( - ( ID ) ) { } if - ID { } } func ID ( ( { }",
  "func ID ) ) : [ ] bool { if - - - ( - ( ID ) ) ID } if - { { } } func ID ( ( { }",
  "func ID ( ID : : , ID : bool , ID int [ ( 123 / ID ( ID ) ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : : , ID : bool , ID ( [ int 123 / ID ( ID ) ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : : , ID : bool , ID ( [ int 123 / ID ( ID ) ) ] [ { [ ] bool ) { } func ID ( ) ] }",
  "func ID ( ID : [ - * ( ( true / - - ( 123 ) ) ) * ( - 123 ( ( ( ID ) ) ) ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ - * ( ( true / - - func 123 ) ) ) * ( - 123 ( ( ( ID ) ) ) ) ] int ) { } ( ID ( ) { }",
  "* ID ( ID : [ - func ( ( true / - - func 123 ) ) ) * ( - 123 ( ( ( ID ) ) ) ) ] int ) { } ( ID ( ) { }",
  "func ID ( ID : int ( : bool { var ID : int var ID : int if 123 - - ID ) ) + ( ( ID ) ) { } print ID } func ID ( ) { }",
  "func ID ( ID : int ( : bool { var ID : int var ID : int if 123 - - ID ) ) + func ( ID ) ) { } print ID } ( ID ( ) { }",
  "func ID ( ID : int ( : bool { var ID : int var ID : int if 123 - - ID ) ) + func ( ID ) ) { } print ID } ( ID ( ) { }",
  "func ID ( ) : [ ] [ ( - ID ( ID } false ] ) ) ] int { } func ID ( ) { [",
  "ID func ( ) : [ ] [ ( - ID ( ID } false ] ) ) ] int { } func ID ( ) { [",
  "ID func ( ) : [ ] [ ( - ID ( ID } false ( ) ) ] int { } func ID ] ) { [",
  "func ID ( ID : [ ] int ] bool ) { var ID : [ ] [ ] [ var ID : [ ] [ ( ID ) ] bool } func ID ( ) { }",
  "func ID bool ID : [ ] int ] bool ) { var ID : [ ] [ ] [ var ID : [ ] [ ( ID ) ] ( } func ID ( ) { }",
  "func ID bool ID : [ ] int ] bool ) { var ID : ( ] [ ] [ var ID : [ ] [ ( ID ) ] [ } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ) : int var ID : [ ID ( ) [ 123 ] [ - false ] ] bool } func ID ( ID { }",
  "func ID ( ID : int ) : bool { var ) : int var ID : [ ID ( ) [ 123 ] [ - false ] ] bool } func ID ( ID { }",
  "func ID ( ID : int ) : bool ( var ) : int var ID : [ ID { ) [ 123 ] [ - false ] ] bool } func ID ( ID { }",
  "func ID ( ) : bool int var ID : [ ] { { var ID : int var ID : [ ] [ ] int { } } }",
  "func ID ( ) : bool int var ID : [ ] ] { var ID : int var ID : [ { [ ] int { } } }",
  "func ID ( ) : bool int } ID : [ ] ] { var ID : int var ID : [ { [ ] int { } var }",
  "func ID ( ID : [ ] [ 123 + false / - - true or ( 123 ) ] int ) } {",
  "func ID ( ID : ( ] [ 123 + false / - - true or [ 123 ) ] int ) } {",
  "func ID ( [ : ID ] int , ID : bool ) { var ID : [ ] [ ] int var ID : [ ] int } func ID ( ) { }",
  "func ID ( [ : ID ] int , ID : bool : { var ID : [ ] [ ] int var ID ) [ ] int } func ID ( ) { }",
  "func ID ( [ : ID ] int , ID : bool : { var ID : [ ] [ ] int var ID ) [ ] int } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var / : [ ] int print ID ID - 123 / ( ID ) }",
  "func ID ( ) : { ] bool [ var / : [ ] int print ID ID - 123 / ( ID ) }",
  "func ID ( var : { ] bool [ ) / : [ ] int print ID ID - 123 / ( ID ) }",
  "func ID ( ID : int , ID : int , int : bool ) { var ID : [ ( ( ID ) ) ] [ ] [ ] ID var ID : bool } func ID ( ) { }",
  "func ID ( ID : int , ID : : , int : bool ) { var ID int [ ( ( ID ) ) ] [ ] [ ] ID var ID : bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : int func ID : bool ) { var ID : bool call ID ( ) while - - ( ID ) { } } , ID ( ) { }",
  "func - ( ID : bool , ID : int func ID : bool ) { var ID : bool call ID ( ) while - ID ( ID ) { } } , ID ( ) { }",
  "func - ( ID : bool , ID : { func ID : bool ) int var ID : bool call ID ( ) while - ID ( ID ) { } } , ID ( ) { }",
  "func ID ( ID : bool ) { ID = ID [ ID / ID [ ( [ ) ] [ ID ] * ( ID ) ] 123 false ] }",
  ") ID ( ID : bool ) { ID = ID [ ID / ID [ ( [ func ] [ ID ] * ( ID ) ] 123 false ] }",
  ") ID ( ID : bool ) { ID = ID [ ID / ID 123 ( [ func ] [ ID ] * ( ID ) ] [ false ] }",
  "ID func ( ID : bool ) { var ID : bool return } func ID ( ID : [ ] [ 123 - ID ] [ ] int ) { }",
  "ID func ( ID : bool ) { var ID : bool return } func ID ] ID : [ ] [ 123 - ID ( [ ] int ) { }",
  "ID func ] ID : bool ) { var ID : bool return } func ID ( ID : [ ] [ 123 - ID ( [ ] int ) { }",
  "func ID ( ) { while ID [ ( ( - + - 123 false ID ) ) ] { } } func ID ( ) { }",
  "func ID ( ) { while ( [ ( ID - + - 123 false ID ) ) ] { } } func ID ( ) { }",
  "func ID ( ) { } ( [ ( ID - + - 123 false ID ) ) ] { } } func ID ( ) { while",
  "func ID ( ID : bool ) : [ ] [ ] bool { ) ID : [ ( false * - ( ID var * true ) ] int }",
  "func ID ( ID { bool ) : [ ] [ ] bool : ) ID : [ ( false * - ( ID var * true ) ] int }",
  "func ID ( ID { ID ) : [ ] [ ] bool : ) bool : [ ( false * - ( ID var * true ) ] int }",
  "func ID ( ) ID [ ID ( ) and ( ( ID ( ) ) ) and ID ] [ ] [ ] int { } func : ( ) { }",
  "func } ( ) ID [ ID ( ) and ( ( ID ( ) ) ) and ID ] [ ] [ ] int { ID func : ( ) { }",
  "func } ( ) ID [ ID ( ) and ( ( ID ( ) ) ) and ID ] [ ] [ ] int { ID func ( : ) { }",
  "func ID ( ) : bool { var } : bool var ID : bool } func ID ( ) { var ID : [ ] int while - ID { } while - ID { ID }",
  "- ID ( ) : bool { var } : bool var ID : bool } func ID ( ) { var ID : [ ] int while func ID { } while - ID { ID }",
  "- ID ( ) : var { var } : bool var ID : bool } func ID ( ) { bool ID : [ ] int while func ID { } while - ID { ID }",
  "func ID ( ) { var ID { int if ID [ ID ( true ) ] : } print ID }",
  "func [ ( ) { var ID { int if ID ID ID ( true ) ] : } print ID }",
  "func [ ( ) { var ID { int if ID ID ID ( true ) ] : } print ID }",
  "func ID ( ID : [ ] int , ID : [ true + func / ( true ) ] bool , ID : int ) { } ID ID ( ) { }",
  "func ID ( ID : [ ] int , ID : [ true + : / ( true ) ] bool , ID func int ) { } ID ID ( ) { }",
  "} ID ( ID : [ ] int , ID : [ true + : / ( true ) ] bool , ID func int ) { func ID ID ( ) { }",
  "func ID ( ) : bool ) { var ID : [ ] bool while - - ID ( ID ID { } if false { } }",
  "func ID ( ) - bool ) { var ID : [ ] bool while - : ID ( ID ID { } if false { } }",
  "func ID ( ) - bool ) { var ID : [ ] { while - : ID ( ID ID bool } if false { } }",
  "func ID ID ) { return true * - 123 - ( [ ( ( - ID ) ) ] [ ( ( ID ) ) ] + true }",
  "func ID ID ) { return true * - 123 - ( [ ( ( - ID ( ) ] [ ) ( ID ) ) ] + true }",
  "func ID ( ) : [ - false - - ( true ) 123 - ( ID ) / ] int { } func ID ( ) { }",
  "func ID ( ) : [ - false - - { true ) 123 - ( ID ) / ] int { } func ID ( ) ( }",
  "func ID ( ) : ( - false - - { true ) 123 - ( ID ) / ] int { } func ID ( ) [ }",
  "func ID ( ID : [ ] int ) : [ ] int { var ID : int var ID : int ] [ ID ] [ ] [ } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : [ ] int ID var ID : int var { : int ] [ ID ] [ ] [ } func ID ( ) { }",
  "func ID ( ID : [ ] int ) : [ ] int ID var ID : int var { : int ] [ ID ] [ ] [ } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : int { var : : bool var ID ID int } if ( ( - ( ID ) ) ) { } }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : int { var ) : bool var ID ID int } if ( ( - ( ID : ) ) { } }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : int { var ) : bool var ID ID int } if ( ( - ( ID : ) ) { } }",
  "func ID ( ) : int { var ID } [ ] [ ] [ ( ID ( ID ) ) ] int :",
  "func ID ( ID : int { var ID } [ ] [ ] [ ( ) ( ID ) ) ] int :",
  "func ] ( ID : int { var ID } [ ] [ ] [ ( ) ( ID ) ) ID int :",
  "func ID ( ID ) [ ] [ ] [ - ID [ ID ( ) [ 123 ] [ - false ] ] ] bool : { }",
  "( ID func ID ) [ ] [ ] [ - ID [ ID ( ) [ 123 ] [ - false ] ] ] bool : { }",
  "( ID func ID ) [ ] [ ] [ - ID [ ID ( ) [ 123 ] } - false ] ] ] bool : { [",
  "func ID ( ID ( int , ID : bool ) : [ ID ( - : ID ) ) ] bool { }",
  "func ID ( ID ( int , ID : ] ) : [ ID ( - : ID ) ) bool bool { }",
  "func ID ( ID bool int , ID : ] ) : [ ID ( - : ID ) ) ( bool { }",
  "func ID ( ) { var ID : [ ID / - ID ( false / ( false ) ) / 123 ] bool var ID func [ ] bool } : ID ( ) { }",
  "func ID ( ) { var ID : [ ID / - ID ( false / ( false ) ) / 123 ] bool var ID func [ ] bool } : ID ( ) { }",
  "func ID ( ) { var ID : [ ID / - ID ( false ID ( false ) ) / 123 ] bool var / func [ ] bool } : ID ( ) { }",
  "func ID ( ) { var ID : int call ID ( 123 ( * ID / - ID ) ) ID = - true }",
  "func ID ( ) { var ID : ID call ID ( 123 ( * ID / - ID ) ) int = - true }",
  "func ID ( ) { var ID : int var ID : bool } func ID ( ) { int ID : var var ID : int }",
  "func ID ( ) { var int : int var ID : bool } func ID ( ) { ID ID : var var ID : int }",
  "func ID ( ) { var int : int var ID : bool ID func ID ( ) { ID } : var var ID : int }",
  "func ID ( ) : ID ] int { call [ ( ) }",
  "{ ID ( ) : ID ] int func call [ ( ) }",
  "{ ( ( ) : ID ] int func call [ ID ) }",
  "func ID ( ) { ID ID : bool ID ( ) = ( ( ID [ var ] [ - - - ( true ) ] ) ) print - ID } func ID ( ) { }",
  "func ID ( ) [ ID ID : bool ID ( ) = ( ( ID [ var ] { - - - ( true ) ] ) ) print - ID } func ID ( ) { }",
  "func : ( ID : bool , ID ID int ) { var ID : bool var ID : int while ID ( ID ) { } if ( ID ) { } } func ID ( ) { }",
  "func : ( ID : bool , ID ID int ) { var ID : ID var ID : int while ID ( ID ) { } if ( ID ) { } } func bool ( ) { }",
  "func } ( ID : bool , ID ID int ) { var ID : ID var ID : int while ID ( ID ) { } if ( ID ) { } } func bool ( ) { :",
  "func ID ( ID : int , ID : [ ID ( ) [ ID ( ) [ ( ID ) ] ] false ] [ [ ( true ) ] ] bool ) { }",
  "func ID ( ID ) int , ID : [ ID ( ) [ ID ( ) [ ( ID ) ] ] false ] [ [ ( true : ] ] bool ) { }",
  "func ID ( ID ) false , ID : [ ID ( ) [ ID ( ) [ ( ID ) ] ] int ] [ [ ( true : ] ] bool ) { }",
  "func ID ( ) : [ false * ID bool ) - ID [ - ( - ( - - ( 123 ) ) ) ] ] [ ] ( { } func ID ( ) { }",
  "func ID ( ) : [ false * ID bool ) - ID [ - ( - ( - - ( { ) ) ) ] ] [ ] ( 123 } func ID ( ) { }",
  "func ID ( ID : int , ID ) bool , ID : [ ( true + false * - ( - ( - ( ID ) ) ) ) ] [ ] int : { }",
  "func ID ( false : int , ID ) bool , ID : [ ( true + ID * - ( - ( - ( ID ) ) ) ) ] [ ] int : { }",
  "func ID ( false : int , ID ) bool : ID , [ ( true + ID * - ( - ( - ( ID ) ) ) ) ] [ ] int : { }",
  "func ID ( ID : [ ID [ } ID ( ) - ID + - ID ) ] [ ( ID ) ] ] int ) { (",
  "func ID ( ID : [ ID [ } ID ( ) - ) + - ID ID ] [ ( ID ) ] ] int ) { (",
  "func ID ( ID : int ) : [ ( - ID * ) - ID ( ID - * ID ) ] int { } func ID ( ) { }",
  "func ID ( ID : int ) : [ ( ID ID * ) - - ( ID - * ID ) ] int { } func ID ( ) { }",
  "func ID ( ID : int * : [ ( ID ID * ) - - ( ID - ) ID ) ] int { } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool var ID : bool call ID ( ) { } { true + ( ( ( 123 ) ) ) } func ID ( ) return }",
  "( ID ( ) { var ID : [ ] bool var ID : bool call ID ( ) { } { true + func ( ( 123 ) ) ) } func ID ( ) return }",
  "( ID ( ) { var ID : [ ] bool var ID : bool call ID ( ) { } { true + ( func ( 123 ) ) ) } func ID ( ) return }",
  "func func ( ID : [ ] [ ] bool , ID : [ - ( - ID ( 123 ) ) ] int ) { } ID ID ( ) { }",
  "func ID ( ) { var ID : [ ( 123 * ID ( ) [ - ( - ( - ) ) ID ] [ false ] * - 123 ) ] int var ID : int }",
  "func ID ( ) { var ID : [ ( 123 * ID ( ) [ - ( - ( - ) ) ID int [ false ] * - 123 ) ] ] var ID : int }",
  "func ID ( ) { var ID : [ ( 123 123 ID ( ) [ - ( - ( - ) ) ID int [ false ] * - * ) ] ] var ID : int }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : [ ) bool var ID : bool call ID ( ] }",
  "func ID ( ID : int , ID : bool , ID : int ) { var ID : [ ) bool ID ID : bool call var ( ] }",
  "func ID ( ID : [ ] bool , ID : int : ID , int ) { var ID : [ ] [ - - 123 ] int }",
  "func ID ( ID : [ ] bool , ID : int : ID , int ) { var ID : [ ] [ - - 123 ] int }",
  "func ID ( ID : [ ] bool , ID : int : ID , int ) { var ID : [ ] [ - - 123 ] int }",
  "func ID ( ID : bool , ID : int , while : [ ] int ) : bool { var ID : int var ID : int ID ID { } }",
  "func ID ( ID { bool , ID : int , while : [ ] int ) : bool : var ID : int var ID : int ID ID { } }",
  "func ID ( ID ID bool , ID : int , while : [ ] int ) : bool : var ID : int var ID : int { ID { } }",
  "ID func ( ) { call ID ( ) call ID ( ( ID ( - - true ) ) ) } func ID ( ) { }",
  "ID func ( ) { call ID ( ) ) ID ( ( ID ( - - true call ) ) } func ID ( ) { }",
  "ID func ( ) { ( ID ( ) ) ID ( ( ID call - - true call ) ) } func ID ( ) { }",
  "func ID ( ( : bool , ID : bool , ID : [ - ID [ ID ( ) [ ID ] [ - 123 ] ] ] [ ] [ ] [ ] int ) { } func ID ID ) { }",
  "func ID ( ( : bool , ID : bool , ID : [ - ID } ID ( ) [ ID ] [ - 123 ] ] ] [ ] [ ] [ ] int ) { } func ID ID ) { [",
  "func ID ( ( : bool , ID : bool , ID : [ - ID } ID ( ) [ ID ] ] - 123 ] ] [ [ ] [ ] [ ] int ) { } func ID ID ) { [",
  "func ID ( ) { var ID : bool call ) ( ID call ID ( - ( ID ( ( ID ) ) ) ) }",
  ") ID ( ) { var ID : bool call func ( ID call ID ( - ( ID ( ( ID ) ) ) ) }",
  ") ID ( ) { var ( : bool call func ( ID call ID ( - ( ID ( ID ID ) ) ) ) }",
  "func ID ( ) : [ ] bool ID while ID ( true / ( - true ) / 123 ) { } } func { ( ) { }",
  "func ID ( true : [ ] bool ID while ID ( ) / ( - true ) / 123 ) { } } func { ( ) { }",
  "func ID ( true : [ / bool ID while ID ( ) / ( - true ) ] 123 ) { } } func { ( ) { }",
  "func ID ( ID : [ ] [ true / 123 ( ( ( ) ) ) ] bool ) { }",
  "func ID ( ID ( [ ] [ true / 123 : ( ( ) ) ) ] bool ) { }",
  "func ID ( ID ( [ ] [ true / 123 : ( ] ) ) ) ( bool ) { }",
  "func ID ( ID : bool ) : bool { var ID : [ - ID ( ) - - false - ( ) - ID ) ( ] bool }",
  "func ID ( ID : bool ) : bool { bool ID : [ - ID ( ) - - false - ( ) - ID ) ( ] var }",
  "func ID ( ID : bool ) : bool { bool ID : [ - ID var ) - - false - ( ) - ID ) ( ] ( }",
  "func ID ( ID : [ ] - ] [ ID ( ) [ ID - ID or 123 or - ID ] bool ) { }",
  "func ID ( ID : [ ] - ] [ ) ( ) [ ID - ID or 123 or - ID ] bool ID { }",
  "func ID ( ID : [ ID - ] [ ) ( ) [ ID - ID or 123 or - ID ] bool ] { }",
  "func ID ( ID : [ ] [ 123 / true != - false / true * - ( - ( ID ) ) ] int ) func } { ID ( ) { }",
  "func ID ( ID : [ ] [ } / true != - false / true * - ( - ( ID ) ) ] int ) func 123 { ID ( ) { }",
  "func ID ( ID : [ ] [ } / true != - false / true * - ( - ( ID ) ID ] int ) func 123 { ) ( ) { }",
  "func ID ( ID : bool , int : bool ) : [ ] ID { var ID : bool var ID : int while ID { } } func ID ( ) { }",
  "func ID ( ID : bool , int : bool ) : [ ] ID { var ID : bool var ID : int while func { } } ID ID ( ) { }",
  "func ID ( ID : bool , int : bool ) var [ ] ID { : ID : bool var ID : int while func { } } ID ID ( ) { }",
  "func ID ( ) { if - ( ( - - - - ( ID ) false false ) ) { } print true } func ID ( ) { }",
  "func ID ( ID ) [ ] bool , ID : bool : { ID = 123 / false / ( false ) while ID { } } func ID ( ) { }",
  "func ID ( ID false [ ] bool , ID : bool : { ID = 123 / ) / ( false ) while ID { } } func ID ( ) { }",
  "func ID ( ID false [ ] bool , ID : bool : { ID = ID / ) / ( false ) while ID { } } func 123 ( ) { }",
  "func ] ( ID : [ - ID ( ) [ - false * ( ID ) ] [ false ID ] bool ) { }",
  "func ] ( ID : [ - ID ( ) * - false [ ( ID ) ] [ false ID ] bool ) { }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] call if true * - - - ID { } int ID ( ) }",
  "- ID ( ) : bool { var ID : bool var ID : [ ] call if true * func - - ID { } int ID ( ) }",
  "func ID ( ) : bool { var ID : bool var ID : [ ] call if true * - - - ID { } int ID ( ) }",
  "func ID ( ) { var ID = int var ID : bool ID [ ID * ID ( ) [ true ] / ID ] : true }",
  "func ID ( ) { var ID * int var ID : bool ID [ ID = ID ( ) [ true ] / ID ] : true }",
  "[ ID ( ) { var ID * int var ID : bool ID [ ID = ID ( ) func true ] / ID ] : true }",
  "func ID ( ) { { var ID : int var ID : bool ID ( ) [ 123 / ID / ( ( true ) ) ] = - - ( } } func ID ID ) { }",
  "func ID ( ) { { var ID : int var ID : bool ID ( ) [ 123 / ID / ( ( true ) ) ] = } - ( - } func ID ID ) { }",
  "func ID ( ) { { var ID : int var ID : bool 123 ( ) [ ID / ID / ( ( true ) ) ] = } - ( - } func ID ID ) { }",
  "func ID ( ID : int , ID 123 bool , ID : bool ) { var ID : [ : - ( ID ) - false ] [ ] bool var ID : int }",
  ": ID ( ID : int , ID 123 bool , ID : bool ) { var ID func [ : - ( ID ) - false ] [ ] bool var ID : int }",
  "func ID ( ) : int { int func ID ( ID : [ ] int ) : } { var ID : bool var ID : int call ID ( ) }",
  "func ID ( ) : int { int func ID ( ID : [ ] int ) : } { var ID : bool var ID : int call ID ( ) }",
  "func ID ( ) : int { var func ID ( ID : [ ] int ) : } { int ID : bool var ID : int call ID ( ) }",
  "func ID ( ID : int , ID : bool ) : bool { { var ID { int if - - ( ( ( - - ID ) ) ) { } } } func ID ( ) : }",
  "func } ( ID : int , ID : bool ) : bool { { var ID { int if - - ( ( ( - - ID ) ) ) { } ID } func ID ( ) : }",
  "func } ( ID : int - ID : bool ) : bool { { var ID { int if , - ( ( ( - - ID ) ) ) { } ID } func ID ( ) : }",
  "func ID ( ) : bool { var ID : [ ] [ - ID ( ] * - ID ( ) [ ( - 123 ) ] [ ID ] ] [ ] int var ID : [ ) int } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ [ ] - ID ( ] * - ID ( ) [ ( - 123 ) ] [ ID ] ] [ ] int var ID : [ ) int } func ID ( ) { }",
  "func ID ( ) : bool - var ID : [ [ ] - ID ( ] * - ID ( ) [ ( { 123 ) ] [ ID ] ] [ ] int var ID : [ ) int } func ID ( ) { }",
  "func ID ( ID : [ ] ) , ID : [ ( ID ( - - - - - true ) int ] [ ] bool ) { }",
  "func ID ( ID : int , ID : [ - ID [ ( false ] ( ( - ( ( ID ) ) ) ) ) ] and bool ) { }",
  "func ID ( ID : int , ) : [ - ID [ ( false ] ( ( - ( ( ID ) ) ) ID ) ] and bool ) { }",
  "func ID ( ID : int , ) : [ - ID [ ( false ] ( ( - ( ( ID ) ) ) ID ) ] and bool ) { }",
  "func ID } ID : int ) { if false + 123 * - 123 - true / ( - ( - ID ) ) * ( ID ) { } { } } func ID ( ) { (",
  "func ID } ID : int ) { if false + 123 * ) 123 - true / ( - ( - ID ) - * ( ID ) { } { } } func ID ( ) { (",
  "func ID } ID : int ) { if false + 123 * ) 123 - true / ( - ( - ID ) - ( ( ID ) { } { } } func ID ( ) { *",
  "func ID ( ) { ID [ ID ID [ ID [ ID ] [ true ] ] [ ID ] ) ] [ ( ] = false }",
  "func ID ( ) { ID [ ID ID [ ID [ ID ] ] true ] ] [ ID ] ) [ [ ( ] = false }",
  "func ID ( ID : [ ] bool ) { } func ] ( ID : [ ] [ ] [ ID bool , ID : bool , ID : [ ] bool ) { }",
  "func ID ( ID : [ ] bool ) { } func ] ( ID : [ ] [ ] [ ID bool , ID : bool , ID : [ ] bool ) { }",
  "func ID ( ID : [ ] bool ) { } func ] ( ID : [ ] ) ] [ ID bool , ID : bool , ID : [ ] bool [ { }",
  "func ID ( ID : bool , ID : [ int ] , ID : bool ) { var ID : bool { var ID : int } ID ( ) = ( ( - 123 ) ) }",
  "func ID ( ID : bool , ID : [ int ] , ID : bool ) ( var ID : bool { var ID : int } ID ( ) = ( { - 123 ) ) }",
  "func ID ( ID : bool , ID : [ int ] , ID : bool ) ( var ID : bool { var ID : int } ID ( ) = ( { - 123 ) ) }",
  "func ID var ID : int ) { var ID : bool } func ID ( ID : bool ) : [ ] int { ( ID : bool { } if 123 { } }",
  "func ID ( ID : bool , ID : [ ] int , ID : bool ) : [ ] [ ] bool { int ID : var var ID : bool while ( 123 ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] int , ID : bool ) : [ ] [ ] bool { int ID : ID var ID : bool while ( 123 ) { } } func var ( ) { }",
  "func ID ( ID ID bool , ID : [ ] int , : : bool ) : [ ] [ ] bool { int ID : ID var ID : bool while ( 123 ) { } } func var ( ) { }",
  "func ID ( ID : bool , ID : [ ( ID [ true + bool - ID ] ) ] [ ] ID , ID : int ) { } func ID ( ) { }",
  "func ID ID ID : bool , ID : [ ( ID [ true + bool - ( ] ) ] [ ] ID , ID : int ) { } func ID ( ) { }",
  "func ID ID ID : bool , ID : [ ( ID [ ) + bool - ( ] ) ] [ ] ID , ID : int ) { } func ID ( true { }",
  "func ID ( ) : bool { var ID : int var ID : - return } func ID ( ) { var ID : int var ID : int while ( - - bool ( ID ) ) { } if ID { } }",
  "func ID ( ) : bool { var ID : int var ID : - return } func ID ( ) { var ID : int var ID : int while ( - - bool ( ID ) { { } if ID ) } }",
  "func ID return ) : bool { var ID : int var ID : - ( } func ID ( ) { var ID : int var ID : int while ( - - bool ( ID ) { { } if ID ) } }",
  "func ID ( ) : int { var ID : [ ] [ bool ] var ID : bool return }",
  "func ID ( ) : int { var ID : [ ] return bool ] var ID : bool [ }",
  "func ID ( ) : var { var ID : [ ] return bool ] int ID : bool [ }",
  "func ID ) ) : int { var ID : int var ID : int ID [ true - ID [ - ( - ( - true ) ) ] ] [ ID ] = - true } func ID ( ( { }",
  "func ID ) true : int { var ID : int var ID : int ID [ ) - ID [ - ( - ( - true ) ) ] ] [ ID ] = - true } func ID ( ( { }",
  "func ID ) true : - { var ID : int var ID : int ID [ ) - ID [ - ( - ( - true ) ) ] ] [ ID ] = int true } func ID ( ( { }",
  "func ID ( ) { var ID : [ false / 123 / ( >= ( - false ) ] [ ] [ ] [ ] [ ] int var ID : [ ] bool } func ID true ) { }",
  "func ID ( ) { var ] : [ false / 123 / ( >= ( - false ) ID [ ] [ ] [ ] [ ] int var ID : [ ] bool } func ID true ) { }",
  "func ID ( ) { var ] : [ false / 123 / ( >= ( - false ) ID [ ] [ ] [ true [ ] int var ID : [ ] bool } func ID ] ) { }",
  "func ID ( ID : int ) { : var ID { [ ] bool ID [ - ( ( ( ID ) ) ) ] [ 123 ] = ID { } } }",
  "func ID ( ID : int ) } : var ID { [ ] bool ID [ - ( ( ( ID ) ) ) ] [ 123 ] = ID { } } {",
  "func ID ( ID : int ) } : var ID { [ ] bool ID [ - ( ( ( ID ) ) ) ] [ } ] = ID { } 123 {",
  "func ID ( ( { return } func ID ) ) { return }",
  "( ID ( func { return } func ID ) ) { return }",
  "( ID ( func ) return } func ID { ) { return }",
  "func : ( ) : int { var ID ID [ ] bool return ( ID [ ID ] [ ID ] ) }",
  "func : ( ) : int { var ID ( [ ] bool return ID ID [ ID ] [ ID ] ) }",
  "func ID ( ) [ var ID : [ true / 123 / ID ( ID { ID ] [ 123 ] ) ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) [ var ID : func true / 123 / ID ( ID { ID ] [ 123 ] ) ] [ ] [ ] int } [ ID ( ) { }",
  "func ID ( ) [ var ID : func true / 123 / ( ( ID { ID ] [ 123 ] ) ] [ ] [ ] int } [ ID ID ) { }",
  "func ID [ ) : ( ] bool { var ID : int if true - ( ( - ( - ID ) ) ) { } ID = false }",
  "func ID [ ) : ( ] bool { var ID : int if true - ( ( - ( - ID ) ) ) { ID } = false }",
  "func ID [ ) : ( ] bool { var { : int if true - ( ( - ( - ID ) ) ) ID ID } = false }",
  "func ( ( ID : [ ] [ 123 != ID 123 * - ( ID ) ) ] [ ] bool ) { } func ID ( ) { }",
  "[ ( ( ID : func ] [ 123 != ID 123 * - ( ID ) ) ] [ ] bool ) { } func ID ( ) { }",
  "[ ( ( ID : func ] - 123 != ID 123 * [ ( ID ) ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : ( ( [ 123 * ( ( false ) ) ) ) ] int }",
  "func ID ( ( : int ) { var ID : ( ID [ 123 * ( ( false ) ) ) ) ] int }",
  "func ID ( ( : int ) { ( ID : ( ID [ 123 * var ( false ) ) ) ) ] int }",
  "func ID ID ( : int , ID : int ) { var ID : bool var ID : bool }",
  "func ID ID ( : int , ID : int ) { var ID : bool var ID : bool }",
  "bool ID ID ( : int , ID : int ) { var ID : bool var ID : func }",
  "func ID ( ID : [ ID [ ( ( ID [ - ( ID ) ) [ ( 123 ] ] ) ) ] [ - 123 ] ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ID [ { ( ID [ - ( ID ) ) [ ( 123 ] ] ) ) ] [ - 123 ] ] [ ] bool ) { } func ID ( ) ( }",
  "func ID ( ID : [ ID [ { ( ID [ - ( ID ) ) [ ( 123 ] ] ) ) ] 123 - [ ] ] [ ] bool ) { } func ID ( ) ( }",
  "func ID ( ID : bool ) { var ID : int call ID ( - ID ( } + - 123 - ( ID ) ) )",
  "func ID ( - : bool ) { var ID : int call ID ( ID ID ( } + - 123 - ( ID ) ) )",
  "func ID ( - : bool ) { var ID : int call ID ( ID ID ( } ) - 123 - ( ID ) + )",
  "var ID ( ) { var ID : [ ] int func ID : bool while - true / ( false ) { } } func ID ( ) { }",
  "var ID ( ) { var ID : [ ] int func true : bool while - ID / ( false ) { } } func ID ( ) { }",
  "var ID ( ) { var ID : [ ] int func true : } while - ID / ( false ) { bool } func ID ( ) { }",
  "func ID ( ID [ [ 123 * 123 / ID ( ) [ - 123 / ( - ID ) * ( - ID ) ] : ID ] ] int ) { }",
  "func ID ( ID [ [ ( * 123 / ID ( ) [ - 123 / ( - ID ) * 123 - ID ) ] : ID ] ] int ) { }",
  "func ID ( ID [ [ ( * 123 / ID ( ) [ - 123 / ( - ID ) * 123 - ID ) ] : ID ] ] int ) { }",
  "func ID ( ID : [ ] int , ID : bool ) : [ ( ID [ ( ID ) ] { ] [ ] int ) }",
  "func ID ( ID : [ ] int bool ID : , ) : [ ( ID [ ( ID ) ] { ] [ ] int ) }",
  "func ID ( ID : [ ] int bool ID : , ) : [ ( ID [ ( ID ) ] { ] [ ] int ) }",
  "func ID ( ) { if - ID [ true < ( ID ) ] { } print ( ( ID ) ) } func ID } ) { (",
  "func ID ( ) { if - ID [ true < ( ID ) ] { } print ( ( ID ) ) } func ID } ) { (",
  "func ID ( ) { if - ID [ true < ( ID ) ] { } print ( ( ID ) ) } func ID } ) { (",
  "func ID ( ) : [ - ( false / int + ID * ID ( - - false ) ) ] [ ] [ ] false { } func ID ( ) { }",
  "func ID ( ) : [ - ( false / int + ID * ID ( - - false ) ) ] [ ] [ ] false { func } ID ( ) { }",
  "func ID ( ) : [ - ( false / int + ID * ID ( { - false ) ) ] [ ] [ ] false - func } ID ( ) { }",
  "func ID ( ) : [ bool - ( - 123 * - 123 * ( ( ID ) ) ) ) ] ( { }",
  "func ID ( ) : [ bool - ( ID 123 * - 123 * ( ( - ) ) ) ) ] ( { }",
  "func ID ( ) : [ ] int { var ID : int print true true * / 123 + ( ID ) + ID } func ID ( ) { }",
  "func ID ( ) : [ ] int { var true : int print ID true * / 123 + ( ID ) + ID } func ID ( ) { }",
  "} ID ( ) : [ ] int { var true : int print ID true * / 123 + ( ID ) + ID } func ID ( ) { func",
  "func ID ( ID : bool ) { var ] : [ ] [ ID int return } func ID ( ID : [ 123 ] int ) { }",
  "func ID ( ID : bool ) { var ] : [ ID [ ID int return } func ] ( ID : [ 123 ] int ) { }",
  "func ID ( ID : bool ) { var ] : [ ID [ ID int return } func ] ] ID : [ 123 ( int ) { }",
  "func ID ( ) ID var ID : bool { = ( - ID [ ID ] [ false ] ) print ( ( ID ) ) }",
  "func ID ( false ID var ID : bool { = ( - ID [ ID ] [ ) ] ) print ( ( ID ) ) }",
  "func ID ( false ID var ID : bool { = ( - ID [ ID ] ) ) ] ) print ( ( ID ) [ }",
  "func var ( ) : int { ID ID : int var ID : bool }",
  "ID var ( ) : int { ID func : int var ID : bool }",
  "var ID ( ) : int { ID func : int var ID : bool }",
  "func ID ( } { return true + ( ID [ ID ( ID ) ] ) )",
  "func ID ( } { return true + ( ID [ ID ( ID ) ] ) )",
  "[ ID ( } { return true + ( ID func ID ( ID ) ] ) )",
  "func ID ( ID : [ ] : , ID bool int , ID : int ) : bool { var ID : [ ( 123 ) ] int var ID : int } func ID ( ) { }",
  "func ID ( ID { [ ] : , ID bool int , ID : int ) : bool : var ID : [ ( 123 ) ] int var ID : int } func ID ( ) { }",
  "( ID ( ID { [ ] : , ID bool int , ID : int ) : bool : var ID : [ ( 123 ) ] int var ID : int } func ID func ) { }",
  "func ID ( ID : [ false + true * true / ( ( ] - ( 123 ) ) ) - int ) { }",
  "func ) ( ID : [ false + true * true / ( ( ] - ( 123 ) ) ID - int ) { }",
  "func ) ( ID : [ false + true * true / ( ) ] - ( 123 ) ( ID - int ) { }",
  "ID func ( ) : bool { call ID ( ) }",
  "ID func ( bool : ) { call ID ( ) }",
  "ID func ( bool } ) { call ID ( ) :",
  "func ID ] ) { var ID : [ ( [ - ID ( ) [ false or - ID ] ] [ ] bool var ID : [ ] bool } func ID ( ) { }",
  "func ID ] ) { var ID : [ ( [ - ID ( ) [ false or - ID ] } [ ] bool var ID : [ ] bool } func ID ( ) { ]",
  "func ID ] } { var ID : [ ( [ - ID ( ) [ false or - ID ] ) [ ] bool var ID : [ ] bool } func ID ( ) { ]",
  "func ID ( ID : int , ID : int ) : int { } ID : int var ID : bool return var",
  "func ID ( ID : int , ID : int ) : int { } int : ID var ID : bool return var",
  "func ID ( ID : int { ID : int ) : int , } int : ID var ID : bool return var",
  "func ID ( ID : ) , ID : bool ) : bool { if ( 123 * ID ( ( - - ( false ) bool ) ) { } }",
  "func ID ( ID : bool , ID : bool ) : bool { if ( } * ID ( ( - - ( false ) ) ) ) { 123 }",
  "func ID ( ID : bool , ID : func , ID : [ ] [ ID [ - ( ( - 123 ) ) ] ] bool ) { } int ID ( ) { }",
  "func ID ( ID : bool , ( : func , ID : [ ] [ ID [ - ( ID - 123 ) ) ] ] bool ) { } int ID ( ) { }",
  "func ID ( ID : bool , ( : func , ID : [ ] [ ID [ - ( ID ] 123 ) ) ] - bool ) { } int ID ( ) { }",
  "func ID ( ) : int { var ID : bool } func ID ( ) : bool { var ID : bool var ID : ] - ID [ bool }",
  "- ID ( ) : int { var ID : bool } func ID ( ) : bool { var ID : bool var ID : ] func ID [ bool }",
  "- int ( ) : ID { var ID : bool } func ID ( ) : bool { var ID : bool var ID : ] func ID [ bool }",
  "func ID ( ID : int ) : - { var ID : [ ] bool var ID : [ true / 123 >= bool - ID ] [ ] int } func ID ( ) { }",
  "func ID ( ID : int ) : - { ] ID : [ ] bool var ID : [ true / 123 >= bool - ID ] [ var int } func ID ( ) { }",
  "func ID ( ID : int bool : - { ] ID : [ ] bool var ID : [ true / 123 >= ) - ID ] [ var int } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : ) ) : [ ID [ - true * ( ID bool ] ] int { } func ID ( ) { }",
  "func ID ID ID : [ ] int , ( : ) ) : [ ID [ - true * ( ID bool ] ] int { } func ID ( ) { }",
  "{ ID ID ID : [ ] int , ( : ) ) : [ ID [ - true * ( ID bool ] ] int { } func ID ( ) func }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var ID : bool var ID ID int print ID [ ( ID ) ] } func : ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { var ID : bool var ID ID int print ID [ ( ID ) ] ( func : } ) { }",
  "- ID ( ) : bool { print - - - - func false * ID ( true ) } func ID ( ) { }",
  "- ID ( ) : bool ( print - - - - func false * ID ( true ) } func ID { ) { }",
  "- ID ( ) : bool ( print - - - - func false * ID ( true ) } func ID { ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : bool { var ID : } int",
  "func ID ( ID : bool , ID ) int , ID : int : : bool { var ID : } int",
  "func : ( ID : bool , ID ) int , ID : int : ID bool { var ID : } int",
  "{ ID ( ) func var ID : [ ] int print ID ( ( ID ) ) }",
  "ID ID ( ) func var { : [ ] int print ID ( ( ID ) ) }",
  "func ID ( ) : int ( print - ( ID * { ID [ ID ] ) ) }",
  "func ID ( ID : int ( print - ( ID * { ID [ ) ] ) ) }",
  "func ID ( ID : int ( print - ] ID * { ID [ ) ( ) ) }",
  "func ID ( ) : [ ] int { var ID : [ ( } ID ( ) ) ) ] bool (",
  "func ID ( ) : [ ] int { var ID : [ ( ID } ( ) ) ) ] bool (",
  "func ID { ) : [ ] int ( var ID : [ ( ID } ( ) ) ) ] bool (",
  "func ID ( ID : int ) { var ID : int return 123 - } ( ID ) ID func ID ( ) { }",
  ") ID ( ID : int ) { var ID : int return 123 - } ( ID ) ID func ID ( func { }",
  ") ID ( ID : int ) { var ID : int return } - } ( ID ) ID func ID ( func { 123",
  ": ID ( ) { var ID func bool while true > 123 * ID ( false ) / 123 { } }",
  ": ID ( ) { / ID func bool while true > 123 * ID ( false ) var 123 { } }",
  ": ID ( ) { / ID func bool while true > 123 ( ID * false ) var 123 { } }",
  "func ID ( ID : int , ID : [ - 123 / - ID true ) [ - ( ( ) ] [ ID ] ] int , ID : bool ) { }",
  "func ID ( ID : int ID , : [ - 123 / - ID true ) [ - ( ( ) ] [ ID ] ] int , ID : bool ) { }",
  "func ID ( ID : int ID ) : [ - 123 / - ID true , [ - ( ( ) ] [ ID ] ] int , ID : bool ) { }",
  "func ID ( ID : [ ] [ - false * ID * ( ID ( ) [ - ID - [ - - ( ] - ( 123 ) ) ] ) ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID func [ ] [ - false * ID * ( ID ( ) [ - ID - [ - - ( ] - ( 123 ) ) ] ) ] [ ] bool ) { } : ID ( ) { }",
  "func ID ( ID func : ] [ - false * ID * ( ID ( ) [ - ID - [ - - ( ] - ( 123 ) ) ] ) ] [ ] bool ) { } [ ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ - ID ( ) [ 123 - - ( * ( - true ) ) ] ] [ ] [ ] bool }",
  "func ID ( ID : int ) { var ID : [ - ID ( [ ) 123 - - ( * ( - true ) ) ] ] [ ] [ ] bool }",
  "func ID ( ID : bool , ID { [ ] int , ID : int ) : int { var ID : int var ID : int return } func ID ( ID : [ ] [ ] int ) : }",
  "func ID ( ID : bool , ID { [ ] int , ID : int ) : int { var ID : ID var ID : int return } func ID ( int : [ ] [ ] int ) : }",
  "func ID ( ID : bool , [ { ID ] int , ID : int ) : int { var ID : ID var ID : int return } func ID ( int : [ ] [ ] int ) : }",
  "func ID ( ) ( return ID [ - ID [ ID ( ( true ) ) ] ] [ - - true ] } func ID { ) { }",
  "[ ID ( ) ( return ID [ - ID func ID ( ( true ) ) ] ] [ - - true ] } func ID { ) { }",
  "[ ID ( ) ( return ID [ - ID func ID ( ( true ) ] ] ] [ - - true ) } func ID { ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : [ true + true / : - ( - ID ) / ID ] [ ] [ ] bool var ID - int }",
  "func ID ( ID : bool , ID : bool ) { var } : [ true + true / : - ( - ID ) / ID ] [ ] [ ] bool var ID - int ID",
  "func ID ( ID : bool , ID : bool ) { var } - [ true + true / : - ( : ID ) / ID ] [ ] [ ] bool var ID - int ID",
  "func ID ( ID : [ ] int , ID : bool ) { ID ID : bool var var : int call ID ( 123 >= false ) }",
  "func ID ( ID : [ ] int , ID : bool ) { ID ID : bool var var : int call ID ( 123 >= false ) }",
  "func ID ( ID ID [ ] int , : : bool ) { ID ID : bool var var : int call ID ( 123 >= false ) }",
  "func ID ( ) : int { var ID : bool var ID : bool { if - - ( - ( ( ID ) ) ) { } } call ( ID ) }",
  "func ( ( ) : int { var ID : bool var ID : bool { if - - ( - ID ( ID ) ) ) { } } call ( ID ) }",
  "func ( ( ) : int { var ID : bool var ID : ) { if - - ( - ID ( ID ) ) bool { } } call ( ID ) }",
  "func ID ( ID : int ) { var ID { int var ID : [ ] int { var ID : int var ID : int while - 123 : } print ID } call ID ( ) }",
  "func ID ( ID : int ) { var ID { int var ID : [ ] int { var ID : int var ID } int while - 123 : } print ID } call ID ( ) :",
  "func ID ( ID : int ) { ID ID { int var ID : [ ] int { var var : int var ID } int while - 123 : } print ID } call ID ( ) :",
  "func ID ) ID : bool , ID : bool ( { var ID : int var ID : bool ID ( ) = true * ( 123 ) if ID { } }",
  "func ID ) ID : bool , ID : bool ( { var ID : int var ID : bool ID ( ) = true * ( 123 ) ID if { } }",
  "func ID ) ID : bool , ID : bool ( { var ID ID int var ID : bool : ( ) = true * ( 123 ) ID if { } }",
  "func ID ( ] : int ) : bool { var ID : [ ] [ ( - ID [ - ID ] ) ] [ ID bool var ID : [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ] : int ) : bool { var ID : [ ] [ ( - bool [ - ID ] ) ] [ ID ID var ID : [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ] : int [ : bool { var ID : [ ] [ ( - bool ) - ID ] ) ] [ ID ID var ID : [ ] [ ] [ ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool { ) var ID : bool return }",
  "func ID ( bool : bool , ID : bool { ) var ID : ID return }",
  "func ID ( bool : bool , ID : bool { ID var ID : ) return }",
  "func ID ( ) { } func ID ( ) { var ID : [ ( ( - - - true ] ) ) [ ] int }",
  "func var ( ) { } func ID ( ) { ID ID : [ ( ( - - - true ] ) ) [ ] int }",
  "func var ( ) { } func ID ( ) { ID ID : [ ( ( - - - true ] ) ] [ ) int }",
  "func ID ( ) { int ID : [ ] var var ID : [ ] int return - ID * ID ( ) }",
  "func ID ( ) { : ID : [ ] var var ID int [ ] int return - ID * ID ( ) }",
  "func ID ( ) { : ID : [ ] var var - int [ ] int return ID ID * ID ( ) }",
  "func ID - ID : [ ] [ true / true < 123 / ( ID ) * - ( ID ] int ) { }",
  "func true - ID : [ ] [ ID / true < 123 / ( ID ) * - ( ID ] int ) { }",
  "func true - ID : [ [ ] ID / true < 123 / ( ID ) * - ( ID ] int ) { }",
  "ID ID ( ) : [ ] int { var func : bool call ID ( 123 * ( ( ID ) ) / ID ) ID = - - ( true ) }",
  "ID ID ( ) : [ ] int { - func : bool call ID ( 123 * ( ( ID ) ) / ID ) ID = - var ( true ) }",
  "ID ID ( ) : [ ] int ) - func : bool call ID ( 123 * ( ( ID ) ) / ID ) ID = - var ( true { }",
  "func ID ( ) { ID [ - 123 + - ( ID [ - 123 ID [ - false ] ) ] [ true ] = ] ID = ID }",
  "func ID ( ) { ID [ - 123 + - ( ID [ - 123 ID ] - false ] ) [ [ true ] = ] ID = ID }",
  "func ID ( ) { ID [ - 123 + - ( ID [ - 123 ID ] - false ] ) [ [ true ] = = ID ] ID }",
  "func ID ( ) { var ID : bool var ID : bool if ) ( ( true ) ) ( { } { } }",
  "func ID ( ) { var { : bool var ID : bool if ) ( ( true ) ) ( ID } { } }",
  "func bool ( ) { var { : bool var ID : ID if ) ( ( true ) ) ( ID } { } }",
  "func ID ( ID : [ ( ( ] / - ID ( - true ) ) ) false int ) { }",
  "func ) ( ID : [ ( ( ] / - ID ( - true ) ) ID false int ) { }",
  "func ) ( ID : [ ( ( ) / - ID ( - true ] ) ID false int ) { }",
  "func } ( ) : int { var ID : bool while ( ( 123 / ( ( true ) ) ) ) { } ID = - ID ID func ID ( ) { }",
  "func } ( ) : int { var } : bool while ( ( 123 / ( ( true ) ) ) ) { } ID = - ID ID func ID ( ) { ID",
  "func } ( = : int { var } : bool while ( ( 123 / ( ( true ) ) ) ) { } ID ) - ID ID func ID ( ) { ID",
  "func ID ( ID : int , ID : int ) : [ ID ( ) ) - - ( 123 [ ] [ ( ( true ) ) ] ] int { }",
  "func ID ( ID : int , ID : bool ) : { 123 + false / ID / - ID - ID ] int { } func ID ( ) [ }",
  "func ID ( ID : int , ID : bool ) ID { 123 + false / ID / - ID - : ] int { } func ID ( ) [ }",
  "func ID ( ID : int ID ID : bool ) ID { 123 + false / ID / - ID - : ] int { } func , ( ) [ }",
  "func ID ( [ : bool , ID : int ) : int { ID ID ID ( ) [ - ID ] [ ID ] ] = ID }",
  "func ID ( [ : bool , ID : int ) : int { ID ID ID ( ) [ - ID ] ] ID [ ] = ID }",
  "func ID ( [ : bool , ID : int ) : int { ID ID ID ( ) [ - ID ] ] ID [ ] = ID }",
  "func bool ( ) : [ ] ID { var ID : [ true * true - - ( ID ) ] [ ] [ ] int } func ID ( ) { }",
  "func bool ( ) : [ ] ID { var ID : [ true * true - - ( ID ) { [ ] [ ] int } func ID ( ) ] }",
  "func ID ( ) { ID ID : int var ID : int print - false / ( var [ - - true ] ) if - - - ID { } }",
  "func ID ( ) { ID ID : int var ID : int print - false / ( var [ - - true ] ) if - - - ID { } }",
  "func ID ( ) { ID ID : int var : ID int print - false / ( var [ - - true ] ) if - - - ID { } }",
  "func ID ( ID : int , ID : int , ID : [ ] int ) : int { var ID { bool return - ( - ID ) } func ID ( ) : }",
  "func ID ( ID int : , ID : int , ID : [ ] int ) : int { var ID { bool return - ( - ID ) } func ID ( ) : }",
  "func ID ( ID int : , ID : int , ID : [ ] int ) : int { var ID { bool return - ( - ID ) } ID func ( ) : }",
  "func ID / ) : bool { call ID ( - - ( false ( - ( ID ) ) ) print false }",
  "func ID / ) : bool { ( ID call - - ( false ( - ( ID ) ) ) print false }",
  "func ID / ) : bool { ( ID call ID - ( false ( - ( - ) ) ) print false }",
  "func ID ( ID : bool , ID : [ ] int , ID : [ ] [ ID ( ) [ ( ID ) ] ] bool ) { } func ID ( { ) }",
  "func ID ( ID : bool , ID : [ ] int , ID : [ ] [ ID ID ) [ ( ( ) ] ] bool ) { } func ID ( ) { }",
  "func : ( ID : int ) ID bool { return }",
  "func : ( ID : int ) return bool { ID }",
  "func ID ( ID : int ) return bool { : }",
  "func ID ( ID : } , ID : bool ) { var ID : bool var ID : bool return } func ID ( ID : bool , ID : bool ) { int",
  "func ) ( ID : } , ID : bool ) { var ID : bool var ID : bool return } func ID ( ID : bool , ID : bool ID { int",
  "func ) ( ID : } , ID : bool ) { var ID : bool var ID : bool return } func ID ( ID : bool , ID : bool ID { int",
  "func ID ( ID ID [ ] bool , ID : bool , ID : [ : * - - - - true / ID ] int ) { } func ID ( ) { }",
  "func ID ( ID ID [ ] bool ID , : bool , ID : [ : * - - - - true / ID ] int ) { } func ID ( ) { }",
  "func ID ( func ID [ ] bool ID , : bool , ID : [ : * - - - - true / ID ] int ) { } ID ID ( ) { }",
  ") ID ( ) { print ID ( ) [ 123 / false * ( ID func ] [ ID ] if ID { } } func ID ( ) { }",
  ") ID ( ) { print ID ( ) [ 123 / false * ( ID func ] } ID ] if ID { [ } func ID ( ) { }",
  ") ID ( ) { print ID ( ) [ 123 / false * ( ID func ] } ID ] if ID { func } [ ID ( ) { }",
  "func ID ( ) { - ( ID [ ID ( ( - false ) ) ] ) = ID false }",
  "func ID ( ) { - ( ID [ false ( ( - ID ) ) ] ) = ID false }",
  "func ID ( ID : [ ] bool , ID { [ false / false / 123 + - - - - ( - ( ( ID ) ) ) + 123 ] [ ] bool ) { } func ID ( ) : }",
  "func ID ( 123 : [ ] bool , ID { [ false / false / 123 + - - - - ( - ( ( ID ) ) ) + ID ] [ ] bool ) { } func ID ( ) : }",
  "func ID ( 123 : [ ] bool , ID { [ false / false / - + - - - 123 ( - ( ( ID ) ) ) + ID ] [ ] bool ) { } func ID ( ) : }",
  "func ID ( ) : int ( var ID : [ - - ID ( ) [ - ( ( false ) ) ] ] bool var ID : bool } func ID { ) { }",
  "func ID ( ) : int ( var ID : [ - - ID ( ) [ - ( ( false ) ) ] ] bool var ID { bool } func ID { ) : }",
  "func ID ( ) : int ( ( ID : [ - - ID var ) [ - ( ( false ) ) ] ] bool var ID { bool } func ID { ) : }",
  "func ID ( ) : int { var ID : [ ] int var ID : bool { var ID : [ ID [ - true ] [ - true ] ] [ ] int { call ID ( ) } func ID ( ) } }",
  "func ID ( ) : int { var ID : [ ] int var ID : int { var ID : [ ID [ - true ] [ - true ] ] [ ] bool { call ID ( ) } func ID ( ) } }",
  "func ID ( ) : int { var ID : [ ] int var ID : int { var ID { [ ID [ - true ] [ - true ] ] [ ] bool : call ID ( ) } func ID ( ) } }",
  "func ID ( ID : int , ID : int , ID : int ) : var ID { int ID ( ID / - true ) = - ( ( - ID ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) : var ID { int ID ( ID / - true ) = - ( ( - ID ) ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int , ID : int ) : var ID { int ID ( ID / - true ) ) - ( ( - ID ) = } func ID ( ) { }",
  "func func ( ID : int ) { var ID : [ true / 123 * ( ID [ ID ] [ ID ] ) ] [ ] [ ] int } ID ID ( ) { }",
  "func func ( ID : int ) { var ID : [ / true 123 * ( ID [ ID ] [ ID ] ) ] [ ] [ ] int } ID ID ( ) { }",
  "func func ( ID : int ) { var ID : [ / true 123 * } ID [ ID ] [ ID ] ) ] [ ] [ ] int ( ID ID ( ) { }",
  "func ID ( ID : bool , ID int bool ) : bool { var ID : [ ] [ ] [ ] [ ( ID ) ] : var ID : [ ] int }",
  "func ID ( ID : bool , ID int bool ) : bool { var ID : [ ] [ ] [ ] [ ( ID ) ] : var ID : [ ] int }",
  "func ID ( ID : bool , ID int bool ) : bool { var ID : [ ] [ ] [ ] [ ( ID ) ] : var ID : [ ] int }",
  "func ID ( ) { return - - ID ( 123 ) - 123 * ID ) } func ID ( or { }",
  "func ID ( ) { return func - ID ( 123 ) - 123 * ID ) } - ID ( or { }",
  "func ID ( ) { return func - ID ( 123 ) - 123 * ID ) } } ID ( or { -",
  "func ID ( ID : bool , ID : bool ) : [ int [ ] int { var ID : int var ID : [ ( ( ( ( ( - - ( - true ) ) ) ) ) ) ] ] }",
  "func ID ( ID : bool , ID : bool ) : [ int [ ] int { var ID : int var ID : [ ( ( ( ( ( - - ( - true ) ) ) ) ) ) ] ] }",
  "func ID ( ) { var ID : bool ] [ if ( 123 * - - - ID / false ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool ] [ if ( 123 * - - - ID / false ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : bool ID [ if ( 123 * - - - ] / false ) { } } func ID ( ) { }",
  "func ID ( ID : int ) : bool { var ID : int { ID : int var print ( true ) call ID ( ) } ID = ID }",
  "func ID ( ID : int ) : bool { var ID : int { ID : int var print ( true ) call ID ( ) ID } = ID }",
  "func ID ( ID : { ) : bool { var ID : int int ID : int var print ( true ) call ID ( ) ID } = ID }",
  "func ID ( ID } bool , ID : int ) : int { var ID : int var ID : int :",
  "func ID ) ID } bool , ID : int ( : int { var ID : int var ID : int :",
  "func ID ) ID } bool , ID : int ( : int { var ID : : var ID int int :",
  "func ID ( ) : [ ] int { return ) func ID ( ID : [ ] [ ID ( - - true } ] bool ) { }",
  "func ID ( ) : [ ] int { return ) func ID ( ID : [ ] [ ID ( - - true } ] bool ) { }",
  "func ID ( ) ( [ ] int { return ) func ID : ID : [ ] [ ID ( - - true } ] bool ) { }",
  "func ID ( ) { var ID : int var ID : } ] [ - - ID ( ) [ ( ID ) ] [ ( ID ) ] ] int [",
  "func ID ( ) { var ID : int var ID : int ] [ - - ID ( ) [ ( ID ) ] [ ( ID ) ] ] } [",
  ": ID ( ) { return } func ID ( ID func bool ) { var ID : int }",
  ": ID ( ) { ) } func ID ( ID func bool return { var ID : int }",
  ": ID ( ) { ) } func ID ( ID func bool return { var ID : int }",
  "] ID ( ID : [ ] [ func [ ID ( ) / ID ( ( - ID ) ) / - ( - ( - 123 ) ) ] [ ] int ) { }",
  "] ID ( ID : [ ] [ func [ ID ( ) / ID ( ( - ID ) ) / - ( - ( - 123 ) ) ] [ ] int ) { }",
  "] ID ( ID : [ ] [ func [ ID ( ) / ID ( ( int ID ) ) / - ( - ( - 123 ) ) ] [ ] - ) { }",
  "} ID ( ID : [ ( 123 / 123 or ( - false ) ) ] int ) { func",
  "} [ ( ID : ID ( 123 / 123 or ( - false ) ) ] int ) { func",
  "} [ ) ID : ID ( 123 / 123 or ( - false ) ( ] int ) { func",
  "func ID : ID ( bool , ID : bool ) { var ID : bool var ID : int call ID ( - false * ID / - - false ) if false { } } func ID ( ) { }",
  "func ID : ID ( bool , ID : bool ) { var ID var bool : ID : int call ID ( - false * ID / - - false ) if false { } } func ID ( ) { }",
  "func ID : ID ( bool , ID : bool ) { var ID var bool : ID : { call ID ( - false * ID / - - false ) if false { } } func ID ( ) int }",
  "func false ( ) : int { while ID ( ID - 123 - ID ) { } print 123 } func ID ( ) { }",
  "func ( false ) : int { while ID ( ID - 123 - ID ) { } print 123 } func ID ( ) { }",
  "func ( false ) : int { while ID ( ID - 123 func ID ) { } print 123 } - ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ID [ func * ID ( ) [ ID ] / - ( ( false ) ) ] ] bool } false ID ( ) { }",
  "func ID ( ) : bool { var ID : [ ID [ func * ID ( ) [ ID ] / - ( ( false ) ) ] ] bool } false ID ( ) { }",
  "func ID ( ) : bool { var ID false [ ID [ func * ID ( ) [ ID ] / - ( ( : ) ) ] ] bool } false ID ( ) { }",
  "func ID ( ) : int { ID ID + - ( - false - return - ID ) + ( false ) }",
  "func ID ( ) : int { ( ID + - ID - false - return - ID ) + ( false ) }",
  "func ID ID ) : int { ( ( + - ID - false - return - ID ) + ( false ) }",
  "func ] ( ID : int , ID : bool , ID : [ ID ( ) [ true / ( ( ( - true ) ) ) * ID ID [ - ( ( ( ID ) ) ) ] ] [ ] int ) { } func ID ( ) { }",
  "func ] ( ID : int , ID : bool , ID : [ ID ( ) [ true / ( ( ( - true ) ) ) * ] ID [ - ( ( ( ID ) ) ) ID ] [ ] int ) { } func ID ( ) { }",
  "func ] ( ID : int , ID : bool , ID : [ ID ( ) [ true / ( ( ( - true ) ) ) * ] ID [ - ( ( ( ID ) ) ) ID ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ) { var ID [ : - 123 < true / false * ( - 123 ) ] int var ID : int }",
  "func ID ( ) { var ID [ : - 123 < true / false * 123 - ( ) ] int var ID : int }",
  "func ID - ) { var ID [ : - 123 < true / false * 123 ( ( ) ] int var ID : int }",
  "func ID ( ID : int , ID : bool var { ) ID : [ ] bool var ID : bool return ( ( - 123 ) ) } func ID ( ) { }",
  ": ID ( ID func int , ID : bool var { ) ID : [ ] bool var ID : bool return ( ( - 123 ) ) } func ID ( ) { }",
  ": ID ( ID ID int , ID : bool var { ) func : [ ] bool var ID : bool return ( ( - 123 ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) : [ ( - ID ( ) and - ( ( true ( ( ) ) ) ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : bool ] ID : bool , ID : int ) : [ ( - ID ( ) and - ( ( true ( ( ) ) ) ) ) ] [ , bool { } func ID ( ) { }",
  "func - ( ID : bool ] ID : bool , ID : int ) : [ ( ID ID ( ) and - ( ( true ( ( ) ) ) ) ) ] [ , bool { } func ID ( ) { }",
  "func ID ( ) : [ ] [ ( ID ( ) [ - ( ( - false ) ) ] [ ( ] ) ] ) ID [ ] int { }",
  "func ID ( ) : [ ] [ ( ID ( ) [ ] ( ( - false ) ) ] [ ( ] ) - ) ID [ ] int { }",
  "func ID ( ) : [ ] [ ( ID ( ) [ ] ( ( - false ) ) ] - ( ] ) [ ) ID [ ] int { }",
  "func ID ( ) : int { [ ID : [ ] var ID / false * ( ID ) ] [ ] int }",
  "func ID ( ) : int { [ ID : [ ] var ID / false * ( ID ) ] [ ] int }",
  "func ID ( ) : int { [ ID : [ ] var ID / [ * ( ID ) ] false ] int }",
  "func ID ( ID : int var : [ ] bool { ) ID : bool ID = ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : int var : [ ] bool { ) ID : bool ID = ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : int var : [ ] bool { ) ID : bool ID = ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { while while [ - false / ( ( - false ) ) * - - ID ] { } ID 123 { } } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { while while [ - false / ( ( { false ) ) * - - ID ] - } ID 123 { } } func ID ( ) { }",
  "func ID ( ID : [ ] bool ) { while while [ { false / ( ( - false ) ) * - - ID ] - } ID 123 { } } func ID ( ) { }",
  "func { ( ID : [ ] [ ] bool , ID : bool , ID : [ ] int ) { var ID : bool { var ID : [ ] [ ] int } } func ID ( ) ID }",
  "func { ( ID : [ ] [ ] bool , ID : bool , ID : [ ] int ) { var ID : bool { var ID : [ [ ] ] int } } func ID ( ) ID }",
  "func { ( ID : [ ] [ ] bool , ID : bool , ID ] [ : int ) { var ID : bool { var ID : [ [ ] ] int } } func ID ( ) ID }",
  "func ID [ ) { var ID : ( ] bool var ID : int } func ID ( ) : int { var ID : int var ID : bool print - - 123 }",
  "func ID [ ) { var ID : ( ] bool var ID : int } func ID ( ) : int { var ID : int var ID bool : print - - 123 }",
  "func ID [ ) { var ID : ( ] bool var ID : int } func ID ( ) : int { var ID : int var ID bool : print - - 123 }",
  "func ID ( ) { var ID : bool ( ID : bool { var ID : bool return 123 / ID / ID } print - ID } func ID var ) { }",
  "func ID ( ) { var ID : bool ( ID : bool ID var ID : bool return 123 / ID / { } print - ID } func ID var ) { }",
  "func ID ( ) { var ID : bool ( ID : bool ID 123 ID : bool return var / ID / { } print - ID } func ID var ) { }",
  "func ID ( ) { var ID : int var ID : bool ( var ID : bool } while ID { ( ID ) ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool ID var ID : bool } while ID { ( ID ) ) { } } func ( ( ) { }",
  "func ) ( ID { var ID : int var ID : bool ID var ID : bool } while ID { ( ID ) ) { } } func ( ( ) { }",
  "func ID ( ) : bool { var ID : [ ] [ ] [ 123 / false / ID or ID ] int } ID : int var",
  "var ID ( ) : bool { var ID : [ ] [ ] [ 123 / false / ID or ID ] int } ID : int func",
  "var ID ( ) : bool { var ID : [ ] [ : [ 123 / false / ID or ID ] int } ID ] int func",
  "func } ( ) : int { var ID : int { var ID : int ID [ ID [ ID ] ] = false ID }",
  "func } ( ) : int { var int : ID { var ID : int ID [ ID [ ID ] ] = false ID }",
  "func ID ( ID : int ) : int { call ID ( ID [ false / ID [ - ( false ) ] [ - ID ( ( ) ) ] * ( ( false ) ) ] [ ( ( true ) ) ] ) ID = false }",
  "func ID ( ID : int ) : int { call [ ( ID [ false / ID [ - ( false ) ] [ - ID ( ( ) ) ] * ( ( false ) ) ] ID ( ( true ) ) ] ) ID = false }",
  "func ID ( ID : int ) : int { call [ ( ID true false / ID [ - ( false ) ] [ - ID ( ( ) ) ] * ( ( false ) ) ] ID ( ( [ ) ) ] ) ID = false }",
  "func ID ( ID : [ } int , ID : bool , ID : bool ) { var ID : int ID [ ( false ) ] = - ID { ] }",
  "func ID ( ID : [ } int , ID : bool , ID : bool ) { var ( : int ID [ ID false ) ] = - ID { ] }",
  "ID ID ( ID : [ } int , ID : bool , ID : bool ) { var ( : int ID [ func false ) ] = - ID { ] }",
  "func ID ( ) : [ } [ - ( ID ( true / ID ) ) ] [ ] [ ] bool { ]",
  "func : ( ) ID [ } [ - ( ID ( true / ID ) ) ] [ ] [ ] bool { ]",
  "func : ( ) ID [ } [ - ( ID ( true / ID ) ) ] [ ] [ ] bool { ]",
  "func ID ( ) { var ID [ : false * ID ( - ( - ID ) ) ] int var ID : int } func ID ( ) { }",
  "func ID ( int { var ID [ : false * ID ( - ( - ID ) ) ] ) var ID : int } func ID ( ) { }",
  "func ID ( int func var ID [ : false * ID ( - ( - ID ) ) ] ) var ID : int } { ID ( ) { }",
  "func ID ( ) : [ ( - ( int ( 123 ) ) ) ) ] ( { }",
  "func ID ( ) : [ ( - ( int ( 123 ) ) ) ) ] ( { }",
  "func ID ( ) : [ ( - ( int ( 123 ) ) ) ) ] ( { }",
  "func ID ( ID : [ ] int { ID : [ ] [ 123 * true * - ( true ) ] int , ID : int ) , }",
  "func [ ( ID : ID ] int { ID : [ ] [ 123 * true * - ( true ) ] int , ID : int ) , }",
  "func ID ( ID : [ ] int { ID : [ ] [ 123 * true * - ( true ) ] int , ID : int ) , }",
  "} ID ( ID : bool ) { var ID : int } func ID ( ID : bool ) { var ID : int func",
  "} ID var ID : bool ) { ( ID : int } func ID ( ID : bool ) { var ID : int func",
  "} ID var ID : bool ) int ( ID : { } func ID ( ID : bool ) { var ID : int func",
  "func ID ( ID : } ( - ID ( ID ( 123 ) ) ) ] int ) { } func ID ( ) { [",
  "func ID ( ID : } ( - ID ( ID ( 123 ) ) ) ] int ) { } func ID ( ) { [",
  "func ID ( ID : } ( int ID ( ID ( 123 ) ) ) ] - ) { } func ID ( ) { [",
  "func ID ( ) : [ ] bool { var ID : [ - ( - ) ( - ( ID ) ) - ] bool }",
  "func ID ( ( : [ ] bool { var ID : [ - ( - ) ( - ) ID ) ) - ] bool }",
  "func ID ( ( : [ ] bool { - ID : [ var ( - ) ( - ) ID ) ) - ] bool }",
  "func ID ( ) { var ID : int var ID : [ ] int { var ID : * 123 / ID [ - 123 ] bool var ID : bool } } func ID ( ) { }",
  "func ID ] ) { var ID : int var ID : [ ( int { var ID : * 123 / ID [ - 123 ] bool var ID : bool } } func ID ( ) { }",
  "func ID ] ) { var ID : int var ID : [ ( int bool var ID : * 123 / ID [ - 123 ] bool var ID : { } } func ID ( ) { }",
  "- ID ( ID : int ) { var ID : [ ] int var ID : int call ID ( ) print true - ( func - ( false ) ) }",
  "- ID ( ID : int ) { var ID : [ ] : var ID int int call ID ( ) print true - ( func - ( false ) ) }",
  "- var ( ID : int ) { var ID : [ ] : ID ID int int call ID ( ) print true - ( func - ( false ) ) }",
  "func ID ( ) : int { while ID ( func [ - ( ( ( - ID ) ) ) ] ) { } } ID ID ( ) { }",
  "func ID ( ) : int { while ID ( func [ - ( ( ( - ID ) ) ) ] ) { } } ID ) ( ID { }",
  "func ID ( ) : int { while ID ( func [ } ( ( ( - ID ) ) ) ] ) { } - ID ) ( ID { }",
  "func ID ( ID : bool , ID : bool , false : [ ( true / ID == true / ( ID ) * 123 ) ] bool ) { } func ID ( ) { }",
  "func ID ( ID / bool , ID : bool , false : [ ( true : ID == true / ( ID ) * 123 ) ] bool ) { } func ID ( ) { }",
  "( ID func ID / bool , ID : bool , false : [ ( true : ID == true / ( ID ) * 123 ) ] bool ) { } func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID : bool { var ID : bool if - - ( ( ) - ID ) ) { } call ID ( ) } } func ID ( - { }",
  "func ID ( ) : int { var ID : int var ID : bool { var ID : bool if - - ( ( ) - ID ) ) { } call ID ( ) } } - ID ( func { }",
  "func ID ( ) : int { var ID : int var ID : bool { var ID : bool if - - } ( ) - ID ) ) { ( call ID ( ) } } - ID ( func { }",
  "func ID ( ) } print 123 / true - ( ID [ ( - ( ID ) ) ] ) if ( - true ) { } } func ID ( ) { {",
  "func { ( ) } print 123 / true - ( ID [ ( - ( ID ) ) ] ) if ( - true ) { } } func ID ( ) ID {",
  "func { ( ) } print 123 / true - ( ID [ ( - ( ID ) ) ] ) if ( - ) ) { } } func ID ( true ID {",
  "func ID ( ID { [ ( 123 > ID ( ID - ( 123 ) + false ) ) ] [ ] bool ) : }",
  "func ID ( ) { [ ( 123 > ID ( ID - ( 123 ID + false ) ) ] [ ] bool ) : }",
  "func ID ( ) { [ ( 123 > [ ( ID - ( 123 ID + false ) ) ] ID ] bool ) : }",
  "func ID ( ) : int { var : ID bool var ID : int } func ID ( ) : [ ID ( - ID ) ] int { }",
  "func ( ( ) : int { var : ID bool var ID : int } func ID ( ) : [ ID ID - ID ) ] int { }",
  "func ( ( ) : int { var : ID bool var ID : int } func ID ( ) : [ ID ID - ID ) ] int { }",
  "] ID ( ) : [ ( ( - - - ( - true ) ) ) func bool { }",
  "] ID ( ) : [ ( ( - - - ( - true ) ) ) func bool { }",
  "true ID ( ) : [ ( ( - - - ( - ] ) ) ) func bool { }",
  "func ID - ID : bool , ID : bool , ID : int ) { ID [ 123 / 123 + ID ( ( ( - false ) ) ] = 123 }",
  "func ID - ID : bool , ID : bool , ID : int ) { ID [ 123 / 123 + ID ( ( ( - false ) ) ] = 123 }",
  "func ID - ID : bool , ID : bool ) ID : int ) { ID [ 123 / 123 + ID ( ( ( - false , ) ] = 123 }",
  "func - ( ) { { var ID : int var ID : [ ] bool while ID [ ID false ] [ false ] { } } }",
  "func } ( ) { { var ID : int var ID : [ ] bool while ID [ ID false ] [ false ] { } } -",
  "func } ( ) { { var while : int var ID : [ ] bool ID ID [ ID false ] [ false ] { } } -",
  "func ID ( ) : while { bool - true + 123 or ID ( ) [ ID ] [ ID ] { } }",
  "func ID ( ) ID while { bool - true + 123 or : ( ) [ ID ] [ ID ] { } }",
  "func ID ( ] ID while { bool - true + 123 or : ( ) [ ID ) [ ID ] { } }",
  "func ID ( ) : int { { return } } ) ID ( func : [ ( ID ) ] int { }",
  "func ID ( ) : int { { return } ) } ID ( func : [ ( ID ) ] int { }",
  "func ID ( ) : int { { return } ) } int ( func : [ ( ID ) ] ID { }",
  "func ID ( ID : [ false - true / ( 123 and - ID and ( ( ID ) ) ) / false - true ] } ) { int func ID ( ) { }",
  "func ID ( ID : [ false - true / ( 123 and - ( and ( ID ID ) ) ) / false - true ] } ) { int func ID ( ) { }",
  "func ID ( ID ) [ false - true / ( 123 and - ( and ( ID ID ) ) ) / false - true ] } : { int func ID ( ) { }",
  "func ID ( ) { var bool : int var ID : ID call ID ( ) call ID ( ) return ID [ ( true ) ] [ false ] }",
  "func ID call ) { var bool : int var ID : ID ( ID ( ) call ID ( ) return ID [ ( true ) ] [ false ] }",
  "func ID call ) { var bool : int var ID : ID ( ID ( ) call return ( ) ID ID [ ( true ) ] [ false ] }",
  "func ID ( ) : [ - ( ID ( ) * false - ( { false ) ) ] [ ] int - }",
  "( ID ( ) : [ - ( ID func ) * false - ( { false ) ) ] [ ] int - }",
  "( ID ( ) : [ - ( func ID ) * false - ( { false ) ) ] [ ] int - }",
  "ID ID ( ) : bool { var ID : bool ID ( ID / true * func - - ID ) = - ID call ID ( ) }",
  "ID ID ( ) : bool { var ID : bool ID ( ID / true * func - - ID ) = - ID call ID ( } )",
  "func ID ( ) ( [ ] int { print - : ( false * false * 123 ) ) }",
  "func ID ) ) ( [ ] int { print - : ( false * false * 123 ( ) }",
  "* ID ) ) ( [ ] int { print - : ( false func false * 123 ( ) }",
  "func ID ( ) ) var ID : bool var ID : int return ( ( ID ( true { ) ) }",
  "func ID ( ) ) var ID : ( var ID : int return ( bool ID ( true { ) ) }",
  "func ID ( ) ) var ID : ( var ID : int ) ( bool ID ( true { ) return }",
  "func ID ( ) : int { var ] : [ - ( true / false / false - ( 123 ) ) ID bool } func ID ( ) { }",
  "func 123 ( ) : int { var ] : [ - ( true / false / false - ( ID ) ) ID bool } func ID ( ) { }",
  "func ID ( ) ID { var ID : [ false * - ( ID * { / - ( true ) ) * ( true ) ] [ ] int } }",
  "func ID ( ) ID { var ID : [ false * - ( true * { / - ( true ) ) * ( ID ) ] [ ] int } }",
  "func ID } ) ID { var ID : [ false * - ( true * { / - ( true ) ) * ( ID ) ] [ ] int ( }",
  "func ID ( ID : int ) { var ID : [ false - ID ( - - ID ) * ( / ID ) ] int } func ID ( ) { }",
  "func ID ( ] : int ) { var ID : [ false - ID ( - - ID ) * ( / ID ) ID int } func ID ( ) { }",
  "func false ( ] : int ) { var ID : [ ID - ID ( - - ID ) * ( / ID ) ID int } func ID ( ) { }",
  "func ID ( ) { var int : [ true / - - true and false * ID ( ) ] [ ] ID }",
  "func ID ( ) { var int : [ true / - ) true and false * ID ( - ] [ ] ID }",
  "func [ ( ) { var int : ID true / - ) true and false * ID ( - ] [ ] ID }",
  "func ID ( ) : int { var ID ] [ ] [ 123 / - - 123 * ID ( ) [ - - true : ] int var ID : bool }",
  "func ID ( ) : ] { var ID int [ ] [ 123 / - - 123 * ID ( ) [ - - true : ] int var ID : bool }",
  "func ID ( ) : ] { var ID int [ [ [ 123 / - - 123 * ID ( ) ] - - true : ] int var ID : bool }",
  "func ID ( ID : int , ID : [ - ID [ ID ( ID ) ] } ( true ) ] ] int , ID : bool ) { } func ID ( ) { [",
  "func ID ( [ : int , ID : [ - ID ID ID ( ID ) ] } ( true ) ] ] int , ID : bool ) { } func ID ( ) { [",
  "func ID ( [ : int } ID : [ - ID ID ID ( ID ) ] } ( true ) ] ] int , ID : bool ) { , func ID ( ) { [",
  "func ID ( ) : bool { var ID : [ ] bool ID [ - ID - ( ( - ( - ID ) ) ) ] = ( ( - true ) ) { } ID func } ( ) { }",
  "func ID ( ) : bool { var ID : [ ] bool ID [ - ID - ( ( - ( - ID ) ) ) ] = ( ( - true ) ) { } ID func } ( ) { }",
  "func ID ( ) : bool { var ID : [ ] bool ID [ - ID - ( ( - ( - ID ) ) ( ] = ) ( - true ) ) { } ID func } ( ) { }",
  "func ID ( ) } { var ID : [ ] bool var ID : [ ] [ 123 / ( ID ) ] bool } {",
  "func ID ( ) ( { var ID : [ ] bool var ID : [ ] [ 123 / } ID ) ] bool } {",
  "func ID ( ) ( { var ID : [ ] bool var ID : [ ] [ 123 / } ) ID ] bool } {",
  "- ID ( ) { var ID : [ ] [ 123 - ID ( ) [ - func - 123 ] [ ( - ID ) ] ] int } func ID ( ) { }",
  "- ID ( ) { var ID : [ ] [ 123 123 ID ( ) [ - func - - ] [ ( - ID ) ] ] int } func ID ( ) { }",
  "- ID ( ) { var ID : [ ] [ 123 123 ID ( ) [ - func - - ID [ ( - ID ) ] ] int } func ] ( ) { }",
  "func ID ( ID : int , ID : bool , ID : bool ) { var ID : [ } int while false + - - - ID { ] }",
  "func ID ( ID : int ID ID : bool , ID : bool ) { var , : [ } int while false + - - - ID { ] }",
  "func ID ( ID : [ ] bool ) : bool { var ID : int var ID : int print ID ( ID ) func ID } print ID ( ) { }",
  "func ID ( [ : ID ] bool ) : bool { var ID : int var ID : int print ID ( ID ) func ID } print ID ( ) { }",
  "func ID ( ) : bool { var ID 123 int while ( ( : / 123 * ( ID ) ) ) { } }",
  "func ID ( ) : bool { var ID 123 int while ( ( : / 123 * ( } ) ) ) { ID }",
  "func ID ( ) : bool { var ID 123 : while ( ( int / 123 * ( } ) ) ) { ID }",
  "func ID ( ID : [ ] [ ( - ) [ - false + ( false ) + false ] ) ] int { }",
  "func ID ( ID : [ ] [ ( - } [ - false + ( false ) + false ] ) ] int { )",
  "func ID ( ID : [ ] false ( - } [ - [ + ( false ) + false ] ) ] int { )",
  "func ID ( ) + int { var ID : bool print true : ( ID [ - false ] ) - - 123 }",
  "func ID ( ) + int { var ID : bool print true : ( ID - - false ] ) - [ 123 }",
  "func ID ( ) + ] { var ID : bool print true : ( ID - - false int ) - [ 123 }",
  "func ID ( ) : int { } } ID ( ) : bool { ID ( ) = - false / - false / ( ID ) if true { func }",
  "func ID ( ) : int { } } ID ( ) : bool { ID ) ) = - false / - false / ( ID ( if true { func }",
  "func ID true ) : int { } } ID ( ) : bool { ID ) ) = - false / - false / ( ID ( if ( { func }",
  "func ID ( ID : [ ] int ) ID : bool , ID : [ - ( - false / - ( - true , * ID ) ] bool ) { }",
  "func ID ( ID : } ] int ) ID : bool , ID : [ - ( - false / - ( - true , * ID ) ] bool ) { [",
  "func ID ( ID : - ] int ) ID : bool , ID : [ - ( - false / - ( } true , * ID ) ] bool ) { [",
  "func ID ( ID : [ - false { false - - false * ID != 123 ] [ ] int ) { } func ID ( ) - }",
  "func ID ( ] : [ - false { false - - false * ID != 123 ID [ ] int ) { } func ID ( ) - }",
  "func ID ( ] : [ - * { false - - false false ID != 123 ID [ ] int ) { } func ID ( ) - }",
  "ID func ( ) : int { var ID : bool var ID : [ ] [ ( - ID ( ) ) ] bool }",
  "ID func ( ) : int { var ID : bool : ID var [ ] [ ( - ID ( ) ) ] bool }",
  "ID func ( ) ID int { var ID : bool : ID var [ ] [ ( - : ( ) ) ] bool }",
  "func ID ( ) : [ ] bool { } func ID ( ID : bool , ID : : ) { var ID bool [ ID ] [ ] int var ID : bool }",
  "func ID ( ( : [ ] bool { } func ID ) ID : bool , ID : : ) { var ID bool [ ID ] [ ] int var ID : bool }",
  "func ID ( ( : [ ] bool { } func ID ) ID : bool } ID : : ) { var ID bool [ ID ] [ ] int var ID : bool ,",
  "func ID ( ID : bool ) : int { var ID : [ var [ ] bool ] ID : bool return ( ID ) }",
  "func ID ( ID : bool ) : int { var ID : [ var ( ] bool ] ID : bool return [ ID ) }",
  "func } ( ID : bool ) : int { var ID : [ var ( ] bool ] ID : bool return [ ID ) ID",
  "func ID var ) { ( ID : bool var ID : [ ] int { var ID : [ ] [ ] bool var ID : int print - false while - ID { } } while false { } } func ID ( ) { }",
  "func ID var ) { ( ID : bool var ID : [ ] int { var ID : [ ] [ ] bool var } : int print - false while - ID { } } while false { ID } func ID ( ) { }",
  "func ID var ) { var ID : bool var ID : [ ] int { ( ID : [ ] [ ] bool var } : int print - false while - ID { } } while false { ID } func ID ( ) { }",
  "func ID int ID : ( ) { return }",
  "func ID int ID : ( ) { return }",
  "func ) int ID : ( ID { return }",
  "func ID ( ID : bool , int : bool , ID : ID ) { var ID : int var ID : [ - false * ID ] bool }",
  "func ID ( ID : bool , int : bool , ID : ID ) { var ID : int var ID : [ - false bool ID ] * }",
  "func ID ( ID : bool , int : bool , ID : ID ) { var ID : int var ID : [ - ID bool false ] * }",
  "func ID ( ID : bool , ID : int : ID : int ) , int { var ID : int var ID : bool print - ( 123 ) ID = ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : ID , ID : int : ID : int ) , int { var bool : int var ID : bool print - ( 123 ) ID = ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : ID , ID : int : ID : int ) , int { var bool : int var ID : bool print - ( 123 ) ID = ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) { } func ID ( ) : bool , ID : [ ( 123 ) ] int ID { }",
  "func ID ( ID : , , ID : int bool ID : int ) { } func ID ( ) : bool , ID : [ ( 123 ) ] int ID { }",
  "func ID ( ID : , , ID : int bool ID : int ) { } func ID ( ) : bool , ID : [ ( 123 ) ] int ID { }",
  "] ID ( ID : bool , ID : bool ) { var ID : [ ( false - false + ID ) func [ ] [ ] int var ID : bool }",
  "] ID ( ID : bool , ID : bool ) [ var ID : [ ( false - false + ID ) func { ] [ ] int var ID : bool }",
  "] ID ( ID : [ , ID : bool ) [ var ID : [ ( false - false + ID ) func { ] bool ] int var ID : bool }",
  "func ID ( ID : ) , ID : bool , ID : [ ] int ) { while true * - ( ( - ID ) bool { } } func ID ( ) { }",
  "func ID ( ID : ) , ID : bool , ID : [ ] int ) { while true * - ( ( - ID ) bool { } } } ID ( ) { func",
  "func ID ( ID : ) , ID : bool , ID : [ ] int ) { while true * - ( ( - ID ) bool { } ( } ID } ) { func",
  "func ID ( ) ID [ - ID ( - 123 / true * ( - ( ( : ) ) ) ) ] [ ] int { }",
  "func ID ( ) } [ - ID ( - 123 / true * ( - ( ( : ) ) ) ) ] [ ] int { ID",
  "func ID ) ) } [ - ID ( - 123 / true * ( - ( ( : ( ) ) ) ] [ ] int { ID",
  "func ID ( ) { var ID : bool ID ( 123 [ ( false * ID [ ) ] [ 123 ] ) ] [ - ( - ID ) ] = ( ID ) { } }",
  "func ID ( ) { var ID : bool ) ( 123 [ ( false * ID [ ) ] [ 123 ] ) ] [ - ( - ID ) ] = ( ID ID { } }",
  "func ID ( ) { var ID : bool ID ( 123 [ ( false * ID [ ) ] [ 123 ] ) ] [ - ( - ) ) ] = ( ID ID { } }",
  "func ID ( ) { var ID : bool ) ID : bool if - ID / ( - ID var / ID { } }",
  "func ID ( ) { : ID var bool ) ID : bool if - ID / ( - ID var / ID { } }",
  "func ID ( ) { : ID var bool ) ID ID bool if - : / ( - ID var / ID { } }",
  "func ID ( ) : [ ] int { var ID : : var ID int int }",
  "int ID ( ) : [ ] func { var ID : : var ID int int }",
  "int ID ] ) : [ ( func { var ID : : var ID int int }",
  "func ID } ) : bool { var ID : [ ] [ ] bool (",
  "func ID } ) [ bool { var ID : [ ] : ] bool (",
  "func [ } ) ID bool { var ID : [ ] : ] bool (",
  "func ID ( ) { var ID : bool : ID var bool { while ID [ false * - ( - false ) * ID ] { } if true { } } } func ID ( ) { }",
  "func ID ( ) { var ID : bool : ID var bool { while ID [ false * - ( - false ) * ID ] ( } if true { } } } func ID { ) { }",
  "func ID ] ) { var ID : bool : ID var bool { while ID [ false * - ( - false ) * ID ( ( } if true { } } } func ID { ) { }",
  "func ID ( } { while ( ( ( ( - false ) ) ) ) { } )",
  "func ID ( } { while ( ) ( ( - false ) ( ) ) { } )",
  "func ID } ( { while ( ) ( ( - false ) ( ) ) { } )",
  "func ID ( ) : int { return } func ID ID ID : bool ) { var ID : int var ( : int while - 123 { } }",
  "func ID ( ) : int { return } func ID ID ID : var ) { bool ID : int var ( : int while - 123 { } }",
  "func ID ( ) : int { return } func ID ID ID : var ) { bool ID : int var ( : int while - 123 { } }",
  "func ID ( ) : bool ] } func ID ( ID : bool , ID : bool , ID : [ 123 * ID [ 123 { ] bool ) { }",
  "func ID ( ) : bool ] } func ID * ID : bool , ID : bool , ID : [ 123 ( ID [ 123 { ] bool ) { }",
  "func ID ( ) : bool ] } func ID * ID : bool , ID : bool , ID : [ 123 ( ID [ ] { 123 bool ) { }",
  "func ID ( ) - { } return - - 123 / ( ID ( ) [ - { ID ] ) }",
  "func ID ( ) return { } - - - 123 / ( ID ( ) [ - { ID ] ) }",
  "func ID ( ) return { } - - - 123 / ( - ( ) [ ID { ID ] ) }",
  "[ ID ( ID : int , ID : bool , ID : [ ] func - ID ( ) [ ( ID ) ] [ - - ID ] ] int ) { }",
  "[ ID ( ID : int , : : bool , ID ID [ ] func - ID ( ) [ ( ID ) ] [ - - ID ] ] int ) { }",
  "[ ID ( - : int , : : bool , ID ID [ ] func - ID ( ) [ ( ID ) ] [ - ID ID ] ] int ) { }",
  "func ID ( ID ID bool , ID : int , ID : bool ) { var ID : int { var ID : bool var : : [ - ( ID ) ] int } ID = ID } func ID ( ) { }",
  "func ID ( ID ID bool , ID : int , ID : bool ) { var ID - int { var ID : bool var : : [ : ( ID ) ] int } ID = ID } func ID ( ) { }",
  "func ID ( ID ID bool , ID : int , ID : bool ) { var ID - int func var ID : bool var : : [ : ( ID ) ] int } ID = ID } { ID ( ) { }",
  "func ID ( { : bool ) var ID : bool call ID ( ) print - ( false * - false / false ) }",
  "func ID ( { : bool ) var ID : print call ID ( ) bool - ( false * - false / false ) }",
  "} ID ( { : bool ) var ID : print call ID ( ) bool - ( false * - false / false ) func",
  "func ID ( ) { var ID : int } ID : [ ] int while ( ID [ - ( ( true ) ) ] ) { var } func ID ( ) { }",
  "func ID ( ) { var ID : int } ID : [ } int while ( ID [ - ( ( true ) ) ] ) { var } func ID ( ) { ]",
  "func ID ( ) int var ID : int } ID : [ } { while ( ID [ - ( ( true ) ) ] ) { var } func ID ( ) { ]",
  "func ID ( ) [ [ ] [ ] int { return - - ID / - ID : ID ] }",
  "func ID ( : [ [ ] [ ] int { return - - ID / - ID ) ID ] }",
  "func ID ( [ : [ ] [ ] int { return - - ID / - ID ) ID ] }",
  "func ID ( ID : bool , ID { bool ) : var ID : int while - ( - - - - ( ID ) ) { } }",
  "func ID ( : ID bool , ID { bool ) : var ID : int while - ( - - - - ( ID ) ) { } }",
  "func ID ( : ID bool , ID { bool ) ( var ID : int while - : - - - - ( ID ) ) { } }",
  "func ) ( ID : int ID { var ID : bool call ID ( ) }",
  "func ) ( ID : int ID { var ID : bool call ID ( ) }",
  "func : ( ID ) int ID { var ID : bool call ID ( ) }",
  "func ( ( ) : bool { call ID ( ID - false - ID + true ) ) }",
  "func ( ( ) : bool ID call { ( ID - false - ID + true ) ) }",
  "func ( ( ) : bool ID call { ( ID - false - ) + true ID ) }",
  "func int ( ID : bool , ID : int , ID : ID ) : bool { var ID : [ true / ( ID ) ] bool }",
  "func int ( ID : bool , ID ] int , ID : ID ) : bool { var ID : [ true / ( ID ) : bool }",
  "func int ( ID : bool , ID ] int , ID : ID ) : bool { var ID : [ true / ( ID ) : bool }",
  "func ID ( ) : ID ] bool { var [ : int }",
  "func ID ( ) : ID { bool ] var [ : int }",
  "} ID ( ) : ID { bool ] var [ : int func",
  "func ID ( ) : ) - ( ID * true - ( ( ( ID ) ) ) [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( [ : ) - ( ID * true - ( ( ( ID ) ) ) ) ] [ ] bool { } func ID ( ) { }",
  "func ID ( [ : ) - ( ID * true - ( ( ( bool ) ) ) ) ] [ ] ID { } func ID ( ) { }",
  "func ID ( ID : [ ] { , ID : [ ( ( - ID [ ID ] ) ) ] bool , ID : [ ] int ) int }",
  "func ID ( } : [ ] { , ID : [ ( ( - ID [ ID ] ) ) ] bool , ID : [ ] int ) int ID",
  "func ID ( } : [ ID { , ID : [ ( ( - ID [ ID ] ) ) ] bool , ID : [ ] int ) int ]",
  "func ID ( ID : [ ] [ false / true <= ID * 123 + { ( ) - - ( ( ( true ) ) ) ] int ) { } func ID ( ) ID }",
  "func ID ( ID : [ ] [ false / true <= ID * 123 + { ( ) - - ( ( ( true ) ) ) ] int ) { } func ID ( ) ID }",
  "func ID ( ID : [ ] [ false / true <= ID * 123 } { ( ) - - ( ( ( true ) ) ) ] int ) { + func ID ( ) ID }",
  "123 ID ( ) : [ false * ( ( 123 / ID ( true ) * ( true ) ) ) * func ] bool { }",
  "123 ID ( : ) [ false * ( ( 123 / ID ( true ) * ( true ) ) ) * func ] bool { }",
  "123 ID ( : * [ false ) ( ( 123 / ID ( true ) * ( true ) ) ) * func ] bool { }",
  "func ID ( ID : [ ] [ ] [ ] bool ) : [ ] int { var ID : ( - ( ID ) ] [ ] bool var ID : int } func ID [ ) { }",
  "func ID ( ID : [ ] [ ] [ ] bool ) : [ ] int { var ID : ( - ( ID ) ] [ ] bool var ID : int } func ID [ ) { }",
  "func ID ( ID : [ ] [ ] [ ID bool ) : [ ] int { var ID : ( - ( ] ) ] [ ] bool var ID : int } func ID [ ) { }",
  "func ID ( ID : bool , ID : [ - ( ( false * ( ( ) * - - ( ID - 123 ) ) ) ) ] [ ] [ ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ - ( ( false * ( ( ) * - - ( ID - 123 ) ) ) ) ] ) ] [ ] int , ID : bool [ { } func ID ( ) { }",
  "func ID ( ] : bool , ID : [ - ( ( false * ( ( ) * - - ( ID - 123 ) ) ) ) ] ) ] [ ID int , ID : bool [ { } func ID ( ) { }",
  "func } ( ) { var ID : int var ID : [ ( ID * ID ( ( ( - ( - ( ID ) ) ) ) ) ) ] [ ] bool ID func ID ( ) { }",
  "func } ( ) { ID ID : int var ID : [ ( var * ID ( ( ( - ( - ( ID ) ) ) ) ) ) ] [ ] bool ID func ID ( ) { }",
  ") } ( ) { ID ID : int var ID : [ ( var * ID ( ( ( - ( - ( ID ) ) func ) ) ) ] [ ] bool ID func ID ( ) { }",
  "func ID ( ) : bool { var ) : bool return - ( true / - ID ( 123 ID ) }",
  "func ID ( ) : bool { var ) : bool return - ( true / - ID ( 123 ID ) }",
  "func ID ( ) : bool { var - : bool return ) ( true / - ID ( 123 ID ) }",
  "func ID ( ) : [ } ID ( 123 / ID ( false / ( ID ) * - ( true ) ) ) ] int { } func ID ( ) { -",
  "func ID ( ) : [ } ID ( 123 / ID ( false / ( ID ) * ] ( true ) ) ) - int { } func ID ( ) { -",
  "func ID / ) : [ } ID ( 123 / ID ( false ( ( ID ) * ] ( true ) ) ) - int { } func ID ( ) { -",
  "func ID ( ID : int , ID : [ - true / ID ( ID [ ] ( false ) - ) / false ] bool ) { }",
  "func , ( ID : int ID ID : [ - true / ID ( ID [ ] ( false ) - ) / false ] bool ) { }",
  "func , ( ID : int } ID : [ - true / ID ( ID [ ] ( false ) - ) / false ] bool ) { ID",
  "func ID ( ID : bool , ID : int , ID : int ) : [ ] bool { { ID : bool var ID : bool if ( ID ) var } while ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : [ ] bool { { ID : bool var ID : bool if ( ID ) var } while ID { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : int ) : [ ] bool { { ID : bool var ID : bool if ( ID ) var } while ID { } } func ID ( ) { }",
  "func ID ( ID ID int , ID : [ ] bool , ID : int ) { var : : [ ] [ - ID ( ) ] [ ] bool }",
  "func ID ( ID ID int , ID : [ ] bool , ID : int ) { var : : [ ] [ ( ID - ) ] [ ] bool }",
  "func ID ( ID ID int , ID : [ ] bool , ID : int ) { var : : [ ] [ ( ID - ) ] [ ] bool }",
  "func ID ( ] { print ID [ false - ( - ID ( ) ) + ( ID ) ) [ true ] call ID ( ) }",
  "( ID ( ] { print ID [ false - ( - ID func ) ) + ( ID ) ) [ true ] call ID ( ) }",
  "( ID ( ] { print ID [ false - ( - ID func ) ) + ( ID ) ) [ true ] call ID ( ) }",
  "func ID ( ID : int [ ID : int , ID : bool ) : [ ] , ] bool { var ID : [ - - false ] [ ] [ ] bool }",
  "func ID ( , : int [ ID : int ID ID : bool ) : [ ] , ] bool { var ID : [ - - false ] [ ] [ ] bool }",
  "func ID ( , ID int [ ID : int : ID : bool ) : [ ] , ] bool { var ID : [ - - false ] [ ] [ ] bool }",
  "func ID ( ID : int ) { var ID : int print false / - [ ( ) [ 123 ] ID - ( - ID ) ] / ( - - 123 ) }",
  "func ID ( ID : int - { var ID : int print false / - [ ( ) [ 123 ] ID - ( ) ID ) ] / ( - - 123 ) }",
  "func ID int ID : ( - { var ID : int print false / - [ ( ) [ 123 ] ID - ( ) ID ) ] / ( - - 123 ) }",
  "func ID ( ID : [ ] bool , ID ) int , ID : bool ) { var ID : bool var ID : [ ] bool return } func ID ( : { }",
  "func ID ( ID : [ ] bool , ID ) int , ID : bool ) : var ID : bool var ID { [ ] bool return } func ID ( : { }",
  "func ID ( ID ID [ ] bool , ID ) int , ID : bool ) : var ID : bool var ID { [ ] bool return } func : ( : { }",
  "func ID ( ) : bool { var ID : int var ID : bool return : func ID ( ID : bool , ID } bool , ID : [ ID ] bool ) { }",
  "func ID ( ) : bool { ID ID : int var ID : bool return : func ID ( ID : bool , ID } bool , ID : [ var ] bool ) { }",
  "func ID ( ) : bool { ID ID : int var ID : bool return : func ID ( ID : bool , ID } bool , ID : [ var ] bool ) { }",
  "func ID ( ID : [ ID ( ( - - ID ) ( ID ) / ) ] bool ) { }",
  "func ID ( ID : [ ] ( ( - - ID ) ( ID ) / ) ID bool ) { }",
  "func ID ( ( : [ ] ( ( - - ID ) ID ID ) / ) ID bool ) { }",
  "func ID ( ID : bool ] : int { return } func ID ( ID : int , ID : [ ) [ ID ] bool ) { }",
  "func ID ( ID : bool ] : int { return } func ID ) ID : int , ID : [ ) [ ID ] bool ( { }",
  "func ID ( : : bool ] : int { return } func ID ) ID ID int , ID : [ ) [ ID ] bool ( { }",
  "func ID ( ) { var ID : [ ] bool ) ID ( 123 - ( - false ) - ( true return ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] bool ) ID ( 123 - ( - false ) - ( true return ) } func ID ( ) { }",
  "func ID ( ) - var ID : [ ] bool ) ID ( 123 - ( { false ) - ( true return ) } func ID ( ) { }",
  "func ID } ID : bool , ID : int ) : int { var ID : int var ID : [ ] [ ( ID ) ] bool (",
  "func ID } ID : bool , ID : var ) : int { var ID : int int ID : [ ] [ ( ID ) ] bool (",
  "func ID } ID : bool : ID : var ) : int { var ID : int int ID , [ ] [ ( ID ) ] bool (",
  "func ID ( ) { } func ID ( ID : bool , ID : false - - true * ( ( ID ) ) * ( ( ( [ ) ) ) ] [ ] [ ] bool , ID : bool ) { }",
  "func ID ( ) { } func ID ( ID : ) , ID : false - - true * ( ( ID ) ) * ( ( ( [ bool ) ) ] [ ] [ ] bool , ID : bool ) { }",
  "func ID ( ) { } func ID ( ID : ) , ID : false - - true * ( ( ID ) ) * ( ( ( [ bool ) ) ] [ ] [ ] bool , ID : bool ) { }",
  "ID ID ( ID : bool , ID : bool ) { var func : [ 123 / - ID [ - ID ] [ ID ] / ID ] [ ] [ ] [ ] int }",
  "ID ID ( ID : bool , ID : bool ) { var func : [ 123 / - ID [ ] ID ] [ ID ] / ID ] [ - [ ] [ ] int }",
  "ID ID ( ID : bool , ID : bool ) { var func : [ 123 / - ID [ ] ID ] [ ID ] ] ID ] [ - [ / [ ] int }",
  "func ID ( ) { var ID : [ ] int { var ID : [ ] [ false / ID ( ) ] int } - = ID ( ID ) }",
  "func ID ( ) { : ID : [ ] int { var ID var [ ] [ false / ID ( ) ] int } - = ID ( ID ) }",
  "func ID ( ) { : ID : [ ] int { var var ID [ ] [ false / ID ( ) ] int } - = ID ( ID ) }",
  "func ID ( ) { return } func ID ( } : bool { var ID : int var ID : bool { return ( ( ID ) ) } )",
  "func ID ( ) { return } func ID ( } : bool { var ID : int var ID : bool { return ) ( ID ( ) } )",
  "func ID ( ) { return } func ID ( } : bool { var ID : int var ID : bool ) return { ( ID ( ) } )",
  "func ID ( ID : ID ] bool ) { var ID : [ 123 / ( - ( [ ) ) * ID ] [ ] bool }",
  "func ID ( ID : ID ] bool ) { var ID : [ 123 / ( - ( [ ) ) * ID } [ ] bool ]",
  "func [ ( ID : ID ] bool ) { var ID : ID 123 / ( - ( [ ) ) * ID } [ ] bool ]",
  "func ID ( ) { var ID : int var ID : { if false == 123 * ( - ( ID ) ) { } if ( ID ) int } }",
  "func ID ( ) { var ID : int var ID : { } false == 123 * ( - ( ID ) ) { if if ( ID ) int } }",
  "func ID ( ) { var ID : int var ID : { ID false == 123 * ( - ( } ) ) { if if ( ID ) int } }",
  "func ID ( ID : int ] ID : bool ) { var ID : [ , int ID [ ID [ ID ] ] = true print ID } func ID ( ) { }",
  "func ID ( ID : [ ] : , ID : int ) { var ID int [ ] bool var ID : int { return } ID = ID }",
  "func bool ( ID : [ ] : , ID : int ) { var ID int [ ] ID var ID : int { return } ID = ID }",
  "func bool ( ID : = ] : , ID : int ) { var ID int [ ] ID var ID : int { return } ID [ ID }",
  "func ID ( ) : int { var ID : int var ID : int if - - ( ID [ - ( - 123 ) ] ) { } print true } func ID { ) ( }",
  "func ID ( ) : int { int ID : int var ID : var if - - ( ID [ - ( - 123 ) ] ) { } print true } func ID { ) ( }",
  "func ID ( ID : int { int ID : int var ID : var if - - ( ) [ - ( - 123 ) ] ) { } print true } func ID { ) ( }",
  "func ID ( ( : [ ] int , ID : bool , ID : [ ID ID ( ) [ ID ] ) ] [ ] bool ) { }",
  "func ID ) ( : [ ] int , ID : bool , ID : [ ID ID ( ( [ ID ] ) ] [ ] bool ) { }",
  "func ID ) ( : [ ) int , ID : bool , ID : [ ID ID ( ( [ ID ] ) ] [ ] bool ] { }",
  "func ID ( ) : int { var ID : bool var ID : bool print true ( * ID ( ( false ) ) ) { } }",
  "func ID ( ) : int { var ID : bool var ID : bool print true ( * ID ( ( false ) ) ) { } }",
  "func ID ( * : int { var ID : bool var ID : bool print true ( ) ID ( ( false ) ) ) { } }",
  "func ID ( ID : int , ID : [ true ] int } : bool { var ID : bool var ID : [ ID ] int } func ID ( ) { )",
  "func ID ( ID : int , ID : [ true ] int } : bool { { ID : bool var ID : [ ID ] int } func ID ( ) var )",
  "func ID ( ID ID int , : : [ true ] int } : bool { { ID : bool var ID : [ ID ] int } func ID ( ) var )",
  "func ID ( ID : [ ] int , ID : [ ( ID [ - 123 / ID ] ) ] bool ) { } func ID ( { ) }",
  "func ID ( ID : [ ] int , ID : [ ( ID [ - 123 / ID bool ) ] ] ) { } func ID ( { ) }",
  "func ID ( ID : [ ] ID , ID : [ ( ID [ - 123 / int bool ) ] ] ) { } func ID ( { ) }",
  "func ID ( ) : bool , ID : [ ] int ID { }",
  "func ID ( bool : ) , ID : [ ] int ID { }",
  "func ID ( , : ) bool ID : [ ] int ID { }",
  "func ID ( ID : bool , ID : bool , ID : bool ) { bool ID : var var ID : [ ] int { var ID : [ ] bool var ID : bool } }",
  "func ID ( bool : bool , ID : bool , ID : bool ) { ID ID : var var ID : [ ] int { var ID : [ ] bool var ID : bool } }",
  "func ID ( bool : bool , ID : bool , ID : bool ) { ID ID : var var ID : [ ] int { var ID : [ ] bool var ID : bool } }",
  "func ID ( ID : ID ) : int { var bool : bool }",
  "func ID ( ID } ID ) : int { var bool : bool :",
  "func ID ( ID } ID ) : int { var bool : bool :",
  "func : ( ID : [ ] int ) : int { var ID ID bool var ID : [ ] [ ( true ) ] int }",
  "func : ( ID : [ ] int ) : int { var ID ID bool var ID [ : ] [ ( true ) ] int }",
  "func : [ ID : ( ] int ) : int { var ID ID bool var ID [ : ] [ ( true ) ] int }",
  "func ID ( ) { var ID : int call ID ) ) return } func ID ( ( { print ( - ( ID ) ) }",
  "func ID ( ) { var ID : int call ID ) ) return ID func ID ( ( { print ( - ( } ) ) }",
  "func ID ( ) { var int : ID call ID ) ) return ID func ID ( ( { print ( - ( } ) ) }",
  "func ID ( ) : bool { } func ID ( ( { var ID : [ ] [ ] [ ] int var ID : bool print ( ( ( ID ) ) ) while ( ) - - 123 ) ) { } }",
  "func ID ( ) ] bool { } func ID ( ( { var ID : [ : [ ] [ ] int var ID : bool print ( ( ( ID ) ) ) while ( ) - - 123 ) ) { } }",
  "func ID ( ) ] { { } func ID ( ( { var ID : [ : [ ] [ ] int var ID : bool print ( ( ( ID ) ) ) while ( ) - - 123 ) ) bool } }",
  "func bool ( ID : [ ] ID ) : [ ] int { while - ( true / - true / ID ) { } } func ID ( ) { }",
  "func bool ( ID : [ ] ID ) : [ ] { { while - ( true / - true / ID ) int } } func ID ( ) { }",
  "func bool ID ID : [ ] ID ) : [ ] { { while - ( true / - true / ID ) int } } func ( ( ) { }",
  "func ID ( ID : , , ID : bool int ID : int ) : bool { var ID : int while ID ( ) / 123 { } ID = ID } func ID ( ) { }",
  "func ID ( ID : , , ID : bool int ID : int ) ID bool { var ID : int while ID ( ) / 123 { } : = ID } func ID ( ) { }",
  "func ID ( ID : , , ID : bool int 123 : int ) ID bool { var ID : int while ID ( ) / ID { } : = ID } func ID ( ) { }",
  "func ID ( ) : int { var var : int ID ID : bool ID ( ( true + ID ) ) = - ( ( false ) ) } func ID ( ) { }",
  "func ID ( ) : ( { var var : int ID ID : bool ID ( int true + ID ) ) = - ( ( false ) ) } func ID ( ) { }",
  "func ID ( ID : bool ) : [ ] [ ( ID + false / ) - ( - true ) * 123 - ] bool { }",
  "func ID ( ID : bool ) : [ ] [ ( ID + false / ) - ( - true ) * 123 - { bool ] }",
  "func ID ( ID : bool ) 123 [ ] [ ( ID + false / ) - ( - true ) * : - { bool ] }",
  "func ID ( ID : , , ID : bool int ID : [ - true * - ( ( ID ) ) ] int ) { }",
  "int ID ( ID : , , ID : bool func ID : [ - true * - ( ( ID ) ) ] int ) { }",
  "int ( ID ID : , , ID : bool func ID : [ - true * - ( ( ID ) ) ] int ) { }",
  "func ID ( ) { var ID : int var ID : [ ] bool { var ID : bool - 123 / ( ( if ( - ( - ID ) ) ) ) / ID { } } }",
  "func ID ( ) { var ID : int var ID : [ ] bool { var ID : bool - 123 / ( ( if ( - ( - ID ) ) ) ) } ID { } / }",
  "func ID ( ) { var ID : int var ID : [ ] 123 { var ID : bool - bool / ( ( if ( - ( - ID ) ) ) ) } ID { } / }",
  "func ID ( ) : bool , ID : [ - ID ( ID ( ID ) ID ] bool ) { }",
  "func ID ( ) : bool , ID : [ - ID ( ID ( ID ) ID ] ) bool { }",
  "func ID ( ID : [ ] bool , ID : [ ( ( ID [ ID ] [ ID ] ) ) ] bool , ID ) bool : { }",
  "func ] ( ID : [ ] bool , ID : [ ( ( ID [ ID ] [ ID ] ) ) ID bool , ID ) bool : { }",
  "func ] ( ID : [ ] bool , ID : [ ( ( ID [ ID { [ ID ] ) ) ID bool , ID ) bool : ] }",
  "func - ( ID : [ ] [ - ID ( ) [ ID ( ) / 123 ID ID + ( - ID ) ] ] bool ) { }",
  "func - ( ID : [ ] [ - ) ( ID [ ID ( ) / 123 ID ID + ( - ID ) ] ] bool ) { }",
  "func - ( ID : [ ] [ - ID ( ID [ ID ( ) / 123 ID ) + ( - ID ) ] ] bool ) { }",
  "func ID ( ) : [ ] [ ] [ ] bool { var ID : bool ( ID : bool if var ID ) { } } func ID ( ) { }",
  "func ID ( ) : ] [ [ ] [ ] bool { var ID : bool ( ID : bool if var ID ) { } } func ID ( ) { }",
  "func ID ( ) : ] [ [ ] [ ] bool { var ID : bool ( ID : bool if var ID ) { } } func ID { ) ( }",
  "func ID ( ID : ) ID [ ( ( - - ID ) [ ] ] [ ] bool ) { }",
  "ID func ( ID : ) ID [ ( ( - - ID ) [ ] ] [ ] bool ) { }",
  "ID func ( ID : ) ID [ ( ( - - ID ) bool ] ] [ ] [ ) { }",
  "func ID ( ID : int ) { while - - ID [ 123 / { ( ID ) ] [ - 123 ] - } }",
  "func ID ( ID : int ) { while - - ID [ } / { ( ID ) ] [ - 123 ] - 123 }",
  "func ID ( ID : int ) { while - - ID [ } ( { / ID ) ] [ - 123 ] - 123 }",
  "func ID ( ) { return ( - ID * ID ( ) [ ) ] * ( ID ) false } func ID ( ) { }",
  "func ID ( ) { return false - ID * ID ( ) [ ) ] * ( ID ) ( } func ID ( ) { }",
  "func ID ( ) { return false - ID * ID ( ) } ) ] * ( ID ) ( [ func ID ( ) { }",
  ") ID ( ) { ID = 123 + 123 / ( ( ( true ) ) func call ID ( ) }",
  ") ID ( ) { ID = 123 + 123 / ( ( ( ) ) true func call ID ( ) }",
  ") ID ( ) { ID = 123 + 123 / ( ( ( call ) true func ) ID ( ) }",
  "func ID bool ID : int ) : [ ] ( { var ID : int return - ( ( - - false ) ) }",
  "func var bool ID : int ) : [ ] ( { ID ID : int return - ( ( - - false ) ) }",
  "func var bool ( : int ) : [ ] ( { ID ID : int return - ( ID - - false ) ) }",
  "func ID ( ) { ID ( true / - - ID - false - - - true ) = 123 while ( 123 ) { } } func { ( ) ID }",
  "func ID ( ) { ID ( true / - - ID - false - - - true ) = 123 while ( 123 ) { } } func { ( ) ID }",
  "func ID ( func { ID ( true / - - ID - false - - - true ) = 123 while ( 123 ) { } } ) { ( ) ID }",
  "func ID ( ID : [ false and - - 123 * - ID [ ID ] [ * ] ID ID ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ false and - - [ * - ID [ ID ] 123 * ] ID ID ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ false ] - - [ * - ID [ ID and 123 * ] ID ID ] bool ) { } func ID ( ) { }",
  "func ID ( ) : bool { return } func ID } ) { if - ID ( ) [ ID ] [ ID ] { } call ID ( ) (",
  "func ID ( ) : bool { return } ) ID } ) { if - ID ( func [ ID ] [ ID ] { } call ID ( ) (",
  "func ] ( ) { var ID : [ ] [ ] [ ID [ true and ID and true ] [ false ] ID bool } func ID ( ) { }",
  "func ] ( ) { var ID : [ } [ ] [ ID [ true and ID and true ] [ false ] ID bool ] func ID ( ) { }",
  "func ] ( ) { var ID : [ } [ ] [ ID [ true and ID and true ] [ false ] ID bool ] func ID ( ) { }",
  "func ID ( ) : int { var ID : int var ID ( [ ( ( ( - 123 ) ) ) ] bool } func ID : ) { }",
  "func ID ( ) : int { var ID : int var ID ( [ ( ( ( - 123 ) ) ) ] bool } func : ID ) { }",
  "func ID ( ) : int { var ID : int var ID ( [ ( ( ( - 123 ) func ) ] bool } ) : ID ) { }",
  "func ID ( [ { var ID : ) ID [ ID [ - - - 123 ] ] ] int var ID : int } func ID ( ) { }",
  "func ID ( [ { var ID : ) ID [ ID [ - - - 123 ] ] ] int var ID : int } func ID ( ) { }",
  "func ID ID [ { var ID : ) ID [ ( [ - - - 123 ] ] ] int var ID : int } func ID ( ) { }",
  "func ID ( ) { var ID : bool } func ID ( ) : int { var ID : [ ] int var } : int if ( - true ) { } print ( ID ) ID",
  "func ID ( ) { var ID : bool } func ID ( ) : int { var ID : [ ] ID var } : int if ( - true ) { } print ( int ) ID",
  "func ID ( ) { var ID : bool } func ID ( ) : int { var ID : [ ID ] var } : int if ( - true ) { } print ( int ) ID",
  "func ID ( ID : int , ID : [ ] [ - - ID / - - ID ( - - ID ) / ) ID ) ] int ( { }",
  "func ID ( ID : int , ID : [ ] [ - - ID / - } ID ( - - ID ) / ) ID ) ] int ( { -",
  "func ID ( ID : int , : ID [ ] [ - - ID / - } ID ( - - ID ) / ) ID ) ] int ( { -",
  "func ID ( ID : int , ID : , int ID : [ ] int ) : bool { }",
  "func ID ( ID : int , ID : , int int : [ ] ID ) : bool { }",
  "func ID ( ID : ID , int : , int int : [ ] ID ) : bool { }",
  "func ID ( ) { [ ID : [ - ( ID ( - ID [ ID ] ) ) ] [ ] [ ] var ] [ ] [ ] [ ] bool }",
  "func ID ] ) { [ ID : [ - ( ID ( - ID [ ID ] ) ) ] [ ] [ ] var ( [ ] [ ] [ ] bool }",
  "func ID ( ) : int { var ID : int var ID ID bool if ID [ : ( ) ] { } }",
  "func ID ( ) : bool { var ID : int var ID ID int if ID [ : ( ) ] { } }",
  "func ID ( ) : bool { var ID : int var [ ID int if ID ID : ( ) ] { } }",
  "func ID ( ) } int { var ID : bool var ID : int return - ( ( ID ) ) :",
  "func ID ( ) } int { var ID : bool var ID : int return - ) ( ID ( ) :",
  "func ID ( ) } int { var ID : bool var ID : int return - ) ( ID ( ) :",
  "func ID ( ID : int , ID : int , ID : bool } : int { var ID : int var ID : bool return )",
  "bool ID ( ID : int , ID : int , ID : func } : int { var ID : int var ID : bool return )",
  "bool ID ( ID : int , ID : int , ID : func } : int : var ID : int var ID { bool return )",
  "func ID ( ID var [ ] int ) { var ID : int { var ID : int : ID : int return } ID = - ID } func ID ( ) { }",
  "func ID ( ID var [ ] int ) { var ID : int { var ID : int : ID : int return } ID = ( ID } func ID - ) { }",
  "func ID ( ID var [ ] int ) { var ID var int { : ID : int : ID : int return } ID = ( ID } func ID - ) { }",
  ") ID ( ID : bool , ID : bool , ID : int ) { var ID : [ ( ( ID ) func ] int }",
  ") ID ( ID : ) , ID : bool , ID : int ) { var ID : [ ( ( ID bool func ] int }",
  ") ID int ID : ) , ID : bool , ID : ( ) { var ID : [ ( ( ID bool func ] int }",
  "func ID ( ) : int { var ID : bool { var ID : [ ] bool var ID : [ ] bool { var ID : ID var ID : [ ] bool } ID = ID } while 123 { } } func int ( ) { }",
  "func ID ( ) ] int { var ID : bool { var ID : [ ] bool var ID : [ ] bool { var ID : ID var ID : [ : bool } ID = ID } while 123 { } } func int ( ) { }",
  "func ID ( ) { var ID : bool if ( ID ( ) + true / false * true + true ) { } print 123 } func ID } ) { (",
  "func ID ( ) { var ID : bool if ( ID ( ) + true / false * } + true ) { } print 123 } func ID true ) { (",
  "func ID ( ) { var ID : bool if ( ID ( ) + true / false * } + true ) { } print 123 } func ID true ) { (",
  "func ID ( ) : int { var ID : [ ( ( - ) false <= ID ) - ] [ ] int }",
  "func ID ( ) : int { var ID : - ( ( [ ) false <= ID ) - ] [ ] int }",
  "func ID ( ) : int { var ID : - ] ( [ ) false <= ID ) - ] [ ( int }",
  "func ID ( ) { var ID : ID print 123 - ( int [ 123 ] ) }",
  "func ID ( ) { var ID : ID print 123 ( - int [ 123 ] ) }",
  "func ID ( } { var ID : ID print 123 ( - int [ 123 ] ) )",
  "func ID ( ID : bool , ID : int , ID : int ) ] ID [ ID ( ) * ( false ) ] [ ( ( - - - ( ( true ) ) ) ) { = 123 call ID ( ) }",
  "func ID ( ID : [ , ID : int , ID : int ) ] ID bool ID ( ) * ( false ) ] [ ( ( - - - ( ( true ) ) ) ) { = 123 call ID ( ) }",
  "func ID ( ID : [ , ID : int , ID : int ) ] * bool ID ( ) ID ( false ) ] [ ( ( - - - ( ( true ) ) ) ) { = 123 call ID ( ) }",
  "func ID ( ) { var ID : int var ID : int } func ID ( ID : int , ID : int , ID var [ ] bool ) { : ID : [ ] int }",
  "func ID ID ) { var ID : int var ID : int } func ID ( ( : int , ID : int , ID var [ ] bool ) { : ID : [ ] int }",
  "func ID ID ) { var ID : int } ID : int } func ID ( ( : int , ID : int , ID var [ ] bool ) { : ID : [ ] int var",
  "func ID ( var { var ID : int { ) ID : int if ID [ - ID ] [ ( false ) ] { } } print 123 }",
  "func ID ( ID { var ID : int { ) ID : int if ID [ - var ] [ ( false ) ] { } } print 123 }",
  "func ID ( ID { var ID : int { ) ID : int if ID [ - var ] } ( false ) ] { [ } print 123 }",
  "func ID ( ) : int { var ID : bool var ID : int call ID ( ID ( ) 123 [ ] ) }",
  "func ID ( ) : ID { var ID : bool var ID : int call int ( ID ( ) 123 [ ] ) }",
  "func ID ID ) : ID { var ( : bool var ID : int call int ( ID ( ) 123 [ ] ) }",
  "func ID ( ID : int , ID : bool ) : bool { var ID : bool var ID ID int return } func ID ( : : int , ID : [ ] int , ID : [ ] int ) { }",
  "func ID ( ) { var ID : [ ] [ ] [ ( ( true + - } - - ( false ) ) ) ] int var ID : [ ] int false func ID ( ) { }",
  "( ID ( ) { var ID : [ ] [ ] [ func ( true + - } - - ( false ) ) ) ] int var ID : [ ] int false func ID ( ) { }",
  "( ID ( ) { var ID : [ ] [ ] [ func ( true false - } - - ( + ) ) ) ] int var ID : [ ] int false func ID ( ) { }",
  "func ID ( ID : [ ] int , ID : bool ) return var ID : bool var ID : int { } func ID ( ) { var ID : bool }",
  "func ID ( var : [ ] int , ID : bool ) return var ID : bool var ID : int { } func ID ( ) { ID ID : bool }",
  "func ID ( var : [ ] int , ID : bool ) return var ID : bool var ID : int { } func ID ( ) { ID ID : bool }",
  "func ID ( ) { var ID : [ ] [ ] int var ID : bool ( ID call ID ( ) / - - ID / ( ( true ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ] int var ID : bool ( ID call ( ( ) / - - ID / ID ( true ) ) ) } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ) int var ID : bool ( ID call ( ( ) / - - ID / ID ( true ) ) ) } func ID ( ] { }",
  "func ID ( ID ] int , ID : [ ] bool ) : [ ] [ : [ ] [ 123 * ID ] bool { } func ID ( ) { }",
  "func ID ( ID ] int ID ID : [ ] bool ) : [ ] [ : [ ] [ 123 * , ] bool { } func ID ( ) { }",
  "func bool ( ID ] int ID ID : [ ] bool ) : [ ] [ : [ ] [ 123 * , ] ID { } func ID ( ) { }",
  "func ID ( ) [ var ID : { ] [ ] int return }",
  "func ID ( ) [ var ID : ] { [ ] int return }",
  "func ] ( ) [ var ID : ] { [ ID int return }",
  "func ID ( ) { var ID : ID [ ( ( ID ( - 123 ) ) ) ] int }",
  "func ID ( 123 { var ID : ID [ ( ( ID ( - ) ) ) ) ] int }",
  "func ID ( 123 { var ID : ID [ ( ( ID ( - ) ) ) ) } int ]",
  "func ID ( ID ID [ : ( ID * ID + ( ( ( true ) ) ) ) ] int ) { }",
  "func ID ) ID ID [ : ( ID * ID + ( ( ( true ) ) ) ) ] int ( { }",
  "func ID ) ID ID [ : ( ID * ) + ( ( ( true ) ) ) ID ] int ( { }",
  "func ID ( ) { var ID : bool var ID : int while - - ( ( true func ) { } } ) ID ( ) { }",
  "func ID ( ) { var ID : func var ID : int while - - ( ( true bool ) { } } ) ID ( ) { }",
  "func ID ( ID : [ 123 / false / - - ID - ( ( - - - false ) ) ] [ ] [ ] { ] bool ) [ }",
  "func ID ( ] : [ 123 / false / - - ID - ( ( - - - false ) ) ] [ ] [ ] { ID bool ) [ }",
  "func ID ( - : [ 123 / false / - - ID - ( ( ] - - false ) ) ] [ ] [ ] { ID bool ) [ }",
  "func ID ( ID : [ ] false / ( ( ID + ID + - ID ) ) / - ( ID ) ) ] [ ] [ ( int ) { }",
  "func ID ( ID : [ ] false / ( ( ID + ID + / ID ) ) - - ( ID ) ) ] [ ] [ ( int ) { }",
  "func ID ( ) { var ID : [ ( false * - - - ID ( true ) / ID ) ] int var ID ] [ : int }",
  "func ID ( ) { var ID : [ ] false * - - - ID ( true ) / ID ) ( int var ID ] [ : int }",
  "func ID ( ) { var ID : [ ] false * - - - ID ( true ) / ID ) ( int var ID ] [ : int }",
  "func ID ( ID : int true ID : [ ] int , ID : [ , / - ID [ ID ] ] bool ) { }",
  "func ID ( int : ID true ID : [ ] int , ID : [ , / - ID [ ID ] ] bool ) { }",
  "func ID ( int : ID true ID : [ { int , ID : [ , / - ID [ ID ] ] bool ) ] }",
  "func ID ( true : int { var ID : [ ] [ ] int var ID : [ ID * - - 123 / ( ( ) ) ) ] bool }",
  "func ID ( true : int { var ID : [ ] [ ] int var ID : [ ID * - - ) / ( ( ) ) 123 ] bool }",
  "func ID ( true : int { var ID : [ ] [ ] int ID var : [ ID * - - ) / ( ( ) ) 123 ] bool }",
  "func ID ( ID : int , ID : int ) { var ID : int var ID : int call ID ( - ID ( ID ) ) ( ID call ) } func ID ( ) { }",
  "func ID ( ID : int , ID : int ) { var ID : ) var ID : int call ID ( - ID ( ID ) ) ( ID call ) } func ID ( int { }",
  "func ID ( ID : int , ID : int ) { ( ID : ) var ID : int call ID ( - ID var ID ) ) ( ID call ) } func ID ( int { }",
  "func ID ( ) : int ) var ID : [ ] [ ] int var ID : [ ] [ ] [ ] [ ( - false { ] [ ] [ ] int } func ID ( ) { }",
  "func ID ( ) : ID ) var ID : [ ] [ ] int var ID : [ ] [ ] [ ] [ ( - false { ] [ ] [ ] int } func int ( ) { }",
  "func ID ( ) : ID ) var ID : [ ] [ ] int var ID : [ ] [ ] [ ] [ ( - false { } [ ] [ ] int ] func int ( ) { }",
  "func ID ( ) { var ID : int : func ID ( ID : int , ID : [ ] int ) { var ID } [ true ] [ ] bool var ID : bool }",
  "func ID ( ) { var ID : int : func ID ( ID : int , ID : [ ] int ) { var ] } [ true ] [ ID bool var ID : bool }",
  "func ID ( ) { var ID : int : func ID ( ID : int , ID [ [ ] int ) { var ] } : true ] [ ID bool var ID : bool }",
  "func ID true ) { var ID : [ ( ID ( ( * ( ( - - ( ID ) ) ) / - true ) ) ] bool }",
  "func ID true ) { var ID : [ ( ID ( ( * ( ID - - ( ( ) ) ) / - true ) ) ] bool }",
  "func ID true ) { var ID ] [ ( ID ( ( * ( ID - - ( ( ) ) ) / - true ) ) : bool }",
  "func ID ( ID : [ ] [ ] } ) : [ ] [ ] [ ID ( ) [ ( ID ) ] [ ( ID ) ] ] bool { } func ID ( ) { bool",
  "] ID ( ID : [ ] [ ] } ) : [ ] [ ] [ ID ( ) [ ( ID ) ] [ ( ID ) func ] bool { } func ID ( ) { bool",
  "] ID bool ID : [ ] [ ] } ) : [ ] [ ] [ ID ( ) [ ( ID ) ] [ ( ID ) func ] bool { } func ID ( ) { (",
  "func int ( ID : bool , ID : int , ID : [ ] ID ) : int { var ID : int call ID ( ) }",
  "func int ( ID : bool , ID : int , ID : [ ] ID ID : int { var ID : int call ) ( ) }",
  "func int ( ID : bool , ID : int , ID : [ ] ID ID : int { var ) : int call ID ( ) }",
  "func ID ( ) : [ ( ( ID ( ID func ) ) ) ) ] int { } ( ID ( ) { }",
  "ID ID ( ) : [ ( ( ID ( func func ) ) ) ) ] int { } ( ID ( ) { }",
  "ID ID ( ) : [ ID ( ( ( func func ) ) ) ) ] int { } ( ID ( ) { }",
  "func ID ( ) { while - ( ID ( ) [ } - - 123 - ID ] ) { 123 }",
  "func ID ( ) { while - ( ID ( { [ } - - 123 - ID ] ) ) 123 }",
  "func ) ( ) { var ID : [ ] int ID ( ID [ ID ( ) ] ) = ( ( ( - false ) ) ID }",
  "func ) ( ) { var ID : [ ] int ID ( ID [ ID ( ) false ) = ( ( ( - ] ) ) ID }",
  "func ) ( ) { var ) : [ ] int ID ( ID [ ID ( ) false ) = ( ( ( - ] ) ID ID }",
  "func ID ( : ID int ) : int { }",
  "func ID ( : int ID ) : int { }",
  "func ID ( : { ID ) : int int }",
  "func ID ( ID : int ) : bool { var ID : bool } func ID ( { : [ - - ( - ( ID ) ) ] int ) }",
  "func ID ( int : ID ) : bool { var ID : bool } func ID ( { : [ - - ( - ( ID ) ) ] int ) }",
  "func ID ( int : ID ) : bool { var ID ( bool } func ID ( { : [ - - : - ( ID ) ) ] int ) }",
  "func ID ( ID : / true [ 123 + false * 123 != true / - 123 * ID ] int ) { }",
  "func ID ( ID : / true [ 123 + false * 123 != true / - 123 * ID ] } ) { int",
  "func true ( ID : / true [ 123 + false * 123 != ID / - 123 * ID ] } ) { int",
  "func ID ( ) : bool { var ID : int var ID : int if ( false * - true - false + 123 { ) } }",
  "func ID ( ) : bool { ( ID : int var ID : int if var false * - true - false + 123 { ) } }",
  "func ID ( ) : bool { ( ID : int var } : int if var false * - true - false + 123 { ) ID }",
  "func ID ( ) { var ID : bool var ID : int call ID ( ) { var ID ] [ : bool var ID : [ - ID ] bool } } func ID ( ) { }",
  "func ID ( : { var ID : bool var ID ) int call ID ( ) { var ID ] [ : bool var ID : [ - ID ] bool } } func ID ( ) { }",
  "func ID ( : { ID ID : bool var ID ) int call var ( ) { var ID ] [ : bool var ID : [ - ID ] bool } } func ID ( ) { }",
  "[ ID ( ID : func false * - 123 / ( ID ( ) [ - true ] [ ( ( ( - ( ID ) ) ) ) ] ) ] int ) { } func ID ( ) { }",
  "[ ID ( ID : func false * - 123 / ( ID ) ) [ - true ] [ ( ( ( - ( ID ) ) ) ) ] ) ] int ( { } func ID ( ) { }",
  "[ ID ( ID : func false * - 123 / ( ID ) ) [ - true ] [ ( ( ( - ( ID ) ) ) ) ] ) { int ( { } func ID ( ) ] }",
  "func ID ( ID : bool , ID : int , ID : - ) { var ID : [ 123 / bool ID [ true ] ] bool } func ID ( ) { }",
  "func ID ( ID : bool , ID : int , ID : - ( { var ID : [ 123 / bool ID [ true ] ] bool } func ID ) ) { }",
  "func ID ( ID : bool , ID : int , ID : - ( bool var ID : [ 123 / bool ID [ true ] ] { } func ID ) ) { }",
  "func ID ( ) : int { var ID func [ ] int var ID : int { var ID : [ ] int while true { } ID = - ( - ID ) } } : ID ( ) { }",
  "func ID ( ) : int { var ID func [ ] int var ID : int { ID ID : [ ] int while true { } var = - ( - ID ) } } : ID ( ) { }",
  "func ID ( ) : int { var ID func [ ] int } ID : int { ID ID : [ ] int while true { } var = - ( - ID ) var } : ID ( ) { }",
  "func ID { ID : int ) { if ID / ( ( ID ) ) ( } { } } func ID ( ) { }",
  "func ID { ID : int ) { if ID / ( ( ) ) ID ( } { } } func ID ( ) { }",
  "func ID { ID ID int ) { if ID / ( ( ) ) ID ( } { } } func : ( ) { }",
  "func ID ) ( { print - 123 return }",
  "func ID ) ( { 123 - print return }",
  "func ID ) ( { 123 print - return }",
  "func ID ( ) : int { while true + ID ( 123 - ( ID ) and - ID ) + - and - - false { } while ( 123 ) { } }",
  "func ID ( ) : int } while true + ID ( 123 - ( ID ) and - ID ) + - and - - false { } while ( 123 ) { { }",
  "func ID ( ) : int } while true + ID ( 123 ) ( ID ) and - ID ) + - and - - false { } while ( 123 - { { }",
  "func ) ( ) { var ID : bool print ( false + ( ( ( ( ( ( ( ( - false ) ) ) ) ) ) ) ) ID } func ID ( ) { }",
  "func ) ( ) { var ID : bool print ( false + ( ( ( ( ( ( ( ( - false ) ) ) ) ) ) ID ) ) } func ID ( ) { }",
  "func ) ( ) { var ID : bool print ( false + ( ( ( ( ( ( ( ( ) false ) - ) ) ) ) ID ) ) } func ID ( ) { }",
  "func ID ( ID : } ) : bool { if - 123 + ID ( ) [ ID ] - ID { } print ID } func ID ( ) { int",
  "func ID ( ID : } ) : bool { if - 123 + ID ( ) [ ID ] - ID ID } print { } func ID ( ) { int",
  "func ID ( ID : } ) : bool { if ID 123 + ID ( ) [ ID ] - ID - } print { } func ID ( ) { int",
  "func ID ( ) { ID ( ID [ ID [ ( ID ) ] [ ( - 123 ] ] ) = ID { } } func ID - ) { }",
  "func ID ( ) { ID ( ID [ ID ] ( ID ) ] [ ( - 123 ] [ ) = ID { } } func ID - ) { }",
  "func ID ( ) { ID ( ID [ ID ] ( ID ) ] [ ( - 123 ] [ ) = ID { } } func ID - ) { }",
  "func ID ( ID : int var ID : int ) : bool { var ID : int , ID : [ ] int while - ( 123 ) { } call ID ( ) }",
  "func ID { ID : int var ID : int ) : bool { var ID : int , ID : [ ] int while - ( 123 ) ( } call ID ( ) }",
  "func ID { ID : int var ID : int ) : bool { var ID : int , ID : [ ] int while - ( 123 ) ( } call ( ID ) }",
  "func ID ( ID : bool , ID : [ false / bool [ ID ( - ID ) ] / false ] ID ) { }",
  "func ID / ID : bool , ID : [ false ( bool [ ID ( - ID ) ] / false ] ID ) { }",
  "func ID ( ID : bool , ID : int ) { while ID { - - - ID [ ID ] ) ( } }",
  "func ID ( ID : } , ID : int ) { while ID { - - - ID [ ID ] ) ( bool }",
  "func ID ( ID - } , ID : int ) { while ID { : - - ID [ ID ] ) ( bool }",
  "func ID ( ) ID bool { var : : bool var ID : int print ID ( ) [ - ID ] { } } func ID ( ) { }",
  "func ID ( ) ID bool { var : : bool var ID : int print ID ( ) ID - [ ] { } } func ID ( ) { }",
  "func ID ( bool ID ) { var : : bool var ID : int print ID ( ) ID - [ ] { } } func ID ( ) { }",
  "func ID ( ID bool bool , ID : [ ] int , ID : int ) { var ID : bool var ID : : { var ID : [ ] int } if - ID { } } func ID ( ) { }",
  "func ID func ID bool bool , ID : [ ] int , ID : int ) { var ID : bool var ID : : { var ID : [ ] int } if - ID { } } ( ID ( ) { }",
  "func { func ID bool bool , ID : [ ] int , ID : int ) { var ID : bool var ID : : ID var ID : [ ] int } if - ID { } } ( ID ( ) { }",
  "func ID ( ID : int , ID : [ ( true - - - / 123 and false ) ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ( true - - - / 123 and false ) ] int ) { } func ID ( ) { }",
  "func ID { ID : int , ID : [ ( true - - - / 123 and false ) ] int ) { } func ID ( ) ( }",
  "func ID ( ID : bool , ID : [ ( ( } [ - ( ID ) ] ) ) ] [ ] [ ] [ ] int ) { ID func ID ( ) { }",
  "func ID ( ID : bool ) ID : [ ( ( } [ - ( ID ) ] ) , ] [ ] [ ] [ ] int ) { ID func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : int if 123 / true * - false - - { ID - - ID { } } func ID ( ) - }",
  "func ID ( ) { var ID : int var ID : int if 123 / true * - false - - { ID - - ID { } ID func } ( ) - }",
  "func ID ID ) { var ID : int var ID : int if 123 / true * - false - - { ID - - ( { } ID func } ( ) - }",
  "func ID ( ID : bool , ID : [ true * true * ID ( : [ - ID ] [ ( - ID ) ] ] bool , ID ) [ ] int ) { }",
  "func ID ( ID [ bool , ID : [ true * true * ID ( : : - ID ] [ ( - ID ) ] ] bool , ID ) [ ] int ) { }",
  "func ID ( ID [ int , ID : [ true * true * ID ( : : - ID ] [ ( - ID ) ] ] bool , ID ) [ ] bool ) { }",
  "func ID ( ID : int , ID : [ ] int , ] : [ ID [ ID ( ) [ ( ( false ) ) ID [ 123 ] ] ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ] : [ ID [ ID ( ) [ ( ( false ) ) ID [ 123 ] ] ] [ ] [ ] [ ] int ) { } func ID ( ) { }",
  "func ID ( ID : int , ID func [ ] int , ] : [ ID [ ID ( ) [ ( ( false ) ) ID [ 123 ] ] ] [ ] [ ] [ ] int ) { } : ID ( ) { }",
  "func ID ( ID : bool , ID : bool , ID : { ) { var ID : [ ] int var ID : [ ] bool ID [ true ] = - 123 } func ID ( ) bool }",
  "func ID ( ID : bool , ID : bool bool ID : { ) { var ID : [ ] int var ID : [ ] bool ID [ true ] = - 123 } func ID ( ) , }",
  "func ID ( ID : bool , ID : bool bool ID : { ) { var ID : [ ] int var ID : [ ] bool ID [ true ] = - 123 } func ID ( ) , }",
  "func ID ( ID : bool false { var ID : bool var ID : bool if false * ) / ( ( - true ) ) { } }",
  "func ID ( ID : bool false { var ) : bool var ID : bool if false * ID / ( ( - true ) ) { } }",
  "func ID ( ID : bool false { var ) : bool var ID : bool if false * ID / ( - ( true ) ) { } }",
  "func ID ( ) { call ID ( ) { ) ID : bool var ID : int while ( ( ID var ) { } } }",
  ") ID ( ) { call ID ( ) { func ID : bool var ID : int while ( ( ID var ) { } } }",
  ") ID { ) ( call ID ( ) { func ID : bool var ID : int while ( ( ID var ) { } } }",
  "func ID ( ID : bool , ID : bool ) : int { var ID : bool if ( ( } ) ) { ID ID = - - false } func ID ( ) { }",
  "func ID ( ID : bool , ID : } ) : int { var ID : bool if ( ( } ) ) { ID ID = - - false bool func ID ( ) { }",
  "func ID ( ID : bool , ID : } ) var int { : ID : bool if ( ( } ) ) { ID ID = - - false bool func ID ( ) { }",
  "int ID ( ID : [ ( true / ID ( - ID ( ) ) / ID ) ] func ) { }",
  "int ID ( ID - [ ( true / ID ( : ID ( ) ) / ID ) ] func ) { }",
  "int ID ( ) - [ ( true / ID ( : ID ( ID ) / ID ) ] func ) { }",
  "func ID ( ID : bool ) : bool int var ID : { var ID : int return }",
  "func ID ( ID return bool ) : bool int var ID : { var ID : int : }",
  "func ID ( ID return bool ) : bool int var ID : { var ID : } : int",
  "func ID ( ) { var ID : [ ID ( ID ( ) ) ID ] [ false ] ) ] bool } func ID ( [ { }",
  "func ID ( ) { var ID : [ ID ( ID ( ) ) ID ] [ false ] } ] bool } func ID ( [ { )",
  "func ID ( ) { var ID : [ ID ( ID ( ) ) ID ( [ false ] } ] bool } func ID ] [ { )",
  "func ID ( ) : [ { 123 * false + ( ID ( ) ) ) ] [ ] bool ( }",
  "func false ( ) : [ { 123 * ID + ( ID ( ) ) ) ] [ ] bool ( }",
  "func false ( ) : [ { 123 * ID + ( ID ( ) ) ) ] [ ] bool ( }",
  "func ID ( ID : bool , ID : [ ( - ID ] ) [ - 123 ] ) ( int , ID : bool ) { }",
  "func ID ( ID : bool ) ID : [ ( - ID ] , [ - 123 ] ) ( int , ID : bool ) { }",
  "func ID ( ID : bool , ID : [ ( - ID ] , [ - 123 ] ) ( int ) ID : bool ) { }",
  "func ID ( ) { call ID ( ( ( ID [ - - true ] ) } ) } func ID ( ) { )",
  "func ID ( ) { call ID ( ( ( ID [ - - true ] } } ) ) func ID ( ) { )",
  "func ID ( ) { call ( ID ( ( ID [ - - true ] } } ) ) func ID ( ) { )",
  "func ID ( bool : ) { var ID : int while ID ( - - ( ( ID ) ) ) { } } func ID ( ) { }",
  "func ID ( bool : ) { var ID : int while ID ) - - ( ( ID ( ) ) { } } func ID ( ) { }",
  "func { ( bool : ) ID var ID : int while ID ) - - ( ( ID ( ) ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { while { ( false + ID ) ) ( } }",
  "func ID ( ID : bool , ID : ) ) { while { ( false + ID bool ) ( } }",
  "func ID ( ID : bool , + : ) ) { while { ( false ID ID bool ) ( } }",
  "func ID ( ID : int , ID : bool ) { var ID : [ ID [ 123 / ( ID ) ) ] bool } func ID ( ] { }",
  "func ID ( ID : int , ID : bool ) ID var ID : [ ID [ 123 / ( ID ) ) ] bool } func { ( ] { }",
  "func ID ( ID : int , ID : bool ) ID ( ID : [ ID [ 123 / var ID ) ) ] bool } func { ( ] { }",
  "func ID ( ) { print ( - ID ( ) [ 123 * - - 123 * - - - - - - ( - ID ) ) ] [ ( 123 ] ) } func ID ( ) { }",
  "func ID ( ) { print ( - ID ( ) [ 123 * - - 123 * - - - - - - ID - ( ) ) ] [ ( 123 ] ) } func ID ( ) { }",
  "func ID ( ) : int { { var ID : bool ID [ - ID ID 123 ] [ - - ID ] ] = - 123 } print - false } func [ ( ) { }",
  "func ID ( ) : int - { var ID : bool ID [ - ID ID 123 ] [ { - ID ] ] = - 123 } print - false } func [ ( ) { }",
  "func ID ( ) : int - { ( ID : bool ID [ - ID ID 123 ] [ { - ID ] ] = - 123 } print - false } func [ var ) { }",
  "func ID ID ) : int { print ID ( ) * ID ( ) [ ( ( ) ] } func ID ( ) { }",
  "func ID ID ) : int { print [ ( ) * ID ( ) ID ( ( ) ] } func ID ( ) { }",
  "func ID ID ) : int { print [ ( ) * ID ( ) ID ( ( ) ] ID func } ( ) { }",
  "func ID ( ID : bool ) { var ID : bool var ID : int return ID func ID ( } : bool , ID : bool , ID : [ ] [ ] bool ) { }",
  "func ID ( ID , bool ) { var ID : bool var ID : int return ID func ID ( } : bool : ID : bool , ID : [ ] [ ] bool ) { }",
  "func ID ( ID , bool ) { var ID : bool var ID : int return ID func ID ( } : bool : ID : bool [ ID : [ ] , ] bool ) { }",
  "[ ID ( ) { var ID : bool if ID ( ) func ( - ( ID ) ) ] { } call ID ( ) }",
  "[ ID ( ) { } ID : bool if ID ( ) func ( - ( ID ) ) ] { var call ID ( ) }",
  "[ ID ( ) bool } ID : { if ID ( ) func ( - ( ID ) ) ] { var call ID ( ) }",
  "func ID ( ID : [ ] int , ID : ID , bool : bool ) { { var ID : int call ID ( ID ) } } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID ID : , bool : bool ) { { var ID : int call ID ( ID ) } } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID ID : , bool : bool ) { { var ID : int call ID ( ID ( } } func ID ) ) { }",
  "func ID ( ) : int { call ID ( ) while ID [ ( true ) ] { } } func } ( ) { ID",
  "} ID ( ) : int { call ID ( ) while ID [ ( true ) ] { } func func } ( ) { ID",
  "} ) ( ) : int { call ID ( ) while ID [ ( true ) ] { } func func } ( ID { ID",
  "func ID ( ID : - 123 * [ 123 - true / ID ( ) [ 123 ] ] int ) { }",
  "func ID ( ID : - 123 int [ 123 - true / ID ( ) [ 123 ] ] * ) { }",
  "func ID ( ID : - 123 int [ ] - true / ID ( ) [ 123 ] 123 * ) { }",
  "func ID ( ) { var ID : bool var } : int if - ID and ( - - - - ID ) { } ID",
  "func ID ( ) { var ID : bool var } : int if - ID and ( - - - - ID ) { } ID",
  "func : ( ) { var ID ID bool var } : int if - ID and ( - - - - ID ) { } ID",
  "func ID ( ID { call ID ( ) return ID * ) ( true != ID ) }",
  "func ID ( ID { call ID ) ( return ID * ) ( true != ID ) }",
  "func ID ( ID { call ID ) ( return ID * ) ( true != ID ) }",
  "func ID ( ) { var ID : [ ( - ID [ true / ( ] - - - - true ) ) * ( false ) ] [ - ID ( ) ] bool var ID : bool }",
  "func ID ( ) { var ID : [ ( - ID [ true / ( ] - - - - true ) ) * ( false ) ] [ - ID ( ) ] bool var ID : bool }",
  "func ID ( ) { var ) : [ ( - ID [ true / ( ] - - - - true ) ) * ( false ID ] [ - ID ( ) ] bool var ID : bool }",
  "func ID ( ID : int , ID : [ ] [ ] bool ) { while 123 + ID ( ID ) } ( - ( ID ) ) { } if 123 { + } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ] bool ) { while 123 + ID ( ID ) } ( - ( ID ) ) { } if 123 { + } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] [ ] bool ) { while 123 + ID ( ID ) } ( - } ID ) ) { ( if 123 { + } func ID ( ) { }",
  "ID ID ( ID : bool , ID : bool ) { } func func ( ) : int { { var ID : bool var ID : int while 123 { } if false { } } }",
  "ID ID ( ID : bool , ID : bool ) { } func func ( ) : int { { var ID : bool var ID : int while 123 { } if false { } } }",
  "ID ID ( func : bool , ID : bool ) { } ID func ( ) : int { { var ID : bool var ID : int while 123 { } if false { } } }",
  "func ID ( ) { var ID : [ ] false ] bool return - ID [ - - - - - [ ] }",
  "func ID ( ) ID var { : [ ] false ] bool return - ID [ - - - - - [ ] }",
  "func ID ( ) ID var { : [ ] false ] bool ] - ID [ - - - - - [ return }",
  "func ID ( ID : } ] int ) { var ID : int var ID : int return [",
  "func ID ( ID : } ] int int { var ID : int var ID : ) return [",
  "func ID : ID : } ] int int { var ID ( int var ID : ) return [",
  "int ID ( ID : [ ] [ ( - true and ( ( - ID ) ) and - ( - - 123 ) ) ] func ) { }",
  "int ID ( ID : [ ] [ ( - true and - ( ( ID ) ) and - ( - - 123 ) ) ] func ) { }",
  ") ID ( ID : [ ] [ ( - true and - ( ( ID int ) and - ( - - 123 ) ) ] func ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : bool var [ : [ ] ID ] int call ID ( ) call ID ( ) }",
  ") ID ( ID : bool , ID : int ) { var ID : bool var [ : [ ] ID ] int call ID ( ) call ID ( func }",
  ") ID ( ID : bool , ID : bool ) { var ID : int var [ : [ ] ID ] int call ID ( ) call ID ( func }",
  "func ID ( ) : bool { } func ID ( ID : [ false / true * true - true * ID / - ID + [ ( ( ( ( ( - false ) ) ) ) ) ] [ ] [ ] [ ] - ] bool ) { }",
  "func ID ( ) : bool { } func ID ( ID : [ false / true * true - true * ID / - ID + [ ( ( ( ( ( - false ) ) ) ) ) ] [ ] [ ] [ ] - ] bool ) { }",
  "func ID ( ) : bool { } func ID ( ID : [ false / true * true - true * ID / - ID + [ ( ( ( ] ( - false ) ) ) ) ) ] [ ] [ ] [ ( - ] bool ) { }",
  "func ID ( ) [ var ID : [ ] int } func ID ( ) : { ] [ - true * 123 / ID ] int { }",
  "func ID ( ) [ var ID : [ ] int ) func ID ( } : { ] [ - true * 123 / ID ] int { }",
  "func ID ( ) [ int ID : [ ] var ) func ID ( } : { ] [ - true * 123 / ID ] int { }",
  "func ID ( ID : bool : ID : int , ID , [ true / ID + ID ( ( ID ) ) ] int ) { }",
  "func : ( ID : bool ID ID : int , ID , [ true / ID + ID ( ( ID ) ) ] int ) { }",
  "func : ( ID : bool ID ID : int ) ID , [ true / ID + ID ( ( ID ) , ] int ) { }",
  "func ID ( ) : bool { var ID : [ ] [ bool * ( ID ( ID ) ) ] false var ID : [ ] bool }",
  "func ID ( ) : [ { var ID : [ ] bool bool * ( ID ( ID ) ) ] false var ID : [ ] bool }",
  "func ID ( ID : int , ID : bool , ID : { ) : bool int var ID : int var ID : int }",
  "func ID ( ID : int , ID : bool , ID : { ) : bool int var ID var int : ID : int }",
  "ID ID ( ID : int , ID : bool , func : { ) : bool int var ID var int : ID : int }",
  "func ID ( ) { var ID : int var ID : bool if false [ - ( ID + - ID ] ) { } } func ID ( ) { }",
  "func ID ( ) { var ID : int var ID : bool if false [ - ( ID + ) ID ] ) { } } func ID ( - { }",
  "func ID ( ) { var ID : int var ID : bool if false [ ] ( ID + ) ID - ) { } } func ID ( - { }",
  "func ID ( ID : int { : bool ) } func ID ( ID : bool , ID : bool ) { var ID : [ ] int call ID ( ) }",
  "func ID ( ID : int { : bool ) } func ID ( ID : bool int ID : bool ) { var ID : [ ] , call ID ( ) }",
  "func ID ( ID { int : : bool ) } func ID ( ID : bool int ID : bool ) { var ID : [ ] , call ID ( ) }",
  "func ID ( ) { } ID : int while false * - - - - 123 / ( 123 ) { } while ID { } var func ID ( ) { }",
  "func ID ( ) { } ID : int while func * - - - - 123 / ( 123 ) { } while ID { } var false ID ( ) { }",
  "123 ID ( ) { } ID : int while func * - - - - 123 / ( func ) { } while ID { } var false ID ( ) { }",
  "func ID ( ID int bool , ID : int ) : bool { var ID : : if false * false * ( - true ) { } call ID ( ) } func ID ( ) { }",
  "func ID ( ID int bool , ID : int ) : bool { var ID : : if ) * false * ( - true ) { } call ID ( false } func ID ( ) { }",
  "func ID ( ID int bool , ID : int ) : * { var ID : : if ) bool false * ( - true ) { } call ID ( false } func ID ( ) { }",
  "func ID ( ID : int , ID : [ - ID ( ID ( ) [ ID ] ) ID ] [ ] bool , ID : [ ] [ ] [ ] bool ) { }",
  "func ID ( ID : int , ID : [ - ID ( ID ( ) [ ID ] { ID ] [ ] bool , ID : [ ] [ ] [ ] bool ) ) }",
  "func ID ( call : bool ) : bool { { ID ID ( - 123 / - ID or ID ) } if ( ID ) { } }",
  "func ID ( call : bool - : bool { { ID ID ( ) 123 / - ID or ID ) } if ( ID ) { } }",
  "func ID ( call ) bool - : bool { { ID ID ( ) 123 / - ID or ID : } if ( ID ) { } }",
  "func = ( ID : int , ID : [ ] int , ID : [ ] bool ) { ID ( - ID ) ID - ( ( - ( false ) ) ) call ID ( ) }",
  "func = ( ID : int , ID : [ ] int , ID : [ ] bool ) { ID ( - ID ( ID - ( ) - ( false ) ) ) call ID ( ) }",
  "func = ( ID : int , ID : [ ] ) , ID : [ ] bool ) { ID ( - ID ( ID - ( ) - ( false ) int ) call ID ( ) }",
  "func ID ( ) : [ ] bool { var ID : bool { var ID : bool print - ( ID ID ) ) print ID } ID = - - ( } func ID ( ) { }",
  "func ID ( ) : [ ] bool { var ID : bool { var ID : bool print - ( ID ID ) ) print ID } ID = - ID ( } func - ( ) { }",
  "func ID ( ) : [ ] bool { var ID : bool { var ID : bool print - ( ID ID func ) print ID } ID = - ID ( } ) - ( ) { }",
  "func ID ( ) : [ ] int ID var ID : [ ( ID / ID [ ID ] [ - ( { ) ] ) ] bool var ID : [ ] [ ] [ ] [ ] int }",
  "func ID ( ) : [ ] int ID var ID : [ ( ID / ID [ ID ] [ - ( { ) int ) ] bool var ID : [ ] [ ] [ ] [ ] ] }",
  "func ID ( ) : [ ] int ID var ID : [ ( ID / ID [ ID ] [ - ( { : int ) ] bool var ID ) [ ] [ ] [ ] [ ] ] }",
  "func ID ( ID : int ) { var ID : [ ( ID ( ) [ bool ] ) ] false var ID : int } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ( ) ( ID [ bool ] ) ] false var ID : int } func ID ( ) { }",
  "func ID ( ID : int ) { var ID : [ ( ) ( ID [ bool ] ) ] false ID var : int } func ID ( ) { }",
  "func ID } ) { { } } func ID ( ID : int , ID : [ ] int , ID : [ ] int ) { var ID : [ ] bool (",
  "func ID } ) { { } } func ID ( ID : int , ID : [ ] int , ID : [ ] int ) ID var { : [ ] bool (",
  "func ID } ) { { : } func ID ( ID : int , ID : [ ] int , ID } [ ] int ) ID var { : [ ] bool (",
  "func ID ( ) ) } func ID ( { { var ID : int }",
  "func ID ( int ) } func ID ( { { var ID : ) }",
  "func ID ( int } } func ID ( { { var ID : ) )",
  "func ID ( ID : int ) : int { if - 123 * - ID func ( - false ) ) * true { } } ( ID ( ) { }",
  "func ID ( ID : int ) : int { if - ) * - ID func ( - false ) 123 * true { } } ( ID ( ) { }",
  "* ID ( ID : int ) : int { if - ) func - ID func ( - false ) 123 * true { } } ( ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : int call ID ( ID ( false / ) ID ) ) ( while - ID { } }",
  "func ID ( ) : ID { var ID : int var ID : int call ID ( ID ( false / ) bool ) ) ( while - ID { } }",
  "func ID ( ) : ID { var ID : ID var int : int call ID ( ID ( false / ) bool ) ) ( while - ID { } }",
  "func ID ( ) : [ ] bool : var ID : int var ID { int print - ( true / ID ) { } }",
  "func ID ( ) : [ ] bool : var ID : int var ID { int print - ) true / ID ( { } }",
  "func ID ( ) : [ ] bool } var ID : int var ID { int print - ) true / ID ( { } :",
  "func ID ( ) : int { while 123 * 123 * [ + ID 123 ID ] { } call ID ( ) }",
  "func ID ( ) : int { while 123 * { * [ + ID 123 ID ] 123 } call ID ( ) }",
  "func ID ( ) : int { while 123 * { * [ + ID 123 ID ] 123 } call ID ( ) }",
  "func ID - ID : [ ID ( ID <= ID / false ( ( false ) + ( ID ) ) ] int ) { } func ID ( ) { }",
  "func ID - ID : [ ID ( ID <= ID / ] ( ( false ) + ( ID ) ) false int ) { } func ID ( ) { }",
  "func ID - ID : [ ID ( ID <= ID / ] ( { false ) + ( ID ) ) false int ) { } func ID ( ) ( }",
  "func ID ID ID : [ ] int ) : bool { var ID : [ true / - - - ( ( ( - ( ( true ) ) ) ) ) ] bool var ( : int } func ID ( ) { }",
  "func ID ID ID : [ ] int ) : bool { var ID - [ true / : - - ( ( ( - ( ( true ) ) ) ) ) ] bool var ( : int } func ID ( ) { }",
  "func ID ID ID : [ ] int ) : bool { var ID - [ func / : - - ( ( ( - ( ( true ) ) ) ) ) ] bool var ( : int } true ID ( ) { }",
  "( ID func ID : bool ) { } func ID ( ) { call ID ( ID * - ID / true ) }",
  "( ID func ID : bool ) { } func ID ( ) { ID call ( ID * - ID / true ) }",
  "( ID func ID : bool - { } func ID ( ) { ID call ( ID * ) ID / true ) }",
  "func ID ( ) : bool { var ID : int var ID : [ - ( ( ID - ) [ - ID ] ) ] bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int var ID : [ - ( ( ID - ) [ - ID ] ) ] bool } func ID ( ) { }",
  "func ID ( ) : bool { var ID func int var ID : [ - ( ( ID - ) [ - ID ] ) ] bool } : ID ( ) { }",
  "func ID ( ) : bool { var ID : [ - int var ID : int if ID ( ) [ ( ] false ) ] { } call ID ( ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : [ - int var ID : int if ID ( ) [ ( ] false ) ] { } call { ( ) } func ID ( ) ID }",
  "func ID ( ) : bool { var ) : [ - int var ID : int if ID ( ID [ ( ] false ) ] { } call { ( ) } func ID ( ) ID }",
  "func ID ( ID : bool , ID ] [ - ID ( ) [ ( ( 123 ) ) : [ ID ] ] int ) { }",
  "func ID ( ID : bool , ID ] [ - ID ( ) } ( ( 123 ) ) : [ ID ] ] int ) { [",
  "func ID ( ) { ) ( ( - ID ( if [ ID ] ) ) { } ID = ( 123 ) } func ID ( ) { }",
  "} ID ( ) { ) ( ( - ID ( if [ ID ] ) ) { } ID = ( 123 ) func func ID ( ) { }",
  "} ID ( ) { ) ( ( - ID ( if [ ( ] ) ) { } ID = ( 123 ) func func ID ID ) { }",
  "func ID ( ID : bool true ID : [ ( - ( ( , ) ) ) ] bool , ID : [ ] bool ) { }",
  "func ID ( ID : bool true ID : [ ( - ( ( , } ) ) ] bool , ID : [ ] bool ) { )",
  "func ID : ID : bool true ID : [ ( - ( ( , } ) ) ] bool , ID ( [ ] bool ) { )",
  "- ID ( ) { if func false + ( ( - - - - - ID ) ) { } } func ID ( ) { }",
  "- ID ( ) { if func false + ( ( - - - - - ID ) ) { ) } func ID ( } { }",
  "- ID ( ) { if func false + ( ( - - - - - ID ) ) { ) } func ID ( } { }",
  "func ID ( ID : int ) : bool { : ID : int var ID var bool }",
  "func ID ( ID : int ) : bool { ID ID : int var : var bool }",
  "var ID ( ID : int ) : bool { ID ID : int func : var bool }",
  "func ID ( ) { ] 123 * ID [ - - false + true * ID * ( false ) if * ID { } } func ID ( ) { }",
  "func ID ( ) { ] + * ID [ - - false 123 true * ID * ( false ) if * ID { } } func ID ( ) { }",
  "func ID } ) { ] + * ID [ - - false 123 true * ID * ( false ) if * ID { } } func ID ( ) { (",
  "func ID ( ID : int , ID ] [ ( ID [ 123 / - - ID ] ) : int , ID : int ) { } func ID ( ) { }",
  "func ID ( ID func int , ID ] [ ( ID [ 123 / - - ID ] ) : int , ID : int ) { } : ID ( ) { }",
  "func ID ( ID func int , ID ] [ [ ID ( 123 / - - ID ] ) : int , ID : int ) { } : ID ( ) { }",
  ") ID ( ID : bool , ID : bool , ID : int ) { var ID : int var ID : [ ( 123 func ] [ ] int }",
  ") ID ( ID : bool , ID : bool int ID : int ) { var ID : , var ID : [ ( 123 func ] [ ] int }",
  "func ID ( ID : int , ID : bool , ID : bool ) : bool [ print false / ID [ ID ] { ID ] } func ID ( ) { }",
  "func ID ( int : ID , ID : bool , ID : bool ) : bool [ print false / ID [ ID ] { ID ] } func ID ( ) { }",
  "func ID ( int : ID , ID : bool , ID : bool ) : [ [ print false / ID bool ID ] { ID ] } func ID ( ) { }",
  "func ID ( ID : * 123 * ( true [ ID [ - true ] [ - ( - ID ) ] ) ] [ ] int ) { }",
  "func ID ( ID : * 123 * ( true [ ID [ - ] ] [ - ( - ID ) ] ) true [ ] int ) { }",
  "func ID ( ID true * 123 * ( : [ ID [ - ] ] [ - ( - ID ) ] ) true [ ] int ) { }",
  "func ID ( ) : [ - ( ID ( ) [ true * ID [ ID ] [ ( - 123 ) ] * ] ( ( - false ) ) - ) ] int { }",
  "func ID ( ) : [ - ( ID ( ) [ true * * [ ID ] [ ( - 123 ) ] ID ] ( ( - false ) ) - ) ] int { }",
  "func ID ( ) : [ - ( ID [ ) [ true * * ( ID ] [ ( - 123 ) ] ID ] ( ( - false ) ) - ) ] int { }",
  "func ID ( ID : [ ] bool ) { var ID : [ true - ) ( ID + true ] [ ] bool }",
  "func ID ( [ : ID ] bool ) { var ID : [ true - ) ( ID + true ] [ ] bool }",
  "func ID ( [ : ID ] bool ) { var ID : [ true true ) ( ID + - ] [ ] bool }",
  "func ID ( ID : bool ) : [ ID ( ) [ ] ( - true ) ] [ 123 ] ] [ ID bool { }",
  "func : ( ID ID bool ) : [ ID ( ) [ ] ( - true ) ] [ 123 ] ] [ ID bool { }",
  "func : ( ID ID bool ) : [ ID ( ) [ ] ( - true ) ] [ 123 ] ] [ ID bool { }",
  "func ID ( ) { var ID : [ ] [ ] int var ID func bool call ID ( ) } : ID ( ID : bool ) : [ ] int { }",
  "func ID ( ) { var ID : [ ] [ ] int var ID func bool call ID ( ) } : ID ( { : bool ) : [ ] int ID }",
  "func ID ( ) : var ID : [ ] [ ] int var ID func bool call ID ( ) } : ID ( { { bool ) : [ ] int ID }",
  "func ID ( ) { ID [ - ( ID [ ( ID ) ] [ ( ( - - 123 ) ) ] ) ] = true while - } { 123 }",
  "func ID ( ) { ID [ - ( ID [ ( while ) ] [ ( ( - - 123 ) ) ] ) ] = true ID - } { 123 }",
  "func ID ( ) { ID [ - ( ID [ ( while ) ] - ( ( - - 123 ) ) ] ) ] = true ID [ } { 123 }",
  "func ID ( ID : int , ID : bool } ID : [ ] [ ID [ ( ( ( - ID ) ) ) ] ] [ ] int ) { , func ID ( ) { }",
  "func ID ( ID : int [ ID : bool } ID : [ ] , ID [ ( ( ( - ID ) ) ) ] ] [ ] int ) { , func ID ( ) { }",
  "func ID ( ID : int [ ID : bool : ID } [ ] , ID [ ( ( ( - ID ) ) ) ] ] [ ] int ) { , func ID ( ) { }",
  "func ID ( ID : int , ID : int ) ) [ ] int { var ID : [ ] bool var ID : [ ( - 123 : ] int }",
  "func ID ( ID : int , ID : int ) ) [ ] int { var ID : [ ] : var ID : [ ( - 123 bool ] int }",
  "func ID ( ID : int , ] : int ) ) [ ID int { var ID : [ ] : var ID : [ ( - 123 bool ] int }",
  "func ID ID ID : bool , ID : bool ) : int { } func ( ( ID : bool , ID : int ) : int { var ID : bool var ID : [ ] bool }",
  "func ID ID bool : bool , ID : bool ) : int { } func ( ( ID : bool , ID : int ) : int { var ID : ID var ID : [ ] bool }",
  "func [ ID bool : bool , ID : bool ) : int { } func ( ( ID : bool , ID : int ) : int { var ID : ID var ID : ID ] bool }",
  "func ID ( ID : bool ) { print false / - - ( ( ID ) ) / false - ( ) }",
  "func / ( ID : bool ) { print false / - - ( ( ID ) ) ID false - ( ) }",
  "func / ( } : bool ) { print false / - - ( ( ID ) ) ID false - ( ) ID",
  "func ID ( ID : ( ) : bool { return } func ID bool ) { var ID : int }",
  "func ID ( ID : ( ) : : { return } func ID bool ) { var ID bool int }",
  "func ID ( ID : ( ) : : { return } func ID bool ) ID var { bool int }",
  "func ID ( ID : bool , ID : int ) { var ID : bool var ID : int } func ID ] ID : [ ] int , ID : [ ( bool ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : bool ( ID : int } func ID ] ID : [ ] int , ID : [ var bool ) { }",
  "func ID ( ID : bool , ID : int ) { var ID : bool } ID : int } func ID ] ID : [ ] int , ID : [ var bool ) { (",
  "func ID ( false : bool , ID : bool ) { { while ( ID ( ( ID ) ) ) { } print ( - false ) } }",
  "func ID ( false : bool , ID : bool ) { { print ( ID ( ( ID ) ) ) { } while ( - false ) } }",
  "func ID ( ) { [ ID : bool return ID ( ) / ID ( ) [ - ( - ( true ) ) ] var - - ( 123 ) ] * false } func ID ( ) { }",
  "func ID ( ) { [ ID : bool return ID ( ) / ID ( ) [ - ( - ( true ) ) ] var - - ( 123 ) ] * false } func ID ( ) { }",
  "func ID ( ) { [ ID : bool return ID ( ) / ID ( ) [ - - ( ( true ) ) ] var - - ( 123 ) ] * false } func ID ( ) { }",
  "func ID ) ( { var ID : [ true * 123 / - ( true / - 123 * ( 123 ) ) ] int } func ID ( ) { }",
  "func ID int ( { var ID : [ true * 123 / - ( true / - 123 * ( 123 ) ) ] ) } func ID ( ) { }",
  "func - int ( { var ID : [ true * 123 / ID ( true / - 123 * ( 123 ) ) ] ) } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var print : bool var ID : bool while ( false / ID ) { } ID - ID } func ID ( ) { }",
  "func ID ( ID / int , ID : bool ) { var print : bool var ID : bool while ( false : ID ) { } ID - ID } func ID ( ) { }",
  "func ID ( ID / int , ID : bool ) { var print : bool var ID : bool while ( false : ID ) { } ID - ID } func ID ( ) { }",
  "func ID ( ) { print ( ) ( ( ID ( ) ) ) }",
  "func ID ( ) { print ( ) ( ( ID ( ) ) ) }",
  "func ID ( ) { print ( ) ( ) ID ( ) ( ) }",
  "func ID - ID : int , ID : [ - ID ( ( - ID ( ID ) ) ] int , ID : [ ] bool ) { }",
  "func ID - ID : int , ID : [ - ID ) ( - ID ( ID ) ( ] int , ID : [ ] bool ) { }",
  "func ID - ID : int , ID : [ - ID ) ( - ID ( ID ) ( { int , ID : [ ] bool ) ] }",
  "func ID ( ID : bool , ID : ID , ID : bool ) { var int : bool print - ID [ true ] }",
  "func ID ( ID : bool , ID , ID : ID : bool ) { var int : bool print - ID [ true ] }",
  "func ID ( ID : bool , ID , ID : ID : bool ) { ID int : bool print - var [ true ] }",
  "func ID ( ID : ID , ID : int ) { var ID : bool if ( ID ( ) [ - ( ( - - 123 ) ) ] ) { } { } } func int ( ) { }",
  "func ID ( ID : ID , ID : int ) { var ID : bool if ( ID ( ) [ - ( ( - - ] ) ) 123 ) { } { } } func int ( ) { }",
  "func ID ( ID : ID , ID : int ) { var ID : bool if ( ID ( - [ ) ( ( - - ] ) ) 123 ) { } { } } func int ( ) { }",
  "func ID ( ID bool int ) { var ID : [ ( ID ( ) * ( ( ID ) ) ) ] : var ID : [ ] int }",
  ") ID ( ID bool int ) { var ID : [ ( ID ( ) * ( ( ID ) ) func ] : var ID : [ ] int }",
  ") ID ( ID ( int ) { var ID : [ ( ID ( ) * ( bool ID ) ) func ] : var ID : [ ] int }",
  "func ID ( ) : * { call ID ( 123 int - ( false * ( true ) / 123 ) / - ( true ) ) }",
  "func ID ( ) : true { call ID ( 123 int - ( false * ( true ) / 123 ) / - ( * ) ) }",
  "func ID ( ) : true ) call ID ( 123 int - ( false * ( true ) / 123 ) / - ( * { ) }",
  "func ID ( ID : [ ] ID ( ) [ ( ( - ID ) ) ( ) ] bool ) { }",
  "func ID ( ID ] [ : ID ( ) [ ( ( - ID ) ) ( ) ] bool ) { }",
  "func ) ( ID ] [ : ID ( ) [ ( ( - ID ID ) ( ) ] bool ) { }",
  "func ID ( ID : int ) : [ - ID ( ) [ ( ID ( ) ) ] ] int { } func } ( ) { ID",
  "func ID ( : : int ) ID [ - ID ( ) [ ( ID ( ) ) ] ] int { } func } ( ) { ID",
  "func ID ( : : int ) ID [ - ID ( ) [ ] ID ( ) ) ] ( int { } func } ( ) { ID",
  "func ID ( ID : - ) : int { if ( int true * false / - 123 ) { } } func ID ( ) { }",
  "func ID ( ID : - ) : int { if ( int true * false / - 123 ) { } } func ID ( ) { }",
  "func ID ( ID : - } : int { if ( int true * false / - 123 ) { } } func ID ( ) { )",
  "func ID ( ID : bool ) : [ true * ID ( } [ ID ( ( 123 ) ) ] ] int { ) func ID ( ) { }",
  "func ID ( ID : bool ) : [ true * ID ( } [ ID ( ( 123 } ) ] ] int { ) func ID ( ) { )",
  "func ID ( ID : bool ) : [ true } ID ( * [ ID ( ( 123 } ) ] ] int { ) func ID ( ) { )",
  "func ID ( ) ( [ ] [ ] int { var ID : [ ] int var ID : int ID ( ) = - 123 ID = ( ( : false ) ) ) }",
  "func ID ( : ( [ ] [ ] int { var ID ) [ ] int var ID : int ID ( ) = - 123 ID = ( ( : false ) ) ) }",
  "func ID ( : ( [ ] [ ] int { } ID ) [ ] int var ID : int ID ( ) = - 123 ID = ( ( : false ) ) ) var",
  "func ID ( ) : int { call ID : int var ID : int print - ID ( ( ID ) ) var ID ( ) }",
  "func ID ( ) : int { call ID : int var ID : ) print - ID ( ( ID ) int var ID ( ) }",
  "func ID ( ) print int { call ID : int var ID : ) : - ID ( ( ID ) int var ID ( ) }",
  "func ID ( ) : int { var ID : [ ( ( ( ( false ) ) ) ) ] [ ] [ ] int var ID : [ ] int } func ( ID ) { }",
  "func ID ( ) : int { var ID : [ ( ( ( ( false ID ) ) ) ] [ ] [ ] int var ) : [ ] int } func ( ID ) { }",
  "func ID ( ) : int { var ID : [ ( ( ( ( false ID ) ) ) ] [ ] [ ] int var ) : func ] int } [ ( ID ) { }",
  "func ID ( { : bool , ID : [ - false * 123 - ( ID [ ID ] ) ] [ ] bool , ID : int ) ID }",
  "func ID ( { : bool , ID : [ - false ) 123 - ( ID [ ID ] * ] [ ] bool , ID : int ) ID }",
  "func ID ( ) : bool { print - true - ID ( ID * ID * - ( ( - ( true ) ) ) print ( ID ) } func ID - ) { }",
  "func ID ( ) : bool * print - true - ID ( ID { ID * - ( ( - ( true ) ) ) print ( ID ) } func ID - ) { }",
  "func ID ( ) : bool * print - true - ID ( ID { ID * - ( ( - ( true ) ) ) print ( ID ) } func ID - ) { }",
  "func ID ( ) : [ ] [ ] bool : var ID : int var ID { [ ] [ ] bool ID ( ( 123 ) ) = ( - - - ( true ) ) print ID } func ID ( ) { }",
  "func ID ( ) : [ ] [ int bool : var ID : ] var ID { [ ] [ ] bool ID ( ( 123 ) ) = ( - - - ( true ) ) print ID } func ID ( ) { }",
  "func [ ( ) : ID ] [ int bool : var ID : ] var ID { [ ] [ ] bool ID ( ( 123 ) ) = ( - - - ( true ) ) print ID } func ID ( ) { }",
  "{ ID ( ID : int , ID : int ) func var ID : [ ( ID [ true ] ) ] bool var ID : bool } func ID ( ) { }",
  "{ ID ( ID : int , ID : int ) func var ID : [ ( ID [ true ] ) ] bool var ID : bool } { ID ( ) func }",
  "{ ID ( ID : : , ID : int ) func var ID : [ ( ID [ true ] ) ] bool var ID int bool } { ID ( ) func }",
  "func ID ( ID : bool , ID : : , ID int int ) { return } func ID ( ) : int { var ID : bool var ID : [ ] int }",
  "func ID int ID : bool , ID : : , ID int int ) { return } func ID ( ) : ( { var ID : bool var ID : [ ] int }",
  "func ID int ID : bool , ID : : , ID ( int ) { return } func ID int ) : ( { var ID : bool var ID : [ ] int }",
  "func ID ( ID : int } ID : bool ) : [ ] int { ,",
  "func ID { ID : int } ID : bool ) : [ ] int ( ,",
  "func ID { ID : int } ID ) bool : : [ ] int ( ,",
  "func ID ( ) { var ID : bool var ID : ID call int ( ) ID ( - - - false * - true * ( ( - - false ) ) ) = ID } func ID ( ) { }",
  "func false ( ) { var ID : bool var ID : ID call int ( ) ID ( - - - ID * - true * ( ( - - false ) ) ) = ID } func ID ( ) { }",
  "func false ( func { var ID : bool var ID : ID call int ( ) ID ( - - - ID * - true * ( ( - - false ) ) ) = ID } ) ID ( ) { }",
  "func ID ( ) ) var ID : bool print ID [ - - ID ( { [ - ( false ) ] [ ID ] ] }",
  "func ID ( ) ) var ID : bool ] ID [ - - ID ( { [ - ( false ) ] [ ID ] print }",
  "func ID ( ) ) var ID : bool ] ID [ - - ( ( { [ - ID false ) ] [ ID ] print }",
  ") ID ( ) { var ID : [ ] [ ] int var ID : int { } if - ( 123 func { } } func ID ( ) { }",
  ") ID ( ) { var ID : [ ] [ ] int var ID : int { func if - ( 123 func { } } } ID ( ) { }",
  ") ID ( ) { var ID : [ ] [ ] int var ID : } { func if - ( 123 func { int } } ID ( ) { }",
  "func ) ( ) : int { ID [ ID ( ID [ ( ( true ) ) ] [ ( 123 ) ] ] = - ( - ( ( 123 ) ) ) print ( ID ) }",
  "func ) ( ) : int { ID [ ID ( ID [ ( ( true ) ) ] [ ( 123 ) ] ] = - ( - ( print 123 ) ) ) ( ( ID ) }",
  "func ) ( ) : int { ( [ ID ( ID [ ID ( true ) ) ] [ ( 123 ) ] ] = - ( - ( print 123 ) ) ) ( ( ID ) }",
  "func ID ( ) ] int { var ID : bool return ID [ ID [ ID : [ ID ] ] }",
  "ID ID ( ) ] int { var func : bool return ID [ ID [ ID : [ ID ] ] }",
  "ID ID ( ) ] int { var func : bool return ] [ ID [ ID : [ ID ] ID }",
  "func ID ( ID : int , ID : bool ) { var ID : int var ID : ( ( ID [ ) ) ] int }",
  "func ID ( ID : int , ID : bool int { var ID : ) var ID : ( ( ID [ ) ) ] int }",
  "func ID ( ID : int , ID : bool int ID var ID : ) var { : ( ( ID [ ) ) ] int }",
  "func ID ( ID : ID , bool : [ ID [ - ( - - - ( true ) ) ] ] bool ) { }",
  "func ID ( : ID ID , bool : [ ID [ - ( - - - ( true ) ) ] ] bool ) { }",
  "func ID ( : ID ( , bool : [ ID [ - ( - - - ID true ) ) ] ] bool ) { }",
  "func : ( ) : bool { } func ID ( ) { var ID ID int return ( ID ( ) ) }",
  "func : ( ) func bool { } : ID ( ) { var ID ID int return ( ID ( ) ) }",
  "func : ( ) func bool return } : ID ( ) { var ID ID int { ( ID ( ) ) }",
  "func ID ( ) : int { return ( ( ( ID func ID ) ) ) ) } ( ID ( ) { }",
  "func ID ( ) : int { return ( ( ( ID func ID ) ) ) ) } ( ID ( ) { }",
  "var ID ( ) { func ID : bool var ID : [ ] bool call ID ( ) while ( - ( - ID ) ) { } } func ID ( ) { }",
  "func ID ( ID : int , ) : int , ID : bool ID { var ID : [ - - 123 != 123 ] int }",
  "123 ID ( ID : int , ) : int , ID : bool ID { var ID : [ - - func != 123 ] int }",
  "123 int ( ID : ID , ) : int , ID : bool ID { var ID : [ - - func != 123 ] int }",
  "func ID ( ) { var ID : int { } false and false + ( 123 ) and ( - ( ( ( - ID ) ) ) ) return ID = ID } func ID ( ) { }",
  "func ID ( ) { var ID and int { } false : false + ( 123 ) and ( - ( ( ( - ID ) ) ) ) return ID = ID } func ID ( ) { }",
  "func ID ( ) { var ID and int { ID false : false + ( 123 ) and ( - ( ( ( - ID ) ) ) ) return ID = } } func ID ( ) { }",
  "func ID ( ) : bool { var bool : int var ID : ID return }",
  "func ID ( : ) bool { var bool : int var ID : ID return }",
  "func ID ( : ) bool { var bool : int var ID : ID return }",
  "func ID ( ) { } ( - - ( ID * ID ( ) ) ) { } call ID ( ) } func ID ( ) { if",
  "func ID ( ) { } ) - - ( ID * ID ( ) ) ) { } call ID ( ( } func ID ( ) { if",
  "func ID ( ) : [ ( - - false / - bool false * true and ID and ID ) ] - { }",
  "( ID ( ) : [ func - - false / - bool false * true and ID and ID ) ] - { }",
  "( ID ( ) : [ func - - false / - bool false * true and ID and ID ) ] - { }",
  "func ID ( ID : [ ] [ ( ID ( ) [ ID ] [ ( ( - - ( - 123 ) ) ) ] ) ] ID bool ) { }",
  "func ) ( ID : [ ] [ ( ID ( ) [ ID ] [ ( ( - - ( - 123 ) ) ) ] ID ] ID bool ) { }",
  "func ID ( ID : int ) { if - false + ( - ) false == ( ( - - - - false - ) ) - ( ( ID ) ) { } }",
  "func ID ( ID : int ) { if - ( + false - ) false == ( ( - - - - false - ) ) - ( ( ID ) ) { } }",
  "func ID ( ID : int ) false if - ( + { - ) false == ( ( - - - - false - ) ) - ( ( ID ) ) { } }",
  "func - ( ) : bool { { var ID : bool var ID : [ ] bool if ID ( ID ) { } print - false } if ( ( ( ( ( ID ) ) ) ) ) { } }",
  "func - ( ) : bool ( { var ID : bool var ID : [ ] bool if ID ( ID ) { } print - false } if ( ( ( ( { ID ) ) ) ) ) { } }",
  "func - ( ) : bool ( { var ID : bool var ID : [ ] bool if ID ( ID print { } ) - false } if ( ( ( ( { ID ) ) ) ) ) { } }",
  "func ID ( ) : [ ID ( ) [ - ( ID [ ID ] [ - ] 123 ) ] [ - - ( ( false ) ) ] ] bool { }",
  "func ID ( ) : [ ID ( ) [ - ( ID [ ID 123 [ - ] ] ) ] [ - - ( ( false ) ) ] ] bool { }",
  "func ID ( ) : [ - ( ) [ ID ( ID [ ID 123 [ - ] ] ) ] [ - - ( ( false ) ) ] ] bool { }",
  "func ID ( ) : int { ) ID : [ ] int var ID : bool print ( ID ( ) var print - 123 } func ID ( ) { }",
  "func ID ( ) : int { ] ID : [ ) int var ID : bool print ( ID ( ) var print - 123 } func ID ( ) { }",
  "func ID ( ) : int { - ID : [ ) int var ID : bool print ( ID ( ) var print ] 123 } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int , ) : int ID : bool { var ID : int var ID : [ 123 ] int }",
  "func ID ( : : int , ID : [ ] int , ) : int ID ID bool { var ID : int var ID : [ 123 ] int }",
  "func ID ( ) { ID ID : int return - false - - ID ( ) / var + true }",
  "func ID ( ) { ID ID : int return - false - - ID ( ) / var + true }",
  "ID ID ( ) { ID ID : int return - false - - func ( ) / var + true }",
  "func ID ( ) { var ID ( int var ID : bool { while - true and ( ID ) and 123 { } print ( ID ) } call ID ( ) } func ID : ) { }",
  "func ID ( ) { } ID ( int var ID : bool { while - true and ( ID ) and 123 { } print ( ID ) } call ID ( ) } func ID : ) { var",
  "func ID ( ) { } ID ( int var ID : bool { 123 - true and ( ID ) and while { } print ( ID ) } call ID ( ) } func ID : ) { var",
  "( ID ( ) : bool { return true * ID ( func ( ( false ) ) ) ) }",
  "func ID ( ) : bool ) return true * ID ( ( ( ( false ) ) ) { }",
  "func ID ( ID : [ ) int , ID : int , ID : int ] : [ 123 / false * ID ( ) ] bool { }",
  "func ID ( ID : [ ) ID , int : int , ID : int ] : [ 123 / false * ID ( ) ] bool { }",
  "func ID ( ID : [ ) ID , int : int , ID : } ] : [ 123 / false * ID ( ) ] bool { int",
  "func ID ( ID : [ ID ( ID ( - - bool false ) ) ) ] [ ] ( ) { }",
  "func ID ( ID : false ID ( ID ( - - bool [ ) ) ) ] [ ] ( ) { }",
  "func ID ( ID : false ID ( ID ( - - ) [ ) ) ) ] [ ] ( bool { }",
  "} ID ( ) : int { var ID : [ ] int call ID ( ) return func func ID ( ) { var ID : int var ID : int }",
  "} ID ( ) : int { var ] : [ ID int call ID ( ) return func func ID ( ) { var ID : int var ID : int }",
  "} ID ( ) : int { var ] : [ ID int call ID ( ) return func func ID ( ) { var ID ID int var : : int }",
  "func ID ( ID : int ) : ( ( ( true / - ID [ ID ) / ( ID ) ) ) ] [ ] int { }",
  "func ID ( ID : int ) : ( ( ( true / - int [ ID ) / ( ID ) ) ) ] [ ] ID { }",
  "func ID ( ID : int ) : ( ( ( true / - int ) ID [ / ( ID ) ) ) ] [ ] ID { }",
  "func ID ( ) : bool { call ID ( / 123 ( 123 / - - - - ( ID ) ) ) while - true { } }",
  "func ID ( ) : bool ( call ID ( / 123 ( 123 / - - - - { ID ) ) ) while - true { } }",
  "func ID ( ) : ) ( call ID ( / 123 ( 123 / - - - - { ID ) ) bool while - true { } }",
  "func ID ( ID : [ ] bool , ID : [ ] ( ) : int { var ID : bool call ID int - false ) }",
  "func : ( ID : [ ] bool , ID : [ ] ( ) : int { var ID ID bool call ID int - false ) }",
  "func : ( ID : [ ] bool , ID var [ ] ( ) : int { : ID ID bool call ID int - false ) }",
  "func ID ( ID : bool - { print ) ID [ ID ( ( - - ID ) ) ] [ 123 ] }",
  "func ID ( ID : bool - { print ) ID [ ID ( ( - - ] ) ) ] [ 123 ID }",
  "func ID ( ID : bool - { print ) ID [ ID ( ( - - ] ) ) ] [ 123 ID }",
  "func ID ( - : bool { ID [ ID ( ) [ ) ( ( 123 ) ) ] ] = true } func ID ( ) { }",
  "func ID ( - : bool { ID ] ID ( ) [ ) ( ( 123 ) ) ] [ = true } func ID ( ) { }",
  "func true ( - : bool { ID ] ID ( ) [ ) ( ( 123 ) ) ] [ = ID } func ID ( ) { }",
  "func ID ( ID : bool { while ( - ( false / ) ( ( false ) ) / - true ) ) { } if - false { } }",
  "func ID ( ID ( bool { while : - ( false / ) ( ( false ) ) / - true ) ) { } if - false { } }",
  "func ID ( ( ( bool { while : - ID false / ) ( ( false ) ) / - true ) ) { } if - false { } }",
  "[ ID ( ID : [ ] [ ] int , ID : [ ] bool , ID : [ ] bool ) { var ID : [ - ID ] func ] bool var ID : [ ] bool }",
  "[ ID ( ID : [ ] [ ] int , ID : [ ] bool , ID : [ ] bool ) { var ID : [ - ID ] func ] bool var ID : [ ] bool }",
  "[ ID ( ID : [ ] [ ] int , ID : [ ] bool , ID : [ ] bool ) { var ID : [ - ID ] ] func bool var ID : [ ] bool }",
  "func ID ( ID [ int , ID : [ - ( ID ( ( true ) ) ) ] : ] bool ) { }",
  "func ID ( ID [ ID , ID : [ - ( int ( ( true ) ) ) ] : ] bool ) { }",
  "func ID ( ID [ ID , ID : [ - ( int ( ( true ) ) ) ] : ] bool ) { }",
  "func ID ( ) : bool { return } ( ID ( ) : bool { call ID func ) print ( ID ) }",
  "func ID ( ID : bool { return } ( ID ( ) : bool { call ID func ) print ( ) ) }",
  "func ID ( ID : ( { return } ( ID bool ) : bool { call ID func ) print ( ) ) }",
  "] ID ( ID : [ - ( - - ID [ ( - ( - ( ID ) ) ) ] ) ] [ func int ) { }",
  "func ID ( ) : int { var ID : [ ] int { var ID : int var ID : bool { var ID : [ } false ) ] bool var ID : bool } ( { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ ] int { var ID : int var ID : bool { var ID : [ ( false ) ] bool var ID : bool } ( { } } func ID } ) { }",
  "func ID ( ) : int { var ID : [ ] int { { ID : int var ID : bool var var ID : [ ( false ) ] bool var ID : bool } ( { } } func ID } ) { }",
  "func ID ( ) { var ID : ( if ID ( ) + ( true / ( bool false ) ) / false ) { } }",
  "var ID ( ) { func ID : ( if ID ( ) + ( true / ( bool false ) ) / false ) { } }",
  "var ID ( ) { func / : ( if ID ( ) + ( true / ( bool false ) ) ID false ) { } }",
  "func ID ( ) : int { var ID : [ ] [ - bool ID [ ( ( ] ( ( ( ID ) ) ) ) ) ] [ false ] = true }",
  "func ID ( ) : int { var ID : [ ] [ ] bool ID [ ( ( ] ( ( ( ID ) ) ) ) ) ] [ false - = true }",
  "func ID ( ) : int { ( ID : [ ] [ ] bool ID [ ( var ] ( ( ( ID ) ) ) ) ) ] [ false - = true }",
  "func ID ( ID : bool ) { var ID : bool var ID ) int print ( 123 * ( - - - - ( ( ID ) : ) ) }",
  "func ID ( ID : bool ) { var ID : bool var ID ) int print ( 123 * ( - - - - ( ( ID ) : ) ) }",
  "func ID ( ID : bool ) { var ID : bool var ID ) int print ( ( * 123 - - - - ( ( ID ) : ) ) }",
  "func ID ( ) : [ ( - ( - ( 123 * [ ) ) ) ] [ ] ID ] [ ] [ ] [ ] bool { }",
  "func ID ( ) : [ ( - ( - ( 123 * [ ) ) ] ] [ ] ID ) [ ] [ ] [ ] bool { }",
  "func ID ( ID : bool , ID int [ ] int ) : int { var ID : : if 123 * true != ( ( ( true ) ) ) { } call ID ( ) }",
  "func ID ( var : bool , ID int [ ] int ) : int { ID ID : : if 123 * true != ( ( ( true ) ) ) { } call ID ( ) }",
  "func ID ( var : bool , ID int [ ] call ) : int { ID ID : : if 123 * true != ( ( ( true ) ) ) { } int ID ( ) }",
  "func ID ( ) : int { var ID : int call ID ( ) while - - true > ( - } ( 123 ) ) { } } func ID ( ) { -",
  "func ID ( ) : int { var ID : int call ID ( ) while - - ) > ( - } ( 123 true ) { } } func ID ( ) { -",
  "func ID ( ) : int { var ID : { call ID ( ) while - - ) > ( - } ( 123 true ) int } } func ID ( ) { -",
  "func ID ( ) { - - ( print - - - false + ( ID ) ) } func ID ( ) { }",
  "func ID ( ) { - - + print - - - false ( ( ID ) ) } func ID ( ) { }",
  "func ID ( ) { - - + print - - - false ( ( ( ) ) } func ID ID ) { }",
  "func ID ( ID : [ false * ID ( ( [ ) - ( ( ID ) ) ) ] [ ( ( ( - ID ) ) ) ] / ID ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ false * ID ( ( [ ) - ( ( ID ) ) ) ] [ ( ID ( - ( ) ) ) ] / ID ] int ) { } func ID ( ) { }",
  "func ID ( ID : [ false * ID ( ( [ ) - ( ( ID ) ) ) ] [ ( ID ( func ( ) ) ) ] / ID ] int ) { } - ID ( ) { }",
  "func ID ( ID : [ - ( ( 123 ) ( - - ID - - 123 ) ) ] int ) { }",
  "func ID ( ID : [ - ( ( 123 ) ( - - ID - - 123 ) ) ] int ) { }",
  "func int ( ID : [ - ( ( 123 ) ( - - ID - - 123 ) ) ] ID ) { }",
  "func ] ( ) : bool { var ID : [ ] [ ( - ID ( false ) ) ID [ ] [ ] int }",
  "func ] ( ) - bool { var ID : [ ] [ ( : ID ( false ) ) ID [ ] [ ] int }",
  "func ] ( ) - bool { var [ : ID ] [ ( : ID ( false ) ) ID [ ] [ ] int }",
  "func ID ( ) { call } ( ) print true * false / false < ID [ - ID ] ID func ID ( ) { }",
  "func ID ( ) false call } ( ) print true * false / { < ID [ - ID ] ID func ID ( ) { }",
  "func ID ( ) false call } ( [ print true * false / { < ID ) - ID ] ID func ID ( ) { }",
  "func ID ( ID : [ ) ( ) or ( ID ( ) + false ID ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ ) ( ) ID ( ID ( ) + false ID ] [ ] bool ) { } func or ( ) { }",
  "func ID ( ID ID [ ) ( ) ID ( : ( ) + false ID ] [ ] bool ) { } func or ( ) { }",
  "func ID ( ) { call ID ( - true and ( true == ( 123 ) ID and 123 ) ) = false }",
  "( ID func ) { call ID ( - true and ( true == ( 123 ) ID and 123 ) ) = false }",
  "( ID func ) { ) ID ( - true and ( true == ( 123 ) ID and 123 ) call = false }",
  "func ID ( ID [ bool , ID : int , ID : bool ) : [ ] : false + ID ( ) [ ID ] [ ID ] - ID ] [ ] int { } func ID ( ) { }",
  "[ ID ( ID [ bool , ID : int , ID : bool ) : [ ] : false + ID ( ) [ ID ] [ ID ] - ID ] func ] int { } func ID ( ) { }",
  "[ ID ( ID [ bool , ID : int , ID : bool ) : [ ] : false + ID ( ) [ ID ] [ ID ] - ID ] func ] int { } func ID ( ) { }",
  "func ID ( ID : int , ID : [ : ( 123 * false != ID ( ) ) ] int , ID ID int ) { }",
  "func ID ( ID : int , ID : [ : ( 123 * false != ID ( ) ) ] int ) ID ID int , { }",
  "func ID ( ID : int , ID : [ : ( 123 ID false != * ( ) ) ] int ) ID ID int , { }",
  "func - ( ID : int , ID : [ - false / ID - - - ID ( 123 ) ] bool , ID : bool ) { }",
  "func ) ( ID : int , ID : [ - false / ID - - - ID ( 123 - ] bool , ID : bool ) { }",
  "func ) ( ID : int , ID : [ - false / ID - - - ID ( 123 - ] bool , ID : bool ) { }",
  "func ID ( ID : bool } { var ID : bool if ID [ ID [ ID ] ] [ - ( ID ) ] { ) print ID }",
  "func ID ( ID : bool } { var ID : bool if ID [ ID [ ID ] ] [ - ( ID ) ] { ) print ID }",
  "func ID ( ID : bool } { var ID : bool if ID [ ID [ ID ] ] [ - ( ID ) ] { ) print ID }",
  "func ID ( ID : [ ID / true <= ID and ( ) ID ) ] [ ] bool - { }",
  "func ID ( ID : [ ID ) true <= ID and ( ) ID / ] [ ] bool - { }",
  "func ID ( ID : ) ID [ true <= ID and ( ) ID / ] [ ] bool - { }",
  "func ID ( ) { int { } func ID ( ) : var ID : int }",
  "func ID ( ) { int { } func ID ( ) : var ID : int }",
  "func ID ( ) { int { ID func ID ( ) : var } : int }",
  "func ID ( ID : [ * [ 123 ] ID ( - - true * - ID * true ) / ID ] bool ) { }",
  "func ID ( ID : [ * [ 123 ] ID ( - - true * - ID * true ) / ] ID bool ) { }",
  "func ID ( ID : * * [ 123 ] ID ( - - true * - ID [ true ) / ] ID bool ) { }",
  "func ID ( ) : bool { print - ( - ( ID ( - ID ) ) ) } { ID ( ) func }",
  "func ID ( ) : bool { print - ID - ( ( ( - ID ) ) ) } { ID ( ) func }",
  "func ID ( { : bool ) print - ID - ( ( ( - ID ) ) ) } { ID ( ) func }",
  "func ID ( ID : int ) : [ ID [ - 123 and ID [ - ( ( ( false ) ] ) ) and ID ] [ ID ] ] int { }",
  "func ID ( ID : int ) : [ ID [ - 123 and ID [ - ( ( ) false ) ] ) ( and ID ] [ ID ] ] int { }",
  "func ID ( ID : int - : [ ID [ - 123 and ID [ ) ( ( ) false ) ] ) ( and ID ] [ ID ] ] int { }",
  "func ID int ID : ( , ID : [ ] bool ) : [ ] int { print ID [ false ] while 123 { } } func ID ( ) { }",
  "func ID int ID : ( } ID : [ ] bool ) : [ ] int { print ID [ false ] while 123 { , } func ID ( ) { }",
  "func ID int ID : ( } ID : [ ] bool ) ID [ ] int { print : [ false ] while 123 { , } func ID ( ) { }",
  ") ID ( ID : [ 123 / - - ID [ - true * false * - 123 ] [ - ID ] / ID ] [ ] [ ] bool func { }",
  ") ID ID ID : [ 123 / - - ID [ - true * false * - 123 ] [ - ( ] / ID ] [ ] [ ] bool func { }",
  ") ID ID ID : [ [ / - - ID [ - true * false * - 123 ] 123 - ( ] / ID ] [ ] [ ] bool func { }",
  "func ID ( ID : int , ID : bool ) : int { var ID : [ ] [ ( ID * false / - 123 ) ] int var false : [ ] bool } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : int { var ID : [ bool [ ( ID * false / - 123 ) ] int var false : [ ] ] } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) : int { var ID : [ bool [ ( ID * false / - 123 ) ] int : false var [ ] ] } func ID ( ) { }",
  "func ID var ) { ( ID : [ ( ( ( true / ID ) ) ) ] int var ID : bool }",
  "func ID var ) { ( ) : [ ( ( ( true / ID ID ) ) ] int var ID : bool }",
  "func ID var ) { ( ) : [ ( ( ( true / ID ID ) ) ] int var ID : bool }",
  "func ID ( ID ID [ ] int , : : int ) : [ ] int { var ID : int while - ID { } print ID }",
  "func ID ( ID ID [ ] int , : : int ) : [ ] int { var ID : int while - ID { } print ID }",
  "func ID ( ID ID [ ] int , : : int ) : [ ] ID { var ID : int while - ID { } print int }",
  "func ID ( ID : [ or - ( ID * true or ( - false ) ( ID ) ) ] [ ] int ) { }",
  "func [ ( ID : ID or - ( ID * true or ( - false ) ( ID ) ) ] [ ] int ) { }",
  "func [ ( ID : ID or - ( ID * true or ( - false ) { ID ) ) ] [ ] int ) ( }",
  "var ID ( ID : int , ID : int , ID : bool ) { func ID : bool var ID : [ ] [ ] bool call ID ( ) call ID ( ) }",
  "var ID ( ID : int ) ID : int , ID : bool , { func ID : bool var ID : [ ] [ ] bool call ID ( ) call ID ( ) }",
  "var ID ( ID : int ) ID : int , ID : bool , { func ID : bool var ID : [ ] [ ] bool call ID ( ) call ID ( ) }",
  "func ) ( ) : int { var ID : int var ID : [ false / ID ( ) [ false ] [ true ] ] bool } func ID ( ID { }",
  "func ) ( ) : int { var ID ] int var ID : [ false / ID ( ) [ false : [ true ] ] bool } func ID ( ID { }",
  "func ) ( ) : int { var ID ] int var ID : [ false / ID ( ) [ ID : [ true ] ] bool } func false ( ID { }",
  "ID func ( ) : int { }",
  "ID func ( : ) int { }",
  "ID func ( : ) { int }",
  "func ID ( ID : int ) ] int { var ID : [ ( - false * ( ID ) ) ] [ : bool var ID : int }",
  "func ID ( } : int ) ] int { var ID : [ ( - false * ( ID ) ) ] [ : bool var ID : int ID",
  "func ID ( } : int ID ] int { var ) : [ ( - false * ( ID ) ) ] [ : bool var ID : int ID",
  "func ID ( ID ID bool , ID : int ) { var ID : [ - ( ID [ - ID ] ) ] bool var : : [ ] bool } func ID ( ) { }",
  "func ID ( ID ID bool , ID : int ) { var ID : [ - ( ID [ - ID ] ) ] bool var : : [ ] bool } func ID ( ) { }",
  "func ID ( ID ID bool , ID : int ) { var ID : [ - ( ID [ - ID ] ) ] bool func : : [ ] bool } var ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { var ID : : { var ID int [ ] int call ID ( ( ( ( ( ID ) ) ) ) ) call ID ( ) } call ID ( ) }",
  "func ID ( ID : int , ID : bool ) { var ID ( : { var ID int [ ] int call ID ( : ( ( ( ID ) ) ) ) ) call ID ( ) } call ID ( ) }",
  "func ID ( ID : int , ID : bool ) { var ID ( : { var ID int [ ] int call ID ( : ( ( ( ID ) ) ) ) ) call ID ( ) } call ID ( ) }",
  "func ID false ID : int , ID : [ ( / ID ( true - ID ( ) ) ] int , ID : bool ) { } func ID ( ) { }",
  "func ID false ID : int , ID : [ ( / ID ( true - ID ( ) ) ] int , ID : bool ) { } func ID ( ) { }",
  "func ( false ID : int , ID : [ ID / ID ( true - ID ( ) ) ] int , ID : bool ) { } func ID ( ) { }",
  "func ID ( ID : int , ID : bool ) { while { - ID ( ) [ ID ] [ 123 ] { } } func ID ( ) true }",
  "func ID ( ID : int , ID : bool ) { while { - ID ( ) [ ID ] [ 123 ] ( } } func ID { ) true }",
  "func ID ( ID : int , ID : bool while { ) { - ID ( ) [ ID ] [ 123 ] ( } } func ID { ) true }",
  "func ID ( ) { var ID : false ] bool var ID : bool ID ( ) [ 123 / ( [ ) ] [ ID ] = ID { } } func ID ( ) { }",
  "func ID ( = { var ID : false ] bool var ID : bool ID ( ) [ 123 / ( [ ) ] [ ID ] ) ID { } } func ID ( ) { }",
  "func [ ( = { var ID : false ] bool var ID : bool ID ( ) [ 123 / ( [ ) ] ID ID ] ) ID { } } func ID ( ) { }",
  "func ID ( ) : int { var ID : int return false / ID ( ) [ ID { ) ] [ ID ] * 123 } func ID ( ) ( }",
  "func var ( ) : int { ID ID : int return false / ID ( ) [ ID { ) ] [ ID ] * 123 } func ID ( ) ( }",
  "func var ( ) : int { ID ID : int return false / ID ( 123 [ ID { ) ] [ ID ] * ) } func ID ( ) ( }",
  "func ID ( ID : [ ] int , ID : int , ID : bool ) ID [ : * ID ( ) [ true ] [ ID ] ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID * int , ID : bool ) ID [ : : ID ( ) [ true ] [ ID ] ] bool { } func ID ( ) { }",
  "func ID ( ID : [ ] int , ID * int , ID : bool ) ID [ { : ID ( ) [ true ] [ ID ] ] bool { } func ID ( ) : }",
  "func ID ( ) : int { return - ( ID ( ] [ - - ( ID ) ] [ ID ID ) ) }",
  "func ID ( ) : int ID return - ( { ( ] [ - - ( ID ) ] [ ID ID ) ) }",
  "func ID ( ) : int ID return - ( { ( ] [ - } ( ID ) ] [ ID ID ) ) -",
  "func ID ( ID : [ ] bool ) { var ( : bool ID ( ) = ID ID ID ) }",
  "func ID ( ID : [ ] bool ) { ID ( : bool ID ( ) = var ID ID ) }",
  "func ID ( ID bool [ ] : ) { ID ( : bool ID ( ) = var ID ID ) }",
  "func ID return ID : [ ] bool , ID : int ) { ( }",
  "func ID return ID : [ ] bool , ID : int ) { ( }",
  "func ID return ID : [ ) bool , ID : int ] { ( }",
  "func ID ( ID : int ) { var ID : [ ] [ ID ( ( ( ID ) ) ) ] [ ] bool var ID : int } func ID ( } { )",
  "func ID ( ID : int ) { var ID : [ ] [ ID ( ( ( ID ) ) ) ] [ ] bool var ID : int } func ID ( } { )",
  "func ID ( ID : int ) { var ID : ID ] [ ID ( ( ( ID ) ) ) ] [ ] bool var ID : int } func [ ( } { )",
  "ID ID ( ) { var ID : [ true - true * true * ( func ) ] int var ID : int } func ID ( ) { }",
  "ID - ( ) { var ID : [ true ID true * true * ( func ) ] int var ID : int } func ID ( ) { }",
  "ID - ( ) { var ID : ) true ID true * true * ( func [ ] int var ID : int } func ID ( ) { }",
  "func ID ( ) { var } : bool { ID }",
  "func ID ( ) { var } : bool { ID }",
  "func ID ( ) { { } : bool var ID }",
  "func ID ( ID : [ - ID ( ) ( ( ID ) ) ) ( ] [ ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func { ( ID : [ - ID ( ) ( ( ID ) ) ) ( ] [ ] [ ] [ ] bool ) ID } func ID ( ) { }",
  "func { ( ID : [ - ID ( ) ( ( ID ) ) ) ( ] [ ] [ ] [ ] bool ) ID } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : int var ID : int } ( ID ( ) ) { if } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : int var ID : int } ( ID ( ) ) { if } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID : int var ID : int } ( ( ( ) ) { if } func ID ID ) { }",
  "func ID ( ID : bool , ID : bool , ID : int ) { var ID [ : ] bool ID ( ) = ID if ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ID ID : int ) { var ID [ : ] bool ID ( ) = , if ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ID ID : int ) { var ID [ : ] bool ) ( ) = , if ( ID ID { } } func ID ( ) { }",
  "func ID ( ID : bool ) { ) func ID ( } : bool { }",
  "func ID ( ID : bool ) { ) func ID ( } : bool { }",
  "func ID { ID : bool ) { ) func ID ( } : bool ( }",
  "func ID ( ) { var ID : [ ] int var ID : int call ID ( 123 * false - ( - ( false ) ) } while ( 123 ) { } } func ID ( ) { )",
  "func ID ( ) { var ID : [ ] int var ID : int call ) ( 123 * false - ( - ( false ) ID } while ( 123 ) { } } func ID ( ) { )",
  "func ID ( ) { var ID : [ ] int var ID : int call ) ( 123 * false - ( - ( false ) ID } while ( 123 ) } { } func ID ( ) { )",
  "func ID ( ) : [ - ID ( true / - ( ) false ) ) ( ] int { }",
  "func ID ( ) : [ - ID ( true / - ( ) false ) ) ( ] int { }",
  "func ID - ) : [ - ID ( true / ( ( ) false ) ) ( ] int { }",
  "func ID ( ) { var ID : [ ID ( ID ( ) / ID ) 123 ) ) ] [ ] bool } func ID ( ( { }",
  "func ID ( } { var ID : [ ID ( ID ( ) / ID ) 123 ) ) ] [ ] bool } func ID ( ( { )",
  "func ID ( } { var ID : [ ID ( ID ( ) / ID ) 123 ) ) ] [ ] bool } func ID ( ( { )",
  "func ID ( ) { var ID : bool return } func ID ( , : bool , ID : [ - ( ID ) ] [ ] int ID ID : bool ) { }",
  "func ID ( ) { { ID : bool return } func ID ( , : bool , ID : [ - ( ID ) ] [ ] int ID ID : bool ) var }",
  "func ID ( ) { { ID : bool return } func ID ( , : bool , ID : [ - ( ID ) ] [ ] int ID ID : bool ) var }",
  "func ID ( ID : bool , ID { bool ) : bool : print ( ( ( ( ID ) ) ) ) call ID ( ) }",
  "func ID ( ID : bool , ID { bool ) : bool : print call ( ( ( ID ) ) ) ) ( ID ( ) }",
  "func ID ] ID : int , ID : bool ) : [ ( bool { call ID ( ) } func ID ( ) { var ID : int ID = ID }",
  "int ID ] ID : int , ID : bool ) : [ ( bool { call ID ( ) } func ID ( ) { var ID : func ID = ID }",
  "int ID ] ID : int , ID : bool ) : ID ( bool { call ID ( ) } func ID ( ) { var ID : func ID = [ }",
  "func ID ( ID : int , ID : [ ] int ) : bool { var ID : ID ID ( ) = int ( ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int ) ID bool { var : : ID ID ( ) = int ( ) } func ID ( ) { }",
  "func ID ( ID : int , ID : [ ] int ) ID bool { ( : : ID ID ( ) = int ( ) } func ID var ) { }",
  "func ID ( ID + bool ) : [ true - ( ID ( ( ID ) ) ) : - ( false ) ] [ ] bool { }",
  "func ID ( ID + bool ) : [ true - ( ID ( ( ID ) ) ) : - ( ) false ] [ ] bool { }",
  "func ID ( ID + bool ) : [ true - ( ID ( ( ID ) ) ) : - ( ) false ] [ ] bool { }",
  "func ID ( ( { var ID : int ID = ID [ ( ( ID ) ) ] [ ( true ) ] } func ID ) ) { }",
  "func ID ( ( { var ID : int } = ID [ ( ( ID ) ) ] [ ( true ) ] } func ID ) ) { ID",
  "func ID ( ( { var ID ( int } = ID [ ( ( ID ) ) ] [ : true ) ] } func ID ) ) { ID",
  "func ID ( ID : [ ID ( ) [ - true * false + } - ID ] [ true ] ] int ) { ID func ID ( ) { }",
  "func ID ( ID : [ ID ( ) [ - true * false + } - { ] [ true ] ] int ) { ID func ID ( ) ID }",
  "func ID ( ID : [ ID ( ) [ } true * false + - - { ] [ true ] ] int ) { ID func ID ( ) ID }",
  "func ID ( ) { call ID ( } - true / ( false - ID ( ) ) ) print ( 123 ) } func ID ( ) { -",
  "func ID ( ) { call ID ( } - true / ( false - ID ( ) ) ) print ( ( ) } func ID 123 ) { -",
  "func ID int ID : ( ) { var ID : bool var ID : int ID ( ) [ ( - ( - - ( - false ) ) ) ] = ( ID ) }",
  "func ID int ID : ( ) { var ID : bool var ID : int ID ( ) [ ( - ( - - ( - false ) ) ) ] = ( ID ) }",
  "func ID ( ) : bool { var ID : bool while * true and false - ( ( 123 ) ) * ( ID ) { } } func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool while * true and false } ( ( 123 ) ) * ( ID ) { } - func ID ( ) { }",
  "func ID ( ) : bool { var ID : bool while * true and false } ( { 123 ) ) * ( ID ) { } - func ID ( ) ( }",
  "func ID ( ) { return ) 123 / - - ( - - ( - ( ( 123 ) - ) ) }",
  "func ID ( ) { return ) 123 / - - ( - - ( - ( ( 123 ) - ) ) }",
  "func ID ( ) { ) ) 123 / - - ( - - ( - ( ( 123 return - ) ) }",
  "func ID ( ID : bool , ID : [ ] [ ID ( ID , ) + ( ( - ID ) ) ) ] bool ( ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ID ( ID , ) + ( ( - ID ) ) ) ] bool ( ID : [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ] [ ID ( ID , ) + ( ( - ID ) ) ) ] bool ( ID : [ ] bool ) { } func ID ( ) { }",
  "func ID , ID : bool ( ID : [ - ID ( ) [ ( - false ) ] ] int ) { } func ID ( ) { }",
  "func ID , ID : bool ( ID : [ ] ID ( ) [ ( - false ) ] - int ) { } func ID ( ) { }",
  "func ID , ID : bool ( ID : [ ] ID ( ) - ( [ false ) ] - int ) { } func ID ( ) { }",
  "func ID ( ) { var } : bool var ID : [ 123 * ID ( ) * true < - - - ID ] [ ] int ID",
  "func ID ( ) { var } : bool var ID : [ 123 * ] ( ) * true < - - - ID ID [ ] int ID",
  "func ID ( ) { var } : bool var ID : [ ( * ] 123 ) * true < - - - ID ID [ ] int ID",
  "func ID ( ID : [ - - ( ( true * ID ( 123 * ) ID ) ) ] [ ] [ ] int ) { }",
  "func ID ( ID : [ - - ( * true * ID ( 123 ( ) ID ) ) ] [ ] [ ] int ) { }",
  "func ID ( ID : [ - - ( } true * ID ( 123 ( ) ID ) ) ] [ ] [ ] int ) { *",
  "func { ( ID : [ true - ( - - 123 / false / false - false ) ] int ) { } func ID ( ) ID }",
  "func { ( ID : [ true - ( - - 123 / false false false - / ) ] int ) { } func ID ( ) ID }",
  "func { ( ID : - true - ( - - 123 / false false false [ / ) ] int ) { } func ID ( ) ID }",
  "func ID ( ID : int , ID : [ ] ( , ID : bool ) : [ ] [ int ID [ - 123 ] [ - ( ( false ) ) ] ) ] bool { }",
  "func ID ( ID : { , ID : [ ] ( , ID : bool ) : [ ] [ int ID [ - 123 ] [ - ( ( false ) ) ] ) ] bool int }",
  "func ID ( ID : { , ID : ) ] ( , ID : bool ) : [ ] [ int ID [ - 123 ] [ - ( ( false ) [ ] ) ] bool int }",
  "func ID ( ) : var ID { bool while ID ( ( false * - ID ) ) { } }",
  "func ID ( ) : var ID { bool while ID ( ( false } - ID ) ) { * }",
  "func ID ( ) : var ID { bool * ID ( ( false } - ID ) ) { while }",
  "func ID ( ID : bool ) { var ID : bool var : ID bool }",
  "bool ID ( ID : bool ) { var ID : func var : ID bool }",
  "bool ID ( ID : bool ) { var ID : func var : ID } bool",
  "func ID ( ( : int , ID : [ ] [ ] int ) : int { var ID : [ ] int } func ID ID ID : int ) { }",
  "func ID ( ( : int { ID : [ ] [ ] int ) : int { var ID : [ ] int } func ID ID ID : int ) , }",
  "func ID ( ( : int { ID : [ ] [ ] int ) : int { var ID : } ] int [ func ID ID ID : int ) , }",
  "func ID ( ) : [ ] int { var ID ID bool var : : int call ID ( ID ( true ) ) } func ID ( ) { }",
  "func ID ( ) : [ ] int { var ID ID bool var : : int call ID ( ID ( func ) ) } true ID ( ) { }",
  "func ID ( ) : [ ] int { var ID ID bool var : : int call ID ( ID ( func ) ) } true ID ( ) { }",
  "func ID ( ) : [ ( ( ID } ( - true ) ) ) ) ] [ ] bool { } func ID ( ) { (",
  "func ID ( ) : [ ( ( ID } ( ( true ) ) ) ) ] [ ] bool { } func ID ( ) { -",
  "func ID ( ) : [ ( ( true } ( ( ID ) ) ) ) ] [ ] bool { } func ID ( ) { -",
  "func ID bool ID : [ ID [ false / - - - - ( 123 ) * true ] ] ( ) { } func ID ( ) { }",
  "func ID bool ID : [ ID [ false / - - - - ( 123 { * true ] ] ( ) ) } func ID ( ) { }",
  "func { bool ID : [ ID [ false / - - - - ( 123 { * true ] ] ( ) ) } func ID ( ) ID }",
  "func ID ( - : int ) : int { print - 123 / ( false - ID + ( ID false ) ) }",
  "func ID ( { : int ) : int - print - 123 / ( false - ID + ( ID false ) ) }",
  "func ID ( { : int ) : int - print - ( / 123 false - ID + ( ID false ) ) }",
  "func ID ( ) { var ID : int var ID : [ ID ( false / - - - true * 123 ) ] } bool",
  "func ID ( ) : var ID { int var ID : [ ID ( false / - - - true * 123 ) ] } bool",
  "func ID ( ) : var ID { int var - : [ ID ( false / - ID - true * 123 ) ] } bool",
  "func ID ( ) { var ID ) [ ] int ID [ - - 123 * 123 * ( ( ID ) ) ] [ - ID ] = false call ID ( ) } func ID ( : { }",
  "func ID ( ) { var ID ) [ ] int ID } - - 123 * 123 * ( ( ID ) ) ] [ - ID ] = false call ID ( ) } func ID ( : { [",
  "func ID ( ) { var ] ) [ ID int ID } - - 123 * 123 * ( ( ID ) ) ] [ - ID ] = false call ID ( ) } func ID ( : { [",
  "func ID ( ) { var ID : [ ] [ ID [ ( true / ( ID ) / ID ] ] [ - ( ID ) ) ] int var ID : [ ] bool } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] [ ID } ( true / ( ID ) / ID ] ] [ - ( ID ) ) ] int var ID : [ ] bool } func ID ( ) { [",
  "func ID ( ) { var ID : [ ] [ ID } ( true / ( ID ) / ID ] ] [ - ( ID ) ) { int var ID : [ ] bool } func ID ( ) ] [",
  "func ID ( ID : [ ] [ ID ( ( 123 / ID [ ID ] [ ( - false ) ] / false ) ) ) int ] { }",
  "func ID ( ID : [ ] [ ID ( ( 123 / ID [ ID ] [ ( - false ) ] / false ) ) ) int ] { }",
  "func ID ( ID : [ ] [ ID ( ] 123 / ID [ ID ] [ ( - false ) ( / false ) ) ) int ] { }",
  "func ID ( ID : [ bool bool ) { var ID : [ false * ID [ ( true ) ] [ 123 ] ] int var ID : [ ] ] } func ID ( ) { }",
  "func ID ( ID : [ : bool ) { var ID bool [ false * ID [ ( true ) ] [ 123 ] ] int var ID : [ ] ] } func ID ( ) { }",
  "func ID ( ) { var ID : [ ] int false 123 / while * ( 123 * - - - ID ) { } call ID ( ) }",
  "func ID ( ) } var ID : [ ] int false 123 / while * ( 123 * - - - ID ) { { call ID ( ) }",
  "func ID ( ) } * ID : [ ] int false 123 / while * ( 123 var - - - ID ) { { call ID ( ) }",
  "func ID ( ) : func { return - - - 123 and - - ID / 123 == - 123 and - ID } int ID ( ) { }",
  "func ID ( ) : func { return - - - 123 and - - ID / 123 == - 123 } - ID } int ID ( ) { and",
  "func ID int ) : func { return - - - 123 and - - ID / 123 == - 123 } - ID } ( ID ( ) { and",
  "func ID ( ID bool int ) { var ID : int var ID : bool return } func ID ( ID : int ) : : { return ID }",
  "func return ( ID bool int ) { var ID : int var ID : bool return } func ID ( ID : int ) : : { ID ID }",
  "func return ( ID bool int ) { var ID : int var ID : bool return } func ID ( ID : int ) : : { ID ID }",
  "func ID ( ) : [ - 123 * - ID ( ) [ ( true ) ] [ - true ] int 123 ] / { } func ID ( ) { }",
  "func ID ( ) : [ ] 123 * - ID ( ) [ ( true ) - [ - true ] int 123 ] / { } func ID ( ) { }",
  "func ID ( ) : [ ] 123 * ] ID ( ) [ ( true ) - [ - true - int 123 ] / { } func ID ( ) { }",
  "func ID ( [ : bool ) : [ - ID [ true * ( - ( true ) ) ] [ false ] ] [ ] ID ] [ ] bool { }",
  "func ID ) [ : bool ( : [ - ID [ true * ( - ( true ) ) ] [ false ] ] [ ] ID ] [ ] bool { }",
  "func ID - [ : bool ( : [ ) ID [ true * ( - ( true ) ) ] [ false ] ] [ ] ID ] [ ] bool { }",
  "func ID ( ID : bool ) : [ 123 + * [ false * - true ID ( ( - - ( - ( ID ) ) ) ) ] + false ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : ID ) : [ 123 + * [ false * - true bool ( ( - - ( - ( ID ) ) ) ) ] + false ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : ID ) : [ 123 + * [ false * - true bool ( ( - - ( - ( ID ) ) ) ) ] + false ] [ ] bool { } func ID ( ) { }",
  "func ID ( ID : bool , } : [ ( - ( ( - ( ( ID ) ) ) ) ) ] bool , ID : bool ) { ID",
  "func ID ( ID : bool , } ] [ ( - ( ( - ( ( ID ) ) ) ) ) : bool , ID : bool ) { ID",
  "func ID ( ID : bool , } ] ( ( - ( ( - ( [ ID ) ) ) ) ) : bool , ID : bool ) { ID",
  "func ID ( ) { var ID : int [ var ID : { ID ( ) [ ID ] ] int var ID : bool } }",
  "func ID ( ) { var ID : int [ var ID : int ID ( ) [ ID ] ] { var ID : bool } }",
  "func ID ( ) { var ID : int [ var ID : int ID ( ) [ ID ] ] { var ID : bool } }",
  "func ID ( ) : ] ID ( ( - ( false / - true ) ) ) ] [ [ [ ] bool { } func ID ( ) { }",
  "func func ( ) : ] ID ( ( - ( false / - true ) ) ) ] [ [ [ ] bool { } ID ID ( ) { }",
  "func func ( ) : ] ID ( ( - ( false ( - true ) ) ) ] [ [ [ ] bool { } ID ID / ) { }",
  "func ID ( ) { var ID : [ ( false / false * - ( - false ) ) ] var bool ID : int } func ID ( ) { }",
  "ID ID ( ) { var ID : [ ( false / false * - ( - false ) ) ] var bool ID : int } func func ( ) { }",
  "func ID ( ) : int { var ID : [ ) ( ID [ ID ( ID ) ] [ - false ] ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : ) [ ( ID [ ID ( ID ) ] [ - false ] ] int } func ID ( ) { }",
  "func ID ( ) : int { var ID : ) [ ( ID [ ID ( ID ) ] [ - false ] ] int } func ID ( ) { }",
  "func ID ( ) : bool { return } func ( ID ) { var ID : bool }",
  "func ID ( ) : bool { return } func ( var ) { ID ID : bool }",
  "func ID return ) : bool { ( } func ( var ) { ID ID : bool }",
  "func ID ( ID : / ] [ false [ - ID ( ) [ true > - - ( - ( true ) ) ] [ ( ID ) ] ] bool ) { }",
  "func ID ( ID : / > [ false [ - ID ( ) [ true ] - - ( - ( true ) ) ] [ ( ID ) ] ] bool ) { }",
  "func ID ( ] : / > [ false [ - ID ( ) [ true ] - - ( - ( true ) ) ] [ ( ID ) ] ID bool ) { }",
  "func ID ( ) : bool { var ID : int { ID [ false * - - - ( - false } / - false ] = - false } while false { ) } func ID ( ) { }",
  "func ID ( ) : bool { var ID : int { ID [ false * - - - ( - ( } / - false ] = - false } while false { ) } func ID false ) { }",
  "func ID ( ) : bool { var ID : int { ID [ } * - - - ( - ( false / - false ] = - false } while false { ) } func ID false ) { }",
  "func ID ( ) { var ID : int print { + 123 + 123 / ( false ) if ( true ) true } } func ID ( ) { }",
  "func ID ( ) true var ID : int print { + 123 + 123 / ( false ) if ( { ) true } } func ID ( ) { }",
  "func ID ( ) true var ID : int print { + 123 + 123 / ( ( ) if false { ) true } } func ID ( ) { }",
  "func ID ( int : int { var ID : [ ID * false * ( ( - ID ) ) ] int var ID : ) }",
  "func ID ( int : int { var ID : [ ID * false * ( ( } ID ) ) ] int var ID : ) -",
  "func ID ( ID : bool , ID : bool ) { var ID : int while false / ( - - ID { * ID ) } } func ID ( ) { }",
  "func ID ( ID : bool , ID : bool ) { var ID : int while false / ( - - ID { * ID ) } } func ID ( ) { }",
  "func ID ( ID : bool , : : bool ) { var ID ID int while false / ( - - ID { * ID ) } } func ID ( ) { }",
  ") ID ( ) : bool { var ID : [ ( ( ( ID ) ) ) ] bool } func ID ( func { }",
  ") ID ( ) : bool { var ID : [ ( ( ( ID ) ) ) ] bool } func ID ( func { }",
  ") { ( ) : bool ID var ID : [ ( ( ( ID ) ) ) ] bool } func ID ( func { }",
  "func ID ( ) { var ID : int } func ID ( ID : bool , ID : [ ] int ) : { { print - ID int } }",
  "func : ( ) { var ID ID int } func ID ( ID : bool , ID : [ ] int ) : { { print - ID int } }",
  "func : ( ) { var ID ID int } func ID ( ID : } , ID : [ ] int ) : { { print - ID int bool }",
  "func ID ( ) : bool { } func ID ( ID : ( ) : int { while bool - ( false ) ) { } if true { } }",
  "func ID ( ) : bool } { func ID ( ID : ( ) : int { while bool - ( false ) ) { } if true { } }",
  "func ID ( ) : bool } { bool ID ( ID : ( ) : int { while func - ( false ) ) { } if true { } }",
  "func ID ( ID : int , ID } bool ) { call ID ( ) if 123 * 123 * ( true ) { : }",
  "func ID ( ID : int , ID bool } ) { call ID ( ) if 123 * 123 * ( true ) { : }",
  "( ID func ID : int , ID bool } ) { call ID ( ) if 123 * 123 * ( true ) { : }",
  "func ) ( ID : [ - ( 123 + - - false / ( - ID ) * ID - - ( - ID ) ID ] bool ) { } func ID ( ) { }",
  "func ) { ID : [ - ( 123 + - - false / ( - ID ) * ID - - ( - ID ) ID ] bool ) { } func ID ( ) ( }",
  "func ) { ID : ) - ( 123 + - - false / ( - ID [ * ID - - ( - ID ) ID ] bool ) { } func ID ( ) ( }",
  "func ID ( ) { var ID : bool { var ID : int if } ID ( ) [ false ] [ ID ] { - } }",
  "func ID ( ) { var ID : bool { var ID : ] if } ID ( ) [ false int [ ID ] { - } }",
  "func ID ( ) { var ID : bool { var ID : ] if } ID ( false [ ) int [ ID ] { - } }",
  "func : ( ) : [ ] [ ] bool { var ID ID [ - - ID [ - ID ] [ - - true ] ] int }",
  "func : ( ) : [ ] - ] bool { var ID ID [ - - ID [ - ID ] [ [ - true ] ] int }",
  "func ID ( ID : bool ) { var ID : int var ID : [ ID ID - false * ( ( - - ( ) ) ) ] [ ] int }",
  "func ID ( ID : bool ) { var ID : int var - : [ ID ID ID false * ( ( - - ( ) ) ) ] [ ] int }",
  "func ID ( ID : bool ) { var ID : int var ) : [ ID ID ID false * ( ( - - ( ) - ) ] [ ] int }",
  "func ID ( ID : [ ] bool , ID : [ ( ID ( - ( ID ) ) } ] [ ] [ ] [ ] [ ] bool , ID : int ) { } func ID ( ) { )",
  "func ID ( ID : [ ] bool , ID : [ ( ID ( - ( ID [ ) } ] [ ] [ ] ) ] [ ] bool , ID : int ) { } func ID ( ) { )",
  ": ID ( ) : [ ] bool { var ID : int var ID func [ false - false * 123 + true ] int }",
  ": ID ( ) ID [ ] bool { var : : int var ID func [ false - false * 123 + true ] int }",
  ": ID ( ) ID [ ] bool { var : : int var ID func [ false - false * 123 + true ] int }",
  "func ID ( ID : bool , ID : bool ) { var ID : bool return - ID ( ) [ ( - false } ] )",
  "func ID : ID : bool , ID ( bool ) { var ID : bool return - ID ( ) [ ( - false } ] )",
  "func ID : ID : bool , ID ( bool ) { var ID : bool return - ID ( ) [ ( - false } ] )",
  "func ID ( ) : int - if { ID [ ID ( ) - ( ID ) ] { } if ID { } }",
  "func ID ( ) : int - if { ID [ ID ( ) - ( ID ) ] { } if ID } } {",
  "func ID ( ) : int - if { ID [ ID ( ) - ( ID ) ] { } if ID } } {",
  "func ID ( ) { var ID : bool var ID : int print - ( - ( false if ) ) 123 { } }",
  "{ ID ( ) func var ID : bool var ID : int print - ( - ( false if ) ) 123 { } }",
  "{ ID ( bool func var ID : ) var ID : int print - ( - ( false if ) ) 123 { } }",
  "] ID ( ID : [ ] [ ID ( ) [ false * ( ( ID ) ) * ID func [ false ] ] int ) { } func ID ( ) { }",
  "] ID ( ID : [ ] [ ID ( ) [ false * ( ( ID ) ) * ] func [ false ID ] int ) { } func ID ( ) { }",
  ": ID ( ID func [ 123 * ( false / - ID ( ) - ( - - - - ( - ID ) ) ) ] int ) { }",
  ": ID ( ID func [ 123 * ( false / - ID ( ) - ) - - - - ( - ID ) ) ) ] int ( { }",
  ": ID ( ID ID [ 123 * ( false / - func ( ) - ) - - - - ( - ID ) ) ) ] int ( { }",
  "func ID ID ID : bool , ( : bool , ID : [ ] int ) { var ID : [ ] int if 123 - 123 - ID { } if - 123 { } }",
  "func ID ID ID : bool , ( : bool , ID [ [ ] int ) { var ID : : ] int if 123 - 123 - ID { } if - 123 { } }",
  "func ID ID ID : if , ( : bool , ID [ [ ] int ) { var ID : : ] int if 123 - 123 - ID { } bool - 123 { } }",
  "func ID ( ) : [ true * ( ( ID ( 123 ) ) ] ) int { }",
  "[ ID ( ) : func true * ( ( ID ( 123 ) ) ] ) int { }",
  "[ ID ( ( : func true * ( ( ID ) 123 ) ) ] ) int { }",
  "func ID ( ) { var ID : [ ID ( ] [ false / - ( ID ) ) [ ID ] ] bool }",
  "[ ID ( ) { var ID : [ ID ( ] func false / - ( ID ) ) [ ID ] ] bool }",
  "[ / ( ) { var ID : [ ID ( ] func false ID - ( ID ) ) [ ID ] ] bool }",
  "func ID ( ID : bool ) : bool { var ID : { ] [ ] int if ID ( 123 ) [ } if ( - ID ) { } }",
  "func ID ID ID : int ) : int { var ID : int var ID : bool } func ID ( ID : [ 123 + ( - - true ] int ) { }",
  "func ID ID ID : int ) : int { [ ID : int var ID : bool } func ID ( ID : var 123 + ( - - true ] int ) { }",
  "func ID ID ID : int ) : int { [ ID ID int var ID : bool } func : ( ID : var 123 + ( - - true ] int ) { }",
  "func ID ( ) ] [ ID ( ) - - ID [ - - false / false * ID : [ ID ] - - - - false ] bool { } func ID ( ) { }",
  "func ID ( ) ] [ ID ( ) - - ID [ - - false / false * ID : [ ID ] - - - func false ] bool { } - ID ( ) { }",
  "func ID ( ) ] [ ID ( ) - - ID [ - - false / false * ID : [ ID ] - - - func false ] bool { } - ID ( ) } {",
  ") ID ( func : bool { var ID : bool var ID : [ ] int call ID ( ) }",
  ") ID ( func : ID { var bool : bool var ID : [ ] int call ID ( ) }",
  ") ID ( func : ID { var bool : bool var ID : [ ] int call ID ( ) }",
  "func ID ( ID : int , ID : print ] [ ] bool , ID : bool ) : bool { var ID : int [ ID }",
  "} ID ( ID : int , ID : print ] [ ] bool , ID : bool ) : bool { var ID : int [ ID func",
  "} ID ] ID : int , ID : print ] [ ( bool , ID : bool ) : bool { var ID : int [ ID func",
  "func ID ( ID : [ ] [ ] [ ] int , ID : [ ] [ ) ID ( ( ) ] bool ) { } func ID ( ) { }",
  "func ID [ ID : [ ] [ ] ( ] int , ID : [ ] [ ) ID ( ( ) ] bool ) { } func ID ( ) { }",
  "} ID [ ID : [ ] [ ] ( ] int , ID : [ ] [ ) ID ( ( ) ] bool ) { } func ID ( ) { func",
  "func ID ( ID : bool ) { call ID ( ID [ ( ( ID ) ) ] [ ID ] ID while ( ) ) { } } func ID ( ) { }",
  "func ID ID ID : bool ) { call ID ( ( [ ( ( ID ) ) ] [ ID ] ID while ( ) ) { } } func ID ( ) { }",
  "func ID ID ID : bool ) { call ( ID ( [ ( ( ID ) ) ] [ ID ] ID while ( ) ) { } } func ID ( ) { }",
  "func ID ( ] : [ ] bool { var ID : int var ID : [ ( ID ( ( - - - - true ) ) ) ] [ ] [ ) int }",
  "func ID ( ] : [ ] bool { var ID ID int var ID : [ ( : ( ( - - - - true ) ) ) ] [ ] [ ) int }",
  "func ID ( ID : int , ID * [ ( false : ( - ( ID ) ) ) ] [ ] [ ] int ) { }",
  "func ID ( ID : int , ID * [ ( false : ( - ) ID ( ) ) ] [ ] [ ] int ) { }",
  "func ID ( - : int , ID * [ ( false : ( ID ) ID ( ) ) ] [ ] [ ] int ) { }",
  "func ID ( ID : bool , ID : int while ID : int ) { , - 123 * - - - ID ( ) { } }",
  "func ID ( ID : bool , ID : int while ID : , ) { int - 123 * - - - ID ( ) { } }",
  "func ID ( ID : bool , ID : int while ID : , ) { int - ) * - - - ID ( 123 { } }",
  "func ID ( ) : - { ID ( ( false - ( bool ( ID ) ) ) ) = ( - ID ) } func ID ( ) { }",
  "func ID ( ) : - { ID ( ( false - ( bool ( ID ) ) ) ) = ( - ID ) } func ID ( ) { }",
  "func ID ( ) : - { ID ( ( false - ( bool ( ID ) ) ) ) = ( - ID ) } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ ) ( ) [ ( - ID ( ID ) ] ] bool ) { }",
  "func ID ( ID ) bool , ID : [ : ( ) [ ( - ID ( ID ) ] ] bool ) { }",
  "func ID ( ID ) bool ID ID : [ : ( ) [ ( - , ( ID ) ] ] bool ) { }",
  "ID ID ( func : int ) { var ID : [ ] int return ID * ( ID ) } func ID ( ) { }",
  "ID ID ( func : int ) { var ID : [ ] int return ID * ( ID ) } func ID ( ) { }",
  "ID ID ( func : int ) { var ID : ( ] int return ID * [ ID ) } func ID ( ) { }",
  "func ID ( ) { { var ID : ] ID [ - true and - - false int = false ID = - ( ID ) } ID = ( ( - ( false ) ) ) } func ID ( ) { }",
  "func ID ( ) { { var ID : ] ID [ - true and - - false int = false ID = - ( ID ) } ID = ( ( - ( false ) ) ) } func ID ( ) { }",
  "func ID ( ) { { var ID : ] ID [ - true and - - false int = false ID = - ( ) ) } ID = ( ( - ( false ) ) ) } func ID ( ID { }",
  "func ID ( ID : int ) { var ID : bool ID ( false <= ( ( ( ID ) ) ) ) = - - - ( ( true ) } )",
  "func ID ( ID : int ) { var ID : bool ID ( false <= ( ( ( ID ) ) ) ) = - - - ( ( true ) } )",
  "func ID ( ID : int ) { var ID : bool - ( false <= ( ( ( ID ) ) ) ) = ID - - ( ( true ) } )",
  "func ID ( ID : int , ID : ) ) { var ID : int return ID ( bool [ true ] } func ID ( ) { }",
  "func ID ( ID : int , ID : ) ) { ( ID : int return ID var bool [ true ] } func ID ( ) { }",
  "func ID ( ID : int , ID ( ) ) { ( ID : int return ID var bool [ true ] } func ID : ) { }",
  "ID func ( ID : [ - ( 123 / - 123 * ( ID ( ID ) ) ) ] int ) { } func ID ( ) { }",
  "ID func ( ID : [ - ( 123 } - 123 * ( ID ( ID ) ) ) ] int ) { / func ID ( ) { }",
  "func ID ( ID : [ 123 > ( true / ID ( ) - ( false - ) ) ] bool ) { }",
  "func ID ( ID : [ 123 > ( true / ID ( ) - ( false - ) ) ] bool ) { }",
  "- ID ( ID : bool , ID : [ - 123 / false func false * true * 123 + true ] bool , ID : bool ) { }",
  "- ID ( ID : bool , ID : [ - 123 / false ) false * true * 123 + true ] bool , ID : bool func { }",
  "- ID : ID : bool , ID : [ - 123 / false ) false * true * 123 + true ] bool , ID ( bool func { }",
  "func ID ( ) { var ID : [ ] } ID ( ) [ - - - ( ID ) ] [ - false ] = false int func ID ( ) { }",
  "func ID ( ) { var ID : [ ] } ID ( ) [ - - - ( ] ) ] [ - false ID = false int func ID ( ) { }",
  "func ID ( ID : [ false / - 123 / false ] [ ] bool , ID : bool ) { [ ID : var ] bool }",
  "func ID ( ID : [ false / - 123 / false ] [ ] bool ID , : bool ) { [ ID : var ] bool }",
  "func ID ( ID : [ false / : 123 / false ] [ ] bool ID , - bool ) { [ ID : var ] bool }",
  "func ID ( ) { var ID : } var ID : [ false * true + 123 / ( 123 ) - ( false ) ] [ ] bool int",
  "func ID ( ) { var ID : } var ID : [ false * true + 123 / ( 123 ) int ( false ) ] [ ] bool -",
  "func ID ( ) { var ID : } var ID : [ false * true + 123 / ) 123 ( int ( false ) ] [ ] bool -",
  "func ID ( ) while var ID : bool { return ID ( ) [ - 123 + true - false ] [ ( ID ) ] } { - ( ID ) { } } func ID ( ) { }",
  "func ID ( ) while var ID : bool { return ID ( ) [ - 123 + true - false ] [ ( ID ) ] } { - ( ID ) { } } func ID ( ) { }",
  "func ID ( ) while var ID : bool { return - ( ) [ - 123 + true ID false ] [ ( ID ) ] } { - ( ID ) { } } func ID ( ) { }",
  "func ID ( ID : bool , ID : [ 123 + true ( ( ID [ - ( ID ) ] [ ID ] ) * ( true ) ] bool , ID : int ) { } func ID / ) { }",
  "func ID ( ID : bool , } : [ 123 + true ( ( ID [ - ( ID ) ] [ ID ] ) * ( true ) ] bool , ID : int ) { } func ID / ) { ID",
  "func ID ( ID : bool , } : [ 123 + true ( ( ID [ - [ ID ) ] ( ID ] ) * ( true ) ] bool , ID : int ) { } func ID / ) { ID",
  "func ID ( ) : bool { var ID : int var ID : int { if - false + true / ID * - ID + - ID { } print ID } ID func } ( ) { }",
  "func ID ( ) : bool { var ID + int var ID : int { if - false + true / ID * - ID : - ID { } print ID } ID func } ( ) { }",
  "func ID ( ) : bool { var ID + int var ID : int { if - false + } / ID * - ID : - ID { true print ID } ID func } ( ) { }",
  "func ID ( ) : int { var ID : int } func ID ( ) : int { var ID ) [ ] int if ( ID : { } call ID ( ) }",
  "func ID ( ) : int : var ID { int } func ID ( ) : int { var ID ) [ ] int if ( ID : { } call ID ( ) }",
  "func ID ( ) : int : var ID { int } func ID ( ) : int { var ID ) [ ] int if } ID : { } call ID ( ) (",
  "func ID ( ) : int { var int : int var ID : bool } func ID ( ) : bool { var ID : ID call ID ( ) return }",
  "func ID ( ) : int { var int : int var ID : bool } func ID ( ) : bool { var ID : ID call ID ( ) return }",
  "func ID ( ) : int { var int : int var ID : bool } func ID ( ) : var { bool ID : ID call ID ( ) return }",
  "func ID ( ) { var ID : [ ( ID [ ( false ) ] [ ( ( ID ) ) ] ) ] [ ] bool var ID : bool } func { ( ) ID }",
  "func ID ( ) { var ID : [ ( ( [ ( false ) ] [ ( ( ID ) ) ] ) ] [ ] bool var ID : bool } func { ID ) ID }",
  "func ID : ) : bool { var ID : [ true / ID [ - - 123 / 123 / - ( 123 ) ] [ ID ] ] bool var ID ( bool }",
  "func ID : ) : bool { var ID : [ true / ID [ - - 123 / 123 / - ( 123 ) ] [ ID ] bool ] var ID ( bool }",
  "func ID : ) : bool { var ID : [ var / ID [ - - 123 / 123 / - ( 123 ) ] [ ID ] bool ] true ID ( bool }",
  "func : ( ID ID [ ] [ false * false > ( - - ID [ ID ] ) ] bool ) { }",
  "func : ( ID ID [ ] [ false * false > ( - [ ID - ID ] ) ] bool ) { }",
  "func : ( ID ID [ ] [ false false * > ( - [ ID - ID ] ) ] bool ) { }",
  "] ID ( ID : int ) : [ ] bool { var ID : [ ( ( ID ) ) ] [ func bool var ID : bool } func ID ( ) { }",
  "] ) ( ID : int ) : [ ] bool { var ID : [ ( ( ID ) ID ] [ func bool var ID : bool } func ID ( ) { }",
  "ID ) ( ID : int ) : [ ] bool { var ID : [ ( ( ] ) ID ] [ func bool var ID : bool } func ID ( ) { }",
  "func ID ( ID : [ 123 / ( ( ID >= - ) ID ) * ( ID ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( ID : [ 123 / ( ( ID >= ID ) - ) * ( ID ) ] [ ] [ ] bool ) { } func ID ( ) { }",
  "func ID ( bool : [ 123 / ( ( ID >= ID ) - ) * ( ID ) ] [ ] [ ] ID ) { } func ID ( ) { }",
  "func ID ( ID : int ] int ) { var ID : [ var ID : [ false - 123 / true - 123 ] bool }",
  "func ID ( ID : int ] int ) ID var ID : [ var { : [ false - 123 / true - 123 ] bool }",
  "func ID ( ) : [ ] while { int 123 / ID [ 123 + ( ID ) + 123 ] * ( false ) { } call ID ( ) } func ID ( ) { }",
  "} ID ( ) : [ ] while { int 123 / ID [ 123 + ( ID ) + 123 ] * ( false ) { } call ID ( ) } func ID ( ) { func",
  "} ID ( ) : [ ] while { int 123 / ID [ 123 + ) ID ) + 123 ] * ( false ) { } call ID ( ) } func ID ( ( { func",
  "func ID ( ID : [ ] int , ID : bool , ID : ( ) : int { var ID : [ ( ID ) ] int var ID : bool } func ID int ) { }",
  "func ID ( ID : [ ] int , ID : bool , ID : ( ) : int { var ID : [ ( ID ) ] int : ID var bool } func ID int ) { }",
  "func ID ( ID : [ ] int , ID : bool , ID : ( { : int { var ID : [ ( ID ) ] int : ID var bool } func ID int ) ) }",
  "func ID ( ) [ return } func ID ( ) : { - true ] bool { var ID : [ ] bool }",
  "func ID ( ) [ return } func ID ( ) : { - true ] bool { var } : [ ] bool ID",
  "func ID ( ) [ return } func bool ( ) : { - true ] bool { var } : [ ] ID ID",
  "func ID ( ID : bool } : bool { var ID : int while - - ID ( ) [ - ( 123 ) ] { ) } func ID ( ) { }",
  "func ID ( ID : bool } : bool { var ID : int ] - - ID ( ) [ - ( 123 ) while { ) } func ID ( ) { }",
  "func ID ( ID : bool } : bool { var ID : int ] - - ID ( ) [ - ( 123 func while { ) } ) ID ( ) { }",
  "func ID ( ) { var ID : int var var : int return } func ID ( ) { ID ID : int }",
  "func ID ( ) { var ID : int var var : int return } func ) ( ID { ID ID : int }",
  "func ID ( ) { var ID : int var { : int return } func ) ( ID var ID ID : int }",
  "func ID ( ) { ID ( ) func ( true and - - ( false ) and false ) } = ID ( ) { }",
  "func ID ( ) { ID - ) func ( true and - ( ( false ) and false ) } = ID ( ) { }",
  "func ) ( ) { ID - ) func ( true and - ( ( false ID and false ) } = ID ( ) { }",
  "func ID ( ID : int ) : bool { / ID : [ false * ( 123 + false ) var ID ] int } func ID ( ) { }",
  "func ID ( ID : int ) : bool { / ID : [ false * ( 123 + ID ) var ID ] int } func false ( ) { }",
  "func ID ( ID : : ) int bool { / ID : [ false * ( 123 + ID ) var ID ] int } func false ( ) { }",
  "func ID ( ID : [ ID ( ) + true ] [ true * false - - ID + ID ] int { ) }",
  ") ID ( ID : [ ID ( func + true ] [ true * false - - ID + ID ] int { ) }",
  ") ID ( ID : [ ID ( func + true true [ ] * false - - ID + ID ] int { ) }",
  "func ID ( ID : bool , ID : int ) : [ - ID ( ) [ 123 / - ( ( ( ( - - ID ) ) ) ) { ( true ) ] [ ID ] ] bool * } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ID : [ - ID ( ) [ 123 / - ( ( ( ( - - ID ) ) ) ) { ( true ) ] [ ) ] ] bool * } func ID ( ) { }",
  "func ID ( ID : bool , ID : int ID : [ - ID ( ) [ 123 / - ( ( ( ) - - ID ) ( ) ) { ( true ) ] [ ) ] ] bool * } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ - true + var - ( false ) ) - true ] [ ] bool ( ID : int } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ - true true var - ( false ) ) - + ] [ ] bool ( ID : int } func ID ( ) { }",
  "func ID ( ) : int { var ID : [ - true true var - ( false ) ) - + ] [ ] bool ( func : int } ID ID ( ) { }",
  "func ID ( ID : int ) { } ID : int var ID : [ ] [ ] int var",
  "func ID ( ID int : ) { } ID : int var ID : [ ] [ ] int var",
  "func ID ( ID : bool ) : [ ] [ ] bool { call ID ( ( ( [ 123 ] ) ) call ID ID ) }",
  "call ID ( ID : bool ) : [ ] [ ] bool { func ID ( ( ( [ 123 ] ) ) call ID ID ) }",
  "call ID ( ID : bool ) : [ ] [ ] bool { func 123 ( ( ( [ ID ] ) ) call ID ID ) }",
  "func ID ( ID : int ) : [ var bool { ] ID : bool var ID : [ ] int if - ID { } } func ID ( ) { }",
  "func ID ( ID : int ) : [ var bool { ] ID : bool var ID : [ ] int if - ID { } } func ID ( ) { }",
  "func ID ( ID : int ) : [ var bool { ] ID : bool var ID : [ } int if - ID { } ] func ID ( ) { }",
  "func ID ( ) : [ false * - false + - - ( ID ID ( ) ) - ID ] [ ] [ ] bool { } func ID ( ) { }",
  "func ID ( ) : [ false * - { + - - ( ID ID ( ) ) - ID ] [ ] [ ] bool { } func ID ( ) false }",
  "func ID ( ) : [ false * - { + - - ( ID } ( ) ) - ID ] [ ] [ ] bool { ID func ID ( ) false }",
  "func ID ( ) { { var ID : [ ID bool var ID : [ ] bool call ID ( ) { var ] : int } } }",
  "func ID ( ) { { var ID : [ ID bool ID var : [ ] bool call ID ( ) { var ] : int } } }",
  "var ID ( ) { { var ID : [ ID bool ID func : [ ] bool call ID ( ) { var ] : int } } }",
  "func ID ( ) : int { var ID : int var ID : int if false * false != { / ( ID ) ID } call ID ( ) } func ID ( ) { }",
  "func ID ( ) false int { var ID : int var ID : int if false * : != { / ( ID ) ID } call ID ( ) } func ID ( ) { }",
  "func ID ( ID : bool ) { } func ID ) ) { var ID : [ ( ( ( false ) ( ) ] int }",
  "func ID ( ID : bool ) { } func ID ) ) { var ID : [ ( ( ( false ) ( ) ] int }",
  "func ID ( ID : bool ) { } func ID ) ) { [ ID : var ( ( ( false ) ( ) ] int }",
  "func ID ( ID : , int ID : [ ID ( ) [ ( true < true ) ] [ ( ( - ( false ) ) ) ] ] [ ] [ ] [ ] int , ID : [ ] bool ) { }",
  "func ID ( ID : , int ID : [ ID ( ) [ ( true < true ) ] [ ( ( - ( false ) ) ) ] ] [ ] [ ] [ ] int , ID : [ ] bool ) { }",
  "func ID ( ID : , int ID : [ ID ( ) [ ( true < true ) ] [ ( ( - ( false ) ) ) ] ] [ ] [ ] [ ] int ) ID : [ ] bool , { }",
  "func ID ( ID bool : , ID : bool , ID : int ) : [ ] [ ] int { if true / true { } } func ID ( ) { }",
  "func ID ( ID , : , ID : bool bool ID : int ) : [ ] [ ] int { if true / true { } } func ID ( ) { }",
  "func ID ( ID , : ID , : bool bool ID : int ) : [ ] [ ] int { if true / true { } } func ID ( ) { }",
  "func ID ( ID ID [ : [ ( ID * true * ID ) ] [ ID ] ] [ ] int ) { } func ID ( ) { }",
  "[ ID ( ID ID [ : [ ( ID * true * ID ) ] [ ID ] ] func ] int ) { } func ID ( ) { }",
  "func ID ( ) : [ ID [ ] int { var ID : [ ] bool var ] : [ ] int return - ( false ) }",
  "func ID ( ID : bool ) : int { var ID : [ int 123 - false > ( ID ) ] [ ] - }",
  "func ID ( ID : bool ) : int { var ID : [ int 123 - false > ( ID ) ] [ ] - }",
  "func ID ( ID : bool ) : int { var ID : [ int 123 - false > ( ID ) ] [ ] - }",
  "func ( ( ID : bool , ID : bool ) : [ - ID [ ( ID ) ] ] bool { } func ID ID ) { }",
  "func ( ( ID : bool , ID : bool ) bool [ - ID [ ( ID ) ] ] : { } func ID ID ) { }",
  "func ( ( ID : ] , ID : bool ) bool [ - ID [ ( ID ) bool ] : { } func ID ID ) { }",
  "func ID ( ) { var ID : int while ID ( ) - - - - [ ( ID ) ] { } print ID }",
  "func ID ( ) ( var ID : int while ID { ) - - - - [ ( ID ) ] { } print ID }",
  "func ID } ) ( var ID : int while ID { ) - - - - [ ( ID ) ] { ( print ID }",
  "func bool ( ID : [ ] [ ] bool , ID : [ ] [ ] bool , ID : int ) : [ - - ID ] [ ] [ ] ID { }",
  "func bool ( ID : [ ] [ ] bool , ID : [ ] : ] bool , ID : int ) [ [ - - ID ] [ ] [ ] ID { }",
  "func bool ( ID : [ ] } ] bool , ID : [ ] : ] bool , ID : int ) [ [ - - ID ] [ ] [ ] ID { [",
  "func ID } ) { var ID : [ ( - - ID [ - ( true ) ] [ ( 123 ) ] ) ] int (",
  "func ID } ) { var ( : [ ( - - ID [ - ID true ) ] [ ( 123 ) ] ) ] int (",
  "true ID } ) { var ( : [ ( - - ID [ - ID func ) ] [ ( 123 ) ] ) ] int (",
  "func ID ( ID : bool , ID : [ ] bool , ID : bool ) : int { return } func ID ( ID : bool , ID : bool , ] : [ ID bool ) { }",
  "func ID ( ID : bool , ID : [ ] bool , ID : ) bool : int { return } func ID ( ID : bool , ID : bool , ] : [ ID bool ) { }",
  "func ID ( ] : bool , ID : [ ] bool , ID : ) bool : int { return } func ID ( ID : bool , ID : bool , ID : [ ID bool ) { }",
  "func ID ( ID : int , ID + int ) : bool { var ID : [ false : ( - ( true ) ) + - - ID ] [ ] [ ] int var ID : [ ] [ ] [ ] [ ] bool }",
  "func ID ( ID : int , ID + int ) : bool { var ID : [ false : ( - ( ] ) ) + - - ID ] [ ] [ true int var ID : [ ] [ ] [ ] [ ] bool }",
  "func ID ( ID : ) , ID + int int : bool { var ID : [ false : ( - ( ] ) ) + - - ID ] [ ] [ true int var ID : [ ] [ ] [ ] [ ] bool }",
  "func ID ( ID : bool , ID : int , ID : [ ID * ( 123 / ( - * ) * - - - ( false ) ) 123 - ( - ID ) ] int ) { }",
  "func ID ( ID : bool , ID : int , ID : [ ID * ( 123 / ( - * ) * - ( - - false ) ) 123 - ( - ID ) ] int ) { }",
  "func ID ( ID : bool , ID : int , ID : [ - * ( 123 / ( ID * ) * - ( - - false ) ) 123 - ( - ID ) ] int ) { }"
]